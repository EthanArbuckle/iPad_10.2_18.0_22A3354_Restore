id UIKeyCommand.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *rawValue;
  uint64_t v8;
  unint64_t object;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  Swift::String v16;
  id v17;
  void *ObjCClassFromMetadata;
  void *v19;
  char v21;

  countAndFlagsBits = *(_QWORD *)a1;
  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = one-time initialization token for keyEquivalentToKeyInputMap;
  swift_bridgeObjectRetain();
  if (v6 != -1)
    swift_once();
  rawValue = keyEquivalentToKeyInputMap._rawValue;
  if (!*((_QWORD *)keyEquivalentToKeyInputMap._rawValue + 2))
  {
    object = v1;
    v21 = v4;
    if ((v3 & 1) == 0)
      goto LABEL_7;
LABEL_11:
    if ((v3 & 2) == 0)
    {
      v12 = 0x10000;
      if ((v3 & 4) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
    v12 = 196608;
    if ((v3 & 4) != 0)
      goto LABEL_13;
    goto LABEL_14;
  }
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, v1);
  object = v1;
  if ((v10 & 1) != 0)
  {
    v11 = (uint64_t *)(rawValue[7] + 16 * v8);
    countAndFlagsBits = *v11;
    object = v11[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v21 = v4;
  if ((v3 & 1) != 0)
    goto LABEL_11;
LABEL_7:
  if ((v3 & 2) == 0)
  {
    v12 = 0;
    if ((v3 & 4) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  v12 = 0x20000;
  if ((v3 & 4) != 0)
LABEL_13:
    v12 |= 0x40000uLL;
LABEL_14:
  if ((v3 & 8) == 0)
  {
    if ((v3 & 0x10) == 0)
      goto LABEL_16;
LABEL_25:
    v12 |= 0x100000uLL;
    if ((v3 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  v12 |= 0x80000uLL;
  if ((v3 & 0x10) != 0)
    goto LABEL_25;
LABEL_16:
  if ((v3 & 0x20) != 0)
LABEL_17:
    v12 |= 0x200000uLL;
LABEL_18:
  swift_bridgeObjectRetain();
  specialized Collection.first.getter(countAndFlagsBits, object);
  v14 = v13;
  swift_bridgeObjectRelease();
  if (v14)
  {
    v15 = Character.isUppercase.getter();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
    {
      static Semantics.v3.getter();
      if ((isLinkedOnOrAfter(_:)() & 1) == 0)
      {
        v16 = String.lowercased()();
        countAndFlagsBits = v16._countAndFlagsBits;
        swift_bridgeObjectRelease();
        v12 |= 0x20000uLL;
        object = (unint64_t)v16._object;
      }
    }
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    v17 = (id)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  }
  else
  {
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    v19 = (void *)MEMORY[0x18D75CC88](countAndFlagsBits, object);
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(ObjCClassFromMetadata, sel_keyCommandWithInput_modifierFlags_action_, v19, v12, sel__performShortcutKeyCommand_);

  }
  swift_bridgeObjectRetain();
  objc_msgSend(v17, sel_setAllowsAutomaticLocalization_, (3u >> (v21 & 7)) & 1);
  objc_msgSend(v17, sel_setAllowsAutomaticMirroring_, (v21 & 7) == 0);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v17;
}

Swift::Void __swiftcall KeyboardShortcutBridge._performShortcutKeyCommand(_:)(UIKeyCommand *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt v14;
  unsigned __int8 v15;

  KeyboardShortcut.init(_:)(a1, (uint64_t)&v12);
  v2 = v13;
  if (v13)
  {
    v3 = v12;
    v4 = v14;
    v5 = v15;
    v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_shortcutMap);
    swift_beginAccess();
    v7 = *v6;
    if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2, v4, v5), (v9 & 1) != 0))
    {
      v10 = *(void **)(*(_QWORD *)(v7 + 56) + 24 * v8);
      swift_endAccess();
      v11 = v10;
      swift_retain_n();
      outlined consume of KeyboardShortcutBridge.Shortcut?(v10);
      swift_bridgeObjectRelease();
      static Update.enqueueAction(_:)();
      swift_release();
    }
    else
    {
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
  }
}

id protocol witness for KeyboardShortcutSource.addShortcut(_:) in conformance UIHostingController<A>(uint64_t a1)
{
  return specialized UIHostingController.addShortcut(_:)(a1);
}

id protocol witness for KeyboardShortcutSource.removeShortcut(_:) in conformance UIHostingController<A>(uint64_t a1)
{
  return specialized UIHostingController.removeShortcut(_:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for KeyboardShortcutBridge.Shortcut(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  id v5;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *a2;
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = v3;
  v5 = (id)v4;
  swift_retain();
  return a1;
}

uint64_t destroy for KeyboardShortcutBridge.Shortcut(id *a1)
{

  return swift_release();
}

uint64_t assignWithCopy for KeyboardShortcutBridge.Shortcut(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for KeyboardShortcutBridge.Shortcut(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for KeyboardShortcutBridge.Shortcut()
{
  return &type metadata for KeyboardShortcutBridge.Shortcut;
}

uint64_t outlined init with copy of KeyboardShortcutSource?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for KeyboardShortcutSource?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for KeyboardShortcutSource()
{
  unint64_t result;

  result = lazy cache variable for type metadata for KeyboardShortcutSource;
  if (!lazy cache variable for type metadata for KeyboardShortcutSource)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for KeyboardShortcutSource);
  }
  return result;
}

id specialized UIHostingController.removeShortcut(_:)(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_removeKeyCommand_, a1);
}

id specialized UIHostingController.addShortcut(_:)(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_addKeyCommand_, a1);
}

unint64_t type metadata accessor for UIKeyCommand()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIKeyCommand;
  if (!lazy cache variable for type metadata for UIKeyCommand)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIKeyCommand);
  }
  return result;
}

void UIPress.resolve(phase:)(char *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  char v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *rawValue;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;

  v4 = *a1;
  v5 = objc_msgSend(v2, sel_key);
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v2, sel_timestamp);
    v8 = v7;
    v9 = specialized EventModifiers.init(_:)((int)objc_msgSend(v6, sel_modifierFlags));
    v10 = objc_msgSend(v6, sel_charactersIgnoringModifiers);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    if (one-time initialization token for keyInputToKeyEquivalentMap != -1)
      swift_once();
    rawValue = keyInputToKeyEquivalentMap._rawValue;
    if (*((_QWORD *)keyInputToKeyEquivalentMap._rawValue + 2))
    {
      swift_bridgeObjectRetain();
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v13);
      v16 = v13;
      if ((v17 & 1) != 0)
      {
        v18 = (uint64_t *)(rawValue[7] + 16 * v15);
        v11 = *v18;
        v16 = v18[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v13 = v16;
    }
    v19 = objc_msgSend(v6, sel_characters);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

    v23 = keyInputToKeyEquivalentMap._rawValue;
    if (*((_QWORD *)keyInputToKeyEquivalentMap._rawValue + 2))
    {
      swift_bridgeObjectRetain();
      v24 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v22);
      v25 = v22;
      if ((v26 & 1) != 0)
      {
        v27 = (uint64_t *)(v23[7] + 16 * v24);
        v20 = *v27;
        v25 = v27[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v22 = v25;
    }
    objc_msgSend(v6, sel_keyCode);
    type metadata accessor for UIKeyboardHIDUsage(0);
    lazy protocol witness table accessor for type UIKeyboardHIDUsage and conformance UIKeyboardHIDUsage();
    AnyHashable.init<A>(_:)();

    *(_BYTE *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v9;
    *(_QWORD *)(a2 + 32) = v11;
    *(_QWORD *)(a2 + 40) = v13;
    *(_QWORD *)(a2 + 48) = v20;
    *(_QWORD *)(a2 + 56) = v22;
  }
  else
  {
    *(_QWORD *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

void KeyboardShortcut.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *rawValue;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;

  v4 = objc_msgSend(a1, sel_input);
  if (!v4)
    goto LABEL_15;
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_15:

    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return;
  }
  if (one-time initialization token for keyInputToKeyEquivalentMap != -1)
    swift_once();
  rawValue = keyInputToKeyEquivalentMap._rawValue;
  if (*((_QWORD *)keyInputToKeyEquivalentMap._rawValue + 2))
  {
    swift_bridgeObjectRetain();
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v8);
    if ((v12 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if ((v8 & 0x2000000000000000) == 0)
        goto LABEL_11;
      goto LABEL_17;
    }
    v13 = (uint64_t *)(rawValue[7] + 16 * v11);
    v6 = *v13;
    v14 = v13[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    v8 = v14;
  }
  if ((v8 & 0x2000000000000000) == 0)
  {
LABEL_11:
    if ((v6 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((v6 & 0x1000000000000000) == 0)
      {
        v6 = static String._copying(_:)();
        v16 = v15;
        swift_bridgeObjectRelease();
        v8 = v16;
      }
      goto LABEL_18;
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_17:
  if ((v8 & 0xF00000000000000) != 0)
  {
LABEL_18:
    v17 = objc_msgSend(a1, sel_modifierFlags);

    v18 = specialized EventModifiers.init(_:)(v17);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v18;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
LABEL_20:
  __break(1u);
}

void *one-time initialization function for keyInputToKeyEquivalentMap()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *result;

  type metadata accessor for _ContiguousArrayStorage<(String, Character)>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187C48F40;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = 8428783;
  *(_QWORD *)(inited + 56) = 0xA300000000000000;
  *(_QWORD *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 72) = v2;
  *(_QWORD *)(inited + 80) = 8494319;
  *(_QWORD *)(inited + 88) = 0xA300000000000000;
  *(_QWORD *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 104) = v3;
  *(_QWORD *)(inited + 112) = 8559855;
  *(_QWORD *)(inited + 120) = 0xA300000000000000;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 136) = v4;
  *(_QWORD *)(inited + 144) = 8625391;
  *(_QWORD *)(inited + 152) = 0xA300000000000000;
  *(_QWORD *)(inited + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 168) = v5;
  *(_QWORD *)(inited + 176) = 27;
  *(_QWORD *)(inited + 184) = 0xE100000000000000;
  *(_QWORD *)(inited + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 200) = v6;
  *(_QWORD *)(inited + 208) = 8;
  *(_QWORD *)(inited + 216) = 0xE100000000000000;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 232) = v7;
  *(_QWORD *)(inited + 240) = 11312367;
  *(_QWORD *)(inited + 248) = 0xA300000000000000;
  *(_QWORD *)(inited + 256) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 264) = v8;
  *(_QWORD *)(inited + 272) = 11377903;
  *(_QWORD *)(inited + 280) = 0xA300000000000000;
  *(_QWORD *)(inited + 288) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 296) = v9;
  *(_QWORD *)(inited + 304) = 11115759;
  *(_QWORD *)(inited + 312) = 0xA300000000000000;
  *(_QWORD *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 328) = v10;
  *(_QWORD *)(inited + 336) = 11246831;
  *(_QWORD *)(inited + 344) = 0xA300000000000000;
  *(_QWORD *)(inited + 352) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 360) = v11;
  *(_QWORD *)(inited + 368) = 8690927;
  *(_QWORD *)(inited + 376) = 0xA300000000000000;
  *(_QWORD *)(inited + 384) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 392) = v12;
  *(_QWORD *)(inited + 400) = 8756463;
  *(_QWORD *)(inited + 408) = 0xA300000000000000;
  *(_QWORD *)(inited + 416) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 424) = v13;
  *(_QWORD *)(inited + 432) = 8821999;
  *(_QWORD *)(inited + 440) = 0xA300000000000000;
  *(_QWORD *)(inited + 448) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 456) = v14;
  *(_QWORD *)(inited + 464) = 8887535;
  *(_QWORD *)(inited + 472) = 0xA300000000000000;
  *(_QWORD *)(inited + 480) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 488) = v15;
  *(_QWORD *)(inited + 496) = 8953071;
  *(_QWORD *)(inited + 504) = 0xA300000000000000;
  *(_QWORD *)(inited + 512) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 520) = v16;
  *(_QWORD *)(inited + 528) = 9018607;
  *(_QWORD *)(inited + 536) = 0xA300000000000000;
  *(_QWORD *)(inited + 544) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 552) = v17;
  *(_QWORD *)(inited + 560) = 9084143;
  *(_QWORD *)(inited + 568) = 0xA300000000000000;
  *(_QWORD *)(inited + 576) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 584) = v18;
  *(_QWORD *)(inited + 592) = 9149679;
  *(_QWORD *)(inited + 600) = 0xA300000000000000;
  *(_QWORD *)(inited + 608) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 616) = v19;
  *(_QWORD *)(inited + 624) = 9215215;
  *(_QWORD *)(inited + 632) = 0xA300000000000000;
  *(_QWORD *)(inited + 640) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 648) = v20;
  *(_QWORD *)(inited + 656) = 9280751;
  *(_QWORD *)(inited + 664) = 0xA300000000000000;
  *(_QWORD *)(inited + 672) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 680) = v21;
  *(_QWORD *)(inited + 688) = 9346287;
  *(_QWORD *)(inited + 696) = 0xA300000000000000;
  *(_QWORD *)(inited + 704) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 712) = v22;
  *(_QWORD *)(inited + 720) = 9411823;
  *(_QWORD *)(inited + 728) = 0xA300000000000000;
  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  keyInputToKeyEquivalentMap._rawValue = result;
  return result;
}

uint64_t one-time initialization function for keyEquivalentToKeyInputMap()
{
  _BYTE *rawValue;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  char *v34;
  int64_t v35;
  _BYTE *v36;

  if (one-time initialization token for keyInputToKeyEquivalentMap != -1)
LABEL_42:
    swift_once();
  rawValue = keyInputToKeyEquivalentMap._rawValue;
  v1 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v34 = rawValue + 64;
  v2 = 1 << rawValue[32];
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *((_QWORD *)rawValue + 8);
  v35 = (unint64_t)(v2 + 63) >> 6;
  v36 = rawValue;
  swift_bridgeObjectRetain_n();
  v5 = 0;
  while (1)
  {
    if (v4)
    {
      v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v8 = v7 | (v5 << 6);
      goto LABEL_27;
    }
    v9 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_41;
    if (v9 >= v35)
    {
LABEL_38:
      swift_release();
      keyEquivalentToKeyInputMap._rawValue = v1;
      return swift_bridgeObjectRelease();
    }
    v10 = *(_QWORD *)&v34[8 * v9];
    ++v5;
    if (!v10)
    {
      v5 = v9 + 1;
      if (v9 + 1 >= v35)
        goto LABEL_38;
      v10 = *(_QWORD *)&v34[8 * v5];
      if (!v10)
      {
        v5 = v9 + 2;
        if (v9 + 2 >= v35)
          goto LABEL_38;
        v10 = *(_QWORD *)&v34[8 * v5];
        if (!v10)
        {
          v5 = v9 + 3;
          if (v9 + 3 >= v35)
            goto LABEL_38;
          v10 = *(_QWORD *)&v34[8 * v5];
          if (!v10)
          {
            v5 = v9 + 4;
            if (v9 + 4 >= v35)
              goto LABEL_38;
            v10 = *(_QWORD *)&v34[8 * v5];
            if (!v10)
              break;
          }
        }
      }
    }
LABEL_26:
    v4 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v5 << 6);
LABEL_27:
    v12 = 16 * v8;
    v13 = (uint64_t *)(*((_QWORD *)v36 + 6) + v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = (uint64_t *)(*((_QWORD *)v36 + 7) + v12);
    v18 = *v16;
    v17 = v16[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
    v22 = v1[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v25 = v20;
    if (v1[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v20 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v25 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_44;
      v21 = v26;
      if ((v25 & 1) != 0)
      {
LABEL_5:
        v6 = (_QWORD *)(v1[7] + 16 * v21);
        swift_bridgeObjectRelease();
        *v6 = v14;
        v6[1] = v15;
        goto LABEL_6;
      }
    }
    v1[(v21 >> 6) + 8] |= 1 << v21;
    v28 = (uint64_t *)(v1[6] + 16 * v21);
    *v28 = v18;
    v28[1] = v17;
    v29 = (_QWORD *)(v1[7] + 16 * v21);
    *v29 = v14;
    v29[1] = v15;
    v30 = v1[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_40;
    v1[2] = v32;
    swift_bridgeObjectRetain();
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  v11 = v9 + 5;
  if (v11 >= v35)
    goto LABEL_38;
  v10 = *(_QWORD *)&v34[8 * v11];
  if (v10)
  {
    v5 = v11;
    goto LABEL_26;
  }
  while (1)
  {
    v5 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v5 >= v35)
      goto LABEL_38;
    v10 = *(_QWORD *)&v34[8 * v5];
    ++v11;
    if (v10)
      goto LABEL_26;
  }
  __break(1u);
LABEL_44:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized EventModifiers.init(_:)(int a1)
{
  uint64_t v1;

  if ((a1 & 0x10000) != 0)
  {
    if ((a1 & 0x20000) != 0)
    {
      v1 = 3;
      if ((a1 & 0x40000) != 0)
        goto LABEL_4;
    }
    else
    {
      v1 = 1;
      if ((a1 & 0x40000) != 0)
        goto LABEL_4;
    }
  }
  else
  {
    if ((a1 & 0x20000) == 0)
    {
      v1 = 0;
      if ((a1 & 0x40000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
    v1 = 2;
    if ((a1 & 0x40000) != 0)
LABEL_4:
      v1 |= 4uLL;
  }
LABEL_5:
  if ((a1 & 0x80000) == 0)
  {
    if ((a1 & 0x100000) == 0)
      goto LABEL_7;
LABEL_14:
    v1 |= 0x10uLL;
    if ((a1 & 0x200000) == 0)
      return v1;
    return v1 | 0x20;
  }
  v1 |= 8uLL;
  if ((a1 & 0x100000) != 0)
    goto LABEL_14;
LABEL_7:
  if ((a1 & 0x200000) != 0)
    return v1 | 0x20;
  return v1;
}

void type metadata accessor for _ContiguousArrayStorage<(String, Character)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Character)>)
  {
    type metadata accessor for (String, Character)();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Character)>);
  }
}

void type metadata accessor for (String, Character)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (String, Character))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, Character));
  }
}

unint64_t lazy protocol witness table accessor for type UIKeyboardHIDUsage and conformance UIKeyboardHIDUsage()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UIKeyboardHIDUsage and conformance UIKeyboardHIDUsage;
  if (!lazy protocol witness table cache variable for type UIKeyboardHIDUsage and conformance UIKeyboardHIDUsage)
  {
    type metadata accessor for UIKeyboardHIDUsage(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKeyboardHIDUsage, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKeyboardHIDUsage and conformance UIKeyboardHIDUsage);
  }
  return result;
}

uint64_t View.labelGroupStyle_v0<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LabelGroupStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for LabelGroupStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LabelGroupStyleModifier);
}

uint64_t default associated conformance accessor for LabelGroupStyle_v0.LabelGroupStyle_v0.Foreground: ShapeStyle()
{
  return MEMORY[0x1E0CE5408];
}

uint64_t dispatch thunk of LabelGroupStyle_v0.font(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of LabelGroupStyle_v0.foregroundStyle(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_187653044(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for LabelGroupStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for LabelGroupStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

ValueMetadata *type metadata accessor for LabelGroupStyleConfiguration()
{
  return &type metadata for LabelGroupStyleConfiguration;
}

ValueMetadata *type metadata accessor for LabelGroupStyleConfiguration.Content()
{
  return &type metadata for LabelGroupStyleConfiguration.Content;
}

ValueMetadata *type metadata accessor for ResolvedLabelGroupStyle()
{
  return &type metadata for ResolvedLabelGroupStyle;
}

unint64_t lazy protocol witness table accessor for type LabelGroupStyleModifier<BodyLabelGroupStyle> and conformance LabelGroupStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LabelGroupStyleModifier<BodyLabelGroupStyle> and conformance LabelGroupStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelGroupStyleModifier<BodyLabelGroupStyle> and conformance LabelGroupStyleModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LabelGroupStyleModifier<BodyLabelGroupStyle>, (uint64_t)&type metadata for BodyLabelGroupStyle, (uint64_t)&protocol witness table for BodyLabelGroupStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LabelGroupStyleModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelGroupStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelGroupStyleModifier<BodyLabelGroupStyle> and conformance LabelGroupStyleModifier<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedLabelGroupStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in LabelGroupStyleConfiguration.Content()
{
  return &protocol witness table for LabelGroupStyleConfiguration.Content;
}

_UNKNOWN **base witness table accessor for ViewModifier in LabelGroupStyleModifier<A>()
{
  return &protocol witness table for LabelGroupStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in LabelGroupStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t LabelGroupStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];

  v4 = v3;
  v29 = a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StyleApplicator(0, v5, *(_QWORD *)(v9 + 24), v10);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v28 - v13;
  v15 = type metadata accessor for _VariadicView.Tree();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v28 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v4, v5, v22);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v14, v8, v5);
  _VariadicView.Tree.init(_:content:)();
  v30[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleApplicator<A>, v11);
  v30[1] = &protocol witness table for LabelGroupStyleConfiguration.Content;
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v15, v30);
  static ViewBuilder.buildExpression<A>(_:)(v19, v15, v25);
  v26 = *(void (**)(char *, uint64_t))(v16 + 8);
  v26(v19, v15);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v24, v15, v29);
  return ((uint64_t (*)(char *, uint64_t))v26)(v24, v15);
}

uint64_t protocol witness for StyleModifier.styleBody(configuration:) in conformance LabelGroupStyleModifier<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return LabelGroupStyleModifier.styleBody(configuration:)(a1, a1, a2);
}

uint64_t instantiation function for generic protocol witness table for LabelGroupStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelGroupStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelGroupStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedLabelGroupStyle()
{
  lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle();
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for LabelGroupStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t StyleApplicator.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[3];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;

  v36 = a3;
  v4 = *(_QWORD *)(a2 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  outlined init with copy of _VariadicView_Children(v6, (uint64_t)&v50);
  v8 = *(_QWORD *)(a2 + 24);
  v40 = *(_QWORD *)(a2 + 16);
  v7 = v40;
  v41 = v8;
  type metadata accessor for EnumeratedSequence<_VariadicView_Children>();
  v10 = v9;
  v12 = type metadata accessor for StyleApplicator.EnumeratedView(0, v7, v8, v11);
  v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnumeratedSequence<_VariadicView_Children> and conformance EnumeratedSequence<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnumeratedSequence<_VariadicView_Children>, MEMORY[0x1E0DECC68]);
  v15 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in StyleApplicator.body(children:), (uint64_t)&v39, v10, v12, MEMORY[0x1E0DEDCE8], v13, MEMORY[0x1E0DEDD18], v14);
  outlined destroy of EnumeratedSequence<_VariadicView_Children>((uint64_t)&v50);
  *(_QWORD *)&v50 = v15;
  v37 = v7;
  v38 = v8;
  swift_getKeyPath();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 16))((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v35, a2);
  v16 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v7;
  *(_QWORD *)(v17 + 24) = v8;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v17 + v16, (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  v18 = type metadata accessor for Array();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for _DefaultForegroundStyleModifier(255, AssociatedTypeWitness, AssociatedConformanceWitness, v21);
  v22 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>();
  v23 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<LabelPlatformItemListFlags>, (uint64_t)&type metadata for LabelPlatformItemListFlags, (uint64_t)&protocol witness table for LabelPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v24 = type metadata accessor for ModifiedContent();
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v18);
  v49[0] = MEMORY[0x1E0CE55C8];
  v49[1] = &protocol witness table for _DefaultForegroundStyleModifier<A>;
  v26 = MEMORY[0x1E0CE2E70];
  v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v22, v49);
  v28 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>, MEMORY[0x1E0CE65C0]);
  v48[0] = v27;
  v48[1] = v28;
  v47[0] = MEMORY[0x18D75FFDC](v26, v23, v48);
  v47[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  v33 = MEMORY[0x18D75FFDC](v26, v24, v47);
  v29 = MEMORY[0x1E0DEC1A0];
  ForEach<>.init(_:id:content:)();
  v34 = v54;
  v43 = v54;
  v44 = v55;
  v45 = v56;
  v35 = v57;
  v46 = v57;
  *(_QWORD *)&v50 = v18;
  *((_QWORD *)&v50 + 1) = MEMORY[0x1E0DEC198];
  v51 = v24;
  v52 = v25;
  *(_QWORD *)&v53 = v29;
  v30 = type metadata accessor for ForEach();
  v42 = v33;
  v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v30, &v42);
  static ViewBuilder.buildExpression<A>(_:)(&v43, v30, v31);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v34 = v50;
  v54 = v50;
  v55 = v51;
  v56 = v52;
  v35 = v53;
  v57 = v53;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v54, v30, v36);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in StyleApplicator.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v41;
  uint64_t AssociatedConformanceWitness;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  _QWORD v53[5];

  v51 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v41 - v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for _DefaultForegroundStyleModifier(255, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v13 = type metadata accessor for ModifiedContent();
  v48 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v41 - v15;
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>();
  v17 = type metadata accessor for ModifiedContent();
  v18 = *(_QWORD *)(v17 - 8);
  v44 = v17;
  v50 = v18;
  MEMORY[0x1E0C80A78](v17, v19);
  v41 = (char *)&v41 - v20;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<LabelPlatformItemListFlags>, (uint64_t)&type metadata for LabelPlatformItemListFlags, (uint64_t)&protocol witness table for LabelPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v21 = type metadata accessor for ModifiedContent();
  v49 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v43 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v45 = (char *)&v41 - v27;
  (*(void (**)(_QWORD, uint64_t, uint64_t, double))(a3 + 32))(*(_QWORD *)(a1 + 96), a2, a3, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v11, 0, 1, AssociatedTypeWitness);
  View.defaultForegroundStyle<A>(_:)((uint64_t)v11, MEMORY[0x1E0CE55D8], AssociatedTypeWitness, MEMORY[0x1E0CE55C8], AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v47);
  swift_getKeyPath();
  v53[4] = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a3 + 24))(*(_QWORD *)(a1 + 96), a2, a3);
  v53[2] = MEMORY[0x1E0CE55C8];
  v53[3] = &protocol witness table for _DefaultForegroundStyleModifier<A>;
  v28 = MEMORY[0x1E0CE2E70];
  v29 = MEMORY[0x18D75FFDC]();
  v30 = v41;
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v16, v13);
  v31 = *(_QWORD *)(a1 + 96);
  v32 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>, MEMORY[0x1E0CE65C0]);
  v53[0] = v29;
  v53[1] = v32;
  v33 = v28;
  v34 = v44;
  v35 = MEMORY[0x18D75FFDC](v28, v44, v53);
  v36 = v43;
  View.platformItemHierarchicalLevel(_:)(v31, v34, v35);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v30, v34);
  v52[0] = v35;
  v52[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  v37 = MEMORY[0x18D75FFDC](v33, v21, v52);
  v38 = (uint64_t)v45;
  static ViewBuilder.buildExpression<A>(_:)(v36, v21, v37);
  v39 = *(void (**)(char *, uint64_t))(v49 + 8);
  v39(v36, v21);
  static ViewBuilder.buildBlock<A>(_:)(v38, v21, v51);
  return ((uint64_t (*)(uint64_t, uint64_t))v39)(v38, v21);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance StyleApplicator<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleApplicator<A>, a5);
  return static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._viewListCount(inputs:body:) in conformance StyleApplicator<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleApplicator<A>, a4);
  return static _VariadicView_MultiViewRoot._viewListCount(inputs:body:)();
}

unint64_t protocol witness for LabelGroupStyle_v0.foregroundStyle(at:) in conformance BodyLabelGroupStyle@<X0>(unint64_t result@<X0>, _DWORD *a2@<X8>)
{
  if (result > 2)
    *a2 = 2;
  else
    *a2 = dword_187C4921C[result];
  return result;
}

uint64_t type metadata accessor for StyleApplicator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleApplicator);
}

uint64_t getEnumTagSinglePayload for LabelGroupStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187653E6C + 4 * byte_187C48F70[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for LabelGroupStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_18765406C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = type metadata accessor for StyleApplicator(255, *a1, a1[1], a4);
  v5 = type metadata accessor for _VariadicView.Tree();
  v7[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleApplicator<A>, v4);
  v7[1] = &protocol witness table for LabelGroupStyleConfiguration.Content;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v5, v7);
}

uint64_t instantiation function for generic protocol witness table for StyleApplicator<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleApplicator<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in StyleApplicator<A>()
{
  return swift_getOpaqueTypeConformance2();
}

double partial apply for closure #1 in StyleApplicator.body(children:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;
  _OWORD v8[6];

  v3 = *a1;
  outlined init with copy of _VariadicView_Children.Element((uint64_t)(a1 + 1), (uint64_t)v8);
  v4 = v8[3];
  *(_OWORD *)(a2 + 32) = v8[2];
  *(_OWORD *)(a2 + 48) = v4;
  v5 = v8[5];
  *(_OWORD *)(a2 + 64) = v8[4];
  *(_OWORD *)(a2 + 80) = v5;
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 96) = v3;
  return result;
}

void type metadata accessor for EnumeratedSequence<_VariadicView_Children>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>)
  {
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    v0 = type metadata accessor for EnumeratedSequence();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>);
  }
}

uint64_t type metadata accessor for StyleApplicator.EnumeratedView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleApplicator.EnumeratedView);
}

uint64_t outlined destroy of EnumeratedSequence<_VariadicView_Children>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnumeratedSequence<_VariadicView_Children>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18765424C()
{
  return _ViewList_View.viewID.getter();
}

uint64_t sub_18765426C()
{
  return 16;
}

__n128 sub_187654278(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187654284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StyleApplicator(0, v5, *(_QWORD *)(v4 + 24), a4) - 8)
                          + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v6 + 32) & ~v6), v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in StyleApplicator.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  type metadata accessor for StyleApplicator(0, v6, v7, a2);
  return closure #2 in StyleApplicator.body(children:)(a1, v6, v7, a3);
}

uint64_t destroy for StyleApplicator.EnumeratedView(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StyleApplicator.EnumeratedView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StyleApplicator.EnumeratedView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v4 = *(void **)(a1 + 80);
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for StyleApplicator.EnumeratedView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t sub_18765456C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[7];

  type metadata accessor for StyleApplicator.EnumeratedView(255, *a1, a1[1], a4);
  v4 = type metadata accessor for Array();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for _DefaultForegroundStyleModifier(255, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>();
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<LabelPlatformItemListFlags>, (uint64_t)&type metadata for LabelPlatformItemListFlags, (uint64_t)&protocol witness table for LabelPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v10 = type metadata accessor for ModifiedContent();
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v4);
  v18[2] = v4;
  v18[3] = MEMORY[0x1E0DEC198];
  v18[4] = v10;
  v18[5] = v11;
  v18[6] = MEMORY[0x1E0DEC1A0];
  v12 = type metadata accessor for ForEach();
  v18[0] = MEMORY[0x1E0CE55C8];
  v18[1] = &protocol witness table for _DefaultForegroundStyleModifier<A>;
  v13 = MEMORY[0x1E0CE2E70];
  v17[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v18);
  v17[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>, MEMORY[0x1E0CE65C0]);
  v16[0] = MEMORY[0x18D75FFDC](v13, v9, v17);
  v16[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  v15 = MEMORY[0x18D75FFDC](v13, v10, v16);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v12, &v15);
}

uint64_t type metadata accessor for UIViewPlatformViewDefinition()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UIViewPlatformViewDefinition;
  if (!type metadata singleton initialization cache for UIViewPlatformViewDefinition)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for UIViewPlatformViewDefinition()
{
  return swift_initClassMetadata2();
}

void static UIViewPlatformViewDefinition.makeView(kind:)(unsigned __int8 *a1)
{
  unsigned int v1;
  id v2;
  objc_class *ObjCClassFromMetadata;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  unsigned __int8 v10;

  v1 = *a1;
  if (v1 > 0x10)
    goto LABEL_9;
  if (((1 << v1) & 0x14F01) != 0)
  {
    type metadata accessor for _UIInheritedView();
LABEL_4:
    v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
LABEL_5:
    v10 = v1;
    specialized static UIViewPlatformViewDefinition.initView(_:kind:)(v2, &v10);
    return;
  }
  if (v1 != 12)
  {
LABEL_9:
    type metadata accessor for _UIGraphicsView();
    goto LABEL_4;
  }
  type metadata accessor for _UIInheritedView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v4 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  v5 = objc_allocWithZone(ObjCClassFromMetadata);
  v2 = v4;
  v6 = objc_msgSend(v5, sel_init);
  objc_msgSend(v2, sel_setMaskView_, v6);

  v7 = objc_msgSend(v2, sel_maskView);
  if (v7)
  {
    objc_msgSend(v7, sel_setAutoresizesSubviews_, 0);
    v8 = objc_msgSend(v7, sel_layer);
    objc_msgSend(v8, sel_setAnchorPoint_, 0.0, 0.0);

    v9 = objc_msgSend(v7, sel_layer);
    objc_msgSend(v9, sel_setAllowsGroupOpacity_, 0);
    objc_msgSend(v9, sel_setAllowsGroupBlending_, 0);

    goto LABEL_5;
  }
  __break(1u);
}

id static UIViewPlatformViewDefinition.makeLayerView(type:kind:)(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  objc_class *ObjCClassFromMetadata;
  id v4;
  id v5;
  unsigned __int8 v7;

  v2 = *a2;
  if (v2 > 0x10)
    goto LABEL_7;
  if (((1 << v2) & 0x15F01) == 0)
  {
    if (v2 == 3)
    {
      type metadata accessor for _UIShapeHitTestingView();
      goto LABEL_4;
    }
LABEL_7:
    type metadata accessor for _UIGraphicsView();
    goto LABEL_4;
  }
  type metadata accessor for _UIInheritedView();
LABEL_4:
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v5 = _UIKitCreateCustomView(ObjCClassFromMetadata, v4);

  v7 = v2;
  specialized static UIViewPlatformViewDefinition.initView(_:kind:)(v5, &v7);
  return v5;
}

void static UIViewPlatformViewDefinition.makePlatformView(view:kind:)(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  void *v3;
  unsigned __int8 v4;

  v2 = *a2;
  objc_opt_self();
  v3 = (void *)swift_dynamicCastObjCClassUnconditional();
  v4 = v2;
  specialized static UIViewPlatformViewDefinition.initView(_:kind:)(v3, &v4);
}

char *static UIViewPlatformViewDefinition.makeDrawingView(options:)(uint64_t a1)
{
  char v1;
  int v2;
  char v3;
  int v4;
  char v5;
  uint64_t (*v6)();
  id v7;
  char *v8;
  unint64_t *v9;
  void *v10;
  objc_class *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  id v17;
  int v18;
  char v19;
  int v20;
  char v21;
  void *v22;
  char *v23;
  id v24;
  char v26[4];
  int v27;
  char v28;
  int v29;
  char v30;
  objc_super v31;

  v1 = *(_BYTE *)a1;
  v2 = *(_DWORD *)(a1 + 4);
  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v4 & 1) != 0 && objc_msgSend((id)objc_opt_self(), sel_isSupported))
  {
    v26[0] = v1;
    v27 = v2;
    v28 = v3;
    v29 = v4;
    v30 = v5;
    v6 = type metadata accessor for RBDrawingView;
    v7 = objc_allocWithZone((Class)type metadata accessor for RBDrawingView());
    v8 = RBDrawingView.init(options:)(v26);
    v9 = (unint64_t *)&lazy protocol witness table cache variable for type RBDrawingView and conformance RBDrawingView;
    v10 = &protocol conformance descriptor for RBDrawingView;
  }
  else
  {
    v11 = (objc_class *)type metadata accessor for CGDrawingView();
    v6 = type metadata accessor for CGDrawingView;
    v12 = (char *)objc_allocWithZone(v11);
    v13 = &v12[OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options];
    *v13 = v1;
    *((_DWORD *)v13 + 1) = v2;
    v13[8] = v3;
    *((_DWORD *)v13 + 3) = v4;
    v13[16] = v5;
    v31.receiver = v12;
    v31.super_class = v11;
    v14 = (char *)objc_msgSendSuper2(&v31, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    v15 = &v14[OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options];
    v16 = (*(_DWORD *)&v14[OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options + 12] >> 1) & 1;
    v8 = v14;
    objc_msgSend(v8, sel_setOpaque_, v16);
    v17 = objc_msgSend(v8, sel_layer);
    v18 = *((_DWORD *)v15 + 1);
    v19 = v15[8];
    v20 = *((_DWORD *)v15 + 3);
    v21 = v15[16];
    v26[0] = *v15;
    v27 = v18;
    v28 = v19;
    v29 = v20;
    v30 = v21;
    v22 = (void *)PlatformDrawableOptions.caLayerContentsFormat.getter();
    objc_msgSend(v17, sel_setContentsFormat_, v22);

    v9 = (unint64_t *)&lazy protocol witness table cache variable for type CGDrawingView and conformance CGDrawingView;
    v10 = &protocol conformance descriptor for CGDrawingView;
  }
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v9, (uint64_t (*)(uint64_t))v6, (uint64_t)v10);
  objc_msgSend(v8, sel_setContentMode_, 9);
  v23 = v8;
  objc_msgSend(v23, sel_setAutoresizesSubviews_, 0);
  objc_msgSend(v23, sel__setFocusInteractionEnabled_, 0);
  v24 = objc_msgSend(v23, sel_layer);
  objc_msgSend(v24, sel_setAnchorPoint_, 0.0, 0.0);

  return v23;
}

uint64_t static UIViewPlatformViewDefinition.setPath(_:shapeView:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unsigned __int8 v8;
  _BYTE v10[40];

  v2 = a2 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path;
  v3 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path);
  v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path + 8);
  v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path + 16);
  v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path + 24);
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v2 = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 16) = v7;
  v8 = *(_BYTE *)(v2 + 32);
  *(_BYTE *)(v2 + 32) = *(_BYTE *)(a1 + 32);
  outlined init with take of Path.Storage(a1, (uint64_t)v10);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
  return outlined consume of Path.Storage(v3, v4, v5, v6, v8);
}

void static UIViewPlatformViewDefinition.setProjectionTransform(_:projectionView:)(int a1, id a2)
{
  id v2;
  _OWORD v3[16];

  v2 = objc_msgSend(a2, sel_layer);
  CATransform3D.init(_:)();
  v3[0] = v3[8];
  v3[1] = v3[9];
  v3[2] = v3[10];
  v3[3] = v3[11];
  v3[4] = v3[12];
  v3[5] = v3[13];
  v3[6] = v3[14];
  v3[7] = v3[15];
  objc_msgSend(v2, sel_setTransform_, v3);

}

id static UIViewPlatformViewDefinition.getRBLayer(drawingView:)()
{
  void *v0;
  id v1;

  type metadata accessor for RBDrawingView();
  swift_unknownObjectRetain();
  v0 = (void *)swift_dynamicCastClass();
  if (v0)
  {
    v1 = objc_msgSend(v0, sel_layer);
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    return 0;
  }
  return v1;
}

id static UIViewPlatformViewDefinition.setIgnoresEvents(_:of:)(char a1, id a2)
{
  return objc_msgSend(a2, sel_setUserInteractionEnabled_, (a1 & 1) == 0);
}

uint64_t ObjC metadata update function for UIViewPlatformViewDefinition()
{
  return type metadata accessor for UIViewPlatformViewDefinition();
}

id _UIGraphicsView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _UIGraphicsView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void __swiftcall _UIInheritedView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  void *v3;
  Class isa;
  double y;
  double x;
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v11;
  void *v12;
  id v13;

  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  if ((UIViewIgnoresTouchEvents() & 1) == 0)
  {
    v7 = objc_msgSend(v3, sel_subviews);
    type metadata accessor for UIView();
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
      goto LABEL_17;
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
    {
      do
      {
        while (__OFSUB__(v9--, 1))
        {
          __break(1u);
LABEL_15:
          __break(1u);
LABEL_16:
          __break(1u);
LABEL_17:
          swift_bridgeObjectRetain();
          v9 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v9)
            goto LABEL_12;
        }
        if ((v8 & 0xC000000000000001) != 0)
        {
          v11 = (id)MEMORY[0x18D75E3BC](v9, v8);
          goto LABEL_10;
        }
        if ((v9 & 0x8000000000000000) != 0)
          goto LABEL_15;
        if (v9 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_16;
        v11 = *(id *)(v8 + 32 + 8 * v9);
LABEL_10:
        v12 = v11;
        objc_msgSend(v3, sel_convertPoint_toCoordinateSpace_, v11, x, y);
        v13 = objc_msgSend(v12, sel_hitTest_withEvent_, isa);

      }
      while (!v13 && v9);
    }
LABEL_12:
    swift_bridgeObjectRelease();
  }
}

uint64_t _UIShapeHitTestingView.__ivar_destroyer()
{
  uint64_t v0;

  return outlined consume of Path.Storage(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path), *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path + 8), *(_QWORD *)(v0+ OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path+ 16), *(_QWORD *)(v0+ OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path+ 24), *(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path + 32));
}

void specialized static UIViewPlatformViewDefinition.initView(_:kind:)(id a1, unsigned __int8 *a2)
{
  unsigned int v3;
  id v5;
  id v6;

  v3 = *a2;
  if (v3 - 13 >= 2)
  {
    objc_msgSend(a1, sel_setAutoresizesSubviews_, 0);
    if (v3 > 0x10 || ((1 << v3) & 0x11F01) == 0)
      objc_msgSend(a1, sel__setFocusInteractionEnabled_, 0);
  }
  v5 = objc_msgSend(a1, sel_layer);
  objc_msgSend(v5, sel_setAnchorPoint_, 0.0, 0.0);

  if (v3 <= 0x10)
  {
    if (((1 << v3) & 0x11E01) != 0)
    {
      v6 = objc_msgSend(a1, sel_layer);
      objc_msgSend(v6, sel_setAllowsGroupOpacity_, 0);
      objc_msgSend(v6, sel_setAllowsGroupBlending_, 0);
    }
    else
    {
      if (((1 << v3) & 0xE) == 0)
        return;
      v6 = objc_msgSend(a1, sel_layer);
      objc_msgSend(v6, sel_setAllowsEdgeAntialiasing_, 1);
    }

  }
}

uint64_t static ListItemTint.fixed(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_BYTE *)(a2 + 8) = 1;
  return swift_retain();
}

uint64_t static ListItemTint.preferred(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a1;
  *(_BYTE *)(a2 + 8) = 0;
  return swift_retain();
}

void one-time initialization function for monochrome()
{
  static ListItemTint.monochrome = 0;
  byte_1EDE2DEC8 = 1;
}

uint64_t static ListItemTint.monochrome.getter@<X0>(uint64_t a1@<X8>)
{
  char v2;

  if (one-time initialization token for monochrome != -1)
    swift_once();
  v2 = byte_1EDE2DEC8;
  *(_QWORD *)a1 = static ListItemTint.monochrome;
  *(_BYTE *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t View.listItemTint(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.listItemTint(_:)(uint64_t a1)
{
  uint64_t v2;

  if (a1)
    v2 = a1;
  else
    v2 = 1;
  swift_retain();
  View._trait<A>(_:_:)();
  return outlined consume of Transaction?(v2);
}

void static ListItemTintTraitKey.defaultValue.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 0;
}

ValueMetadata *type metadata accessor for ListItemTintTraitKey()
{
  return &type metadata for ListItemTintTraitKey;
}

uint64_t sub_187655664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListItemTintTraitKey>, (uint64_t)&type metadata for ListItemTintTraitKey, (uint64_t)&protocol witness table for ListItemTintTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<ListItemTintTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ListItemTintTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<ListItemTintTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ListItemTintTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListItemTintTraitKey>, (uint64_t)&type metadata for ListItemTintTraitKey, (uint64_t)&protocol witness table for ListItemTintTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ListItemTintTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t EnvironmentValues.listItemTint.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>, (uint64_t)&type metadata for ListItemTintKey, (uint64_t)&protocol witness table for ListItemTintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>, (uint64_t)&type metadata for ListItemTintKey, (uint64_t)&protocol witness table for ListItemTintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>, (uint64_t)&type metadata for ListItemTintKey, (uint64_t)&protocol witness table for ListItemTintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ListItemTintKey()
{
  return &type metadata for ListItemTintKey;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListItemTintKey(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t AnyTabContent.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t result;

  type metadata accessor for AnyTabContentStorage(0, a2, a3, a3);
  v6 = swift_allocObject();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 96) - 8) + 32))(v6 + *(_QWORD *)(*(_QWORD *)v6 + 112), a1);
  *a4 = v6;
  return result;
}

uint64_t type metadata accessor for AnyTabContentStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyTabContentStorage);
}

uint64_t AnyTabContent._identifiedView.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

void associated type witness table accessor for TabContent.Body : TabContent in AnyTabContent<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance AnyTabContent<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AnyTabContent._identifiedView.getter();
  *a1 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnyTabContent<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyTabContent<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for AnyTabContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyTabContent);
}

void AnyTabContentStorageBase.identifiedView.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for AnyTabContentStorageBase()
{
  return objc_opt_self();
}

uint64_t AnyTabContentStorage.identifiedView.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  double v5;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v4);
  (*(void (**)(uint64_t, uint64_t, double))(v1 + 56))(v2, v1, v5);
  swift_getAssociatedConformanceWitness();
  return AnyView.init<A>(_:)();
}

double CGVector.subscript.getter(char a1, double a2, double a3)
{
  double result;

  if ((a1 & 1) != 0)
    return a3;
  return result;
}

double static CGVector.infinity.getter()
{
  return INFINITY;
}

BOOL CGVector.isFinite.getter(double a1, double a2)
{
  return (~*(_QWORD *)&a2 & 0x7FF0000000000000) != 0 && (~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0;
}

uint64_t CGVector.isNaN.getter(double a1, double a2)
{
  _BOOL4 v2;

  v2 = (~*(_QWORD *)&a2 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) != 0;
  return (~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 || v2;
}

uint64_t CGVector.subscript.setter(uint64_t result, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8 * (result & 1)) = a2;
  return result;
}

double (*CGVector.subscript.modify(uint64_t a1, char a2))(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = a2;
  v3 = v2 + 1;
  if ((a2 & 1) == 0)
    v3 = v2;
  *(_QWORD *)a1 = *v3;
  return CGVector.subscript.modify;
}

double CGVector.subscript.modify(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (*(_BYTE *)(a1 + 16) & 1)) = *(_QWORD *)a1;
  return result;
}

double CGVector.init(_:in:by:)(char a1, double a2, double a3)
{
  if ((a1 & 1) != 0)
    return a3;
  return a2;
}

double sub_187655C0C@<D0>(double *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  double *v3;
  double result;

  v3 = a1 + 1;
  if (!*a2)
    v3 = a1;
  result = *v3;
  *a3 = *(_QWORD *)v3;
  return result;
}

_QWORD *sub_187655C28(_QWORD *result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  v3 = 8;
  if (!*a3)
    v3 = 0;
  *(_QWORD *)(a2 + v3) = *result;
  return result;
}

uint64_t sub_187655C44()
{
  return 0;
}

uint64_t static AnimatedValueTrackBuilder.buildExpression(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;

  v7 = type metadata accessor for AnimatedValueTrack(0, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a5, a1, v7);
}

void static AnimatedValueTrackBuilder.buildPartialBlock(accumulated:next:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;

  v6 = type metadata accessor for AnimatedValueTrack(0, a2, a2, a3);
  AnimatedValueTrack.appending(track:)(a1, v6, a4);
}

uint64_t type metadata accessor for AnimatedValueTrackBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueTrackBuilder);
}

uint64_t destroy for AnyTransferable()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AnyTransferable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AnyTransferable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AnyTransferable(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AnyTransferable()
{
  return &type metadata for AnyTransferable;
}

void *AnyTransferable.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v68 = a1;
  v72 = type metadata accessor for ResolvedTransferRepresentation();
  v55 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72, v5);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (UTType, String?)();
  v70 = *(_QWORD *)(v8 - 8);
  v71 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for _TransferRepresentationInputs();
  v62 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69, v12);
  v57 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for _TransferRepresentationValue();
  v60 = *(_QWORD *)(v15 - 8);
  v61 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v56 = (char *)&v54 - v17;
  v18 = type metadata accessor for _TransferRepresentationOutputs();
  v58 = *(_QWORD *)(v18 - 8);
  v59 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v54 - v29;
  dispatch thunk of static Transferable.transferRepresentation.getter();
  swift_getDynamicType();
  v63 = v30;
  v64 = v22;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v26, v30, AssociatedTypeWitness);
  v31 = v56;
  _TransferRepresentationValue.init(_:)();
  v32 = v57;
  _TransferRepresentationInputs.init()();
  v66 = a2;
  v67 = a3;
  swift_getAssociatedConformanceWitness();
  v65 = AssociatedTypeWitness;
  dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v32, v69);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v61);
  v33 = _TransferRepresentationOutputs.storage.getter();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v59);
  v34 = *(_QWORD *)(v33 + 16);
  if (v34)
  {
    v73 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34, 0);
    v35 = v55;
    v36 = *(unsigned __int8 *)(v55 + 80);
    v62 = v33;
    v37 = v33 + ((v36 + 32) & ~v36);
    v69 = *(_QWORD *)(v55 + 72);
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
    v39 = v55;
    do
    {
      v40 = v72;
      v38(v7, v37, v72);
      v41 = (uint64_t *)&v11[*(int *)(v71 + 48)];
      ResolvedTransferRepresentation.contentType.getter();
      *v41 = ResolvedTransferRepresentation.suggestedFileName.getter();
      v41[1] = v42;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v40);
      v43 = v73;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v43 + 16) + 1, 1);
        v43 = v73;
      }
      v45 = *(_QWORD *)(v43 + 16);
      v44 = *(_QWORD *)(v43 + 24);
      if (v45 >= v44 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
        v43 = v73;
      }
      *(_QWORD *)(v43 + 16) = v45 + 1;
      outlined init with take of (UTType, String?)((uint64_t)v11, v43+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(_QWORD *)(v70 + 72) * v45);
      v37 += v69;
      --v34;
      v35 = v39;
    }
    while (v34);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v43 + 16))
      goto LABEL_9;
LABEL_11:
    v46 = MEMORY[0x1E0DEE9E0];
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  v43 = MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    goto LABEL_11;
LABEL_9:
  type metadata accessor for _DictionaryStorage<UTType, String?>();
  v46 = static _DictionaryStorage.allocate(capacity:)();
LABEL_12:
  v73 = v46;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v43, 1, &v73);
  swift_bridgeObjectRelease();
  v48 = v66;
  v47 = v67;
  MEMORY[0x18D754E04](v66, v67);
  v49 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = v48;
  *(_QWORD *)(v52 + 24) = v47;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v50 + 32))(v52 + v51, v68, v49);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v65);
  return &async function pointer to partial apply for closure #3 in AnyTransferable.init<A>(_:);
}

void type metadata accessor for String?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for String?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for String?);
  }
}

uint64_t closure #3 in AnyTransferable.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  type metadata accessor for UTType?();
  v5[7] = swift_task_alloc();
  v7 = type metadata accessor for UTType();
  v5[8] = v7;
  v5[9] = *(_QWORD *)(v7 - 8);
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  v8 = type metadata accessor for Optional();
  v5[12] = v8;
  v5[13] = *(_QWORD *)(v8 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = *(_QWORD *)(a4 - 8);
  v5[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #3 in AnyTransferable.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void (*v18)(_QWORD, unint64_t, uint64_t);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 16))(v1, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 96));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
    v4 = type metadata accessor for TransferableError();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA8748], MEMORY[0x1E0CA8750]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v5, *MEMORY[0x1E0CA8738], v4);
    swift_willThrow();
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 40));
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v10, v9, (uint64_t (*)(_QWORD))type metadata accessor for UTType?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    v11 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v0 + 40);
    outlined destroy of UTType?(*(_QWORD *)(v0 + 56));
    v13 = MEMORY[0x18D754E04](v12, v11);
    *(_QWORD *)(v0 + 136) = v13;
    v14 = *(_QWORD *)(v13 + 16);
    *(_QWORD *)(v0 + 144) = v14;
    if (!v14)
    {
      swift_bridgeObjectRelease();
      v26 = *(_QWORD *)(v0 + 120);
      v25 = *(_QWORD *)(v0 + 128);
      v27 = *(_QWORD *)(v0 + 40);
      v28 = type metadata accessor for TransferableError();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA8748], MEMORY[0x1E0CA8750]);
      swift_allocError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v29, *MEMORY[0x1E0CA8738], v28);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
      goto LABEL_3;
    }
    v15 = *(_QWORD *)(v0 + 64);
    v16 = *(_QWORD *)(v0 + 72);
    v17 = *(_DWORD *)(v16 + 80);
    *(_DWORD *)(v0 + 232) = v17;
    *(_QWORD *)(v0 + 152) = *(_QWORD *)(v16 + 72);
    v18 = *(void (**)(_QWORD, unint64_t, uint64_t))(v16 + 16);
    *(_QWORD *)(v0 + 160) = v18;
    *(_QWORD *)(v0 + 200) = 0;
    v18(*(_QWORD *)(v0 + 80), v13 + ((v17 + 32) & ~(unint64_t)v17), v15);
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 208) = v19;
    *v19 = v0;
    v19[1] = closure #3 in AnyTransferable.init<A>(_:);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 64);
    v22 = *(_QWORD *)(v0 + 56);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 32);
    *(_QWORD *)(v0 + 168) = v23;
    v23(v20, v22, v21);
    v24 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v24;
    *v24 = v0;
    v24[1] = closure #3 in AnyTransferable.init<A>(_:);
  }
  return Transferable.data(contentType:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = type metadata accessor for TransferableError();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA8748], MEMORY[0x1E0CA8750]);
  swift_allocError();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v8, *MEMORY[0x1E0CA8738], v7);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  id v10;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 88);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(v8, sel_initRegularFileWithContents_, isa);
  outlined consume of Data._Representation(v2, v1);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  v13(v7, v12, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 200) + 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 40);
    v6 = type metadata accessor for TransferableError();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA8748], MEMORY[0x1E0CA8750]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v7, *MEMORY[0x1E0CA8738], v6);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 200) + 1;
    *(_QWORD *)(v0 + 200) = v9;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 160))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 136)+ ((*(unsigned __int8 *)(v0 + 232) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 232))+ *(_QWORD *)(v0 + 152) * v9, *(_QWORD *)(v0 + 64));
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 208) = v10;
    *v10 = v0;
    v10[1] = closure #3 in AnyTransferable.init<A>(_:);
    return Transferable.data(contentType:)();
  }
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  id v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRelease();
  v8 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(v8, sel_initRegularFileWithContents_, isa);
  outlined consume of Data._Representation(v2, v1);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7, v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v10);
}

uint64_t closure #3 in AnyTransferable.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  swift_task_dealloc();
  if (v2)
  {

  }
  else
  {
    *(_QWORD *)(v6 + 184) = a2;
    *(_QWORD *)(v6 + 192) = a1;
  }
  return swift_task_switch();
}

{
  void *v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  swift_task_dealloc();
  if (v2)
  {

  }
  else
  {
    *(_QWORD *)(v6 + 216) = a2;
    *(_QWORD *)(v6 + 224) = a1;
  }
  return swift_task_switch();
}

uint64_t outlined init with take of (UTType, String?)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (UTType, String?)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(uint64_t, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v4 = v3;
  v8 = type metadata accessor for UTType();
  v48 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v50 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (UTType, String?)();
  MEMORY[0x1E0C80A78](v11, v12);
  v16 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
    return;
  v45 = &v16[*(int *)(v13 + 48)];
  v18 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v19 = *(_QWORD *)(v14 + 72);
  v42[2] = v4;
  v43 = v19;
  v42[1] = a1;
  swift_bridgeObjectRetain();
  v44 = v16;
  while (1)
  {
    v47 = v17;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v18, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for (UTType, String?));
    v24 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 32);
    v25 = (uint64_t)v50;
    v24((uint64_t)v50, v16, v49);
    v26 = *((_QWORD *)v45 + 1);
    v46 = *(_QWORD *)v45;
    v27 = a3;
    v28 = *a3;
    v30 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
    v31 = *(_QWORD *)(v28 + 16);
    v32 = (v29 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
      break;
    v34 = v29;
    if (*(_QWORD *)(v28 + 24) >= v33)
    {
      if ((a2 & 1) != 0)
      {
        v37 = (_QWORD *)*v27;
        if ((v29 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v37 = (_QWORD *)*v27;
        if ((v34 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, a2 & 1);
      v35 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v50);
      if ((v34 & 1) != (v36 & 1))
        goto LABEL_20;
      v30 = v35;
      v37 = (_QWORD *)*v27;
      if ((v34 & 1) != 0)
      {
LABEL_3:
        v20 = (uint64_t *)(v37[7] + 16 * v30);
        v22 = *v20;
        v21 = v20[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v49);
        v23 = (_QWORD *)(*(_QWORD *)(*v27 + 56) + 16 * v30);
        swift_bridgeObjectRelease();
        *v23 = v22;
        v23[1] = v21;
        goto LABEL_4;
      }
    }
    v37[(v30 >> 6) + 8] |= 1 << v30;
    v24(v37[6] + *(_QWORD *)(v48 + 72) * v30, v50, v49);
    v38 = (_QWORD *)(v37[7] + 16 * v30);
    *v38 = v46;
    v38[1] = v26;
    v39 = v37[2];
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    if (v40)
      goto LABEL_19;
    v37[2] = v41;
LABEL_4:
    a3 = v27;
    v16 = v44;
    v18 += v43;
    a2 = 1;
    v17 = v47 - 1;
    if (v47 == 1)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_18765701C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in AnyTransferable.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  v9 = v2 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = partial apply for closure #3 in AnyTransferable.init<A>(_:);
  return closure #3 in AnyTransferable.init<A>(_:)(a1, a2, v9, v6, v7);
}

uint64_t partial apply for closure #3 in AnyTransferable.init<A>(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

void static URLReceipt.systemAction.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static URLReceipt.systemAction(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void URLReceipt.description.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.onReceiveURLs(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t *initializeBufferWithCopyOfBuffer for URLReceipt(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)(*a2 - 1) >= 2)
    v3 = swift_bridgeObjectRetain();
  *a1 = v3;
  return a1;
}

uint64_t destroy for URLReceipt(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if ((unint64_t)(result - 1) >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t *assignWithCopy for URLReceipt(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *a1 - 1;
  v4 = *a2;
  v5 = *a2 - 1;
  if (v3 >= 2)
  {
    if (v5 >= 2)
    {
      *a1 = v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of (urls: [URL]?)((uint64_t)a1);
      *a1 = *a2;
    }
  }
  else
  {
    *a1 = v4;
    if (v5 >= 2)
      swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t outlined destroy of (urls: [URL]?)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (urls: [URL]?)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (urls: [URL]?)()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (urls: [URL]?))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [URL]?, (uint64_t (*)(uint64_t))type metadata accessor for [URL], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (urls: [URL]?));
  }
}

void type metadata accessor for [URL](uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for [URL], (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

_QWORD *assignWithTake for URLReceipt(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)(*a1 - 1) >= 2)
  {
    if ((unint64_t)(v3 - 1) >= 2)
    {
      *a1 = v3;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of (urls: [URL]?)((uint64_t)a1);
  }
  *a1 = v3;
  return a1;
}

uint64_t getEnumTagSinglePayload for URLReceipt(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 2);
  v6 = v4 - 2;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for URLReceipt(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(_QWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for URLReceipt()
{
  return &type metadata for URLReceipt;
}

unint64_t destroy for URLReceipt.Result(unint64_t *a1)
{
  unint64_t result;
  int v2;

  result = *a1;
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for URLReceipt.Result(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  if ((int)v4 - 1 < 0)
    v3 = swift_bridgeObjectRetain();
  *a1 = v3;
  return a1;
}

uint64_t *assignWithCopy for URLReceipt.Result(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  LODWORD(v3) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v4) = -1;
  else
    v4 = *a1;
  v5 = v4 - 1;
  v6 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v3 = *a2;
  v7 = v3 - 1;
  if (v5 < 0)
  {
    if (v7 < 0)
    {
      *a1 = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      *a1 = *a2;
    }
  }
  else
  {
    *a1 = v6;
    if (v7 < 0)
      swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t *assignWithTake for URLReceipt.Result(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a1;
  v4 = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = v3;
  v5 = *a2;
  if (v4 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if (v5 < 0xFFFFFFFF)
      v6 = *a2;
    if ((int)v6 - 1 < 0)
    {
      *a1 = v5;
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
  }
  *a1 = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for URLReceipt.Result(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = v4 + 1;
  v6 = v4 - 1;
  if (v5 >= 3)
    return v6;
  else
    return 0;
}

_QWORD *destructiveInjectEnumTag for URLReceipt.Result(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    a2 -= 0x7FFFFFFF;
    goto LABEL_5;
  }
  if (a2)
LABEL_5:
    *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for URLReceipt.Result()
{
  return &type metadata for URLReceipt.Result;
}

void static URLReceipt.discarded.getter()
{
  static URLReceipt.systemAction.getter();
}

void static URLReceipt.handled.getter()
{
  static URLReceipt.systemAction.getter();
}

uint64_t TabContent.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  __n128 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v21 = *(_QWORD *)(a4 + 8);
  v20 = *(_BYTE *)(a4 + 16);
  v23.n128_u64[0] = *(_QWORD *)a4;
  v22 = v23.n128_u64[0];
  v23.n128_u64[1] = v21;
  v24 = v20;
  PopoverPresentationModifier.init(isPresented:popoverContent:attachmentAnchor:arrowEdge:isDetachable:keyType:)(a1, a2, a3, a6, a7, &v23, a5, 0, (uint64_t)&v33, 0);
  v13 = v37;
  v12 = v38;
  v14 = v39;
  v23 = v33;
  v24 = v34;
  v25 = v35;
  v26 = v36;
  v27 = v37;
  v28 = v38;
  v29 = v39;
  v30 = v40;
  v31 = v41;
  v32 = v42;
  v16 = type metadata accessor for PopoverPresentationModifier(0, a10, a12, v15);
  TabContent.modifier<A>(_:)((uint64_t)&v23, a8, v16, a9);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v22, v21, v20);
  swift_release();
  swift_release();
  swift_release();
  return outlined consume of Environment<CGFloat?>.Content(v13, v12, v14);
}

void TabContent.popover<A, B>(item:attachmentAnchor:arrowEdge:content:)()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Optional();
  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for ItemPopoverPresentationModifier();
}

void sub_1876578B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  *(_QWORD *)(v13 - 184) = *(_QWORD *)(a1 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&a9 - v15;
  v18 = *v9;
  v17 = v9[1];
  v19 = *((_BYTE *)v9 + 16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v12, *(_QWORD *)(v13 - 176), v11, v14);
  *(_QWORD *)(v13 - 112) = v18;
  *(_QWORD *)(v13 - 104) = v17;
  *(_BYTE *)(v13 - 96) = v19;
  ItemPopoverPresentationModifier.init(item:popoverContent:attachmentAnchor:arrowEdge:keyType:)(v12, (uint64_t)v16);
}

uint64_t sub_187657944()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  TabContent.modifier<A>(_:)(v2, *(_QWORD *)(v5 - 128), v4, *(_QWORD *)(v5 - 144));
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v3, v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 184) + 8))(v2, v4);
}

uint64_t sub_1876579A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for PopoverPresentationModifier(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedTabContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = &protocol witness table for PopoverPresentationModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v8, v10);
}

void sub_187657A08()
{
  type metadata accessor for ItemPopoverPresentationModifier();
}

uint64_t sub_187657A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[10];

  v6 = type metadata accessor for ModifiedTabContent(255, v4, a1, a4);
  v8[0] = v5;
  v8[1] = &protocol witness table for ItemPopoverPresentationModifier<A, B>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v6, v8);
}

ValueMetadata *type metadata accessor for TabPopoverPresentationsKey()
{
  return &type metadata for TabPopoverPresentationsKey;
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance TabPopoverPresentationsKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static TabPopoverPresentationsKey.defaultValue;
  return swift_bridgeObjectRetain();
}

void __swiftcall CheckboxToggleStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CheckboxToggleStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in CheckboxToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for CheckboxToggleStyle()
{
  return &type metadata for CheckboxToggleStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>)
  {
    type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>();
    type metadata accessor for _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>);
  }
}

void type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Toggle);
    type metadata accessor for ToggleStyleModifier<_CheckboxToggleStyle>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>);
  }
}

void type metadata accessor for ToggleStyleModifier<_CheckboxToggleStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ToggleStyleModifier<_CheckboxToggleStyle>)
  {
    v2 = lazy protocol witness table accessor for type _CheckboxToggleStyle and conformance _CheckboxToggleStyle();
    v4 = type metadata accessor for ToggleStyleModifier(a1, (uint64_t)&type metadata for _CheckboxToggleStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ToggleStyleModifier<_CheckboxToggleStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type _CheckboxToggleStyle and conformance _CheckboxToggleStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CheckboxToggleStyle and conformance _CheckboxToggleStyle;
  if (!lazy protocol witness table cache variable for type _CheckboxToggleStyle and conformance _CheckboxToggleStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CheckboxToggleStyle, &type metadata for _CheckboxToggleStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CheckboxToggleStyle and conformance _CheckboxToggleStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>();
    v3[1] = &protocol witness table for ToggleStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for _CheckboxToggleStyle()
{
  return &type metadata for _CheckboxToggleStyle;
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in _CheckboxToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

id UIActivityViewController.init(configuration:env:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  Class isa;
  id v11;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = a2[1];
  if (*(_BYTE *)(a1 + 32) == 1)
  {
    v5 = *(_QWORD *)(a1 + 16);
    swift_retain();
    outlined copy of AppIntentExecutor?(v5);
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
    swift_release();
    swift_release();
    outlined retain of AnyShareConfiguration(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    return 0;
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIActivityItemsConfiguration);
    v13 = v3;
    v14 = v4;
    outlined retain of AnyShareConfiguration(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
    swift_retain();
    swift_retain();
    v7 = UIActivityItemsConfiguration.init(configuration:env:)(a1, &v13);
    if (v7)
    {
      v8 = v7;
      swift_release();
      swift_release();
      v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      isa = v8;
      v6 = objc_msgSend(v9, sel_initWithActivityItemsConfiguration_, isa, v13, v14);
      outlined retain of AnyShareConfiguration(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);

    }
    else
    {
      v13 = v3;
      v14 = v4;
      AnyShareConfiguration.resolveActivityItems(in:)(&v13);
      swift_release();
      swift_release();
      v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v6 = objc_msgSend(v11, sel_initWithActivityItems_applicationActivities_, isa, 0);
      outlined retain of AnyShareConfiguration(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    }

  }
  return v6;
}

id UIActivityItemsConfiguration.init(configuration:env:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  id v7;
  Class isa;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t aBlock;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD *v38;

  v3 = a2[1];
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 == 2)
  {
    v32 = *a2;
    v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    swift_bridgeObjectRetain();
    outlined copy of AppIntentExecutor?(v5);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSItemProvider);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v28 = objc_msgSend(v7, sel_initWithItemProviders_, isa);

    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v29 = v5;
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(_QWORD *)(a1 + 64);
    v26 = v4;
    v13 = *(_QWORD *)(a1 + 72);
    v14 = *(_QWORD *)(a1 + 80);
    v15 = v3;
    v16 = *(_QWORD *)(a1 + 88);
    v17 = *(_QWORD *)(a1 + 96);
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = v9;
    v18[3] = v10;
    v18[4] = v11;
    v18[5] = v12;
    v18[6] = v32;
    v18[7] = v15;
    v18[8] = v13;
    v18[9] = v14;
    v18[10] = v16;
    v18[11] = v17;
    v37 = partial apply for closure #1 in UIActivityItemsConfiguration.init(configuration:env:);
    v38 = v18;
    aBlock = MEMORY[0x1E0C809B0];
    v34 = 1107296256;
    v35 = thunk for @escaping @callee_guaranteed (@guaranteed UIActivityItemsConfigurationMetadataKey) -> (@out Any?);
    v36 = &block_descriptor_45;
    v27 = _Block_copy(&aBlock);
    outlined copy of Text?(v9, v10, v11, v12);
    outlined copy of Text?(v13, v14, v16, v17);
    v30 = v10;
    v31 = v9;
    outlined copy of Text?(v9, v10, v11, v12);
    outlined copy of Text?(v13, v14, v16, v17);
    swift_retain();
    v19 = v28;
    swift_retain();
    swift_release();
    objc_msgSend(v19, sel_setMetadataProvider_, v27);
    _Block_release(v27);
    if (v29)
    {
      v20 = (_QWORD *)swift_allocObject();
      v20[2] = v29;
      v20[3] = v26;
      v20[4] = v32;
      v20[5] = v15;
      v37 = partial apply for closure #2 in UIActivityItemsConfiguration.init(configuration:env:);
      v38 = v20;
      v21 = MEMORY[0x1E0C809B0];
      aBlock = MEMORY[0x1E0C809B0];
      v34 = 1107296256;
      v35 = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed UIActivityItemsConfigurationMetadataKey) -> (@out Any?);
      v36 = &block_descriptor_7;
      v22 = _Block_copy(&aBlock);
      swift_retain_n();
      swift_release();
      objc_msgSend(v19, sel_setPerItemMetadataProvider_, v22);
      _Block_release(v22);
      v23 = swift_allocObject();
      *(_QWORD *)(v23 + 16) = v29;
      *(_QWORD *)(v23 + 24) = v26;
      v37 = partial apply for closure #3 in UIActivityItemsConfiguration.init(configuration:env:);
      v38 = (_QWORD *)v23;
      aBlock = v21;
      v34 = 1107296256;
      v35 = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed UIActivityItemsConfigurationPreviewIntent, @unowned CGSize) -> (@owned NSItemProvider?);
      v36 = &block_descriptor_13_1;
      v24 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v19, sel_setPreviewProvider_, v24);
      outlined retain of AnyShareConfiguration(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
      _Block_release(v24);

      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
      outlined consume of Text?(v13, v14, v16, v17);
      outlined consume of Text?(v31, v30, v11, v12);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
    }
    else
    {
      outlined retain of AnyShareConfiguration(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);

      swift_release();
      swift_release();
      outlined consume of Text?(v13, v14, v16, v17);
      outlined consume of Text?(v31, v10, v11, v12);
    }
  }
  else
  {
    swift_release();
    swift_release();
    if (v6 == 1)
    {
      swift_retain();
      outlined copy of AppIntentExecutor?(v4);
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
    }
    outlined retain of AnyShareConfiguration(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    return 0;
  }
  return v19;
}

double closure #1 in UIActivityItemsConfiguration.init(configuration:env:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;
  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
  {
    swift_bridgeObjectRelease_n();
LABEL_14:
    if (!a1)
      goto LABEL_20;
LABEL_15:
    v19 = Text.resolveString(in:with:idiom:)();
    *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEA968];
    *(_QWORD *)a2 = v19;
    *(_QWORD *)(a2 + 8) = v21;
    return result;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
    goto LABEL_14;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;
  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
    if (!a5)
      goto LABEL_20;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0 || !a5)
      goto LABEL_20;
  }
  if ((Text.isStyled(options:)() & 1) == 0)
    goto LABEL_15;
  default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  v22 = Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  if (v22)
  {
    v23 = v22;
    *(_QWORD *)(a2 + 24) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    *(_QWORD *)a2 = v23;
    return result;
  }
LABEL_20:
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed UIActivityItemsConfigurationMetadataKey) -> (@out Any?)(uint64_t a1, void *a2)
{
  void (*v3)(_QWORD *__return_ptr);
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  void *v11;
  _QWORD v13[3];
  uint64_t v14;

  v3 = *(void (**)(_QWORD *__return_ptr))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(v13);
  swift_release();

  v5 = v14;
  if (!v14)
    return 0;
  v6 = __swift_project_boxed_opaque_existential_1(v13, v14);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v6, v6);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v8);
  v11 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return v11;
}

uint64_t closure #2 in UIActivityItemsConfiguration.init(configuration:env:)@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  a1(&v22);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;
      if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
      {
        swift_bridgeObjectRelease_n();
LABEL_17:
        outlined init with copy of Any?((uint64_t)&v26, a2);
        return outlined destroy of AnySharePreview((uint64_t)&v22);
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
        goto LABEL_17;
LABEL_15:
      result = outlined destroy of AnySharePreview((uint64_t)&v22);
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    }
  }
  if (!v25)
    goto LABEL_15;
  v15 = v23;
  v16 = v22;
  v17 = v24 & 1;
  outlined copy of Text.Storage(v22, v23, v24 & 1);
  swift_bridgeObjectRetain();
  v18 = Text.resolveString(in:with:idiom:)();
  v20 = v19;
  outlined consume of Text.Storage(v16, v15, v17);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEA968];
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v20;
  return outlined destroy of AnySharePreview((uint64_t)&v22);
}

id thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed UIActivityItemsConfigurationMetadataKey) -> (@out Any?)(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(_QWORD *__return_ptr, uint64_t, id);
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  void *v13;
  _QWORD v15[3];
  uint64_t v16;

  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t, id))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(v15, a2, v6);
  swift_release();

  v7 = v16;
  if (!v16)
    return 0;
  v8 = __swift_project_boxed_opaque_existential_1(v15, v16);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v8, v8);
  v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v9 + 16))(v12, v10);
  v13 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return v13;
}

uint64_t closure #3 in UIActivityItemsConfiguration.init(configuration:env:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[12];

  a3(v20);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    v9 = swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v9 = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
LABEL_13:
    v18 = ((uint64_t (*)(uint64_t))v20[6])(v9);
LABEL_14:
    v17 = v18;
    goto LABEL_15;
  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
    v16 = swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v16 = swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
LABEL_17:
    v18 = ((uint64_t (*)(uint64_t))v20[4])(v16);
    goto LABEL_14;
  }
  v17 = 0;
LABEL_15:
  outlined destroy of AnySharePreview((uint64_t)v20);
  return v17;
}

id thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed UIActivityItemsConfigurationPreviewIntent, @unowned CGSize) -> (@owned NSItemProvider?)(uint64_t a1, uint64_t a2, void *a3, double a4, double a5)
{
  uint64_t (*v9)(uint64_t, id, double, double);
  id v10;
  void *v11;

  v9 = *(uint64_t (**)(uint64_t, id, double, double))(a1 + 32);
  swift_retain();
  v10 = a3;
  v11 = (void *)v9(a2, v10, a4, a5);
  swift_release();

  return v11;
}

uint64_t AnyShareConfiguration.resolveActivityItems(in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[32];
  _QWORD v32[5];

  if (*(_BYTE *)(v1 + 32))
    return MEMORY[0x1E0DEE9D8];
  v3 = *a1;
  v4 = a1[1];
  v5 = *(_QWORD *)v1;
  v6 = *(_QWORD *)(v1 + 8);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  outlined init with take of Text?(v1 + 40, (uint64_t)v31);
  outlined init with take of Text?((uint64_t)v31, (uint64_t)v32);
  v24 = v3;
  if (v32[3])
  {
    *(_QWORD *)&v25 = v3;
    *((_QWORD *)&v25 + 1) = v4;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    swift_bridgeObjectRetain();
    v9 = Text.resolveString(in:with:idiom:)();
    v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayypG_yps5NeverOTg5136_s7SwiftUI21AnyShareConfigurationV20resolveActivityItems33_91555EE1A45CC99D949E9B39601C01F62inSayypGAA17EnvironmentValuesV_tFypypXEfU_SSTf1cn_nTf4ng_n(v5, v9, v10);
    outlined consume of AnyShareConfiguration.Storage(v5, v6, v7, v8, 0);
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v1 + 96))
      return v2;
  }
  else
  {
    swift_bridgeObjectRetain();
    v2 = v5;
    if (!*(_QWORD *)(v1 + 96))
      return v2;
  }
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_QWORD *)(v1 + 80);
  v13 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)&v25 = 0;
  outlined copy of Text.Storage(v11, v12, v13 & 1);
  swift_bridgeObjectRetain();
  LOBYTE(v29) = v13 & 1;
  v14 = Text.isStyled(options:)();
  if ((v14 & 1) != 0)
  {
    *(_QWORD *)&v25 = v24;
    *((_QWORD *)&v25 + 1) = v4;
    v29 = 0;
    v30 = 0;
    default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
    v27 = v13 & 1;
    v15 = Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
    if (!v15)
    {
      outlined consume of Text.Storage(v11, v12, v13 & 1);
      swift_bridgeObjectRelease();
      return v2;
    }
    v16 = (void *)v15;
    v17 = 0;
    v26 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    *(_QWORD *)&v25 = v16;
  }
  else
  {
    v29 = 0;
    v30 = 0;
    v28 = 0;
    v27 = v13 & 1;
    v16 = (void *)Text.resolveString(in:with:idiom:)();
    v17 = v18;
    v26 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v25 = v16;
    *((_QWORD *)&v25 + 1) = v18;
  }
  outlined copy of AccessibilityText.Storage(v16, v17, v14 & 1);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v20 = *(_QWORD *)(v2 + 16);
  v19 = *(_QWORD *)(v2 + 24);
  v21 = v20 + 1;
  if (v20 >= v19 >> 1)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, (char *)v2);
    v21 = v20 + 1;
    v2 = (uint64_t)v23;
  }
  *(_QWORD *)(v2 + 16) = v21;
  outlined init with take of Any(&v25, (_OWORD *)(v2 + 32 * v20 + 32));
  outlined consume of Text.Storage(v11, v12, v13 & 1);
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityText.Storage(v16, v17, v14 & 1);
  return v2;
}

id ActivitySubjectProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySubjectProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ActivitySubjectProvider()
{
  return objc_opt_self();
}

uint64_t outlined retain of AnyShareConfiguration(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  a3(v5, v6, v7, v8);
  a3(v9, v10, v11, v12);
  return a1;
}

uint64_t outlined init with take of Text?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for Text?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayypG_yps5NeverOTg5136_s7SwiftUI21AnyShareConfigurationV20resolveActivityItems33_91555EE1A45CC99D949E9B39601C01F6LL2inSayypGAA17EnvironmentValuesV_tFypypXEfU_SSTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  char *v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  objc_super v16;
  __int128 v17;
  objc_class *v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v8 = a1 + 32;
    do
    {
      outlined init with copy of Any(v8, (uint64_t)&v17);
      v9 = (objc_class *)type metadata accessor for ActivitySubjectProvider();
      v10 = (char *)objc_allocWithZone(v9);
      outlined init with copy of Any((uint64_t)&v17, (uint64_t)&v10[OBJC_IVAR____TtC7SwiftUIP33_91555EE1A45CC99D949E9B39601C01F623ActivitySubjectProvider_item]);
      v11 = &v10[OBJC_IVAR____TtC7SwiftUIP33_91555EE1A45CC99D949E9B39601C01F623ActivitySubjectProvider_subject];
      *(_QWORD *)v11 = a2;
      *((_QWORD *)v11 + 1) = a3;
      v16.receiver = v10;
      v16.super_class = v9;
      swift_bridgeObjectRetain();
      v12 = objc_msgSendSuper2(&v16, sel_init);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      v18 = v9;
      *(_QWORD *)&v17 = v12;
      v4 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1);
        v4 = v19;
      }
      v14 = *(_QWORD *)(v4 + 16);
      v13 = *(_QWORD *)(v4 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
        v4 = v19;
      }
      *(_QWORD *)(v4 + 16) = v14 + 1;
      outlined init with take of Any(&v17, (_OWORD *)(v4 + 32 * v14 + 32));
      v8 += 32;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1876592C0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 88))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

double partial apply for closure #1 in UIActivityItemsConfiguration.init(configuration:env:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in UIActivityItemsConfiguration.init(configuration:env:)(v1[5], a1, v1[9], v1[10], v1[11]);
}

uint64_t sub_187659360()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIActivityItemsConfiguration.init(configuration:env:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in UIActivityItemsConfiguration.init(configuration:env:)(*(void (**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_1876593A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in UIActivityItemsConfiguration.init(configuration:env:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #3 in UIActivityItemsConfiguration.init(configuration:env:)(a1, a2, *(void (**)(_QWORD *__return_ptr))(v2 + 16));
}

void View.labelsHidden()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t sub_1876593F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for LabelsHiddenModifier()
{
  return &type metadata for LabelsHiddenModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in LabelsHiddenModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance LabelsHiddenModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 2;
  return result;
}

ValueMetadata *type metadata accessor for HiddenLabeledContentStyle()
{
  return &type metadata for HiddenLabeledContentStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<LabelsHiddenModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier, (uint64_t)&type metadata for LabelsHiddenModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<HiddenLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type HiddenLabeledContentStyle and conformance HiddenLabeledContentStyle, (uint64_t)&type metadata for HiddenLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>);
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<LabelsHiddenModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for _LabeledContentStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<LabelsHiddenModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<LabelsHiddenModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<LabelsHiddenModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<LabelsHiddenModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier, (uint64_t)&type metadata for LabelsHiddenModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<LabelsHiddenModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in HiddenLabeledContentStyle()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **sub_1876597A0()
{
  return &protocol witness table for LabeledContentStyleConfiguration.Content;
}

uint64_t sub_1876597B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for _BackdropEffect();
  v3 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2F70], v2);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

void View.immersiveEnvironmentPicker<A>(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void one-time initialization function for defaultInspectorWidth()
{
  defaultInspectorWidth = 0x4074000000000000;
}

uint64_t InspectorSplitView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  _BYTE v36[4];
  int v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  char v50;
  _QWORD v51[2];
  char v52;
  char v53;
  __int128 v54;
  __int128 v55;
  char v56;

  v5 = *(_QWORD *)(a1 + 24);
  v47 = *(_QWORD *)(v5 - 8);
  v48 = a3;
  v40 = v5;
  MEMORY[0x1E0C80A78](a1, a2);
  v45 = &v36[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(v7 + 16);
  v41 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v36[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v42 = *(_QWORD *)(v12 + 32);
  v43 = type metadata accessor for _InspectorSplitViewRoot(0, v8, v42, v13);
  MEMORY[0x1E0C80A78](v43, v43);
  v38 = &v36[-v14];
  v15 = type metadata accessor for _VariadicView.Tree();
  v46 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v39 = &v36[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v18, v19);
  v44 = &v36[-v20];
  v21 = *(_QWORD *)v3;
  v22 = *(_QWORD *)(v3 + 8);
  v37 = *(unsigned __int8 *)(v3 + 17);
  v23 = *(_BYTE *)(v3 + 56);
  v24 = *(unsigned __int8 *)(v3 + 16);
  v51[0] = v21;
  v51[1] = v22;
  v52 = v24;
  v53 = v37;
  v25 = *(_OWORD *)(v3 + 40);
  v54 = *(_OWORD *)(v3 + 24);
  v55 = v25;
  v56 = v23;
  v26 = *(int *)(a1 + 64);
  v50 = *(_BYTE *)(v3 + *(int *)(a1 + 60));
  v27 = *(_BYTE *)(v3 + v26);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v41 + 16))(v11, v3 + *(int *)(a1 + 52), v8);
  _InspectorSplitViewRoot.init(inspectorState:sizeClass:inspectorHasToolbarItems:mainContent:)((uint64_t)v51, &v50, v27, (uint64_t)v11, v8, v42, (uint64_t)v38);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v47 + 16))(v45, v3 + *(int *)(a1 + 56), v40);
  outlined copy of StateOrBinding<Bool>(v21, v22, v24, v37);
  v28 = v39;
  v29 = v43;
  _VariadicView.Tree.init(root:content:)();
  v30 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _InspectorSplitViewRoot<A>, v29);
  v31 = *(_QWORD *)(a1 + 40);
  v49[0] = v30;
  v49[1] = v31;
  v32 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v15, v49);
  v33 = (uint64_t)v44;
  static ViewBuilder.buildExpression<A>(_:)(v28, v15, v32);
  v34 = *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8);
  v34((uint64_t)v28, v15);
  static ViewBuilder.buildBlock<A>(_:)(v33, v15, v48);
  return v34(v33, v15);
}

uint64_t _InspectorSplitViewRoot.init(inspectorState:sizeClass:inspectorHasToolbarItems:mainContent:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v10 = *(_BYTE *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 17);
  v12 = *(_BYTE *)(a1 + 56);
  v13 = *a2;
  *(_OWORD *)a7 = *(_OWORD *)a1;
  *(_BYTE *)(a7 + 16) = v10;
  *(_BYTE *)(a7 + 17) = v11;
  *(_OWORD *)(a7 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a7 + 40) = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(a7 + 56) = v12;
  *(_BYTE *)(a7 + 57) = v13;
  *(_BYTE *)(a7 + 58) = a3;
  v14 = a7 + *(int *)(type metadata accessor for _InspectorSplitViewRoot(0, a5, a6, a4) + 44);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v14, a4, a5);
}

void InspectorSplitView.init(inspectorState:mainContent:inspectorContent:horizontalSizeClass:inspectorHasToolbarItems:presentationOptions:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  char v3;
  char v4;

  v2 = *(_BYTE *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 17);
  v4 = *(_BYTE *)(a1 + 56);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = v2;
  *(_BYTE *)(a2 + 17) = v3;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(a2 + 56) = v4;
  type metadata accessor for InspectorSplitView();
}

__n128 sub_187659C34(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v7 + a1[13], v6, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v7 + a1[14], v5, v2);
  *(_BYTE *)(v7 + a1[15]) = v8;
  *(_BYTE *)(v7 + a1[16]) = v4;
  v10 = v7 + a1[17];
  v11 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v10 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v10 + 112) = v11;
  *(_OWORD *)(v10 + 121) = *(_OWORD *)(v1 + 121);
  v12 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v10 + 48) = v12;
  v13 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v10 + 80) = v13;
  result = *(__n128 *)(v1 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v1;
  *(__n128 *)(v10 + 16) = result;
  return result;
}

void type metadata accessor for InspectorSplitView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for InspectorSplitView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for InspectorSplitView(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v5 + 64) + v8;
  if ((v8 | v6) > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((*(_QWORD *)(v7 + 64) + ((v9 + ((v6 + 57) & ~v6)) & ~v8) + 9) & 0xFFFFFFFFFFFFFFF8) + 137 > 0x18)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v12 + (((v8 | v6) & 0xF8 ^ 0x1F8) & ((v8 | v6) + 16));
    swift_retain();
    return a1;
  }
  v35 = ~v8;
  v13 = *(_QWORD *)a2;
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_BYTE *)(a2 + 17);
  v16 = *(unsigned __int8 *)(a2 + 16);
  v36 = *(_QWORD *)(a3 + 24);
  v37 = *(_QWORD *)(v7 + 64);
  v34 = *(_QWORD *)(a3 + 16);
  outlined copy of StateOrBinding<Bool>(*(_QWORD *)a2, v14, v16, v15);
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v14;
  *(_BYTE *)(a1 + 16) = v16;
  *(_BYTE *)(a1 + 17) = v15;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((a1 + v6 + 57) & ~v6, (a2 + v6 + 57) & ~v6, v34);
  v17 = (((a1 + v6 + 57) & ~v6) + v9) & v35;
  v18 = (((a2 + v6 + 57) & ~v6) + v9) & v35;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v17, v18, v36);
  v19 = (_BYTE *)(v17 + v37);
  *v19 = *(_BYTE *)(v18 + v37);
  v19[1] = *(_BYTE *)(v18 + v37 + 1);
  v20 = (v17 + v37 + 9) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v18 + v37 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = *(_QWORD *)(v21 + 16);
  swift_bridgeObjectRetain();
  if (v22)
  {
    *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
    *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    v23 = *(_OWORD *)(v21 + 24);
    *(_OWORD *)(v20 + 8) = *(_OWORD *)(v21 + 8);
    *(_OWORD *)(v20 + 24) = v23;
  }
  *(_BYTE *)(v20 + 40) = *(_BYTE *)(v21 + 40);
  *(_BYTE *)(v20 + 41) = *(_BYTE *)(v21 + 41);
  v24 = *(_QWORD *)(v21 + 48);
  if (v24 < 2)
    goto LABEL_17;
  if (v24 == 2)
  {
    v24 = 2;
LABEL_17:
    *(_QWORD *)(v20 + 48) = v24;
    goto LABEL_18;
  }
  *(_QWORD *)(v20 + 48) = v24;
  v25 = (id)v24;
LABEL_18:
  *(_BYTE *)(v20 + 56) = *(_BYTE *)(v21 + 56);
  *(_BYTE *)(v20 + 57) = *(_BYTE *)(v21 + 57);
  *(_BYTE *)(v20 + 58) = *(_BYTE *)(v21 + 58);
  v26 = *(_QWORD *)(v21 + 64);
  *(_BYTE *)(v20 + 72) = *(_BYTE *)(v21 + 72);
  *(_QWORD *)(v20 + 64) = v26;
  v27 = *(_QWORD *)(v21 + 80);
  *(_BYTE *)(v20 + 88) = *(_BYTE *)(v21 + 88);
  *(_QWORD *)(v20 + 80) = v27;
  *(_BYTE *)(v20 + 89) = *(_BYTE *)(v21 + 89);
  v28 = (_OWORD *)(v20 + 96);
  v29 = (__int128 *)(v21 + 96);
  v30 = *(_QWORD *)(v21 + 120);
  if (v30)
  {
    *(_QWORD *)(v20 + 120) = v30;
    *(_QWORD *)(v20 + 128) = *(_QWORD *)(v21 + 128);
    (**(void (***)(_OWORD *, __int128 *))(v30 - 8))(v28, v29);
  }
  else
  {
    v31 = *v29;
    v32 = *(_OWORD *)(v21 + 112);
    *(_QWORD *)(v20 + 128) = *(_QWORD *)(v21 + 128);
    *v28 = v31;
    *(_OWORD *)(v20 + 112) = v32;
  }
  *(_BYTE *)(v20 + 136) = *(_BYTE *)(v21 + 136);
  return a1;
}

void destroy for InspectorSplitView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;

  outlined consume of StateOrBinding<Bool>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_BYTE *)(a1 + 17));
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v8);
  v9 = (_QWORD *)((*(_QWORD *)(v7 + 64) + v8 + 9) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  if (v9[2])
  {
    swift_release();
    swift_release();
  }
  v10 = (void *)v9[6];
  if ((unint64_t)v10 >= 3)

  if (v9[15])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v9 + 12));
}

uint64_t initializeWithCopy for InspectorSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 17);
  v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of StateOrBinding<Bool>(*(_QWORD *)a2, v7, v9, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 17) = v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 57 + a1) & ~v11;
  v13 = (v11 + 57 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v14 + v16;
  v18 = (v17 + v12) & ~v16;
  v19 = (v17 + v13) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v18, v19);
  v20 = *(_QWORD *)(v15 + 64);
  v21 = (_BYTE *)(v18 + v20);
  v22 = (_BYTE *)(v19 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  v23 = (unint64_t)(v21 + 9) & 0xFFFFFFFFFFFFFFF8;
  v24 = (unint64_t)(v22 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = *(_QWORD *)(v24 + 16);
  swift_bridgeObjectRetain();
  if (v25)
  {
    *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
    *(_OWORD *)(v23 + 24) = *(_OWORD *)(v24 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    v26 = *(_OWORD *)(v24 + 24);
    *(_OWORD *)(v23 + 8) = *(_OWORD *)(v24 + 8);
    *(_OWORD *)(v23 + 24) = v26;
  }
  *(_BYTE *)(v23 + 40) = *(_BYTE *)(v24 + 40);
  *(_BYTE *)(v23 + 41) = *(_BYTE *)(v24 + 41);
  v27 = *(_QWORD *)(v24 + 48);
  if (v27 >= 2)
  {
    if (v27 != 2)
    {
      *(_QWORD *)(v23 + 48) = v27;
      v28 = (id)v27;
      goto LABEL_9;
    }
    v27 = 2;
  }
  *(_QWORD *)(v23 + 48) = v27;
LABEL_9:
  *(_BYTE *)(v23 + 56) = *(_BYTE *)(v24 + 56);
  *(_BYTE *)(v23 + 57) = *(_BYTE *)(v24 + 57);
  *(_BYTE *)(v23 + 58) = *(_BYTE *)(v24 + 58);
  v29 = *(_QWORD *)(v24 + 64);
  *(_BYTE *)(v23 + 72) = *(_BYTE *)(v24 + 72);
  *(_QWORD *)(v23 + 64) = v29;
  v30 = *(_QWORD *)(v24 + 80);
  *(_BYTE *)(v23 + 88) = *(_BYTE *)(v24 + 88);
  *(_QWORD *)(v23 + 80) = v30;
  *(_BYTE *)(v23 + 89) = *(_BYTE *)(v24 + 89);
  v31 = (_OWORD *)(v23 + 96);
  v32 = (__int128 *)(v24 + 96);
  v33 = *(_QWORD *)(v24 + 120);
  if (v33)
  {
    *(_QWORD *)(v23 + 120) = v33;
    *(_QWORD *)(v23 + 128) = *(_QWORD *)(v24 + 128);
    (**(void (***)(_OWORD *, __int128 *))(v33 - 8))(v31, v32);
  }
  else
  {
    v34 = *v32;
    v35 = *(_OWORD *)(v24 + 112);
    *(_QWORD *)(v23 + 128) = *(_QWORD *)(v24 + 128);
    *v31 = v34;
    *(_OWORD *)(v23 + 112) = v35;
  }
  *(_BYTE *)(v23 + 136) = *(_BYTE *)(v24 + 136);
  return a1;
}

uint64_t assignWithCopy for InspectorSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  unint64_t v29;
  unint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  unint64_t *v36;
  void *v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  id v46;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 17);
  v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of StateOrBinding<Bool>(*(_QWORD *)a2, v7, v9, v8);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_BYTE *)(a1 + 17);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v13 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 17) = v8;
  outlined consume of StateOrBinding<Bool>(v10, v11, v13, v12);
  v14 = *(_OWORD *)(a2 + 24);
  v15 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v15;
  *(_OWORD *)(a1 + 24) = v14;
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v17 + 57 + a1) & ~v17;
  v19 = (v17 + 57 + a2) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v18, v19);
  v20 = *(_QWORD *)(v16 + 64);
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = v20 + v22;
  v24 = (v23 + v18) & ~v22;
  v25 = (v23 + v19) & ~v22;
  (*(void (**)(uint64_t, uint64_t))(v21 + 24))(v24, v25);
  v26 = *(_QWORD *)(v21 + 64);
  v27 = (_BYTE *)(v24 + v26);
  v28 = (_BYTE *)(v25 + v26);
  *v27 = *v28;
  v27[1] = v28[1];
  v29 = (unint64_t)(v27 + 9) & 0xFFFFFFFFFFFFFFF8;
  v30 = (unint64_t)(v28 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = (_OWORD *)(v29 + 8);
  v32 = (_OWORD *)(v30 + 8);
  v33 = *(_QWORD *)(v30 + 16);
  if (*(_QWORD *)(v29 + 16))
  {
    if (v33)
    {
      *(_QWORD *)(v29 + 8) = *(_QWORD *)(v30 + 8);
      swift_retain();
      swift_release();
      *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
      swift_retain();
      swift_release();
      *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
    }
    else
    {
      outlined destroy of Binding<PresentationDetent>(v29 + 8);
      v34 = *(_OWORD *)(v30 + 24);
      *v31 = *v32;
      *(_OWORD *)(v29 + 24) = v34;
    }
  }
  else if (v33)
  {
    *(_QWORD *)(v29 + 8) = *(_QWORD *)(v30 + 8);
    *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
    *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    v35 = *(_OWORD *)(v30 + 24);
    *v31 = *v32;
    *(_OWORD *)(v29 + 24) = v35;
  }
  v36 = (unint64_t *)(v29 + 48);
  v37 = *(void **)(v29 + 48);
  *(_BYTE *)(v29 + 40) = *(_BYTE *)(v30 + 40);
  *(_BYTE *)(v29 + 41) = *(_BYTE *)(v30 + 41);
  v38 = *(_QWORD *)(v30 + 48);
  if (v37 == (void *)2)
  {
    if (v38 < 2)
    {
LABEL_20:
      *v36 = v38;
      goto LABEL_21;
    }
    if (v38 == 2)
    {
      v38 = 2;
      goto LABEL_20;
    }
LABEL_16:
    *v36 = v38;
    v39 = (id)v38;
    goto LABEL_21;
  }
  if (v38 == 2)
  {
    outlined destroy of PresentationDimmingBehavior((void **)(v29 + 48));
LABEL_19:
    v38 = *(_QWORD *)(v30 + 48);
    goto LABEL_20;
  }
  if ((unint64_t)v37 < 2)
  {
    if (v38 < 2)
      goto LABEL_20;
    goto LABEL_16;
  }
  if (v38 < 2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v29 + 48, (uint64_t (*)(_QWORD))type metadata accessor for UISheetPresentationControllerDetentIdentifier);
    goto LABEL_19;
  }
  *v36 = v38;
  v46 = (id)v38;

LABEL_21:
  *(_BYTE *)(v29 + 56) = *(_BYTE *)(v30 + 56);
  *(_BYTE *)(v29 + 57) = *(_BYTE *)(v30 + 57);
  *(_BYTE *)(v29 + 58) = *(_BYTE *)(v30 + 58);
  v40 = *(_QWORD *)(v30 + 64);
  *(_BYTE *)(v29 + 72) = *(_BYTE *)(v30 + 72);
  *(_QWORD *)(v29 + 64) = v40;
  v41 = *(_QWORD *)(v30 + 80);
  *(_BYTE *)(v29 + 88) = *(_BYTE *)(v30 + 88);
  *(_QWORD *)(v29 + 80) = v41;
  *(_BYTE *)(v29 + 89) = *(_BYTE *)(v30 + 89);
  v42 = *(_QWORD *)(v30 + 120);
  if (!*(_QWORD *)(v29 + 120))
  {
    if (v42)
    {
      *(_QWORD *)(v29 + 120) = v42;
      *(_QWORD *)(v29 + 128) = *(_QWORD *)(v30 + 128);
      (**(void (***)(uint64_t, uint64_t))(v42 - 8))(v29 + 96, v30 + 96);
      goto LABEL_28;
    }
LABEL_27:
    v43 = *(_OWORD *)(v30 + 96);
    v44 = *(_OWORD *)(v30 + 112);
    *(_QWORD *)(v29 + 128) = *(_QWORD *)(v30 + 128);
    *(_OWORD *)(v29 + 96) = v43;
    *(_OWORD *)(v29 + 112) = v44;
    goto LABEL_28;
  }
  if (!v42)
  {
    __swift_destroy_boxed_opaque_existential_1(v29 + 96);
    goto LABEL_27;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v29 + 96), (uint64_t *)(v30 + 96));
LABEL_28:
  *(_BYTE *)(v29 + 136) = *(_BYTE *)(v30 + 136);
  return a1;
}

uint64_t outlined destroy of Binding<PresentationDetent>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<PresentationDetent>, (uint64_t)&type metadata for PresentationDetent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void **outlined destroy of PresentationDimmingBehavior(void **a1)
{
  destroy for PresentationDimmingBehavior(a1);
  return a1;
}

_OWORD *initializeWithTake for InspectorSplitView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = a2[2];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 57) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 57) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v10 + v12;
  v14 = (v13 + v8) & ~v12;
  v15 = (v13 + v9) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v14, v15);
  v16 = *(_QWORD *)(v11 + 64);
  v17 = (_BYTE *)(v14 + v16);
  v18 = (_BYTE *)(v15 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  v19 = (_OWORD *)((unint64_t)(v17 + 9) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_OWORD *)((unint64_t)(v18 + 9) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = v20[4];
  v23 = v20[1];
  v22 = v20[2];
  v19[3] = v20[3];
  v19[4] = v21;
  v19[1] = v23;
  v19[2] = v22;
  v24 = *(_OWORD *)((char *)v20 + 121);
  v26 = v20[6];
  v25 = v20[7];
  v19[5] = v20[5];
  v19[6] = v26;
  v19[7] = v25;
  *(_OWORD *)((char *)v19 + 121) = v24;
  return a1;
}

uint64_t assignWithTake for InspectorSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 17);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v11 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = v7;
  outlined consume of StateOrBinding<Bool>(v8, v9, v11, v10);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 57 + a1) & ~v13;
  v15 = (v13 + 57 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v16 + v18;
  v20 = (v19 + v14) & ~v18;
  v21 = (v19 + v15) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 40))(v20, v21);
  v22 = *(_QWORD *)(v17 + 64);
  v23 = (_BYTE *)(v20 + v22);
  v24 = (_BYTE *)(v21 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  v25 = (unint64_t)(v23 + 9) & 0xFFFFFFFFFFFFFFF8;
  v26 = (unint64_t)(v24 + 9) & 0xFFFFFFFFFFFFFFF8;
  v27 = (_OWORD *)(v26 + 8);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  swift_bridgeObjectRelease();
  v28 = (_OWORD *)(v25 + 8);
  if (*(_QWORD *)(v25 + 16))
  {
    if (*(_QWORD *)(v26 + 16))
    {
      *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
      swift_release();
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
      swift_release();
      *(_OWORD *)(v25 + 24) = *(_OWORD *)(v26 + 24);
    }
    else
    {
      outlined destroy of Binding<PresentationDetent>(v25 + 8);
      v30 = *(_OWORD *)(v26 + 24);
      *v28 = *v27;
      *(_OWORD *)(v25 + 24) = v30;
    }
  }
  else
  {
    v29 = *(_OWORD *)(v26 + 24);
    *v28 = *v27;
    *(_OWORD *)(v25 + 24) = v29;
  }
  v32 = (unint64_t *)(v25 + 48);
  v31 = *(void **)(v25 + 48);
  *(_BYTE *)(v25 + 40) = *(_BYTE *)(v26 + 40);
  *(_BYTE *)(v25 + 41) = *(_BYTE *)(v26 + 41);
  v33 = *(_QWORD *)(v26 + 48);
  if (v31 == (void *)2)
  {
    if (v33 == 2)
      v33 = 2;
    goto LABEL_15;
  }
  if (v33 == 2)
  {
    outlined destroy of PresentationDimmingBehavior((void **)(v25 + 48));
LABEL_14:
    v33 = *(_QWORD *)(v26 + 48);
    goto LABEL_15;
  }
  if ((unint64_t)v31 < 2)
  {
LABEL_15:
    *v32 = v33;
    goto LABEL_16;
  }
  if (v33 < 2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v25 + 48, (uint64_t (*)(_QWORD))type metadata accessor for UISheetPresentationControllerDetentIdentifier);
    goto LABEL_14;
  }
  *v32 = v33;

LABEL_16:
  *(_BYTE *)(v25 + 56) = *(_BYTE *)(v26 + 56);
  *(_BYTE *)(v25 + 57) = *(_BYTE *)(v26 + 57);
  *(_BYTE *)(v25 + 58) = *(_BYTE *)(v26 + 58);
  v34 = *(_QWORD *)(v26 + 64);
  *(_BYTE *)(v25 + 72) = *(_BYTE *)(v26 + 72);
  *(_QWORD *)(v25 + 64) = v34;
  v35 = *(_QWORD *)(v26 + 80);
  *(_BYTE *)(v25 + 88) = *(_BYTE *)(v26 + 88);
  *(_QWORD *)(v25 + 80) = v35;
  *(_BYTE *)(v25 + 89) = *(_BYTE *)(v26 + 89);
  if (*(_QWORD *)(v25 + 120))
    __swift_destroy_boxed_opaque_existential_1(v25 + 96);
  v36 = *(_OWORD *)(v26 + 96);
  v37 = *(_OWORD *)(v26 + 112);
  *(_QWORD *)(v25 + 128) = *(_QWORD *)(v26 + 128);
  *(_OWORD *)(v25 + 96) = v36;
  *(_OWORD *)(v25 + 112) = v37;
  *(_BYTE *)(v25 + 136) = *(_BYTE *)(v26 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for InspectorSplitView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v6 <= v8)
    v9 = *(_DWORD *)(v7 + 84);
  else
    v9 = *(_DWORD *)(v5 + 84);
  if (v9 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = *(_QWORD *)(v5 + 64);
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 64) + 9;
  if (v9 >= a2)
  {
    v19 = (a1 + v10 + 57) & ~v10;
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(v19, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v20 = (v19 + v11 + v12) & ~v12;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v20);
      }
      else
      {
        v21 = *(_QWORD *)((v13 + v20) & 0xFFFFFFFFFFFFF8);
        if (v21 >= 0xFFFFFFFF)
          LODWORD(v21) = -1;
        return (v21 + 1);
      }
    }
  }
  else
  {
    v14 = (a2 - v9 + 255) >> (8 * (((v13 + ((v11 + v12 + ((v10 + 57) & ~(_BYTE)v10)) & ~(_BYTE)v12)) & 0xF8) - 119));
    if ((((_DWORD)v13 + (((_DWORD)v11 + (_DWORD)v12 + (((_DWORD)v10 + 57) & ~(_DWORD)v10)) & ~(_DWORD)v12)) & 0xFFFFFFF8)
       + 137 < 4)
      v15 = v14 + 1;
    else
      v15 = 2;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18765AB08 + 4 * byte_187C49630[v17]))();
  }
}

void storeEnumTagSinglePayload for InspectorSplitView(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  v8 = ((*(_QWORD *)(v6 + 64)
       + 9
       + ((*(_QWORD *)(v5 + 64)
         + *(unsigned __int8 *)(v6 + 80)
         + ((*(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFFFFFFFFFF8)
     + 137;
  if (v7 >= a3)
  {
    v11 = 0u;
    if (v7 >= a2)
      goto LABEL_19;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v7 + 255) >> (8
                              * (((*(_BYTE *)(v6 + 64)
                                 + 9
                                 + ((*(_BYTE *)(v5 + 64)
                                   + *(_BYTE *)(v6 + 80)
                                   + ((*(_BYTE *)(v5 + 80) + 57) & ~*(_BYTE *)(v5 + 80))) & ~*(_BYTE *)(v6 + 80))) & 0xF8)
                               - 119)))
         + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v7 >= a2)
LABEL_19:
      __asm { BR              X6 }
  }
  if (v8 >= 4)
    v12 = ~v7 + a2;
  else
    v12 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v12;
  else
    *(_DWORD *)a1 = v12;
  __asm { BR              X10 }
}

void sub_18765AD24()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18765ADE4);
}

void sub_18765AD2C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18765AD34);
  JUMPOUT(0x18765ADE4);
}

void sub_18765AD84()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18765ADE4);
}

void sub_18765AD8C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18765ADE4);
}

uint64_t sub_18765AD94(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(v14 + v15) = 0;
  if (!a2)
    JUMPOUT(0x18765ADE4);
  v3 = (v14 + v13 + 57) & a1;
  if (v6 == v10)
  {
    v4 = *(uint64_t (**)(uint64_t))(v9 + 56);
  }
  else
  {
    v3 = (v3 + v12 + v11) & v7;
    if (a3 != v10)
      JUMPOUT(0x18765ADA0);
    v4 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v4(v3);
}

uint64_t associated type witness table accessor for View.Body : View in InspectorSplitView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _InspectorSplitViewRoot);
}

uint64_t type metadata completion function for _InspectorSplitViewRoot()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 59) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_BYTE *)(a2 + 17);
    v14 = *(_BYTE *)(a2 + 16);
    outlined copy of StateOrBinding<Bool>(*(_QWORD *)a2, v12, v14, v13);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v14;
    *(_BYTE *)(a1 + 17) = v13;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
    *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))((a1 + v7 + 59) & ~v7, (a2 + v7 + 59) & ~v7, v5);
  }
  return a1;
}

uint64_t destroy for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2)
{
  outlined consume of StateOrBinding<Bool>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_BYTE *)(a1 + 17));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 59) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 17);
  v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of StateOrBinding<Bool>(*(_QWORD *)a2, v7, v9, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 17) = v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 16))((*(unsigned __int8 *)(v10 + 80) + 59 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 59 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t assignWithCopy for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 17);
  v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of StateOrBinding<Bool>(*(_QWORD *)a2, v7, v9, v8);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_BYTE *)(a1 + 17);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v13 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 17) = v8;
  outlined consume of StateOrBinding<Bool>(v10, v11, v13, v12);
  v14 = *(_OWORD *)(a2 + 24);
  v15 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v15;
  *(_OWORD *)(a1 + 24) = v14;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 24))((*(unsigned __int8 *)(v16 + 80) + 59 + a1) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(unsigned __int8 *)(v16 + 80) + 59 + a2) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t initializeWithTake for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))((*(unsigned __int8 *)(v5 + 80) + 59 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 59 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithTake for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 17);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v11 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = v7;
  outlined consume of StateOrBinding<Bool>(v8, v9, v11, v10);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))((*(unsigned __int8 *)(v12 + 80) + 59 + a1) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(unsigned __int8 *)(v12 + 80) + 59 + a2) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _InspectorSplitViewRoot(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 59) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0x7FFFFFFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 59) & ~v7);
      v15 = *(_QWORD *)(a1 + 32) >> 1;
      v16 = -2 - v15;
      if (-2 - (int)v15 < 0)
        v16 = -1;
      if (v15 > 0x80000000)
        return (v16 + 1);
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18765B3A4 + 4 * byte_187C4963F[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for _InspectorSplitViewRoot(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 59) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_18765B654(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[3];
  v5 = type metadata accessor for _InspectorSplitViewRoot(255, *a1, a1[2], a4);
  v6 = type metadata accessor for _VariadicView.Tree();
  v8[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _InspectorSplitViewRoot<A>, v5);
  v8[1] = v4;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v6, v8);
}

uint64_t instantiation function for generic protocol witness table for _InspectorSplitViewRoot<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _InspectorSplitViewRoot<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in _InspectorSplitViewRoot<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t _InspectorSplitViewRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  _OWORD v22[3];
  uint64_t v23;

  v7 = *(_QWORD *)(a2 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v21[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v9);
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v22);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 16) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v21[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  v12 = v11 + ((v8 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  v13 = v22[1];
  *(_OWORD *)v12 = v22[0];
  *(_OWORD *)(v12 + 16) = v13;
  *(_OWORD *)(v12 + 32) = v22[2];
  *(_QWORD *)(v12 + 48) = v23;
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<InspectorSplitViewLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout, (uint64_t)&unk_1E1AE50F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _OverlayModifier<InspectorDimmingView>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView, (uint64_t)&type metadata for InspectorDimmingView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3610]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(255);
  swift_getTupleTypeMetadata2();
  v14 = type metadata accessor for TupleView();
  lazy protocol witness table accessor for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>();
  v15 = type metadata accessor for _VariadicView.Tree();
  v16 = lazy protocol witness table accessor for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>();
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v14);
  v21[0] = v16;
  v21[1] = v17;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v15, v21);
  result = GeometryReader.init(content:)();
  *a3 = result;
  a3[1] = v19;
  return result;
}

uint64_t closure #1 in _InspectorSplitViewRoot.body(children:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;

  v50 = a3;
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<InspectorSplitViewLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout, (uint64_t)&unk_1E1AE50F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _OverlayModifier<InspectorDimmingView>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView, (uint64_t)&type metadata for InspectorDimmingView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3610]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(255);
  swift_getTupleTypeMetadata2();
  v11 = type metadata accessor for TupleView();
  lazy protocol witness table accessor for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>();
  v48 = v11;
  v12 = type metadata accessor for _VariadicView.Tree();
  v49 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v45 - v18;
  v20 = a1[1];
  v56 = *a1;
  v57 = v20;
  v58 = a1[2];
  v59 = *((_DWORD *)a1 + 12);
  type metadata accessor for _InspectorSplitViewRoot(0, a4, a5, v21);
  v22 = NavigationLink.deprecated_isActive.getter();
  v47 = *(unsigned __int8 *)(a2 + 57);
  v23 = *(unsigned __int8 *)(a2 + 56);
  if (*(_QWORD *)(a2 + 32) >> 1 == 0xFFFFFFFFLL && v23 < 2)
  {
    v45 = a5;
    v46 = a6;
    v24 = *(_QWORD *)a2;
    v25 = *(_QWORD *)(a2 + 8);
    v26 = *(unsigned __int8 *)(a2 + 16);
    v27 = *(_BYTE *)(a2 + 17);
    outlined copy of StateOrBinding<Bool>(*(_QWORD *)a2, v25, v26, v27);
    if (one-time initialization token for defaultInspectorWidth != -1)
      swift_once();
    v28 = *(double *)&defaultInspectorWidth;
    outlined consume of StateOrBinding<Bool>(v24, v25, v26, v27);
    a6 = v46;
    a5 = v45;
  }
  else
  {
    if ((v23 & 0x80u) == 0)
      v29 = (double *)(a2 + 24);
    else
      v29 = (double *)(a2 + 40);
    v28 = *v29;
  }
  v52 = v56;
  v53 = v57;
  v54 = v58;
  v55 = v59;
  GeometryProxy.safeAreaInsets.getter();
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = a4;
  *(_QWORD *)(v38 + 24) = a5;
  *(_BYTE *)(v38 + 32) = v22 & 1;
  *(_BYTE *)(v38 + 33) = v47;
  *(double *)(v38 + 40) = v28 + 0.5;
  *(_QWORD *)(v38 + 48) = v31;
  *(_QWORD *)(v38 + 56) = v33;
  *(_QWORD *)(v38 + 64) = v35;
  *(_QWORD *)(v38 + 72) = v37;
  MEMORY[0x1E0C80A78](v38, v39);
  *(&v45 - 6) = a4;
  *(&v45 - 5) = a5;
  *(&v45 - 4) = a2;
  *(&v45 - 3) = (uint64_t)&v56;
  *(&v45 - 2) = v50;
  implicit closure #2 in implicit closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:)((uint64_t)partial apply for closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:), (uint64_t)(&v45 - 8), (uint64_t)v15);
  swift_release();
  v40 = lazy protocol witness table accessor for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>();
  v41 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v48);
  v51[0] = v40;
  v51[1] = v41;
  v42 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v12, v51);
  static ViewBuilder.buildExpression<A>(_:)(v15, v12, v42);
  v43 = *(void (**)(char *, uint64_t))(v49 + 8);
  v43(v15, v12);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v19, v12, a6);
  return ((uint64_t (*)(char *, uint64_t))v43)(v19, v12);
}

uint64_t implicit closure #2 in implicit closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _OverlayModifier<InspectorDimmingView>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView, (uint64_t)&type metadata for InspectorDimmingView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3610]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(255);
  swift_getTupleTypeMetadata2();
  v6 = type metadata accessor for TupleView();
  v7 = lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout();
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v6);
  return Layout.callAsFunction<A>(_:)(a1, a2, (uint64_t)&unk_1E1AE50F8, v6, v7, v8, a3);
}

uint64_t closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:)@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  double v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  _BYTE v68[4];
  int v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t *v81;
  _BYTE v82[168];
  _QWORD v83[21];
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88[24];
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  char v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  char v122;
  _QWORD v123[2];
  _QWORD v124[4];

  v71 = a3;
  v73 = a6;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = &v68[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
  v13 = type metadata accessor for ModifiedContent();
  v75 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v80 = &v68[-v15];
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _OverlayModifier<InspectorDimmingView>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView, (uint64_t)&type metadata for InspectorDimmingView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3610]);
  v76 = v13;
  v16 = type metadata accessor for ModifiedContent();
  v78 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v72 = &v68[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v19, v20);
  v74 = &v68[-v21];
  MEMORY[0x1E0C80A78](v22, v23);
  v79 = &v68[-v24];
  v25 = a2[1];
  v108 = *a2;
  v109 = v25;
  v110 = a2[2];
  LODWORD(v111) = *((_DWORD *)a2 + 12);
  GeometryProxy.size.getter();
  v27 = v26;
  v29 = v28;
  v31 = type metadata accessor for _InspectorSplitViewRoot(0, a4, a5, v30);
  v32 = v31;
  v81 = a1;
  v33 = *((unsigned __int8 *)a1 + 57);
  v77 = v16;
  if (v33 == 1)
  {
    v34 = 1194.0;
    if (v29 < v27)
      v34 = 1024.0;
    v35 = v34 <= v27;
  }
  else
  {
    v35 = 2;
  }
  v36 = v81;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, (uint64_t)v81 + *(int *)(v31 + 44), a4);
  Spring.init(mass:stiffness:damping:allowOverDamping:)();
  v93 = v108;
  *(_QWORD *)&v94 = v109;
  static Animation.spring(_:blendDuration:)();
  v38 = *v36;
  v37 = v36[1];
  v39 = *((_BYTE *)v36 + 17);
  v70 = v32;
  if ((v39 & 1) != 0)
  {
    v40 = v36[2] & 1;
    *(_QWORD *)&v108 = v38;
    *((_QWORD *)&v108 + 1) = v37;
    LOBYTE(v109) = v40;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v93);
  }
  else
  {
    LOBYTE(v108) = v38 & 1;
    *((_QWORD *)&v108 + 1) = v37;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.wrappedValue.getter();
  }
  LOBYTE(v108) = v93;
  View.animation<A>(_:value:)();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, a4);
  v41 = v36[1];
  if ((*((_BYTE *)v36 + 17) & 1) != 0)
  {
    swift_retain();
    v42 = swift_retain();
  }
  else
  {
    LOBYTE(v93) = *v36 & 1;
    *((_QWORD *)&v93 + 1) = v41;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    v42 = State.projectedValue.getter();
  }
  MEMORY[0x1E0C80A78](v42, v43);
  static Alignment.center.getter();
  v44 = lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>();
  v124[0] = a5;
  v124[1] = v44;
  v45 = v76;
  v46 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v76, v124);
  v69 = v35;
  v47 = v46;
  lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView();
  v48 = v74;
  v49 = v80;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(_BYTE *, uint64_t))(v75 + 8))(v49, v45);
  swift_release();
  swift_release();
  v50 = lazy protocol witness table accessor for type _OverlayModifier<InspectorDimmingView> and conformance _OverlayModifier<A>();
  v123[0] = v47;
  v123[1] = v50;
  v51 = v77;
  v52 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v77, v123);
  v53 = v79;
  static ViewBuilder.buildExpression<A>(_:)(v48, v51, v52);
  v54 = v78;
  v55 = *(uint64_t (**)(uint64_t, uint64_t))(v78 + 8);
  v55((uint64_t)v48, v51);
  if (*((_BYTE *)v81 + 57) == 1)
  {
    v84 = static VerticalAlignment.center.getter();
    v85 = 0;
    v86 = 0;
    static Alignment.center.getter();
    specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v83, 0.0, 1, INFINITY, 0);
    outlined init with copy of ModifiedContent<_VariadicView_Children, _FlexFrameLayout>((uint64_t)v83, (uint64_t)v82);
    outlined init with copy of ModifiedContent<_VariadicView_Children, _FlexFrameLayout>((uint64_t)v82, (uint64_t)&v87);
    outlined destroy of ModifiedContent<_VariadicView_Children, _FlexFrameLayout>((uint64_t)v83);
    outlined destroy of ModifiedContent<_VariadicView_Children, _FlexFrameLayout>((uint64_t)v82);
    v56 = static Alignment.leading.getter();
    v58 = v57;
    v59 = NavigationLink.deprecated_isActive.getter() & 1;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v84, (uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>);
    v89 = v69;
    v90 = v59;
    v60 = v81;
    v91 = v56;
    v92 = v58;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v84, (uint64_t (*)(_QWORD))type metadata accessor for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>);
    Spring.init(mass:stiffness:damping:allowOverDamping:)();
    v93 = v108;
    *(_QWORD *)&v94 = v109;
    v61 = static Animation.spring(_:blendDuration:)();
    v62 = v60[1];
    if ((*((_BYTE *)v60 + 17) & 1) != 0)
    {
      v63 = v60[2] & 1;
      *(_QWORD *)&v108 = *v60;
      *((_QWORD *)&v108 + 1) = v62;
      LOBYTE(v109) = v63;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      MEMORY[0x18D75B9C8](&v93);
    }
    else
    {
      LOBYTE(v108) = *v60 & 1;
      *((_QWORD *)&v108 + 1) = v62;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
      State.wrappedValue.getter();
    }
    v65 = v93;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v88, (uint64_t)&v93, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>);
    *((_QWORD *)&v106 + 1) = v61;
    v107 = v65;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>);
    v120 = v105;
    v121 = v106;
    v122 = v107;
    v116 = v101;
    v117 = v102;
    v118 = v103;
    v119 = v104;
    v112 = v97;
    v113 = v98;
    v114 = v99;
    v115 = v100;
    v108 = v93;
    v109 = v94;
    v110 = v95;
    v111 = v96;
    v64 = (uint64_t)v72;
    v54 = v78;
    v53 = v79;
  }
  else
  {
    v122 = 0;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v64 = (uint64_t)v72;
  }
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v54 + 16))(v64, v53, v51);
  v88[0] = v64;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v108, (uint64_t)&v93, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?);
  v88[1] = (uint64_t)&v93;
  v84 = v51;
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(0);
  v85 = v66;
  v83[0] = v52;
  v83[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>? and conformance <A> A?();
  static ViewBuilder.buildBlock<each A>(_:)(v88, 2uLL, (uint64_t)&v84);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v108, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?);
  v55((uint64_t)v53, v51);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v93, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?);
  return v55(v64, v51);
}

uint64_t static _InspectorSplitViewRoot._viewListOptions.getter()
{
  return 128;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _InspectorSplitViewRoot<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _InspectorSplitViewRoot<A>, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance _InspectorSplitViewRoot<A>()
{
  return static _InspectorSplitViewRoot._viewListOptions.getter();
}

uint64_t sub_18765C770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for _InspectorSplitViewRoot(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v4 + v8;
  outlined consume of StateOrBinding<Bool>(*(_QWORD *)(v4 + v8), *(_QWORD *)(v4 + v8 + 8), *(unsigned __int8 *)(v4 + v8 + 16), *(_BYTE *)(v4 + v8 + 17));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v10 + *(int *)(v6 + 44), v5);
  __swift_destroy_boxed_opaque_existential_1(v4 + v9);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _InspectorSplitViewRoot.body(children:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(type metadata accessor for _InspectorSplitViewRoot(0, v6, v7, a2) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return closure #1 in _InspectorSplitViewRoot.body(children:)(a1, v3 + v9, v3 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8), v6, v7, a3);
}

unint64_t lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout;
  if (!lazy protocol witness table cache variable for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorSplitViewLayout, &unk_1E1AE50F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout;
  if (!lazy protocol witness table cache variable for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorSplitViewLayout, &unk_1E1AE50F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InspectorDimmingView and conformance InspectorDimmingView;
  if (!lazy protocol witness table cache variable for type InspectorDimmingView and conformance InspectorDimmingView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorDimmingView, &type metadata for InspectorDimmingView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorDimmingView and conformance InspectorDimmingView);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>);
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>)
  {
    type metadata accessor for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _BackgroundModifier<InspectorSeparatorShadow>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSeparatorShadow and conformance InspectorSeparatorShadow, (uint64_t)&type metadata for InspectorSeparatorShadow, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>);
  }
}

void type metadata accessor for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>)
  {
    type metadata accessor for TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>);
  }
}

void type metadata accessor for TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>, (uint64_t (*)(uint64_t))type metadata accessor for (InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, _FlexFrameLayout>, MEMORY[0x1E0CE5600], MEMORY[0x1E0CE35F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>));
  }
}

unint64_t lazy protocol witness table accessor for type InspectorSeparatorShadow and conformance InspectorSeparatorShadow()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InspectorSeparatorShadow and conformance InspectorSeparatorShadow;
  if (!lazy protocol witness table cache variable for type InspectorSeparatorShadow and conformance InspectorSeparatorShadow)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorSeparatorShadow, &type metadata for InspectorSeparatorShadow);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorSeparatorShadow and conformance InspectorSeparatorShadow);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<InspectorSplitViewLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout, (uint64_t)&unk_1E1AE50F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE14B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<InspectorSplitViewLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout, (uint64_t)&unk_1E1AE50F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE14C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:)(*(uint64_t **)(v1 + 32), *(__int128 **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  swift_retain();
  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type _OverlayModifier<InspectorDimmingView> and conformance _OverlayModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _OverlayModifier<InspectorDimmingView> and conformance _OverlayModifier<A>;
  if (!lazy protocol witness table cache variable for type _OverlayModifier<InspectorDimmingView> and conformance _OverlayModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _OverlayModifier<InspectorDimmingView>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView, (uint64_t)&type metadata for InspectorDimmingView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3610]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3620], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayModifier<InspectorDimmingView> and conformance _OverlayModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(255);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>, lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, lazy protocol witness table accessor for type HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>> and conformance HStack<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BackgroundModifier<InspectorSeparatorShadow> and conformance _BackgroundModifier<A>);
}

uint64_t lazy protocol witness table accessor for type HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>> and conformance HStack<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, MEMORY[0x1E0CE73D0]);
}

unint64_t lazy protocol witness table accessor for type _BackgroundModifier<InspectorSeparatorShadow> and conformance _BackgroundModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _BackgroundModifier<InspectorSeparatorShadow> and conformance _BackgroundModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundModifier<InspectorSeparatorShadow> and conformance _BackgroundModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _BackgroundModifier<InspectorSeparatorShadow>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSeparatorShadow and conformance InspectorSeparatorShadow, (uint64_t)&type metadata for InspectorSeparatorShadow, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundModifier<InspectorSeparatorShadow> and conformance _BackgroundModifier<A>);
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<_VariadicView_Children, _FlexFrameLayout>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, _FlexFrameLayout>, MEMORY[0x1E0CE5600], MEMORY[0x1E0CE35F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<_VariadicView_Children, _FlexFrameLayout>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, _FlexFrameLayout>, MEMORY[0x1E0CE5600], MEMORY[0x1E0CE35F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18765CF1C()
{
  return swift_deallocObject();
}

void *type metadata accessor for InspectorSplitViewLayout()
{
  return &unk_1E1AE50F8;
}

uint64_t sub_18765CF3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<InspectorSplitViewLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout, (uint64_t)&unk_1E1AE50F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _OverlayModifier<InspectorDimmingView>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView, (uint64_t)&type metadata for InspectorDimmingView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3610]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(255);
  swift_getTupleTypeMetadata2();
  v0 = type metadata accessor for TupleView();
  lazy protocol witness table accessor for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>();
  v1 = type metadata accessor for _VariadicView.Tree();
  v4[0] = lazy protocol witness table accessor for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>();
  v4[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v0);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v1, v4);
  v2 = type metadata accessor for GeometryReader();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2768], v2);
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance InspectorSplitViewLayout(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double *a9)
{
  return specialized InspectorSplitViewLayout.placeSubviews(in:proposal:subviews:cache:)(a9, a1, a2, a3, a4);
}

unint64_t instantiation function for generic protocol witness table for InspectorSplitViewLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t specialized InspectorSplitViewLayout.placeSubviews(in:proposal:subviews:cache:)(double *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double *v5;
  int v10;
  CGFloat v11;
  char v12;
  char v13;
  int v14;
  double v15;
  double v16;
  double v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CGFloat Width;
  double v24;
  CGAffineTransform v25;
  __int128 v26;
  char v27;
  __int128 v28;
  char v29;
  CGPoint v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;

  v10 = *(_DWORD *)a1;
  v11 = a1[1];
  v12 = *((_BYTE *)a1 + 16);
  v13 = *((_BYTE *)a1 + 17);
  v14 = *(unsigned __int8 *)v5;
  v15 = v5[1];
  v16 = v5[5];
  v24 = v5[2];
  if (*((_BYTE *)v5 + 1) == 1)
  {
    v17 = 1194.0;
    if (a5 < a4)
      v17 = 1024.0;
    if (v17 > a4)
    {
      LODWORD(v25.a) = *(_DWORD *)a1;
      v25.b = v11;
      LOBYTE(v25.c) = v12;
      BYTE1(v25.c) = v13;
      result = LayoutSubviews.endIndex.getter();
      if ((result & 0x8000000000000000) == 0)
      {
        v19 = result;
        if (result)
        {
          v20 = 0;
          do
          {
            if (v20)
            {
              v33.origin.x = a2;
              v33.origin.y = a3;
              v33.size.width = a4;
              v33.size.height = a5;
              CGRectGetWidth(v33);
              v34.origin.x = a2;
              v34.origin.y = a3;
              v34.size.width = a4;
              v34.size.height = a5;
              CGRectGetHeight(v34);
              BYTE1(v25.c) = v13;
              LayoutSubviews.subscript.getter();
              *(_OWORD *)&v25.a = v28;
              LOBYTE(v25.c) = v29;
            }
            else
            {
              BYTE1(v25.c) = v13;
              LayoutSubviews.subscript.getter();
              *(_OWORD *)&v25.a = v28;
              LOBYTE(v25.c) = v29;
              v31.origin.x = a2;
              v31.origin.y = a3;
              v31.size.width = a4;
              v31.size.height = a5;
              CGRectGetWidth(v31);
              v32.origin.x = a2;
              v32.origin.y = a3;
              v32.size.width = a4;
              v32.size.height = a5;
              CGRectGetHeight(v32);
            }
            static UnitPoint.topLeading.getter();
            LOBYTE(v26) = 0;
            result = LayoutSubview.place(at:anchor:proposal:)();
            ++v20;
          }
          while (v19 != v20);
        }
        return result;
      }
LABEL_23:
      __break(1u);
      return result;
    }
  }
  LODWORD(v25.a) = *(_DWORD *)a1;
  v25.b = v11;
  LOBYTE(v25.c) = v12;
  BYTE1(v25.c) = v13;
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v21 = result;
  if (result)
  {
    v22 = 0;
    if (v14)
      v16 = -v15;
    do
    {
      LODWORD(v25.a) = v10;
      v25.b = v11;
      LOBYTE(v25.c) = v12;
      BYTE1(v25.c) = v13;
      LayoutSubviews.subscript.getter();
      if (v22)
      {
        v26 = v28;
        v27 = v29;
        v37.origin.x = a2;
        v37.origin.y = a3;
        v37.size.width = a4;
        v37.size.height = a5;
        Width = CGRectGetWidth(v37);
        CGAffineTransformMakeTranslation(&v25, Width + v16, -v24);
        v30.x = a2;
        v30.y = a3;
        CGPointApplyAffineTransform(v30, &v25);
        v38.origin.x = a2;
        v38.origin.y = a3;
        v38.size.width = a4;
        v38.size.height = a5;
        CGRectGetHeight(v38);
        static UnitPoint.topLeading.getter();
        LOBYTE(v25.a) = 0;
      }
      else
      {
        *(_OWORD *)&v25.a = v28;
        LOBYTE(v25.c) = v29;
        v35.origin.x = a2;
        v35.origin.y = a3;
        v35.size.width = a4;
        v35.size.height = a5;
        CGRectGetWidth(v35);
        v36.origin.x = a2;
        v36.origin.y = a3;
        v36.size.width = a4;
        v36.size.height = a5;
        CGRectGetHeight(v36);
        static UnitPoint.topLeading.getter();
        LOBYTE(v26) = 0;
      }
      result = LayoutSubview.place(at:anchor:proposal:)();
      ++v22;
    }
    while (v21 != v22);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InspectorPresentationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18765D590 + 4 * byte_187C49652[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18765D5C4 + 4 * byte_187C4964D[v4]))();
}

uint64_t sub_18765D5C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18765D5CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18765D5D4);
  return result;
}

uint64_t sub_18765D5E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18765D5E8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18765D5EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18765D5F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InspectorPresentationMode()
{
  return &type metadata for InspectorPresentationMode;
}

unint64_t lazy protocol witness table accessor for type InspectorPresentationMode and conformance InspectorPresentationMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InspectorPresentationMode and conformance InspectorPresentationMode;
  if (!lazy protocol witness table cache variable for type InspectorPresentationMode and conformance InspectorPresentationMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorPresentationMode, &type metadata for InspectorPresentationMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorPresentationMode and conformance InspectorPresentationMode);
  }
  return result;
}

uint64_t dispatch thunk of ClarityUIApplicationDelegate.rootViewForSimplifiedApplication.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of RootViewForSimplifiedApplicationProvider.rootViewForSimplifiedApplication.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t ClarityUIApplicationDelegate.makeRootViewForSimplifiedApplication()(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 24))(a1, a2, v6);
  swift_getAssociatedConformanceWitness();
  return AnyView.init<A>(_:)();
}

uint64_t RootViewForSimplifiedApplicationProvider.makeRootViewForSimplifiedApplication()(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 24))(a1, a2, v6);
  swift_getAssociatedConformanceWitness();
  return AnyView.init<A>(_:)();
}

void type metadata completion function for TokenField()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Binding<AttributedString>();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenField(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 + 32;
  v14 = ((v12 + 32 + ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v12) + *(_QWORD *)(v11 + 64);
  v15 = (*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000;
  v16 = *a2;
  *a1 = *a2;
  if ((v12 | v8) > 7 || v15 != 0 || v14 > 0x18)
  {
    a1 = (uint64_t *)(v16 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16)));
    swift_retain();
  }
  else
  {
    v35 = ~v12;
    v36 = v10;
    v19 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    v21 = ((unint64_t)v19 + v8 + 8) & ~v8;
    v22 = ((unint64_t)v20 + v8 + 8) & ~v8;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v23(v21, v22, v6);
    v24 = (_QWORD *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
    v25 = (_QWORD *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8;
    v28 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8;
    v29 = *(_QWORD *)(v28 + 24);
    swift_retain();
    if (v29 < 0xFFFFFFFF)
    {
      v33 = *(_OWORD *)(v28 + 16);
      *(_OWORD *)v27 = *(_OWORD *)v28;
      *(_OWORD *)(v27 + 16) = v33;
    }
    else
    {
      v30 = *(_QWORD *)v28;
      v31 = *(_QWORD *)(v28 + 8);
      v32 = *(_BYTE *)(v28 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v28, v31, v32);
      *(_QWORD *)v27 = v30;
      *(_QWORD *)(v27 + 8) = v31;
      *(_BYTE *)(v27 + 16) = v32;
      *(_QWORD *)(v27 + 24) = *(_QWORD *)(v28 + 24);
      swift_bridgeObjectRetain();
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((v13 + v27) & v35, (v13 + v28) & v35, v36);
  }
  return a1;
}

uint64_t destroy for TokenField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = a1 + 15;
  swift_release();
  swift_release();
  v5 = type metadata accessor for AttributedString();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((v4 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7, v5);
  v8 = (a1 + *(_QWORD *)(v6 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v9 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v9 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for TokenField(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, unint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = type metadata accessor for AttributedString();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v10(((unint64_t)v5 + v9 + 8) & ~v9, ((unint64_t)v6 + v9 + 8) & ~v9, v7);
  v11 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v12 = (_QWORD *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)(v16 + 24);
  swift_retain();
  if (v17 < 0xFFFFFFFF)
  {
    v21 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v21;
  }
  else
  {
    v18 = *(_QWORD *)v16;
    v19 = *(_QWORD *)(v16 + 8);
    v20 = *(_BYTE *)(v16 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v16, v19, v20);
    *(_QWORD *)v15 = v18;
    *(_QWORD *)(v15 + 8) = v19;
    *(_BYTE *)(v15 + 16) = v20;
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
    swift_bridgeObjectRetain();
  }
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v22 + 16))((v15 + *(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80), (v16 + *(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  return a1;
}

_QWORD *assignWithCopy for TokenField(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10, v8);
  v11 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64) + 7;
  v12 = (_QWORD *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)(v16 + 24);
  if (*(_QWORD *)(v15 + 24) < 0xFFFFFFFFuLL)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      v24 = *(_QWORD *)v16;
      v25 = *(_QWORD *)(v16 + 8);
      v26 = *(_BYTE *)(v16 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v16, v25, v26);
      *(_QWORD *)v15 = v24;
      *(_QWORD *)(v15 + 8) = v25;
      *(_BYTE *)(v15 + 16) = v26;
      *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    v27 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v27;
    goto LABEL_8;
  }
  if (v17 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v18 = *(_QWORD *)v16;
  v19 = *(_QWORD *)(v16 + 8);
  v20 = *(_BYTE *)(v16 + 16);
  outlined copy of Text.Storage(*(_QWORD *)v16, v19, v20);
  v21 = *(_QWORD *)v15;
  v22 = *(_QWORD *)(v15 + 8);
  v23 = *(_BYTE *)(v15 + 16);
  *(_QWORD *)v15 = v18;
  *(_QWORD *)(v15 + 8) = v19;
  *(_BYTE *)(v15 + 16) = v20;
  outlined consume of Text.Storage(v21, v22, v23);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v28 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v28 + 24))((v15 + *(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80), (v16 + *(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  return a1;
}

_QWORD *initializeWithTake for TokenField(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)v6 + v10 + 8) & ~v10, ((unint64_t)v7 + v10 + 8) & ~v10, v8);
  v11 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64) + 7;
  v12 = (_OWORD *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = (_OWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))(((unint64_t)v14 + *(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)v15 + *(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

_QWORD *assignWithTake for TokenField(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_release();
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10, v8);
  v11 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64) + 7;
  v12 = (_OWORD *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  v13 = (unint64_t)a2 + v11;
  v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v12 = *(_OWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v15 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v15 + 24) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    v21 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v21;
    goto LABEL_6;
  }
  v17 = *(_BYTE *)(v16 + 16);
  v18 = *(_QWORD *)v15;
  v19 = *(_QWORD *)(v15 + 8);
  v20 = *(_BYTE *)(v15 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = v17;
  outlined consume of Text.Storage(v18, v19, v20);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
  swift_bridgeObjectRelease();
LABEL_6:
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v22 + 40))((v15 + *(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80), (v16 + *(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenField(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  int v21;
  unsigned int v23;
  int v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v7 + 84);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 84);
  if (v12 <= v9)
    v13 = v9;
  else
    v13 = *(_DWORD *)(v11 + 84);
  if (!a2)
    return 0;
  v14 = v6;
  v15 = *(unsigned __int8 *)(v7 + 80);
  v16 = ((v15 + 16) & ~v15) + *(_QWORD *)(v7 + 64);
  v17 = *(unsigned __int8 *)(v11 + 80);
  v18 = v17 + 32;
  if (a2 <= v13)
    goto LABEL_27;
  v19 = ((v18 + ((((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v17) + *(_QWORD *)(v11 + 64);
  v20 = 8 * v19;
  if (v19 > 3)
    goto LABEL_10;
  v23 = ((a2 - v13 + ~(-1 << v20)) >> v20) + 1;
  if (HIWORD(v23))
  {
    v21 = *(_DWORD *)(a1 + v19);
    if (v21)
      goto LABEL_18;
  }
  else
  {
    if (v23 <= 0xFF)
    {
      if (v23 < 2)
        goto LABEL_27;
LABEL_10:
      v21 = *(unsigned __int8 *)(a1 + v19);
      if (!*(_BYTE *)(a1 + v19))
        goto LABEL_27;
LABEL_18:
      v24 = (v21 - 1) << v20;
      if (v19 > 3)
        v24 = 0;
      if ((_DWORD)v19)
      {
        if (v19 <= 3)
          v25 = ((v18 + ((((v16 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)) & ~(_DWORD)v17) + *(_DWORD *)(v11 + 64);
        else
          v25 = 4;
        __asm { BR              X12 }
      }
      return v13 + v24 + 1;
    }
    v21 = *(unsigned __int16 *)(a1 + v19);
    if (*(_WORD *)(a1 + v19))
      goto LABEL_18;
  }
LABEL_27:
  if (v9 >= v12)
  {
    v28 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 0x80000000) != 0)
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)v28 + v15 + 8) & ~v15, v8, v14);
    v27 = *v28;
  }
  else
  {
    v26 = (unint64_t *)((a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v13 != 0x7FFFFFFF)
      return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v11 + 48))((v18 + (((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v17, *(unsigned int *)(v11 + 84), v10);
    v27 = *v26;
  }
  if (v27 >= 0xFFFFFFFF)
    LODWORD(v27) = -1;
  return (v27 + 1);
}

void storeEnumTagSinglePayload for TokenField(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v8 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  if (*(_DWORD *)(v8 + 84) <= 0x7FFFFFFFu)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v10 + 84) <= v9)
    v11 = v9;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = ((v13
        + 32
        + ((((((v12 + 16) & ~v12) + *(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v13)
      + *(_QWORD *)(v10 + 64);
  if (a3 <= v11)
  {
    v15 = 0u;
  }
  else if (v14 <= 3)
  {
    v17 = ((a3 - v11 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v15 = 4u;
    }
    else if (v17 >= 0x100)
    {
      v15 = 2;
    }
    else
    {
      v15 = v17 > 1;
    }
  }
  else
  {
    v15 = 1u;
  }
  if (v11 < a2)
  {
    v16 = ~v11 + a2;
    if (v14 < 4)
    {
      if ((_DWORD)v14)
      {
        v18 = v16 & ~(-1 << (8 * v14));
        bzero(a1, ((v13+ 32+ ((((((v12 + 16) & ~v12) + *(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v13)+ *(_QWORD *)(v10 + 64));
        if ((_DWORD)v14 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if ((_DWORD)v14 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, ((v13+ 32+ ((((((v12 + 16) & ~v12) + *(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v13)+ *(_QWORD *)(v10 + 64));
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X5 }
}

void type metadata accessor for TokenField()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t associated type witness table accessor for View.Body : View in TokenField<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

void TokenField.init(valueType:text:prompt:token:label:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for TokenField();
}

uint64_t sub_18765E74C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v11 = (uint64_t *)(v1 + a1[18]);
  outlined init with copy of Binding<AttributedString>(v2, v1);
  v12 = (_QWORD *)(v1 + a1[17]);
  *v12 = *(_QWORD *)(v9 - 168);
  v12[1] = v6;
  *v11 = v7;
  v11[1] = v5;
  v11[2] = v4;
  v11[3] = v3;
  swift_retain();
  v13 = outlined copy of Text?(v7, v5, v4, v3);
  (*(void (**)(uint64_t))(v9 - 160))(v13);
  swift_release();
  outlined consume of Text?(v7, v5, v4, v3);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v2, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9 - 136) + 32))(v1 + a1[19], v8, *(_QWORD *)(v9 - 144));
}

void TokenField.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for ResolvedTokenFieldStyle(0);
  MEMORY[0x1E0C80A78](v0, v1);
  lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

void sub_18765E894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v5 - 224) = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  TokenField.configuration.getter(v3, v10, v2);
  *(_QWORD *)(v5 - 192) = v4;
  *(_OWORD *)(v5 - 184) = *(_OWORD *)(v3 + 24);
  *(_QWORD *)(v5 - 168) = v0;
  *(_OWORD *)(v5 - 160) = *(_OWORD *)(v3 + 48);
  *(_QWORD *)(v5 - 144) = v1;
  lazy protocol witness table accessor for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for TokenFieldConfiguration.Label, (uint64_t)partial apply for closure #1 in TokenField.body.getter);
}

uint64_t sub_18765E95C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v2, type metadata accessor for ResolvedTokenFieldStyle);
  *(_QWORD *)(v5 - 128) = v3;
  *(_QWORD *)(v5 - 120) = &protocol witness table for StaticSourceWriter<A, B>;
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v5 - 128);
  static ViewBuilder.buildExpression<A>(_:)(v0, v1, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 224) + 8);
  v7(v0, v1);
  static ViewBuilder.buildBlock<A>(_:)(v4, v1, *(_QWORD *)(v5 - 216));
  return v7(v4, v1);
}

uint64_t TokenField.configuration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)();
  uint64_t v25;
  uint64_t v26;

  v4 = v3;
  v26 = a3;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for Binding<AttributedString>();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<AttributedString>(v4, (uint64_t)v11);
  v12 = (uint64_t *)(v4 + *(int *)(a1 + 72));
  v13 = v12[1];
  v25 = *v12;
  v14 = v12[2];
  v15 = v12[3];
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a1);
  v16 = (*(unsigned __int8 *)(v6 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v17 = (char *)swift_allocObject();
  v18 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v17 + 1) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v17 + 2) = v18;
  *((_OWORD *)v17 + 3) = *(_OWORD *)(a1 + 48);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v17[v16], (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v19 = type metadata accessor for TokenFieldConfiguration(0);
  v20 = (uint64_t *)(v26 + *(int *)(v19 + 24));
  v21 = v26;
  outlined init with take of Binding<AttributedString>((uint64_t)v11, v26);
  v22 = v25;
  *v20 = v25;
  v20[1] = v13;
  v20[2] = v14;
  v20[3] = v15;
  v23 = (void (**)())(v21 + *(int *)(v19 + 28));
  *v23 = partial apply for closure #1 in TokenField.configuration.getter;
  v23[1] = (void (*)())v17;
  return outlined copy of Text?(v22, v13, v14, v15);
}

void closure #1 in TokenField.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for TokenField();
}

uint64_t sub_18765EBE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 76), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

void closure #1 in TokenField.configuration.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  v2 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for Binding<AnyToken>();
  type metadata accessor for TokenField.ToToken();
}

void sub_18765ED00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenField<A, B, C>.ToToken, a1);
  Binding.projecting<A>(_:)();
  *(_QWORD *)(v7 - 128) = v3;
  *(_QWORD *)(v7 - 120) = v6;
  *(_QWORD *)(v7 - 112) = v2;
  *(_QWORD *)(v7 - 104) = v5;
  *(_QWORD *)(v7 - 96) = v4;
  *(_QWORD *)(v7 - 88) = v1;
  type metadata accessor for TokenField();
}

uint64_t sub_18765ED44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 136) + *(int *)(a1 + 68)))(v1);
  v3 = AnyView.init<A>(_:)();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 152) + 8))(v1, *(_QWORD *)(v2 - 144));
  return v3;
}

unint64_t lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label;
  if (!lazy protocol witness table cache variable for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenFieldConfiguration.Label, &type metadata for TokenFieldConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label;
  if (!lazy protocol witness table cache variable for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TokenFieldConfiguration.Label, &type metadata for TokenFieldConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label);
  }
  return result;
}

void partial apply for closure #1 in TokenField.body.getter()
{
  uint64_t v0;

  closure #1 in TokenField.body.getter(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle;
  if (!lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle)
  {
    v1 = type metadata accessor for ResolvedTokenFieldStyle(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedTokenFieldStyle, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle);
  }
  return result;
}

void sub_18765EE4C()
{
  type metadata accessor for TokenField();
}

uint64_t sub_18765EE84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v4 = v1 + ((v3 + 64) & ~v3);
  swift_release();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v6 = v4 + *(int *)(v5 + 32);
  v7 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  v8 = v4 + *(int *)(a1 + 72);
  if (*(_QWORD *)(v8 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v4 + *(int *)(a1 + 76));
  return swift_deallocObject();
}

void partial apply for closure #1 in TokenField.configuration.getter()
{
  type metadata accessor for TokenField();
}

void sub_18765EFA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #1 in TokenField.configuration.getter(v1, v2 + ((v3 + 64) & ~v3));
}

void type metadata accessor for Binding<AnyToken>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<AnyToken>)
  {
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyToken>);
  }
}

void type metadata accessor for TokenField.ToToken()
{
  JUMPOUT(0x18D75FF28);
}

void sub_18765F050()
{
  type metadata accessor for ResolvedTokenFieldStyle(255);
  lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_18765F098()
{
  uint64_t v0;
  _QWORD v2[12];

  v0 = type metadata accessor for ModifiedContent();
  v2[0] = lazy protocol witness table accessor for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle();
  v2[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v2);
}

uint64_t TokenField.ToToken.get(base:)(uint64_t a1)
{
  uint64_t v2;

  outlined init with copy of Any(a1, (uint64_t)&v2);
  return swift_dynamicCast();
}

uint64_t protocol witness for Projection.get(base:) in conformance TokenField<A, B, C>.ToToken(uint64_t a1)
{
  return TokenField.ToToken.get(base:)(a1);
}

double protocol witness for Projection.set(base:newValue:) in conformance TokenField<A, B, C>.ToToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized TokenField.ToToken.set(base:newValue:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void base witness table accessor for Equatable in TokenField<A, B, C>.ToToken()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in TokenField<A, B, C>.ToToken()
{
  JUMPOUT(0x18D75FFDCLL);
}

double specialized TokenField.ToToken.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v7 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined destroy of AnyToken(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, a4);
  return AnyToken.init<A>(_:)((uint64_t)v9, a4, a1);
}

void RoundedBorderTextEditorStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void __swiftcall RoundedBorderTextEditorStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for TextEditorStyle.Body : View in RoundedBorderTextEditorStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for RoundedBorderTextEditorStyle()
{
  return &type metadata for RoundedBorderTextEditorStyle;
}

uint64_t TableRowContent.swipeActions<A>(edge:allowsFullSwipe:content:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, void (*a3)(double)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  __int16 v11;

  v10 = 0;
  v11 = 256;
  return TableRowContent.swipeActions<A>(edge:allowsFullSwipe:style:content:)(a1 & 1, a2, &v10, a3, a4, a5, a6, a7, a9, a8);
}

uint64_t TableRowContent.swipeActions<A>(edge:allowsFullSwipe:style:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void (*a4)(double)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  _BYTE *v32;
  int v33;
  _BYTE *v34;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(double);
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  __int16 v52;
  _QWORD v53[2];
  _QWORD v54[3];

  v50 = a8;
  v48 = a9;
  v49 = a6;
  v43 = a5;
  v44 = a4;
  v39 = a10;
  v46 = a1 & 1;
  v47 = a2;
  v45 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>();
  v14 = type metadata accessor for ModifiedContent();
  v42 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v36 - v16;
  type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>();
  v18 = type metadata accessor for ModifiedContent();
  v41 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v36 - v20;
  v22 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E0CE66D8]);
  v54[0] = a10;
  v54[1] = v22;
  v23 = MEMORY[0x1E0CE2E70];
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v54);
  v25 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E0CE4530]);
  v53[0] = v24;
  v53[1] = v25;
  v26 = MEMORY[0x18D75FFDC](v23, v18, v53);
  v28 = (int *)type metadata accessor for SwipeActionsTableRowModifier(0, v18, v26, v27);
  v40 = *((_QWORD *)v28 - 1);
  v30 = MEMORY[0x1E0C80A78](v28, v29);
  v32 = (char *)&v36 - v31;
  v38 = *a3;
  v33 = *((unsigned __int8 *)a3 + 8);
  v36 = *((unsigned __int8 *)a3 + 9);
  v37 = v33;
  v44(v30);
  static SymbolVariants.fill.getter();
  v51 = v52;
  View.symbolVariant(_:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v13, a7);
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v14);
  *v32 = v46;
  (*(void (**)(_BYTE *, char *, uint64_t))(v41 + 32))(&v32[v28[9]], v21, v18);
  v32[v28[10]] = v47;
  v34 = &v32[v28[11]];
  *(_QWORD *)v34 = v38;
  v34[8] = v37;
  v34[9] = v36;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeActionsTableRowModifier<A>, v28);
  Scene.modifier<A>(_:)((uint64_t)v32, v49, (uint64_t)v28);
  return (*(uint64_t (**)(_BYTE *, int *))(v40 + 8))(v32, v28);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>)
  {
    v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>);
  }
}

void type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>)
  {
    v0 = type metadata accessor for StyleContextWriter();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>);
  }
}

uint64_t type metadata accessor for SwipeActionsTableRowModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SwipeActionsTableRowModifier);
}

uint64_t sub_18765F644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>();
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>();
  v4 = type metadata accessor for ModifiedContent();
  v13[0] = v2;
  v13[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E0CE66D8]);
  v5 = MEMORY[0x1E0CE2E70];
  v12[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v13);
  v12[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E0CE4530]);
  v6 = MEMORY[0x18D75FFDC](v5, v4, v12);
  v8 = type metadata accessor for SwipeActionsTableRowModifier(255, v4, v6, v7);
  v9 = type metadata accessor for ModifiedContent();
  v11[0] = v1;
  v11[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeActionsTableRowModifier<A>, v8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v9, v11);
}

uint64_t type metadata completion function for SwipeActionsTableRowModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SwipeActionsTableRowModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((v5 + 1) & ~v5) + v6) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v10 = ((unint64_t)a1 + v5 + 1) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 1) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    *(_BYTE *)(v10 + v6) = *(_BYTE *)(v11 + v6);
    v12 = (v10 + v6) & 0xFFFFFFFFFFFFFFF8;
    v13 = (v11 + v6) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(_QWORD *)(v13 + 8);
    *(_WORD *)(v12 + 16) = *(_WORD *)(v13 + 16);
    *(_QWORD *)(v12 + 8) = v14;
  }
  return v3;
}

_BYTE *initializeWithCopy for SwipeActionsTableRowModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  *(_BYTE *)v9 = *(_BYTE *)v10;
  v9 &= 0xFFFFFFFFFFFFFFF8;
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v11 = *(_WORD *)(v10 + 16);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_WORD *)(v9 + 16) = v11;
  return a1;
}

_BYTE *assignWithCopy for SwipeActionsTableRowModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  *(_BYTE *)v9 = *(_BYTE *)v10;
  v9 &= 0xFFFFFFFFFFFFFFF8;
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v11 = *(_WORD *)(v10 + 16);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_WORD *)(v9 + 16) = v11;
  return a1;
}

_BYTE *initializeWithTake for SwipeActionsTableRowModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  *(_BYTE *)v9 = *(_BYTE *)v10;
  v9 &= 0xFFFFFFFFFFFFFFF8;
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v11 = *(_WORD *)(v10 + 16);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_WORD *)(v9 + 16) = v11;
  return a1;
}

_BYTE *assignWithTake for SwipeActionsTableRowModifier(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  *(_BYTE *)v9 = *(_BYTE *)v10;
  v9 &= 0xFFFFFFFFFFFFFFF8;
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v11 = *(_WORD *)(v10 + 16);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_WORD *)(v9 + 16) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for SwipeActionsTableRowModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if (v5 > 0xFE)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
    }
    else
    {
      v14 = *a1;
      if (v14 >= 2)
        return v14 - 1;
      else
        return 0;
    }
  }
  else
  {
    v8 = ((((v7 + 1) & ~v7) + *(_QWORD *)(v4 + 64)) & 0xFFFFFFFFFFFFFFF8) + 18;
    v9 = (a2 - v6 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18765FBB0 + 4 * byte_187C49A20[v12]))();
  }
}

void storeEnumTagSinglePayload for SwipeActionsTableRowModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ((((v7 + 1) & ~v7) + *(_QWORD *)(v5 + 64)) & 0xFFFFFFFFFFFFFFF8) + 18;
  if (v6 >= a3)
  {
    v11 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v8 <= 3)
      v9 = ((a3 - v6 + 0xFFFF) >> (8 * v8)) + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  v12 = ~v6 + a2;
  bzero(a1, ((((v7 + 1) & ~v7) + *(_QWORD *)(v5 + 64)) & 0xFFFFFFFFFFFFFFF8) + 18);
  if (v8 > 3)
    *a1 = v12;
  else
    *(_WORD *)a1 = v12;
  __asm { BR              X11 }
}

void sub_18765FD60(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
}

void sub_18765FD68(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18765FD70);
}

void sub_18765FDA8(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
}

void sub_18765FDB0(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
}

uint64_t sub_18765FDB8@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;

  *(_WORD *)&v6[v7] = 0;
  if (!a1)
LABEL_2:
    JUMPOUT(0x18765FDC0);
  if (a2 <= 0xFE)
  {
    *v6 = a1 + 1;
    goto LABEL_2;
  }
  return (*(uint64_t (**)(unint64_t))(v4 + 56))((unint64_t)&v6[v5 + 1] & a3);
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in SwipeActionsTableRowModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SwipeActionsTableRowModifier.body.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](a1, v3);
  v9 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v6 + 16))(v9, v8);
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(a1 + 16);
  result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, v9, a1);
  *a2 = partial apply for closure #1 in SwipeActionsTableRowModifier.body.getter;
  a2[1] = v11;
  return result;
}

uint64_t closure #1 in SwipeActionsTableRowModifier.body.getter(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for SwipeActionsTableRowModifier(0, v9, v10, v10);
  v12 = a2[v11[10]];
  v13 = &a2[v11[11]];
  v14 = *(_QWORD *)v13;
  v15 = v13[8];
  v16 = v13[9];
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, &a2[v11[9]], a3);
  v17 = AnyView.init<A>(_:)();
  v18 = *a2;
  v19 = a1 + 6;
  v20 = a1 + 2;
  if ((*a2 & 1) != 0)
    v21 = a1 + 7;
  else
    v21 = a1 + 3;
  if ((*a2 & 1) != 0)
    v22 = a1 + 4;
  else
    v22 = a1;
  if ((v18 & 1) != 0)
    v23 = a1 + 5;
  else
    v23 = a1 + 1;
  if ((v18 & 1) != 0)
    v24 = v19;
  else
    v24 = v20;
  v25 = 256;
  if (!v16)
    v25 = 0;
  v26 = v25 | v15;
  result = swift_release();
  *v22 = v12;
  *v23 = v14;
  *v24 = v26;
  *v21 = v17;
  return result;
}

uint64_t sub_18765FFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for SwipeActionsTableRowModifier(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + *(int *)(v6 + 36) + ((v7 + 32) & ~v7), v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SwipeActionsTableRowModifier.body.getter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SwipeActionsTableRowModifier(0, v6, *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  return closure #1 in SwipeActionsTableRowModifier.body.getter(a1, (char *)(v4 + ((v7 + 32) & ~v7)), v6);
}

ValueMetadata *type metadata accessor for TableRowSwipeActionsTraitKey()
{
  return &type metadata for TableRowSwipeActionsTraitKey;
}

_UNKNOWN **sub_1876600D4()
{
  return &protocol witness table for TableRowTraitTransformerModifier<A>;
}

uint64_t destroy for TableRowSwipeActionsTraitKey.Storage()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for TableRowSwipeActionsTraitKey.Storage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableRowSwipeActionsTraitKey.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TableRowSwipeActionsTraitKey.Storage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TableRowSwipeActionsTraitKey.Storage()
{
  return &type metadata for TableRowSwipeActionsTraitKey.Storage;
}

uint64_t initializeWithCopy for TableRowSwipeActionsTraitKey.Item(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableRowSwipeActionsTraitKey.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TableRowSwipeActionsTraitKey.Item(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TableRowSwipeActionsTraitKey.Item()
{
  return &type metadata for TableRowSwipeActionsTraitKey.Item;
}

uint64_t ContainerBackgroundValue.merge(nextValue:)(void (*a1)(_QWORD *__return_ptr))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v2 = v1;
  a1(v11);
  v4 = v11[0];
  v3 = v11[1];
  v5 = v12;
  v6 = v13;
  v7 = *(_QWORD *)(v2 + 8);
  if (v7 >> 62 == 2 && v7 == 0x8000000000000000 && *(_QWORD *)v2 == 0)
  {
    *(_QWORD *)v2 = v11[0];
    *(_QWORD *)(v2 + 8) = v3;
    outlined copy of ContainerBackgroundValue.Content(v4, v3);
  }
  *(_BYTE *)(v2 + 16) = (*(_BYTE *)(v2 + 16) | v5) & 1;
  v9 = *(_QWORD *)(v2 + 40);
  if (v9)
  {
    outlined consume of ContainerBackgroundValue.Content(v4, v3);
    v6 = v9;
  }
  else
  {
    swift_retain();
    outlined consume of ContainerBackgroundValue.Content(v4, v3);
  }
  swift_release();
  swift_release();
  result = swift_release();
  *(_QWORD *)(v2 + 40) = v6;
  return result;
}

void ContainerBackgroundKind.Builtin.versionSeedTracker.getter()
{
  __asm { BR              X9 }
}

uint64_t sub_187660498()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  Swift::String v10;
  _QWORD v11[14];

  *(_OWORD *)(v1 - 176) = 0u;
  *(_OWORD *)(v1 - 160) = 0u;
  *(_OWORD *)(v1 - 192) = 0u;
  outlined init with take of (ContainerBackgroundPlacementKey & HostPreferenceKey)?(v1 - 192, v1 - 144);
  if (*(_QWORD *)(v1 - 120))
  {
    outlined init with take of ToggleStyleConfiguration.Effect((__int128 *)(v1 - 144), (_OWORD *)(v1 - 96));
    v2 = *(_QWORD *)(v1 - 72);
    v3 = *(_QWORD *)(v1 - 64);
    v4 = *(_QWORD *)(v1 - 56);
    v5 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 - 96), v2);
    MEMORY[0x1E0C80A78](v5, v6);
    v11[2] = v2;
    v11[3] = v3;
    v11[4] = v4;
    v11[5] = closure #1 in ContainerBackgroundKind.Builtin.versionSeedTracker.getter;
    v11[6] = 0;
    type metadata accessor for ContainerBackground.AnyVersionSeedTracker();
    static ContainerBackgroundKind.Builtin.apply<A, B>(key:_:)((uint64_t)v5, (uint64_t (*)(uint64_t))partial apply for thunk for @callee_guaranteed (@unowned @thick ContainerBackgroundPlacementKey & HostPreferenceKey.Type) -> (@owned ContainerBackground.AnyVersionSeedTracker), (uint64_t)v11, v2);
    v7 = *(_QWORD *)(v1 - 144);
    __swift_destroy_boxed_opaque_existential_1(v1 - 96);
    return v7;
  }
  else
  {
    outlined destroy of (ContainerBackgroundPlacementKey & HostPreferenceKey)?(v1 - 144);
    *(_QWORD *)(v1 - 96) = 0;
    *(_QWORD *)(v1 - 88) = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v9 = *(_QWORD *)(v1 - 88);
    *(_QWORD *)(v1 - 96) = *(_QWORD *)(v1 - 96);
    *(_QWORD *)(v1 - 88) = v9;
    *(_BYTE *)(v1 - 144) = v0;
    _print_unlocked<A, B>(_:_:)();
    v10._object = (void *)0x8000000187BE5D70;
    v10._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v10);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in ContainerBackgroundKind.Builtin.versionSeedTracker.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ContainerBackground.ConcreteVersionSeedTracker(0, a1, a2, a3);
  return ContainerBackground.ConcreteVersionSeedTracker.__allocating_init()();
}

void ContainerBackgroundKind.Builtin.addPreference(to:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1876606E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[16];

  *(_OWORD *)(v1 - 80) = 0u;
  *(_OWORD *)(v1 - 64) = 0u;
  *(_OWORD *)(v1 - 96) = 0u;
  outlined init with take of (ContainerBackgroundPlacementKey & HostPreferenceKey)?(v1 - 96, v1 - 144);
  if (!*(_QWORD *)(v1 - 120))
    return outlined destroy of (ContainerBackgroundPlacementKey & HostPreferenceKey)?(v1 - 144);
  outlined init with take of ToggleStyleConfiguration.Effect((__int128 *)(v1 - 144), (_OWORD *)(v1 - 96));
  v2 = *(_QWORD *)(v1 - 72);
  v3 = *(_QWORD *)(v1 - 64);
  v4 = *(_QWORD *)(v1 - 56);
  v5 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 - 96), v2);
  MEMORY[0x1E0C80A78](v5, v6);
  v9[2] = v2;
  v9[3] = v3;
  v9[4] = v4;
  v9[5] = partial apply for closure #1 in ContainerBackgroundKind.Builtin.addPreference(to:);
  v9[6] = v0;
  static ContainerBackgroundKind.Builtin.apply<A, B>(key:_:)(v7, (uint64_t (*)(uint64_t))thunk for @callee_guaranteed (@unowned @thick ContainerBackgroundPlacementKey & HostPreferenceKey.Type) -> ()partial apply, (uint64_t)v9, v2);
  return __swift_destroy_boxed_opaque_existential_1(v1 - 96);
}

void ContainerBackground.AnyVersionSeedTracker.didChange(_:action:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ContainerBackground.ConcreteVersionSeedTracker.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  VersionSeedTracker.init()((_DWORD *)(v0 + 16));
  return v0;
}

uint64_t ContainerBackground.ConcreteVersionSeedTracker.didChange(_:action:)(uint64_t *a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = *v3;
  v9 = *a1;
  swift_beginAccess();
  type metadata accessor for VersionSeedTracker(0, *(_QWORD *)(v6 + 96), *(_QWORD *)(*(_QWORD *)(v6 + 104) + 8), v7);
  VersionSeedTracker.didChange(_:action:)(&v9, a2, a3);
  return swift_endAccess();
}

Swift::Int ContainerBackgroundPlacement.Storage.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x8000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v1 = v1;
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ContainerBackgroundPlacement.Storage()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  if ((*v0 & 0x8000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v1 = v1;
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContainerBackgroundPlacement.Storage()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x8000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v1 = v1;
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static ContainerBackgroundPlacement.custom<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = ContainerBackgroundKeys.AnyCustomKey.init<A>(_:)(a1, a1);
  *a2 = result;
  return result;
}

void static ContainerBackgroundPlacement.navigation.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x8000000000000000;
}

void static ContainerBackgroundPlacement.navigationSplitView.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x8000000000000001;
}

void static ContainerBackgroundPlacement.presentation.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x8000000000000003;
}

void static ContainerBackgroundPlacement.window.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ContainerBackgroundPlacement.hash(into:)()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  if ((*v0 & 0x8000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v1 = v1;
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
}

uint64_t static ContainerBackgroundPlacement.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (*a1 < 0)
  {
    if (v3 < 0 && v3 == v2)
      return 1;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v2 == v3)
  {
    return 1;
  }
  return 0;
}

Swift::Int ContainerBackgroundPlacement.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x8000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    v1 = v1;
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContainerBackgroundPlacement(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (*a1 < 0)
  {
    if (v3 < 0 && v3 == v2)
      return 1;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v2 == v3)
  {
    return 1;
  }
  return 0;
}

uint64_t static ContainerBackgroundModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;

  v15 = *a1;
  v6 = a2[3];
  v27 = a2[2];
  v28 = v6;
  v29 = a2[4];
  v30 = *((_DWORD *)a2 + 20);
  v7 = a2[1];
  v25 = *a2;
  v26 = v7;
  v16 = swift_allocObject();
  v8 = a2[3];
  v21 = a2[2];
  v22 = v8;
  v23 = a2[4];
  v24 = *((_DWORD *)a2 + 20);
  v9 = a2[1];
  v19 = *a2;
  v20 = v9;
  a3();
  v10 = static ContainerBackgroundKind.Builtin.allCases.getter();
  if (*(_QWORD *)(v10 + 16))
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  LODWORD(v19) = v15;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ContainerBackgroundModifier>, (uint64_t)&type metadata for ContainerBackgroundModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  v21 = v27;
  v22 = v28;
  v23 = v29;
  v24 = v30;
  v19 = v25;
  v20 = v26;
  v11 = _ViewInputs.transaction.getter();
  v17 = v28;
  v18 = DWORD2(v28);
  MEMORY[0x1E0C80A78](v11, v12);
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v17);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  *a4 = *(_QWORD *)(v16 + 16);
  a4[1] = *(_QWORD *)(v16 + 24);
  swift_bridgeObjectRetain();
  return swift_release();
}

uint64_t transformKey #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ContainerBackgroundModifier>, (uint64_t)&type metadata for ContainerBackgroundModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _ViewInputs.transaction.getter();
  _ViewInputs.environment.getter();
  v5 = *(_QWORD *)(a3 + 48);
  v6 = *(_DWORD *)(a3 + 56);
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v5);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in transformKey #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v11 = type metadata accessor for ContainerBackgroundModifier.PreferenceValue(0, a3, a4, a4);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerBackgroundModifier.PreferenceValue<A>, v11);
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_23, (uint64_t)v10, v11, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7;
}

uint64_t transformKeyAnimated #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, __int128 *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v30 = *((_QWORD *)a2 + 6);
  v31 = *((_DWORD *)a2 + 14);
  *(_QWORD *)&v32 = *((_QWORD *)a2 + 6);
  DWORD2(v32) = *((_DWORD *)a2 + 14);
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    LODWORD(v32) = a3;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ContainerBackgroundModifier>, (uint64_t)&type metadata for ContainerBackgroundModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    v11 = _GraphValue.value.getter();
    v12 = a2[3];
    v34 = a2[2];
    v35 = v12;
    v36 = a2[4];
    v37 = *((_DWORD *)a2 + 20);
    v13 = a2[1];
    v32 = *a2;
    v33 = v13;
    v14 = _ViewInputs.transaction.getter();
    v15 = a2[3];
    v34 = a2[2];
    v35 = v15;
    v36 = a2[4];
    v37 = *((_DWORD *)a2 + 20);
    v16 = a2[1];
    v32 = *a2;
    *((_QWORD *)&v33 + 1) = *((_QWORD *)&v16 + 1);
    v17 = _ViewInputs.environment.getter();
    type metadata accessor for PropertyList.Tracker();
    *(_QWORD *)&v32 = __PAIR64__(v14, v11);
    DWORD2(v32) = v17;
    *(_QWORD *)&v33 = PropertyList.Tracker.__allocating_init()();
    MEMORY[0x1E0C80A78](v33, v18);
    v26 = type metadata accessor for ContainerBackgroundModifier.AnimatedPreferenceValue(0, a5, a6, v19);
    v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerBackgroundModifier.AnimatedPreferenceValue<A>, v26);
    type metadata accessor for Attribute<(_:)>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v32, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_19, (uint64_t)&v25, v26, MEMORY[0x1E0DEDCE8], v20, MEMORY[0x1E0DEDD18], v21);
    swift_release();
    v22 = v28;
    static AGAttributeFlags.transactional.getter();
    v23 = AGGraphSetFlags();
    v28 = v30;
    v29 = v31;
    MEMORY[0x1E0C80A78](v23, v24);
    LODWORD(v26) = v22;
    swift_beginAccess();
    outlined retain of [Text.Modifier]((uint64_t)&v30);
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  if (a4 == 4)
    return transformKeyAnimated #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(a1, a5, a6, a7, a1, a2);
  else
    return transformKey #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(a1, a6, (uint64_t)a5);
}

uint64_t implicit closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  lazy protocol witness table accessor for type ContainerBackgroundModifier.CustomPreferenceValue and conformance ContainerBackgroundModifier.CustomPreferenceValue();
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t ContainerBackgroundModifier.transformPreference(_:placement:environment:transaction:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;

  v5 = *a3;
  v6 = a3[1];
  v8 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  v9 = *(unsigned __int8 *)(v3 + 24);
  if (v8)
  {
    v11 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    if (v10 >> 62)
    {
      if (v10 >> 62 != 1)
      {
        swift_retain();
        if (v7)
          goto LABEL_7;
        goto LABEL_9;
      }
      swift_retain();
      outlined copy of ContainerBackgroundValue.Content(v11, v10);
      swift_release();
    }
    else
    {
      swift_retain();
      outlined copy of ContainerBackgroundValue.Content(v11, v10);
    }
    static Alignment.center.getter();
    type metadata accessor for ModifiedContent<AnyView, _BackgroundModifier<AnyView>>();
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _BackgroundModifier<AnyView>> and conformance <> ModifiedContent<A, B>();
    v8 = AnyView.init<A>(_:)();
    if (v7)
    {
LABEL_7:
      swift_retain();
      outlined consume of ContainerBackgroundValue.Content(v11, v10);
      v12 = v7 | 0x4000000000000000;
LABEL_10:
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v12;
      goto LABEL_11;
    }
LABEL_9:
    outlined consume of ContainerBackgroundValue.Content(v11, v10);
    v12 = 0;
    goto LABEL_10;
  }
LABEL_11:
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v13 = Transaction.animation.getter();
  result = swift_release();
  *(_QWORD *)(a1 + 40) = v13;
  if (v9 != 2)
  {
    v15 = (*(_BYTE *)(a1 + 16) | v9) & 1;
LABEL_18:
    *(_BYTE *)(a1 + 16) = v15;
    return result;
  }
  if (v7 && (*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    EnvironmentValues.containerBackgroundKind.setter();
    ShapeStyle.resolveBackgroundMaterial(in:level:)();
    swift_release();
    swift_release();
    result = swift_release();
    if (v16 != 8)
      result = outlined consume of Material?(v16);
    v15 = v16 != 8;
    goto LABEL_18;
  }
  return result;
}

uint64_t ContainerBackgroundModifier.PreferenceValue.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)(Value + 8);
  v4 = *(_QWORD *)(Value + 16);
  v5 = *(_BYTE *)(Value + 24);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  swift_retain();
  return swift_retain();
}

uint64_t (*ContainerBackgroundModifier.PreferenceValue.value.getter(uint64_t a1, int a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*result)(uint64_t);
  uint64_t v11;
  uint64_t v12;

  ContainerBackgroundModifier.PreferenceValue.modifier.getter((uint64_t)&v12);
  v8 = v12;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v11, a3, a4);
  if (v8 < 0)
  {
    if (v11 < 0 && v11 == v8)
      goto LABEL_4;
  }
  else if ((v11 & 0x8000000000000000) == 0 && v8 == v11)
  {
LABEL_4:
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a3;
    *(_QWORD *)(v9 + 24) = a4;
    *(_QWORD *)(v9 + 32) = a1;
    result = partial apply for closure #2 in ContainerBackgroundModifier.PreferenceValue.value.getter;
    *(_DWORD *)(v9 + 40) = a2;
    return result;
  }
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t closure #2 in ContainerBackgroundModifier.PreferenceValue.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[2];
  _QWORD v13[4];
  char v14;
  _QWORD v15[3];
  char v16;

  ContainerBackgroundModifier.PreferenceValue.modifier.getter((uint64_t)v15);
  v13[1] = v15[0];
  v13[2] = v15[1];
  v13[3] = v15[2];
  v14 = v16;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a5 + 16))(v13, a4, a5);
  Value = (uint64_t *)AGGraphGetValue();
  v9 = *Value;
  v10 = Value[1];
  swift_retain();
  swift_retain();
  v12[0] = v9;
  v12[1] = v10;
  static Transaction.current.getter();
  ContainerBackgroundModifier.transformPreference(_:placement:environment:transaction:)(a1, (uint64_t)v13, v12);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance ContainerBackgroundModifier.PreferenceValue<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = ContainerBackgroundModifier.PreferenceValue.value.getter(*(_QWORD *)v2, *(_DWORD *)(v2 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v6 = v5;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v6;
  *a2 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  a2[1] = (uint64_t (*)())result;
  return result;
}

unint64_t closure #2 in ContainerBackgroundModifier.CustomPreferenceValue.value.getter(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  unint64_t result;
  uint64_t v5;

  result = *(_QWORD *)(AGGraphGetValue() + 8);
  if (result)
  {
    v5 = swift_retain();
    return specialized Dictionary.subscript.setter(v5, a3);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ContainerBackgroundModifier.CustomPreferenceValue@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  int *v1;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t (*v7)(uint64_t);
  uint64_t result;

  v3 = *v1;
  v4 = *(_QWORD *)AGGraphGetValue();
  if (v4 < 0)
  {
    v6 = 0;
    v7 = (unint64_t (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  else
  {
    v5 = v1[1];
    v6 = swift_allocObject();
    *(_DWORD *)(v6 + 16) = v3;
    *(_DWORD *)(v6 + 20) = v5;
    *(_QWORD *)(v6 + 24) = v4;
    v7 = partial apply for closure #2 in ContainerBackgroundModifier.CustomPreferenceValue.value.getter;
  }
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = v6;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t ContainerBackgroundModifier.AnimatedPreferenceValue.updateValue()(uint64_t a1)
{
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  Value = AGGraphGetValue();
  v3 = v2;
  v5 = *(_QWORD *)Value;
  v4 = *(_QWORD *)(Value + 8);
  v6 = *(_QWORD *)(Value + 16);
  v17 = *(_BYTE *)(Value + 24);
  AGGraphGetValue();
  v8 = v7;
  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  result = AGGraphGetOutputValue();
  if (!result || (v3 & 1) != 0)
  {
    swift_retain();
    v10 = v4;
    swift_retain();
    v11 = v6;
    swift_retain();
    swift_retain();
  }
  else
  {
    if ((v8 & 1) == 0)
      return result;
    swift_retain();
    swift_retain();
    swift_retain_n();
    v10 = v4;
    swift_retain();
    v11 = v6;
    swift_retain();
    v12 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
    swift_release();
    swift_release();
    if ((v12 & 1) == 0)
    {
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  (*(void (**)(unint64_t (**__return_ptr)(uint64_t), uint64_t))(v19 + 16))(&v20, v18);
  if ((v5 & 0x8000000000000000) != 0)
  {
    if (((unint64_t)v20 & 0x8000000000000000) != 0 && v20 == v5)
      goto LABEL_10;
LABEL_13:
    v20 = (unint64_t (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    v21 = 0;
    AGGraphSetOutputValue();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  if (((unint64_t)v20 & 0x8000000000000000) != 0 || (unint64_t (*)(uint64_t))v5 != v20)
    goto LABEL_13;
LABEL_10:
  AGGraphClearUpdate();
  v13 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  v14 = v20;
  v15 = v21;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v18;
  *(_QWORD *)(v16 + 24) = v19;
  *(_QWORD *)(v16 + 32) = v5;
  *(_QWORD *)(v16 + 40) = v10;
  *(_QWORD *)(v16 + 48) = v11;
  *(_BYTE *)(v16 + 56) = v17;
  *(_QWORD *)(v16 + 64) = v14;
  *(_QWORD *)(v16 + 72) = v15;
  *(_QWORD *)(v16 + 80) = v13;
  v20 = partial apply for closure #2 in ContainerBackgroundModifier.AnimatedPreferenceValue.updateValue();
  v21 = v16;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  return swift_release();
}

void protocol witness for ViewModifier.body(content:) in conformance ContainerBackgroundModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void View.containerBackground<A>(_:for:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v7 = *a2;
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = v7;
  v25 = a1;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = v7;
  v18 = a1;
  type metadata accessor for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>();
  v9 = v8;
  v10 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>> and conformance OrOperationViewInputPredicate<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>, MEMORY[0x1E0CE6458]);
  v26[0] = a5;
  v26[1] = &protocol witness table for ContainerBackgroundModifier;
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v26);
  StaticIf<>.init(_:then:else:)(v11, (uint64_t)partial apply for closure #1 in View.containerBackground<A>(_:for:), (uint64_t)v19, (void (*)(uint64_t))partial apply for closure #2 in View.containerBackground<A>(_:for:), (uint64_t)v12, v9);
}

uint64_t closure #1 in View.containerBackground<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  double v12;
  uint64_t v13;
  uint64_t (*v14)(double);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v36 = a1;
  v37 = a6;
  v34 = a8;
  v35 = a4;
  v30 = a3;
  v31 = a2;
  v33 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v32 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v14(v12);
  v39 = a9;
  v40 = a5;
  v41 = v15;
  v42 = a7;
  v16 = type metadata accessor for _ShapeView();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v30 - v19;
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>, &lazy cache variable for type metadata for ContainerBackgroundKind?, MEMORY[0x1E0CE59B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  v21 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v21, v22);
  Shape.fill<A>(_:style:)(a3, 256, a9, a5, v15, a7);
  swift_getKeyPath();
  v23 = v31;
  if (v31 < 0)
    v24 = v31;
  else
    v24 = 5;
  LOBYTE(v39) = v24;
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0E50], v16);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  v26 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>();
  v38[0] = v25;
  v38[1] = v26;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v21, v38);
  v27 = AnyView.init<A>(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v32, v30, a5);
  v28 = AnyShapeStyle.init<A>(_:)();
  v39 = v23;
  v40 = v27;
  v41 = v28;
  LOBYTE(v42) = 2;
  MEMORY[0x18D75B4AC](&v39, v35, &type metadata for ContainerBackgroundModifier, v37);
  swift_release();
  return swift_release();
}

uint64_t View.containerBackground<A>(for:alignment:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  char v44;
  _QWORD v45[3];

  v31 = a6;
  v32 = a5;
  v30 = a4;
  v34 = a2;
  v35 = a3;
  v36 = a9;
  v29 = a10;
  swift_getTupleTypeMetadata2();
  v14 = type metadata accessor for TupleView();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v14);
  v15 = type metadata accessor for ZStack();
  v33 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - v17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>, &lazy cache variable for type metadata for ContainerBackgroundKind?, MEMORY[0x1E0CE59B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  v19 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v19, v20);
  v21 = *a1;
  v37 = a6;
  v38 = a7;
  v22 = a8;
  v39 = a8;
  v40 = v29;
  v41 = v30;
  v42 = v32;
  ZStack.init(alignment:content:)();
  swift_getKeyPath();
  if (v21 < 0)
    v23 = v21;
  else
    v23 = 5;
  LOBYTE(v43[0]) = v23;
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v15);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v15);
  v25 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>();
  v45[0] = v24;
  v45[1] = v25;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v19, v45);
  v26 = AnyView.init<A>(_:)();
  v43[0] = v21;
  v43[1] = v26;
  v43[2] = 0;
  v44 = 2;
  MEMORY[0x18D75B4AC](v43, v31, &type metadata for ContainerBackgroundModifier, v22);
  return swift_release();
}

void View.containerBackground<A>(_:for:allowsVibrancy:)(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD v29[2];

  v8 = *a2;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = a7;
  v26 = v8;
  v27 = a1;
  v28 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = v8;
  v19 = a1;
  v20 = a3;
  type metadata accessor for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>();
  v10 = v9;
  v11 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>> and conformance OrOperationViewInputPredicate<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>, MEMORY[0x1E0CE6458]);
  v29[0] = a6;
  v29[1] = &protocol witness table for ContainerBackgroundModifier;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v29);
  StaticIf<>.init(_:then:else:)(v12, (uint64_t)partial apply for closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:), (uint64_t)v21, (void (*)(uint64_t))partial apply for closure #2 in View.containerBackground<A>(_:for:allowsVibrancy:), (uint64_t)v13, v10);
}

uint64_t closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  double v14;
  uint64_t v15;
  uint64_t (*v16)(double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v39 = a5;
  v40 = a7;
  v36 = a4;
  v32[0] = a3;
  v33 = a2;
  v37 = a9;
  v38 = a1;
  v35 = *(_QWORD *)(a6 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v34 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v16(v14);
  v42 = a11;
  v43 = a6;
  v44 = v17;
  v45 = a8;
  v32[1] = a8;
  v18 = type metadata accessor for _ShapeView();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)v32 - v21;
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>, &lazy cache variable for type metadata for ContainerBackgroundKind?, MEMORY[0x1E0CE59B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  v23 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v23, v24);
  Shape.fill<A>(_:style:)(a3, 256, a11, a6, v17, a8);
  swift_getKeyPath();
  v25 = v33;
  if (v33 < 0)
    v26 = v33;
  else
    v26 = 5;
  LOBYTE(v42) = v26;
  v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0E50], v18);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v28 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>();
  v41[0] = v27;
  v41[1] = v28;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v23, v41);
  v29 = AnyView.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v35 + 16))(v34, v32[0], a6);
  v30 = AnyShapeStyle.init<A>(_:)();
  v42 = v25;
  v43 = v29;
  v44 = v30;
  LOBYTE(v45) = v36;
  MEMORY[0x18D75B4AC](&v42, v39, &type metadata for ContainerBackgroundModifier, v40);
  swift_release();
  return swift_release();
}

uint64_t View.containerBackground<A>(for:allowsVibrancy:alignment:content:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  char v43;
  _QWORD v44[3];

  v28 = a7;
  v30 = a6;
  v29 = a5;
  v32 = a3;
  v33 = a4;
  v34 = a2;
  v35 = a9;
  v27 = a11;
  swift_getTupleTypeMetadata2();
  v14 = type metadata accessor for TupleView();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v14);
  v15 = type metadata accessor for ZStack();
  v31 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v27 - v17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>, &lazy cache variable for type metadata for ContainerBackgroundKind?, MEMORY[0x1E0CE59B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  v19 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v19, v20);
  v21 = *a1;
  v36 = a7;
  v37 = a8;
  v38 = a10;
  v39 = v27;
  v40 = v29;
  v41 = v30;
  ZStack.init(alignment:content:)();
  swift_getKeyPath();
  if (v21 < 0)
    v22 = v21;
  else
    v22 = 5;
  LOBYTE(v42[0]) = v22;
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v15);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v15);
  v24 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>();
  v44[0] = v23;
  v44[1] = v24;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v19, v44);
  v25 = AnyView.init<A>(_:)();
  v42[0] = v21;
  v42[1] = v25;
  v42[2] = 0;
  v43 = v34;
  MEMORY[0x18D75B4AC](v42, v28, &type metadata for ContainerBackgroundModifier, a10);
  return swift_release();
}

uint64_t closure #1 in View.containerBackground<A>(for:alignment:content:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[3];
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22[2];

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v19 - v14;
  v16 = static Color.clear.getter();
  a1();
  static ViewBuilder.buildExpression<A>(_:)(v11, a4, a6);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v11, a4);
  v21 = v16;
  v22[0] = (uint64_t)&v21;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v15, a4);
  v22[1] = (uint64_t)v11;
  swift_retain();
  v20[0] = MEMORY[0x1E0CE7170];
  v20[1] = a4;
  v19[1] = MEMORY[0x1E0CE7140];
  v19[2] = a6;
  static ViewBuilder.buildBlock<each A>(_:)(v22, 2uLL, (uint64_t)v20);
  v17(v15, a4);
  swift_release();
  v17(v11, a4);
  return swift_release();
}

uint64_t View.applyContainerBackground<A>(for:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  *(_QWORD *)(v9 + 32) = a5;
  *(_BYTE *)(v9 + 40) = a2;
  static Alignment.center.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for AnyView??, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E0CE7518], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  lazy protocol witness table accessor for type AnyView?? and conformance <A> A?();
  View.backgroundPreferenceValue<A, B>(_:alignment:_:)();
  return swift_release();
}

uint64_t closure #1 in View.applyContainerBackground<A>(for:isEnabled:)@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  Swift::UInt v6;
  char v7;
  uint64_t result;

  if ((a2 & 1) != 0)
  {
    v5 = *a1;
    v6 = ContainerBackgroundKeys.AnyCustomKey.init<A>(_:)(a3, a3);
    if (*(_QWORD *)(v5 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v6), (v7 & 1) != 0))
      result = swift_retain();
    else
      result = 0;
  }
  else
  {
    result = 1;
  }
  *a4 = result;
  return result;
}

uint64_t View.applyContainerBackground<A, B>(for:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v15;

  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a4;
  v15[3] = a5;
  v15[4] = a6;
  v15[5] = a7;
  v15[6] = a8;
  v15[7] = a2;
  v15[8] = a3;
  swift_retain();
  static Alignment.center.getter();
  View.backgroundPreferenceValue<A, B>(_:alignment:_:)();
  return swift_release();
}

uint64_t closure #1 in View.applyContainerBackground<A, B>(for:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X5>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v25 - v14;
  v17 = *v16;
  v19 = ContainerBackgroundKeys.AnyCustomKey.init<A>(_:)(v18, v18);
  if (*(_QWORD *)(v17 + 16) && (v20 = specialized __RawDictionaryStorage.find<A>(_:)(v19), (v21 & 1) != 0))
  {
    v22 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v20);
    swift_retain();
  }
  else
  {
    v22 = 0;
  }
  a2(v22);
  swift_release();
  static ViewBuilder.buildExpression<A>(_:)(v11, a3, a4);
  v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v11, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v23)(v15, a3);
}

void View.containerBackgroundSpecifiedPreference<A, B>(key:placement:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  type metadata accessor for ContainerBackground.CustomSpecifiedPreferenceModifier(0, a4, a5, a7);
  JUMPOUT(0x18D75B4ACLL);
}

void View.containerBackground<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.containerBackground<A>(alignment:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t static ContainerBackgroundTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t View.containerBackground<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[9];
  uint64_t v8;

  v7[2] = a2;
  v7[3] = a3;
  v7[4] = a4;
  v7[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.containerBackground<A>(_:), (uint64_t)v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE7518], v5, (uint64_t)&v8);
  v7[7] = v8;
  View._trait<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in View.containerBackground<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = AnyView.init<A>(_:)();
  *a2 = result;
  return result;
}

double static ContainerBackground.CustomSpecifiedPreferenceModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  int v12;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v6 = a1[5];
  v5 = a1[6];
  v7 = *((_DWORD *)a1 + 20);
  v26 = *a1;
  v27 = v3;
  v29 = *(_OWORD *)(a1 + 3);
  v28 = v4;
  v30 = v6;
  v31 = v5;
  v32 = *(_OWORD *)(a1 + 7);
  v12 = v32;
  v33 = a1[9];
  v34 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ContainerBackgroundKeys.CustomKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.CustomKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.CustomKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<ContainerBackgroundKeys.CustomKey> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  v15 = v26;
  v16 = v27;
  v17 = v4;
  v18 = v29;
  v19 = v6;
  v20 = v5;
  v21 = v32;
  v22 = v33;
  v23 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRetain();
  a2(&v24, v8, &v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v15 = v5;
  v16 = v12;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v15 = v24;
    v16 = LODWORD(v25);
    v9 = PreferencesOutputs.subscript.getter();
    v15 = v5;
    v16 = v12;
    MEMORY[0x1E0C80A78](v9, v10);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  *(_QWORD *)a3 = v24;
  result = v25;
  a3[1] = v25;
  return result;
}

uint64_t implicit closure #1 in static ContainerBackground.CustomSpecifiedPreferenceModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  int v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *MEMORY[0x1E0CFED28];
  if ((a1 & 0x100000000) == 0)
    v4 = a1;
  v9 = v4;
  v11 = type metadata accessor for ContainerBackground.Specified(0, a3, a3, a4);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerBackground.Specified<A>, v11);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v9, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v10, v11, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8;
}

uint64_t ContainerBackground.Specified.childValue.getter(int a1)
{
  if (*MEMORY[0x1E0CFED28] == a1)
    return 0;
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContainerBackground.CustomSpecifiedPreferenceModifier<A, B>@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a3@<X8>)
{
  return static ContainerBackground.CustomSpecifiedPreferenceModifier._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContainerBackground.CustomSpecifiedPreferenceModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerBackground.CustomSpecifiedPreferenceModifier<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t ContainerBackground.Specified.value.getter(int a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;
  char v6;
  char v7;

  v3 = ContainerBackground.Specified.childValue.getter(a1);
  if (v3)
  {
    v4 = v3;
    v5 = ContainerBackgroundKeys.AnyCustomKey.init<A>(_:)(a2, a2);
    if (*(_QWORD *)(v4 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v5);
      v7 = v6;
    }
    else
    {
      v7 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t protocol witness for Rule.value.getter in conformance ContainerBackground.Specified<A>@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int *v2;
  uint64_t result;

  result = ContainerBackground.Specified.value.getter(*v2, *(_QWORD *)(a1 + 16));
  *a2 = result & 1;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ContainerBackground.Specified<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerBackground.Specified<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t partial apply for closure #1 in View.containerBackground<A>(_:for:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.containerBackground<A>(_:for:)(MEMORY[0x1E0CE7E28], a1);
}

uint64_t partial apply for closure #2 in View.containerBackground<A>(_:for:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.containerBackground<A>(_:for:)(MEMORY[0x1E0CE5368], a1);
}

uint64_t partial apply for closure #1 in View.containerBackground<A>(_:for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in View.containerBackground<A>(_:for:)(v2[6], v2[7], v2[8], v2[2], v2[3], v2[4], v2[5], a2, a1);
}

void type metadata accessor for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>)
  {
    v0 = MEMORY[0x1E0CE5A58];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E0CE4ED8], MEMORY[0x1E0CE4EC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, MEMORY[0x1E0CE5FC8], MEMORY[0x1E0CE5FB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))v0);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    v1 = type metadata accessor for OrOperationViewInputPredicate();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>);
  }
}

uint64_t sub_187663704@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.containerBackgroundKind.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187663744()
{
  return EnvironmentValues.containerBackgroundKind.setter();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>, &lazy cache variable for type metadata for ContainerBackgroundKind?, MEMORY[0x1E0CE59B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:)((uint64_t)lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], a1);
}

uint64_t partial apply for closure #2 in View.containerBackground<A>(_:for:allowsVibrancy:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:)((uint64_t)lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape, MEMORY[0x1E0CE5368], a1);
}

uint64_t partial apply for closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:)(*(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(unsigned __int8 *)(v3 + 72), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), a3, a1, a2);
}

uint64_t partial apply for closure #1 in View.containerBackground<A>(for:alignment:content:)()
{
  uint64_t v0;

  return closure #1 in View.containerBackground<A>(for:alignment:content:)(*(void (**)(void))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_187663864()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.applyContainerBackground<A>(for:isEnabled:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in View.applyContainerBackground<A>(for:isEnabled:)(a1, *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 24), a2);
}

unint64_t lazy protocol witness table accessor for type AnyView?? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type AnyView?? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AnyView?? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for AnyView??, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E0CE7518], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type AnyView? and conformance <A> A?();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyView?? and conformance <A> A?);
  }
  return result;
}

uint64_t sub_187663904()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.applyContainerBackground<A, B>(for:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in View.applyContainerBackground<A, B>(for:content:)(a1, *(void (**)(uint64_t))(v2 + 56), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 48), a2);
}

uint64_t type metadata accessor for ContainerBackground.CustomSpecifiedPreferenceModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContainerBackground.CustomSpecifiedPreferenceModifier);
}

uint64_t partial apply for closure #1 in View.containerBackground<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in View.containerBackground<A>(_:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundPlacement and conformance ContainerBackgroundPlacement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerBackgroundPlacement and conformance ContainerBackgroundPlacement;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundPlacement and conformance ContainerBackgroundPlacement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerBackgroundPlacement, &type metadata for ContainerBackgroundPlacement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundPlacement and conformance ContainerBackgroundPlacement);
  }
  return result;
}

uint64_t type metadata accessor for ContainerBackground.AnyVersionSeedTracker()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for ContainerBackground.ConcreteVersionSeedTracker()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ContainerBackground.ConcreteVersionSeedTracker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContainerBackground.ConcreteVersionSeedTracker);
}

ValueMetadata *type metadata accessor for ContainerBackgroundPlacement()
{
  return &type metadata for ContainerBackgroundPlacement;
}

ValueMetadata *type metadata accessor for ContainerBackgroundTraitKey()
{
  return &type metadata for ContainerBackgroundTraitKey;
}

void sub_187663A48()
{
  type metadata accessor for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>> and conformance OrOperationViewInputPredicate<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for OrOperationViewInputPredicate<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, InterfaceIdiomPredicate<ComplicationInterfaceIdiom>>, MEMORY[0x1E0CE6458]);
  type metadata accessor for StaticIf();
}

uint64_t sub_187663ABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v5[2];
  _QWORD v6[12];

  v6[0] = v2;
  v6[1] = &protocol witness table for ContainerBackgroundModifier;
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6);
  v5[1] = v5[0];
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v5);
}

uint64_t sub_187663B0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ContainerBackgroundModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_187663B64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.CustomKey, AnyView??>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.CustomKey, AnyView??> and conformance _BackgroundPreferenceModifier<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.CustomKey, AnyView??>, MEMORY[0x1E0CE6488]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.CustomKey, AnyView??>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.CustomKey, AnyView??>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for AnyView??, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E0CE7518], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type AnyView?? and conformance <A> A?();
    v0 = type metadata accessor for _BackgroundPreferenceModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.CustomKey, AnyView??>);
  }
}

uint64_t sub_187663C84(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];

  v1 = a1[2];
  v2 = a1[3];
  v3 = a1[4];
  v7[2] = &type metadata for ContainerBackgroundKeys.CustomKey;
  v7[3] = v1;
  v7[4] = &protocol witness table for ContainerBackgroundKeys.CustomKey;
  v7[5] = v3;
  v4 = type metadata accessor for _BackgroundPreferenceModifier();
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v2;
  v7[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6488], v4);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t sub_187663D1C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = a1[3];
  type metadata accessor for ContainerBackground.CustomSpecifiedPreferenceModifier(255, a1[1], a1[2], a1[4]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ContainerBackground.CustomSpecifiedPreferenceModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_187663D80(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_187663D88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ContainerBackgroundTraitKey>, (uint64_t)&type metadata for ContainerBackgroundTraitKey, (uint64_t)&protocol witness table for ContainerBackgroundTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<ContainerBackgroundTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ContainerBackgroundTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<ContainerBackgroundTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ContainerBackgroundTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ContainerBackgroundTraitKey>, (uint64_t)&type metadata for ContainerBackgroundTraitKey, (uint64_t)&protocol witness table for ContainerBackgroundTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ContainerBackgroundTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContainerBackgroundPlacement(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 15);
  v3 = (((*(_QWORD *)a1 >> 60) >> 3) & 0xFFFFFFF1 | (2 * ((*(_QWORD *)a1 >> 60) & 7))) ^ 0xF;
  if (v3 >= 0xE)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ContainerBackgroundPlacement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE)
  {
    *(_QWORD *)result = a2 - 15;
    if (a3 >= 0xF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = (unint64_t)(((-a2 >> 1) & 7) - 8 * a2) << 60;
  }
  return result;
}

uint64_t *destructiveInjectEnumTag for ContainerBackgroundPlacement.Storage(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFFFLL | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for ContainerBackgroundPlacement.Storage()
{
  return &type metadata for ContainerBackgroundPlacement.Storage;
}

ValueMetadata *type metadata accessor for ContainerBackground()
{
  return &type metadata for ContainerBackground;
}

uint64_t destroy for ContainerBackgroundValue(uint64_t a1)
{
  outlined consume of ContainerBackgroundValue.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ContainerBackgroundValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of ContainerBackgroundValue.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ContainerBackgroundValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of ContainerBackgroundValue.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of ContainerBackgroundValue.Content(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ContainerBackgroundValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of ContainerBackgroundValue.Content(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContainerBackgroundValue(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContainerBackgroundValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContainerBackgroundValue()
{
  return &type metadata for ContainerBackgroundValue;
}

uint64_t initializeWithCopy for ContainerBackgroundModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ContainerBackgroundModifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ContainerBackgroundModifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for ContainerBackgroundModifier()
{
  return &type metadata for ContainerBackgroundModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ContainerBackgroundModifier()
{
  return &protocol witness table for ContainerBackgroundModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ContainerBackground.CustomSpecifiedPreferenceModifier<A, B>()
{
  return &protocol witness table for ContainerBackground.CustomSpecifiedPreferenceModifier<A, B>;
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundPlacement.Storage and conformance ContainerBackgroundPlacement.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerBackgroundPlacement.Storage and conformance ContainerBackgroundPlacement.Storage;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundPlacement.Storage and conformance ContainerBackgroundPlacement.Storage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerBackgroundPlacement.Storage, &type metadata for ContainerBackgroundPlacement.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundPlacement.Storage and conformance ContainerBackgroundPlacement.Storage);
  }
  return result;
}

uint64_t sub_187664324()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of (ContainerBackgroundPlacementKey & HostPreferenceKey)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (ContainerBackgroundPlacementKey & HostPreferenceKey)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (ContainerBackgroundPlacementKey & HostPreferenceKey)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ContainerBackgroundPlacementKey & HostPreferenceKey)?)
  {
    type metadata accessor for ContainerBackgroundPlacementKey & HostPreferenceKey();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (ContainerBackgroundPlacementKey & HostPreferenceKey)?);
  }
}

unint64_t type metadata accessor for ContainerBackgroundPlacementKey & HostPreferenceKey()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ContainerBackgroundPlacementKey & HostPreferenceKey;
  if (!lazy cache variable for type metadata for ContainerBackgroundPlacementKey & HostPreferenceKey)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ContainerBackgroundPlacementKey & HostPreferenceKey);
  }
  return result;
}

uint64_t outlined destroy of (ContainerBackgroundPlacementKey & HostPreferenceKey)?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (ContainerBackgroundPlacementKey & HostPreferenceKey)?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for implicit closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)();
}

uint64_t partial apply for closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_BYTE *)(v3 + 16), *(__int128 **)(v3 + 24), *(unsigned int *)(v3 + 32), *(_QWORD *)(v3 + 40));
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned @thick ContainerBackgroundPlacementKey & HostPreferenceKey.Type) -> ()(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v1 + 40))(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ContainerBackgroundKeys.NavigationKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_OWORD *)a1 = xmmword_187C02A60;
  *(_BYTE *)(a1 + 16) = 0;
  result = EnvironmentValues.init()();
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ContainerBackgroundKeys.NavigationKey(uint64_t a1, void (*a2)(_QWORD *__return_ptr))
{
  return ContainerBackgroundValue.merge(nextValue:)(a2);
}

uint64_t type metadata accessor for ContainerBackgroundModifier.AnimatedPreferenceValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContainerBackgroundModifier.AnimatedPreferenceValue);
}

uint64_t partial apply for implicit closure #1 in transformKey #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in transformKey #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(*(_QWORD *)(v0 + 32), *(_DWORD *)(v0 + 40), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for ContainerBackgroundModifier.PreferenceValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContainerBackgroundModifier.PreferenceValue);
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundModifier.CustomPreferenceValue and conformance ContainerBackgroundModifier.CustomPreferenceValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerBackgroundModifier.CustomPreferenceValue and conformance ContainerBackgroundModifier.CustomPreferenceValue;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundModifier.CustomPreferenceValue and conformance ContainerBackgroundModifier.CustomPreferenceValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerBackgroundModifier.CustomPreferenceValue, &unk_1E1AF2738);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundModifier.CustomPreferenceValue and conformance ContainerBackgroundModifier.CustomPreferenceValue);
  }
  return result;
}

uint64_t sub_1876645F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187664614()
{
  return swift_deallocObject();
}

BOOL specialized static ContainerBackgroundPlacement.Storage.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v2 = *a1;
  v3 = *a2;
  v4 = *a2 == *a1;
  if (*a2 >= 0)
    v4 = 0;
  v5 = v3 >= 0 && v2 == v3;
  if (v2 >= 0)
    return v5;
  else
    return v4;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<ContainerBackgroundKeys.CustomKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<ContainerBackgroundKeys.CustomKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<ContainerBackgroundKeys.CustomKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<ContainerBackgroundKeys.CustomKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.CustomKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.CustomKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<ContainerBackgroundKeys.CustomKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static ContainerBackground.CustomSpecifiedPreferenceModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static ContainerBackground.CustomSpecifiedPreferenceModifier._makeView(modifier:inputs:body:)(*(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 32), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t type metadata accessor for ContainerBackground.Specified(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContainerBackground.Specified);
}

uint64_t partial apply for closure #1 in ContainerBackgroundKind.Builtin.addPreference(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned @thick ContainerBackgroundPlacementKey & HostPreferenceKey.Type) -> (@owned ContainerBackground.AnyVersionSeedTracker)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v2 + 40))(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
  *a2 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape;
  if (!lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5360], MEMORY[0x1E0CE5368]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape);
  }
  return result;
}

void *type metadata accessor for ContainerBackgroundModifier.CustomPreferenceValue()
{
  return &unk_1E1AF2738;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContainerBackgroundValue.Content(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of ContainerBackgroundValue.Content(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for ContainerBackgroundValue.Content(uint64_t a1)
{
  return outlined consume of ContainerBackgroundValue.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for ContainerBackgroundValue.Content(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of ContainerBackgroundValue.Content(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of ContainerBackgroundValue.Content(v5, v6);
  return a1;
}

uint64_t *assignWithTake for ContainerBackgroundValue.Content(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of ContainerBackgroundValue.Content(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for ContainerBackgroundValue.Content()
{
  return &type metadata for ContainerBackgroundValue.Content;
}

void base witness table accessor for _AttributeBody in ContainerBackground.Specified<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ContainerBackgroundModifier.PreferenceValue<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ContainerBackgroundModifier.AnimatedPreferenceValue<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187664888()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t partial apply for closure #2 in ContainerBackgroundModifier.AnimatedPreferenceValue.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_BYTE *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 72);
  v11 = *(_OWORD *)(v1 + 32);
  v12 = v4;
  v13 = v5;
  (*(void (**)(uint64_t *__return_ptr))(v3 + 16))(&v10);
  v9[0] = v6;
  v9[1] = v7;
  return ContainerBackgroundModifier.transformPreference(_:placement:environment:transaction:)(a1, (uint64_t)&v10, v9);
}

void type metadata accessor for ModifiedContent<AnyView, _BackgroundModifier<AnyView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<AnyView, _BackgroundModifier<AnyView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundModifier<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4B78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, _BackgroundModifier<AnyView>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _BackgroundModifier<AnyView>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _BackgroundModifier<AnyView>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _BackgroundModifier<AnyView>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<AnyView, _BackgroundModifier<AnyView>>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type _BackgroundModifier<AnyView> and conformance _BackgroundModifier<A>();
    v4[0] = MEMORY[0x1E0CE7508];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _BackgroundModifier<AnyView>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundModifier<AnyView> and conformance _BackgroundModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _BackgroundModifier<AnyView> and conformance _BackgroundModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundModifier<AnyView> and conformance _BackgroundModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BackgroundModifier<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4B78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundModifier<AnyView> and conformance _BackgroundModifier<A>);
  }
  return result;
}

uint64_t sub_187664A9C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ContainerBackgroundModifier.PreferenceValue.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in ContainerBackgroundModifier.PreferenceValue.value.getter(a1, *(_QWORD *)(v1 + 32), *(unsigned int *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void static ContainerBackgroundPlacement.tabView.getter()
{
  static ContainerBackgroundPlacement.window.getter();
}

uint64_t _VariadicView_Children.tagIndex<A>(_:)()
{
  type metadata accessor for Binding();
  return Binding<A>.projectingTagIndex(viewList:)();
}

{
  uint64_t v0;
  _QWORD v2[7];
  uint64_t v3;
  char v4;

  v2[6] = 0;
  v3 = 0;
  v4 = 1;
  v2[5] = 0;
  outlined init with copy of TableColumnList(v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  ViewList.applySublists(from:list:to:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v3;
}

uint64_t TraitValues.isAuxiliaryContent.getter()
{
  unsigned __int8 v1;

  ViewTraitCollection.value<A>(for:defaultValue:)();
  return v1;
}

uint64_t closure #1 in _VariadicView_Children.tagIndex<A>(_:)(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  _QWORD *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  char v36;
  void (*v37)(char *, uint64_t);
  void (*v38)(char *, uint64_t);
  uint64_t result;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  v47 = a4;
  v48 = a2;
  v42 = a3;
  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v43 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v45 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v13);
  v15 = (char *)&v41 - v14;
  v16 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v49 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v41 - v22;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v41 - v26;
  v46 = a1;
  v50 = *(_QWORD *)(a1 + 72);
  v44 = a6;
  ViewTraitCollection.tag<A>(for:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v23, v48, a5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v23, 0, 1, a5);
  v48 = TupleTypeMetadata2;
  v28 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
  v29 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v29(v15, v27, v11);
  v29(v28, v23, v11);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v30(v15, 1, a5) == 1)
  {
    v31 = *(void (**)(char *, uint64_t))(v16 + 8);
    v31(v23, v11);
    v31(v27, v11);
    if (v30(v28, 1, a5) == 1)
    {
      v31(v15, v11);
      v33 = v46;
      v32 = v47;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  v29(v49, v15, v11);
  if (v30(v28, 1, a5) == 1)
  {
    v34 = *(void (**)(char *, uint64_t))(v16 + 8);
    v34(v23, v11);
    v34(v27, v11);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v49, a5);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v48);
    v33 = v46;
    v32 = v47;
LABEL_9:
    *v32 += *(_QWORD *)(v33 + 8);
    return 1;
  }
  v35 = v43;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v43, v28, a5);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37 = *(void (**)(char *, uint64_t))(v9 + 8);
  v37(v35, a5);
  v38 = *(void (**)(char *, uint64_t))(v16 + 8);
  v38(v23, v11);
  v38(v27, v11);
  v37(v49, a5);
  v38(v15, v11);
  v33 = v46;
  v32 = v47;
  if ((v36 & 1) == 0)
    goto LABEL_9;
LABEL_8:
  v50 = *(_QWORD *)(v33 + 72);
  if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) != 0)
    goto LABEL_9;
  result = 0;
  v40 = v42;
  *v42 = *v32;
  *((_BYTE *)v40 + 8) = 0;
  return result;
}

uint64_t partial apply for closure #1 in _VariadicView_Children.tagIndex<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in _VariadicView_Children.tagIndex<A>(_:)(a1, *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40), *(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t _VariadicView_Children.Element.tag<A>(for:)()
{
  return ViewTraitCollection.tag<A>(for:)();
}

void GroupBox.init(label:content:)(uint64_t a1@<X0>, void (*a2)(double)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v16 - v10;
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  a2(v14);
  v15 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v11, a1, a3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, a3);
  GroupBox.init(content:label:)(a3, a4);
}

uint64_t sub_1876650CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void GroupBox<>.init(content:)()
{
  type metadata accessor for GroupBox();
}

uint64_t sub_187665144(uint64_t a1)
{
  uint64_t (*v1)(void);
  _BYTE *v2;

  *(_QWORD *)&v2[*(int *)(a1 + 56)] = 0;
  *v2 = 1;
  return v1();
}

void GroupBox.init(content:label:)(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  type metadata accessor for GroupBox();
}

uint64_t sub_1876651DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + *(int *)(a1 + 56)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v4 + *(int *)(a1 + 52), v3, v1);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, v2, v5);
}

void type metadata accessor for GroupBox()
{
  JUMPOUT(0x18D75FF28);
}

void GroupBox.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[3];

  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for RelationshipModifier<String>(255, v3, v4, v5);
  v6 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label();
  v9[0] = *(_QWORD *)(a1 + 32);
  v9[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v7 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v9);
  v8[1] = &protocol witness table for RelationshipModifier<A>;
  MEMORY[0x18D75FFDC](v7, v6, v8);
  type metadata accessor for OptionalSourceWriter();
}

void sub_18766533C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v13 = type metadata accessor for ModifiedContent();
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v12 - 416) = v13;
  *(_QWORD *)(v12 - 344) = v14;
  MEMORY[0x1E0C80A78](v13, v15);
  *(_QWORD *)(v12 - 400) = (char *)&a9 - v16;
  v17 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 384) = v17;
  v18 = lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content();
  *(_QWORD *)(v12 - 376) = v18;
  *(_QWORD *)(v12 - 168) = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v12 - 160) = v11;
  v19 = MEMORY[0x18D75FFDC](v9, v17, v12 - 168);
  *(_QWORD *)(v12 - 408) = v19;
  *(_QWORD *)(v12 - 152) = &type metadata for GroupBoxStyleConfiguration.Content;
  *(_QWORD *)(v12 - 144) = v17;
  *(_QWORD *)(v12 - 136) = v18;
  *(_QWORD *)(v12 - 128) = v19;
  type metadata accessor for StaticSourceWriter();
}

void sub_187665400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 368) = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  MEMORY[0x1E0C80A78](v6, v7);
  *(_QWORD *)(v3 - 240) = *(_QWORD *)(v3 - 392);
  *(_QWORD *)(v3 - 232) = v0;
  *(_QWORD *)(v3 - 224) = v2;
  *(_QWORD *)(v3 - 216) = v1;
  *(_QWORD *)(v3 - 208) = *(_QWORD *)(v3 - 336);
  lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle();
  View.optionalViewAlias<A, B>(_:_:)();
}

void sub_1876654D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 304) = v0;
  *(_QWORD *)(v6 - 296) = v3;
  *(_QWORD *)(v6 - 288) = v4;
  *(_QWORD *)(v6 - 280) = v2;
  *(_QWORD *)(v6 - 272) = v1;
  *(_QWORD *)(v6 - 184) = v5;
  *(_QWORD *)(v6 - 176) = &protocol witness table for OptionalSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v6 - 416), v6 - 184);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for GroupBoxStyleConfiguration.Content, (uint64_t)partial apply for closure #2 in GroupBox.body.getter);
}

uint64_t sub_18766557C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 344) + 8))(v1, v5);
  *(_QWORD *)(v7 - 200) = v3;
  *(_QWORD *)(v7 - 192) = &protocol witness table for StaticSourceWriter<A, B>;
  v8 = MEMORY[0x18D75FFDC](v0, v6, v7 - 200);
  static ViewBuilder.buildExpression<A>(_:)(v2, v6, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 368) + 8);
  v9(v2, v6);
  static ViewBuilder.buildBlock<A>(_:)(v4, v6, *(_QWORD *)(v7 - 328));
  return v9(v4, v6);
}

void type metadata accessor for RelationshipModifier<String>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for RelationshipModifier<String>)
  {
    v4 = type metadata accessor for RelationshipModifier(0, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>);
  }
}

unint64_t lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupBoxStyleConfiguration.Label, &type metadata for GroupBoxStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupBoxStyleConfiguration.Label, &type metadata for GroupBoxStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupBoxStyleConfiguration.Content, &type metadata for GroupBoxStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupBoxStyleConfiguration.Content, &type metadata for GroupBoxStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content);
  }
  return result;
}

uint64_t closure #1 in GroupBox.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[8];

  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)v23 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)v23 - v16, a1, v12, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 48))(v17, 1, a2) != 1)
  {
    v23[4] = a2;
    v23[5] = a3;
    v23[6] = a4;
    v23[7] = a5;
    type metadata accessor for GroupBox();
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
  type metadata accessor for ModifiedContent();
  type metadata accessor for RelationshipModifier<String>(255, v18, v19, v20);
  v21 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a6, 1, 1, v21);
}

uint64_t partial apply for closure #1 in GroupBox.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in GroupBox.body.getter);
}

void closure #2 in GroupBox.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for RelationshipModifier<String>(255, a2, a3, a4);
  v4 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v4, v5);
  MEMORY[0x1E0C80A78](v6, v7);
  type metadata accessor for GroupBox();
}

uint64_t sub_187665A08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  v7 = Namespace.wrappedValue.getter();
  *(_QWORD *)(v6 - 112) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v7);
  v9 = type metadata accessor for AccessibilityGroupBoxContentModifier(0, v2, v5, v8);
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityGroupBoxContentModifier<A>, v9);
  *(_QWORD *)(v6 - 128) = v5;
  *(_QWORD *)(v6 - 120) = &protocol witness table for RelationshipModifier<A>;
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6 - 128);
  View.accessibilityConfiguration<A>(_:)(v6 - 112, v2, v9, v5, v10);
  static ViewBuilder.buildExpression<A>(_:)(v4, v1, v11);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  v12(v4, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, *(_QWORD *)(v6 - 136));
  return v12(v3, v1);
}

uint64_t partial apply for closure #2 in GroupBox.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in GroupBox.body.getter);
}

void GroupBox<>.init(_:)(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
}

void GroupBox<>.init(_:content:)()
{
  type metadata accessor for GroupBox();
}

uint64_t sub_187665B70(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  *(uint64_t *)((char *)v2 + *(int *)(a1 + 56)) = 0;
  v3 = Text.init(_:tableName:bundle:comment:)();
  *v2 = v3;
  v2[1] = v5;
  v2[2] = v4 & 1;
  v2[3] = v6;
  return v1(v3, v5);
}

void GroupBox<>.init<A>(_:content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for GroupBox();
}

uint64_t sub_187665C94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;

  *(uint64_t *)((char *)v3 + *(int *)(a1 + 56)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v4, v2);
  *v3 = Text.init<A>(_:)();
  v3[1] = v11;
  v3[2] = v12 & 1;
  v3[3] = v13;
  (*(void (**)(void))(v9 - 120))();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 32))((char *)v3 + *(int *)(a1 + 52), v5, v1);
}

uint64_t associated type witness table accessor for View.Body : View in GroupBox<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for GroupBox()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupBox(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84))
    v8 = *(_QWORD *)(v7 + 64);
  else
    v8 = *(_QWORD *)(v7 + 64) + 1;
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v8 + v10;
  v12 = *(_QWORD *)(v9 + 64) + 7;
  v13 = v10 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v12 + ((v8 + v10) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    v17 = ~v10;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v7 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    v18 = ((unint64_t)a2 + v11) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, v18, v5);
    *(_QWORD *)((v12 + (((unint64_t)a1 + v11) & v17)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v12 + v18) & 0xFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for GroupBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = *(_QWORD *)(v5 + 64) + a1;
  if (!*(_DWORD *)(v5 + 84))
    ++v6;
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((v6 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

void *initializeWithCopy for GroupBox(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = ((unint64_t)a1 + v14) & ~v13;
  v16 = ((unint64_t)a2 + v14) & ~v13;
  (*(void (**)(unint64_t, unint64_t))(v12 + 16))(v15, v16);
  *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v16) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for GroupBox(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(a1, a2, v11);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = ((unint64_t)a1 + v15) & ~v14;
  v17 = ((unint64_t)a2 + v15) & ~v14;
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))(v16, v17);
  *(_QWORD *)((*(_QWORD *)(v13 + 64) + 7 + v16) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v13 + 64) + 7 + v17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for GroupBox(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
  }
  if (v8)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = ((unint64_t)a1 + v14) & ~v13;
  v16 = ((unint64_t)a2 + v14) & ~v13;
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))(v15, v16);
  *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v16) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for GroupBox(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(a1, a2, v11);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = ((unint64_t)a1 + v15) & ~v14;
  v17 = ((unint64_t)a2 + v15) & ~v14;
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))(v16, v17);
  *(_QWORD *)((*(_QWORD *)(v13 + 64) + 7 + v16) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v13 + 64) + 7 + v17) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupBox(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v18;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6)
    v7 = v6 - 1;
  else
    v7 = 0;
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7)
    v10 = v7;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (v6)
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = *(_QWORD *)(v5 + 64) + 1;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = v11 + v12;
  if (v10 < a2)
  {
    if (((((*(_QWORD *)(v8 + 64) + (v13 & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v14 = 2;
    else
      v14 = a2 - v10 + 1;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    __asm { BR              X5 }
  }
  if (!v10)
    return 0;
  if (v7 < v9)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v8 + 48))((v13 + a1) & ~v12, *(unsigned int *)(v8 + 84), v4);
  v18 = (*(uint64_t (**)(void))(v5 + 48))();
  if (v18 >= 2)
    return v18 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for GroupBox(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v10 + 84) <= v9)
    v11 = v9;
  else
    v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v12;
  if (v11 < a3)
  {
    v13 = a3 - v11;
    if (((*(_DWORD *)(v10 + 64) + (((_DWORD)v12 + *(unsigned __int8 *)(v10 + 80)) & ~*(unsigned __int8 *)(v10 + 80)) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (a2 > v11)
  {
    if (((*(_DWORD *)(v10 + 64) + (((_DWORD)v12 + *(unsigned __int8 *)(v10 + 80)) & ~*(unsigned __int8 *)(v10 + 80)) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v16 = ~v11 + a2;
      bzero(a1, ((*(_QWORD *)(v10 + 64)+ ((v12 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void sub_1876666E0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, size_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;

  v19[v20] = 0;
  if ((_DWORD)a1)
  {
    if (v15 >= v13)
    {
      if (v15 >= a1)
      {
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, (a1 + 1), a2, a3);
      }
      else if ((_DWORD)a4)
      {
        if (a4 <= 3)
          v21 = a4;
        else
          v21 = 4;
        bzero(v19, a4);
        __asm { BR              X10 }
      }
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))((unint64_t)&v19[v18] & v14, a1, v13, v12);
    }
  }
}

void sub_1876667B8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1876667C8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1876667EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for RelationshipModifier<String>(255, v3, v4, v5);
  v6 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label();
  v9[0] = v1;
  v9[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v7 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v9);
  v8[1] = &protocol witness table for RelationshipModifier<A>;
  MEMORY[0x18D75FFDC](v7, v6, v8);
  type metadata accessor for OptionalSourceWriter();
}

void sub_1876668A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ValueMetadata *a15, uint64_t a16, unint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  type metadata accessor for ModifiedContent();
  v19 = type metadata accessor for ModifiedContent();
  v20 = lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content();
  v21 = MEMORY[0x18D75FFDC](v18, v19, &a13);
  a15 = &type metadata for GroupBoxStyleConfiguration.Content;
  a16 = v19;
  a17 = v20;
  a18 = v21;
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_18766690C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[22];

  v2 = type metadata accessor for ModifiedContent();
  v5[0] = lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle();
  v5[1] = &protocol witness table for OptionalSourceWriter<A, B>;
  v4[0] = MEMORY[0x18D75FFDC](v0, v1, v5);
  v4[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

uint64_t protocol witness for BaseFocusResponder.platformItem.getter in conformance UIViewResponder(uint64_t a1)
{
  return FocusResponder.platformItem.getter(a1, (uint64_t)&protocol witness table for UIViewResponder);
}

uint64_t FocusResponder.platformItem.getter(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  _BYTE v5[40];
  _BYTE v6[8];
  _QWORD v7[8];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 16))(v7);
  if (v7[5])
    v2 = 0;
  else
    v2 = v7[6] == 1;
  if (v2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FocusItem?);
    return 0;
  }
  else
  {
    outlined init with copy of FocusItem.Base((uint64_t)v7, (uint64_t)v5);
    if (v5[32] == 1)
    {
      outlined init with take of WeakBox<UIFocusItem>((uint64_t)v5, (uint64_t)v6);
      v3 = MEMORY[0x18D760234](v6);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIFocusItem>);
    }
    else
    {
      outlined destroy of FocusItem.Base((uint64_t)v5);
      v3 = 0;
    }
    outlined destroy of FocusItem((uint64_t)v7);
  }
  return v3;
}

uint64_t closure #1 in ResponderNode.visitFocusResponders(applying:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, _BYTE *a3@<X8>)
{
  return closure #1 in ResponderNode.visitFocusResponders(applying:)(a1, a2, a3);
}

{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = swift_conformsToProtocol2();
  if (result)
    v7 = result;
  else
    v7 = 0;
  if (result)
    v8 = a1;
  else
    v8 = 0;
  if (v8)
  {
    swift_retain();
    a2(v8, v7);
    return swift_release();
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t closure #1 in ResponderNode.visitBaseFocusResponders(applying:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, _BYTE *a3@<X8>)
{
  return closure #1 in ResponderNode.visitFocusResponders(applying:)(a1, a2, a3);
}

uint64_t Gesture<>.values(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v11 = *(_QWORD *)(a3 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))(v14, v5, v12);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a1;
  v15[5] = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v14, a3);
  v17 = (_QWORD *)(a5 + *(int *)(type metadata accessor for TaskGesture(0, a3, a4, v16) + 36));
  *v17 = &async function pointer to partial apply for closure #1 in Gesture<>.values(_:);
  v17[1] = v15;
  return swift_retain();
}

uint64_t closure #1 in Gesture<>.values(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  v9 = type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v7, v8);
  v5[8] = v9;
  v10 = type metadata accessor for AsyncStream();
  v5[9] = v10;
  v5[10] = *(_QWORD *)(v10 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v10);
  type metadata accessor for AsyncMapSequence();
  v5[13] = swift_task_alloc();
  v13 = type metadata accessor for GestureValues(0, AssociatedTypeWitness, v11, v12);
  v5[14] = v13;
  v5[15] = *(_QWORD *)(v13 - 8);
  v5[16] = swift_task_alloc();
  v5[17] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  v5[20] = *(_QWORD *)(v9 - 8);
  v5[21] = swift_task_alloc();
  type metadata accessor for Optional();
  v5[22] = swift_task_alloc();
  v14 = type metadata accessor for AsyncStream.Iterator();
  v5[23] = v14;
  v5[24] = *(_QWORD *)(v14 - 8);
  v5[25] = swift_task_alloc();
  v5[26] = type metadata accessor for MainActor();
  v5[27] = static MainActor.shared.getter();
  v5[28] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[29] = v15;
  return swift_task_switch();
}

uint64_t closure #1 in Gesture<>.values(_:)()
{
  uint64_t v0;
  _QWORD *v1;

  AsyncStream.makeAsyncIterator()();
  *(_QWORD *)(v0 + 240) = static MainActor.shared.getter();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v1;
  *v1 = v0;
  v1[1] = closure #1 in Gesture<>.values(_:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)();
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 168), v1, v3);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      v7 = *(_QWORD *)(v0 + 144);
      v6 = *(_QWORD *)(v0 + 152);
      v8 = *(_QWORD *)(v0 + 136);
      v19 = *(_QWORD *)(v0 + 104);
      v9 = *(_QWORD *)(v0 + 88);
      v20 = *(_QWORD *)(v0 + 128);
      v11 = *(_QWORD *)(v0 + 72);
      v10 = *(_QWORD *)(v0 + 80);
      v12 = *(_QWORD *)(v0 + 56);
      v14 = *(_QWORD *)(v0 + 16);
      v13 = *(int **)(v0 + 24);
      v18 = *(_OWORD *)(v0 + 40);
      if (EnumCaseMultiPayload == 1)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(v8 + 32))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 56));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v12);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v14, v11);
        *(_OWORD *)(swift_allocObject() + 16) = v18;
        AsyncSequence.map<A>(_:)();
        swift_release();
        GestureValues.init(firstValue:hasEnded:base:)(v7, 0, v19, v12, v20);
        v21 = (uint64_t (*)(_QWORD))((char *)v13 + *v13);
        v15 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 256) = v15;
        v16 = closure #1 in Gesture<>.values(_:);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(v8 + 32))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 56));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v12);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v14, v11);
        *(_OWORD *)(swift_allocObject() + 16) = v18;
        AsyncSequence.map<A>(_:)();
        swift_release();
        GestureValues.init(firstValue:hasEnded:base:)(v7, 1, v19, v12, v20);
        v21 = (uint64_t (*)(_QWORD))((char *)v13 + *v13);
        v15 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 264) = v15;
        v16 = closure #1 in Gesture<>.values(_:);
      }
      *v15 = v0;
      v15[1] = v16;
      return v21(*(_QWORD *)(v0 + 128));
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 64));
      *(_QWORD *)(v0 + 240) = static MainActor.shared.getter();
      v17 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 248) = v17;
      *v17 = v0;
      v17[1] = closure #1 in Gesture<>.values(_:);
      return AsyncStream.Iterator.next(isolation:)();
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD))(v0[17] + 8))(v0[19], v0[7]);
  v0[30] = static MainActor.shared.getter();
  v1 = (_QWORD *)swift_task_alloc();
  v0[31] = v1;
  *v1 = v0;
  v1[1] = closure #1 in Gesture<>.values(_:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

uint64_t sub_187667380()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture<>.values(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return closure #1 in Gesture<>.values(_:)(a1, v7, v6, v4, v5);
}

uint64_t closure #1 in closure #1 in Gesture<>.values(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t TaskPhase.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = v2;
  MEMORY[0x1E0C80A78](a1, v3);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a2, v7);
}

uint64_t GestureValues.init(firstValue:hasEnded:base:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a5, a1, a4);
  v11 = type metadata accessor for GestureValues(0, a4, v9, v10);
  *(_BYTE *)(a5 + *(int *)(v11 + 28)) = a2;
  v12 = a5 + *(int *)(v11 + 32);
  type metadata accessor for TaskPhase(255, a4, v13, v14);
  v15 = type metadata accessor for AsyncStream();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v15);
  v16 = type metadata accessor for AsyncMapSequence();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v12, a3, v16);
}

uint64_t closure #2 in closure #1 in Gesture<>.values(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in Gesture<>.values(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for TaskPhase(0, AssociatedTypeWitness, v3, v4);
  TaskPhase.value.getter(v5, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GestureValues.firstValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t GestureValues.firstValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*GestureValues.firstValue.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GestureValues.hasEnded.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

uint64_t GestureValues.hasEnded.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 28)) = result;
  return result;
}

uint64_t (*GestureValues.hasEnded.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GestureValues.makeAsyncIterator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  type metadata accessor for TaskPhase(255, *(_QWORD *)(a1 + 16), a3, a4);
  v6 = type metadata accessor for AsyncStream();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v6);
  v7 = type metadata accessor for AsyncMapSequence();
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v13 - v11, v4 + *(int *)(a1 + 32), v7, v9);
  return AsyncMapSequence.makeAsyncIterator()();
}

uint64_t type metadata accessor for TaskPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskPhase);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance GestureValues<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  GestureValues.makeAsyncIterator()(a1, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v4, a1);
}

uint64_t static TaskGesture._makeGesture(gesture:inputs:)@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  int v23;
  __int128 v24;
  int v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  uint64_t v46;

  v6 = a3;
  v46 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = a2[5];
  v43 = a2[4];
  v44 = v9;
  v45[0] = a2[6];
  *(_OWORD *)((char *)v45 + 12) = *(__int128 *)((char *)a2 + 108);
  v10 = a2[1];
  v39 = *a2;
  v40 = v10;
  v11 = a2[3];
  v41 = a2[2];
  v42 = v11;
  v30 = a3;
  v31 = a4;
  type metadata accessor for TaskGesture(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v37 = v44;
  v38[0] = v45[0];
  *(_OWORD *)((char *)v38 + 12) = *(_OWORD *)((char *)v45 + 12);
  v32 = v39;
  v33 = v40;
  v34 = v41;
  v35 = v42;
  v36 = v43;
  (*(void (**)(__int128 *__return_ptr, int *, __int128 *, uint64_t, uint64_t))(a4 + 32))(&v24, &v23, &v32, v6, a4);
  LODWORD(v32) = v8;
  v12 = _GraphValue.value.getter();
  v32 = v24;
  LODWORD(v33) = v25;
  swift_getAssociatedTypeWitness();
  type metadata accessor for _GestureOutputs();
  v13 = _GestureOutputs.phase.getter();
  v37 = v44;
  v38[0] = v45[0];
  *(_OWORD *)((char *)v38 + 12) = *(_OWORD *)((char *)v45 + 12);
  v32 = v39;
  v33 = v40;
  v34 = v41;
  v35 = v42;
  v36 = v43;
  v14 = _GestureInputs.resetSeed.getter();
  *(_QWORD *)&v32 = __PAIR64__(v13, v12);
  *((_QWORD *)&v32 + 1) = v14;
  *(_QWORD *)&v33 = 0;
  v27 = type metadata accessor for GesturePhase();
  v16 = type metadata accessor for TaskGesturePhase(0, v6, a4, v15);
  v28 = v16;
  v29 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TaskGesturePhase<A>, v16);
  v17 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v32, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v26, v16, MEMORY[0x1E0DEDCE8], v17, MEMORY[0x1E0DEDD18], v18);
  swift_release();
  _GestureOutputs.phase.setter();
  LODWORD(v6) = v24;
  v19 = DWORD1(v24);
  v20 = *((_QWORD *)&v24 + 1);
  v21 = v25;
  v32 = v24;
  LODWORD(v33) = v25;
  _GestureOutputs.phase.getter();
  static AGAttributeFlags.transactional.getter();
  static AGAttributeFlags.removable.getter();
  result = AGGraphSetFlags();
  *(_DWORD *)a5 = v6;
  *(_DWORD *)(a5 + 4) = v19;
  *(_QWORD *)(a5 + 8) = v20;
  *(_DWORD *)(a5 + 16) = v21;
  return result;
}

uint64_t closure #1 in static TaskGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for TaskGesture(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance TaskGesture<A>@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TaskGesture._makeGesture(gesture:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

void protocol witness for Gesture.body.getter in conformance TaskGesture<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TaskGesture<A>, a1);
  specialized PrimitiveGesture.body.getter();
}

uint64_t static TaskPhase<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t TupleTypeMetadata2;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t, double);
  int EnumCaseMultiPayload;
  uint64_t v37;
  char *v38;
  char v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v50 = a4;
  v54 = a1;
  v55 = a2;
  v53 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v49 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v48 = (char *)&v48 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v48 - v11;
  v15 = type metadata accessor for TaskPhase(0, v13, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v48 - v22;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v48 - v26;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v52 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v30 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v29);
  v32 = (char *)&v48 - v31;
  v34 = (char *)&v48 + *(int *)(v33 + 48) - v31;
  v51 = v16;
  v35 = *(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16);
  v35((char *)&v48 - v31, v54, v15, v30);
  ((void (*)(char *, uint64_t, uint64_t))v35)(v34, v55, v15);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      ((void (*)(char *, char *, uint64_t))v35)(v23, v32, v15);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v37 = v53;
        v38 = v48;
        (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v48, v34, a3);
        v39 = dispatch thunk of static Equatable.== infix(_:_:)();
        v40 = *(void (**)(char *, uint64_t))(v37 + 8);
        v40(v38, a3);
        v41 = v23;
LABEL_9:
        v40(v41, a3);
LABEL_13:
        v44 = v51;
        goto LABEL_14;
      }
      v19 = v23;
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v35)(v19, v32, v15);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v42 = v53;
        v43 = v49;
        (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v49, v34, a3);
        v39 = dispatch thunk of static Equatable.== infix(_:_:)();
        v40 = *(void (**)(char *, uint64_t))(v42 + 8);
        v40(v43, a3);
        v41 = v19;
        goto LABEL_9;
      }
    }
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v35)(v27, v32, v15);
    if (!swift_getEnumCaseMultiPayload())
    {
      v45 = v53;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v12, v34, a3);
      v39 = dispatch thunk of static Equatable.== infix(_:_:)();
      v46 = *(void (**)(char *, uint64_t))(v45 + 8);
      v46(v12, a3);
      v46(v27, a3);
      goto LABEL_13;
    }
    v19 = v27;
  }
  v44 = v52;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v19, a3);
  v39 = 0;
  v15 = TupleTypeMetadata2;
LABEL_14:
  (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v15);
  return v39 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> TaskPhase<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static TaskPhase<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t TaskPhase<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Swift::UInt EnumCaseMultiPayload;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v12, v2, a2, v10);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v12, v4);
  Hasher._combine(_:)(EnumCaseMultiPayload);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int TaskPhase<>.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  TaskPhase<>.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> TaskPhase<A>(uint64_t a1)
{
  return TaskPhase<>.hashValue.getter(a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> TaskPhase<A>(uint64_t a1, uint64_t a2)
{
  return TaskPhase<>.hash(into:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> TaskPhase<A>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  TaskPhase<>.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in GestureValues<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t base witness table accessor for Equatable in <> TaskPhase<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TaskPhase<A>, a1, &v4);
}

uint64_t type metadata completion function for GestureValues()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v0 = swift_checkMetadataState();
  v3 = v0;
  if (v4 <= 0x3F)
  {
    type metadata accessor for TaskPhase(255, v0, v1, v2);
    v5 = type metadata accessor for AsyncStream();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v5);
    v3 = type metadata accessor for AsyncMapSequence();
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

_QWORD *initializeBufferWithCopyOfBuffer for GestureValues(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 16);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 32);
    *((_BYTE *)v4 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    type metadata accessor for TaskPhase(255, v7, v11, v12);
    v13 = type metadata accessor for AsyncStream();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v13);
    v14 = type metadata accessor for AsyncMapSequence();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v9, v10, v14);
  }
  return v4;
}

uint64_t destroy for GestureValues(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 32);
  type metadata accessor for TaskPhase(255, v4, v6, v7);
  v8 = type metadata accessor for AsyncStream();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v8);
  v9 = type metadata accessor for AsyncMapSequence();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v5, v9);
}

uint64_t initializeWithCopy for GestureValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 32);
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  v8 = a1 + v7;
  v9 = a2 + v7;
  type metadata accessor for TaskPhase(255, v6, v10, v11);
  v12 = type metadata accessor for AsyncStream();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v12);
  v13 = type metadata accessor for AsyncMapSequence();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v8, v9, v13);
  return a1;
}

uint64_t assignWithCopy for GestureValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  v7 = *(int *)(a3 + 32);
  v8 = a1 + v7;
  v9 = a2 + v7;
  type metadata accessor for TaskPhase(255, v6, v10, v11);
  v12 = type metadata accessor for AsyncStream();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v12);
  v13 = type metadata accessor for AsyncMapSequence();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v8, v9, v13);
  return a1;
}

uint64_t initializeWithTake for GestureValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 32);
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  v8 = a1 + v7;
  v9 = a2 + v7;
  type metadata accessor for TaskPhase(255, v6, v10, v11);
  v12 = type metadata accessor for AsyncStream();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v12);
  v13 = type metadata accessor for AsyncMapSequence();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
  return a1;
}

uint64_t assignWithTake for GestureValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 32);
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  v8 = a1 + v7;
  v9 = a2 + v7;
  type metadata accessor for TaskPhase(255, v6, v10, v11);
  v12 = type metadata accessor for AsyncStream();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v12);
  v13 = type metadata accessor for AsyncMapSequence();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v8, v9, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for GestureValues()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876685B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  unsigned int v10;
  uint64_t v12;

  v4 = a2;
  v5 = a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_DWORD *)(v6 + 84) == (_DWORD)a2)
  {
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v8 = *(_QWORD *)(a3 + 16);
    return v7(a1, a2, v8);
  }
  if ((_DWORD)a2 != 254)
  {
    type metadata accessor for TaskPhase(255, *(_QWORD *)(a3 + 16), a3, a4);
    v12 = type metadata accessor for AsyncStream();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v12);
    v8 = type metadata accessor for AsyncMapSequence();
    a1 = v5 + *(int *)(a3 + 32);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    a2 = v4;
    return v7(a1, a2, v8);
  }
  v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v10 >= 2)
    return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GestureValues()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876686B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = a2;
  v5 = result;
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v6 + 84) == (_DWORD)a3)
  {
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v8 = a2;
    v9 = *(_QWORD *)(a4 + 16);
  }
  else
  {
    if ((_DWORD)a3 == 254)
    {
      *(_BYTE *)(result + *(int *)(a4 + 28)) = a2 + 1;
      return result;
    }
    type metadata accessor for TaskPhase(255, *(_QWORD *)(a4 + 16), a3, a4);
    v11 = type metadata accessor for AsyncStream();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v11);
    v9 = type metadata accessor for AsyncMapSequence();
    result = v5 + *(int *)(a4 + 32);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
    a2 = v4;
    v8 = v4;
  }
  return v7(result, a2, v8, v9);
}

uint64_t type metadata accessor for GestureValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureValues);
}

uint64_t type metadata completion function for TaskPhase()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TaskPhase(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    v10 = *((unsigned __int8 *)a2 + v5);
    if (v10 >= 3)
    {
      if (v5 <= 3)
        v11 = v5;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    if (v10 == 2)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 2;
    }
    else if (v10 == 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  else
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return v3;
}

uint64_t initializeWithCopy for TaskPhase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X12 }
  }
  (*(void (**)(uint64_t))(v4 + 16))(a1);
  *(_BYTE *)(a1 + v5) = v6;
  return a1;
}

uint64_t assignWithCopy for TaskPhase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = v8;
  }
  return a1;
}

uint64_t initializeWithTake for TaskPhase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X12 }
  }
  (*(void (**)(uint64_t))(v4 + 32))(a1);
  *(_BYTE *)(a1 + v5) = v6;
  return a1;
}

uint64_t assignWithTake for TaskPhase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
    *(_BYTE *)(a1 + v7) = v8;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TaskPhase(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 < 0xFE)
    goto LABEL_19;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_19:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_19;
LABEL_12:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187668D1C + 4 * byte_187C4A239[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for TaskPhase(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for TaskPhase(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 3u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187668F40 + 4 * byte_187C4A247[v3]))();
}

void destructiveInjectEnumTag for TaskPhase(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    v5 = a2 - 3;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata completion function for TaskGesturePhase.Handler()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v1, v2);
  type metadata accessor for AsyncStream.Continuation();
  result = type metadata accessor for Optional();
  if (v4 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void TaskGesturePhase.Handler.setContinuation(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Bool IsNativeType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for TaskPhase(0, AssociatedTypeWitness, v4, v5);
  v7 = *(_QWORD *)(v6 - 8);
  v27 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - v9;
  v11 = type metadata accessor for AsyncStream.Continuation();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v26 - v16;
  v18 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v26 - v16, a1, v11, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, v11);
  v19 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(v19, v17, v12);
  swift_endAccess();
  v20 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 104));
  swift_beginAccess();
  v21 = *v20;
  swift_bridgeObjectRetain();
  *v20 = static Array._allocateUninitialized(_:)();
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 112)) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    AsyncStream.Continuation.finish()();
    return;
  }
  if (MEMORY[0x18D75D06C](v21, v6))
  {
    v22 = 0;
    do
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, v21+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v22, v6);
        v24 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_12;
      }
      else
      {
        v25 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v27 != 8)
        {
          __break(1u);
          return;
        }
        v28 = v25;
        (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 16))(v10, &v28, v6);
        swift_unknownObjectRelease();
        v24 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
LABEL_12:
          __break(1u);
          break;
        }
      }
      TaskGesturePhase.Handler.enqueue(phase:)((uint64_t)v10);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      ++v22;
    }
    while (v24 != MEMORY[0x18D75D06C](v21, v6));
  }
  swift_bridgeObjectRelease();
}

void TaskGesturePhase.Handler.enqueue(phase:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v2 = v1;
  v35 = a1;
  v3 = *v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for TaskPhase(0, AssociatedTypeWitness, v5, v6);
  v33 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v34 = (char *)&v30 - v9;
  v10 = type metadata accessor for AsyncStream.Continuation.YieldResult();
  v31 = *(_QWORD *)(v10 - 8);
  v32 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v30 - v12;
  v14 = type metadata accessor for AsyncStream.Continuation();
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v30 - v18;
  v20 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v30 - v23;
  if ((*((_BYTE *)v2 + *(_QWORD *)(v3 + 112)) & 1) == 0)
  {
    v30 = *(_QWORD *)(v3 + 112);
    v25 = (char *)v2 + *(_QWORD *)(v3 + 96);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v25, v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v14) == 1)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v34, v35, v7);
      swift_beginAccess();
      type metadata accessor for Array();
      Array.append(_:)();
      swift_endAccess();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v24, v19, v14);
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v34, v35, v7);
      AsyncStream.Continuation.yield(_:)();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v14);
      v27 = v31;
      v26 = v32;
      v28 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v13, v32);
      v29 = *MEMORY[0x1E0DF0788];
      (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v26);
      if (v28 == v29)
        *((_BYTE *)v2 + v30) = 1;
    }
  }
}

void TaskGesturePhase.Handler.invalidate()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  v28 = *(_QWORD *)(*v0 + 80);
  v29 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v4, v5);
  v6 = type metadata accessor for AsyncStream.Continuation();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v27 - v10;
  v12 = *(_QWORD *)(v6 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v14, v15);
  v16 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v27 - v19;
  v21 = *(_QWORD *)(v1 + 112);
  if ((*((_BYTE *)v0 + v21) & 1) == 0)
  {
    *((_BYTE *)v0 + v21) = 1;
    v22 = (uint64_t)v0 + *(_QWORD *)(*v0 + 96);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v22, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v6) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    else
    {
      v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v23(v20, v11, v6);
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v20, v6);
      v24 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v25 = swift_allocObject();
      v26 = v29;
      *(_QWORD *)(v25 + 16) = v28;
      *(_QWORD *)(v25 + 24) = v26;
      v23((char *)(v25 + v24), v16, v6);
      static Update.enqueueAction(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v6);
    }
  }
}

void closure #1 in TaskGesturePhase.Handler.invalidate()()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v1, v2);
  type metadata accessor for AsyncStream.Continuation();
  AsyncStream.Continuation.finish()();
}

uint64_t TaskGesturePhase.Handler.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  TaskGesturePhase.Handler.invalidate()();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v3, v4);
  type metadata accessor for AsyncStream.Continuation();
  v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v1, v5);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TaskGesturePhase.Handler.__deallocating_deinit()
{
  TaskGesturePhase.Handler.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TaskGesturePhase.Handler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskGesturePhase.Handler);
}

uint64_t TaskGesturePhase.Handler.__allocating_init()()
{
  swift_allocObject();
  return TaskGesturePhase.Handler.init()();
}

void sub_1876699C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TaskGesture(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for TaskGesture(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskGesture);
}

uint64_t getEnumTagSinglePayload for TaskGesture(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187669A74 + 4 * byte_187C4A24C[v10]))();
  }
}

void storeEnumTagSinglePayload for TaskGesture(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187669BEC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187669C64);
}

void sub_187669BF4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187669BFCLL);
  JUMPOUT(0x187669C64);
}

void sub_187669C3C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187669C64);
}

void sub_187669C44()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187669C64);
}

uint64_t sub_187669C4C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187669C64);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187669C60);
    JUMPOUT(0x187669C58);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void base witness table accessor for Gesture in TaskGesture<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t TaskGesturePhase.Handler.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v3, v4);
  v5 = type metadata accessor for AsyncStream.Continuation();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v1, 1, 1, v5);
  v6 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_checkMetadataState();
  *(_QWORD *)(v0 + v6) = Array.init()();
  *(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112)) = 0;
  return v0;
}

uint64_t TaskGesturePhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t TupleTypeMetadata2;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  char *v48;
  uint64_t result;
  uint64_t v50;
  uint64_t Value;
  char v52;
  char v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  char *v58;
  _QWORD v59[5];
  int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v70 = type metadata accessor for TaskGesture(0, v6, v7, a4);
  v68 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70, v8);
  v67 = (char *)v59 - v9;
  v73 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v11, v12);
  v65 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  v64 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65, v14);
  v16 = (char *)v59 - v15;
  v75 = type metadata accessor for AsyncStream();
  v69 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75, v17);
  v71 = (char *)v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v72 = (char *)v59 - v21;
  v80 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v76 = (char *)v59 - v24;
  v77 = AssociatedTypeWitness;
  v25 = type metadata accessor for GesturePhase();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v27);
  v74 = (char *)v59 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v78 = (char *)v59 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v85 = (char *)v59 - v34;
  v84 = type metadata accessor for Optional();
  v81 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84, v35);
  v79 = (char *)v59 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v83 = (char *)v59 - v39;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v82 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v41);
  v43 = (char *)v59 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = MEMORY[0x1E0C80A78](v44, v45);
  v48 = (char *)v59 - v47;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TaskGesturePhase<A>, a1, v46);
  result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    v59[2] = v16;
    v59[4] = v6;
    v61 = a1;
    v50 = *(int *)(TupleTypeMetadata2 + 48);
    v63 = v4;
    Value = AGGraphGetValue();
    v53 = v52;
    v54 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    v54(v48, Value, v25);
    v48[v50] = v53 & 1;
    v55 = *(int *)(TupleTypeMetadata2 + 48);
    v54(v43, (uint64_t)v48, v25);
    v43[v55] = v53 & 1;
    v56 = *(void (**)(char *, uint64_t))(v26 + 8);
    v62 = v43;
    v56(v43, v25);
    if ((v53 & 1) != 0)
    {
      v59[1] = TupleTypeMetadata2;
      v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56);
      v60 = 1;
      v59[0] = v57;
      v57(v83, 1, 1, v13);
      v59[3] = v48;
      v54(v85, (uint64_t)v48, v25);
      v58 = (char *)&loc_18766A180 + 4 * byte_187C4A25B[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v48, TupleTypeMetadata2);
  }
  return result;
}

uint64_t closure #2 in TaskGesturePhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v10, v11);
  v12 = type metadata accessor for AsyncStream();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v25 - v15;
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a3, v12);
  v22 = (*(unsigned __int8 *)(v13 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v23 = (char *)swift_allocObject();
  *((_QWORD *)v23 + 2) = 0;
  *((_QWORD *)v23 + 3) = 0;
  *((_QWORD *)v23 + 4) = a4;
  *((_QWORD *)v23 + 5) = a5;
  *((_QWORD *)v23 + 6) = v26;
  *((_QWORD *)v23 + 7) = a2;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v23[v22], v16, v12);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v20, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in TaskGesturePhase.updateValue(), (uint64_t)v23);
  return swift_release();
}

uint64_t closure #1 in closure #2 in TaskGesturePhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  v10 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v8;
  *v8 = v6;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v10(a6);
}

uint64_t TaskGesturePhase.resetPhase()()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 16))
  {
    TaskGesturePhase.Handler.invalidate()();
    result = swift_release();
  }
  *(_QWORD *)(v0 + 16) = 0;
  return result;
}

uint64_t static TaskGesturePhase.willRemove(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  AGGraphGetAttributeInfo();
  type metadata accessor for TaskGesturePhase(0, a2, a3, v5);
  return TaskGesturePhase.resetPhase()();
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance TaskGesturePhase<A>()
{
  return SequencePhase.resetSeed.getter();
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance TaskGesturePhase<A>(uint64_t a1, uint64_t a2)
{
  return static TaskGesturePhase.willRemove(attribute:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance TaskGesturePhase<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for GesturePhase();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t partial apply for closure #1 in static TaskGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static TaskGesture._makeGesture(gesture:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for TaskGesturePhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskGesturePhase);
}

uint64_t sub_18766A98C()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v2, v3);
  v4 = type metadata accessor for AsyncStream.Continuation();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80)), v4);
  return swift_deallocObject();
}

void partial apply for closure #1 in TaskGesturePhase.Handler.invalidate()()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v1, v2);
  type metadata accessor for AsyncStream.Continuation();
  closure #1 in TaskGesturePhase.Handler.invalidate()();
}

uint64_t sub_18766AA90()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in Gesture<>.values(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v7;

  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  *(_OWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_18766AB14()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Gesture<>.values(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v7;

  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  *(_OWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  return swift_task_switch();
}

uint64_t assignWithCopy for TaskGesturePhase(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TaskGesturePhase(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

void base witness table accessor for _AttributeBody in TaskGesturePhase<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for StatefulRule in TaskGesturePhase<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_18766AC4C()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v2, v3);
  v4 = type metadata accessor for AsyncStream();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in TaskGesturePhase.updateValue()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[2];
  v2 = v0[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v4, v5);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AsyncStream() - 8) + 80);
  return closure #2 in TaskGesturePhase.updateValue()(v0[4], v0[5], (uint64_t)v0 + ((v6 + 48) & ~v6), v1, v2);
}

uint64_t sub_18766AD68()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v2, v3);
  v4 = type metadata accessor for AsyncStream();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in TaskGesturePhase.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase(255, AssociatedTypeWitness, v3, v4);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AsyncStream() - 8) + 80);
  v6 = *(int **)(v0 + 48);
  v7 = v0 + ((v5 + 64) & ~v5);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  v11 = (uint64_t (*)(uint64_t))((char *)v6 + *v6);
  v9 = (_QWORD *)swift_task_alloc();
  v8[2] = v9;
  *v9 = v8;
  v9[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v11(v7);
}

void PickerOption.init<A>(value:isAlternate:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PickerOption.init<A, B>(_:value:isAlternate:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PickerOption.init<>(_:value:isAlternate:)()
{
  PickerOption.init<>(_:value:isAlternate:)();
}

{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PickerOption.init<A>(_:value:isAlternate:)()
{
  PickerOption.init<>(_:value:isAlternate:)();
}

{
  PickerOption.init<A, B>(_:value:isAlternate:)();
}

void PickerOption.init<>(_:_:isAlternate:)()
{
  PickerOption.init<>(_:value:isAlternate:)();
}

void PickerOption.init<A>(_:_:isAlternate:)()
{
  PickerOption.init<>(_:value:isAlternate:)();
}

{
  PickerOption.init<A, B>(_:value:isAlternate:)();
}

void PickerOption.init<A, B>(_:_:isAlternate:)()
{
  PickerOption.init<A, B>(_:value:isAlternate:)();
}

void PickerOption.init(value:isAlternate:content:)()
{
  PickerOption.init<A>(value:isAlternate:content:)();
}

void PickerOption.init(_:isAlternate:content:)()
{
  PickerOption.init<A>(value:isAlternate:content:)();
}

void PickerOption.init<A>(_:isAlternate:content:)()
{
  PickerOption.init<A>(value:isAlternate:content:)();
}

uint64_t EnvironmentValues.listContentConfiguration.setter(uint64_t a1)
{
  return EnvironmentValues.listContentConfiguration.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListContentConfigurationKey>, (uint64_t)&type metadata for ListContentConfigurationKey, (uint64_t)&protocol witness table for ListContentConfigurationKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListContentConfigurationKey> and conformance EnvironmentPropertyKey<A>);
}

UIContextMenuConfiguration_optional __swiftcall ListCollectionViewCellBase.outermostContextMenuConfiguration()()
{
  objc_class *v0;
  Swift::Bool v1;
  UIContextMenuConfiguration_optional result;

  v0 = (objc_class *)ListCollectionViewCellBase.outermostContextMenuConfiguration()((uint64_t (*)(void))ContextMenuBridge.outermostConfiguration());
  result.value.super.isa = v0;
  result.is_nil = v1;
  return result;
}

uint64_t ListCollectionViewCellBase.outermostContextMenuResponder.getter()
{
  return ListCollectionViewCellBase.outermostContextMenuConfiguration()(ContextMenuBridge.outermostContextMenuResponder.getter);
}

uint64_t ListCollectionViewCellBase.outermostContextMenuConfiguration()(uint64_t (*a1)(void))
{
  uint64_t v1;
  id v3;
  uint64_t v4;

  if (!*(_QWORD *)(v1 + direct field offset for ListCollectionViewCellBase.host))
    return 0;
  v3 = (id)specialized _UIHostingView.contextMenuBridge.getter();
  v4 = a1();

  return v4;
}

uint64_t ListCollectionViewCellBase.swipeActions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[224];

  if (*(_QWORD *)(v1 + direct field offset for ListCollectionViewCellBase.host))
  {
    type metadata accessor for SwipeActions.Value?();
    swift_retain();
    static Update.dispatchImmediately<A>(_:)();
    return swift_release();
  }
  else
  {
    _s7SwiftUI12SwipeActionsO5ValueVSgWOi0_((uint64_t)v4);
    return outlined init with take of SwipeActions.Value?((uint64_t)v4, a1);
  }
}

double ListCollectionViewCellBase.identifiedViews.getter@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  _QWORD v11[2];
  __int128 v12[10];

  v3 = *(void **)((char *)v1 + direct field offset for ListCollectionViewCellBase.host);
  if (v3)
  {
    v4 = *MEMORY[0x1E0DEEDD8] & *v1;
    type metadata accessor for CollectionViewCellModifier();
    v5 = type metadata accessor for ModifiedContent();
    v11[0] = *(_QWORD *)(*(_QWORD *)(v4 + 176) + 8);
    v11[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CollectionViewCellModifier and conformance CollectionViewCellModifier, (uint64_t (*)(uint64_t))type metadata accessor for CollectionViewCellModifier, (uint64_t)&protocol conformance descriptor for CollectionViewCellModifier);
    v6 = v3;
    v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v11);
    v9 = type metadata accessor for _UIHostingView(0, v5, v7, v8);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v9);
    ViewRendererHost.preferenceValue<A>(_:)();

    outlined init with take of _IdentifiedViewTree(v12, a1);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 160) = 2;
  }
  return result;
}

uint64_t ListCollectionViewCellBase.responderNode.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (!*(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase.host))
    return 0;
  swift_retain();
  v1 = ViewGraph.responderNode.getter();
  swift_release();
  return v1;
}

uint64_t ListCollectionViewCellBase.secondaryNavigationBehavior.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior);
  outlined copy of PlatformItemList.Item.SecondaryNavigationBehavior?(v1, *(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior + 8));
  return v1;
}

void *ListCollectionViewCellBase.dragBridge.getter()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  id v3;

  v1 = *(_QWORD **)(v0 + direct field offset for ListCollectionViewCellBase.host);
  if (!v1)
    return 0;
  v2 = *(void **)((char *)v1 + *(_QWORD *)((*v1 & *MEMORY[0x1E0DEEDD8]) + 0x1A8));
  v3 = v2;
  return v2;
}

uint64_t ListCollectionViewCellBase.backgroundHost.getter()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2130], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v2 = MEMORY[0x1E0C80A78](v0, v1);
  v4 = (char *)&v8 - v3;
  MEMORY[0x18D75D9FC](v2);
  v5 = type metadata accessor for UIBackgroundConfiguration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    outlined destroy of Binding<AttributedString>((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2130], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return 0;
  }
  v7 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of Binding<AttributedString>((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2130], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (!v7)
    return 0;
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
  result = swift_dynamicCastClass();
  if (!result)
  {

    return 0;
  }
  return result;
}

void __swiftcall ListCollectionViewCellBase.editMenuInteraction(_:menuFor:suggestedActions:)(UIMenu_optional *__return_ptr retstr, UIEditMenuInteraction _, UIEditMenuConfiguration *menuFor, Swift::OpaquePointer suggestedActions)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;

  v8 = v4 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate;
  if (MEMORY[0x18D760234](v4 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate))
  {
    v9 = *(_QWORD *)(v8 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(Class, UIEditMenuConfiguration *, void *, uint64_t, uint64_t))(v9 + 8))(_.super.isa, menuFor, suggestedActions._rawValue, ObjectType, v9);
    swift_unknownObjectRelease();
  }
}

__C::CGRect __swiftcall ListCollectionViewCellBase.editMenuInteraction(_:targetRectFor:)(UIEditMenuInteraction _, UIEditMenuConfiguration *targetRectFor)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __C::CGRect result;

  v5 = v2 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate;
  if (MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate))
  {
    v6 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType();
    v8 = (*(double (**)(Class, UIEditMenuConfiguration *, uint64_t, uint64_t))(v6 + 16))(_.super.isa, targetRectFor, ObjectType, v6);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    swift_unknownObjectRelease();
  }
  else
  {
    v12 = 0.0;
    v14 = 0.0;
    v8 = 0.0;
    v10 = 0.0;
  }
  v15 = v8;
  v16 = v10;
  v17 = v12;
  v18 = v14;
  result.size.height = v18;
  result.size.width = v17;
  result.origin.y = v16;
  result.origin.x = v15;
  return result;
}

uint64_t ListCollectionViewCellBase.editMenuInteraction(_:willPresentMenuFor:animator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t ObjectType;

  v7 = v3 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate;
  result = MEMORY[0x18D760234](v3 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate);
  if (result)
  {
    v9 = *(_QWORD *)(v7 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 24))(a1, a2, a3, ObjectType, v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ListCollectionViewCellBase.editMenuInteraction(_:willDismissMenuFor:animator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t ObjectType;

  v7 = v3 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate;
  result = MEMORY[0x18D760234](v3 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate);
  if (result)
  {
    v9 = *(_QWORD *)(v7 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, a3, ObjectType, v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ListCollectionViewCellBase.configureAccessories<A>(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t AssociatedTypeWitness;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  char v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  char *v82;
  int v83;
  char v84;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;

  v6 = type metadata accessor for UICellAccessory.ReorderOptions();
  v96 = *(_QWORD *)(v6 - 8);
  v97 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v95 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UICellAccessory.DeleteOptions();
  v101 = *(_QWORD *)(v9 - 8);
  v102 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v100 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellAccessory.LayoutDimension?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC1C58], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  v109 = (char *)&v86 - v14;
  v91 = type metadata accessor for UICellAccessory.MultiselectOptions();
  v90 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91, v15);
  v89 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UICellAccessory.DisplayedState();
  v18 = *(_QWORD *)(v17 - 8);
  v110 = v17;
  v111 = v18;
  MEMORY[0x1E0C80A78](v17, v19);
  v93 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v92 = (char *)&v86 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v105 = (char *)&v86 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v99 = (char *)&v86 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  v98 = (char *)&v86 - v32;
  MEMORY[0x1E0C80A78](v33, v34);
  v104 = (char *)&v86 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v87 = (char *)&v86 - v38;
  v108 = type metadata accessor for UICellAccessory();
  v107 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108, v39);
  v94 = (char *)&v86 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41, v42);
  v103 = (char *)&v86 - v43;
  MEMORY[0x1E0C80A78](v44, v45);
  v88 = (char *)&v86 - v46;
  v48 = type metadata accessor for _RowVisitationContext(0, a2, a3, v47);
  v49 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v50);
  v106 = (char *)&v86 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v52, v53);
  v55 = (char *)&v86 - v54;
  MEMORY[0x1E0C80A78](v56, v57);
  v59 = (char *)&v86 - v58;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61 = type metadata accessor for Optional();
  v62 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61, v63);
  v65 = (char *)&v86 - v64;
  _RowVisitationContext.selectionValue(respectSelectionDisabled:)(1, v48, (uint64_t)&v86 - v64);
  LODWORD(a2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v65, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v65, v61);
  v66 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
  v67 = a1;
  v66(v59, a1, v48);
  if ((_DWORD)a2 == 1)
  {
    v68 = *(void (**)(char *, uint64_t))(v49 + 8);
    v68(v59, v48);
LABEL_7:
    v79 = a1;
    goto LABEL_8;
  }
  v69 = v59[*(int *)(v48 + 48)];
  v68 = *(void (**)(char *, uint64_t))(v49 + 8);
  v68(v59, v48);
  if ((v69 & 1) == 0)
    goto LABEL_7;
  v70 = v110;
  v71 = v111;
  v72 = v87;
  (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v87, *MEMORY[0x1E0DC1C10], v110);
  v73 = type metadata accessor for UICellAccessory.LayoutDimension();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v109, 1, 1, v73);
  v74 = v89;
  UICellAccessory.MultiselectOptions.init(isHidden:reservedLayoutWidth:tintColor:backgroundColor:)();
  v75 = v88;
  static UICellAccessory.multiselect(displayed:options:)();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v74, v91);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v70);
  v76 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v78 = v76[2];
  v77 = v76[3];
  v79 = v67;
  if (v78 >= v77 >> 1)
    v76 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1, v76);
  v80 = v107;
  v76[2] = v78 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v80 + 32))((unint64_t)v76+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(_QWORD *)(v80 + 72) * v78, v75, v108);
LABEL_8:
  v81 = _RowVisitationContext.canDelete.getter(v48);
  v66(v55, v79, v48);
  v82 = v106;
  if (v81)
  {
    v68(v55, v48);
    goto LABEL_12;
  }
  v83 = v55[*(int *)(v48 + 52)];
  v66(v106, (uint64_t)v55, v48);
  if (v83)
  {
    v84 = _RowVisitationContext.hasSwipeActions.getter();
    v68(v82, v48);
    v68(v55, v48);
    if ((v84 & 1) != 0)
LABEL_12:
      __asm { BR              X11 }
  }
  else
  {
    v68(v82, v48);
    v68(v55, v48);
  }
  if (_RowVisitationContext.canMove.getter())
    __asm { BR              X11 }
  return UICollectionViewListCell.accessories.setter();
}

uint64_t ListCollectionViewCellBase.avoidOffScreenRendering.getter()
{
  uint64_t result;

  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0)
    return 0;
  result = ListCollectionViewCellBase.backgroundHost.getter();
  if (result)
  {

    return 1;
  }
  return result;
}

void AnyListCollectionViewCell.explicitAlignment(of:at:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

UIContextMenuConfiguration_optional __swiftcall AnyListCollectionViewCell.outermostContextMenuConfiguration()()
{
  objc_class *v0;
  Swift::Bool v1;
  UIContextMenuConfiguration_optional result;

  v0 = (objc_class *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  result.value.super.isa = v0;
  result.is_nil = v1;
  return result;
}

void AnyListCollectionViewCell.outermostContextMenuResponder.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListCollectionViewCell.swipeActions.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListCollectionViewCell.identifiedViews.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListCollectionViewCell.responderNode.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListCollectionViewCell.secondaryNavigationBehavior.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListCollectionViewCell.dragBridge.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id AnyListCollectionViewCell.__deallocating_deinit(uint64_t a1)
{
  return ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.__deallocating_deinit(a1, type metadata accessor for AnyListCollectionViewCell);
}

id @objc ListCollectionViewCell.init(coder:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for ListCollectionViewCell();
  return objc_msgSendSuper2(&v5, sel_initWithCoder_, a3);
}

id ListCollectionViewCell.__deallocating_deinit()
{
  return ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.__deallocating_deinit(0, type metadata accessor for ListCollectionViewCell);
}

uint64_t ObjC metadata update function for ListCollectionViewCell()
{
  return type metadata accessor for ListCollectionViewCell();
}

id @objc ListCollectionViewCellBase.focusEffect.getter(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = ListCollectionViewCellBase.focusEffect.getter();

  return v2;
}

id ListCollectionViewCellBase.focusEffect.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  objc_class *v6;
  objc_super v7;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  v3 = (void *)ListCollectionViewCellBase.backgroundHost.getter();
  if (v3)
  {

    if (one-time initialization token for suppressFocusHaloWithBackground != -1)
      swift_once();
    if (suppressFocusHaloWithBackground)
      return 0;
  }
  v6 = (objc_class *)type metadata accessor for ListCollectionViewCellBase(0, *(_QWORD *)((v2 & v1) + 0xA8), *(_QWORD *)((v2 & v1) + 0xB0), v4);
  v7.receiver = v0;
  v7.super_class = v6;
  return objc_msgSendSuper2(&v7, sel_focusEffect);
}

void @objc ListCollectionViewCellBase.focusEffect.setter(void *a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v9 = a3;
  v5 = a1;
  specialized ListCollectionViewCellBase.focusEffect.setter((uint64_t)a3, v6, v7, v8);

}

id ListCollectionViewCellBase.init(coder:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  objc_class *v11;
  id v12;
  objc_super v14;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  *((_BYTE *)v1 + direct field offset for ListCollectionViewCellBase.wasEditing) = 0;
  *((_BYTE *)v1 + direct field offset for ListCollectionViewCellBase.wasSwiped) = 0;
  v4 = (char *)v1 + direct field offset for ListCollectionViewCellBase.cellHostWidth;
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = (char *)v1 + direct field offset for ListCollectionViewCellBase.lastConfiguration;
  v6 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *((_BYTE *)v1 + direct field offset for ListCollectionViewCellBase.shouldHugContent) = 0;
  v7 = (_QWORD *)((char *)v1 + direct field offset for ListCollectionViewCellBase.viewListID);
  *v7 = 0;
  v7[1] = 0;
  v8 = (char *)v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior;
  v8[64] = 0;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *(_OWORD *)v8 = xmmword_187BF9840;
  *((_OWORD *)v8 + 1) = 0u;
  v9 = (_QWORD *)((char *)v1 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior);
  *v9 = 1;
  v9[1] = 0;
  v9[2] = 0;
  *(_DWORD *)((char *)v1 + direct field offset for ListCollectionViewCellBase.popUpButtonSeed) = -1;
  *(_QWORD *)((char *)v1 + direct field offset for ListCollectionViewCellBase.host) = 0;
  v11 = (objc_class *)type metadata accessor for ListCollectionViewCellBase(0, *(_QWORD *)(v3 + 168), *(_QWORD *)(v3 + 176), v10);
  v14.receiver = v1;
  v14.super_class = v11;
  v12 = objc_msgSendSuper2(&v14, sel_initWithCoder_, a1);

  return v12;
}

id @objc ListCollectionViewCellBase.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return ListCollectionViewCellBase.init(coder:)(a3);
}

void ListCollectionViewCellBase.updateViewGraphForDisplay(_:sizeThatFitsCallback:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *v4;
  v9 = *MEMORY[0x1E0DEEDD8];
  if (one-time initialization token for isEnabledInProcessEnv != -1)
    swift_once();
  if ((static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv & 1) == 0)
  {
    v10 = type metadata accessor for ListCollectionViewCellBase(0, *(_QWORD *)((v9 & v8) + 0xA8), *(_QWORD *)((v9 & v8) + 0xB0), a4);
    v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListCollectionViewCellBase<A>, v10);
    PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(a1 & 1, a2, a3, v10, v11);
  }
}

uint64_t @objc ListCollectionViewCellBase.canBecomeFocused.getter(void *a1)
{
  id v1;
  unsigned __int8 v2;

  v1 = a1;
  v2 = ListCollectionViewCellBase.canBecomeFocused.getter();

  return v2 & 1;
}

id ListCollectionViewCellBase.canBecomeFocused.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSString *v3;
  Class v4;
  uint64_t v5;
  objc_class *v7;
  objc_super v8;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  v3 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
  v4 = NSClassFromString(v3);

  if (v4
    && objc_msgSend(v0, sel_respondsToSelector_, sel__accessibilityIsFKARunningForFocusItem)
    && (objc_msgSend(v0, sel__accessibilityIsFKARunningForFocusItem) & 1) != 0)
  {
    return 0;
  }
  v7 = (objc_class *)type metadata accessor for ListCollectionViewCellBase(0, *(_QWORD *)((v2 & v1) + 0xA8), *(_QWORD *)((v2 & v1) + 0xB0), v5);
  v8.receiver = v0;
  v8.super_class = v7;
  return objc_msgSendSuper2(&v8, sel_canBecomeFocused);
}

uint64_t @objc ListCollectionViewCellBase.isAccessibilityElement.getter()
{
  return 0;
}

id @objc ListCollectionViewCellBase.editMenuInteraction(_:menuFor:suggestedActions:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  id v8;
  UIEditMenuConfiguration *v9;
  id v10;
  UIMenu_optional *v11;
  void *v12;
  void *v13;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = a3;
  v9 = a4;
  v10 = a1;
  ListCollectionViewCellBase.editMenuInteraction(_:menuFor:suggestedActions:)(v11, (UIEditMenuInteraction)v8, v9, (Swift::OpaquePointer)v7);
  v13 = v12;

  swift_bridgeObjectRelease();
  return v13;
}

double @objc ListCollectionViewCellBase.editMenuInteraction(_:targetRectFor:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  UIEditMenuConfiguration *v7;
  id v8;
  double v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  *(_QWORD *)&v9 = (unint64_t)ListCollectionViewCellBase.editMenuInteraction(_:targetRectFor:)((UIEditMenuInteraction)v6, v7);

  return v9;
}

void @objc ListCollectionViewCellBase.editMenuInteraction(_:willPresentMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  @objc ListCollectionViewCellBase.editMenuInteraction(_:willPresentMenuFor:animator:)(a1, a2, a3, a4, a5, (void (*)(id, id, uint64_t))ListCollectionViewCellBase.editMenuInteraction(_:willPresentMenuFor:animator:));
}

void @objc ListCollectionViewCellBase.editMenuInteraction(_:willDismissMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  @objc ListCollectionViewCellBase.editMenuInteraction(_:willPresentMenuFor:animator:)(a1, a2, a3, a4, a5, (void (*)(id, id, uint64_t))ListCollectionViewCellBase.editMenuInteraction(_:willDismissMenuFor:animator:));
}

void @objc ListCollectionViewCellBase.editMenuInteraction(_:willPresentMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, id, uint64_t))
{
  id v10;
  id v11;
  id v12;

  v10 = a3;
  v11 = a4;
  swift_unknownObjectRetain();
  v12 = a1;
  a6(v10, v11, a5);

  swift_unknownObjectRelease();
}

uint64_t closure #1 in ListCollectionViewCellBase.hostingView<A>(_:didChangePlatformItemList:)(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t ObjectType;

  v4 = *a1;
  v5 = *MEMORY[0x1E0DEEDD8];
  v6 = (char *)a1 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_selectionDelegate;
  result = MEMORY[0x18D760234]((char *)a1 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_selectionDelegate);
  if (result)
  {
    v8 = *((_QWORD *)v6 + 1);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t *, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v8 + 8))(a1, a2 & 1, *(_QWORD *)((v5 & v4) + 0xA8), *(_QWORD *)((v5 & v4) + 0xB0), ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t EnvironmentValues.prominentListContentConfiguration.setter(uint64_t a1)
{
  return EnvironmentValues.listContentConfiguration.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentListContentConfigurationKey>, (uint64_t)&type metadata for ProminentListContentConfigurationKey, (uint64_t)&protocol witness table for ProminentListContentConfigurationKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<ProminentListContentConfigurationKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.listContentConfiguration.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v16;

  type metadata accessor for UIListContentConfiguration?(0);
  MEMORY[0x1E0C80A78](v11, v12);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(a5, a2, a3, a4);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
}

Swift::Void __swiftcall ListCollectionViewCellBase.removeFromSuperview()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  objc_super v6;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xA8);
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xB0);
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for ListCollectionViewCellBase(0, v2, v3, v0);
  objc_msgSendSuper2(&v6, sel_removeFromSuperview);
  v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v2;
  v5[3] = v3;
  v5[4] = v4;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
}

void closure #1 in ListCollectionViewCellBase.removeFromSuperview()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(void **)(v2 + direct field offset for ListCollectionViewCellBase.host);
    if (v4)
    {
      v5 = v4;

      _UIHostingView.updateRemovedState()();
      v3 = v5;
    }

  }
}

void @objc ListCollectionViewCellBase.removeFromSuperview()(void *a1)
{
  id v1;

  v1 = a1;
  ListCollectionViewCellBase.removeFromSuperview()();

}

uint64_t ListCollectionViewCellBase.canUpdateSwipeActionPresentationBinding.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[224];
  uint64_t v30[28];
  _BYTE v31[112];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[28];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  ListCollectionViewCellBase.swipeActions.getter((uint64_t)v31);
  outlined init with take of SwipeActions.Value?((uint64_t)v31, (uint64_t)v45);
  outlined init with take of SwipeActions.Value?((uint64_t)v45, (uint64_t)&v46);
  if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)&v46) != 1)
  {
    v0 = v49;
    v1 = v50;
    v2 = v51;
    v3 = v52;
    v4 = v55;
    v5 = v56;
    v6 = v57;
    v7 = v58;
    v20 = v54;
    v21 = v53;
    v25 = v47;
    v27 = v46;
    v23 = v48;
    outlined copy of SwipeActions.Configuration?(v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58);
    outlined release of SwipeActions.Value?(v45);
    if (v0)
    {
      outlined copy of Binding<NavigationSplitViewColumn>?(v1, v2);
      outlined consume of SwipeActions.Configuration?(v27, v25, v23, v0, v1, v2, v3, v21, v20, v4, v5, v6, v7);
      if (v2)
      {
        v8 = v1;
        v9 = v2;
LABEL_9:
        outlined consume of Binding<NavigationSplitViewColumn>?(v8, v9);
        return 1;
      }
    }
  }
  ListCollectionViewCellBase.swipeActions.getter((uint64_t)v29);
  outlined init with take of SwipeActions.Value?((uint64_t)v29, (uint64_t)v30);
  outlined init with take of SwipeActions.Value?((uint64_t)v30, (uint64_t)v31);
  if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)v31) != 1)
  {
    v10 = v35;
    v11 = v36;
    v12 = v37;
    v13 = v38;
    v14 = v40;
    v15 = v41;
    v16 = v42;
    v17 = v43;
    v18 = v44;
    v26 = v33;
    v28 = v32;
    v22 = v39;
    v24 = v34;
    outlined copy of SwipeActions.Configuration?(v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
    outlined release of SwipeActions.Value?(v30);
    if (v10)
    {
      outlined copy of Binding<NavigationSplitViewColumn>?(v11, v12);
      outlined consume of SwipeActions.Configuration?(v28, v26, v24, v10, v11, v12, v13, v22, v14, v15, v16, v17, v18);
      if (v12)
      {
        v8 = v11;
        v9 = v12;
        goto LABEL_9;
      }
    }
  }
  return 0;
}

uint64_t ListCollectionViewCellBase.updateSwipeActionPresentationBinding()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[224];
  uint64_t v29[28];
  _BYTE v30[112];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[224];
  uint64_t v45[28];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  ListCollectionViewCellBase.swipeActions.getter((uint64_t)v44);
  outlined init with take of SwipeActions.Value?((uint64_t)v44, (uint64_t)v45);
  outlined init with take of SwipeActions.Value?((uint64_t)v45, (uint64_t)&v46);
  if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)&v46) != 1)
  {
    v0 = v49;
    v1 = v50;
    v2 = v51;
    v3 = v52;
    v4 = v55;
    v5 = v56;
    v6 = v57;
    v7 = v58;
    v18 = v54;
    v19 = v53;
    v23 = v47;
    v25 = v46;
    v21 = v48;
    outlined copy of SwipeActions.Configuration?(v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58);
    outlined release of SwipeActions.Value?(v45);
    if (v0)
    {
      outlined copy of Binding<NavigationSplitViewColumn>?(v1, v2);
      outlined consume of SwipeActions.Configuration?(v25, v23, v21, v0, v1, v2, v3, v19, v18, v4, v5, v6, v7);
      if (v2)
      {
        v30[0] = *(_BYTE *)(v27 + direct field offset for ListCollectionViewCellBase.wasSwiped);
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        swift_release();
      }
    }
  }
  ListCollectionViewCellBase.swipeActions.getter((uint64_t)v28);
  outlined init with take of SwipeActions.Value?((uint64_t)v28, (uint64_t)v29);
  outlined init with take of SwipeActions.Value?((uint64_t)v29, (uint64_t)v30);
  result = _s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)v30);
  if ((_DWORD)result != 1)
  {
    v9 = v34;
    v11 = v35;
    v10 = v36;
    v12 = v37;
    v13 = v39;
    v14 = v40;
    v15 = v41;
    v16 = v42;
    v17 = v43;
    v24 = v32;
    v26 = v31;
    v20 = v38;
    v22 = v33;
    outlined copy of SwipeActions.Configuration?(v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43);
    result = (uint64_t)outlined release of SwipeActions.Value?(v29);
    if (v9)
    {
      outlined copy of Binding<NavigationSplitViewColumn>?(v11, v10);
      result = outlined consume of SwipeActions.Configuration?(v26, v24, v22, v9, v11, v10, v12, v20, v13, v14, v15, v16, v17);
      if (v10)
      {
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        return swift_release();
      }
    }
  }
  return result;
}

Swift::Void __swiftcall ListCollectionViewCellBase.didUpdateFocus(in:with:)(UIFocusUpdateContext in, UIFocusAnimationCoordinator with)
{
  uint64_t v2;
  _QWORD *v3;
  objc_class *v6;
  void *v7;
  objc_super v8;

  v6 = (objc_class *)type metadata accessor for ListCollectionViewCellBase(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0xA8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0xB0), v2);
  v8.receiver = v3;
  v8.super_class = v6;
  objc_msgSendSuper2(&v8, sel_didUpdateFocusInContext_withAnimationCoordinator_, in.super.isa, with.super.isa);
  v7 = *(void **)((char *)v3 + direct field offset for ListCollectionViewCellBase.host);
  if (v7)
    objc_msgSend(v7, sel_didUpdateFocusInContext_withAnimationCoordinator_, in.super.isa, with.super.isa);
}

void @objc ListCollectionViewCellBase.didUpdateFocus(in:with:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  ListCollectionViewCellBase.didUpdateFocus(in:with:)((UIFocusUpdateContext)v6, (UIFocusAnimationCoordinator)v7);

}

Swift::Void __swiftcall ListCollectionViewCellBase.layoutSubviews()()
{
  uint64_t v0;
  _QWORD *v1;
  objc_class *v2;
  uint64_t v3;
  double Width;
  double *v5;
  BOOL *v6;
  char *v7;
  uint64_t v8;
  uint64_t ObjectType;
  objc_super v10;
  CGRect v11;

  v2 = (objc_class *)type metadata accessor for ListCollectionViewCellBase(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xA8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xB0), v0);
  v10.receiver = v1;
  v10.super_class = v2;
  objc_msgSendSuper2(&v10, sel_layoutSubviews);
  if (one-time initialization token for isEnabledInProcessEnv != -1)
    swift_once();
  if ((static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv & 1) == 0)
  {
    v3 = *(_QWORD *)((char *)v1 + direct field offset for ListCollectionViewCellBase.host);
    if (v3)
    {
      objc_msgSend(*(id *)((char *)v1 + direct field offset for ListCollectionViewCellBase.host), sel_bounds);
      Width = CGRectGetWidth(v11);
      v5 = (double *)((char *)v1 + direct field offset for ListCollectionViewCellBase.cellHostWidth);
      v6 = (BOOL *)v1 + direct field offset for ListCollectionViewCellBase.cellHostWidth + 8;
      if (!*v6 && Width == *v5)
        return;
    }
    else
    {
      v5 = (double *)((char *)v1 + direct field offset for ListCollectionViewCellBase.cellHostWidth);
      if ((*((_BYTE *)v1 + direct field offset for ListCollectionViewCellBase.cellHostWidth + 8) & 1) != 0)
        return;
      v6 = (BOOL *)(v5 + 1);
      Width = 0.0;
    }
    v7 = (char *)v1 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_insetsDelegate;
    if (MEMORY[0x18D760234]((char *)v1 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_insetsDelegate))
    {
      v8 = *((_QWORD *)v7 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v8 + 8))(v1, ObjectType, v8);
      swift_unknownObjectRelease();
    }
    *v5 = Width;
    *v6 = v3 == 0;
  }
}

void @objc ListCollectionViewCellBase.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  ListCollectionViewCellBase.layoutSubviews()();

}

uint64_t @objc ListCollectionViewCellBase._disableRasterizeInAnimations()(void *a1)
{
  id v1;
  char v2;

  v1 = a1;
  v2 = ListCollectionViewCellBase._disableRasterizeInAnimations()((SEL *)&selRef__disableRasterizeInAnimations);

  return v2 & 1;
}

uint64_t ListCollectionViewCellBase._disableRasterizeInAnimations()(SEL *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *v7;
  objc_super v8;

  v3 = *v1;
  v4 = *MEMORY[0x1E0DEEDD8];
  if ((ListCollectionViewCellBase.avoidOffScreenRendering.getter() & 1) != 0)
    return 1;
  v7 = (objc_class *)type metadata accessor for ListCollectionViewCellBase(0, *(_QWORD *)((v4 & v3) + 0xA8), *(_QWORD *)((v4 & v3) + 0xB0), v5);
  v8.receiver = v1;
  v8.super_class = v7;
  return (uint64_t)objc_msgSendSuper2(&v8, *a1);
}

uint64_t @objc ListCollectionViewCellBase._disableGroupOpacityInAnimations()(void *a1)
{
  id v1;
  char v2;

  v1 = a1;
  v2 = ListCollectionViewCellBase._disableRasterizeInAnimations()((SEL *)&selRef__disableGroupOpacityInAnimations);

  return v2 & 1;
}

void ListCollectionViewCellBase.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0 + direct field offset for ListCollectionViewCellBase.lastConfiguration, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  swift_bridgeObjectRelease();
  LOBYTE(v1) = *(_BYTE *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 64);
  outlined consume of PlatformItemList.Item.SelectionBehavior?(*(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior), *(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 8), *(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 16), *(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 24), *(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 32), *(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 40), *(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 48), *(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 56), v1, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of PlatformItemList.Item.SecondaryNavigationBehavior?(*(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior), *(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior + 8));

}

id ListCollectionViewCellBase.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for ListCollectionViewCellBase(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xA8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xB0), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

void @objc ListCollectionViewCellBase.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + direct field offset for ListCollectionViewCellBase.lastConfiguration, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  swift_bridgeObjectRelease();
  LOBYTE(v2) = *(_BYTE *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 64);
  outlined consume of PlatformItemList.Item.SelectionBehavior?(*(_QWORD *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior), *(_QWORD *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 8), *(_QWORD *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 16), *(_QWORD *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 24), *(_QWORD *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 32), *(_QWORD *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 40), *(_QWORD *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 48), *(_QWORD *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 56), v2, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of PlatformItemList.Item.SecondaryNavigationBehavior?(*(_QWORD *)(a1 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior), *(_QWORD *)(a1 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior + 8));

}

uint64_t one-time initialization function for suppressFocusHaloWithBackground()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of suppressFocusHaloWithBackground();
  suppressFocusHaloWithBackground = result & 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of suppressFocusHaloWithBackground()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  if (v2 == 0xD000000000000011 && v4 == 0x8000000187BE5F40)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListContentConfigurationKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListContentConfigurationKey(&one-time initialization token for defaultValue, (uint64_t)static ListContentConfigurationKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ProminentListContentConfigurationKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListContentConfigurationKey(one-time initialization token for defaultValue, (uint64_t)static ProminentListContentConfigurationKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListContentConfigurationKey@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  type metadata accessor for UIListContentConfiguration?(0);
  v6 = __swift_project_value_buffer(v5, a2);
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v6, a3, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListCellStateKey(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
}

uint64_t specialized ListCollectionViewCellBase.host.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for ListCollectionViewCellBase.host);
}

uint64_t specialized ListCollectionViewCellBase.hostingView<A>(_:didChangePlatformItemList:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const void *v53;
  char *v54;
  _BYTE *v55;
  _BYTE *v56;
  void *v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t ObjectType;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[12];
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t *v78;
  __int128 aBlock;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char v83;

  v71 = a2;
  v72 = a3;
  v69 = *v3;
  v68 = *MEMORY[0x1E0DEEDD8];
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v77 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v76 = &v65[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for DispatchQoS();
  v74 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v73 = &v65[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for PlatformItemList.Item();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = &v65[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  PlatformItemList.containerSelectionBehavior.getter(a1, (uint64_t)&aBlock);
  v16 = v83;
  v78 = v3;
  v17 = (char *)v3 + direct field offset for ListCollectionViewCellBase.selectionBehavior;
  v18 = a1;
  v19 = *(_QWORD *)v17;
  v20 = *((_QWORD *)v17 + 1);
  v21 = *((_QWORD *)v17 + 2);
  v22 = *((_QWORD *)v17 + 3);
  v23 = *((_QWORD *)v17 + 4);
  v24 = *((_QWORD *)v17 + 5);
  v25 = *((_QWORD *)v17 + 6);
  v26 = *((_QWORD *)v17 + 7);
  v27 = v17[64];
  v28 = v80;
  *(_OWORD *)v17 = aBlock;
  *((_OWORD *)v17 + 1) = v28;
  v29 = v82;
  *((_OWORD *)v17 + 2) = v81;
  *((_OWORD *)v17 + 3) = v29;
  v17[64] = v16;
  LOBYTE(v63) = v27;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v19, v20, v21, v22, v23, v24, v25, v26, v63, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  v30 = *(_QWORD *)(a1 + 16);
  if (v30)
  {
    v70 = v5;
    v31 = v18 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v32 = *(_QWORD *)(v12 + 72);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v31, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v33 = v15[69];
      v34 = v15[70];
      v35 = v15[71];
      outlined copy of PlatformItemList.Item.SecondaryNavigationBehavior?(v33, v34);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      if (v33 != 1)
      {
        if (v33)
          goto LABEL_9;
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v34);
      }
      v31 += v32;
      --v30;
    }
    while (v30);
    v34 = 0;
    v35 = 0;
    v33 = 1;
LABEL_9:
    v5 = v70;
    v36 = (char *)v78;
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v33 = 1;
    v36 = (char *)v78;
  }
  v37 = (uint64_t *)&v36[direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior];
  v38 = *(_QWORD *)&v36[direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior];
  v39 = *(_QWORD *)&v36[direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior + 8];
  *v37 = v33;
  v37[1] = v34;
  v37[2] = v35;
  result = outlined consume of PlatformItemList.Item.SecondaryNavigationBehavior?(v38, v39);
  v41 = *((_QWORD *)v17 + 1);
  if (v41 != 1)
  {
    v42 = *(_QWORD *)v17;
    v43 = *((_QWORD *)v17 + 2);
    v44 = *((_QWORD *)v17 + 3);
    v45 = *((_QWORD *)v17 + 4);
    v46 = *((_QWORD *)v17 + 5);
    v47 = *((_QWORD *)v17 + 6);
    v78 = (uint64_t *)*((_QWORD *)v17 + 7);
    v66 = v17[64];
    v48 = v42 & 0xFF00000000;
    outlined copy of AppIntentExecutor?(v41);
    outlined copy of AppIntentExecutor?(v44);
    outlined copy of AppIntentExecutor?(v46);
    objc_msgSend(v36, sel_alpha);
    v70 = v43;
    v67 = v42;
    if (v49 == 0.0)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      v69 = static OS_dispatch_queue.main.getter();
      v50 = swift_allocObject();
      v51 = v72;
      *(_QWORD *)(v50 + 16) = v71;
      *(_QWORD *)(v50 + 24) = v51;
      *(_QWORD *)(v50 + 32) = v36;
      *(_BYTE *)(v50 + 40) = v48 == 0x200000000;
      *(_QWORD *)&v81 = partial apply for closure #1 in ListCollectionViewCellBase.hostingView<A>(_:didChangePlatformItemList:);
      *((_QWORD *)&v81 + 1) = v50;
      *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v80 = thunk for @escaping @callee_guaranteed () -> ();
      *((_QWORD *)&v80 + 1) = &block_descriptor_46;
      v52 = _Block_copy(&aBlock);
      v72 = v47;
      v53 = v52;
      v54 = v36;
      swift_release();
      v55 = v73;
      static DispatchQoS.unspecified.getter();
      *(_QWORD *)&aBlock = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      type metadata accessor for [DispatchWorkItemFlags]();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      v56 = v76;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v57 = (void *)v69;
      MEMORY[0x18D75D930](0, v55, v56, v53);
      _Block_release(v53);

      LOBYTE(v64) = v66;
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v67, v41, v70, v44, v45, v46, v72, (uint64_t)v78, v64, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      (*(void (**)(_BYTE *, uint64_t))(v77 + 8))(v56, v5);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v74 + 8))(v55, v75);
    }
    else
    {
      v58 = v66;
      v59 = &v36[OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_selectionDelegate];
      if (MEMORY[0x18D760234](&v36[OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_selectionDelegate]))
      {
        v72 = v47;
        v60 = v68 & v69;
        v61 = *((_QWORD *)v59 + 1);
        ObjectType = swift_getObjectType();
        (*(void (**)(char *, BOOL, _QWORD, _QWORD, uint64_t, uint64_t))(v61 + 8))(v36, v48 == 0x200000000, *(_QWORD *)(v60 + 168), *(_QWORD *)(v60 + 176), ObjectType, v61);
        swift_unknownObjectRelease();
        LOBYTE(v64) = v58;
        return outlined consume of PlatformItemList.Item.SelectionBehavior?(v67, v41, v70, v44, v45, v46, v72, (uint64_t)v78, v64, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      }
      else
      {
        LOBYTE(v64) = v58;
        return outlined consume of PlatformItemList.Item.SelectionBehavior?(v67, v41, v70, v44, v45, v46, v47, (uint64_t)v78, v64, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      }
    }
  }
  return result;
}

uint64_t outlined copy of PlatformItemList.Item.SecondaryNavigationBehavior?(uint64_t result, uint64_t a2)
{
  if (result != 1)
  {
    swift_retain();
    return outlined copy of AppIntentExecutor?(a2);
  }
  return result;
}

uint64_t sub_18766DF44()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ListCollectionViewCellBase.hostingView<A>(_:didChangePlatformItemList:)()
{
  uint64_t v0;

  return closure #1 in ListCollectionViewCellBase.hostingView<A>(_:didChangePlatformItemList:)(*(uint64_t **)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t specialized ListCollectionViewCellBase.hostingView<A>(_:didChangePreferences:)()
{
  char *v0;
  char *v1;
  _BYTE v5[12];
  int v6;

  v1 = &v0[direct field offset for ListCollectionViewCellBase.popUpButtonSeed];
  swift_beginAccess();
  PreferenceList.subscript.getter();
  if (*(_DWORD *)v1 == -1 || v6 == -1 || *(_DWORD *)v1 != v6)
  {
    *(_DWORD *)v1 = v6;
    closure #1 in ListCollectionViewCellBase.hostingView<A>(_:didChangePreferences:)((uint64_t)v5, v0);
  }
  outlined destroy of Binding<AttributedString>((uint64_t)v5, &lazy cache variable for type metadata for PreferenceList.Value<WeakBox<UIButton>?>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<UIButton>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE28C0]);
  return swift_endAccess();
}

uint64_t sub_18766E054()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ListCollectionViewCellBase.updateConfiguration(using:)()
{
  return ListCollectionViewCellBase.updateSwipeActionPresentationBinding()();
}

uint64_t sub_18766E098()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for SwipeActions.Value?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SwipeActions.Value?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SwipeActions.Value?);
  }
}

uint64_t sub_18766E110()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_18766E134()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ListCollectionViewCellBase.removeFromSuperview()()
{
  uint64_t v0;

  closure #1 in ListCollectionViewCellBase.removeFromSuperview()(*(_QWORD *)(v0 + 32));
}

uint64_t specialized ListCollectionViewCellBase.hostingView<A>(_:willUpdate:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v48;
  id v49;
  double v50;
  double v51;
  double v52;
  double v53;
  id v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  id v61;
  void *v62;
  id v63;
  void (**v64)(_QWORD, _QWORD, _QWORD);
  char *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  char *v69;
  void *v70;
  void *v71;
  id v72;
  void (*v73)(uint64_t *, _QWORD);
  uint64_t v74;
  void (*v75)(uint64_t, char *, uint64_t);
  uint64_t v76;
  void (*v77)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *boxed_opaque_existential_1;
  void (*v82)(uint64_t *, char *, uint64_t);
  char *v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  char *v89;
  id v90;
  void *v91;
  id v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  char *v96;
  char v97;
  char *v98;
  char v99;
  void (*v100)(char *, uint64_t);
  char *v101;
  uint64_t v102;
  char v103;
  char v104;
  char v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  void (*v112)(char *, uint64_t);
  uint64_t (*v113)(char *, uint64_t);
  uint64_t v114;
  id v115;
  char *v116;
  void (*v117)(uint64_t, char *, uint64_t);
  void (*v118)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v119;
  char *v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  id v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  void (**v131)(_QWORD, _QWORD, _QWORD);
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139[5];

  v137 = a1;
  v136 = type metadata accessor for UIListContentConfiguration.TextProperties();
  v131 = *(void (***)(_QWORD, _QWORD, _QWORD))(v136 - 8);
  MEMORY[0x1E0C80A78](v136, v2);
  v134 = (char *)&v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v130 = (char *)&v114 - v6;
  MEMORY[0x1E0C80A78](v7, v8);
  v132 = (char *)&v114 - v9;
  v128 = type metadata accessor for UICellConfigurationState();
  v133 = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v128, v10);
  v126 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v129 = (char *)&v114 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v138 = (char *)&v114 - v17;
  type metadata accessor for UIListContentConfiguration?(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v135 = (uint64_t)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v114 - v23;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v114 - v27;
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v114 - v31;
  v33 = type metadata accessor for UIListContentConfiguration();
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v35);
  v37 = (char *)&v114 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v114 - v40;
  MEMORY[0x1E0C80A78](v42, v43);
  v45 = (char *)&v114 - v44;
  v46 = (uint64_t)v1 + direct field offset for ListCollectionViewCellBase.lastConfiguration;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v46, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33) == 1)
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  v119 = v28;
  v120 = v37;
  v125 = v24;
  v127 = v41;
  v48 = v132;
  v121 = v34;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v45, v32, v33);
  v49 = objc_msgSend(v1, sel__bridgedConfigurationState);
  static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();

  UIListContentConfiguration.directionalLayoutMargins.getter();
  v51 = v50;
  v53 = v52;
  v54 = objc_msgSend(v1, sel_contentView);
  objc_msgSend(v54, sel_directionalLayoutMargins);
  v56 = v55;
  v58 = v57;

  if (v56 > v51)
    v59 = v56;
  else
    v59 = v51;
  if (v58 > v53)
    v60 = v58;
  else
    v60 = v53;
  if (v51 != v59 || v53 != v60)
    UIListContentConfiguration.directionalLayoutMargins.setter();
  UIListContentConfiguration.textProperties.getter();
  v61 = (id)UIListContentConfiguration.TextProperties.font.getter();
  v62 = (void *)UICellConfigurationState.traitCollection.getter();
  v63 = objc_msgSend(v61, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v62);

  v64 = v131;
  v65 = v130;
  v66 = v136;
  if (v63 && v61 != v63)
  {
    v67 = v63;
    UIListContentConfiguration.TextProperties.font.setter();
    ((void (**)(char *, char *, uint64_t))v64)[2](v65, v48, v66);
    UIListContentConfiguration.textProperties.setter();
  }
  v123 = v63;
  UIListContentConfiguration.textProperties.getter();
  v68 = UIListContentConfiguration.TextProperties.color.getter();
  v69 = v65;
  v70 = (void *)v68;
  v122 = (void (*)(char *, uint64_t))v64[1];
  v122(v69, v66);
  v71 = (void *)UICellConfigurationState.traitCollection.getter();
  v72 = objc_msgSend(v70, sel_resolvedColorWithTraitCollection_, v71);

  v73 = (void (*)(uint64_t *, _QWORD))UIListContentConfiguration.textProperties.modify();
  UIListContentConfiguration.TextProperties.color.setter();
  v73(v139, 0);
  v74 = v121;
  v75 = *(void (**)(uint64_t, char *, uint64_t))(v121 + 16);
  v76 = (uint64_t)v119;
  v116 = v45;
  v117 = v75;
  v75((uint64_t)v119, v45, v33);
  v77 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56);
  v124 = v33;
  v118 = v77;
  v77(v76, 0, 1, v33);
  v78 = v137;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v76, (uint64_t)v125, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListContentConfigurationKey>, (uint64_t)&type metadata for ListContentConfigurationKey, (uint64_t)&protocol witness table for ListContentConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListContentConfigurationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListContentConfigurationKey>, (uint64_t)&type metadata for ListContentConfigurationKey, (uint64_t)&protocol witness table for ListContentConfigurationKey);
  swift_retain();
  PropertyList.subscript.setter();
  v79 = v128;
  if (*(_QWORD *)(v78 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  v115 = v61;
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v76, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  v80 = v120;
  static UIListContentConfiguration.prominentInsetGroupedHeader()();
  v139[3] = v79;
  v139[4] = MEMORY[0x1E0DC2018];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v139);
  v82 = *(void (**)(uint64_t *, char *, uint64_t))(v133 + 16);
  v82(boxed_opaque_existential_1, v138, v79);
  v83 = v127;
  UIListContentConfiguration.updated(for:)();
  v84 = v124;
  v121 = *(_QWORD *)(v74 + 8);
  ((void (*)(char *, uint64_t))v121)(v80, v124);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
  UIListContentConfiguration.directionalLayoutMargins.getter();
  v87 = v85;
  v88 = v86;
  if (v56 > v85)
    v85 = v56;
  if (v58 > v86)
    v86 = v58;
  if (v87 != v85 || v88 != v86)
    UIListContentConfiguration.directionalLayoutMargins.setter();
  v89 = v134;
  UIListContentConfiguration.textProperties.getter();
  v90 = (id)UIListContentConfiguration.TextProperties.font.getter();
  v91 = (void *)UICellConfigurationState.traitCollection.getter();
  v92 = objc_msgSend(v90, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v91);

  v93 = v137;
  if (v92 && v90 != v92)
  {
    v94 = v92;
    UIListContentConfiguration.TextProperties.font.setter();
    ((void (**)(char *, char *, uint64_t))v131)[2](v130, v89, v136);
    UIListContentConfiguration.textProperties.setter();
  }
  v131 = (void (**)(_QWORD, _QWORD, _QWORD))v90;
  v95 = v135;
  v117(v135, v83, v84);
  v118(v95, 0, 1, v84);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v95, (uint64_t)v125, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentListContentConfigurationKey>, (uint64_t)&type metadata for ProminentListContentConfigurationKey, (uint64_t)&protocol witness table for ProminentListContentConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ProminentListContentConfigurationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentListContentConfigurationKey>, (uint64_t)&type metadata for ProminentListContentConfigurationKey, (uint64_t)&protocol witness table for ProminentListContentConfigurationKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v93 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v135, (uint64_t (*)(_QWORD))type metadata accessor for UIListContentConfiguration?);
  v96 = v138;
  v97 = UICellConfigurationState.isSelected.getter();
  v98 = v129;
  v82((uint64_t *)v129, v96, v79);
  if ((v97 & 1) == 0)
  {
    v100 = *(void (**)(char *, uint64_t))(v133 + 8);
    v100(v98, v79);
    v101 = v126;
    goto LABEL_33;
  }
  v99 = UICellConfigurationState.isFocused.getter();
  v100 = *(void (**)(char *, uint64_t))(v133 + 8);
  v100(v98, v79);
  v101 = v126;
  if ((v99 & 1) == 0)
  {
LABEL_33:
    static BackgroundProminence.standard.getter();
    goto LABEL_34;
  }
  static BackgroundProminence.increased.getter();
LABEL_34:
  v102 = v137;
  EnvironmentValues.backgroundProminence.setter();
  v82((uint64_t *)v101, v96, v79);
  v103 = UICellConfigurationState.isEditing.getter();
  v104 = UICellConfigurationState.isSelected.getter();
  v105 = UICellConfigurationState.isPinned.getter();
  v100(v101, v79);
  LOBYTE(v139[0]) = v103 & 1;
  BYTE1(v139[0]) = v104 & 1;
  BYTE2(v139[0]) = v105 & 1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListCellStateKey>, (uint64_t)&unk_1E1ABF7B8, (uint64_t)&protocol witness table for ListCellStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListCellStateKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListCellStateKey>, (uint64_t)&unk_1E1ABF7B8, (uint64_t)&protocol witness table for ListCellStateKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v102 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

    swift_release();
    swift_release();
  }
  else
  {

  }
  v106 = v136;
  v107 = v134;
  v108 = v138;
  v109 = v124;
  v110 = v116;
  v111 = v132;
  swift_release();

  v112 = v122;
  v122(v107, v106);
  v113 = (uint64_t (*)(char *, uint64_t))v121;
  ((void (*)(char *, uint64_t))v121)(v127, v109);
  v112(v111, v106);
  v100(v108, v79);
  return v113(v110, v109);
}

id specialized ListCollectionViewCellBase.focusEffect.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  objc_super v8;

  v6 = (objc_class *)type metadata accessor for ListCollectionViewCellBase(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xA8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xB0), a4);
  v8.receiver = v4;
  v8.super_class = v6;
  return objc_msgSendSuper2(&v8, sel_setFocusEffect_, a1);
}

void *type metadata accessor for ListCellStateKey()
{
  return &unk_1E1ABF7B8;
}

ValueMetadata *type metadata accessor for ListContentConfigurationKey()
{
  return &type metadata for ListContentConfigurationKey;
}

ValueMetadata *type metadata accessor for ProminentListContentConfigurationKey()
{
  return &type metadata for ProminentListContentConfigurationKey;
}

void __swiftcall InsetTableStyle.init(alternatesRowBackgrounds:)(Swift::Bool alternatesRowBackgrounds)
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t InsetTableStyle.makeBody(configuration:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[64];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a1, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[14];
  v13 = v4;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, a2, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>);
  outlined copy of Binding<[SwiftUIAnySortComparator]>?(v4, v5);
  outlined copy of Binding<AnyTableColumnCustomization>?(v7, v8);
  return outlined destroy of CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>((uint64_t)v12);
}

void type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?)
  {
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?);
  }
}

uint64_t type metadata accessor for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>;
  if (!lazy cache variable for type metadata for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>)
    type metadata accessor for CollectionViewTableRoot();
  return result;
}

uint64_t outlined destroy of CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for TableStyle.Body : View in InsetTableStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for TableStyle.makeBody(configuration:) in conformance InsetTableStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[64];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a1, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[14];
  v13 = v4;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = v10;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, a2, (uint64_t (*)(_QWORD))type metadata accessor for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>);
  outlined copy of Binding<[SwiftUIAnySortComparator]>?(v4, v5);
  outlined copy of Binding<AnyTableColumnCustomization>?(v7, v8);
  return outlined destroy of CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>((uint64_t)v12);
}

ValueMetadata *type metadata accessor for InsetTableStyle()
{
  return &type metadata for InsetTableStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier>();
    v2[0] = &protocol witness table for CollectionViewTableRoot<A, B, C>;
    v2[1] = &protocol witness table for TableShowsFirstColumnOnlyModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier>)
  {
    type metadata accessor for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier>);
  }
}

ValueMetadata *type metadata accessor for TableShowsFirstColumnOnlyModifier()
{
  return &type metadata for TableShowsFirstColumnOnlyModifier;
}

double TableShowsFirstColumnOnlyModifier.Child.value.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *Value;
  uint64_t v5;
  double result;
  __int128 v7;

  Value = (_QWORD *)AGGraphGetValue();
  v5 = Value[1];
  *(_QWORD *)&v7 = *Value;
  *((_QWORD *)&v7 + 1) = v5;
  if ((a1 & 0x100000000) != 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey>, (uint64_t)&unk_1E1AF8490, (uint64_t)&protocol witness table for TableShowsFirstColumnOnlyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    EnvironmentValues.horizontalSizeClass.getter();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey>, (uint64_t)&unk_1E1AF8490, (uint64_t)&protocol witness table for TableShowsFirstColumnOnlyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>();
  }
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t EnvironmentValues.tableShowsFirstColumnOnly.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey>, (uint64_t)&unk_1E1AF8490, (uint64_t)&protocol witness table for TableShowsFirstColumnOnlyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

double protocol witness for Rule.value.getter in conformance TableShowsFirstColumnOnlyModifier.Child@<D0>(_OWORD *a1@<X8>)
{
  unsigned int *v1;
  uint64_t v2;

  v2 = 0x100000000;
  if (!*((_BYTE *)v1 + 4))
    v2 = 0;
  return TableShowsFirstColumnOnlyModifier.Child.value.getter(v2 | *v1, a1);
}

_UNKNOWN **base witness table accessor for ViewModifier in TableShowsFirstColumnOnlyModifier()
{
  return &protocol witness table for TableShowsFirstColumnOnlyModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TableShowsFirstColumnOnlyModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TableShowsFirstColumnOnlyModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance TableShowsFirstColumnOnlyModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey>, (uint64_t)&unk_1E1AF8490, (uint64_t)&protocol witness table for TableShowsFirstColumnOnlyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.tableShowsFirstColumnOnly.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey>, (uint64_t)&unk_1E1AF8490, (uint64_t)&protocol witness table for TableShowsFirstColumnOnlyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey>, (uint64_t)&unk_1E1AF8490, (uint64_t)&protocol witness table for TableShowsFirstColumnOnlyKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t specialized static TableShowsFirstColumnOnlyModifier._makeInputs(modifier:inputs:)()
{
  _GraphInputs.environment.getter();
  _GraphInputs.interfaceIdiom.getter();
  AnyInterfaceIdiom.accepts<A>(_:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

ValueMetadata *type metadata accessor for TableShowsFirstColumnOnlyModifier.Child()
{
  return &type metadata for TableShowsFirstColumnOnlyModifier.Child;
}

void *type metadata accessor for TableShowsFirstColumnOnlyKey()
{
  return &unk_1E1AF8490;
}

void ImmersiveSpaceViewContent.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ImmersiveSpaceViewContent._makeView()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

_UNKNOWN **associated type witness table accessor for ImmersiveSpaceContent.Body : ImmersiveSpaceContent in ImmersiveSpaceViewContent<A>()
{
  return &protocol witness table for Never;
}

uint64_t getEnumTagSinglePayload for ImmersiveSpaceViewContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18766F7FC + 4 * byte_187C4AA10[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ImmersiveSpaceViewContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for ImmersiveSpaceViewContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ImmersiveSpaceViewContent);
}

void ForEachSubviewCollection.init<A>(elementOf:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ValueMetadata *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ValueMetadata *v14;
  ValueMetadata *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  MEMORY[0x1E0C80A78](a1, a2);
  v14 = &type metadata for SubviewsCollection;
  v15 = &type metadata for Subview.ID;
  v16 = a4;
  v17 = lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
  v18 = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  v11 = type metadata accessor for ForEach();
  v13 = a6;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v11, &v13);
  v14 = a5;
  v15 = (ValueMetadata *)v11;
  v16 = a7;
  v17 = v12;
  type metadata accessor for GroupElementsOfContent();
}

void sub_18766FAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;

  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v15 - v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v7 + 16))(v8, v6, v2, v11);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = *(_QWORD *)(v10 - 152);
  v14[3] = v2;
  v14[4] = *(_QWORD *)(v10 - 168);
  v14[5] = v5;
  v14[6] = *(_QWORD *)(v10 - 144);
  v14[7] = v4;
  swift_retain();
  GroupElementsOfContent.init(subviews:content:)(v8, (uint64_t)partial apply for closure #1 in ForEachSubviewCollection.init<A>(elementOf:content:), v2, v9, v5, v3, (uint64_t)v13);
}

uint64_t sub_18766FBE8()
{
  return _ViewList_View.viewID.getter();
}

uint64_t type metadata accessor for ForEachSubviewCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ForEachSubviewCollection);
}

void ForEach.init<A>(elementOf:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ValueMetadata *a5, uint64_t a6, uint64_t a7)
{
  void (**Description)(char *, uint64_t, uint64_t, double);
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  Description = (void (**)(char *, uint64_t, uint64_t, double))a5[-1].Description;
  v15 = MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Description[2](v17, a1, v18, v15);
  swift_retain();
  ForEachSubviewCollection.init<A>(elementOf:content:)((uint64_t)v17, a2, a3, a4, a5, a6, a7);
}

__n128 sub_18766FCC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  *(_QWORD *)(v6 - 144) = swift_getKeyPath();
  v8 = type metadata accessor for ForEachSubviewCollection(0, v3, v4, v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, v8);
  lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  ForEach.init(_:idGenerator:content:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v1);
  v9 = *(_QWORD *)(v6 - 112);
  v10 = *(_QWORD *)(v6 - 88);
  result = *(__n128 *)(v6 - 104);
  *(_OWORD *)v0 = *(_OWORD *)(v6 - 128);
  *(_QWORD *)(v0 + 16) = v9;
  *(__n128 *)(v0 + 24) = result;
  *(_QWORD *)(v0 + 40) = v10;
  return result;
}

uint64_t closure #1 in ForEachSubviewCollection.init<A>(elementOf:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  _BYTE v15[56];

  outlined init with copy of SubviewsCollection(a1, (uint64_t)v15);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = a2;
  v13[7] = a3;
  lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
  lazy protocol witness table accessor for type Subview and conformance Subview();
  swift_retain();
  return ForEach<>.init(_:content:)();
}

void ForEachSubviewCollection.startIndex.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ForEachSubviewCollection.endIndex.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ForEachSubviewCollection.subscript.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void base witness table accessor for BidirectionalCollection in ForEachSubviewCollection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ForEachSubviewCollection<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE40], a1, &v3);
}

void base witness table accessor for Collection in ForEachSubviewCollection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ForEachSubviewCollection<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance ForEachSubviewCollection<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>);
  return RandomAccessCollection<>.index(before:)();
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSubviewCollection<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSubviewCollection<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB508]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance ForEachSubviewCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ForEachSubviewCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ForEachSubviewCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

void base witness table accessor for Sequence in ForEachSubviewCollection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void protocol witness for Collection.startIndex.getter in conformance ForEachSubviewCollection<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for Collection.endIndex.getter in conformance ForEachSubviewCollection<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for Collection.subscript.read in conformance ForEachSubviewCollection<A>(void **a1)
{
  *a1 = malloc(0x28uLL);
  ForEachSubviewCollection.subscript.read();
}

void (*sub_187670234(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

void ForEachSubviewCollection.subscript.read()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for Collection.indices.getter in conformance ForEachSubviewCollection<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance ForEachSubviewCollection<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>);
  return RandomAccessCollection<>.index(after:)();
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance ForEachSubviewCollection<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSubviewCollection<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB500]);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSubviewCollection<A>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>);
  result = a4(&v9, a1, a2, v7, MEMORY[0x1E0DEB458]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ForEachSubviewCollection<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ForEachSubviewCollection<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, a1);
  return Collection._copyToContiguousArray()();
}

uint64_t sub_187670410()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ForEachSubviewCollection.init<A>(elementOf:content:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ForEachSubviewCollection.init<A>(elementOf:content:)(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t __designTimeSelection<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t __designTimeSelection<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  lazy protocol witness table accessor for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier();
  return View._identified<A>(by:)((uint64_t)v8, a4, (uint64_t)&type metadata for __DesignTimeSelectionIdentifier, a5);
}

uint64_t sub_187670514(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _IdentifiedModifier<__DesignTimeSelectionIdentifier>(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _IdentifiedModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _IdentifiedModifier<__DesignTimeSelectionIdentifier>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _IdentifiedModifier<__DesignTimeSelectionIdentifier>)
  {
    v2 = lazy protocol witness table accessor for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier();
    v4 = type metadata accessor for _IdentifiedModifier(a1, (uint64_t)&type metadata for __DesignTimeSelectionIdentifier, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _IdentifiedModifier<__DesignTimeSelectionIdentifier>);
  }
}

ValueMetadata *type metadata accessor for AnyButtonStyleType.Unknown()
{
  return &type metadata for AnyButtonStyleType.Unknown;
}

ValueMetadata *type metadata accessor for EffectiveButtonStyle()
{
  return &type metadata for EffectiveButtonStyle;
}

uint64_t protocol witness for DynamicPropertyBox.update(property:phase:) in conformance EffectiveButtonStyle.Box(_OWORD *a1)
{
  _OWORD *v1;

  *a1 = *v1;
  return 0;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance EffectiveButtonStyle()
{
  return specialized static EffectiveButtonStyle._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in AnyButtonStyleType.Unknown()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance AnyButtonStyleType.Unknown()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static EffectiveButtonStyle._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  lazy protocol witness table accessor for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput();
  PropertyList.subscript.getter();
  lazy protocol witness table accessor for type EffectiveButtonStyle.Box and conformance EffectiveButtonStyle.Box();
  return _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
}

unint64_t lazy protocol witness table accessor for type EffectiveButtonStyle.Box and conformance EffectiveButtonStyle.Box()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EffectiveButtonStyle.Box and conformance EffectiveButtonStyle.Box;
  if (!lazy protocol witness table cache variable for type EffectiveButtonStyle.Box and conformance EffectiveButtonStyle.Box)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EffectiveButtonStyle.Box, &unk_1E1AD2B30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EffectiveButtonStyle.Box and conformance EffectiveButtonStyle.Box);
  }
  return result;
}

void *type metadata accessor for EffectiveButtonStyle.Box()
{
  return &unk_1E1AD2B30;
}

uint64_t sub_18767072C()
{
  return MEMORY[0x1E0CE83E0];
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in EffectiveButtonStyle.Box()
{
  return &protocol witness table for EffectiveButtonStyle;
}

ValueMetadata *type metadata accessor for KitCoreUINamedColorProvider()
{
  return &type metadata for KitCoreUINamedColorProvider;
}

id specialized static KitCoreUINamedColorProvider.effectiveCGColor(cuiColor:in:)(void *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  id result;
  void *v5;
  uint64_t v6;
  void *ObjCClassFromMetadata;
  id v8;
  void *v9;
  id v10;
  id v11;
  objc_class *v12;
  char *v13;
  char *v14;
  char *v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  objc_super v21;

  v2 = *a2;
  v3 = a2[1];
  result = objc_msgSend(a1, sel_systemColorName);
  if (result)
  {
    v5 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v6 = Selector.init(_:)();
    type metadata accessor for UIColor();
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    v8 = 0;
    if (!objc_msgSend(ObjCClassFromMetadata, sel_respondsToSelector_, v6))
      return v8;
    v9 = (void *)objc_opt_self();
    v10 = objc_msgSend(v9, sel_currentTraitCollection);
    v11 = objc_msgSend(v9, sel_currentTraitCollection);
    v12 = (objc_class *)type metadata accessor for EnvironmentWrapper();
    v13 = (char *)objc_allocWithZone(v12);
    v14 = &v13[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
    *(_QWORD *)v14 = v2;
    *((_QWORD *)v14 + 1) = v3;
    *(_DWORD *)&v13[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = 0;
    v15 = &v13[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
    *(_QWORD *)v15 = 0;
    v15[8] = 0;
    *((_DWORD *)v15 + 3) = 0;
    v21.receiver = v13;
    v21.super_class = v12;
    swift_retain();
    swift_retain();
    v16 = objc_msgSendSuper2(&v21, sel_init);
    MEMORY[0x1E0C80A78](v16, v17);
    v18 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();

    objc_msgSend(v9, sel_setCurrentTraitCollection_, v18, v21.receiver, v21.super_class);
    v19 = objc_msgSend(ObjCClassFromMetadata, sel_performSelector_, v6);
    result = ObjCClassFromMetadata;
    if (v19)
    {
      swift_unknownObjectRetain();
      objc_opt_self();
      v20 = (void *)swift_dynamicCastObjCClassUnconditional();
      v8 = objc_msgSend(v20, sel_CGColor);

      objc_msgSend(v9, sel_setCurrentTraitCollection_, v10);
      return v8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PickerStyleConfiguration.$selection.getter()
{
  type metadata accessor for Binding();
  return Binding.projectedValue.getter();
}

uint64_t View.pickerStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PickerStyleWriter(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for PickerStyleWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PickerStyleWriter);
}

uint64_t ResolvedPicker.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;

  v7 = type metadata accessor for PickerStyleConfiguration(0, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a5, a1, v7);
}

void View.pickerStyle<A, B>(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  v6 = type metadata accessor for PickerStyleWriter(0, v4, v5, v4);
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = type metadata accessor for StyleContextAcceptsPredicate();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v8);
  type metadata accessor for StaticIf();
}

uint64_t sub_187670C38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v11 = *(_QWORD *)(a1 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v2 + 16))(v5, *(_QWORD *)(v9 - 200), v7, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3, v5, v7);
  v15 = *(_QWORD *)(v9 - 184);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 16))(v6, *(_QWORD *)(v9 - 176), v4);
  *(_QWORD *)(v9 - 120) = v4;
  *(_QWORD *)(v9 - 112) = v6;
  *(_QWORD *)(v9 - 128) = *(_QWORD *)(v9 - 168);
  ViewModifier.requiring<A>(_:)(v9 - 112, 1, v8, (uint64_t)v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 192) + 8))(v3, v8);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v6, v4);
  MEMORY[0x18D75B4AC](v14, *(_QWORD *)(v9 - 152), a1, *(_QWORD *)(v9 - 144));
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a1);
}

void View.pickerStyle<A, B>(_:if:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x1E0C80A78](a1, a2);
  v5 = type metadata accessor for PickerStyleWriter(0, v3, v4, v2);
  MEMORY[0x1E0C80A78](v5, v6);
  type metadata accessor for StaticIf();
}

uint64_t sub_187670DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v9 = *(_QWORD *)(a1 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v14 - v11;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v3 + 16))(v5, *(_QWORD *)(v7 - 152), v4, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v5, v4);
  StaticIf<>.init<>(_:then:)(v2, v6, (uint64_t)v12);
  MEMORY[0x18D75B4AC](v12, *(_QWORD *)(v7 - 136), a1, *(_QWORD *)(v7 - 128));
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a1);
}

void protocol witness for View.body.getter in conformance PickerStyleConfiguration<A>.Label(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.Label, a1);
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance PickerStyleConfiguration<A>.Content(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.Content, a1);
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance PickerStyleConfiguration<A>.CurrentValueLabel(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.CurrentValueLabel, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t PickerStyleConfiguration.selectedBoundIndices(children:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  v12 = *(_QWORD *)(v2 + *(int *)(a2 + 36));
  v10[1] = *(_OWORD *)(a2 + 16);
  v11 = a1;
  type metadata accessor for Binding();
  v3 = type metadata accessor for Array();
  type metadata accessor for Binding<Int?>();
  v5 = v4;
  swift_bridgeObjectRetain();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v3);
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PickerStyleConfiguration.selectedBoundIndices(children:), (uint64_t)v10, v3, v5, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t PickerStyleConfiguration.init(selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = type metadata accessor for PickerStyleConfiguration(0, a2, a3, a4);
  *(_BYTE *)(a5 + *(int *)(v7 + 40)) = 1;
  type metadata accessor for Binding();
  v8 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v8);
  result = Binding.init<A>(flattening:)();
  *(_QWORD *)(a5 + *(int *)(v7 + 36)) = a1;
  return result;
}

uint64_t _PickerValue.selection.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PickerStyleConfiguration(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), a4);
  type metadata accessor for Binding();
  return Binding.projectedValue.getter();
}

uint64_t _PickerValue.Init1.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for ResolvedPicker(0, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

void _PickerValue.Init1.value.getter(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = type metadata accessor for PickerStyleConfiguration(0, v5, v6, a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v25 - v10;
  v13 = type metadata accessor for ResolvedPicker(0, v5, v6, v12);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v25 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v22, v3 + *(int *)(a1 + 52), v17, v20);
  _PickerValue.Init1.base.getter(a1, v24, (uint64_t)v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v16, v7);
  _PickerValue.init(style:configuration:)((uint64_t)v22, v17, v26);
}

void _PickerValue.init(style:configuration:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for _PickerValue();
}

uint64_t sub_187671300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = v7 + *(int *)(a1 + 52);
  v9 = type metadata accessor for PickerStyleConfiguration(0, v5, v4, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, v6, v9);
}

void _PickerValue.Init2.value.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t Value;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a5;
  v28 = a3;
  v8 = type metadata accessor for PickerStyleConfiguration(0, a2, a4, a3);
  v25 = *(_QWORD *)(v8 - 8);
  v26 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v25 - v10;
  v13 = type metadata accessor for ResolvedPicker(0, a2, a4, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v25 - v16;
  v18 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v22, Value, a1);
  v24 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v24, v13);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v11, v17, v26);
  _PickerValue.init(style:configuration:)((uint64_t)v22, a1, v27);
}

void protocol witness for static Rule.initialValue.getter in conformance _PickerValue<A, B>.Init1()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_1876714E8(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void protocol witness for Rule.value.getter in conformance _PickerValue<A, B>.Init2(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _PickerValue.Init2.value.getter(a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t static PickerStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for PickerStyleWriter(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64))
    closure #1 in static PickerStyleWriter._makeInputs(modifier:inputs:)(1, a3, a4, v6);
  AGGraphCreateOffsetAttribute2();
  type metadata accessor for StyleType(0, a3, a4, v7);
  lazy protocol witness table accessor for type PickerStyleInput and conformance PickerStyleInput();
  return PropertyList.subscript.setter();
}

uint64_t closure #1 in static PickerStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for PickerStyleWriter(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance PickerStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static PickerStyleWriter._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PickerStyleWriter<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PickerStyleWriter<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PickerStyleWriter<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t static ResolvedPicker._makeView(view:inputs:)(int *a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  _DWORD v5[3];

  v1 = *a1;
  lazy protocol witness table accessor for type PickerStyleInput and conformance PickerStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v3)
  {
    v5[0] = v1;
    static ResolvedPicker.makeView<A>(view:style:inputs:)((uint64_t)v5, 0);
  }
  v5[0] = v1;
  return (*(uint64_t (**)(_DWORD *))(v4 + 8))(v5);
}

void static ResolvedPicker.makeView<A>(view:style:inputs:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for _PickerValue.Init1();
}

void sub_187671940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int v23;

  *(_QWORD *)(v16 - 296) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (_DWORD *)((char *)&a9 - v19);
  v21 = **(_DWORD **)(v16 - 224);
  *(_QWORD *)(v16 - 232) = *(_QWORD *)v10;
  *(_DWORD *)(v16 - 236) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v16 - 248) = *(_QWORD *)(v10 + 16);
  *(_DWORD *)(v16 - 224) = *(_DWORD *)(v10 + 80);
  *(_DWORD *)(v16 - 208) = v21;
  type metadata accessor for ResolvedPicker(255, v13, v12, v22);
  type metadata accessor for _GraphValue();
  *(_OWORD *)(v16 - 272) = *(_OWORD *)(v10 + 40);
  *(_OWORD *)(v16 - 288) = *(_OWORD *)(v10 + 56);
  v23 = _GraphValue.value.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16))(v15, *(_QWORD *)(v16 - 256), v11);
  *v20 = v23;
  *(_QWORD *)(v16 - 208) = v11;
  *(_QWORD *)(v16 - 200) = v13;
  *(_QWORD *)(v16 - 192) = v9;
  *(_QWORD *)(v16 - 184) = v12;
  type metadata accessor for _PickerValue.Init1();
}

void sub_187671A34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7 + *(int *)(a1 + 52), v9, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 296) + 16))(v8, v7, v6);
  *(_QWORD *)(v10 - 208) = v2;
  *(_QWORD *)(v10 - 200) = v4;
  *(_QWORD *)(v10 - 192) = v1;
  *(_QWORD *)(v10 - 184) = v3;
  type metadata accessor for _PickerValue();
}

uint64_t sub_187671A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PickerValue<A, B>.Init1, v5);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v7 - 208) = *(_QWORD *)(v7 - 232);
  *(_DWORD *)(v7 - 200) = *(_DWORD *)(v7 - 236);
  *(_QWORD *)(v7 - 192) = *(_QWORD *)(v7 - 248);
  *(_QWORD *)(v7 - 184) = v9;
  *(_QWORD *)(v7 - 176) = v10;
  *(_OWORD *)(v7 - 168) = *(_OWORD *)(v7 - 272);
  *(_OWORD *)(v7 - 152) = *(_OWORD *)(v7 - 288);
  *(_QWORD *)(v7 - 136) = v8;
  *(_DWORD *)(v7 - 128) = *(_DWORD *)(v7 - 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v7 - 124, v7 - 208, v3, v2, v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
}

uint64_t static ResolvedPicker._makeViewList(view:inputs:)(int *a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  _DWORD v5[3];

  v1 = *a1;
  lazy protocol witness table accessor for type PickerStyleInput and conformance PickerStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v3)
  {
    v5[0] = v1;
    static ResolvedPicker.makeViewList<A>(view:style:inputs:)((uint64_t)v5, 0);
  }
  v5[0] = v1;
  return (*(uint64_t (**)(_DWORD *))(v4 + 16))(v5);
}

void static ResolvedPicker.makeViewList<A>(view:style:inputs:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for _PickerValue.Init1();
}

void sub_187671D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int v23;

  *(_QWORD *)(v16 - 296) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (_DWORD *)((char *)&a9 - v19);
  v21 = **(_DWORD **)(v16 - 224);
  *(_QWORD *)(v16 - 264) = *(_QWORD *)v10;
  *(_DWORD *)(v16 - 268) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v16 - 280) = *(_QWORD *)(v10 + 16);
  *(_OWORD *)(v16 - 224) = *(_OWORD *)(v10 + 40);
  *(_QWORD *)(v16 - 232) = *(_QWORD *)(v10 + 56);
  *(_DWORD *)(v16 - 236) = *(_DWORD *)(v10 + 64);
  *(_QWORD *)(v16 - 248) = *(_QWORD *)(v10 + 72);
  *(_DWORD *)(v16 - 252) = *(unsigned __int8 *)(v10 + 80);
  *(_DWORD *)(v16 - 192) = v21;
  type metadata accessor for ResolvedPicker(255, v13, v12, v22);
  type metadata accessor for _GraphValue();
  v23 = _GraphValue.value.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16))(v15, *(_QWORD *)(v16 - 288), v11);
  *v20 = v23;
  *(_QWORD *)(v16 - 192) = v11;
  *(_QWORD *)(v16 - 184) = v13;
  *(_QWORD *)(v16 - 176) = v9;
  *(_QWORD *)(v16 - 168) = v12;
  type metadata accessor for _PickerValue.Init1();
}

void sub_187671E98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7 + *(int *)(a1 + 52), v9, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 296) + 16))(v8, v7, v6);
  *(_QWORD *)(v10 - 192) = v2;
  *(_QWORD *)(v10 - 184) = v4;
  *(_QWORD *)(v10 - 176) = v1;
  *(_QWORD *)(v10 - 168) = v3;
  type metadata accessor for _PickerValue();
}

uint64_t sub_187671EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PickerValue<A, B>.Init1, v5);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v7 - 192) = *(_QWORD *)(v7 - 264);
  *(_DWORD *)(v7 - 184) = *(_DWORD *)(v7 - 268);
  *(_QWORD *)(v7 - 176) = *(_QWORD *)(v7 - 280);
  *(_QWORD *)(v7 - 168) = v8;
  *(_QWORD *)(v7 - 160) = v9;
  *(_OWORD *)(v7 - 152) = *(_OWORD *)(v7 - 224);
  *(_QWORD *)(v7 - 136) = *(_QWORD *)(v7 - 232);
  *(_DWORD *)(v7 - 128) = *(_DWORD *)(v7 - 236);
  *(_QWORD *)(v7 - 120) = *(_QWORD *)(v7 - 248);
  *(_BYTE *)(v7 - 112) = *(_DWORD *)(v7 - 252);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 16))(v7 - 108, v7 - 192, v3, v2, v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedPicker<A>(int *a1)
{
  return static ResolvedPicker._makeView(view:inputs:)(a1);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedPicker<A>(int *a1)
{
  return static ResolvedPicker._makeViewList(view:inputs:)(a1);
}

void protocol witness for View.body.getter in conformance ResolvedPicker<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedPicker<A>, a1);
  specialized PrimitiveView.body.getter();
}

void sub_1876720AC()
{
  type metadata accessor for _PickerValue.Init2();
}

uint64_t sub_1876720C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  int v24;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PickerValue<A, B>.Init2, a1);
  _GraphValue.init<A>(_:)();
  v15 = v7;
  v16 = v8;
  v17 = v5;
  v18 = v9;
  v19 = v10;
  v20 = v14;
  v21 = v13;
  v22 = v11;
  v23 = v6;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 8))(&v24, &v15, v3, v4, v2, v1);
}

void sub_187672218()
{
  type metadata accessor for _PickerValue.Init2();
}

uint64_t sub_187672230(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PickerValue<A, B>.Init2, a1);
  _GraphValue.init<A>(_:)();
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v10;
  v21 = v11;
  v22 = v16;
  v23 = v15;
  v24 = v14;
  v25 = v8;
  v26 = v13;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 16))(v9 - 116, &v17, v3, v4, v2, v1);
}

uint64_t type metadata accessor for PickerStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PickerStyleConfiguration);
}

uint64_t dispatch thunk of static PickerStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of static PickerStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t type metadata completion function for _PickerValue(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = swift_checkMetadataState();
  if (v4 <= 0x3F)
  {
    result = type metadata accessor for PickerStyleConfiguration(319, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), v3);
    if (v5 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _PickerValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, unint64_t, uint64_t);
  unint64_t v25;
  unint64_t v26;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = (v8 | 7) + *(_QWORD *)(v6 + 64);
  v10 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64);
  v11 = v8 | 7 | *(_DWORD *)(v6 + 80);
  if (v11 != 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & ~(v8 | 7)) + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    v15 = ~(v8 | 7);
    v16 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v17 = ((unint64_t)v4 + v9) & v15;
    v18 = ((unint64_t)a2 + v9) & v15;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v19 = (_QWORD *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)((v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    v21 = v8 + 8;
    v22 = ((unint64_t)v19 + v8 + 8) & ~v8;
    v23 = ((unint64_t)v20 + v21) & v16;
    v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v24(v22, v23, v5);
    v25 = ((v17 | 7) + v10) & 0xFFFFFFFFFFFFFFF8;
    v26 = ((v18 | 7) + v10) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for _PickerValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + (v8 | 7)) & ~(v8 | 7);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))((v8 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _PickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + *(_QWORD *)(v6 + 64);
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = ((unint64_t)v13 + v9 + 8) & ~v9;
  v16 = ((unint64_t)v14 + v9 + 8) & ~v9;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v17(v15, v16, v7);
  v18 = *(_QWORD *)(v8 + 64) + ((v9 + 16) & ~v9) + 7;
  v19 = ((unint64_t)v11 + v18) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v12 + v18) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _PickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + v7;
  v12 = (_QWORD *)((v11 + a1) & ~(v10 | 7));
  v13 = (_QWORD *)((v11 + a2) & ~(v10 | 7));
  *v12 = *v13;
  swift_retain();
  swift_release();
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))(((unint64_t)v14 + v10 + 8) & ~v10, ((unint64_t)v15 + v10 + 8) & ~v10, v8);
  v16 = *(_QWORD *)(v9 + 64) + ((v10 + 16) & ~v10) + 7;
  v17 = ((unint64_t)v12 + v16) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v13 + v16) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t initializeWithTake for _PickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + v7;
  v11 = (_QWORD *)((v10 + a1) & ~(v9 | 7));
  v12 = (_QWORD *)((v10 + a2) & ~(v9 | 7));
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v13 + v9 + 8) & ~v9, ((unint64_t)v14 + v9 + 8) & ~v9);
  v15 = *(_QWORD *)(v8 + 64) + ((v9 + 16) & ~v9) + 7;
  v16 = ((unint64_t)v11 + v15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v12 + v15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  return a1;
}

uint64_t assignWithTake for _PickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + v7;
  v12 = (_QWORD *)((v11 + a1) & ~(v10 | 7));
  v13 = (_QWORD *)((v11 + a2) & ~(v10 | 7));
  *v12 = *v13;
  swift_release();
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))(((unint64_t)v14 + v10 + 8) & ~v10, ((unint64_t)v15 + v10 + 8) & ~v10, v8);
  v16 = *(_QWORD *)(v9 + 64) + ((v10 + 16) & ~v10) + 7;
  v17 = ((unint64_t)v12 + v16) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v13 + v16) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PickerValue(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char v15;
  unsigned int v16;
  int v17;
  int v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= v5)
    v9 = *(_DWORD *)(v4 + 84);
  else
    v9 = v8;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = v10 | 7;
  v12 = (v10 | 7) + *(_QWORD *)(v4 + 64);
  v13 = a2 - v9;
  if (a2 <= v9)
    goto LABEL_24;
  v14 = (v12 & ~v11) + ((*(_QWORD *)(v6 + 64) + ((v10 + 16) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v16 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v16))
    {
      v17 = *(_DWORD *)&a1[v14];
      if (!v17)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v16 > 0xFF)
    {
      v17 = *(unsigned __int16 *)&a1[v14];
      if (!*(_WORD *)&a1[v14])
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v16 < 2)
      goto LABEL_24;
  }
  v17 = a1[v14];
  if (!a1[v14])
  {
LABEL_24:
    if (v5 >= v8)
      return (*(uint64_t (**)(void))(v4 + 48))();
    v21 = (unint64_t *)((((unint64_t)&a1[v12] & ~v11) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
      return (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v21 + v10 + 8) & ~v10);
    v22 = *v21;
    if (v22 >= 0xFFFFFFFF)
      LODWORD(v22) = -1;
    return (v22 + 1);
  }
LABEL_17:
  v19 = (v17 - 1) << v15;
  if (v14 >= 4)
    v19 = 0;
  if ((v12 & ~(_DWORD)v11)
     + ((*(_DWORD *)(v6 + 64) + (((_DWORD)v10 + 16) & ~(_DWORD)v10) + 7) & 0xFFFFFFF8) == -8)
    v20 = *a1;
  else
    v20 = *(_DWORD *)a1;
  return v9 + (v20 | v19) + 1;
}

void storeEnumTagSinglePayload for _PickerValue(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= *(_DWORD *)(v5 + 84))
    v8 = *(_DWORD *)(v5 + 84);
  else
    v8 = v7;
  v9 = ((*(_QWORD *)(v6 + 64)
       + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 9
     + (((*(unsigned __int8 *)(v6 + 80) | 7) + *(_QWORD *)(v5 + 64)) & ~(*(unsigned __int8 *)(v6 + 80) | 7));
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 >= a2)
    __asm { BR              X4 }
  v11 = ~v8 + a2;
  if (v9 < 4)
  {
    v11 &= ~(-1 << (8 * v9));
    bzero(a1, v9);
    if ((_DWORD)v9 == 1)
    {
      *a1 = v11;
      goto LABEL_22;
    }
  }
  else
  {
    bzero(a1, v9);
  }
  *(_DWORD *)a1 = v11;
LABEL_22:
  __asm { BR              X10 }
}

void type metadata accessor for _PickerValue()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **sub_187672DCC()
{
  return &protocol witness table for PickerStyleConfiguration<A>.Label;
}

_UNKNOWN **sub_187672DD8()
{
  return &protocol witness table for PickerStyleConfiguration<A>.Content;
}

uint64_t sub_187672DE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for PickerStyleWriter(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for PickerStyleWriter<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t type metadata accessor for PickerStyleConfiguration.CurrentValueLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PickerStyleConfiguration.CurrentValueLabel);
}

uint64_t type metadata accessor for PickerStyleConfiguration.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PickerStyleConfiguration.Content);
}

uint64_t type metadata accessor for PickerStyleConfiguration.Label(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PickerStyleConfiguration.Label);
}

uint64_t type metadata completion function for PickerStyleConfiguration()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PickerStyleConfiguration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    v14 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v14 + v7 + 8) & ~v7);
    }
    else
    {
      v15 = *v14;
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  else
  {
    v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187672FA0 + 4 * byte_187C4AE0A[v12]))();
  }
}

void storeEnumTagSinglePayload for PickerStyleConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_187673168()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1876731D8);
}

void sub_187673170(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187673178);
  JUMPOUT(0x1876731D8);
}

void sub_187673190()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876731D8);
}

void sub_187673198()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876731D8);
}

void sub_1876731A0(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x1876731D4);
      JUMPOUT(0x1876731D0);
    }
    JUMPOUT(0x1876731ACLL);
  }
  JUMPOUT(0x1876731D8);
}

uint64_t getEnumTagSinglePayload for ResolvedPicker(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    v14 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v14 + v7 + 8) & ~v7);
    }
    else
    {
      v15 = *v14;
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  else
  {
    v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187673288 + 4 * byte_187C4AE19[v12]))();
  }
}

void storeEnumTagSinglePayload for ResolvedPicker(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_187673450()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1876734C0);
}

void sub_187673458(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187673460);
  JUMPOUT(0x1876734C0);
}

void sub_187673478()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876734C0);
}

void sub_187673480()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876734C0);
}

void sub_187673488(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x1876734BCLL);
      JUMPOUT(0x1876734B8);
    }
    JUMPOUT(0x187673494);
  }
  JUMPOUT(0x1876734C0);
}

uint64_t type metadata accessor for ResolvedPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResolvedPicker);
}

uint64_t getEnumTagSinglePayload for PickerStyleWriter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187673594 + 4 * byte_187C4AE28[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PickerStyleWriter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in PickerStyleWriter<A>()
{
  return &protocol witness table for PickerStyleWriter<A>;
}

_UNKNOWN **base witness table accessor for View in ResolvedPicker<A>()
{
  return &protocol witness table for ResolvedPicker<A>;
}

_UNKNOWN **base witness table accessor for View in PickerStyleConfiguration<A>.Label()
{
  return &protocol witness table for PickerStyleConfiguration<A>.Label;
}

_UNKNOWN **base witness table accessor for View in PickerStyleConfiguration<A>.Content()
{
  return &protocol witness table for PickerStyleConfiguration<A>.Content;
}

_UNKNOWN **base witness table accessor for View in PickerStyleConfiguration<A>.CurrentValueLabel()
{
  return &protocol witness table for PickerStyleConfiguration<A>.CurrentValueLabel;
}

uint64_t instantiation function for generic protocol witness table for PickerStyleConfiguration<A>.CurrentValueLabel(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.CurrentValueLabel);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PickerStyleConfiguration<A>.Content(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.Content);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PickerStyleConfiguration<A>.Label(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.Label);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PickerStyleInput and conformance PickerStyleInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PickerStyleInput and conformance PickerStyleInput;
  if (!lazy protocol witness table cache variable for type PickerStyleInput and conformance PickerStyleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleInput, &unk_1E1AC01C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PickerStyleInput and conformance PickerStyleInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PickerStyleInput and conformance PickerStyleInput;
  if (!lazy protocol witness table cache variable for type PickerStyleInput and conformance PickerStyleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleInput, &unk_1E1AC01C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PickerStyleInput and conformance PickerStyleInput);
  }
  return result;
}

void type metadata accessor for _PickerValue.Init1()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t getEnumTagSinglePayload for _PickerValue.Init1(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 4) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 4) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187673970 + 4 * byte_187C4AE36[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for _PickerValue.Init1(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void *type metadata accessor for PickerStyleInput()
{
  return &unk_1E1AC01C8;
}

void base witness table accessor for _AttributeBody in _PickerValue<A, B>.Init1()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in PickerStyleConfiguration.selectedBoundIndices(children:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;

  result = _VariadicView_Children.tagIndex<A>(_:)();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5 & 1;
  return result;
}

void type metadata accessor for Int?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Int?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Int?);
  }
}

void type metadata accessor for _PickerValue.Init2()
{
  JUMPOUT(0x18D75FF28);
}

void base witness table accessor for _AttributeBody in _PickerValue<A, B>.Init2()
{
  JUMPOUT(0x18D75FFDCLL);
}

void static SegmentedPickerStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_187673D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  _QWORD v17[2];
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  type metadata accessor for _GraphValue();
  v7 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 32);
  v15 = *(_OWORD *)(v0 + 56);
  v16 = *(_OWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 72);
  _GraphValue.value.getter();
  type metadata accessor for ResolvedPicker(255, v2, v1, v10);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>();
  v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<ResolvedSegmentedPickerStyle>, (uint64_t)&unk_1E1AF7D40, (uint64_t)&protocol witness table for ResolvedSegmentedPickerStyle);
  type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for SegmentedPickerStyle.Body(0, v2, v1, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SegmentedPickerStyle.Body<A>, v13);
  _GraphValue.init<A>(_:)();
  v18 = v4;
  v19 = v5;
  v20 = v6;
  v21 = v7;
  v22 = v8;
  v23 = v16;
  v24 = v15;
  v25 = v9;
  v26 = v3;
  v17[0] = &protocol witness table for ResolvedPicker<A>;
  v17[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v17);
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, (unint64_t *)&lazy cache variable for type metadata for PickerStyleWriter<PalettePickerStyle>, (uint64_t)&type metadata for PalettePickerStyle, (uint64_t)&protocol witness table for PalettePickerStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for SegmentedPickerStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SegmentedPickerStyle.Body);
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for PickerStyleWriter<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void static SegmentedPickerStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_18767404C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;

  type metadata accessor for _GraphValue();
  v8 = *(_QWORD *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  _GraphValue.value.getter();
  type metadata accessor for ResolvedPicker(255, v3, v2, v10);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>();
  v11 = type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<ResolvedSegmentedPickerStyle>, (uint64_t)&unk_1E1AF7D40, (uint64_t)&protocol witness table for ResolvedSegmentedPickerStyle);
  type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for SegmentedPickerStyle.Body(0, v3, v2, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SegmentedPickerStyle.Body<A>, v13);
  _GraphValue.init<A>(_:)();
  v19 = v0;
  v20 = v4;
  v21 = v5;
  v22 = v8;
  v23 = v9;
  v24 = v17;
  v25 = v16;
  v26 = v15;
  v27 = v6;
  v28 = v7;
  v18[0] = &protocol witness table for ResolvedPicker<A>;
  v18[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v18);
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

void SegmentedPickerStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for PickerStyleConfiguration(0, a2, a3, a4);
  MEMORY[0x1E0C80A78](v5, v4);
  type metadata accessor for _PickerValue();
}

void sub_187674234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  v5 = type metadata accessor for ResolvedPicker(0, v2, v3, v4);
  MEMORY[0x1E0C80A78](v5, v6);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>();
  v7 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v7, v8);
  SegmentedPickerStyle.Body.base.getter();
}

void sub_187674300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 160) + 32))(v3, v0, *(_QWORD *)(v5 - 144));
  v7 = ResolvedPicker.init(configuration:)(v3, v2, v4, v6, v1);
  View.pickerStyle<A, B>(_:in:)(v7, v8);
}

uint64_t sub_187674364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v5);
  v8 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v7 - 128) = v0;
  *(_QWORD *)(v7 - 120) = v8;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v7 - 128);
  View.pickerStyle<A>(_:)(v9, v4, (uint64_t)&unk_1E1AF7D40, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v6, v4);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SegmentedPickerStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  type metadata accessor for ResolvedPicker(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<ResolvedSegmentedPickerStyle>, (uint64_t)&unk_1E1AF7D40, (uint64_t)&protocol witness table for ResolvedSegmentedPickerStyle);
  v4 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

void protocol witness for Rule.value.getter in conformance SegmentedPickerStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;

  SegmentedPickerStyle.Body.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

ValueMetadata *type metadata accessor for SegmentedPickerStyle()
{
  return &type metadata for SegmentedPickerStyle;
}

void *type metadata accessor for ResolvedSegmentedPickerStyle()
{
  return &unk_1E1AF7D40;
}

void base witness table accessor for _AttributeBody in SegmentedPickerStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void static ResolvedSegmentedPickerStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _PickerValue();
}

void sub_187674530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for _GraphValue();
  *(_DWORD *)(v2 - 124) = _GraphValue.value.getter();
  type metadata accessor for PickerStyleConfiguration.Content(255, v1, v0, v3);
  type metadata accessor for _SegmentedControl();
}

void sub_18767458C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = type metadata accessor for ResolvedSegmentedPickerStyle.Body(0, v5, v4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedSegmentedPickerStyle.Body<A>, v6);
  _GraphValue.init<A>(_:)();
  static _SegmentedControl._makeView(view:inputs:)();
}

void static ResolvedSegmentedPickerStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PickerStyleConfiguration.Content(255, a3, a4, a4);
  type metadata accessor for _SegmentedControl();
}

void sub_1876746C8()
{
  int v0;
  uint64_t v1;

  *(_DWORD *)(v1 - 100) = v0;
  type metadata accessor for _PickerValue();
}

uint64_t sub_1876746F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v4 = type metadata accessor for ResolvedSegmentedPickerStyle.Body(0, v2, v1, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedSegmentedPickerStyle.Body<A>, v4);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SegmentedControl<A, B>, v0);
  return static UnaryView._makeViewList(view:inputs:)();
}

void SegmentedPickerStyle.Body.base.getter()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_1876747FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void ResolvedSegmentedPickerStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PickerStyleConfiguration.Content(255, a2, a3, a4);
  type metadata accessor for _SegmentedControl();
}

uint64_t sub_187674894(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t);
  _BYTE v27[96];

  *(_QWORD *)(v5 - 240) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v27[-v11];
  v14 = type metadata accessor for PickerStyleConfiguration(0, v4, v3, v13);
  *(_QWORD *)(v5 - 256) = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = &v27[-v20];
  *(_DWORD *)(v5 - 120) = v2;
  *(_QWORD *)(v5 - 160) = v4;
  *(_QWORD *)(v5 - 152) = v3;
  *(_DWORD *)(v5 - 144) = v2;
  v23 = type metadata accessor for ResolvedSegmentedPickerStyle.Body(0, v4, v3, v22);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedSegmentedPickerStyle.Body<A>, v23);
  Rule.withObservation<A>(do:)();
  v24 = *(_QWORD *)(v5 - 256);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 16))(v17, v21, v14);
  *(_QWORD *)(v5 - 208) = v4;
  *(_QWORD *)(v5 - 200) = v3;
  *(_QWORD *)(v5 - 192) = v21;
  _SegmentedControl.init(configuration:content:)((uint64_t)v17, (void (*)(uint64_t))partial apply for closure #2 in ResolvedSegmentedPickerStyle.Body.value.getter, v5 - 224, v4, *(_QWORD *)(v5 - 248), v3, (uint64_t)v8);
  static ViewBuilder.buildExpression<A>(_:)(v8, a1, &protocol witness table for _SegmentedControl<A, B>);
  v25 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 240) + 8);
  v25(v8, a1);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v12, a1, *(_QWORD *)(v5 - 232));
  v25(v12, a1);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v24 + 8))(v21, v14);
}

void closure #1 in ResolvedSegmentedPickerStyle.Body.value.getter()
{
  type metadata accessor for _PickerValue();
}

void sub_187674ABC(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  SegmentedPickerStyle.Body.base.getter();
}

uint64_t sub_187674B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = type metadata accessor for PickerStyleConfiguration(0, v5, v4, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
}

uint64_t closure #2 in ResolvedSegmentedPickerStyle.Body.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
  v7 = type metadata accessor for PickerStyleConfiguration.Content(0, a1, a2, v6);
  v8 = static ViewBuilder.buildExpression<A>(_:)(v7, v7, &protocol witness table for PickerStyleConfiguration<A>.Content);
  return static ViewBuilder.buildBlock<A>(_:)(v8, v7, a3);
}

void protocol witness for static Rule.initialValue.getter in conformance ResolvedSegmentedPickerStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PickerStyleConfiguration.Content(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  type metadata accessor for _SegmentedControl();
}

uint64_t sub_187674BFC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void protocol witness for Rule.value.getter in conformance ResolvedSegmentedPickerStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;

  ResolvedSegmentedPickerStyle.Body.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

uint64_t type metadata accessor for ResolvedSegmentedPickerStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResolvedSegmentedPickerStyle.Body);
}

void base witness table accessor for _AttributeBody in ResolvedSegmentedPickerStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void partial apply for closure #1 in ResolvedSegmentedPickerStyle.Body.value.getter()
{
  closure #1 in ResolvedSegmentedPickerStyle.Body.value.getter();
}

uint64_t partial apply for closure #2 in ResolvedSegmentedPickerStyle.Body.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in ResolvedSegmentedPickerStyle.Body.value.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t LinearCapacityGaugeStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t KeyPath;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)a1 + 9);
  v6 = *((_BYTE *)a1 + 10);
  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5;
  *(_BYTE *)(a2 + 10) = v6;
  *(_QWORD *)(a2 + 16) = KeyPath;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 40) = 0;
  return result;
}

uint64_t protocol witness for GaugeStyle.makeBody(configuration:) in conformance LinearCapacityGaugeStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t KeyPath;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)a1 + 9);
  v6 = *((_BYTE *)a1 + 10);
  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5;
  *(_BYTE *)(a2 + 10) = v6;
  *(_QWORD *)(a2 + 16) = KeyPath;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 40) = 0;
  return result;
}

double LinearCapacityGauge.body.getter@<D0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  _OWORD v31[2];
  _BYTE v32[11];
  _BYTE v33[58];
  _QWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[26];
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];
  _QWORD v51[2];
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  char v68;
  _BYTE v69[145];
  char v70;
  char v71;
  int v72;
  char v73;

  v3 = v1[1];
  v30 = *v1;
  v31[0] = v3;
  *(_OWORD *)((char *)v31 + 9) = *(__int128 *)((char *)v1 + 25);
  v28 = static HorizontalAlignment.center.getter();
  v27 = static VerticalAlignment.center.getter();
  closure #1 in closure #1 in LinearCapacityGauge.body.getter((uint64_t)&v30, (uint64_t)v69);
  v4 = *(_QWORD *)&v69[8];
  v25 = *(_QWORD *)&v69[32];
  v26 = *(_QWORD *)&v69[16];
  v16 = v69[24];
  v17 = v69[40];
  v5 = *(_QWORD *)&v69[48];
  v24 = v69[56];
  v23 = *(_QWORD *)&v69[64];
  v22 = *(_QWORD *)&v69[72];
  v6 = v69[80];
  v21 = *(_QWORD *)&v69[88];
  v20 = *(_QWORD *)&v69[104];
  v18 = v69[96];
  v19 = v69[112];
  v7 = v69[113];
  v33[50] = 1;
  v33[42] = v69[0];
  v33[34] = v69[24];
  v33[26] = v69[40];
  v33[18] = v69[80];
  v33[10] = v69[96];
  v33[2] = v69[112];
  v33[1] = v69[113];
  v8 = v69[0];
  *(_DWORD *)&v32[7] = *(_DWORD *)((char *)&v30 + 7);
  *(_QWORD *)v32 = v30;
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v32[8], (uint64_t)v33, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v33, (uint64_t)&v29, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
  v34[0] = v27;
  v34[1] = 0;
  LOBYTE(v35) = 1;
  BYTE8(v35) = v8;
  *(_QWORD *)&v36 = v4;
  *((_QWORD *)&v36 + 1) = v26;
  LOBYTE(v37) = v16;
  *((_QWORD *)&v37 + 1) = v25;
  LOBYTE(v38) = v17;
  *((_QWORD *)&v38 + 1) = v5;
  LOBYTE(v39) = v24;
  *((_QWORD *)&v39 + 1) = v23;
  *(_QWORD *)&v40 = v22;
  BYTE8(v40) = v6;
  *(_QWORD *)v41 = v21;
  v41[8] = v18;
  *(_QWORD *)&v41[16] = v20;
  v41[24] = v19;
  v41[25] = v7;
  v46 = v37;
  v47 = v38;
  v43 = (unint64_t)v27;
  v44 = v35;
  *(_OWORD *)((char *)v50 + 10) = *(_OWORD *)&v41[10];
  v49 = v40;
  v50[0] = *(_OWORD *)v41;
  v48 = v39;
  v9 = v29;
  v45 = v36;
  v42 = v29;
  v51[0] = v27;
  v51[1] = 0;
  v52 = 1;
  v53 = v8;
  v54 = v4;
  v55 = v26;
  v56 = v16;
  v57 = v25;
  v58 = v17;
  v59 = v5;
  v60 = v24;
  v61 = v23;
  v62 = v22;
  v63 = v6;
  v64 = v21;
  v65 = v18;
  v66 = v20;
  v67 = v19;
  v68 = v7;
  outlined retain of HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>((uint64_t)v34);
  outlined release of HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>((uint64_t)v51);
  *(_OWORD *)&v69[87] = v48;
  *(_OWORD *)&v69[103] = v49;
  *(_OWORD *)&v69[119] = v50[0];
  *(_OWORD *)&v69[129] = *(_OWORD *)((char *)v50 + 10);
  *(_OWORD *)&v69[23] = v44;
  *(_OWORD *)&v69[39] = v45;
  *(_OWORD *)&v69[55] = v46;
  *(_OWORD *)&v69[71] = v47;
  v70 = 1;
  *(_OWORD *)&v69[7] = v43;
  v10 = static VerticalAlignment.center.getter();
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v33, (uint64_t)&v71, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
  v11 = *(_OWORD *)&v69[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v69[96];
  *(_OWORD *)(a1 + 129) = v11;
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v69[128];
  v12 = *(_OWORD *)&v69[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v69[32];
  *(_OWORD *)(a1 + 65) = v12;
  v13 = *(_OWORD *)&v69[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v69[64];
  *(_OWORD *)(a1 + 97) = v13;
  result = *(double *)v69;
  v15 = *(_OWORD *)&v69[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v69;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 161) = v69[144];
  *(_OWORD *)(a1 + 33) = v15;
  *(_BYTE *)(a1 + 162) = v9;
  *(_DWORD *)(a1 + 163) = v72;
  *(_BYTE *)(a1 + 167) = v73;
  *(_QWORD *)(a1 + 168) = v10;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 1;
  *(_BYTE *)(a1 + 185) = v71;
  return result;
}

uint64_t closure #1 in closure #1 in LinearCapacityGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t KeyPath;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  _BYTE v29[11];
  char v30;

  *(_QWORD *)v29 = *(_QWORD *)a1;
  *(_DWORD *)&v29[7] = *(_DWORD *)(a1 + 7);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v29[9], (uint64_t)&v30, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v4, v5);
  specialized Environment.wrappedValue.getter(v4, v5, &v23);
  outlined consume of Environment<Bool>.Content(v4, v5);
  if ((v23 & 2) == 0)
  {
    outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
LABEL_4:
    v9 = *(_QWORD *)v29;
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v6, v7);
  v8 = specialized Environment.wrappedValue.getter(v6, v7);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  outlined retain of LinearCapacityGauge(a1, (void (*)(_QWORD, _QWORD))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  v9 = 0;
  if ((v8 & 1) == 0)
    goto LABEL_4;
LABEL_5:
  KeyPath = swift_getKeyPath();
  v10 = swift_getKeyPath();
  v11 = swift_getKeyPath();
  v22 = 0x4030000000000000;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  v12 = v23;
  v13 = v24;
  v14 = v25;
  v15 = v26;
  v16 = v27;
  v17 = v28;
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v29[10], (uint64_t)&v23, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v30, (uint64_t)&v22, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v23, (uint64_t)&v21, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
  v18 = v21;
  *(_BYTE *)a2 = v22;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v14;
  *(_BYTE *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 48) = v16;
  *(_BYTE *)(a2 + 56) = v17;
  *(_QWORD *)(a2 + 64) = KeyPath;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = v10;
  *(_BYTE *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = v11;
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 113) = v18;
  outlined copy of Environment<Bool>.Content(v12, v13);
  outlined copy of Environment<Bool>.Content(v14, v15);
  outlined copy of Environment<(Color, Color)?>.Content(KeyPath, 0, 0);
  outlined copy of Environment<SceneBridge?>.Content(v10, 0);
  outlined copy of Environment<Bool>.Content(v11, 0);
  outlined consume of Environment<Bool>.Content(v12, v13);
  outlined consume of Environment<Bool>.Content(v14, v15);
  outlined consume of Environment<(Color, Color)?>.Content(KeyPath, 0, 0);
  outlined consume of Environment<AnyShapeStyle?>.Content(v10, 0);
  return outlined consume of Environment<Bool>.Content(v11, 0);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LinearCapacityGauge()
{
  type metadata accessor for VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>();
  type metadata accessor for AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, MEMORY[0x1E0CE74B8]);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t LinearCapsuleGauge.effectiveFillStyle.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  _QWORD v28[5];

  v1 = *(_QWORD *)(v0 + 8);
  v26 = v1;
  v2 = *(_BYTE *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 32);
  v27 = v4;
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_BYTE *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(unsigned __int8 *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 96);
  v11 = *(_BYTE *)(v0 + 104);
  outlined copy of Environment<Bool>.Content(v1, v2);
  outlined copy of Environment<Bool>.Content(v3, v4);
  outlined copy of Environment<(Color, Color)?>.Content(v5, v6, v7);
  v12 = v9;
  outlined copy of Environment<SceneBridge?>.Content(v8, v9);
  outlined copy of Environment<Bool>.Content(v10, v11);
  outlined copy of Environment<(Color, Color)?>.Content(v5, v6, v7);
  v13 = specialized Environment.wrappedValue.getter(v5, v6, v7);
  outlined consume of Environment<(Color, Color)?>.Content(v5, v6, v7);
  outlined consume of Environment<Bool>.Content(v26, v2);
  outlined consume of Environment<Bool>.Content(v3, v27);
  v14 = v5;
  v15 = v10;
  outlined consume of Environment<(Color, Color)?>.Content(v14, v6, v7);
  outlined consume of Environment<AnyShapeStyle?>.Content(v8, v12);
  outlined consume of Environment<Bool>.Content(v10, v11);
  if (v13)
  {
    swift_release();
    v28[0] = v13;
  }
  else
  {
    outlined copy of Environment<SceneBridge?>.Content(v8, v12);
    v16 = specialized Environment.wrappedValue.getter(v8, v12);
    outlined consume of Environment<AnyShapeStyle?>.Content(v8, v12);
    if (v16)
    {
      AnyShapeStyle.as<A>(type:)();
      swift_release();
      v17 = v28[0];
      if (v28[0])
      {
        outlined copy of Environment<Bool>.Content(v15, v11);
        specialized Environment.wrappedValue.getter(v15, v11, v28);
        outlined consume of Environment<Bool>.Content(v15, v11);
        if (LOBYTE(v28[0]) == 1)
        {
          v18 = Gradient.reversed.getter();
          swift_bridgeObjectRelease();
          v17 = v18;
        }
        static UnitPoint.leading.getter();
        v20 = v19;
        v22 = v21;
        static UnitPoint.trailing.getter();
        v28[0] = v17;
        v28[1] = v20;
        v28[2] = v22;
        v28[3] = v23;
        v28[4] = v24;
      }
    }
  }
  return AnyShapeStyle.init<A>(_:)();
}

double LinearCapsuleGauge.body.getter@<D0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double result;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[64];
  __int128 v23;
  _OWORD v24[2];

  v3 = v1[4];
  v24[0] = v1[5];
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)v1 + 89);
  v4 = v1[1];
  *(_OWORD *)v22 = *v1;
  *(_OWORD *)&v22[16] = v4;
  v5 = v1[2];
  *(_OWORD *)&v22[48] = v1[3];
  v23 = v3;
  *(_OWORD *)&v22[32] = v5;
  v6 = static Alignment.center.getter();
  v8 = v7;
  v9 = *(_QWORD *)&v22[56];
  v10 = v23;
  v11 = BYTE8(v23);
  outlined retain of LinearCapsuleGauge((uint64_t)v22);
  outlined copy of Environment<(Color, Color)?>.Content(v9, v10, v11);
  v12 = specialized Environment.wrappedValue.getter(v9, v10, v11);
  v14 = v13;
  outlined consume of Environment<(Color, Color)?>.Content(v9, v10, v11);
  if (v12)
    swift_release();
  else
    v14 = static Color.tertiarySystemFill.getter();
  outlined release of LinearCapsuleGauge((uint64_t)v22);
  v15 = (_OWORD *)swift_allocObject();
  v16 = v24[0];
  v15[5] = v23;
  v15[6] = v16;
  *(_OWORD *)((char *)v15 + 105) = *(_OWORD *)((char *)v24 + 9);
  v17 = *(_OWORD *)&v22[16];
  v15[1] = *(_OWORD *)v22;
  v15[2] = v17;
  v18 = *(_OWORD *)&v22[48];
  v15[3] = *(_OWORD *)&v22[32];
  v15[4] = v18;
  outlined retain of LinearCapsuleGauge((uint64_t)v22);
  v20 = *(_OWORD *)&v22[8];
  *(_OWORD *)v21 = *(_OWORD *)&v22[24];
  *(_OWORD *)&v21[9] = *(_OWORD *)&v22[33];
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE18B8]);
  ScaledMetric.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v14;
  *(_WORD *)(a1 + 32) = 256;
  *(_QWORD *)(a1 + 40) = partial apply for closure #1 in closure #1 in LinearCapsuleGauge.body.getter;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v20;
  *(_BYTE *)(a1 + 64) = BYTE8(v20);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)v21;
  *(_BYTE *)(a1 + 80) = v21[8];
  result = *(double *)&v21[16];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&v21[16];
  return result;
}

uint64_t closure #1 in closure #1 in LinearCapsuleGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  __int128 v6;
  double v7;
  double v8;
  uint64_t v9;
  char v10;
  double v11;
  double v12;
  uint64_t result;
  _OWORD v14[3];
  int v15;

  v5 = *(_DWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v6;
  v14[2] = *(_OWORD *)(a1 + 32);
  v15 = v5;
  GeometryProxy.size.getter();
  v8 = v7;
  v9 = *(_QWORD *)(a2 + 96);
  v10 = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v9, v10);
  specialized Environment.wrappedValue.getter(v9, v10, v14);
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = -v8;
  if (LOBYTE(v14[0]))
    v11 = v8;
  v12 = v11 * (1.0 - *(double *)a2);
  result = LinearCapsuleGauge.effectiveFillStyle.getter();
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = result;
  *(_WORD *)(a3 + 16) = 256;
  *(_BYTE *)(a3 + 24) = 1;
  *(double *)(a3 + 32) = v12;
  *(_QWORD *)(a3 + 40) = 0;
  *(_WORD *)(a3 + 48) = 256;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LinearCapsuleGauge()
{
  type metadata accessor for ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, MEMORY[0x1E0CE74D8]);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t key path getter for EnvironmentValues.sensitiveContent : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.sensitiveContent.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187675A58@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.sensitiveContent.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.sensitiveContent : EnvironmentValues()
{
  return EnvironmentValues.sensitiveContent.setter();
}

uint64_t sub_187675AB8()
{
  return EnvironmentValues.sensitiveContent.setter();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in LinearCapacityGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for LinearCapacityGaugeStyle()
{
  return &type metadata for LinearCapacityGaugeStyle;
}

unint64_t lazy protocol witness table accessor for type LinearCapacityGauge and conformance LinearCapacityGauge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinearCapacityGauge and conformance LinearCapacityGauge;
  if (!lazy protocol witness table cache variable for type LinearCapacityGauge and conformance LinearCapacityGauge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LinearCapacityGauge, &type metadata for LinearCapacityGauge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearCapacityGauge and conformance LinearCapacityGauge);
  }
  return result;
}

uint64_t destroy for LinearCapacityGauge(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for LinearCapacityGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 7);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(v2 + 32);
  LOBYTE(v2) = *(_BYTE *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v6, v2);
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v2;
  return a1;
}

uint64_t assignWithCopy for LinearCapacityGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(v2 + 32);
  LOBYTE(v2) = *(_BYTE *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v8, v2);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v2;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t assignWithTake for LinearCapacityGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_BYTE *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinearCapacityGauge(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LinearCapacityGauge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LinearCapacityGauge()
{
  return &type metadata for LinearCapacityGauge;
}

uint64_t associated type witness table accessor for View.Body : View in LinearCapacityGauge()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_BYTE *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_BYTE *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(unsigned __int8 *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_BYTE *)(a1 + 136);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<(Color, Color)?>.Content(v4, v5, v6);
  outlined copy of Environment<SceneBridge?>.Content(v7, v8);
  outlined copy of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t outlined release of HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_BYTE *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_BYTE *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(unsigned __int8 *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_BYTE *)(a1 + 136);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<(Color, Color)?>.Content(v4, v5, v6);
  outlined consume of Environment<AnyShapeStyle?>.Content(v7, v8);
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t outlined retain of LinearCapacityGauge(uint64_t a1, void (*a2)(_QWORD, _QWORD), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a1 + 40);
  a2(*(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  a3(v5, v6);
  return a1;
}

void type metadata accessor for VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>, (void (*)(uint64_t))type metadata accessor for (GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?));
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>, (void (*)(uint64_t))type metadata accessor for (GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?));
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>);
  }
}

void type metadata accessor for (GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?))
  {
    type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>();
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?));
  }
}

void type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>, (void (*)(uint64_t))type metadata accessor for (GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?));
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>, (void (*)(uint64_t))type metadata accessor for (GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?));
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>);
  }
}

void type metadata accessor for (GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?))
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?));
  }
}

uint64_t destroy for LinearCapsuleGauge(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  outlined consume of Environment<(Color, Color)?>.Content(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(a1 + 80), *(unsigned __int8 *)(a1 + 88));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
}

uint64_t initializeWithCopy for LinearCapsuleGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_BYTE *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v2 + 48);
  v8 = *(_QWORD *)(v2 + 56);
  v9 = *(_QWORD *)(v2 + 64);
  v10 = *(_BYTE *)(v2 + 72);
  outlined copy of Environment<(Color, Color)?>.Content(v8, v9, v10);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(v2 + 80);
  LOBYTE(v9) = *(_BYTE *)(v2 + 88);
  outlined copy of Environment<SceneBridge?>.Content(v11, v9);
  *(_QWORD *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 88) = v9;
  v12 = *(_QWORD *)(v2 + 96);
  LOBYTE(v2) = *(_BYTE *)(v2 + 104);
  outlined copy of Environment<Bool>.Content(v12, v2);
  *(_QWORD *)(a1 + 96) = v12;
  *(_BYTE *)(a1 + 104) = v2;
  return a1;
}

uint64_t assignWithCopy for LinearCapsuleGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v2 = a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_BYTE *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v2 + 48);
  v12 = *(_QWORD *)(v2 + 56);
  v13 = *(_QWORD *)(v2 + 64);
  v14 = *(_BYTE *)(v2 + 72);
  outlined copy of Environment<(Color, Color)?>.Content(v12, v13, v14);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  *(_BYTE *)(a1 + 72) = v14;
  outlined consume of Environment<(Color, Color)?>.Content(v15, v16, v17);
  v18 = *(_QWORD *)(v2 + 80);
  LOBYTE(v13) = *(_BYTE *)(v2 + 88);
  outlined copy of Environment<SceneBridge?>.Content(v18, v13);
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v18;
  *(_BYTE *)(a1 + 88) = v13;
  outlined consume of Environment<AnyShapeStyle?>.Content(v19, v20);
  v21 = *(_QWORD *)(v2 + 96);
  LOBYTE(v2) = *(_BYTE *)(v2 + 104);
  outlined copy of Environment<Bool>.Content(v21, v2);
  v22 = *(_QWORD *)(a1 + 96);
  v23 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v21;
  *(_BYTE *)(a1 + 104) = v2;
  outlined consume of Environment<Bool>.Content(v22, v23);
  return a1;
}

uint64_t assignWithTake for LinearCapsuleGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_BYTE *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = v11;
  outlined consume of Environment<(Color, Color)?>.Content(v12, v13, v14);
  v15 = *(_BYTE *)(a2 + 88);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = v15;
  outlined consume of Environment<AnyShapeStyle?>.Content(v16, v17);
  v18 = *(_BYTE *)(a2 + 104);
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = v18;
  outlined consume of Environment<Bool>.Content(v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinearCapsuleGauge(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 105))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LinearCapsuleGauge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 105) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LinearCapsuleGauge()
{
  return &type metadata for LinearCapsuleGauge;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, MEMORY[0x1E0CE74B8]);
    v3[1] = &protocol witness table for AccessibilityRepresentationModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>>)
  {
    type metadata accessor for VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>();
    type metadata accessor for AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>>);
  }
}

uint64_t associated type witness table accessor for View.Body : View in LinearCapsuleGauge()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of LinearCapsuleGauge(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(unsigned __int8 *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  v10 = *(_BYTE *)(a1 + 104);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<(Color, Color)?>.Content(v4, v5, v6);
  outlined copy of Environment<SceneBridge?>.Content(v7, v8);
  outlined copy of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t outlined release of LinearCapsuleGauge(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_BYTE *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(unsigned __int8 *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  v10 = *(_BYTE *)(a1 + 104);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<(Color, Color)?>.Content(v4, v5, v6);
  outlined consume of Environment<AnyShapeStyle?>.Content(v7, v8);
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t sub_18767678C()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  outlined consume of Environment<(Color, Color)?>.Content(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(v0 + 96), *(unsigned __int8 *)(v0 + 104));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LinearCapsuleGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in LinearCapsuleGauge.body.getter(a1, v2 + 16, a2);
}

void type metadata accessor for ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>, (void (*)(uint64_t))type metadata accessor for (_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>));
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>, (void (*)(uint64_t))type metadata accessor for (_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>));
    v0 = type metadata accessor for ZStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>);
  }
}

void type metadata accessor for (_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>))
  {
    type metadata accessor for _ShapeView<Capsule, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Capsule, Color>);
    type metadata accessor for GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>));
  }
}

void type metadata accessor for GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>();
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for GeometryReader();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>);
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>)
  {
    type metadata accessor for _ShapeView<Capsule, Color>(255, &lazy cache variable for type metadata for _ShapeView<Capsule, AnyShapeStyle>);
    type metadata accessor for _ClipEffect<OffsetShape<Capsule>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>);
  }
}

void type metadata accessor for _ShapeView<Capsule, Color>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    lazy protocol witness table accessor for type Capsule and conformance Capsule();
    v3 = type metadata accessor for _ShapeView();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void type metadata accessor for _ClipEffect<OffsetShape<Capsule>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ClipEffect<OffsetShape<Capsule>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for OffsetShape<Capsule>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule, MEMORY[0x1E0CE7600], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1218]);
    lazy protocol witness table accessor for type OffsetShape<Capsule> and conformance OffsetShape<A>();
    v0 = type metadata accessor for _ClipEffect();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ClipEffect<OffsetShape<Capsule>>);
  }
}

unint64_t lazy protocol witness table accessor for type OffsetShape<Capsule> and conformance OffsetShape<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OffsetShape<Capsule> and conformance OffsetShape<A>;
  if (!lazy protocol witness table cache variable for type OffsetShape<Capsule> and conformance OffsetShape<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for OffsetShape<Capsule>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule, MEMORY[0x1E0CE7600], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1218]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1228], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OffsetShape<Capsule> and conformance OffsetShape<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ShapeView<Capsule, AnyShapeStyle> and conformance _ShapeView<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ClipEffect<OffsetShape<Capsule>> and conformance _ClipEffect<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ClipEffect<OffsetShape<Capsule>>, MEMORY[0x1E0CE1450]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeView<Capsule, AnyShapeStyle> and conformance _ShapeView<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ShapeView<Capsule, AnyShapeStyle> and conformance _ShapeView<A, B>;
  if (!lazy protocol witness table cache variable for type _ShapeView<Capsule, AnyShapeStyle> and conformance _ShapeView<A, B>)
  {
    type metadata accessor for _ShapeView<Capsule, Color>(255, &lazy cache variable for type metadata for _ShapeView<Capsule, AnyShapeStyle>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0E50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeView<Capsule, AnyShapeStyle> and conformance _ShapeView<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, MEMORY[0x1E0CE74D8]);
    v3[1] = MEMORY[0x1E0CE1A80];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout>)
  {
    type metadata accessor for ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout>);
  }
}

void AlertScene.init<>(_:isPresented:actions:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init<>(_:isPresented:actions:)(uint64_t a1, uint64_t a2, char a3)
{
  swift_release();
  swift_release();
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init<A>(_:isPresented:actions:)()
{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init(_:isPresented:actions:message:)(uint64_t a1, uint64_t a2, char a3)
{
  AlertScene.init(_:isPresented:actions:message:)(a1, a2, a3);
}

{
  swift_release();
  swift_release();
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init(_:isPresented:actions:message:)()
{
  AlertScene.init(_:isPresented:actions:message:)();
}

{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init<A>(_:isPresented:actions:message:)()
{
  AlertScene.init<A>(_:isPresented:actions:message:)();
}

{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init<A>(_:isPresented:presenting:actions:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init<A>(_:isPresented:presenting:actions:)(uint64_t a1, uint64_t a2, char a3)
{
  swift_release();
  swift_release();
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init<A, B>(_:isPresented:presenting:actions:)()
{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init<A>(_:isPresented:presenting:actions:message:)(uint64_t a1, uint64_t a2, char a3)
{
  swift_release();
  swift_release();
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init<A>(_:isPresented:presenting:actions:message:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init<A, B>(_:isPresented:presenting:actions:message:)()
{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertDialog.init(_:isPresented:message:actions:)()
{
  AlertScene.init(_:isPresented:actions:message:)();
}

void AlertDialog.init<A>(_:isPresented:message:actions:)()
{
  AlertScene.init<A>(_:isPresented:actions:message:)();
}

void AlertDialog.init(_:isPresented:message:actions:)(uint64_t a1, uint64_t a2, char a3)
{
  AlertScene.init(_:isPresented:actions:message:)(a1, a2, a3);
}

uint64_t associated type witness table accessor for Scene.Body : Scene in AlertScene<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for Scene.Body : Scene in AlertDialog<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void type metadata completion function for AlertScene()
{
  type metadata accessor for AlertScene.DialogContent();
}

uint64_t initializeBufferWithCopyOfBuffer for AlertScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  size_t __n;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v4 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_DWORD *)(v7 + 80);
  v10 = *(unsigned int *)(v6 + 84);
  v11 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v6 + 80));
  v12 = *(_QWORD *)(v6 + 64) + v9;
  v13 = (v12 & ~v9) + *(_QWORD *)(v7 + 64);
  if (v8 | v10)
    v14 = (v12 & ~v9) + *(_QWORD *)(v7 + 64);
  else
    v14 = v13 + 1;
  v15 = (*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  v16 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v11 > 7 || v15 != 0 || v14 + ((v11 + 56) & ~v11) > 0x18)
  {
    v19 = v16 + ((v11 & 0xF8 ^ 0x1F8) & (v11 + 16));
    swift_retain();
    return v19;
  }
  v38 = v12;
  v39 = v6;
  v40 = v13;
  v41 = v5;
  v42 = v7;
  v43 = v4;
  __n = v14;
  v37 = ~v9;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v44 = a1;
  v20 = a1 & 0xFFFFFFFFFFFFFFF8;
  v21 = a2 & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v23 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  v45 = v8 | v10;
  v24 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v22, v23, v24);
  *(_QWORD *)(v20 + 24) = v22;
  *(_QWORD *)(v20 + 32) = v23;
  *(_BYTE *)(v20 + 40) = v24;
  *(_QWORD *)(v20 + 48) = *(_QWORD *)(v21 + 48);
  v25 = (void *)((v20 + v11 + 56) & ~v11);
  v26 = (_BYTE *)((v21 + v11 + 56) & ~v11);
  swift_bridgeObjectRetain();
  if (!v45)
  {
    v31 = v40;
    v30 = v41;
    v27 = v43;
    v19 = v44;
    v28 = v42;
    v32 = v39;
    if (!v26[v40])
      goto LABEL_28;
    v33 = (v26[v40] - 1) << (8 * v40);
    if (v40 > 3)
      v33 = 0;
    if ((_DWORD)v40)
    {
      if (v40 <= 3)
        v34 = v40;
      else
        v34 = 4;
      __asm { BR              X11 }
    }
    if (v33 == -1)
      goto LABEL_28;
    goto LABEL_26;
  }
  if (v10 >= v8)
  {
    v32 = v39;
    v30 = v41;
    v27 = v43;
    v19 = v44;
    v28 = v42;
    v31 = v40;
    if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v39 + 48))(v26, v10, v41))
      goto LABEL_28;
LABEL_26:
    memcpy(v25, v26, __n);
    return v19;
  }
  v28 = v42;
  v27 = v43;
  v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v42 + 48))((unint64_t)&v26[v38] & v37, v8, v43);
  v19 = v44;
  v31 = v40;
  v30 = v41;
  v32 = v39;
  if (v29)
    goto LABEL_26;
LABEL_28:
  (*(void (**)(void *, _BYTE *, uint64_t))(v32 + 16))(v25, v26, v30);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v28 + 16))(((unint64_t)v25 + v38) & v37, (unint64_t)&v26[v38] & v37, v27);
  if (!v45)
    *((_BYTE *)v25 + v31) = 0;
  return v19;
}

uint64_t destroy for AlertScene(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  int v18;

  swift_release();
  swift_release();
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24), *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32), *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 40));
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80) | *(unsigned __int8 *)(v7 + 80);
  v11 = *(_DWORD *)(v8 + 80);
  v12 = (v4 + v10 + 56) & ~v10;
  v13 = *(_DWORD *)(v7 + 84);
  v14 = ~v11;
  v15 = *(_QWORD *)(v7 + 64) + v11;
  if (v9 | v13)
  {
    if (v13 >= v9)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(v12, *(unsigned int *)(v7 + 84), v6);
      if (!(_DWORD)result)
      {
LABEL_15:
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))((v15 + v12) & v14, v5);
      }
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(v8 + 48))((v15 + v12) & v14);
      if (!(_DWORD)result)
        goto LABEL_15;
    }
  }
  else
  {
    v17 = (v15 & ~v11) + *(_QWORD *)(v8 + 64);
    if (!*(_BYTE *)(v12 + v17))
      goto LABEL_15;
    v18 = (*(unsigned __int8 *)(v12 + v17) - 1) << (8 * v17);
    if (v17 > 3)
      v18 = 0;
    if ((_DWORD)v17)
    {
      if (v17 > 3)
        LODWORD(v17) = 4;
      __asm { BR              X11 }
    }
    result = (v18 + 1);
    if (v18 == -1)
      goto LABEL_15;
  }
  return result;
}

uint64_t initializeWithCopy for AlertScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  size_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  v10 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v8, v9, v10);
  *(_QWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 32) = v9;
  *(_BYTE *)(v6 + 40) = v10;
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(v7 + 48);
  v29 = *(_QWORD *)(a3 + 16);
  v30 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(v29 - 8);
  v12 = *(_QWORD *)(v30 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = *(_DWORD *)(v12 + 80) | *(unsigned __int8 *)(v11 + 80);
  v16 = (void *)((v15 + 56 + v6) & ~v15);
  v17 = (unsigned __int8 *)((v15 + 56 + v7) & ~v15);
  v18 = *(unsigned int *)(v11 + 84);
  v19 = *(_QWORD *)(v11 + 64);
  v28 = ~v14;
  v20 = v19 + v14;
  v21 = ((v19 + v14) & ~v14) + *(_QWORD *)(v12 + 64);
  v22 = v13 | v18;
  swift_bridgeObjectRetain();
  if (v13 | v18)
  {
    if (v18 >= v13)
      v23 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v11 + 48))(v17, v18, v29);
    else
      v23 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((unint64_t)&v17[v20] & v28, v13, v30);
    if (v23)
    {
LABEL_14:
      if (v22)
        v26 = v21;
      else
        v26 = v21 + 1;
      memcpy(v16, v17, v26);
      return a1;
    }
  }
  else if (v17[v21])
  {
    v24 = (v17[v21] - 1) << (8 * v21);
    if (v21 > 3)
      v24 = 0;
    if ((_DWORD)v21)
    {
      if (v21 <= 3)
        v25 = v21;
      else
        v25 = 4;
      __asm { BR              X11 }
    }
    if (v24 != -1)
      goto LABEL_14;
  }
  (*(void (**)(void *, unsigned __int8 *, uint64_t))(v11 + 16))(v16, v17, v29);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16))(((unint64_t)v16 + v20) & v28, (unint64_t)&v17[v20] & v28, v30);
  if (!v22)
    *((_BYTE *)v16 + v21) = 0;
  return a1;
}

uint64_t assignWithCopy for AlertScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t (*v28)(unint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  char v33;
  int v34;
  int v35;
  _BYTE *v36;
  uint64_t (*v37)(_BYTE *, uint64_t, uint64_t);
  int v38;
  int v39;
  int v40;
  size_t v41;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v9 = *(_QWORD *)(v7 + 32);
  v10 = *(_BYTE *)(v7 + 40);
  outlined copy of Text.Storage(v8, v9, v10);
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  v13 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_QWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 32) = v9;
  *(_BYTE *)(v6 + 40) = v10;
  outlined consume of Text.Storage(v11, v12, v13);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(v7 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v14 - 8);
  v18 = *(unsigned int *)(v17 + 84);
  v19 = *(_DWORD *)(v17 + 80);
  v20 = *(_DWORD *)(v17 + 80) | *(unsigned __int8 *)(v16 + 80);
  v21 = (_BYTE *)((v20 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v20);
  v22 = (_BYTE *)((v20 + 56 + v7) & ~v20);
  v23 = *(unsigned int *)(v16 + 84);
  v24 = *(_QWORD *)(v16 + 64) + v19;
  v25 = (v24 & ~v19) + *(_QWORD *)(v17 + 64);
  v47 = ~v19;
  v48 = v14;
  v49 = v18 | v23;
  v46 = v24;
  if (v18 | v23)
  {
    if (v23 >= v18)
    {
      v36 = v22;
      v37 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
      v38 = v37(v21, v23, v15);
      v32 = v37(v36, v23, v15);
      v22 = v36;
      if (v38)
      {
LABEL_4:
        if (!v32)
          goto LABEL_36;
        goto LABEL_30;
      }
    }
    else
    {
      v26 = (unint64_t)&v21[v24] & ~v19;
      v44 = (v20 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v20;
      v45 = (v24 & ~v19) + *(_QWORD *)(v17 + 64);
      v43 = v15;
      v27 = v22;
      v28 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v17 + 48);
      v29 = ~v19;
      v30 = *(_QWORD *)(v16 + 64) + v19;
      v31 = v28(v26, v18, v14);
      v32 = v28((unint64_t)&v27[v30] & v29, v18, v14);
      v22 = v27;
      v15 = v43;
      v21 = (_BYTE *)v44;
      v25 = v45;
      if (v31)
        goto LABEL_4;
    }
    if (!v32)
    {
LABEL_34:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 24))(v21, v22, v15);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 24))((unint64_t)&v21[v46] & v47, (unint64_t)&v22[v46] & v47, v48);
      return a1;
    }
LABEL_29:
    (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v21, v15);
    (*(void (**)(unint64_t, uint64_t))(v17 + 8))((unint64_t)&v21[v46] & v47, v48);
    goto LABEL_30;
  }
  v33 = 8 * v25;
  if (!v21[v25])
    goto LABEL_28;
  v34 = (v21[v25] - 1) << v33;
  if (v25 > 3)
    v34 = 0;
  if ((_DWORD)v25)
  {
    if (v25 <= 3)
      v35 = v25;
    else
      v35 = 4;
    __asm { BR              X12 }
  }
  if (v34 == -1)
  {
LABEL_28:
    if (!v22[v25])
      goto LABEL_34;
    v39 = (v22[v25] - 1) << v33;
    if (v25 > 3)
      v39 = 0;
    if ((_DWORD)v25)
    {
      if (v25 <= 3)
        v40 = v25;
      else
        v40 = 4;
      __asm { BR              X11 }
    }
    if (v39 == -1)
      goto LABEL_34;
    goto LABEL_29;
  }
  if (!v22[v25] || (v22[v25] - 1) << v33 == -1)
  {
LABEL_36:
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 16))(v21, v22, v15);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 16))((unint64_t)&v21[v46] & v47, (unint64_t)&v22[v46] & v47, v48);
    if (!v49)
      v21[v25] = 0;
    return a1;
  }
LABEL_30:
  if (v49)
    v41 = v25;
  else
    v41 = v25 + 1;
  memcpy(v21, v22, v41);
  return a1;
}

uint64_t initializeWithTake for AlertScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  int v19;
  int v20;
  int v21;
  size_t v22;
  uint64_t v24;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_OWORD *)(v4 + 24) = v6;
  v8 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v7 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_DWORD *)(v10 + 80);
  v13 = *(_DWORD *)(v10 + 80) | *(unsigned __int8 *)(v9 + 80);
  v14 = (_BYTE *)((v13 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v13);
  v15 = (_BYTE *)((v13 + 56 + v5) & ~v13);
  v16 = *(unsigned int *)(v9 + 84);
  v17 = *(_QWORD *)(v9 + 64) + v12;
  v18 = (v17 & ~v12) + *(_QWORD *)(v10 + 64);
  v19 = v11 | v16;
  v24 = ~v12;
  if (v11 | v16)
  {
    if (v16 >= v11)
    {
      if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v15, v16, v8))
        goto LABEL_19;
    }
    else if (!(*(unsigned int (**)(unint64_t))(v10 + 48))((unint64_t)&v15[v17] & ~v12))
    {
LABEL_19:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v14, v15, v8);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))((unint64_t)&v14[v17] & v24, (unint64_t)&v15[v17] & v24, v7);
      if (!v19)
        v14[v18] = 0;
      return a1;
    }
  }
  else
  {
    if (!v15[v18])
      goto LABEL_19;
    v20 = (v15[v18] - 1) << (8 * v18);
    if (v18 > 3)
      v20 = 0;
    if ((_DWORD)v18)
    {
      if (v18 <= 3)
        v21 = (v17 & ~(_DWORD)v12) + *(_DWORD *)(v10 + 64);
      else
        v21 = 4;
      __asm { BR              X11 }
    }
    if (v20 == -1)
      goto LABEL_19;
  }
  if (v19)
    v22 = v18;
  else
    v22 = v18 + 1;
  memcpy(v14, v15, v22);
  return a1;
}

uint64_t assignWithTake for AlertScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  int v23;
  unint64_t v24;
  uint64_t (*v25)(unint64_t, uint64_t, uint64_t);
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  char v34;
  int v35;
  int v36;
  int v37;
  uint64_t (*v38)(_BYTE *, uint64_t, uint64_t);
  int v39;
  int v40;
  int v41;
  size_t v42;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *__src;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  v11 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_BYTE *)(v6 + 40) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v12 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  v17 = *(_DWORD *)(v15 + 80);
  v18 = *(_DWORD *)(v15 + 80) | *(unsigned __int8 *)(v14 + 80);
  v19 = (_BYTE *)((v18 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v18);
  v49 = v12;
  __src = (_BYTE *)((v18 + 56 + v7) & ~v18);
  v20 = *(unsigned int *)(v14 + 84);
  v21 = *(_QWORD *)(v14 + 64) + v17;
  v22 = (v21 & ~v17) + *(_QWORD *)(v15 + 64);
  v23 = v16 | v20;
  v47 = v21;
  v48 = ~v17;
  if (v16 | v20)
  {
    if (v20 >= v16)
    {
      v37 = v16 | v20;
      v38 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48);
      v39 = v38(v19, v20, v13);
      v33 = v38(__src, v20, v13);
      v23 = v37;
      if (v39)
      {
LABEL_4:
        if (!v33)
          goto LABEL_36;
        goto LABEL_30;
      }
    }
    else
    {
      v24 = (unint64_t)&v19[v21] & ~v17;
      v46 = v16 | v20;
      v25 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
      v45 = *(_QWORD *)(v12 - 8);
      v26 = (v21 & ~v17) + *(_QWORD *)(v15 + 64);
      v27 = (v18 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v18;
      v28 = v13;
      v29 = v12;
      v30 = ~v17;
      v31 = *(_QWORD *)(v14 + 64) + v17;
      v44 = v25(v24, v16, v12);
      v32 = (unint64_t)&__src[v31] & v30;
      v13 = v28;
      v19 = (_BYTE *)v27;
      v22 = v26;
      v15 = v45;
      v33 = v25(v32, v16, v29);
      v23 = v46;
      if (v44)
        goto LABEL_4;
    }
    if (!v33)
    {
LABEL_34:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 40))(v19, __src, v13);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 40))((unint64_t)&v19[v47] & v48, (unint64_t)&__src[v47] & v48, v49);
      return a1;
    }
LABEL_29:
    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v19, v13);
    (*(void (**)(unint64_t, uint64_t))(v15 + 8))((unint64_t)&v19[v47] & v48, v49);
    goto LABEL_30;
  }
  v34 = 8 * v22;
  if (!v19[v22])
    goto LABEL_28;
  v35 = (v19[v22] - 1) << v34;
  if (v22 > 3)
    v35 = 0;
  if ((_DWORD)v22)
  {
    if (v22 <= 3)
      v36 = v22;
    else
      v36 = 4;
    __asm { BR              X12 }
  }
  if (v35 == -1)
  {
LABEL_28:
    if (!__src[v22])
      goto LABEL_34;
    v40 = (__src[v22] - 1) << v34;
    if (v22 > 3)
      v40 = 0;
    if ((_DWORD)v22)
    {
      if (v22 <= 3)
        v41 = v22;
      else
        v41 = 4;
      __asm { BR              X11 }
    }
    if (v40 == -1)
      goto LABEL_34;
    goto LABEL_29;
  }
  if (!__src[v22] || (__src[v22] - 1) << v34 == -1)
  {
LABEL_36:
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v19, __src, v13);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))((unint64_t)&v19[v47] & v48, (unint64_t)&__src[v47] & v48, v49);
    if (!v23)
      v19[v22] = 0;
    return a1;
  }
LABEL_30:
  if (v23)
    v42 = v22;
  else
    v42 = v22 + 1;
  memcpy(v19, __src, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertScene(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  if (v8)
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  if (!a2)
    return 0;
  v12 = *(_DWORD *)(v6 + 80);
  v13 = *(_DWORD *)(v6 + 80) | *(unsigned __int8 *)(v4 + 80);
  v14 = *(_QWORD *)(v4 + 64) + v12;
  v15 = a2 - v10;
  if (a2 <= v10)
    goto LABEL_32;
  v16 = v11 + (v14 & ~v12) + ((v13 + 56) & ~v13);
  v17 = 8 * v16;
  if (v16 > 3)
    goto LABEL_16;
  v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
  if (HIWORD(v19))
  {
    v18 = *(_DWORD *)(a1 + v16);
    if (v18)
      goto LABEL_23;
LABEL_32:
    if ((v9 & 0x80000000) == 0)
    {
      v22 = *(_QWORD *)(a1 + 8);
      if (v22 >= 0xFFFFFFFF)
        LODWORD(v22) = -1;
      return (v22 + 1);
    }
    if (v8)
    {
      v23 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v13 + 56) & ~v13;
      if (v5 >= v7)
      {
        v26 = (*(uint64_t (**)(unint64_t, _QWORD))(v4 + 48))(v23, *(unsigned int *)(v4 + 84));
        v25 = v26 != 0;
        result = (v26 - 1);
        if ((_DWORD)result != 0 && v25)
          return result;
      }
      else
      {
        v24 = (*(uint64_t (**)(unint64_t))(v6 + 48))((v14 + v23) & ~v12);
        v25 = v24 != 0;
        result = (v24 - 1);
        if ((_DWORD)result != 0 && v25)
          return result;
      }
    }
    return 0;
  }
  if (v19 > 0xFF)
  {
    v18 = *(unsigned __int16 *)(a1 + v16);
    if (*(_WORD *)(a1 + v16))
      goto LABEL_23;
    goto LABEL_32;
  }
  if (v19 < 2)
    goto LABEL_32;
LABEL_16:
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_32;
LABEL_23:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = v16;
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  return v10 + v20 + 1;
}

void storeEnumTagSinglePayload for AlertScene(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v5 = 0u;
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) <= *(_DWORD *)(v6 + 84))
    v8 = *(_DWORD *)(v6 + 84);
  else
    v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  if (v8)
    v12 = ((*(_QWORD *)(v6 + 64) + *(_DWORD *)(v7 + 80)) & ~(unint64_t)*(_DWORD *)(v7 + 80))
        + *(_QWORD *)(v7 + 64);
  else
    v12 = ((*(_QWORD *)(v6 + 64) + *(_DWORD *)(v7 + 80)) & ~(unint64_t)*(_DWORD *)(v7 + 80))
        + *(_QWORD *)(v7 + 64)
        + 1;
  v11 = *(_DWORD *)(v7 + 80) | *(unsigned __int8 *)(v6 + 80);
  v13 = v12 + ((v11 + 56) & ~v11);
  if (a3 > v10)
  {
    if (v13 > 3)
    {
      v5 = 1u;
      if (v10 >= a2)
        goto LABEL_16;
LABEL_22:
      v15 = ~v10 + a2;
      if (v13 < 4)
      {
        if ((_DWORD)v13)
        {
          v16 = v15 & ~(-1 << (8 * v13));
          bzero(a1, v13);
          if ((_DWORD)v13 == 3)
          {
            *a1 = v16;
            *((_BYTE *)a1 + 2) = BYTE2(v16);
          }
          else if ((_DWORD)v13 == 2)
          {
            *a1 = v16;
          }
          else
          {
            *(_BYTE *)a1 = v16;
          }
        }
      }
      else
      {
        bzero(a1, v13);
        *(_DWORD *)a1 = v15;
      }
      __asm { BR              X10 }
    }
    v14 = ((a3 - v10 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v14))
    {
      v5 = 4u;
      if (v10 < a2)
        goto LABEL_22;
LABEL_16:
      __asm { BR              X7 }
    }
    if (v14 >= 0x100)
      v5 = 2;
    else
      v5 = v14 > 1;
  }
  if (v10 < a2)
    goto LABEL_22;
  goto LABEL_16;
}

void type metadata accessor for AlertScene()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for AlertScene.DialogContent()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for AlertDialog()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AlertDialog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(unint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = ((v10 + ((v7 + 56) & ~v7)) & ~v9) + *(_QWORD *)(v8 + 64);
  v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  v13 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if ((v9 | v7) > 7 || v12 != 0 || v11 > 0x18)
  {
    a1 = v13 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16));
    swift_retain();
  }
  else
  {
    v27 = v4;
    v28 = ~v9;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v16 = a1 & 0xFFFFFFFFFFFFFFF8;
    v17 = a2 & 0xFFFFFFFFFFFFFFF8;
    v18 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    v19 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    v20 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    v25 = v5;
    v26 = v10;
    swift_retain();
    swift_retain();
    outlined copy of Text.Storage(v18, v19, v20);
    *(_QWORD *)(v16 + 24) = v18;
    *(_QWORD *)(v16 + 32) = v19;
    *(_BYTE *)(v16 + 40) = v20;
    *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
    v21 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 56) & ~v7;
    v22 = (v17 + v7 + 56) & ~v7;
    v23 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v23(v21, v22, v25);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))((v21 + v26) & v28, (v22 + v26) & v28, v27);
  }
  return a1;
}

uint64_t destroy for AlertDialog(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  swift_release();
  swift_release();
  a1 &= 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v5 + *(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for AlertDialog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  v10 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v8, v9, v10);
  *(_QWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 32) = v9;
  *(_BYTE *)(v6 + 40) = v10;
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(v7 + 48);
  v11 = *(_QWORD *)(a3 + 24);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 56 + v6) & ~v13;
  v15 = (v13 + 56 + v7) & ~v13;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain();
  v16(v14, v15, v11);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))((*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v17 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t assignWithCopy for AlertDialog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v9 = *(_QWORD *)(v7 + 32);
  v10 = *(_BYTE *)(v7 + 40);
  outlined copy of Text.Storage(v8, v9, v10);
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  v13 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_QWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 32) = v9;
  *(_BYTE *)(v6 + 40) = v10;
  outlined consume of Text.Storage(v11, v12, v13);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(v7 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v15;
  v17 = (v15 + 56 + v7) & ~v15;
  (*(void (**)(unint64_t, uint64_t))(v14 + 24))(v16, v17);
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 24))((*(_QWORD *)(v14 + 64) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (*(_QWORD *)(v14 + 64) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t initializeWithTake for AlertDialog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_OWORD *)(v5 + 24) = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  v10 = (v8 + 56 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(v9, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 32))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t assignWithTake for AlertDialog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  v11 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_BYTE *)(v6 + 40) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v13;
  v15 = (v13 + 56 + v7) & ~v13;
  (*(void (**)(unint64_t, uint64_t))(v12 + 40))(v14, v15);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 40))((*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertDialog(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v7)
    goto LABEL_27;
  v11 = ((v9 + v10 + ((v8 + 56) & ~v8)) & ~v10) + *(_QWORD *)(v5 + 64);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((a2 - v7 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_27:
      if ((v6 & 0x80000000) != 0)
      {
        v19 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v8 + 56) & ~v8;
        if (v4 == v7)
          return (*(uint64_t (**)(unint64_t, _QWORD))(v3 + 48))(v19, *(unsigned int *)(v3 + 84));
        else
          return (*(uint64_t (**)(unint64_t))(v5 + 48))((v19 + v9 + v10) & ~v10);
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_27;
LABEL_18:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v7 + v16 + 1;
  if (v11 <= 3)
    v17 = ((v9 + v10 + ((v8 + 56) & ~(_DWORD)v8)) & ~(_DWORD)v10) + *(_DWORD *)(v5 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187678EBC + 4 * byte_187C4B6AE[v17 - 1]))();
}

void storeEnumTagSinglePayload for AlertDialog(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  v9 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

void type metadata accessor for AlertDialog()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for AlertScene.DialogContent()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout2();
      swift_initEnumMetadataSinglePayload();
      return 0;
    }
  }
  return v0;
}

_QWORD *initializeBufferWithCopyOfBuffer for AlertScene.DialogContent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v24;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (v11 & ~v10) + *(_QWORD *)(v8 + 64);
  v13 = *(unsigned int *)(v7 + 84);
  v14 = v9 | v13;
  if (v9 | v13)
    v15 = (v11 & ~v10) + *(_QWORD *)(v8 + 64);
  else
    v15 = v12 + 1;
  v16 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v8 + 80));
  if (v16 > 7 || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v15 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
    return a1;
  }
  v20 = ~v10;
  v24 = v20;
  if (!v14)
  {
    if (!*((_BYTE *)a2 + v12))
      goto LABEL_28;
    v21 = (*((unsigned __int8 *)a2 + v12) - 1) << (8 * v12);
    if (v12 > 3)
      v21 = 0;
    if ((_DWORD)v12)
    {
      if (v12 <= 3)
        v22 = v12;
      else
        v22 = 4;
      __asm { BR              X11 }
    }
    if (v21 == -1)
      goto LABEL_28;
    goto LABEL_26;
  }
  if (v13 >= v9)
  {
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, v13, v6))
      goto LABEL_28;
LABEL_26:
    memcpy(a1, a2, v15);
    return a1;
  }
  if ((*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)a2 + v11) & v20))
    goto LABEL_26;
LABEL_28:
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v11) & v24, ((unint64_t)a2 + v11) & v24, v5);
  if (!v14)
    *((_BYTE *)a1 + v12) = 0;
  return a1;
}

uint64_t destroy for AlertScene.DialogContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;

  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v3 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ~v9;
  v11 = *(_QWORD *)(v5 + 64) + v9;
  if (v8 | v6)
  {
    if (v6 >= v8)
    {
      result = (*(uint64_t (**)(uint64_t))(v5 + 48))(a1);
      if (!(_DWORD)result)
      {
LABEL_15:
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))((v11 + a1) & v10, v3);
      }
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))((v11 + a1) & v10, *(unsigned int *)(v7 + 84), v3);
      if (!(_DWORD)result)
        goto LABEL_15;
    }
  }
  else
  {
    v13 = (v11 & ~v9) + *(_QWORD *)(v7 + 64);
    if (!*(_BYTE *)(a1 + v13))
      goto LABEL_15;
    v14 = (*(unsigned __int8 *)(a1 + v13) - 1) << (8 * v13);
    if (v13 > 3)
      v14 = 0;
    if ((_DWORD)v13)
    {
      if (v13 > 3)
        LODWORD(v13) = 4;
      __asm { BR              X11 }
    }
    result = (v14 + 1);
    if (v14 == -1)
      goto LABEL_15;
  }
  return result;
}

_BYTE *initializeWithCopy for AlertScene.DialogContent(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  int v16;
  int v17;
  size_t v18;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ~v11;
  v13 = *(_QWORD *)(v7 + 64) + v11;
  v14 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      if (!(*(unsigned int (**)(_BYTE *))(v7 + 48))(a2))
        goto LABEL_19;
    }
    else if (!(*(unsigned int (**)(unint64_t, _QWORD, _QWORD))(v9 + 48))((unint64_t)&a2[v13] & v12, *(unsigned int *)(v9 + 84), *(_QWORD *)(a3 + 24)))
    {
LABEL_19:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&a1[v13] & v12, (unint64_t)&a2[v13] & v12, v5);
      if (!v15)
        a1[v14] = 0;
      return a1;
    }
  }
  else
  {
    if (!a2[v14])
      goto LABEL_19;
    v16 = (a2[v14] - 1) << (8 * v14);
    if (v14 > 3)
      v16 = 0;
    if ((_DWORD)v14)
    {
      if (v14 <= 3)
        v17 = (v13 & ~(_DWORD)v11) + *(_DWORD *)(v9 + 64);
      else
        v17 = 4;
      __asm { BR              X11 }
    }
    if (v16 == -1)
      goto LABEL_19;
  }
  if (v15)
    v18 = v14;
  else
    v18 = v14 + 1;
  memcpy(a1, a2, v18);
  return a1;
}

_BYTE *assignWithCopy for AlertScene.DialogContent(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  const void *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  unint64_t v16;
  size_t v17;
  int v18;
  uint64_t v19;
  uint64_t (*v21)(unint64_t, uint64_t, uint64_t);
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  int v26;
  int v27;
  uint64_t (*v29)(unsigned __int8 *, uint64_t, uint64_t);
  int v30;
  int v31;
  int v32;
  size_t v33;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = a2;
  v4 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ~v11;
  v13 = *(_QWORD *)(v7 + 64) + v11;
  v14 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = v10 | v8;
  v38 = v13;
  v39 = v5;
  v37 = v7;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      v29 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      v30 = v29(a1, v8, v6);
      v24 = v29(a2, v8, v6);
      v3 = a2;
      if (v30)
      {
LABEL_4:
        if (!v24)
          goto LABEL_36;
        goto LABEL_30;
      }
    }
    else
    {
      v16 = (unint64_t)&a1[v13] & v12;
      v35 = *(_QWORD *)(a3 + 16);
      v36 = v4;
      v17 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
      v18 = v10 | v8;
      v19 = ~v11;
      v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      v22 = *(_QWORD *)(v7 + 64) + v11;
      v23 = v21(v16, v10, v5);
      v24 = v21((unint64_t)&a2[v22] & v19, v10, v5);
      v3 = a2;
      v12 = v19;
      v15 = v18;
      v14 = v17;
      v6 = v35;
      v4 = v36;
      if (v23)
        goto LABEL_4;
    }
    v7 = v37;
    if (!v24)
    {
LABEL_34:
      (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 24))(v4, v3, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))((unint64_t)&v4[v38] & v12, ((unint64_t)v3 + v38) & v12, v39);
      return v4;
    }
LABEL_29:
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v4, v6);
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))((unint64_t)&v4[v38] & v12, v39);
    goto LABEL_30;
  }
  v25 = 8 * v14;
  if (!a1[v14])
    goto LABEL_41;
  v26 = (a1[v14] - 1) << v25;
  if (v14 > 3)
    v26 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v27 = v14;
    else
      v27 = 4;
    __asm { BR              X12 }
  }
  if (v26 == -1)
  {
LABEL_41:
    if (!a2[v14])
      goto LABEL_34;
    v31 = (a2[v14] - 1) << v25;
    if (v14 > 3)
      v31 = 0;
    if ((_DWORD)v14)
    {
      if (v14 <= 3)
        v32 = v14;
      else
        v32 = 4;
      __asm { BR              X11 }
    }
    v7 = *(_QWORD *)(v6 - 8);
    if (v31 == -1)
      goto LABEL_34;
    goto LABEL_29;
  }
  if (!a2[v14] || (a2[v14] - 1) << v25 == -1)
  {
LABEL_36:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v37 + 16))(v4, v3, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&v4[v38] & v12, ((unint64_t)v3 + v38) & v12, v39);
    if (!v15)
      v4[v14] = 0;
    return v4;
  }
LABEL_30:
  if (v15)
    v33 = v14;
  else
    v33 = v14 + 1;
  memcpy(v4, v3, v33);
  return v4;
}

_BYTE *initializeWithTake for AlertScene.DialogContent(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  int v16;
  int v17;
  size_t v18;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ~v11;
  v13 = *(_QWORD *)(v7 + 64) + v11;
  v14 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      if (!(*(unsigned int (**)(_BYTE *))(v7 + 48))(a2))
        goto LABEL_19;
    }
    else if (!(*(unsigned int (**)(unint64_t, _QWORD, _QWORD))(v9 + 48))((unint64_t)&a2[v13] & v12, *(unsigned int *)(v9 + 84), *(_QWORD *)(a3 + 24)))
    {
LABEL_19:
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&a1[v13] & v12, (unint64_t)&a2[v13] & v12, v5);
      if (!v15)
        a1[v14] = 0;
      return a1;
    }
  }
  else
  {
    if (!a2[v14])
      goto LABEL_19;
    v16 = (a2[v14] - 1) << (8 * v14);
    if (v14 > 3)
      v16 = 0;
    if ((_DWORD)v14)
    {
      if (v14 <= 3)
        v17 = (v13 & ~(_DWORD)v11) + *(_DWORD *)(v9 + 64);
      else
        v17 = 4;
      __asm { BR              X11 }
    }
    if (v16 == -1)
      goto LABEL_19;
  }
  if (v15)
    v18 = v14;
  else
    v18 = v14 + 1;
  memcpy(a1, a2, v18);
  return a1;
}

_BYTE *assignWithTake for AlertScene.DialogContent(_BYTE *a1, unsigned __int8 *a2, uint64_t a3)
{
  const void *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  unint64_t v16;
  size_t v17;
  int v18;
  uint64_t v19;
  uint64_t (*v21)(unint64_t, uint64_t, uint64_t);
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  int v26;
  int v27;
  uint64_t (*v29)(unsigned __int8 *, uint64_t, uint64_t);
  int v30;
  int v31;
  int v32;
  size_t v33;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = a2;
  v4 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ~v11;
  v13 = *(_QWORD *)(v7 + 64) + v11;
  v14 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
  v15 = v10 | v8;
  v38 = v13;
  v39 = v5;
  v37 = v7;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      v29 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48);
      v30 = v29(a1, v8, v6);
      v24 = v29(a2, v8, v6);
      v3 = a2;
      if (v30)
      {
LABEL_4:
        if (!v24)
          goto LABEL_36;
        goto LABEL_30;
      }
    }
    else
    {
      v16 = (unint64_t)&a1[v13] & v12;
      v35 = *(_QWORD *)(a3 + 16);
      v36 = v4;
      v17 = (v13 & ~v11) + *(_QWORD *)(v9 + 64);
      v18 = v10 | v8;
      v19 = ~v11;
      v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
      v22 = *(_QWORD *)(v7 + 64) + v11;
      v23 = v21(v16, v10, v5);
      v24 = v21((unint64_t)&a2[v22] & v19, v10, v5);
      v3 = a2;
      v12 = v19;
      v15 = v18;
      v14 = v17;
      v6 = v35;
      v4 = v36;
      if (v23)
        goto LABEL_4;
    }
    v7 = v37;
    if (!v24)
    {
LABEL_34:
      (*(void (**)(_BYTE *, const void *, uint64_t))(v7 + 40))(v4, v3, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))((unint64_t)&v4[v38] & v12, ((unint64_t)v3 + v38) & v12, v39);
      return v4;
    }
LABEL_29:
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v4, v6);
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))((unint64_t)&v4[v38] & v12, v39);
    goto LABEL_30;
  }
  v25 = 8 * v14;
  if (!a1[v14])
    goto LABEL_41;
  v26 = (a1[v14] - 1) << v25;
  if (v14 > 3)
    v26 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v27 = v14;
    else
      v27 = 4;
    __asm { BR              X12 }
  }
  if (v26 == -1)
  {
LABEL_41:
    if (!a2[v14])
      goto LABEL_34;
    v31 = (a2[v14] - 1) << v25;
    if (v14 > 3)
      v31 = 0;
    if ((_DWORD)v14)
    {
      if (v14 <= 3)
        v32 = v14;
      else
        v32 = 4;
      __asm { BR              X11 }
    }
    v7 = *(_QWORD *)(v6 - 8);
    if (v31 == -1)
      goto LABEL_34;
    goto LABEL_29;
  }
  if (!a2[v14] || (a2[v14] - 1) << v25 == -1)
  {
LABEL_36:
    (*(void (**)(_BYTE *, const void *, uint64_t))(v37 + 32))(v4, v3, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&v4[v38] & v12, ((unint64_t)v3 + v38) & v12, v39);
    if (!v15)
      v4[v14] = 0;
    return v4;
  }
LABEL_30:
  if (v15)
    v33 = v14;
  else
    v33 = v14 + 1;
  memcpy(v4, v3, v33);
  return v4;
}

uint64_t getEnumTagSinglePayload for AlertScene.DialogContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v6 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v6 + 64) + 1;
  }
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = a2 - v9;
  if (a2 > v9)
  {
    v14 = v10 + (v12 & ~v11);
    v15 = 8 * v14;
    if (v14 > 3)
      goto LABEL_10;
    v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (v16)
        goto LABEL_17;
    }
    else
    {
      if (v17 <= 0xFF)
      {
        if (v17 < 2)
          goto LABEL_26;
LABEL_10:
        v16 = *(unsigned __int8 *)(a1 + v14);
        if (!*(_BYTE *)(a1 + v14))
          goto LABEL_26;
LABEL_17:
        v18 = (v16 - 1) << v15;
        if (v14 > 3)
          v18 = 0;
        if ((_DWORD)v14)
        {
          if (v14 <= 3)
            v19 = v14;
          else
            v19 = 4;
          __asm { BR              X12 }
        }
        return v9 + v18 + 1;
      }
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (*(_WORD *)(a1 + v14))
        goto LABEL_17;
    }
  }
LABEL_26:
  if (v8 < 2)
    return 0;
  if (v5 >= v7)
    v20 = (*(uint64_t (**)(void))(v4 + 48))();
  else
    v20 = (*(uint64_t (**)(uint64_t))(v6 + 48))((v12 + a1) & ~v11);
  if (v20 >= 2)
    return v20 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for AlertScene.DialogContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v5 = 0u;
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) <= *(_DWORD *)(v6 + 84))
    v8 = *(_DWORD *)(v6 + 84);
  else
    v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v6 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64);
  if (v8)
    v13 = (v11 & ~v10) + v12;
  else
    v13 = (v11 & ~v10) + v12 + 1;
  if (a3 > v9)
  {
    if (v13 > 3)
    {
      v5 = 1u;
      if (v9 >= a2)
LABEL_26:
        __asm { BR              X0 }
LABEL_19:
      v15 = ~v9 + a2;
      if (v13 < 4)
      {
        if ((_DWORD)v13)
        {
          v16 = v15 & ~(-1 << (8 * v13));
          bzero(a1, v13);
          if ((_DWORD)v13 == 3)
          {
            *a1 = v16;
            *((_BYTE *)a1 + 2) = BYTE2(v16);
          }
          else if ((_DWORD)v13 == 2)
          {
            *a1 = v16;
          }
          else
          {
            *(_BYTE *)a1 = v16;
          }
        }
      }
      else
      {
        bzero(a1, v13);
        *(_DWORD *)a1 = v15;
      }
      __asm { BR              X10 }
    }
    v14 = ((a3 - v9 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v14))
    {
      v5 = 4u;
      if (v9 >= a2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v14 >= 0x100)
      v5 = 2;
    else
      v5 = v14 > 1;
  }
  if (v9 >= a2)
    goto LABEL_26;
  goto LABEL_19;
}

void sub_18767A338()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18767A340()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18767A384()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_18767A38C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_18767A39C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t getEnumTag for AlertScene.DialogContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_DWORD *)(v2 + 84);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = *(_QWORD *)(v2 + 64) + v6;
  if (v5 | v3)
  {
    if (v3 >= v5)
      return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 48))(a1, *(unsigned int *)(v2 + 84));
    else
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((v7 + a1) & ~v6);
  }
  else
  {
    v9 = (v7 & ~v6) + *(_QWORD *)(v4 + 64);
    if (*(_BYTE *)(a1 + v9))
    {
      v10 = (*(unsigned __int8 *)(a1 + v9) - 1) << (8 * v9);
      if (v9 > 3)
        v10 = 0;
      if ((_DWORD)v9)
      {
        if (v9 > 3)
          LODWORD(v9) = 4;
        return ((uint64_t (*)(void))((char *)&loc_18767A444 + 4 * byte_187C4B6F6[(v9 - 1)]))();
      }
      else
      {
        return (v10 + 1);
      }
    }
    else
    {
      return 0;
    }
  }
}

void destructiveInjectEnumTag for AlertScene.DialogContent(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  void (*v15)(_BYTE *);

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  if (v8 >= a2)
  {
    if (v8)
    {
      if (!a2)
        return;
    }
    else
    {
      a1[v11] = 0;
      if (!a2)
        return;
    }
    if (v5 >= v7)
    {
      v15 = *(void (**)(_BYTE *))(v4 + 56);
    }
    else
    {
      a1 = (_BYTE *)((unint64_t)&a1[v10] & ~v9);
      v15 = *(void (**)(_BYTE *))(v6 + 56);
    }
    v15(a1);
    return;
  }
  v12 = ~v8 + a2;
  if (v11 >= 4)
  {
    bzero(a1, (v10 & ~v9) + *(_QWORD *)(v6 + 64));
    *(_DWORD *)v3 = v12;
    LOBYTE(v13) = 1;
    if (v8)
      return;
    goto LABEL_23;
  }
  v13 = (v12 >> (8 * v11)) + 1;
  if (!(_DWORD)v11)
  {
LABEL_22:
    if (v8)
      return;
    goto LABEL_23;
  }
  v14 = v12 & ~(-1 << (8 * v11));
  bzero(a1, (v10 & ~v9) + *(_QWORD *)(v6 + 64));
  if ((_DWORD)v11 == 3)
  {
    *(_WORD *)v3 = v14;
    v3[2] = BYTE2(v14);
    goto LABEL_22;
  }
  if ((_DWORD)v11 == 2)
  {
    *(_WORD *)v3 = v14;
    if (v8)
      return;
    goto LABEL_23;
  }
  *v3 = v14;
  if (!v8)
LABEL_23:
    v3[v11] = v13;
}

uint64_t destroy for DialogConfiguration(uint64_t a1)
{
  swift_release();
  swift_release();
  outlined consume of Text.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for DialogConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DialogConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  outlined copy of Text.Storage(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DialogConfiguration(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DialogConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DialogConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DialogConfiguration()
{
  return &type metadata for DialogConfiguration;
}

void AlertDialog.body.getter()
{
  AlertScene.body.getter();
}

void static EffectiveLabelStyle.titleAndIcon.getter(_QWORD *a1@<X8>)
{
  *a1 = &type metadata for TitleAndIconLabelStyle;
}

void static EffectiveLabelStyle.iconOnly.getter(_QWORD *a1@<X8>)
{
  *a1 = &type metadata for IconOnlyLabelStyle;
}

void static EffectiveLabelStyle.titleOnly.getter(_QWORD *a1@<X8>)
{
  *a1 = &type metadata for TitleOnlyLabelStyle;
}

BOOL static EffectiveLabelStyle.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveLabelStyleKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveLabelStyleKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t (*EnvironmentValues.effectiveLabelStyle.modify(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.effectiveLabelStyle.modify;
}

uint64_t EnvironmentValues.effectiveLabelStyle.modify(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[2];
  a1[1] = *a1;
  type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t getEnumTagSinglePayload for EffectiveLabelStyle(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for EffectiveLabelStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for EffectiveLabelStyleKey()
{
  return &type metadata for EffectiveLabelStyleKey;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EffectiveLabelStyleKey(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  if (*a1)
    v2 = *a2 == 0;
  else
    v2 = 1;
  if (v2)
    return (*a1 | *a2) == 0;
  else
    return *a1 == *a2;
}

ValueMetadata *type metadata accessor for ListLabelStyle()
{
  return &type metadata for ListLabelStyle;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in ListLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t key path getter for EnvironmentValues.labelIconToTitleSpacing : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.labelIconToTitleSpacing.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.labelIconToTitleSpacing : EnvironmentValues()
{
  return EnvironmentValues.labelIconToTitleSpacing.setter();
}

uint64_t key path setter for EnvironmentValues.backgroundProminence : EnvironmentValues()
{
  return EnvironmentValues.backgroundProminence.setter();
}

uint64_t ListLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  KeyPath = swift_getKeyPath();
  v3 = swift_getKeyPath();
  v4 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = KeyPath;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v3;
  *(_WORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v4;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = result;
  *(_WORD *)(a1 + 104) = 0;
  return result;
}

uint64_t ListLabelStyle.Implementation.body.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t TextLine;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[3];

  v3 = v1[5];
  v38 = v1[4];
  v39[0] = v3;
  *(_OWORD *)((char *)v39 + 10) = *(__int128 *)((char *)v1 + 90);
  v4 = v1[1];
  v34 = *v1;
  v35 = v4;
  v5 = v1[3];
  v36 = v1[2];
  v37 = v5;
  outlined retain of ListLabelStyle.Implementation((uint64_t)&v34);
  if (one-time initialization token for listLabelIconAlignment != -1)
    swift_once();
  v33 = static VerticalAlignment.listLabelIconAlignment;
  v32 = static HorizontalAlignment.leading.getter();
  v6 = v38;
  v7 = BYTE8(v38);
  v8 = BYTE9(v38);
  outlined retain of ListLabelStyle.Implementation((uint64_t)&v34);
  outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
  v9 = specialized Environment.wrappedValue.getter(v6, v7 | (v8 << 8));
  v11 = v10;
  outlined consume of Environment<CGFloat?>.Content(v6, v7, v8);
  outlined release of ListLabelStyle.Implementation((uint64_t)&v34);
  v12 = 0x4024000000000000;
  if ((v11 & 1) == 0)
    v12 = v9;
  v31 = v12;
  v13 = (_OWORD *)swift_allocObject();
  v14 = v39[0];
  v13[5] = v38;
  v13[6] = v14;
  *(_OWORD *)((char *)v13 + 106) = *(_OWORD *)((char *)v39 + 10);
  v15 = v35;
  v13[1] = v34;
  v13[2] = v15;
  v16 = v37;
  v13[3] = v36;
  v13[4] = v16;
  KeyPath = swift_getKeyPath();
  v29 = swift_getKeyPath();
  outlined retain of ListLabelStyle.Implementation((uint64_t)&v34);
  TextLine = static VerticalAlignment._firstTextLineCenter.getter();
  v18 = static HorizontalAlignment.leading.getter();
  outlined retain of ListLabelStyle.Implementation((uint64_t)&v34);
  outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
  v19 = specialized Environment.wrappedValue.getter(v6, v7 | (v8 << 8));
  v21 = v20;
  outlined consume of Environment<CGFloat?>.Content(v6, v7, v8);
  outlined release of ListLabelStyle.Implementation((uint64_t)&v34);
  if ((v21 & 1) != 0)
    v22 = 0x4024000000000000;
  else
    v22 = v19;
  v23 = (_OWORD *)swift_allocObject();
  v24 = v39[0];
  v23[5] = v38;
  v23[6] = v24;
  *(_OWORD *)((char *)v23 + 106) = *(_OWORD *)((char *)v39 + 10);
  v25 = v35;
  v23[1] = v34;
  v23[2] = v25;
  v26 = v37;
  v23[3] = v36;
  v23[4] = v26;
  v27 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = partial apply for closure #1 in ListLabelStyle.Implementation.v6Layout.getter;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v32;
  *(_QWORD *)(a1 + 24) = v33;
  *(_QWORD *)(a1 + 32) = v31;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = KeyPath;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v29;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = partial apply for closure #1 in ListLabelStyle.Implementation.preV6Layout.getter;
  *(_QWORD *)(a1 + 88) = v23;
  *(_QWORD *)(a1 + 96) = v18;
  *(_QWORD *)(a1 + 104) = TextLine;
  *(_QWORD *)(a1 + 112) = v22;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v27;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = result;
  *(_BYTE *)(a1 + 152) = 0;
  return result;
}

uint64_t closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(char a1@<W0>, _OWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[64];
  uint64_t (*v14)@<X0>(uint64_t *@<X8>);
  uint64_t v15;

  v6 = swift_allocObject();
  v7 = a2[2];
  *(_OWORD *)(v6 + 72) = a2[3];
  v8 = a2[5];
  *(_OWORD *)(v6 + 88) = a2[4];
  *(_OWORD *)(v6 + 104) = v8;
  *(_OWORD *)(v6 + 114) = *(_OWORD *)((char *)a2 + 90);
  v9 = a2[1];
  *(_OWORD *)(v6 + 24) = *a2;
  *(_OWORD *)(v6 + 40) = v9;
  *(_BYTE *)(v6 + 16) = a1;
  *(_OWORD *)(v6 + 56) = v7;
  v13[56] = 1;
  v14 = partial apply for closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter;
  v15 = v6;
  outlined retain of ListLabelStyle.Implementation((uint64_t)a2);
  if (one-time initialization token for listLabelIconAlignment != -1)
    swift_once();
  v10 = static VerticalAlignment.listLabelIconAlignment;
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = a1 & 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)a3, (uint64_t (*)(_QWORD))type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>);
  a3[10] = v10;
  a3[11] = partial apply for closure #2 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter;
  a3[12] = v11;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>);
}

uint64_t closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t KeyPath;
  uint64_t v37;
  _QWORD v38[2];
  char v39;
  __int128 v40;
  _BYTE v41[25];
  _BYTE v42[64];
  uint64_t (*v43)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;

  v6 = _VariadicView_Children.endIndex.getter();
  if (v6)
  {
    v34 = v6;
    v35 = a1;
    v38[0] = static VerticalAlignment.center.getter();
    v38[1] = 0;
    v39 = 1;
    v7 = *(_QWORD *)(a2 + 96);
    v8 = *(unsigned __int8 *)(a2 + 104);
    v9 = *(unsigned __int8 *)(a2 + 105);
    outlined retain of ListLabelStyle.Implementation(a2);
    outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
    specialized Environment.wrappedValue.getter(v7, v8 | (v9 << 8), (uint64_t)&v40);
    outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
    v10 = v40;
    if ((_QWORD)v40 == 1)
    {
      static Color.accentColor.getter();
    }
    else
    {
      static Color.secondary.getter();
      if (v10)
        swift_release();
    }
    outlined release of ListLabelStyle.Implementation(a2);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for HStack<LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&protocol witness table for LabelStyleConfiguration.Icon, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    lazy protocol witness table accessor for type HStack<LabelStyleConfiguration.Icon> and conformance HStack<A>();
    View.defaultForegroundColor(_:)();
    swift_release();
    v18 = *((_QWORD *)&v40 + 1);
    v11 = v40;
    v13 = v41[0];
    v14 = *(_QWORD *)&v41[8];
    v15 = *(_QWORD *)&v41[16];
    v19 = *(_QWORD *)(a2 + 80);
    v20 = *(_BYTE *)(a2 + 88);
    outlined retain of ListLabelStyle.Implementation(a2);
    outlined copy of Environment<Bool>.Content(v19, v20);
    specialized Environment.wrappedValue.getter(v19, v20, v38);
    outlined consume of Environment<Bool>.Content(v19, v20);
    v37 = v18;
    if (LOBYTE(v38[0]) > 8u)
    {
      outlined release of ListLabelStyle.Implementation(a2);
      v16 = 0;
    }
    else
    {
      outlined copy of Environment<Bool>.Content(v19, v20);
      specialized Environment.wrappedValue.getter(v19, v20, v38);
      outlined consume of Environment<Bool>.Content(v19, v20);
      v21 = LOBYTE(v38[0]);
      outlined release of ListLabelStyle.Implementation(a2);
      if (v21 >= 7)
        v16 = 1;
      else
        v16 = 2;
    }
    a1 = v35;
    KeyPath = swift_getKeyPath();
    v22 = *(_OWORD *)(a2 + 16);
    v40 = *(_OWORD *)a2;
    *(_OWORD *)v41 = v22;
    *(_OWORD *)&v41[9] = *(_OWORD *)(a2 + 25);
    type metadata accessor for ScaledMetric<CGFloat>();
    ScaledMetric.wrappedValue.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    v17 = v45;
    v33 = v46;
    v31 = v48;
    v32 = v47;
    v29 = v50;
    v30 = v49;
    v12 = v37;
    v6 = v34;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    KeyPath = 0;
    v16 = 0;
    v17 = 0;
    v32 = 0;
    v33 = 0;
    v30 = 0;
    v31 = 0;
    v29 = 0;
  }
  v23 = (v6 != 0) & a1;
  v24 = swift_allocObject();
  v25 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v24 + 72) = *(_OWORD *)(a2 + 48);
  v26 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v24 + 88) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v24 + 104) = v26;
  *(_OWORD *)(v24 + 114) = *(_OWORD *)(a2 + 90);
  v27 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v24 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(v24 + 40) = v27;
  *(_BYTE *)(v24 + 16) = v23;
  *(_OWORD *)(v24 + 56) = v25;
  v42[56] = 1;
  v43 = partial apply for closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter;
  v44 = v24;
  outlined retain of ListLabelStyle.Implementation(a2);
  v40 = (unint64_t)static HorizontalAlignment.leading.getter();
  v41[0] = 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v42, (uint64_t)&v41[8], (uint64_t (*)(_QWORD))type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v40, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>);
  *a3 = v11;
  a3[1] = v12;
  a3[2] = v13;
  a3[3] = v14;
  a3[4] = v15;
  a3[5] = KeyPath;
  a3[6] = v16;
  a3[7] = v17;
  a3[8] = v33;
  a3[9] = v32;
  a3[10] = v31;
  a3[11] = v30;
  a3[12] = v29;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v38, (uint64_t)(a3 + 13), (uint64_t (*)(_QWORD))type metadata accessor for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>);
  outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?(v11, v12, v13, v14);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v40, (uint64_t (*)(_QWORD))type metadata accessor for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>);
  return outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?(v11, v12, v13, v14);
}

uint64_t closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[15];
  __int128 v37;
  _OWORD v38[6];
  char v39;
  _OWORD v40[3];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[8];
  __int128 v47;
  _OWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  if (_VariadicView_Children.endIndex.getter())
  {
    _VariadicView_Children.subscript.getter();
  }
  else
  {
    v42 = 0u;
    v43 = 0u;
    v41 = 0u;
    memset(v40, 0, sizeof(v40));
  }
  if ((a2 & 1) != 0)
  {
    v8 = *(_OWORD *)(a3 + 16);
    v47 = *(_OWORD *)a3;
    v48[0] = v8;
    *(_OWORD *)((char *)v48 + 9) = *(_OWORD *)(a3 + 25);
    type metadata accessor for ScaledMetric<CGFloat>();
    ScaledMetric.wrappedValue.getter();
    v9 = *(_QWORD *)(a3 + 64);
    v10 = *(unsigned __int8 *)(a3 + 72);
    v35 = a1;
    v11 = a2;
    v12 = *(unsigned __int8 *)(a3 + 73);
    outlined retain of ListLabelStyle.Implementation(a3);
    outlined copy of Environment<CGFloat?>.Content(v9, v10, v12);
    specialized Environment.wrappedValue.getter(v9, v10 | (v12 << 8));
    v13 = v12;
    a2 = v11;
    a1 = v35;
    outlined consume of Environment<CGFloat?>.Content(v9, v10, v13);
    outlined release of ListLabelStyle.Implementation(a3);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Subview?, (uint64_t)&type metadata for Subview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  lazy protocol witness table accessor for type Subview? and conformance <A> A?();
  View.bodyHeadOutdent(_:)();
  outlined destroy of Subview?((uint64_t)v40);
  if (one-time initialization token for listRowSeparatorLeading != -1)
    swift_once();
  v14 = static HorizontalAlignment.listRowSeparatorLeading;
  v15 = swift_allocObject();
  v16 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v15 + 80) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v15 + 96) = v16;
  *(_OWORD *)(v15 + 106) = *(_OWORD *)(a3 + 90);
  v17 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v15 + 32) = v17;
  v18 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v15 + 48) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v15 + 64) = v18;
  *(_BYTE *)(v15 + 122) = a2 & 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v47, (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
  *(_OWORD *)((char *)&v46[3] + 8) = v49;
  *(_OWORD *)((char *)&v46[4] + 8) = v50;
  *(_OWORD *)((char *)&v46[5] + 8) = v51;
  *(_OWORD *)((char *)&v46[6] + 8) = v52;
  *(_OWORD *)((char *)v46 + 8) = v47;
  *(_QWORD *)&v45 = v14;
  *((_QWORD *)&v45 + 1) = partial apply for closure #1 in closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter;
  *(_QWORD *)&v46[0] = v15;
  *(_OWORD *)((char *)&v46[1] + 8) = v48[0];
  *(_OWORD *)((char *)&v46[2] + 8) = v48[1];
  v52 = v44;
  v53 = v45;
  v48[1] = v40[2];
  v49 = v41;
  v47 = v40[0];
  v48[0] = v40[1];
  v56 = v46[2];
  v57 = v46[3];
  v54 = v46[0];
  v55 = v46[1];
  v61 = *(_QWORD *)&v46[7];
  v59 = v46[5];
  v60 = v46[6];
  v58 = v46[4];
  v50 = v42;
  v51 = v43;
  outlined init with copy of SubviewsCollection(a1, (uint64_t)v40);
  outlined retain of ListLabelStyle.Implementation(a3);
  v19 = _VariadicView_Children.endIndex.getter();
  result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  result = _VariadicView_Children.endIndex.getter();
  if (v19 < 0 || result < v19)
    goto LABEL_20;
  if (v19)
  {
    result = _VariadicView_Children.endIndex.getter();
    if (result < 1)
    {
LABEL_22:
      __break(1u);
      return result;
    }
    outlined init with copy of SubviewsCollection((uint64_t)v40, (uint64_t)&v37);
    v21 = 1;
  }
  else
  {
    outlined init with copy of SubviewsCollection((uint64_t)v40, (uint64_t)&v37);
    v21 = _VariadicView_Children.endIndex.getter();
  }
  outlined destroy of SubviewsCollection((uint64_t)&v37);
  result = _VariadicView_Children.endIndex.getter();
  if (result < v21)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v22 = result;
  outlined init with copy of SubviewsCollection((uint64_t)v40, (uint64_t)v38);
  *(_QWORD *)&v37 = v21;
  *((_QWORD *)&v37 + 1) = v22;
  outlined destroy of SubviewsCollection((uint64_t)v40);
  if ((a2 & 1) != 0)
  {
    v23 = *(_OWORD *)(a3 + 16);
    v40[0] = *(_OWORD *)a3;
    v40[1] = v23;
    *(_OWORD *)((char *)&v40[1] + 9) = *(_OWORD *)(a3 + 25);
    type metadata accessor for ScaledMetric<CGFloat>();
    ScaledMetric.wrappedValue.getter();
    v24 = *(_QWORD *)(a3 + 64);
    v25 = *(unsigned __int8 *)(a3 + 72);
    v26 = *(unsigned __int8 *)(a3 + 73);
    outlined retain of ListLabelStyle.Implementation(a3);
    outlined copy of Environment<CGFloat?>.Content(v24, v25, v26);
    specialized Environment.wrappedValue.getter(v24, v25 | (v26 << 8));
    outlined consume of Environment<CGFloat?>.Content(v24, v25, v26);
    outlined release of ListLabelStyle.Implementation(a3);
  }
  EdgeInsets.init(_all:)();
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  outlined init with copy of SubviewsCollectionSlice((uint64_t)&v37, (uint64_t)v40);
  BYTE8(v42) = 2;
  *(_QWORD *)&v43 = v28;
  *((_QWORD *)&v43 + 1) = v30;
  *(_QWORD *)&v44 = v32;
  *((_QWORD *)&v44 + 1) = v34;
  LOBYTE(v45) = 0;
  outlined destroy of SubviewsCollectionSlice((uint64_t)&v37);
  v38[4] = v43;
  v38[5] = v44;
  v37 = v40[0];
  v38[0] = v40[1];
  v38[1] = v40[2];
  v39 = v45;
  v38[2] = v41;
  v38[3] = v42;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v47, (uint64_t)v40, type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>);
  outlined init with copy of ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>((uint64_t)&v37, (uint64_t)v36);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v40, a4, type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>);
  outlined init with copy of ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>((uint64_t)v36, a4 + 248);
  outlined destroy of ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>((uint64_t)&v37);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v47, type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>);
  outlined destroy of ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>((uint64_t)v36);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v40, type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>);
}

uint64_t closure #2 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(uint64_t a1, char a2)
{
  uint64_t TextLine;

  if ((a2 & 1) != 0)
    TextLine = static VerticalAlignment._firstTextLineCenter.getter();
  else
    TextLine = static VerticalAlignment.center.getter();
  return MEMORY[0x18D757C9C](TextLine);
}

uint64_t closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  _OWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  _BYTE v55[32];

  v5 = _VariadicView_Children.endIndex.getter();
  v6 = (v5 != 0) & a1;
  v45 = (v5 != 0) & a1;
  if (v5)
  {
    v50 = (unint64_t)static VerticalAlignment.center.getter();
    LOBYTE(v51[0]) = 1;
    v7 = *(_QWORD *)(a2 + 96);
    v8 = *(unsigned __int8 *)(a2 + 104);
    v9 = *(unsigned __int8 *)(a2 + 105);
    outlined retain of ListLabelStyle.Implementation(a2);
    outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
    specialized Environment.wrappedValue.getter(v7, v8 | (v9 << 8), (uint64_t)&v54);
    outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
    v10 = v54;
    if ((_QWORD)v54 == 1)
    {
      static Color.accentColor.getter();
    }
    else
    {
      static Color.secondary.getter();
      if (v10)
        swift_release();
    }
    outlined release of ListLabelStyle.Implementation(a2);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for HStack<LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&protocol witness table for LabelStyleConfiguration.Icon, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    lazy protocol witness table accessor for type HStack<LabelStyleConfiguration.Icon> and conformance HStack<A>();
    View.defaultForegroundColor(_:)();
    swift_release();
    v14 = *((_QWORD *)&v54 + 1);
    v44 = v54;
    v13 = v55[0];
    v16 = *(_QWORD *)&v55[8];
    v15 = *(_QWORD *)&v55[16];
    v17 = *(_QWORD *)(a2 + 80);
    v18 = *(_BYTE *)(a2 + 88);
    outlined retain of ListLabelStyle.Implementation(a2);
    outlined copy of Environment<Bool>.Content(v17, v18);
    specialized Environment.wrappedValue.getter(v17, v18, &v50);
    outlined consume of Environment<Bool>.Content(v17, v18);
    v42 = v16;
    v43 = v15;
    v48 = v14;
    if (v50 > 8u)
    {
      outlined release of ListLabelStyle.Implementation(a2);
      v46 = 0;
    }
    else
    {
      outlined copy of Environment<Bool>.Content(v17, v18);
      specialized Environment.wrappedValue.getter(v17, v18, &v50);
      outlined consume of Environment<Bool>.Content(v17, v18);
      v19 = v50;
      outlined release of ListLabelStyle.Implementation(a2);
      v20 = 1;
      if (v19 < 7)
        v20 = 2;
      v46 = v20;
    }
    KeyPath = swift_getKeyPath();
    v21 = *(_OWORD *)(a2 + 16);
    v54 = *(_OWORD *)a2;
    *(_OWORD *)v55 = v21;
    *(_OWORD *)&v55[9] = *(_OWORD *)(a2 + 25);
    type metadata accessor for ScaledMetric<CGFloat>();
    ScaledMetric.wrappedValue.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    v12 = BYTE8(v54);
    v49 = *(_QWORD *)v55;
    v11 = v55[8];
    v41 = *(_QWORD *)&v55[16];
    v39 = v54;
    v40 = *(_QWORD *)&v55[24];
    if (v6)
    {
      v22 = *(_OWORD *)(a2 + 16);
      v50 = *(_OWORD *)a2;
      v51[0] = v22;
      *(_OWORD *)((char *)v51 + 9) = *(_OWORD *)(a2 + 25);
      v23 = v55[8];
      ScaledMetric.wrappedValue.getter();
      v24 = *(_QWORD *)(a2 + 64);
      v25 = *(unsigned __int8 *)(a2 + 72);
      v26 = v13;
      v27 = *(unsigned __int8 *)(a2 + 73);
      outlined retain of ListLabelStyle.Implementation(a2);
      outlined copy of Environment<CGFloat?>.Content(v24, v25, v27);
      specialized Environment.wrappedValue.getter(v24, v25 | (v27 << 8));
      v28 = v24;
      v11 = v23;
      v29 = v27;
      v13 = v26;
      outlined consume of Environment<CGFloat?>.Content(v28, v25, v29);
      outlined release of ListLabelStyle.Implementation(a2);
    }
  }
  else
  {
    v40 = 0;
    v41 = 0;
    v11 = 0;
    v48 = 0;
    v49 = 0;
    v12 = 0;
    v39 = 0;
    v46 = 0;
    KeyPath = 0;
    v42 = 0;
    v43 = 0;
    v13 = 0;
    v44 = 0;
  }
  View.bodyHeadOutdent(_:)();
  v38 = v52;
  v30 = v53;
  if (one-time initialization token for listRowSeparatorLeading != -1)
    swift_once();
  v36 = static HorizontalAlignment.listRowSeparatorLeading;
  v31 = swift_allocObject();
  v32 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v31 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v31 + 96) = v32;
  *(_OWORD *)(v31 + 106) = *(_OWORD *)(a2 + 90);
  v33 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v31 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v31 + 32) = v33;
  v34 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v31 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v31 + 64) = v34;
  *(_BYTE *)(v31 + 122) = v45;
  *a3 = v44;
  a3[1] = v48;
  a3[2] = v13;
  a3[3] = v42;
  a3[4] = v43;
  a3[5] = KeyPath;
  a3[6] = v46;
  a3[7] = v39;
  a3[8] = v12;
  a3[9] = v49;
  a3[10] = v11;
  a3[11] = v41;
  a3[12] = v40;
  a3[13] = v38;
  a3[14] = v30;
  a3[15] = v36;
  a3[16] = (uint64_t)partial apply for closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter;
  a3[17] = v31;
  a3[18] = v38;
  a3[19] = v30;
  outlined retain of ListLabelStyle.Implementation(a2);
  swift_retain();
  outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?(v44, v48, v13, v42);
  return outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?(v44, v48, v13, v42);
}

double closure #1 in closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  double v8;
  char v9;
  char v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v16;

  type metadata accessor for ScaledMetric<CGFloat>();
  ScaledMetric.wrappedValue.getter();
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(unsigned __int8 *)(a2 + 72);
  v7 = *(unsigned __int8 *)(a2 + 73);
  outlined retain of ListLabelStyle.Implementation(a2);
  outlined copy of Environment<CGFloat?>.Content(v5, v6, v7);
  v8 = COERCE_DOUBLE(specialized Environment.wrappedValue.getter(v5, v6 | (v7 << 8)));
  v10 = v9;
  outlined consume of Environment<CGFloat?>.Content(v5, v6, v7);
  outlined release of ListLabelStyle.Implementation(a2);
  if ((v10 & 1) != 0)
    v11 = 10.0;
  else
    v11 = v8;
  v12 = static HorizontalAlignment.leadingText.getter();
  MEMORY[0x18D757CA8](v12);
  v14 = v16 + v11;
  if ((a3 & 1) == 0)
    v14 = 0.0;
  return v13 - v14;
}

uint64_t key path getter for EnvironmentValues.listItemTint : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>, (uint64_t)&type metadata for ListItemTintKey, (uint64_t)&protocol witness table for ListItemTintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>, (uint64_t)&type metadata for ListItemTintKey, (uint64_t)&protocol witness table for ListItemTintKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.listItemTint : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  outlined copy of Transaction?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);
  return outlined consume of Transaction?(v1);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ListLabelStyle.Implementation()
{
  _ViewListCountInputs.base.getter();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return 1;
}

uint64_t sub_18767C2B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.backgroundProminence.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18767C2F0()
{
  return EnvironmentValues.backgroundProminence.setter();
}

uint64_t sub_18767C324@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.labelIconToTitleSpacing.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_18767C364()
{
  return EnvironmentValues.labelIconToTitleSpacing.setter();
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance VerticalAlignment.ListLabelIconAlignment()
{
  uint64_t v0;

  v0 = static VerticalAlignment.center.getter();
  return MEMORY[0x18D757C9C](v0);
}

uint64_t one-time initialization function for listLabelIconAlignment()
{
  uint64_t result;

  result = VerticalAlignment.init(_:)();
  static VerticalAlignment.listLabelIconAlignment = result;
  return result;
}

uint64_t destroy for ListLabelStyle.Implementation(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), *(_BYTE *)(a1 + 73));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  return outlined consume of Environment<ListItemTint?>.Content(*(_QWORD *)(a1 + 96), *(unsigned __int8 *)(a1 + 104), *(_BYTE *)(a1 + 105));
}

uint64_t initializeWithCopy for ListLabelStyle.Implementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  unsigned __int8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_BYTE *)(a2 + 73);
  v12 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<CGFloat?>.Content(v10, v12, v11);
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 73) = v11;
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v13, v14);
  *(_QWORD *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 88) = v14;
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_BYTE *)(a2 + 105);
  v17 = *(unsigned __int8 *)(a2 + 104);
  outlined copy of Environment<ListItemTint?>.Content(v15, v17, v16);
  *(_QWORD *)(a1 + 96) = v15;
  *(_BYTE *)(a1 + 104) = v17;
  *(_BYTE *)(a1 + 105) = v16;
  return a1;
}

uint64_t assignWithCopy for ListLabelStyle.Implementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  unsigned __int8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v12, v13);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 56) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  v16 = *(_QWORD *)(a2 + 64);
  v17 = *(_BYTE *)(a2 + 73);
  v18 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<CGFloat?>.Content(v16, v18, v17);
  v19 = *(_QWORD *)(a1 + 64);
  v20 = *(_BYTE *)(a1 + 73);
  *(_QWORD *)(a1 + 64) = v16;
  v21 = *(unsigned __int8 *)(a1 + 72);
  *(_BYTE *)(a1 + 72) = v18;
  *(_BYTE *)(a1 + 73) = v17;
  outlined consume of Environment<CGFloat?>.Content(v19, v21, v20);
  v22 = *(_QWORD *)(a2 + 80);
  v23 = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v22, v23);
  v24 = *(_QWORD *)(a1 + 80);
  v25 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v22;
  *(_BYTE *)(a1 + 88) = v23;
  outlined consume of Environment<Bool>.Content(v24, v25);
  v26 = *(_QWORD *)(a2 + 96);
  v27 = *(_BYTE *)(a2 + 105);
  v28 = *(unsigned __int8 *)(a2 + 104);
  outlined copy of Environment<ListItemTint?>.Content(v26, v28, v27);
  v29 = *(_QWORD *)(a1 + 96);
  v30 = *(_BYTE *)(a1 + 105);
  *(_QWORD *)(a1 + 96) = v26;
  v31 = *(unsigned __int8 *)(a1 + 104);
  *(_BYTE *)(a1 + 104) = v28;
  *(_BYTE *)(a1 + 105) = v27;
  outlined consume of Environment<ListItemTint?>.Content(v29, v31, v30);
  return a1;
}

uint64_t assignWithTake for ListLabelStyle.Implementation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v11 = *((_BYTE *)a2 + 56);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  v14 = *((_BYTE *)a2 + 72);
  v15 = *((_BYTE *)a2 + 73);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_BYTE *)(a1 + 73);
  *(_QWORD *)(a1 + 64) = a2[8];
  v18 = *(unsigned __int8 *)(a1 + 72);
  *(_BYTE *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 73) = v15;
  outlined consume of Environment<CGFloat?>.Content(v16, v18, v17);
  v19 = *((_BYTE *)a2 + 88);
  v20 = *(_QWORD *)(a1 + 80);
  v21 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_BYTE *)(a1 + 88) = v19;
  outlined consume of Environment<Bool>.Content(v20, v21);
  v22 = *((_BYTE *)a2 + 104);
  v23 = *((_BYTE *)a2 + 105);
  v24 = *(_QWORD *)(a1 + 96);
  v25 = *(_BYTE *)(a1 + 105);
  *(_QWORD *)(a1 + 96) = a2[12];
  v26 = *(unsigned __int8 *)(a1 + 104);
  *(_BYTE *)(a1 + 104) = v22;
  *(_BYTE *)(a1 + 105) = v23;
  outlined consume of Environment<ListItemTint?>.Content(v24, v26, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListLabelStyle.Implementation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 106))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListLabelStyle.Implementation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 106) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 106) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for ListLabelStyle.Implementation()
{
  return &unk_1E1AB83E0;
}

unint64_t lazy protocol witness table accessor for type ListLabelStyle.Implementation and conformance ListLabelStyle.Implementation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListLabelStyle.Implementation and conformance ListLabelStyle.Implementation;
  if (!lazy protocol witness table cache variable for type ListLabelStyle.Implementation and conformance ListLabelStyle.Implementation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListLabelStyle.Implementation, &unk_1E1AB83E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabelStyle.Implementation and conformance ListLabelStyle.Implementation);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ListLabelStyle.Implementation()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of ListLabelStyle.Implementation(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  char v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 73);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_BYTE *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(_BYTE *)(a1 + 105);
  v10 = *(unsigned __int8 *)(a1 + 72);
  v12 = *(unsigned __int8 *)(a1 + 104);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<CGFloat?>.Content(v6, v10, v7);
  outlined copy of Environment<Bool>.Content(v8, v9);
  outlined copy of Environment<ListItemTint?>.Content(v13, v12, v14);
  return a1;
}

uint64_t outlined release of ListLabelStyle.Implementation(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  char v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 73);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_BYTE *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(_BYTE *)(a1 + 105);
  v10 = *(unsigned __int8 *)(a1 + 72);
  v12 = *(unsigned __int8 *)(a1 + 104);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined consume of Environment<CGFloat?>.Content(v6, v10, v7);
  outlined consume of Environment<Bool>.Content(v8, v9);
  outlined consume of Environment<ListItemTint?>.Content(v13, v12, v14);
  return a1;
}

uint64_t sub_18767CA90()
{
  return objectdestroyTm_22();
}

uint64_t partial apply for closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ListLabelStyle.Implementation.v6Layout.getter(a1, (_OWORD *)(v2 + 16), a2);
}

uint64_t sub_18767CAA8()
{
  return objectdestroyTm_22();
}

uint64_t partial apply for closure #1 in ListLabelStyle.Implementation.preV6Layout.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v5 = swift_allocObject();
  v6 = v2[3];
  *(_OWORD *)(v5 + 72) = v2[4];
  v7 = v2[6];
  *(_OWORD *)(v5 + 88) = v2[5];
  *(_OWORD *)(v5 + 104) = v7;
  *(_OWORD *)(v5 + 114) = *(_OWORD *)((char *)v2 + 106);
  v8 = v2[2];
  *(_OWORD *)(v5 + 24) = v2[1];
  *(_OWORD *)(v5 + 40) = v8;
  *(_BYTE *)(v5 + 16) = a1;
  *(_OWORD *)(v5 + 56) = v6;
  *(_BYTE *)(a2 + 56) = 1;
  *(_QWORD *)(a2 + 64) = partial apply for closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter;
  *(_QWORD *)(a2 + 72) = v5;
  return outlined retain of ListLabelStyle.Implementation((uint64_t)(v2 + 1));
}

uint64_t partial apply for closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter(*(_BYTE *)(v1 + 16), v1 + 24, a1);
}

unint64_t lazy protocol witness table accessor for type HStack<LabelStyleConfiguration.Icon> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<LabelStyleConfiguration.Icon> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<LabelStyleConfiguration.Icon> and conformance HStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&protocol witness table for LabelStyleConfiguration.Icon, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<LabelStyleConfiguration.Icon> and conformance HStack<A>);
  }
  return result;
}

uint64_t sub_18767CBB8()
{
  return objectdestroyTm_22();
}

double partial apply for closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(a1, v1 + 16, *(_BYTE *)(v1 + 122));
}

uint64_t outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(*(_BYTE *)(v1 + 16), v1 + 24, a1);
}

uint64_t sub_18767CC64()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(a1, *(_BYTE *)(v1 + 16));
}

void type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
}

uint64_t type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>(uint64_t a1)
{
  return type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>(a1, &lazy cache variable for type metadata for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>, &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)> and conformance TupleView<A>);
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>, &lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>), (void (*)(uint64_t))type metadata accessor for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>);
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)(255, a3, a4);
    v5 = type metadata accessor for TupleView();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>)
  {
    type metadata accessor for ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E0CE7228], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
  }
}

void type metadata accessor for ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&protocol witness table for LabelStyleConfiguration.Icon, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

void type metadata accessor for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)
  {
    type metadata accessor for LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>> and conformance LabelGroup<A>, (uint64_t (*)(uint64_t))type metadata accessor for LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>, (uint64_t)&protocol conformance descriptor for LabelGroup<A>);
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>);
  }
}

void type metadata accessor for LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>)
  {
    type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>> and conformance <A> Group<A>(&lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>> and conformance <A> Group<A>, (uint64_t (*)(uint64_t))type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>, lazy protocol witness table accessor for type GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>> and conformance GroupElementsOfContent<A, B>);
    v6 = type metadata accessor for LabelGroup(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>);
  }
}

void type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
}

uint64_t type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>;
  if (!lazy cache variable for type metadata for GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>)
  {
    type metadata accessor for TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>, MEMORY[0x1E0CE7EB8]);
    type metadata accessor for GroupElementsOfContent();
  }
  return result;
}

void type metadata accessor for TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>, (uint64_t (*)(uint64_t))type metadata accessor for (StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>))
  {
    type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>, (uint64_t)&type metadata for SubviewsCollectionSlice, MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>));
  }
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>(uint64_t a1)
{
  return type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>(a1, &lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
}

void type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Subview?, (uint64_t)&type metadata for Subview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
  }
}

uint64_t lazy protocol witness table accessor for type GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>> and conformance GroupElementsOfContent<A, B>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>> and conformance GroupElementsOfContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>, (uint64_t)&protocol conformance descriptor for GroupElementsOfContent<A, B>);
}

uint64_t objectdestroy_22Tm()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(v0 + 88), *(unsigned __int8 *)(v0 + 96), *(_BYTE *)(v0 + 97));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
  outlined consume of Environment<ListItemTint?>.Content(*(_QWORD *)(v0 + 120), *(unsigned __int8 *)(v0 + 128), *(_BYTE *)(v0 + 129));
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(a1, *(_BYTE *)(v2 + 16), v2 + 24, a2);
}

unint64_t lazy protocol witness table accessor for type Subview? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type Subview? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Subview? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Subview?, (uint64_t)&type metadata for Subview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = &protocol witness table for Subview;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subview? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined destroy of Subview?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Subview?, (uint64_t)&type metadata for Subview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18767D2E4()
{
  return objectdestroyTm_22();
}

uint64_t outlined init with copy of ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>, (uint64_t)&type metadata for SubviewsCollectionSlice, MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>, (uint64_t)&type metadata for SubviewsCollectionSlice, MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *type metadata accessor for VerticalAlignment.ListLabelIconAlignment()
{
  return &unk_1E1AC78C8;
}

void type metadata accessor for AccessibilityAdaptiveStack<ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityAdaptiveStack<ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier>, type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for AccessibilityAdaptiveStack(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityAdaptiveStack<ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier>, type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>> and conformance <A> Group<A>(&lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>> and conformance <A> Group<A>, (uint64_t (*)(uint64_t))type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, lazy protocol witness table accessor for type GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>> and conformance GroupElementsOfContent<A, B>);
    v3[1] = &protocol witness table for _AlignmentWritingModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>> and conformance GroupElementsOfContent<A, B>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>> and conformance GroupElementsOfContent<A, B>, type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>, (uint64_t)&protocol conformance descriptor for GroupElementsOfContent<A, B>);
}

void type metadata accessor for AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>>)
  {
    type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>> and conformance <A> Group<A>(&lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>> and conformance <A> Group<A>, (uint64_t (*)(uint64_t))type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>, lazy protocol witness table accessor for type GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>> and conformance GroupElementsOfContent<A, B>);
    v6 = type metadata accessor for AccessibilityAdaptiveStack(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>>);
  }
}

void type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>, type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
}

uint64_t type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>(uint64_t a1)
{
  return type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>(a1, &lazy cache variable for type metadata for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>, &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)> and conformance TupleView<A>);
}

uint64_t type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, MEMORY[0x1E0CE7EB8]);
    type metadata accessor for GroupElementsOfContent();
  }
  return result;
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>, &lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>), (void (*)(uint64_t))type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>);
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?();
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>(uint64_t a1)
{
  return type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>(a1, &lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>);
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>(uint64_t a1, uint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, a3, a4);
    a4(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>> and conformance InvertedViewInputPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, MEMORY[0x1E0CE6010]);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>);
  }
}

uint64_t lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>> and conformance <A> Group<A>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7 = a3();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>> and conformance GroupElementsOfContent<A, B>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>> and conformance GroupElementsOfContent<A, B>, type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>, (uint64_t)&protocol conformance descriptor for GroupElementsOfContent<A, B>);
}

double DelaySource.duration.getter(uint64_t a1)
{
  uint64_t v1;
  double v2;

  v2 = *(double *)(v1 + *(int *)(a1 + 36));
  return v2 + (*(double (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t DelaySource.update(value:mix:at:)(uint64_t a1, uint64_t a2, __n128 a3, double a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, __n128, double))(*(_QWORD *)(a2 + 24) + 24))(a1, *(_QWORD *)(a2 + 16), a3, a4 - *(double *)(v4 + *(int *)(a2 + 36)));
}

uint64_t DelaySource.update(velocity:mix:at:)(uint64_t a1, uint64_t a2, __n128 a3, double a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, __n128, double))(*(_QWORD *)(a2 + 24) + 32))(a1, *(_QWORD *)(a2 + 16), a3, a4 - *(double *)(v4 + *(int *)(a2 + 36)));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DelaySource<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DelaySource.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DelaySource);
}

uint64_t AnimatedValueTrack.delay(_:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  return AnimatedValueTrack.delay(_:)((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DelaySource, (uint64_t)&protocol conformance descriptor for DelaySource<A>, a1, a2);
}

double SequencedTrackSource.duration.getter(_QWORD *a1)
{
  double v2;

  v2 = (*(double (**)(_QWORD))(a1[5] + 40))(a1[3]);
  return v2 + (*(double (**)(_QWORD))(a1[6] + 40))(a1[4]);
}

uint64_t SequencedTrackSource.update(value:mix:at:)(uint64_t a1, _QWORD *a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;

  v8 = a2[5];
  v9 = a2[3];
  v10 = (*(double (**)(uint64_t, uint64_t))(v8 + 40))(v9, v8);
  if (v10 <= a4)
    return (*(uint64_t (**)(uint64_t, _QWORD, double, double))(a2[6] + 24))(a1, a2[4], a3, a4 - v10);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v8 + 24))(a1, v9, v8, a3, a4);
}

uint64_t SequencedTrackSource.update(velocity:mix:at:)(uint64_t a1, _QWORD *a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;

  v8 = a2[5];
  v9 = a2[3];
  v10 = (*(double (**)(uint64_t, uint64_t))(v8 + 40))(v9, v8);
  if (v10 <= a4)
    return (*(uint64_t (**)(uint64_t, _QWORD, double, double))(a2[6] + 32))(a1, a2[4], a3, a4 - v10);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v8 + 32))(a1, v9, v8, a3, a4);
}

uint64_t static SequencedTrackSource.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    type metadata accessor for SequencedTrackSource();
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SequencedTrackSource<A, B, C>()
{
  return static SequencedTrackSource.== infix(_:_:)();
}

void AnimatedValueTrackSource.sequenced<A>(before:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[6];

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v15, v13);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)v19 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v18, a2, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  v19[1] = swift_getAssociatedTypeWitness();
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = a5;
  type metadata accessor for SequencedTrackSource();
}

void sub_18767DDD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[3] = a1;
  v5[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SequencedTrackSource<A, B, C>, a1);
  __swift_allocate_boxed_opaque_existential_1(v5);
  (*(void (**)(void))(v7 + 32))();
  *(_QWORD *)(v8 - 120) = v6;
  *(_QWORD *)(v8 - 112) = v4;
  *(_QWORD *)(v8 - 104) = v1;
  *(_QWORD *)(v8 - 96) = v3;
  *(_QWORD *)(v8 - 88) = v2;
  type metadata accessor for SequencedTrackSource();
}

uint64_t sub_18767DE24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3 + *(int *)(a1 + 60), v2, v1);
}

void AnimatedValueTrackSource.sequenced<A>(after:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  _QWORD v20[6];

  v6 = v5;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  (*(void (**)(char *, double))(v15 + 16))((char *)v20 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v6, a2);
  v20[1] = swift_getAssociatedTypeWitness();
  v20[2] = a3;
  v20[3] = a2;
  v20[4] = a5;
  v20[5] = a4;
  type metadata accessor for SequencedTrackSource();
}

void sub_18767DF4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[3] = a1;
  v5[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SequencedTrackSource<A, B, C>, a1);
  __swift_allocate_boxed_opaque_existential_1(v5);
  (*(void (**)(void))(v7 + 32))();
  *(_QWORD *)(v8 - 120) = v6;
  *(_QWORD *)(v8 - 112) = v4;
  *(_QWORD *)(v8 - 104) = v1;
  *(_QWORD *)(v8 - 96) = v3;
  *(_QWORD *)(v8 - 88) = v2;
  type metadata accessor for SequencedTrackSource();
}

uint64_t sub_18767DF98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3 + *(int *)(a1 + 60), v2, v1);
}

void AnimatedValueTrack.sequenced(before:)(_QWORD *a1, uint64_t a2)
{
  AnimatedValueTrack.sequenced(before:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))AnimatedValueTrackSource.sequenced<A>(before:));
}

void AnimatedValueTrack.sequenced(after:)(_QWORD *a1, uint64_t a2)
{
  AnimatedValueTrack.sequenced(before:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))AnimatedValueTrackSource.sequenced<A>(after:));
}

void AnimatedValueTrack.sequenced(before:)(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[5];

  v6 = v3[3];
  v7 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v6);
  v8 = a1[3];
  v9 = a1[4];
  v10 = __swift_project_boxed_opaque_existential_1(a1, v8);
  a3(v11, v10, v6, v8, v7, v9);
  JUMPOUT(0x18767E054);
}

uint64_t TimingCurveTrackSource.update(value:mix:at:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  double (*v9)(uint64_t, uint64_t);
  double v10;
  double v11;
  double v12;

  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v9 = *(double (**)(uint64_t, uint64_t))(v7 + 40);
  v10 = v9(v8, v7);
  v11 = UnitCurve.value(at:)(a4 / v10);
  v12 = v11 * v9(v8, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v7 + 24))(a1, v8, v7, a3, v12);
}

uint64_t TimingCurveTrackSource.update(velocity:mix:at:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  double (*v9)(uint64_t, uint64_t);
  double v10;
  double v11;
  double v12;

  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v9 = *(double (**)(uint64_t, uint64_t))(v7 + 40);
  v10 = v9(v8, v7);
  v11 = UnitCurve.value(at:)(a4 / v10);
  v12 = v11 * v9(v8, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v7 + 32))(a1, v8, v7, a3, v12);
}

uint64_t static TimingCurveTrackSource.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char v7;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    type metadata accessor for TimingCurveTrackSource(0, a3, a4, v6);
    v7 = static UnitCurve.== infix(_:_:)();
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TimingCurveTrackSource<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static TimingCurveTrackSource.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

double AnimatedValueTrackSource.timingCurve(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  char *v18;
  double result;
  __int128 v20;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *v11;
  v12 = *((_QWORD *)v11 + 2);
  v13 = *((_QWORD *)v11 + 3);
  v14 = *((_BYTE *)v11 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a2);
  v16 = type metadata accessor for TimingCurveTrackSource(0, a2, a3, v15);
  a4[3] = v16;
  a4[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimingCurveTrackSource<A>, v16);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 32))(boxed_opaque_existential_1, v10, a2);
  v18 = (char *)boxed_opaque_existential_1 + *(int *)(v16 + 36);
  result = *(double *)&v20;
  *(_OWORD *)v18 = v20;
  *((_QWORD *)v18 + 2) = v12;
  *((_QWORD *)v18 + 3) = v13;
  v18[32] = v14;
  return result;
}

uint64_t AnimatedValueTrack.timingCurve(_:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22[3];
  uint64_t v23;
  uint64_t v24;

  v17 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_BYTE *)a1 + 32);
  v7 = v2[3];
  v8 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v7);
  v18 = v17;
  v19 = v4;
  v20 = v5;
  v21 = v6;
  AnimatedValueTrackSource.timingCurve(_:)((uint64_t)&v18, v7, v8, v22);
  v9 = v23;
  v10 = v24;
  v11 = __swift_project_boxed_opaque_existential_1(v22, v23);
  v12 = MEMORY[0x1E0C80A78](v11, v11);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v15 + 16))(v14, v12);
  AnimatedValueTrack.init<A>(source:)((uint64_t)v14, v9, v10, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
}

uint64_t DurationTrackSource.update(value:mix:at:)(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  double v5;
  double v6;
  double v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a4.n128_f64[0];
  v6 = a3.n128_f64[0];
  v8 = *(double *)(v4 + *(int *)(a2 + 36));
  v10 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  a4.n128_u64[0] = 0;
  if (v8 > 0.0)
    a4.n128_f64[0] = (*(double (**)(_QWORD, _QWORD, __n128, double))(v9 + 40))(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, 0.0)* v5/ v8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, __n128))(v9 + 24))(a1, v10, v9, v6, a4);
}

uint64_t DurationTrackSource.update(velocity:mix:at:)(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  double v5;
  double v6;
  double v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a4.n128_f64[0];
  v6 = a3.n128_f64[0];
  v8 = *(double *)(v4 + *(int *)(a2 + 36));
  v10 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  a4.n128_u64[0] = 0;
  if (v8 > 0.0)
    a4.n128_f64[0] = (*(double (**)(_QWORD, _QWORD, __n128, double))(v9 + 40))(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, 0.0)* v5/ v8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, __n128))(v9 + 32))(a1, v10, v9, v6, a4);
}

double protocol witness for AnimatedValueTrackSource.duration.getter in conformance DurationTrackSource<A>(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 36));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DurationTrackSource<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DelaySource.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DurationTrackSource);
}

uint64_t AnimatedValueTrackSource.duration(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  uint64_t v17;

  v9 = *(_QWORD *)(a1 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v4, a1, v10);
  if (a4 <= 0.0)
    a4 = 0.0;
  v14 = type metadata accessor for DurationTrackSource(0, a1, a2, v13);
  a3[3] = v14;
  a3[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DurationTrackSource<A>, v14);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  result = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v9 + 32))(boxed_opaque_existential_1, v12, a1);
  *(double *)((char *)boxed_opaque_existential_1 + *(int *)(v14 + 36)) = a4;
  return result;
}

uint64_t AnimatedValueTrack.duration(_:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v16[3];
  uint64_t v17;
  uint64_t v18;

  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  AnimatedValueTrackSource.duration(_:)(v5, v6, v16, a2);
  v7 = v17;
  v8 = v18;
  v9 = __swift_project_boxed_opaque_existential_1(v16, v17);
  v10 = MEMORY[0x1E0C80A78](v9, v9);
  v12 = (char *)&v16[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v13 + 16))(v12, v10);
  AnimatedValueTrack.init<A>(source:)((uint64_t)v12, v7, v8, a1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

double SpeedTrackSource.duration.getter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;

  v2 = *(double *)(v1 + *(int *)(a1 + 36));
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 40))(*(_QWORD *)(a1 + 16));
  v4 = 1.0;
  if (v2 > 0.0)
    v4 = v2;
  return v3 / v4;
}

uint64_t SpeedTrackSource.update(value:mix:at:)(uint64_t a1, uint64_t a2, __n128 a3, double a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, __n128, double))(*(_QWORD *)(a2 + 24) + 24))(a1, *(_QWORD *)(a2 + 16), a3, *(double *)(v4 + *(int *)(a2 + 36)) * a4);
}

uint64_t SpeedTrackSource.update(velocity:mix:at:)(uint64_t a1, uint64_t a2, __n128 a3, double a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, __n128, double))(*(_QWORD *)(a2 + 24) + 32))(a1, *(_QWORD *)(a2 + 16), a3, *(double *)(v4 + *(int *)(a2 + 36)) * a4);
}

BOOL static DelaySource.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v10;

  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 0;
  v10 = a5(0, a3, a4);
  return *(double *)(a1 + *(int *)(v10 + 36)) == *(double *)(a2 + *(int *)(v10 + 36));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpeedTrackSource<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DelaySource.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpeedTrackSource);
}

uint64_t AnimatedValueTrackSource.delay(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD, uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>, double a6@<D0>)
{
  uint64_t v6;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  uint64_t v20;

  v13 = *(_QWORD *)(a1 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v6, a1, v14);
  v17 = a3(0, a1, a2);
  a5[3] = v17;
  a5[4] = MEMORY[0x18D75FFDC](a4, v17);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  result = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v16, a1);
  *(double *)((char *)boxed_opaque_existential_1 + *(int *)(v17 + 36)) = a6;
  return result;
}

uint64_t AnimatedValueTrack.speed(_:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  return AnimatedValueTrack.delay(_:)((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SpeedTrackSource, (uint64_t)&protocol conformance descriptor for SpeedTrackSource<A>, a1, a2);
}

uint64_t AnimatedValueTrack.delay(_:)@<X0>(uint64_t (*a1)(_QWORD, uint64_t, uint64_t)@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>, double a4@<D0>)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v20[3];
  uint64_t v21;
  uint64_t v22;

  v9 = v4[3];
  v10 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v9);
  AnimatedValueTrackSource.delay(_:)(v9, v10, a1, a2, v20, a4);
  v11 = v21;
  v12 = v22;
  v13 = __swift_project_boxed_opaque_existential_1(v20, v21);
  v14 = MEMORY[0x1E0C80A78](v13, v13);
  v16 = (char *)&v20[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v17 + 16))(v16, v14);
  AnimatedValueTrack.init<A>(source:)((uint64_t)v16, v11, v12, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t ReversedTrackSource.update(value:mix:at:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  double v8;

  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v8 = (*(double (**)(uint64_t, uint64_t))(v6 + 40))(v7, v6) - a4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v6 + 24))(a1, v7, v6, a3, v8);
}

uint64_t ReversedTrackSource.update(velocity:mix:at:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  double v8;

  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v8 = (*(double (**)(uint64_t, uint64_t))(v6 + 40))(v7, v6) - a4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v6 + 32))(a1, v7, v6, a3, v8);
}

uint64_t static ReversedTrackSource.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ReversedTrackSource<A>()
{
  return static ReversedTrackSource.== infix(_:_:)();
}

uint64_t AnimatedValueTrackSource.reversed()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v3, a1, v8);
  v12 = type metadata accessor for ReversedTrackSource(0, a1, a2, v11);
  a3[3] = v12;
  a3[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReversedTrackSource<A>, v12);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v7 + 32))(boxed_opaque_existential_1, v10, a1);
}

uint64_t AnimatedValueTrack.reversed()@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  AnimatedValueTrackSource.reversed()(v3, v4, v14);
  v5 = v15;
  v6 = v16;
  v7 = __swift_project_boxed_opaque_existential_1(v14, v15);
  v8 = MEMORY[0x1E0C80A78](v7, v7);
  v10 = (char *)&v14[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v11 + 16))(v10, v8);
  AnimatedValueTrack.init<A>(source:)((uint64_t)v10, v5, v6, a1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t type metadata accessor for ReversedTrackSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReversedTrackSource);
}

uint64_t type metadata accessor for SpeedTrackSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SpeedTrackSource);
}

uint64_t type metadata accessor for DurationTrackSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DurationTrackSource);
}

uint64_t type metadata accessor for TimingCurveTrackSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimingCurveTrackSource);
}

void type metadata accessor for SequencedTrackSource()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for DelaySource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DelaySource);
}

uint64_t type metadata completion function for DelaySource()
{
  return type metadata completion function for DelaySource();
}

{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for SequencedTrackSource()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SequencedTrackSource(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18767EF2C + 4 * byte_187C4BA10[v17 - 1]))();
}

void storeEnumTagSinglePayload for SequencedTrackSource(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata completion function for TimingCurveTrackSource()
{
  return type metadata completion function for DelaySource();
}

uint64_t *initializeBufferWithCopyOfBuffer for TimingCurveTrackSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  char v11;
  __int128 v12;
  unint64_t v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 33 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = *(_BYTE *)(v10 + 32);
    v12 = *(_OWORD *)(v10 + 16);
    v13 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)v13 = *(_OWORD *)v10;
    *(_OWORD *)(v13 + 16) = v12;
    *(_BYTE *)(v13 + 32) = v11;
  }
  return v4;
}

uint64_t initializeWithCopy for TimingCurveTrackSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 32);
  v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_BYTE *)(v7 + 32) = v9;
  return a1;
}

uint64_t assignWithCopy for TimingCurveTrackSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 32);
  v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_BYTE *)(v7 + 32) = v9;
  return a1;
}

uint64_t initializeWithTake for TimingCurveTrackSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 32);
  v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_BYTE *)(v7 + 32) = v9;
  return a1;
}

uint64_t assignWithTake for TimingCurveTrackSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 32);
  v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_BYTE *)(v7 + 32) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for TimingCurveTrackSource(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  v6 = ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 33;
  v7 = (a2 - v5 + 255) >> (8 * v6);
  if (v6 < 4)
    v8 = v7 + 1;
  else
    v8 = 2;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v9 = 1;
  if (v8 >= 2)
    v10 = v9;
  else
    v10 = 0;
  return ((uint64_t (*)(void))((char *)&loc_18767F478 + 4 * byte_187C4BA1E[v10]))();
}

void storeEnumTagSinglePayload for TimingCurveTrackSource(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (v7 >= a3)
  {
    v12 = 0u;
    if (v7 >= a2)
      goto LABEL_14;
  }
  else
  {
    v9 = (a3 - v7 + 255) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v7 >= a2)
LABEL_14:
      __asm { BR              X11 }
  }
  if (v8 >= 4)
    v13 = ~v7 + a2;
  else
    v13 = (~(_BYTE)v7 + a2);
  bzero(a1, v8);
  if ((_DWORD)v8 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_18767F5F0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18767F5F8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18767F600);
}

void sub_18767F61C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18767F624()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_18767F62C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x18767F634);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for DelaySource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for DelaySource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for DelaySource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DelaySource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DelaySource(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_18767F8F0 + 4 * byte_187C4BA2D[v8]))();
}

void storeEnumTagSinglePayload for DelaySource(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_18767FA30()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18767FA38(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18767FA40);
}

void sub_18767FA5C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_18767FA64()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_18767FA6C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x18767FA74);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t getEnumTagSinglePayload for ReversedTrackSource(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18767FB3C + 4 * byte_187C4BA3C[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ReversedTrackSource(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t instantiation function for generic protocol witness table for DelaySource<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DelaySource<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for SequencedTrackSource<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SequencedTrackSource<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for TimingCurveTrackSource<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimingCurveTrackSource<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for DurationTrackSource<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DurationTrackSource<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for SpeedTrackSource<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpeedTrackSource<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ReversedTrackSource<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReversedTrackSource<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void static TabBarOnlyTabViewStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_18767FEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v3 = type metadata accessor for AdaptableTabView(255, v1, v0, v2);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v1, v0, v4);
  type metadata accessor for _VariadicView.Tree();
  v6 = type metadata accessor for TabBarOnlyTabViewStyle.Body(0, v1, v0, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabBarOnlyTabViewStyle.Body<A>, v6);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>, v3);
  return static _VariadicView.Tree<>._makeView(view:inputs:)();
}

uint64_t type metadata accessor for TabBarOnlyTabViewStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TabBarOnlyTabViewStyle.Body);
}

void static TabBarOnlyTabViewStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_187680088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v3 = type metadata accessor for AdaptableTabView(255, v1, v0, v2);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v1, v0, v4);
  type metadata accessor for _VariadicView.Tree();
  v6 = type metadata accessor for TabBarOnlyTabViewStyle.Body(0, v1, v0, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabBarOnlyTabViewStyle.Body<A>, v6);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>, v3);
  return static _VariadicView.Tree<>._makeViewList(view:inputs:)();
}

void TabBarOnlyTabViewStyle.Body.base.getter()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_1876801EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void TabBarOnlyTabViewStyle.Body.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Binding();
  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for _TabViewValue();
}

void sub_1876802C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1, a2);
  v6 = type metadata accessor for AdaptableTabView(0, v3, v2, v5);
  *(_QWORD *)(v4 - 224) = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  TabBarOnlyTabViewStyle.Body.base.getter();
}

uint64_t sub_18768033C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v4, v9, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v9, v8);
  default argument 0 of AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)(v10 - 112);
  v11 = *(_BYTE *)(v10 - 104);
  *(_QWORD *)(v10 - 128) = *(_QWORD *)(v10 - 112);
  *(_BYTE *)(v10 - 120) = v11;
  default argument 1 of AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)(v10 - 144);
  v12 = *(_BYTE *)(v10 - 136);
  *(_QWORD *)(v10 - 160) = *(_QWORD *)(v10 - 144);
  *(_BYTE *)(v10 - 152) = v12;
  KeyPath = swift_getKeyPath();
  v14 = swift_getKeyPath();
  AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)(v10 - 128, (uint64_t *)(v10 - 160), KeyPath, 0, 0, 0, v14, 0, v6, 0, 0, v4, 0, 0, 0, 2, v2, v1);
  *(_QWORD *)(v10 - 192) = v2;
  *(_QWORD *)(v10 - 184) = v1;
  *(_DWORD *)(v10 - 176) = v5;
  type metadata accessor for TabViewStyleConfiguration.Content(0, v2, v1, v15);
  return _VariadicView.Tree.init(_:content:)();
}

void closure #1 in TabBarOnlyTabViewStyle.Body.value.getter()
{
  type metadata accessor for _TabViewValue();
}

void sub_1876804B0(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  TabBarOnlyTabViewStyle.Body.base.getter();
}

uint64_t sub_1876804F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  v7 = type metadata accessor for TabViewStyleConfiguration.Content(0, v1, v0, v6);
  v8 = static ViewBuilder.buildExpression<A>(_:)(v7, v7, &protocol witness table for TabViewStyleConfiguration<A>.Content);
  return static ViewBuilder.buildBlock<A>(_:)(v8, v7, v2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance TabBarOnlyTabViewStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  type metadata accessor for AdaptableTabView(255, v4, v5, a2);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v4, v5, v6);
  v7 = type metadata accessor for _VariadicView.Tree();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

void protocol witness for Rule.value.getter in conformance TabBarOnlyTabViewStyle.Body<A>()
{
  TabBarOnlyTabViewStyle.Body.value.getter();
}

ValueMetadata *type metadata accessor for TabBarOnlyTabViewStyle()
{
  return &type metadata for TabBarOnlyTabViewStyle;
}

void base witness table accessor for _AttributeBody in TabBarOnlyTabViewStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void partial apply for closure #1 in TabBarOnlyTabViewStyle.Body.value.getter()
{
  closure #1 in TabBarOnlyTabViewStyle.Body.value.getter();
}

uint64_t specialized AccessibilityDisclosureModifier.List.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v45 = a4;
  v43 = a2;
  v44 = a3;
  v47 = a5;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>();
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v42 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v42 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v46 = (uint64_t)&v42 - v21;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  v22 = swift_allocObject();
  *(_BYTE *)(v22 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  v48 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  v24 = v49;
  v23 = v50;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v24;
  *(_QWORD *)(v25 + 24) = v23;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>);
  swift_release();
  v26 = (uint64_t *)&v10[*(int *)(v7 + 36)];
  *v26 = v25;
  v26[1] = v22;
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v25 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined init with take of TableCellFormula((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  v27 = &v14[*(int *)(v7 + 36)];
  v28 = *(_QWORD *)v27;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v28 + 16, 0x4000000040);
  swift_endAccess();
  swift_release();
  swift_release();
  v49 = 3;
  AccessibilityNullableOptionSet<>.init(adding:)();
  v29 = *(_QWORD *)v27 + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v29);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  v30 = swift_allocObject();
  v31 = v44;
  *(_QWORD *)(v30 + 16) = v43;
  *(_QWORD *)(v30 + 24) = v31;
  *(_BYTE *)(v30 + 32) = v45;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for specialized closure #1 in AccessibilityDisclosureModifier.List.body(content:);
  *(_QWORD *)(v32 + 24) = v30;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_187BF9830;
  LODWORD(v28) = AccessibilityActionHandlerSeed++;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>(0);
  *(_QWORD *)(v33 + 56) = v34;
  *(_QWORD *)(v33 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  v35 = swift_allocObject();
  *(_QWORD *)(v33 + 32) = v35;
  *(_OWORD *)(v35 + 16) = 0u;
  *(_OWORD *)(v35 + 32) = 0u;
  *(_OWORD *)(v35 + 48) = 0u;
  *(_QWORD *)(v35 + 64) = 0;
  *(_QWORD *)(v35 + 72) = 2;
  *(_OWORD *)(v35 + 80) = 0u;
  *(_OWORD *)(v35 + 96) = 0u;
  *(_QWORD *)(v35 + 112) = 0;
  *(_QWORD *)(v35 + 120) = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  *(_QWORD *)(v35 + 128) = v32;
  *(_DWORD *)(v35 + 136) = v28;
  *(_BYTE *)(v33 + 72) = 0;
  v36 = (uint64_t *)(*(_QWORD *)&v18[*(int *)(v7 + 36)] + 16);
  swift_beginAccess();
  v37 = *v36;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  specialized AccessibilityProperties.subscript.getter(v37);
  swift_bridgeObjectRelease();
  v38 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v38);
  v48 = specialized AccessibilityProperties.subscript.getter(*v36);
  v39 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v39);
  specialized AccessibilityProperties.subscript.setter(v48);
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  v40 = v46;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, v46, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  return outlined init with take of TableCellFormula(v40, v47, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
}

uint64_t protocol witness for DisclosureGroupStyle.makeBody(configuration:) in conformance ListDisclosureGroupStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = *((_BYTE *)a1 + 16);
  v6 = *v2;
  v7 = *((_QWORD *)v2 + 1);
  v8 = *((_QWORD *)v2 + 2);
  v9 = v2[24];
  *(_BYTE *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = v4;
  *(_BYTE *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = 0;
  swift_retain();
  outlined copy of Environment<Bool>.Content(v8, v9);
  swift_retain();
  return swift_retain();
}

uint64_t static IsLeafTraitKey.defaultValue.getter()
{
  return 1;
}

ValueMetadata *type metadata accessor for IsLeafTraitKey()
{
  return &type metadata for IsLeafTraitKey;
}

uint64_t destroy for ListDisclosureGroupStyle(uint64_t a1)
{
  swift_release();
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for ListDisclosureGroupStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 24);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v3, v4);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithCopy for ListDisclosureGroupStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = a2;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(v2 + 16);
  LOBYTE(v2) = *(_BYTE *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v4, v2);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v2;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

uint64_t assignWithTake for ListDisclosureGroupStyle(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ListDisclosureGroupStyle()
{
  return &type metadata for ListDisclosureGroupStyle;
}

uint64_t associated type witness table accessor for DisclosureGroupStyle.Body : View in ListDisclosureGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for ListDisclosureGroupStyledContainer()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListDisclosureGroupStyledContainer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
    *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
    *(_QWORD *)(((unint64_t)v4 + v6 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 31) & 0xFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ListDisclosureGroupStyledContainer(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ListDisclosureGroupStyledContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ListDisclosureGroupStyledContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_retain();
  swift_release();
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for ListDisclosureGroupStyledContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_BYTE *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = v11;
  *(_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ListDisclosureGroupStyledContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  swift_release();
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_release();
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListDisclosureGroupStyledContainer(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1876811FC + 4 * byte_187C4BE30[v10]))();
  }
}

void storeEnumTagSinglePayload for ListDisclosureGroupStyledContainer(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 31) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 31) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 31) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187681374()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1876813F0);
}

void sub_18768137C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187681384);
  JUMPOUT(0x1876813F0);
}

void sub_1876813C8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876813F0);
}

void sub_1876813D0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876813F0);
}

uint64_t sub_1876813D8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x1876813E4);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1876813F0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for ListDisclosureGroupStyledContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListDisclosureGroupStyledContainer);
}

unint64_t lazy protocol witness table accessor for type ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>;
  if (!lazy protocol witness table cache variable for type ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle, (uint64_t)&type metadata for ListDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListDisclosureGroupStyledContainer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListDisclosureGroupStyledContainer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ListDisclosureGroupStyledContainer<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ListDisclosureGroupStyledContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  uint64_t v65;
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[4];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  _QWORD v73[2];
  _QWORD v74[2];
  uint64_t v75;
  char *v76;
  char v77;

  v4 = v3;
  v58 = a3;
  type metadata accessor for DisclosureGroupStyleModifier(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v59 = type metadata accessor for ModifiedContent();
  v60 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<OutlineRootConfiguration.Key>, (uint64_t)&type metadata for OutlineRootConfiguration.Key, (uint64_t)&protocol witness table for OutlineRootConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v57 = v6;
  v7 = type metadata accessor for ModifiedContent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v52 - v14;
  v16 = type metadata accessor for Optional();
  v53 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v56 = (uint64_t)&v52 - v22;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>();
  v52 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v55 = (uint64_t)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v54 = (uint64_t)&v52 - v28;
  ListDisclosureGroupStyledContainer.label.getter(a1, (uint64_t)&v52 - v28);
  v29 = v4 + *(int *)(a1 + 36);
  v30 = *(_QWORD *)v29;
  v31 = *(char **)(v29 + 8);
  LOBYTE(v29) = *(_BYTE *)(v29 + 16);
  v75 = v30;
  v76 = v31;
  v77 = v29;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v70);
  if (LOBYTE(v70[0]) == 1)
  {
    ListDisclosureGroupStyledContainer.content.getter(a1, v32, (uint64_t)v11);
    v64[0] = &protocol witness table for DisclosureGroupStyleConfiguration.Content;
    v64[1] = &protocol witness table for DisclosureGroupStyleModifier<A>;
    v33 = MEMORY[0x1E0CE2E70];
    v63[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v59, v64);
    v63[1] = &protocol witness table for ListDisclosureGroupIndentationModifier;
    v62[0] = MEMORY[0x18D75FFDC](v33, v60, v63);
    v62[1] = &protocol witness table for IncrementListDisclosureGroupDepth;
    v34 = v57;
    v35 = MEMORY[0x18D75FFDC](v33, v57, v62);
    v36 = lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>();
    v61[0] = v35;
    v61[1] = v36;
    v37 = MEMORY[0x18D75FFDC](v33, v7, v61);
    static ViewBuilder.buildExpression<A>(_:)(v11, v7, v37);
    v38 = *(void (**)(char *, uint64_t))(v8 + 8);
    v38(v11, v7);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, v7, (uint64_t)v19);
    v38(v15, v7);
    v39 = v34;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v19, 1, 1, v7);
    v74[0] = &protocol witness table for DisclosureGroupStyleConfiguration.Content;
    v74[1] = &protocol witness table for DisclosureGroupStyleModifier<A>;
    v40 = MEMORY[0x1E0CE2E70];
    v73[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v59, v74);
    v73[1] = &protocol witness table for ListDisclosureGroupIndentationModifier;
    v72[0] = MEMORY[0x18D75FFDC](v40, v60, v73);
    v72[1] = &protocol witness table for IncrementListDisclosureGroupDepth;
    v39 = v57;
    v41 = MEMORY[0x18D75FFDC](v40, v57, v72);
    v42 = lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>();
    v71[0] = v41;
    v71[1] = v42;
    MEMORY[0x18D75FFDC](v40, v7, v71);
  }
  v43 = v56;
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v19, v56);
  v44 = v53;
  v45 = *(void (**)(char *, uint64_t))(v53 + 8);
  v45(v19, v16);
  v47 = v54;
  v46 = v55;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v54, v55, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  v75 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v19, v43, v16);
  v76 = v19;
  v70[0] = v52;
  v70[1] = v16;
  v69[2] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  v69[0] = &protocol witness table for DisclosureGroupStyleConfiguration.Content;
  v69[1] = &protocol witness table for DisclosureGroupStyleModifier<A>;
  v48 = MEMORY[0x1E0CE2E70];
  v68[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v59, v69);
  v68[1] = &protocol witness table for ListDisclosureGroupIndentationModifier;
  v67[0] = MEMORY[0x18D75FFDC](v48, v60, v68);
  v67[1] = &protocol witness table for IncrementListDisclosureGroupDepth;
  v49 = MEMORY[0x18D75FFDC](v48, v39, v67);
  v50 = lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>();
  v66[0] = v49;
  v66[1] = v50;
  v65 = MEMORY[0x18D75FFDC](v48, v7, v66);
  v69[3] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v16, &v65);
  static ViewBuilder.buildBlock<each A>(_:)(&v75, 2uLL, (uint64_t)v70);
  v45((char *)v43, v16);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  v45(v19, v16);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v46, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
}

uint64_t ListDisclosureGroupStyledContainer.label.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  char v25;
  uint64_t v26;

  type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>();
  v10 = v9;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  ListDisclosureGroupStyledContainer.resolvedLabel.getter(a1, v14, (uint64_t)v8);
  v15 = v2 + *(int *)(a1 + 36);
  v16 = *(_QWORD *)(v15 + 8);
  v17 = *(_BYTE *)(v15 + 16);
  v24[1] = *(_QWORD *)v15;
  v24[2] = v16;
  v25 = v17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v26);
  v18 = v26;
  v19 = swift_allocObject();
  *(_BYTE *)(v19 + 16) = 0;
  *(_BYTE *)(v19 + 17) = v18;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
  v20 = &v13[*(int *)(v10 + 36)];
  *(_QWORD *)v20 = _s7SwiftUI4ViewPAAE11outlineRoot_10isExpandedQrSb_SbSgtFyAA07OutlineE13ConfigurationVzcfU_TA_0;
  *((_QWORD *)v20 + 1) = v19;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
  v21 = *(_QWORD *)v15;
  v22 = *(_QWORD *)(v15 + 8);
  LODWORD(v8) = *(unsigned __int8 *)(v15 + 16);
  swift_retain();
  swift_retain();
  specialized AccessibilityDisclosureModifier.List.body(content:)((uint64_t)v13, v21, v22, (int)v8, a2);
  swift_release();
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>);
}

uint64_t ListDisclosureGroupStyledContainer.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];

  v24 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  type metadata accessor for DisclosureGroupStyleModifier(255, v4, *(_QWORD *)(a1 + 24), a2);
  v5 = type metadata accessor for ModifiedContent();
  v21 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v21 - v7;
  v9 = type metadata accessor for ModifiedContent();
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = type metadata accessor for ModifiedContent();
  v23 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v21 - v15;
  View.disclosureGroupStyle<A>(_:)(v3, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, v4, (uint64_t)&protocol witness table for DisclosureGroupStyleConfiguration.Content);
  v27[0] = &protocol witness table for DisclosureGroupStyleConfiguration.Content;
  v27[1] = &protocol witness table for DisclosureGroupStyleModifier<A>;
  v17 = MEMORY[0x1E0CE2E70];
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v27);
  View.listDisclosureGroupIndentation(base:step:)(v5, v18, 20.0, 20.0);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v5);
  v26[0] = v18;
  v26[1] = &protocol witness table for ListDisclosureGroupIndentationModifier;
  v19 = MEMORY[0x18D75FFDC](v17, v9, v26);
  MEMORY[0x18D75B4AC](v19, v9, &type metadata for IncrementListDisclosureGroupDepth, v19);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v9);
  v25[0] = v19;
  v25[1] = &protocol witness table for IncrementListDisclosureGroupDepth;
  MEMORY[0x18D75FFDC](v17, v13, v25);
  View.outlineRoot(_:isExpanded:)(0, 2);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v16, v13);
}

uint64_t ListDisclosureGroupStyledContainer.resolvedLabel.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;

  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = static VerticalAlignment.center.getter();
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  type metadata accessor for _VariadicView.Tree<_HStackLayout, Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>();
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  closure #1 in closure #1 in ListDisclosureGroupStyledContainer.resolvedLabel.getter(v14, v15, (uint64_t)&v12[*(int *)(v13 + 44)]);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a1);
  v16 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v17 + v16, v8, a1);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, a3, (uint64_t (*)(_QWORD))type metadata accessor for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>);
  type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
  v19 = (uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(a3 + *(int *)(v18 + 36));
  *v19 = partial apply for closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter;
  v19[1] = (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v17;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>);
}

uint64_t ListDisclosureGroupStyledContainer.disclosureIndicator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t (**v30)();
  uint64_t (*v31)();
  __int16 v32;
  uint64_t KeyPath;
  uint64_t v34;
  char *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v3 = v2;
  v39 = a2;
  type metadata accessor for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>(0);
  v6 = v5;
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (_WORD *)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  v38 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v2 + *(int *)(a1 + 36);
  v23 = *(_QWORD *)v22;
  v24 = *(_QWORD *)(v22 + 8);
  LOBYTE(v22) = *(_BYTE *)(v22 + 16);
  v40 = v23;
  v41 = v24;
  v42 = v22;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v43);
  v25 = v43;
  v27 = *(_QWORD *)(a1 + 16);
  v26 = *(_QWORD *)(a1 + 24);
  v29 = implicit closure #1 in ListDisclosureGroupStyledContainer.disclosureIndicator.getter(v3, v27, v26, v28);
  *v9 = 256;
  v30 = (uint64_t (**)())((char *)v9 + *(int *)(v6 + 36));
  *v30 = v29;
  v30[1] = v31;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  if (v25)
    v32 = 257;
  else
    v32 = 1;
  closure #1 in ListDisclosureGroupStyledContainer.disclosureIndicator.getter(v32, v27, v26, (uint64_t)v9 + *(int *)(v6 + 40));
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>);
  KeyPath = swift_getKeyPath();
  v34 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  v35 = &v17[*(int *)(v38 + 36)];
  *(_QWORD *)v35 = KeyPath;
  v35[8] = 0;
  *((_QWORD *)v35 + 2) = v34;
  v35[24] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  specialized View.accessibility<A>(_:_:isEnabled:)(0x400000004uLL, 1, (uint64_t)v21);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  return outlined init with take of TableCellFormula((uint64_t)v21, v39, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>);
}

uint64_t (*implicit closure #1 in ListDisclosureGroupStyledContainer.disclosureIndicator.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = type metadata accessor for ListDisclosureGroupStyledContainer(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v16 - v11, a1, v7, v10);
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, v12, v7);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter;
}

uint64_t ListDisclosureGroupStyledContainer.toggleExpansion()()
{
  swift_retain();
  swift_retain();
  specialized static RotatingDisclosureIndicator.toggle(_:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in ListDisclosureGroupStyledContainer.disclosureIndicator.getter@<X0>(__int16 a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for ListDisclosureGroupStyledContainer(0, a2, a3, a3);
  result = EdgeInsets.init(_all:)();
  *(_BYTE *)a4 = a1 & 1;
  *(_BYTE *)(a4 + 1) = HIBYTE(a1) & 1;
  *(_BYTE *)(a4 + 8) = 8;
  *(_QWORD *)(a4 + 16) = v7;
  *(_QWORD *)(a4 + 24) = v8;
  *(_QWORD *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 40) = v10;
  *(_BYTE *)(a4 + 48) = 0;
  return result;
}

uint64_t closure #1 in closure #1 in ListDisclosureGroupStyledContainer.resolvedLabel.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v18 - v12;
  v15 = type metadata accessor for ListDisclosureGroupStyledContainer(0, a1, a2, v14);
  ListDisclosureGroupStyledContainer.disclosureIndicator.getter(v15, (uint64_t)v13);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  type metadata accessor for (DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, a3 + *(int *)(v16 + 64), (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>);
}

uint64_t closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v8 = type metadata accessor for PlatformItemList.Item();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v26 - v15;
  v17 = *a1;
  PlatformItemList.containerSelectionBehavior.getter(*a1, (uint64_t)&v27);
  v18 = v28;
  result = outlined consume of PlatformItemList.Item.SelectionBehavior?(v27, v28, v29, v30, v31, v32);
  if (v18 == 1)
  {
    PlatformItemList.mergedContentItem.getter(v17, (uint64_t)v16);
    swift_bridgeObjectRelease();
    v21 = implicit closure #1 in closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter(a2, a3, a4, v20);
    v23 = v22;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(*((_QWORD *)v16 + 50), *((_QWORD *)v16 + 51), *((_QWORD *)v16 + 52), *((_QWORD *)v16 + 53), *((_QWORD *)v16 + 54), *((_QWORD *)v16 + 55));
    *((_QWORD *)v16 + 50) = 65793;
    *((_QWORD *)v16 + 51) = v21;
    *((_QWORD *)v16 + 52) = v23;
    *(_OWORD *)(v16 + 424) = 0u;
    *(_OWORD *)(v16 + 440) = 0u;
    *(_OWORD *)(v16 + 449) = 0u;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_187BF9830;
    outlined init with take of TableCellFormula((uint64_t)v12, v25 + v24, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    *a1 = v25;
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  }
  return result;
}

uint64_t (*implicit closure #1 in closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = type metadata accessor for ListDisclosureGroupStyledContainer(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v16 - v11, a1, v7, v10);
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, v12, v7);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter;
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>)
  {
    type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<OutlineRootConfiguration.Key>, (uint64_t)&type metadata for OutlineRootConfiguration.Key, (uint64_t)&protocol witness table for OutlineRootConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, MEMORY[0x1E0CE73D0]);
    v3[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_187682934()
{
  return swift_deallocObject();
}

uint64_t sub_187682944()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in AccessibilityDisclosureModifier.List.body(content:)@<X0>(_BYTE *a1@<X8>)
{
  return closure #1 in AccessibilityDisclosureModifier.List.body(content:)(a1);
}

uint64_t sub_18768297C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1876829A0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for _VariadicView.Tree<_HStackLayout, Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>);
  }
}

uint64_t partial apply for closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ListDisclosureGroupStyledContainer(0, v6, v7, a4)
                                      - 8)
                          + 80);
  return closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t objectdestroy_12Tm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ListDisclosureGroupStyledContainer(0, v5, *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v6 + 32) & ~v6), v5);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for ListDisclosureGroupStyledContainer(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return ListDisclosureGroupStyledContainer.toggleExpansion()();
}

void sub_187682BEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>();
  type metadata accessor for DisclosureGroupStyleModifier(255, v1, v2, v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<OutlineRootConfiguration.Key>, (uint64_t)&type metadata for OutlineRootConfiguration.Key, (uint64_t)&protocol witness table for OutlineRootConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  JUMPOUT(0x18D75FFDCLL);
}

void static MoveCommandDirection.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MoveCommandDirection.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void MoveCommandDirection.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.onMoveCommand(perform:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.onExitCommand(perform:)(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 9;
  return View.onPhysicalButtonPress(_:perform:)((uint64_t)&v3, a1, a2);
}

void View.pageCommand<A>(value:in:step:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type MoveCommandDirection and conformance MoveCommandDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MoveCommandDirection and conformance MoveCommandDirection;
  if (!lazy protocol witness table cache variable for type MoveCommandDirection and conformance MoveCommandDirection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MoveCommandDirection, &type metadata for MoveCommandDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MoveCommandDirection and conformance MoveCommandDirection);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MoveCommandDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_187682DFC + 4 * byte_187C4BF85[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_187682E30 + 4 * byte_187C4BF80[v4]))();
}

uint64_t sub_187682E30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187682E38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187682E40);
  return result;
}

uint64_t sub_187682E4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187682E54);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_187682E58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187682E60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MoveCommandDirection()
{
  return &type metadata for MoveCommandDirection;
}

uint64_t sub_187682E7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>> and conformance AddGestureModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>, MEMORY[0x1E0CE41B8]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>)
  {
    type metadata accessor for _EndedGesture<PhysicalButtonPressGesture>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EndedGesture<PhysicalButtonPressGesture> and conformance _EndedGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EndedGesture<PhysicalButtonPressGesture>, MEMORY[0x1E0CE2260]);
    v0 = type metadata accessor for AddGestureModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<PhysicalButtonPressGesture>>);
  }
}

void type metadata accessor for _EndedGesture<PhysicalButtonPressGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EndedGesture<PhysicalButtonPressGesture>)
  {
    lazy protocol witness table accessor for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture();
    v0 = type metadata accessor for _EndedGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EndedGesture<PhysicalButtonPressGesture>);
  }
}

uint64_t sub_187682FCC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void View.onPlayPauseCommand(perform:)()
{
  View.onMoveCommand(perform:)();
}

void View.onDeleteCommand(perform:)()
{
  View.onMoveCommand(perform:)();
}

uint64_t NavigationLinkButtonStyle.init(destination:presentedValue:modifierID:shouldTargetSourceColumn:deprecated_isActive:authority:listKey:stackKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15)
{
  char v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = a4;
  *(_BYTE *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  v19 = a9 + *(int *)(type metadata accessor for NavigationLinkButtonStyle(0, a14, a15, a4) + 36);
  v21 = type metadata accessor for NavigationLinkButtonStyle.Payload(0, a14, a15, v20);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v28(v19, 1, 1, v21);
  v22 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v19, v22);
  NavigationLinkButtonStyle.PayloadV4.init(destination:presentedValue:modifierID:shouldTargetSourceColumn:deprecated_isActive:authority:listKey:stackKey:)(a1, a2, a3, v15, a5, a6, a7, a8, v19, a10, (__n128)__PAIR128__(a12, a11), a13, a14, a15);
  swift_storeEnumTagMultiPayload();
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v28)(v19, 0, 1, v21);
}

uint64_t NavigationLinkButtonStyle.init(deprecated_isActive:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  v13 = a7 + *(int *)(type metadata accessor for NavigationLinkButtonStyle(0, a5, a6, a4) + 36);
  v15 = type metadata accessor for NavigationLinkButtonStyle.Payload(0, a5, a6, v14);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v20(v13, 1, 1, v15);
  v16 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v13, v16);
  *(_QWORD *)v13 = a1;
  *(_QWORD *)(v13 + 8) = a2;
  *(_BYTE *)(v13 + 16) = a3;
  v18 = type metadata accessor for NavigationLinkButtonStyle.PayloadV1(0, a5, a6, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v13 + *(int *)(v18 + 36), a4, a5);
  swift_storeEnumTagMultiPayload();
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v20)(v13, 0, 1, v15);
}

double static PrimitiveButtonStyle<>.navigationLink.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = -1;
  return result;
}

double NavigationLinkButtonStyle.init<>()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = -1;
  return result;
}

__n128 NavigationLinkButtonStyle.PayloadV4.init(destination:presentedValue:modifierID:shouldTargetSourceColumn:deprecated_isActive:authority:listKey:stackKey:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __n128 a11, unint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  __n128 *v26;
  __n128 result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a13 - 8) + 32))(a9, a1, a13);
  v23 = (int *)type metadata accessor for NavigationLinkButtonStyle.PayloadV4(0, a13, a14, v22);
  *(_QWORD *)(a9 + v23[9]) = a2;
  *(_QWORD *)(a9 + v23[10]) = a3;
  *(_BYTE *)(a9 + v23[11]) = a4;
  v24 = a9 + v23[12];
  *(_QWORD *)v24 = a5;
  *(_QWORD *)(v24 + 8) = a6;
  *(_BYTE *)(v24 + 16) = a7;
  v25 = MEMORY[0x1E0DEB940];
  outlined init with take of WeakBox<Swift.AnyObject>(a8, a9 + v23[13], &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  outlined init with take of WeakBox<Swift.AnyObject>(a10, a9 + v23[14], &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(_QWORD, uint64_t))v25);
  v26 = (__n128 *)(a9 + v23[15]);
  result = a11;
  *v26 = a11;
  v26[1].n128_u64[0] = a12;
  return result;
}

uint64_t NavigationLinkButtonStyle.Payload.deprecated_isActive.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(_BYTE *, uint64_t);
  void (*v29)(uint64_t *, uint64_t);
  _BYTE v31[8];
  uint64_t v32;

  v5 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4(0, v7, v8, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v31[-v12];
  v15 = type metadata accessor for NavigationLinkButtonStyle.PayloadV1(0, v7, v8, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (uint64_t *)&v31[-v18];
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = &v31[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v25 + 16))(v24, v5, a1, v22);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v13, v24, v9);
    v26 = (uint64_t *)&v13[*(int *)(v9 + 48)];
    if (v26[1])
    {
      v27 = *v26;
      v28 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
      swift_retain();
      swift_retain();
      v28(v13, v9);
    }
    else
    {
      v31[7] = 0;
      static Binding.constant(_:)();
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
      return v32;
    }
  }
  else
  {
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v16 + 32))(v19, v24, v15);
    v27 = *v19;
    v29 = *(void (**)(uint64_t *, uint64_t))(v16 + 8);
    swift_retain();
    swift_retain();
    v29(v19, v15);
  }
  return v27;
}

uint64_t NavigationLinkButtonStyle.Payload.presentedValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v3 = v2;
  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4(0, *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), v9);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v3, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v7, v10);
    v16 = *(_QWORD *)&v15[*(int *)(v10 + 36)];
    v17 = *(void (**)(char *, uint64_t))(v11 + 8);
    swift_retain();
    v17(v15, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
    return 0;
  }
  return v16;
}

uint64_t NavigationLinkButtonStyle.isPresentingViewDestinationView.getter()
{
  unsigned __int8 v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  return v1;
}

uint64_t NavigationLinkButtonStyle.isPresentingViewDestinationView.setter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t NavigationLinkButtonStyle.$isPresentingViewDestinationView.getter()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  return v1;
}

uint64_t NavigationLinkButtonStyle.reconfiguration(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (**v67)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v68;
  char *v69;
  _BYTE *v70;

  v5 = v4;
  v68 = (unsigned __int8 *)a1;
  v70 = (_BYTE *)a4;
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v9 = type metadata accessor for NavigationLinkButtonStyle.PayloadV1(0, v8, v7, a3);
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  v10 = *(_QWORD *)(v59 + 64);
  MEMORY[0x1E0C80A78](v9, v11);
  v64 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v57 = (char *)&v57 - v14;
  v65 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v62 = v17;
  v69 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for ButtonAction();
  MEMORY[0x1E0C80A78](v66, v18);
  v67 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4(0, v8, v7, v20);
  v21 = *(_QWORD *)(v58 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  MEMORY[0x1E0C80A78](v58, v23);
  v61 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v57 - v26;
  v29 = type metadata accessor for NavigationLinkButtonStyle.Payload(255, v8, v7, v28);
  v30 = type metadata accessor for Optional();
  v32 = MEMORY[0x1E0C80A78](v30, v31);
  v34 = (char *)&v57 - v33;
  v35 = *(int *)(a2 + 36);
  v63 = v5;
  (*(void (**)(char *, uint64_t, double))(v36 + 16))((char *)&v57 - v33, v5 + v35, v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v34, 1, v29) == 1)
    return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v68, (uint64_t)v70, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v38 = v68;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v39 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v40 = v58;
    v39(v27, v34, v58);
    LODWORD(v64) = *v38;
    LODWORD(v68) = v38[1];
    v41 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v69, v63, a2);
    v39(v61, v27, v40);
    v42 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    v43 = (v62 + v42 + *(unsigned __int8 *)(v21 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 16) = v8;
    *(_QWORD *)(v44 + 24) = v7;
    (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))(v44 + v42, v69, a2);
    v39((char *)(v44 + v43), v61, v40);
    v45 = (uint64_t)v67;
    *v67 = partial apply for closure #1 in NavigationLinkButtonStyle.reconfiguration(from:);
    *(_QWORD *)(v45 + 8) = v44;
    swift_storeEnumTagMultiPayload();
    v46 = v70;
    v47 = (char)v64;
  }
  else
  {
    v49 = v59;
    v48 = v60;
    v50 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
    v51 = v57;
    v50(v57, v34, v60);
    LODWORD(v61) = *v38;
    LODWORD(v68) = v38[1];
    v52 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v69, v63, a2);
    v50(v64, v51, v48);
    v53 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
    v54 = (v62 + v53 + *(unsigned __int8 *)(v49 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
    v55 = swift_allocObject();
    *(_QWORD *)(v55 + 16) = v8;
    *(_QWORD *)(v55 + 24) = v7;
    (*(void (**)(unint64_t, char *, uint64_t))(v52 + 32))(v55 + v53, v69, a2);
    v50((char *)(v55 + v54), v64, v48);
    v45 = (uint64_t)v67;
    *v67 = partial apply for closure #2 in NavigationLinkButtonStyle.reconfiguration(from:);
    *(_QWORD *)(v45 + 8) = v55;
    swift_storeEnumTagMultiPayload();
    v46 = v70;
    v47 = (char)v61;
  }
  *v46 = v47;
  v46[1] = (_BYTE)v68;
  v56 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  return outlined init with take of TableCellFormula(v45, (uint64_t)&v46[*(int *)(v56 + 24)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
}

uint64_t NavigationLinkButtonStyle.triggerV4(payload:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v6 = (uint64_t *)(a1
                 + *(int *)(type metadata accessor for NavigationLinkButtonStyle.PayloadV4(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4)+ 48));
  v7 = v6[1];
  if (!v7)
    return NavigationLinkButtonStyle.present()(a2, v5);
  outlined copy of Binding<NavigationSplitViewColumn>?(*v6, v7);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release_n();
  return swift_release_n();
}

uint64_t NavigationLinkButtonStyle.present()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, int *);
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  int *v77;
  uint64_t v78;
  __int128 v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[4];
  uint64_t v108;
  _BYTE v109[24];
  _QWORD v110[2];
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD v114[2];
  __int128 v115;
  _BYTE v116[64];

  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v75 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)&v74 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 24);
  v9 = type metadata accessor for NavigationLinkButtonStyle.Payload(255, v4, v7, v8);
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v69 - v13;
  v16 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4(0, v4, v7, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v77 = (int *)v16;
  v78 = v17;
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v76 = (char *)&v69 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, v2 + *(int *)(a1 + 36), v10, v19);
  v21 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v14, 1, v9) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v14, v9);
  v24 = v77;
  v23 = v78;
  v25 = v76;
  (*(void (**)(char *, char *, int *))(v78 + 32))(v76, v14, v77);
  outlined init with copy of NavigationAuthority?((uint64_t)&v25[v24[13]], (uint64_t)&v103);
  if (*((_QWORD *)&v103 + 1) == 1)
  {
    (*(void (**)(char *, int *))(v23 + 8))(v25, v24);
    return outlined destroy of NavigationAuthority?((uint64_t)&v103);
  }
  outlined init with take of NavigationAuthority((uint64_t)&v103, (uint64_t)v109);
  v26 = &v25[v24[14]];
  v27 = *((_QWORD *)v26 + 5);
  if (v27 == 1)
  {
    v28 = &v25[v24[15]];
    v29 = v28[8];
    if (v29 == 6)
    {
      v30 = 0;
      v29 = 0;
      v27 = 0;
      v31 = 0uLL;
      v32 = 0x1FFFFFFFELL;
    }
    else
    {
      v32 = 0;
      v27 = 0;
      v30 = *(_QWORD *)v28;
      v31 = *((unint64_t *)v28 + 2);
    }
  }
  else
  {
    v33 = *((_QWORD *)v26 + 4);
    v31 = *((_OWORD *)v26 + 1);
    v30 = *(_QWORD *)v26;
    v29 = *(_QWORD *)&v25[v24[14] + 8];
    v32 = v33 & 1 | 0x4000000000000000;
  }
  v110[0] = v30;
  v110[1] = v29;
  v111 = v31;
  v112 = v32;
  v113 = v27;
  outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v110, (uint64_t)v114, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if ((unint64_t)v115 >> 1 == 0xFFFFFFFF)
    goto LABEL_13;
  outlined init with take of NavigationRequest.KeyKind((uint64_t)v114, (uint64_t)v116);
  v37 = *(_QWORD *)&v25[v24[9]];
  if (v37)
  {
    v74 = v114[1];
    v75 = v114[0];
    v73 = v115;
    outlined init with take of NavigationRequest.KeyKind((uint64_t)v116, (uint64_t)v79);
    if (!((unint64_t)v80 >> 62))
    {
      *(_QWORD *)&v80 = v80 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      static Transaction.current.getter();
      v55 = &v25[v24[12]];
      v57 = *(_QWORD *)v55;
      v56 = *((_QWORD *)v55 + 1);
      v58 = v55[16];
      if (v56)
      {
        v59 = v58 & 1;
        *(_QWORD *)&v103 = v57;
        *((_QWORD *)&v103 + 1) = v56;
        LOBYTE(v104) = v58 & 1;
        v44 = v56;
        v60 = v57;
      }
      else
      {
        LOBYTE(v87) = 0;
        static Binding.constant(_:)();
        v44 = *((_QWORD *)&v103 + 1);
        v60 = v103;
        v59 = v104;
      }
      v43 = v59;
      swift_retain();
      outlined copy of Binding<NavigationSplitViewColumn>?(v57, v56);
      swift_retain();
      swift_retain();
      v61 = Transaction.disablesAnimations.getter();
      v62 = Transaction.animation.getter();
      swift_release();
      swift_release();
      swift_release();
      v42 = 0;
      v63 = 10;
      goto LABEL_31;
    }
    if ((unint64_t)v80 >> 62 == 1)
    {
      *(_QWORD *)&v80 = v80 & 0x3FFFFFFFFFFFFFFFLL;
      v38 = &v25[v24[12]];
      v40 = *(_QWORD *)v38;
      v39 = *((_QWORD *)v38 + 1);
      v41 = v38[16];
      if (v39)
      {
        LODWORD(v42) = v41 & 1;
        *(_QWORD *)&v103 = *(_QWORD *)v38;
        *((_QWORD *)&v103 + 1) = v39;
        LOBYTE(v104) = v41 & 1;
        swift_retain();
        v43 = v39;
        v44 = v40;
      }
      else
      {
        LOBYTE(v87) = 0;
        swift_retain();
        static Binding.constant(_:)();
        v43 = *((_QWORD *)&v103 + 1);
        v44 = v103;
        LODWORD(v42) = v104;
      }
      outlined copy of Binding<NavigationSplitViewColumn>?(v40, v39);
      static Transaction.current.getter();
      v42 = v42;
      swift_retain();
      swift_retain();
      swift_retain();
      v61 = Transaction.disablesAnimations.getter();
      v62 = Transaction.animation.getter();
      swift_release();
      swift_release();
      swift_release();
      v60 = 0;
      v63 = 17;
LABEL_31:
      v67 = v78;
      *(_QWORD *)&v103 = v37;
      *((_QWORD *)&v103 + 1) = v60;
      *(_QWORD *)&v104 = v44;
      *((_QWORD *)&v104 + 1) = v43;
      v105 = v42;
      v106 = 0uLL;
      LOBYTE(v107[0]) = v63;
      *(_OWORD *)((char *)v107 + 8) = v75;
      *(_OWORD *)((char *)&v107[1] + 8) = v74;
      *(_OWORD *)((char *)&v107[2] + 8) = v73;
      BYTE8(v107[3]) = v61 & 1;
      v108 = v62;
      v93 = v107[2];
      v94 = v107[3];
      v95 = v62;
      v89 = v42;
      v90 = 0u;
      v91 = v107[0];
      v92 = v107[1];
      v87 = v103;
      v88 = v104;
      outlined retain of NavigationRequest((uint64_t)&v103);
      NavigationAuthority.enqueueRequest(_:)(&v87);
      swift_release();
      outlined release of NavigationRequest((uint64_t)&v103);
      outlined release of NavigationRequest((uint64_t)&v103);
      outlined destroy of NavigationAuthority((uint64_t)v109);
      v34 = *(uint64_t (**)(char *, int *))(v67 + 8);
      v35 = v76;
      v36 = v77;
      return v34(v35, v36);
    }
  }
  else if ((NavigationLinkButtonStyle.isPresentingViewDestinationView.getter() & 1) == 0)
  {
    NavigationLinkButtonStyle.isPresentingViewDestinationView.setter();
    (*(void (**)(_QWORD, char *, uint64_t))(v75 + 16))(v74, v25, v4);
    v45 = *(_QWORD *)&v25[v24[10]];
    v99 = 0;
    v100 = 0;
    v101 = 1;
    v102 = v45;
    v70 = v45;
    *(_QWORD *)&v73 = NavigationLinkButtonStyle.$isPresentingViewDestinationView.getter();
    v71 = v46;
    v72 = v47;
    v48 = &v25[v24[12]];
    v50 = *(_QWORD *)v48;
    v49 = *((_QWORD *)v48 + 1);
    v51 = v48[16];
    if (v49)
    {
      v52 = v51 & 1;
      v96 = v50;
      v97 = v49;
      v98 = v51 & 1;
      v53 = v49;
      v54 = v50;
    }
    else
    {
      LOBYTE(v103) = 0;
      static Binding.constant(_:)();
      v54 = v96;
      v53 = v97;
      v52 = v98;
    }
    *(_QWORD *)&v103 = v70;
    *((_QWORD *)&v103 + 1) = v54;
    *(_QWORD *)&v104 = v53;
    BYTE8(v104) = v52;
    outlined copy of Binding<NavigationSplitViewColumn>?(v50, v49);
    lazy protocol witness table accessor for type PresentingToActivationProjection and conformance PresentingToActivationProjection();
    v64 = dispatch thunk of AnyLocation.projecting<A>(_:)();
    swift_release();
    swift_release();
    swift_release();
    v65 = v25[v24[11]];
    static Transaction.current.getter();
    v68 = v7;
    v66 = v74;
    static NavigationRequest.presentView<A>(_:from:identifier:binding:shouldTargetSourceColumn:transaction:)(v74, (uint64_t)v116, v73, v64, v72 & 1, v65, (uint64_t)&v103, v4, v68);
    swift_release();
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(0, 1);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v66, v4);
    v93 = v107[2];
    v94 = v107[3];
    v89 = v105;
    v90 = v106;
    v91 = v107[0];
    v92 = v107[1];
    v87 = v103;
    v88 = v104;
    v84 = v107[2];
    v85 = v107[3];
    v80 = v105;
    v81 = v106;
    v82 = v107[0];
    v83 = v107[1];
    v95 = v108;
    v86 = v108;
    v79[0] = v103;
    v79[1] = v104;
    NavigationAuthority.enqueueRequest(_:)(v79);
    outlined release of NavigationRequest((uint64_t)&v87);
    outlined destroy of NavigationAuthority((uint64_t)v109);
    v34 = *(uint64_t (**)(char *, int *))(v78 + 8);
    goto LABEL_14;
  }
LABEL_13:
  outlined destroy of NavigationAuthority((uint64_t)v109);
  v34 = *(uint64_t (**)(char *, int *))(v23 + 8);
LABEL_14:
  v35 = v25;
  v36 = v24;
  return v34(v35, v36);
}

void NavigationLinkButtonStyle.makeBody(configuration:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[12];
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v41 = a1;
  v39 = a3;
  v38 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v36 = v3;
  v37 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v33 = type metadata accessor for NavigationLinkButtonStyle.Payload(255, v5, v6, v7);
  v42 = type metadata accessor for Optional();
  v40 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v8);
  v32 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v30 = (char *)v27 - v12;
  v35 = v5;
  v34 = v6;
  v14 = type metadata accessor for ContentListItemNavigationLinkStyle(0, v5, v6, v13);
  v31 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v29 = (char *)v27 - v16;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v27[3] = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  MEMORY[0x1E0C80A78](v19, v20);
  v27[8] = (char *)v27 - v21;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<PlainListStyleContext>, (uint64_t)&type metadata for PlainListStyleContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
  v23 = v22;
  v27[11] = v14;
  v28 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentListItemNavigationLinkStyle<A>, v14);
  v25 = type metadata accessor for PrimitiveButtonStyleContainerModifier(255, v14, v28, v24);
  v26 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<PlainListStyleContext>, (uint64_t)&type metadata for PlainListStyleContext);
  v43 = v23;
  v44 = v25;
  v27[5] = v25;
  v45 = MEMORY[0x1E0CE1E98];
  v46 = v26;
  type metadata accessor for StaticIf();
}

void sub_1876846A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t (*v10)(_QWORD, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v12 - 656) = a1;
  v13 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 600) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v12 - 712) = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)(v12 - 368) = (char *)&a9 - v15;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetListStyleContext>, (uint64_t)&type metadata for InsetListStyleContext, v10);
  v17 = v16;
  v18 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetListStyleContext>, (uint64_t)&type metadata for InsetListStyleContext);
  *(_QWORD *)(v12 - 120) = v17;
  *(_QWORD *)(v12 - 112) = v11;
  *(_QWORD *)(v12 - 104) = v9;
  *(_QWORD *)(v12 - 96) = v18;
  type metadata accessor for StaticIf();
}

void sub_187684750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)(_QWORD, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(v10 - 648) = a1;
  v11 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 608) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v10 - 688) = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  *(_QWORD *)(v10 - 720) = (char *)&a9 - v13;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  v14 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 592) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v10 - 664) = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v10 - 696) = (char *)&a9 - v16;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  v17 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 560) = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v10 - 736) = (char *)&a9 - v19;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BindingActionModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5530]);
  *(_QWORD *)(v10 - 552) = v17;
  v20 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 456) = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)(v10 - 352) = (char *)&a9 - v22;
  v23 = MEMORY[0x1E0CE6840];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E0CE6840], v9);
  v25 = v24;
  *(_QWORD *)(v10 - 448) = v20;
  v26 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityDefaultActionRepresentableStyle);
  v27 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 528) = v26;
  v28 = type metadata accessor for ModifiedContent();
  v29 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, v23);
  *(_QWORD *)(v10 - 120) = v25;
  *(_QWORD *)(v10 - 112) = v27;
  *(_QWORD *)(v10 - 544) = v27;
  *(_QWORD *)(v10 - 536) = v28;
  *(_QWORD *)(v10 - 104) = v28;
  *(_QWORD *)(v10 - 96) = v29;
  type metadata accessor for StaticIf();
}

void sub_1876849FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(v14 - 480) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v14 - 488) = (char *)&a9 - v16;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, v11, v12, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for KeyboardShortcutBindingBehavior);
  *(_QWORD *)(v14 - 472) = a1;
  v17 = *(_QWORD *)(v14 - 376);
  v18 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 464) = v18;
  *(_QWORD *)(v14 - 496) = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  *(_QWORD *)(v14 - 512) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  *(_QWORD *)(v14 - 504) = (char *)&a9 - v23;
  v24 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  *(_QWORD *)(v14 - 640) = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v14 - 632) = v26;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&a9 - v30;
  NavigationLinkButtonStyle.reconfiguration(from:)(*(_QWORD *)(v14 - 360), v10, v32, (uint64_t)&a9 - v30);
  *(_QWORD *)(v14 - 360) = v31;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v31, (uint64_t)v27, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v33 = v27[1];
  *v13 = *v27;
  v13[1] = v33;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v27[*(int *)(v24 + 24)], (uint64_t)&v13[*(int *)(*(_QWORD *)(v14 - 744) + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  *(_QWORD *)(v14 - 568) = v27;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v13, *(_QWORD *)(v14 - 704));
  *(_QWORD *)(v14 - 392) = v10;
  v34 = *(int *)(v10 + 36);
  *(_QWORD *)(v14 - 440) = v9;
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v36 = *(_QWORD *)(v14 - 616);
  *(_QWORD *)(v14 - 752) = v9 + v34;
  v37 = *(_QWORD *)(v14 - 344);
  v35(v36, v9 + v34, v37);
  *(_QWORD *)(v14 - 760) = v35;
  v38 = *(_QWORD *)(v14 - 624);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v38, v36, v37);
  lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
  lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext();
  View.buttonStyle<A, B>(_:in:)(v38, v39);
}

void sub_187684C88()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 584) + 8);
  *(_QWORD *)(v8 - 584) = v9;
  v9(v4, v0);
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>(v5);
  v10 = *(_QWORD *)(v8 - 344);
  v2(v6, v7, v10);
  v3(v4, v6, v10);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, *(_QWORD *)(v8 - 728));
  v12 = MEMORY[0x1E0CE1E88];
  *(_QWORD *)(v8 - 136) = v11;
  *(_QWORD *)(v8 - 128) = v12;
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, *(_QWORD *)(v8 - 656), v8 - 136);
  *(_QWORD *)(v8 - 152) = v1;
  *(_QWORD *)(v8 - 144) = v13;
  MEMORY[0x18D75FFDC]();
  lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext();
  View.buttonStyle<A, B>(_:in:)(v4, v14);
}

void sub_187684D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t))(v8 - 584))(v5, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 600) + 8))(v1, v2);
  *(_QWORD *)(v8 - 168) = v6;
  *(_QWORD *)(v8 - 160) = MEMORY[0x1E0CE1E88];
  v9 = MEMORY[0x18D75FFDC](v3, *(_QWORD *)(v8 - 648), v8 - 168);
  *(_QWORD *)(v8 - 184) = v4;
  *(_QWORD *)(v8 - 176) = v9;
  MEMORY[0x18D75FFDC](v7, *(_QWORD *)(v8 - 688), v8 - 184);
  lazy protocol witness table accessor for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle();
  v10 = lazy protocol witness table accessor for type AnyListStyleContext and conformance AnyListStyleContext();
  View.buttonStyle<A, B>(_:in:)(v10, v11);
}

void sub_187684E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 608) + 8))(v3, v0);
  v5 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v4 - 200) = v2;
  *(_QWORD *)(v4 - 192) = v5;
  MEMORY[0x18D75FFDC](v1, *(_QWORD *)(v4 - 664), v4 - 200);
  v6 = lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();
  View.buttonStyle<A, B>(_:in:)(v6, v7);
}

uint64_t sub_187684EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);

  v7 = *(_QWORD *)(v6 - 344);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 592) + 8))(v2, v0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 - 760))(v4, *(_QWORD *)(v6 - 752), v7);
  v8 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 376) + 8))(v4, v7);
    *(_BYTE *)(v6 - 224) = 0;
    static Binding.constant(_:)();
    v12 = *(_QWORD *)(v6 - 120);
    v13 = *(_QWORD *)(v6 - 112);
    v14 = *(_BYTE *)(v6 - 104);
  }
  else
  {
    v12 = NavigationLinkButtonStyle.Payload.deprecated_isActive.getter(v3, v9, v10, v11);
    v13 = v15;
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v3);
    *(_QWORD *)(v6 - 120) = v12;
    *(_QWORD *)(v6 - 112) = v13;
    v14 = v17 & 1;
    *(_BYTE *)(v6 - 104) = v17 & 1;
  }
  *(_QWORD *)(v6 - 224) = v12;
  *(_QWORD *)(v6 - 216) = v13;
  *(_BYTE *)(v6 - 208) = v14;
  v18 = *(_QWORD *)(v6 - 400);
  v19 = *(_QWORD *)(v6 - 408);
  v20 = *(_QWORD *)(v6 - 392);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 16))(v19, *(_QWORD *)(v6 - 440), v20);
  v21 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v22 = swift_allocObject();
  v23 = *(_QWORD *)(v6 - 432);
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v6 - 424);
  *(_QWORD *)(v22 + 24) = v23;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 32))(v22 + v21, v19, v20);
  v24 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v6 - 240) = v1;
  *(_QWORD *)(v6 - 232) = v24;
  v25 = MEMORY[0x1E0CE2E70];
  v26 = *(_QWORD *)(v6 - 552);
  v27 = MEMORY[0x18D75FFDC]();
  View._onBindingChange<A>(_:perform:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 560) + 8))(v5, v26);
  v28 = *(_QWORD *)(v6 - 568);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v6 - 360), v28, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v29 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 640) + 80);
  v30 = (v29 + 16) & ~v29;
  *(_QWORD *)(v6 - 368) = v30 + *(_QWORD *)(v6 - 632);
  v31 = v30;
  *(_QWORD *)(v6 - 344) = v30;
  *(_QWORD *)(v6 - 376) = v29 | 7;
  v32 = swift_allocObject();
  outlined init with take of TableCellFormula(v28, v32 + v31, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v33 = lazy protocol witness table accessor for type _BindingActionModifier<Bool> and conformance _BindingActionModifier<A>();
  *(_QWORD *)(v6 - 256) = v27;
  *(_QWORD *)(v6 - 248) = v33;
  v34 = *(_QWORD *)(v6 - 448);
  v35 = MEMORY[0x18D75FFDC](v25, v34, v6 - 256);
  AccessibilityNavigationLinkButtonModifier.init(trigger:label:)((uint64_t)partial apply for closure #2 in NavigationLinkButtonStyle.makeBody(configuration:), v32, (_QWORD *)(v6 - 120));
  v36 = *(_QWORD *)(v6 - 112);
  *(_QWORD *)(v6 - 224) = *(_QWORD *)(v6 - 120);
  *(_QWORD *)(v6 - 216) = v36;
  v38 = type metadata accessor for AccessibilityNavigationLinkButtonModifier(0, v34, v35, v37);
  v39 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityNavigationLinkButtonModifier<A>, v38);
  *(_QWORD *)(v6 - 272) = v35;
  *(_QWORD *)(v6 - 264) = &protocol witness table for AccessibilityAttachmentModifier;
  v40 = MEMORY[0x18D75FFDC](v25, *(_QWORD *)(v6 - 528), v6 - 272);
  v41 = lazy protocol witness table accessor for type AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label> and conformance AccessibilityDefaultActionRepresentableStyle<A>();
  *(_QWORD *)(v6 - 288) = v40;
  *(_QWORD *)(v6 - 280) = v41;
  v42 = MEMORY[0x18D75FFDC](v25, *(_QWORD *)(v6 - 544), v6 - 288);
  v43 = lazy protocol witness table accessor for type AccessibilityDefaultAction and conformance AccessibilityDefaultAction();
  *(_QWORD *)(v6 - 304) = v40;
  *(_QWORD *)(v6 - 296) = v43;
  v44 = MEMORY[0x18D75FFDC](v25, *(_QWORD *)(v6 - 536), v6 - 304);
  *(_QWORD *)(v6 - 320) = v42;
  *(_QWORD *)(v6 - 312) = v44;
  v45 = *(_QWORD *)(v6 - 472);
  v46 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v45, v6 - 320);
  v47 = *(_QWORD *)(v6 - 488);
  v48 = v35;
  v49 = *(_QWORD *)(v6 - 352);
  View.accessibilityConfiguration<A>(_:)(v6 - 224, v34, v38, v48, v39);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 456) + 8))(v49, v34);
  v50 = *(_QWORD *)(v6 - 360);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v50, v28, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v51 = swift_allocObject();
  v52 = outlined init with take of TableCellFormula(v28, v51 + *(_QWORD *)(v6 - 344), type metadata accessor for PrimitiveButtonStyleConfiguration);
  MEMORY[0x1E0C80A78](v52, v53);
  v54 = *(_QWORD *)(v6 - 512);
  View.keyboardShortcutBindingBehavior<A>(action:label:)((uint64_t)partial apply for closure #3 in NavigationLinkButtonStyle.makeBody(configuration:), v51, (void (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, v45, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, v46, v54);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 480) + 8))(v47, v45);
  *(_QWORD *)(v6 - 336) = v46;
  *(_QWORD *)(v6 - 328) = &protocol witness table for KeyboardShortcutBindingBehavior<A>;
  v55 = *(_QWORD *)(v6 - 464);
  v56 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v55, v6 - 336);
  v57 = *(_QWORD *)(v6 - 504);
  static ViewBuilder.buildExpression<A>(_:)(v54, v55, v56);
  v58 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 496) + 8);
  v58(v54, v55);
  static ViewBuilder.buildBlock<A>(_:)(v57, v55, *(_QWORD *)(v6 - 384));
  v58(v57, v55);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v50, type metadata accessor for PrimitiveButtonStyleConfiguration);
}

uint64_t type metadata accessor for NavigationLinkButtonStyle.Payload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationLinkButtonStyle.Payload);
}

uint64_t type metadata accessor for ContentListItemNavigationLinkStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentListItemNavigationLinkStyle);
}

unint64_t lazy protocol witness table accessor for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle;
  if (!lazy protocol witness table cache variable for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultListNavigationLinkStyle, &unk_1E1AFCCB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle, (uint64_t)&unk_1E1AFCCB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(a5, a3, a4);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v2[0] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle, (uint64_t)&unk_1E1AFCCB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

uint64_t closure #1 in NavigationLinkButtonStyle.makeBody(configuration:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  int *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD v35[2];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _BYTE v51[8];
  uint64_t v52;

  v8 = type metadata accessor for NavigationLinkButtonStyle.Payload(255, a3, a4, a4);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v35 - v12;
  v36 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4(0, a3, a4, v14);
  v15 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v16);
  v18 = (char *)v35 - v17;
  v19 = *a1;
  v21 = type metadata accessor for NavigationLinkButtonStyle(0, a3, a4, v20);
  v22 = *(int *)(v21 + 36);
  v35[1] = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2 + v22, v9);
  v23 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v13, 1, v8) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v13, v8);
  v25 = v15;
  v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v27 = (int *)v36;
  v26(v18, v13, v36);
  if (v19)
  {
    NavigationLinkButtonStyle.present()(v21, v28);
    return (*(uint64_t (**)(char *, int *))(v25 + 8))(v18, v27);
  }
  if (*(_QWORD *)&v18[v27[9]])
    return (*(uint64_t (**)(char *, int *))(v25 + 8))(v18, v27);
  v29 = &v18[v27[15]];
  v30 = v29[8];
  if (v30 == 6)
    return (*(uint64_t (**)(char *, int *))(v25 + 8))(v18, v27);
  v31 = *(_QWORD *)v29;
  v32 = *((_QWORD *)v29 + 2);
  NavigationLinkButtonStyle.isPresentingViewDestinationView.setter();
  outlined init with copy of NavigationAuthority?((uint64_t)&v18[v27[13]], (uint64_t)v51);
  if (v52 == 1)
  {
    (*(void (**)(char *, int *))(v25 + 8))(v18, v27);
    return outlined destroy of NavigationAuthority?((uint64_t)v51);
  }
  else
  {
    v33 = *(_QWORD *)&v18[v27[10]];
    static Transaction.current.getter();
    v34 = Transaction.disablesAnimations.getter();
    swift_release();
    v37 = 0uLL;
    v38 = 1;
    v39 = v33;
    v40 = 0u;
    v41 = 0u;
    v42 = 19;
    v43 = v31;
    v44 = v30;
    v45 = v32;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = v34 & 1;
    v50 = 0;
    NavigationAuthority.enqueueRequest(_:)(&v37);
    (*(void (**)(char *, int *))(v25 + 8))(v18, v27);
    return outlined destroy of NavigationAuthority((uint64_t)v51);
  }
}

uint64_t sub_1876858F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = type metadata accessor for NavigationLinkButtonStyle(0, v5, v6, a4);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
  swift_release();
  v9 = v4 + ((v8 + 32) & ~v8) + *(int *)(v7 + 36);
  v11 = type metadata accessor for NavigationLinkButtonStyle.Payload(0, v5, v6, v10);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9, v5);
      v13 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4(0, v5, v6, v12);
      swift_release();
      if (*(_QWORD *)(v9 + *(int *)(v13 + 48) + 8))
      {
        swift_release();
        swift_release();
      }
      if (*(_QWORD *)(v9 + *(int *)(v13 + 52) + 8) != 1)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      v15 = type metadata accessor for NavigationLinkButtonStyle.PayloadV1(0, v5, v6, v14);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9 + *(int *)(v15 + 36), v5);
    }
  }
  return swift_deallocObject();
}

uint64_t type metadata accessor for NavigationLinkButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationLinkButtonStyle);
}

uint64_t type metadata accessor for NavigationLinkButtonStyle.PayloadV1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationLinkButtonStyle.PayloadV1);
}

uint64_t type metadata accessor for NavigationLinkButtonStyle.PayloadV4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationLinkButtonStyle.PayloadV4);
}

uint64_t partial apply for closure #1 in NavigationLinkButtonStyle.makeBody(configuration:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NavigationLinkButtonStyle(0, v6, v7, a4) - 8) + 80);
  return closure #1 in NavigationLinkButtonStyle.makeBody(configuration:)(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    v2[0] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t closure #2 in NavigationLinkButtonStyle.makeBody(configuration:)(uint64_t a1)
{
  return implicit closure #2 in implicit closure #1 in WrappedButtonStyleBody.body.getter(a1, (void (*)(void))closure #1 in ButtonAction.callAsFunction()partial apply);
}

uint64_t partial apply for closure #2 in NavigationLinkButtonStyle.makeBody(configuration:)()
{
  return partial apply for implicit closure #2 in implicit closure #1 in AccessibilityButtonModifier.init(_:)(closure #2 in NavigationLinkButtonStyle.makeBody(configuration:));
}

unint64_t lazy protocol witness table accessor for type _BindingActionModifier<Bool> and conformance _BindingActionModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _BindingActionModifier<Bool> and conformance _BindingActionModifier<A>;
  if (!lazy protocol witness table cache variable for type _BindingActionModifier<Bool> and conformance _BindingActionModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BindingActionModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5530]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5540], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BindingActionModifier<Bool> and conformance _BindingActionModifier<A>);
  }
  return result;
}

uint64_t closure #3 in NavigationLinkButtonStyle.makeBody(configuration:)(uint64_t a1)
{
  return implicit closure #2 in implicit closure #1 in WrappedButtonStyleBody.body.getter(a1, (void (*)(void))partial apply for closure #1 in ButtonAction.callAsFunction());
}

uint64_t partial apply for closure #3 in NavigationLinkButtonStyle.makeBody(configuration:)()
{
  return partial apply for implicit closure #2 in implicit closure #1 in AccessibilityButtonModifier.init(_:)(closure #3 in NavigationLinkButtonStyle.makeBody(configuration:));
}

uint64_t ContentListItemNavigationLinkStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  *(_QWORD *)a3 = static HorizontalAlignment.center.getter();
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>(0, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>, type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>);
  return closure #1 in ContentListItemNavigationLinkStyle.makeBody(configuration:)(v3, a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3 + *(int *)(v7 + 44));
}

uint64_t closure #1 in ContentListItemNavigationLinkStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  char *v28;
  uint64_t v30;
  uint64_t v31;

  v30 = a2;
  v31 = a5;
  v8 = type metadata accessor for NavigationLinkButtonStyle.Payload(255, a3, a4, a4);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v30 - v12;
  v14 = type metadata accessor for DefaultListNavigationLinkStyle.ListLink();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>(0);
  v19 = v18;
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentListItemNavigationLinkStyle(0, a3, a4, v23);
  ContentListItemNavigationLinkStyle.appearance(for:)(v30, (uint64_t)v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  v24 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v13, 1, v8) == 1)
  {
    v26 = 0;
  }
  else
  {
    v26 = NavigationLinkButtonStyle.Payload.presentedValue.getter(v8, v25);
    v10 = v24;
    v9 = v8;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  KeyPath = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for DefaultListNavigationLinkStyle.ListLink);
  v28 = &v22[*(int *)(v19 + 36)];
  *(_QWORD *)v28 = v26;
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *((_QWORD *)v28 + 3) = KeyPath;
  v28[32] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for DefaultListNavigationLinkStyle.ListLink);
  return outlined init with take of TableCellFormula((uint64_t)v22, v31, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>);
}

uint64_t ContentListItemNavigationLinkStyle.appearance(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v3 = (int *)type metadata accessor for DefaultListNavigationLinkStyle.ListLink();
  v4 = a2 + v3[5];
  *(_QWORD *)v4 = swift_getKeyPath();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  v5 = a2 + v3[6];
  *(_QWORD *)v5 = swift_getKeyPath();
  *(_BYTE *)(v5 + 8) = 0;
  v6 = a2 + v3[7];
  result = swift_getKeyPath();
  *(_QWORD *)v6 = result;
  *(_BYTE *)(v6 + 8) = 0;
  return result;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ShowsDisclosureIndicatorPredicate()
{
  int v0;

  v0 = static StyleContextAcceptsAnyPredicate.evaluate(inputs:)();
  return ((v0 | static StyleContextAcceptsPredicate.evaluate(inputs:)()) & 1) == 0;
}

double DefaultListNavigationLinkStyle.ListLink.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double result;
  __int128 v22;
  uint64_t v23;
  uint64_t KeyPath;
  int v25;
  uint64_t v26;
  _BYTE v27[129];
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  _OWORD v33[6];
  _OWORD v34[2];

  v2 = v1;
  v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  v26 = static VerticalAlignment.center.getter();
  closure #1 in DefaultListNavigationLinkStyle.ListLink.body.getter(v2, (uint64_t)v33);
  v25 = static Edge.Set.vertical.getter();
  KeyPath = swift_getKeyPath();
  v8 = v2 + *(int *)(type metadata accessor for DefaultListNavigationLinkStyle.ListLink() + 24);
  v9 = *(_QWORD *)v8;
  v10 = *(_BYTE *)(v8 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v8, v10);
  v11 = specialized Environment.wrappedValue.getter(v9, v10);
  outlined consume of Environment<Bool>.Content(v9, v10);
  if ((v11 & 1) != 0)
    v12 = 1.0;
  else
    v12 = 0.5;
  *(_OWORD *)&v27[71] = v33[4];
  *(_OWORD *)&v27[87] = v33[5];
  *(_OWORD *)&v27[103] = v34[0];
  *(_OWORD *)&v27[113] = *(_OWORD *)((char *)v34 + 10);
  *(_OWORD *)&v27[7] = v33[0];
  *(_OWORD *)&v27[23] = v33[1];
  *(_OWORD *)&v27[39] = v33[2];
  v28 = 1;
  *(_OWORD *)&v27[55] = v33[3];
  v29 = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrimitiveButtonStyleConfiguration);
  v13 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v14 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v15 = swift_getKeyPath();
  v16 = swift_getKeyPath();
  v17 = swift_getKeyPath();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  v18 = *(_OWORD *)&v27[64];
  *(_OWORD *)(a1 + 97) = *(_OWORD *)&v27[80];
  v19 = *(_OWORD *)&v27[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v27[96];
  *(_OWORD *)(a1 + 129) = v19;
  v20 = *(_OWORD *)v27;
  *(_OWORD *)(a1 + 33) = *(_OWORD *)&v27[16];
  result = *(double *)&v27[32];
  v22 = *(_OWORD *)&v27[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v27[32];
  *(_OWORD *)(a1 + 65) = v22;
  *(_OWORD *)(a1 + 81) = v18;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  *(_QWORD *)a1 = v26;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 145) = v27[128];
  *(_OWORD *)(a1 + 17) = v20;
  *(_QWORD *)(a1 + 152) = KeyPath;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 185) = v25;
  *(double *)(a1 + 192) = v12;
  *(_QWORD *)(a1 + 200) = partial apply for closure #2 in NavigationLinkButtonStyle.makeBody(configuration:);
  *(_QWORD *)(a1 + 208) = v14;
  *(_BYTE *)(a1 + 216) = 1;
  *(_QWORD *)(a1 + 224) = v15;
  *(_BYTE *)(a1 + 232) = v32;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = v16;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 265) = v31;
  *(_QWORD *)(a1 + 272) = v17;
  *(_BYTE *)(a1 + 280) = v30;
  return result;
}

double closure #1 in DefaultListNavigationLinkStyle.ListLink.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  double result;
  _OWORD v24[2];
  char v25;
  _BYTE v26[40];

  v4 = type metadata accessor for DefaultListNavigationLinkStyle.ListLink();
  v5 = a1 + *(int *)(v4 + 20);
  v25 = *(_BYTE *)(v5 + 32);
  v6 = *(_OWORD *)(v5 + 16);
  v24[0] = *(_OWORD *)v5;
  v24[1] = v6;
  outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v24, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for Environment<EdgeInsets>.Content, MEMORY[0x1E0CE0B90], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1158]);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<EdgeInsets>.Content);
  v7 = specialized Environment.wrappedValue.getter();
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<EdgeInsets>.Content);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<EdgeInsets>.Content);
  specialized Environment.wrappedValue.getter();
  v9 = v8;
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<EdgeInsets>.Content);
  v10 = static Edge.Set.all.getter();
  v11 = a1 + *(int *)(v4 + 28);
  v12 = *(_QWORD *)v11;
  LOBYTE(v4) = *(_BYTE *)(v11 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v11, v4);
  v13 = specialized Environment.wrappedValue.getter(v12, v4);
  outlined consume of Environment<Bool>.Content(v12, v4);
  EdgeInsets.init(_:edges:)();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = static Edge.Set.all.getter();
  *(_BYTE *)a2 = v10;
  *(double *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 48) = xmmword_187BF9840;
  *(_OWORD *)(a2 + 64) = xmmword_187C4C030;
  *(_QWORD *)(a2 + 80) = v22;
  *(_QWORD *)(a2 + 88) = v15;
  *(_QWORD *)(a2 + 96) = v17;
  *(_QWORD *)(a2 + 104) = v19;
  *(_QWORD *)(a2 + 112) = v21;
  *(_BYTE *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 121) = v13 & 1;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DefaultListNavigationLinkStyle.ListLink()
{
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_Sema(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewI();
  lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance DefaultListNavigationLinkStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v14;

  v4 = (int *)type metadata accessor for DefaultListNavigationLinkStyle.ListLink();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a2 = static HorizontalAlignment.center.getter();
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>(0, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, DefaultListNavigationLinkStyle.ListLink>, (void (*)(uint64_t))type metadata accessor for DefaultListNavigationLinkStyle.ListLink);
  v9 = a2 + *(int *)(v8 + 44);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v10 = &v7[v4[5]];
  *(_QWORD *)v10 = swift_getKeyPath();
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = 0;
  v10[32] = 0;
  v11 = &v7[v4[6]];
  *(_QWORD *)v11 = swift_getKeyPath();
  v11[8] = 0;
  v12 = &v7[v4[7]];
  *(_QWORD *)v12 = swift_getKeyPath();
  v12[8] = 0;
  return outlined init with take of TableCellFormula((uint64_t)v7, v9, (uint64_t (*)(_QWORD))type metadata accessor for DefaultListNavigationLinkStyle.ListLink);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HideNavigationLinkDisclosureIndicator()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance HideNavigationLinkDisclosureIndicator()
{
  lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator();
  return PropertyList.subscript.setter();
}

uint64_t EnvironmentValues.showNavigationDisclosureIndicator.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1E1B01218, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1E1B01218, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1E1B01218, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t (*EnvironmentValues.showNavigationDisclosureIndicator.modify(_QWORD *a1))()
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;

  v2 = a1 + 1;
  *a1 = v1;
  v3 = (char *)a1 + 9;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1E1B01218, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1E1B01218, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *v2 = *v3;
  return EnvironmentValues.showNavigationDisclosureIndicator.modify;
}

uint64_t EnvironmentValues.navigationIndicatorVisibility.getter()
{
  uint64_t v0;
  uint64_t result;
  unsigned __int8 v2;
  unsigned __int8 v3;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1E1B01218, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    result = v3;
    if (v3)
      return result;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>, (uint64_t)&type metadata for DefaultNavigationIndicatorVisibilityKey, (uint64_t)&protocol witness table for DefaultNavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1E1B01218, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    result = v3;
    if (v3)
      return result;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>, (uint64_t)&type metadata for DefaultNavigationIndicatorVisibilityKey, (uint64_t)&protocol witness table for DefaultNavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.showNavigationDisclosureIndicator.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1E1B01218, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.navigationIndicatorVisibility.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = EnvironmentValues.navigationIndicatorVisibility.getter();
  return EnvironmentValues.showNavigationDisclosureIndicator.modify;
}

uint64_t EnvironmentValues.showNavigationDisclosureIndicator.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1E1B01218, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in NavigationLinkButtonStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187686D14@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.showNavigationDisclosureIndicator.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187686D4C(unsigned __int8 *a1)
{
  return EnvironmentValues.navigationIndicatorVisibility.setter(*a1);
}

uint64_t sub_187686D70@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.navigationIndicatorVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata completion function for NavigationLinkButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for NavigationLinkButtonStyle.Payload(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for NavigationLinkButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;

  result = swift_release();
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (a1 + (v7 | 7) + 16) & ~(v7 | 7);
  v9 = v7 + 17;
  v10 = *(_QWORD *)(v6 + 64);
  v11 = ((v7 + 17) & ~v7) + v10;
  v12 = v10 + 7;
  v13 = ((((((((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v13 > v11)
    v11 = v13;
  v14 = *(unsigned __int8 *)(v8 + v11);
  if (v14 <= 1)
  {
    if (v14 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
      result = swift_release();
      if (*(_QWORD *)(((((v12 + v8) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        result = swift_release();
      }
      v15 = *(_QWORD *)(((((v12 + v8) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      if ((int)v15 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        return swift_release();
      }
    }
    else
    {
      v16 = ~v7;
      swift_release();
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))((v9 + v8) & v16, v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for NavigationLinkButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, unint64_t, uint64_t);
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  _OWORD *v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 16;
  v8 = (_QWORD *)((v7 + a1) & ~(v6 | 7));
  v9 = (_QWORD *)((v7 + a2) & ~(v6 | 7));
  v10 = *(_QWORD *)(v5 + 64);
  v11 = ((v6 + 17) & ~v6) + v10;
  v12 = v10 + 7;
  v13 = ((((((((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v13 <= v11)
    v14 = v11;
  else
    v14 = v13;
  v15 = *((unsigned __int8 *)v9 + v14);
  swift_retain();
  if (v15 > 1)
  {
    memcpy(v8, v9, v14 + 1);
  }
  else if (v15 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(v8, v9, v4);
    v16 = (_QWORD *)(((unint64_t)v8 + v12) & 0xFFFFFFFFFFFFFFF8);
    v17 = (_QWORD *)(((unint64_t)v9 + v12) & 0xFFFFFFFFFFFFFFF8);
    *v16 = *v17;
    v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
    v20 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
    v21 = ((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)(v21 + 8);
    swift_retain();
    if (v22 < 0xFFFFFFFF)
    {
      v24 = *(_OWORD *)v21;
      *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
      *(_OWORD *)v20 = v24;
    }
    else
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
      *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
      swift_retain();
      swift_retain();
    }
    v25 = ((unint64_t)v16 + 55) & 0xFFFFFFFFFFFFFFF8;
    v26 = ((unint64_t)v17 + 55) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_QWORD *)(v26 + 8);
    if (v27 >= 0xFFFFFFFF)
      LODWORD(v27) = -1;
    if ((int)v27 - 1 < 0)
    {
      swift_weakCopyInit();
      *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
      swift_retain();
      swift_retain();
    }
    else
    {
      v28 = *(_OWORD *)v26;
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
      *(_OWORD *)v25 = v28;
    }
    v29 = (_OWORD *)((v25 + 31) & 0xFFFFFFFFFFFFFFF8);
    v30 = (__int128 *)((v26 + 31) & 0xFFFFFFFFFFFFFFF8);
    v31 = *v30;
    v32 = v30[2];
    v29[1] = v30[1];
    v29[2] = v32;
    *v29 = v31;
    v33 = ((unint64_t)v29 + 55) & 0xFFFFFFFFFFFFFFF8;
    v34 = ((unint64_t)v30 + 55) & 0xFFFFFFFFFFFFFFF8;
    v35 = *(_OWORD *)v34;
    *(_QWORD *)(v33 + 16) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v33 = v35;
    *((_BYTE *)v8 + v14) = 1;
  }
  else
  {
    *v8 = *v9;
    v8[1] = v9[1];
    *((_BYTE *)v8 + 16) = *((_BYTE *)v9 + 16);
    v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v23(((unint64_t)v8 + v6 + 17) & ~v6, ((unint64_t)v9 + v6 + 17) & ~v6, v4);
    *((_BYTE *)v8 + v14) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for NavigationLinkButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  unsigned int v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  void (*v44)(unint64_t, unint64_t, uint64_t);
  unint64_t v46;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 16;
  v10 = (_QWORD *)((v9 + a1) & ~(v8 | 7));
  v11 = (_QWORD *)((v9 + a2) & ~(v8 | 7));
  v12 = ~v8;
  v13 = v8 + 17;
  v14 = *(_QWORD *)(v7 + 64);
  v15 = ((v8 + 17) & ~v8) + v14;
  v16 = v14 + 7;
  v17 = ((((((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v17 <= v15)
    v18 = v15;
  else
    v18 = v17;
  v19 = *((unsigned __int8 *)v10 + v18);
  v20 = *((unsigned __int8 *)v11 + v18);
  if (v19 > 1)
  {
    if (v20 <= 1)
    {
      if (v20 != 1)
      {
LABEL_41:
        *v10 = *v11;
        v10[1] = v11[1];
        *((_BYTE *)v10 + 16) = *((_BYTE *)v11 + 16);
        v44 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
        swift_retain();
        swift_retain();
        v44(((unint64_t)v10 + v13) & v12, ((unint64_t)v11 + v13) & v12, v6);
        *((_BYTE *)v10 + v18) = 0;
        return a1;
      }
      goto LABEL_16;
    }
LABEL_26:
    memcpy(v10, v11, v18 + 1);
    return a1;
  }
  if (v20 > 1)
  {
    if (v19 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
      swift_release();
      if (*(_QWORD *)((((((unint64_t)v10 + v16) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      v29 = *(_QWORD *)((((((unint64_t)v10 + v16) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v29 >= 0xFFFFFFFF)
        LODWORD(v29) = -1;
      if ((int)v29 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v10 + v13) & v12, v6);
    }
    goto LABEL_26;
  }
  if (v10 == v11)
    return a1;
  if (v19 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
    v46 = ((unint64_t)v10 + v16) & 0xFFFFFFFFFFFFFFF8;
    swift_release();
    if (*(_QWORD *)(((v46 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
    {
      swift_release();
      swift_release();
    }
    v21 = *(_QWORD *)(((v46 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v21 >= 0xFFFFFFFF)
      LODWORD(v21) = -1;
    if ((int)v21 - 1 < 0)
    {
      swift_weakDestroy();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v10 + v13) & v12, v6);
  }
  v35 = *((unsigned __int8 *)v11 + v18);
  if (v35 >= 2)
  {
    if (v18 <= 3)
      v36 = v18;
    else
      v36 = 4;
    __asm { BR              X12 }
  }
  if (v35 != 1)
    goto LABEL_41;
LABEL_16:
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v10, v11, v6);
  v22 = (_QWORD *)(((unint64_t)v10 + v16) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v11 + v16) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  v26 = ((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v23 + 31) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(v27 + 8);
  swift_retain();
  if (v28 < 0xFFFFFFFF)
  {
    v30 = *(_OWORD *)v27;
    *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
    *(_OWORD *)v26 = v30;
  }
  else
  {
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
    *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
    swift_retain();
    swift_retain();
  }
  v31 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v23 + 55) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(_QWORD *)(v32 + 8);
  if (v33 >= 0xFFFFFFFF)
    LODWORD(v33) = -1;
  if ((int)v33 - 1 < 0)
  {
    swift_weakCopyInit();
    *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
    *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v34 = *(_OWORD *)v32;
    *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
    *(_OWORD *)v31 = v34;
  }
  v37 = (_OWORD *)((v31 + 31) & 0xFFFFFFFFFFFFFFF8);
  v38 = (__int128 *)((v32 + 31) & 0xFFFFFFFFFFFFFFF8);
  v39 = *v38;
  v40 = v38[2];
  v37[1] = v38[1];
  v37[2] = v40;
  *v37 = v39;
  v41 = ((unint64_t)v37 + 55) & 0xFFFFFFFFFFFFFFF8;
  v42 = ((unint64_t)v38 + 55) & 0xFFFFFFFFFFFFFFF8;
  v43 = *(_OWORD *)v42;
  *(_QWORD *)(v41 + 16) = *(_QWORD *)(v42 + 16);
  *(_OWORD *)v41 = v43;
  *((_BYTE *)v10 + v18) = 1;
  return a1;
}

_OWORD *initializeWithTake for NavigationLinkButtonStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 | 7) + 16;
  v7 = (_BYTE *)(((unint64_t)a1 + v6) & ~(v5 | 7));
  v8 = (_BYTE *)(((unint64_t)a2 + v6) & ~(v5 | 7));
  v9 = *(_QWORD *)(v4 + 64);
  v10 = ((v5 + 17) & ~v5) + v9;
  v11 = v9 + 7;
  v12 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v12 <= v10)
    v13 = v10;
  else
    v13 = v12;
  v14 = v8[v13];
  if (v14 > 1)
  {
    memcpy(v7, v8, v13 + 1);
  }
  else if (v14 == 1)
  {
    (*(void (**)(_BYTE *, _BYTE *))(v4 + 32))(v7, v8);
    v15 = (_QWORD *)((unint64_t)&v7[v11] & 0xFFFFFFFFFFFFFFF8);
    v16 = (_QWORD *)((unint64_t)&v8[v11] & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v16;
    v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
    v19 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
    v20 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
    v21 = *(_OWORD *)v20;
    *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
    *(_OWORD *)v19 = v21;
    v22 = ((unint64_t)v15 + 55) & 0xFFFFFFFFFFFFFFF8;
    v23 = ((unint64_t)v16 + 55) & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_QWORD *)(v23 + 8);
    if (*(_QWORD *)(v23 + 8) >= 0xFFFFFFFFuLL)
      v24 = -1;
    if (v24 - 1 < 0)
    {
      v22 = swift_weakTakeInit();
      *(_OWORD *)(v22 + 8) = *(_OWORD *)(v23 + 8);
    }
    else
    {
      v25 = *(_OWORD *)v23;
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
      *(_OWORD *)v22 = v25;
    }
    v27 = (_OWORD *)((v22 + 31) & 0xFFFFFFFFFFFFFFF8);
    v28 = (__int128 *)((v23 + 31) & 0xFFFFFFFFFFFFFFF8);
    v29 = *v28;
    v30 = v28[2];
    v27[1] = v28[1];
    v27[2] = v30;
    *v27 = v29;
    v31 = ((unint64_t)v27 + 55) & 0xFFFFFFFFFFFFFFF8;
    v32 = ((unint64_t)v28 + 55) & 0xFFFFFFFFFFFFFFF8;
    v33 = *(_OWORD *)v32;
    *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
    *(_OWORD *)v31 = v33;
    v7[v13] = 1;
  }
  else
  {
    v26 = *(_OWORD *)v8;
    v7[16] = v8[16];
    *(_OWORD *)v7 = v26;
    (*(void (**)(unint64_t, unint64_t))(v4 + 32))((unint64_t)&v7[v5 + 17] & ~v5, (unint64_t)&v8[v5 + 17] & ~v5);
    v7[v13] = 0;
  }
  return a1;
}

uint64_t assignWithTake for NavigationLinkButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __int128 v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  unint64_t v45;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 16;
  v10 = (unsigned __int8 *)((v9 + a1) & ~(v8 | 7));
  v11 = (unsigned __int8 *)((v9 + a2) & ~(v8 | 7));
  v12 = ~v8;
  v13 = v8 + 17;
  v14 = *(_QWORD *)(v7 + 64);
  v15 = ((v8 + 17) & ~v8) + v14;
  v16 = v14 + 7;
  v17 = ((((((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v17 <= v15)
    v18 = v15;
  else
    v18 = v17;
  v19 = v10[v18];
  v20 = v11[v18];
  if (v19 > 1)
  {
    if (v20 <= 1)
    {
      if (v20 != 1)
      {
LABEL_38:
        v43 = *(_OWORD *)v11;
        v10[16] = v11[16];
        *(_OWORD *)v10 = v43;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))((unint64_t)&v10[v13] & v12, (unint64_t)&v11[v13] & v12, v6);
        v10[v18] = 0;
        return a1;
      }
      goto LABEL_16;
    }
LABEL_28:
    memcpy(v10, v11, v18 + 1);
    return a1;
  }
  if (v20 > 1)
  {
    if (v19 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(v10, v6);
      swift_release();
      if (*(_QWORD *)(((((unint64_t)&v10[v16] & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      v33 = *(_QWORD *)(((((unint64_t)&v10[v16] & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v33 >= 0xFFFFFFFF)
        LODWORD(v33) = -1;
      if ((int)v33 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))((unint64_t)&v10[v13] & v12, v6);
    }
    goto LABEL_28;
  }
  if (v10 == v11)
    return a1;
  if (v19 == 1)
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(v10, v6);
    v45 = (unint64_t)&v10[v16] & 0xFFFFFFFFFFFFFFF8;
    swift_release();
    if (*(_QWORD *)(((v45 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
    {
      swift_release();
      swift_release();
    }
    v21 = *(_QWORD *)(((v45 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v21 >= 0xFFFFFFFF)
      LODWORD(v21) = -1;
    if ((int)v21 - 1 < 0)
    {
      swift_weakDestroy();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))((unint64_t)&v10[v13] & v12, v6);
  }
  v34 = v11[v18];
  if (v34 >= 2)
  {
    if (v18 <= 3)
      v35 = v18;
    else
      v35 = 4;
    __asm { BR              X12 }
  }
  if (v34 != 1)
    goto LABEL_38;
LABEL_16:
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(v10, v11, v6);
  v22 = (_QWORD *)((unint64_t)&v10[v16] & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)((unint64_t)&v11[v16] & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  v26 = ((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v23 + 31) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_OWORD *)v27;
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
  *(_OWORD *)v26 = v28;
  v29 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  v30 = ((unint64_t)v23 + 55) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(_QWORD *)(v30 + 8);
  if (*(_QWORD *)(v30 + 8) >= 0xFFFFFFFFuLL)
    v31 = -1;
  if (v31 - 1 < 0)
  {
    v29 = swift_weakTakeInit();
    *(_OWORD *)(v29 + 8) = *(_OWORD *)(v30 + 8);
  }
  else
  {
    v32 = *(_OWORD *)v30;
    *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);
    *(_OWORD *)v29 = v32;
  }
  v36 = (_OWORD *)((v29 + 31) & 0xFFFFFFFFFFFFFFF8);
  v37 = (__int128 *)((v30 + 31) & 0xFFFFFFFFFFFFFFF8);
  v38 = *v37;
  v39 = v37[2];
  v36[1] = v37[1];
  v36[2] = v39;
  *v36 = v38;
  v40 = ((unint64_t)v36 + 55) & 0xFFFFFFFFFFFFFFF8;
  v41 = ((unint64_t)v37 + 55) & 0xFFFFFFFFFFFFFFF8;
  v42 = *(_OWORD *)v41;
  *(_QWORD *)(v40 + 16) = *(_QWORD *)(v41 + 16);
  *(_OWORD *)v40 = v42;
  v10[v18] = 1;
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationLinkButtonStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unint64_t v14;
  int v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = ((((((((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  v6 = *(_DWORD *)(v3 + 80);
  v7 = ((v6 + 17) & ~(unint64_t)v6) + v4;
  if (v5 > v7)
    v7 = v5;
  if (!a2)
    return 0;
  if (a2 < 0x7FFFFFFF)
    goto LABEL_21;
  v8 = v7 + ((v6 & 0xF8 ^ 0x1F8u) & (v6 + 16)) + 1;
  v9 = 8 * v8;
  if (v8 > 3)
    goto LABEL_6;
  v12 = (a2 - 2147483646 + ~(-1 << v9)) >> v9;
  if (v12 > 0xFFFE)
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (v10)
      goto LABEL_14;
LABEL_21:
    v14 = *(_QWORD *)(a1 + 8);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    v15 = v14 - 1;
    if (v15 < 0)
      v15 = -1;
    return (v15 + 1);
  }
  if (v12 > 0xFE)
  {
    v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_14;
    goto LABEL_21;
  }
  if (!v12)
    goto LABEL_21;
LABEL_6:
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_21;
LABEL_14:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if (!(_DWORD)v8)
    return (v13 + 0x7FFFFFFF);
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187687DB4 + 4 * byte_187C4C04A[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for NavigationLinkButtonStyle(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  v8 = *(_DWORD *)(v5 + 80);
  v9 = ((v8 + 17) & ~(unint64_t)v8) + v6;
  if (v7 > v9)
    v9 = v7;
  v10 = v9 + ((v8 & 0xF8 ^ 0x1F8u) & (v8 + 16)) + 1;
  if (a3 < 0x7FFFFFFF)
  {
    v11 = 0u;
  }
  else if (v10 <= 3)
  {
    v13 = (a3 - 2147483646 + ~(-1 << (8 * v10))) >> (8 * v10);
    if (v13 > 0xFFFE)
    {
      v11 = 4u;
    }
    else if (v13 >= 0xFF)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 != 0;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0x7FFFFFFE)
    __asm { BR              X10 }
  v12 = a2 - 0x7FFFFFFF;
  if (v10 < 4)
  {
    if ((_DWORD)v10)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *a1 = v14;
        *((_BYTE *)a1 + 2) = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *a1 = v14;
      }
      else
      {
        *(_BYTE *)a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v10);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_187688018(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = a1[1];
  v3 = MEMORY[0x1E0CE6388];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E0CE6840], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<PlainListStyleContext>, (uint64_t)&type metadata for PlainListStyleContext, (uint64_t (*)(_QWORD, uint64_t))v3);
  v5 = type metadata accessor for ContentListItemNavigationLinkStyle(255, v1, v2, v4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentListItemNavigationLinkStyle<A>, v5);
  type metadata accessor for PrimitiveButtonStyleContainerModifier(255, v5, v6, v7);
  lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<PlainListStyleContext>, (uint64_t)&type metadata for PlainListStyleContext);
  type metadata accessor for StaticIf();
}

void sub_187688128()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetListStyleContext>, (uint64_t)&type metadata for InsetListStyleContext, v0);
  v5 = v4;
  v6 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetListStyleContext>, (uint64_t)&type metadata for InsetListStyleContext);
  *(_QWORD *)(v3 - 120) = v5;
  *(_QWORD *)(v3 - 112) = v2;
  *(_QWORD *)(v3 - 104) = v1;
  *(_QWORD *)(v3 - 96) = v6;
  type metadata accessor for StaticIf();
}

void sub_187688194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _BindingActionModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5530]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>, v15, v16, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityDefaultActionRepresentableStyle);
  v18 = type metadata accessor for ModifiedContent();
  v19 = type metadata accessor for ModifiedContent();
  v20 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E0CE6840]);
  *(_QWORD *)(v17 - 120) = a15;
  *(_QWORD *)(v17 - 112) = v18;
  *(_QWORD *)(v17 - 104) = v19;
  *(_QWORD *)(v17 - 96) = v20;
  type metadata accessor for StaticIf();
}

uint64_t sub_187688304(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[25];

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, v6, v7, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for KeyboardShortcutBindingBehavior);
  v25 = type metadata accessor for ModifiedContent();
  v10 = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v4);
  v12 = MEMORY[0x1E0CE1E88];
  *(_QWORD *)(v8 - 136) = v11;
  *(_QWORD *)(v8 - 128) = v12;
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v24, v8 - 136);
  *(_QWORD *)(v8 - 152) = v10;
  *(_QWORD *)(v8 - 144) = v13;
  v14 = MEMORY[0x1E0CE2E70];
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v22, v8 - 152);
  *(_QWORD *)(v8 - 168) = v11;
  *(_QWORD *)(v8 - 160) = v12;
  v34[0] = v15;
  v34[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v23, v8 - 168);
  v33[0] = MEMORY[0x18D75FFDC](v14, v21, v34);
  v33[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v32[0] = MEMORY[0x18D75FFDC](v14, v20, v33);
  v32[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v31[0] = MEMORY[0x18D75FFDC](v14, v19, v32);
  v31[1] = lazy protocol witness table accessor for type _BindingActionModifier<Bool> and conformance _BindingActionModifier<A>();
  v30[0] = MEMORY[0x18D75FFDC](v14, v3, v31);
  v30[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v16 = MEMORY[0x18D75FFDC](v14, v2, v30);
  v29[0] = v16;
  v29[1] = lazy protocol witness table accessor for type AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label> and conformance AccessibilityDefaultActionRepresentableStyle<A>();
  v17 = MEMORY[0x18D75FFDC](v14, v5, v29);
  v28[0] = v16;
  v28[1] = lazy protocol witness table accessor for type AccessibilityDefaultAction and conformance AccessibilityDefaultAction();
  v27[0] = v17;
  v27[1] = MEMORY[0x18D75FFDC](v14, v1, v28);
  v26[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v27);
  v26[1] = &protocol witness table for KeyboardShortcutBindingBehavior<A>;
  return MEMORY[0x18D75FFDC](v14, v25, v26);
}

ValueMetadata *type metadata accessor for HideNavigationLinkDisclosureIndicator()
{
  return &type metadata for HideNavigationLinkDisclosureIndicator;
}

ValueMetadata *type metadata accessor for DefaultNavigationIndicatorVisibilityKey()
{
  return &type metadata for DefaultNavigationIndicatorVisibilityKey;
}

void *type metadata accessor for NavigationIndicatorVisibilityKey()
{
  return &unk_1E1B01218;
}

uint64_t type metadata completion function for NavigationLinkButtonStyle.PayloadV4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for NavigationLinkButtonStyle.PayloadV4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  result = swift_release();
  if (*(_QWORD *)(((v4 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    result = swift_release();
  }
  v6 = *(_QWORD *)(((v4 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v6 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  if ((int)v6 - 1 < 0)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for NavigationLinkButtonStyle.PayloadV4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  _OWORD *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = ((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v12 + 8);
  swift_retain();
  if (v13 < 0xFFFFFFFF)
  {
    v14 = *(_OWORD *)v12;
    *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
    *(_OWORD *)v11 = v14;
  }
  else
  {
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
    *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
    swift_retain();
    swift_retain();
  }
  v15 = ((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)(v16 + 8);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  if ((int)v17 - 1 < 0)
  {
    swift_weakCopyInit();
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v18 = *(_OWORD *)v16;
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
    *(_OWORD *)v15 = v18;
  }
  v19 = (_OWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  v20 = (__int128 *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  v22 = v20[2];
  v19[1] = v20[1];
  v19[2] = v22;
  *v19 = v21;
  v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_OWORD *)v24;
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
  *(_OWORD *)v23 = v25;
  return a1;
}

uint64_t assignWithCopy for NavigationLinkButtonStyle.PayloadV4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  __int128 v21;
  _OWORD *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_retain();
  swift_release();
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = ((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v12 + 8);
  if (*(_QWORD *)(v11 + 8) < 0xFFFFFFFFuLL)
  {
    if (v13 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
      *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v13 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      swift_retain();
      swift_release();
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
      swift_retain();
      swift_release();
      *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
      goto LABEL_8;
    }
    swift_release();
    swift_release();
  }
  v14 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  *(_OWORD *)v11 = v14;
LABEL_8:
  v15 = ((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)(v15 + 8);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  v18 = v17 - 1;
  v19 = *(_QWORD *)(v16 + 8);
  if (v19 >= 0xFFFFFFFF)
    LODWORD(v19) = -1;
  v20 = v19 - 1;
  if (v18 < 0)
  {
    if (v20 < 0)
    {
      swift_weakCopyAssign();
      *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
      swift_retain();
      swift_release();
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
      swift_retain();
      swift_release();
      goto LABEL_18;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_17;
  }
  if ((v20 & 0x80000000) == 0)
  {
LABEL_17:
    v21 = *(_OWORD *)v16;
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
    *(_OWORD *)v15 = v21;
    goto LABEL_18;
  }
  swift_weakCopyInit();
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v16 + 16);
  swift_retain();
  swift_retain();
LABEL_18:
  v22 = (_OWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  v23 = (__int128 *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  v24 = *v23;
  v25 = v23[2];
  v22[1] = v23[1];
  v22[2] = v25;
  *v22 = v24;
  v26 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v23 + 55) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_OWORD *)v27;
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(v27 + 16);
  *(_OWORD *)v26 = v28;
  return a1;
}

uint64_t initializeWithTake for NavigationLinkButtonStyle.PayloadV4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  __int128 v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = ((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  *(_OWORD *)v11 = v13;
  v14 = ((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 8);
  if (*(_QWORD *)(v15 + 8) >= 0xFFFFFFFFuLL)
    v16 = -1;
  if (v16 - 1 < 0)
  {
    v14 = swift_weakTakeInit();
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
  }
  else
  {
    v17 = *(_OWORD *)v15;
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
    *(_OWORD *)v14 = v17;
  }
  v18 = (_OWORD *)((v14 + 31) & 0xFFFFFFFFFFFFFFF8);
  v19 = (__int128 *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  v21 = v19[2];
  v18[1] = v19[1];
  v18[2] = v21;
  *v18 = v20;
  v22 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_OWORD *)v23;
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
  *(_OWORD *)v22 = v24;
  return a1;
}

uint64_t assignWithTake for NavigationLinkButtonStyle.PayloadV4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  __int128 v20;
  _OWORD *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = ((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v11 + 8) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v12 + 8) >= 0xFFFFFFFFuLL)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      swift_release();
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
      swift_release();
      *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
      goto LABEL_6;
    }
    swift_release();
    swift_release();
  }
  v13 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  *(_OWORD *)v11 = v13;
LABEL_6:
  v14 = ((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v14 + 8);
  if (*(_QWORD *)(v14 + 8) >= 0xFFFFFFFFuLL)
    v16 = -1;
  v17 = v16 - 1;
  v18 = *(_QWORD *)(v15 + 8);
  if (v18 >= 0xFFFFFFFF)
    LODWORD(v18) = -1;
  v19 = v18 - 1;
  if (v17 < 0)
  {
    if (v19 < 0)
    {
      swift_weakTakeAssign();
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
      swift_release();
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      swift_release();
      goto LABEL_16;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_15;
  }
  if ((v19 & 0x80000000) == 0)
  {
LABEL_15:
    v20 = *(_OWORD *)v15;
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
    *(_OWORD *)v14 = v20;
    goto LABEL_16;
  }
  swift_weakTakeInit();
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
LABEL_16:
  v21 = (_OWORD *)((v14 + 31) & 0xFFFFFFFFFFFFFFF8);
  v22 = (__int128 *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  v23 = *v22;
  v24 = v22[2];
  v21[1] = v22[1];
  v21[2] = v24;
  *v21 = v23;
  v25 = ((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_OWORD *)v26;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
  *(_OWORD *)v25 = v27;
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationLinkButtonStyle.PayloadV4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
         + 24) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187688DE0 + 4 * byte_187C4C058[v10]))();
  }
}

void storeEnumTagSinglePayload for NavigationLinkButtonStyle.PayloadV4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)+ 55) & 0xFFFFFFFFFFFFFFF8)+ 24);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187688F78()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187688FFCLL);
}

void sub_187688F80(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187688F88);
  JUMPOUT(0x187688FFCLL);
}

void sub_187688FD0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187688FFCLL);
}

void sub_187688FD8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187688FFCLL);
}

uint64_t sub_187688FE0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x187688FECLL);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x187688FFCLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata completion function for NavigationLinkButtonStyle.PayloadV1()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NavigationLinkButtonStyle.PayloadV1(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 17) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v12 = (a1 + v6 + 17) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 17) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t initializeWithCopy for NavigationLinkButtonStyle.PayloadV1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v10(v8, v9, v5);
  return a1;
}

uint64_t assignWithCopy for NavigationLinkButtonStyle.PayloadV1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))((*(unsigned __int8 *)(v6 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t assignWithTake for NavigationLinkButtonStyle.PayloadV1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))((*(unsigned __int8 *)(v6 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationLinkButtonStyle.PayloadV1(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 17) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 17) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876893C4 + 4 * byte_187C4C067[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for NavigationLinkButtonStyle.PayloadV1(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void *type metadata accessor for DefaultListNavigationLinkStyle()
{
  return &unk_1E1AFCCB0;
}

uint64_t type metadata completion function for ContentListItemNavigationLinkStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for NavigationLinkButtonStyle.Payload(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Optional();
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ContentListItemNavigationLinkStyle(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = ((v4 + 17) & ~v4) + v5;
  if (((((((((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 > v6)
    v6 = ((((((((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24;
  v7 = *(unsigned __int8 *)(result + v6);
  if (v7 <= 1)
  {
    v8 = result;
    if (v7 == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(v3 + 8))(result, *(_QWORD *)(a2 + 16));
      v9 = (v8 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
      result = swift_release();
      if (*(_QWORD *)(((v9 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        result = swift_release();
      }
      v10 = *(_QWORD *)(((v9 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v10 >= 0xFFFFFFFF)
        LODWORD(v10) = -1;
      if ((int)v10 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        return swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))((v8 + v4 + 17) & ~v4, v2);
    }
  }
  return result;
}

_QWORD *initializeWithCopy for ContentListItemNavigationLinkStyle(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(unint64_t, unint64_t, uint64_t);
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  _OWORD *v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  if (((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= ((v7 + 17) & (unint64_t)~v7) + v8)
    v9 = ((v7 + 17) & ~v7) + v8;
  else
    v9 = ((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24;
  v10 = __src[v9];
  if (v10 > 1)
  {
    memcpy(__dst, __src, v9 + 1);
  }
  else if (v10 == 1)
  {
    (*(void (**)(_QWORD *, unsigned __int8 *, _QWORD))(v6 + 16))(__dst, __src, *(_QWORD *)(a3 + 16));
    v11 = (_QWORD *)(((unint64_t)__dst + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)((unint64_t)&__src[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v12;
    v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
    v15 = ((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((unint64_t)v12 + 31) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_QWORD *)(v16 + 8);
    swift_retain();
    if (v17 < 0xFFFFFFFF)
    {
      v22 = *(_OWORD *)v16;
      *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
      *(_OWORD *)v15 = v22;
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
      *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
      swift_retain();
      swift_retain();
    }
    v23 = ((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8;
    v24 = ((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8;
    v25 = *(_QWORD *)(v24 + 8);
    if (v25 >= 0xFFFFFFFF)
      LODWORD(v25) = -1;
    if ((int)v25 - 1 < 0)
    {
      swift_weakCopyInit();
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
      swift_retain();
      swift_retain();
    }
    else
    {
      v26 = *(_OWORD *)v24;
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
      *(_OWORD *)v23 = v26;
    }
    v27 = (_OWORD *)((v23 + 31) & 0xFFFFFFFFFFFFFFF8);
    v28 = (__int128 *)((v24 + 31) & 0xFFFFFFFFFFFFFFF8);
    v29 = *v28;
    v30 = v28[2];
    v27[1] = v28[1];
    v27[2] = v30;
    *v27 = v29;
    v31 = ((unint64_t)v27 + 55) & 0xFFFFFFFFFFFFFFF8;
    v32 = ((unint64_t)v28 + 55) & 0xFFFFFFFFFFFFFFF8;
    v33 = *(_OWORD *)v32;
    *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
    *(_OWORD *)v31 = v33;
    *((_BYTE *)__dst + v9) = 1;
  }
  else
  {
    v18 = *((_QWORD *)__src + 1);
    *__dst = *(_QWORD *)__src;
    __dst[1] = v18;
    *((_BYTE *)__dst + 16) = __src[16];
    v19 = ((unint64_t)__dst + v7 + 17) & ~v7;
    v20 = (unint64_t)&__src[v7 + 17] & ~v7;
    v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v21(v19, v20, v5);
    *((_BYTE *)__dst + v9) = 0;
  }
  return __dst;
}

_QWORD *assignWithCopy for ContentListItemNavigationLinkStyle(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unsigned int v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(unint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  if (((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= ((v7 + 17) & (unint64_t)~v7) + v9)
    v10 = ((v7 + 17) & ~v7) + v9;
  else
    v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
        + 24;
  v11 = *((unsigned __int8 *)__dst + v10);
  v12 = *((unsigned __int8 *)__src + v10);
  if (v11 > 1)
  {
    if (v12 <= 1)
    {
      if (v12 != 1)
      {
LABEL_41:
        *__dst = *__src;
        __dst[1] = __src[1];
        *((_BYTE *)__dst + 16) = *((_BYTE *)__src + 16);
        v38 = (char *)__src + v7;
        v39 = ((unint64_t)__dst + v7 + 17) & v8;
        v40 = (unint64_t)(v38 + 17) & v8;
        v41 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16);
        swift_retain();
        swift_retain();
        v41(v39, v40, v5);
        *((_BYTE *)__dst + v10) = 0;
        return __dst;
      }
      goto LABEL_16;
    }
LABEL_26:
    memcpy(__dst, __src, v10 + 1);
    return __dst;
  }
  if (v12 > 1)
  {
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      v22 = ((unint64_t)__dst + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
      swift_release();
      if (*(_QWORD *)(((v22 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      v23 = *(_QWORD *)(((v22 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v23 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      if ((int)v23 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)__dst + v7 + 17) & v8, v5);
    }
    goto LABEL_26;
  }
  if (__dst == __src)
    return __dst;
  if (v11 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v13 = ((unint64_t)__dst + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    swift_release();
    if (*(_QWORD *)(((v13 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
    {
      swift_release();
      swift_release();
    }
    v14 = *(_QWORD *)(((v13 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    if ((int)v14 - 1 < 0)
    {
      swift_weakDestroy();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)__dst + v7 + 17) & v8, v5);
  }
  v29 = *((unsigned __int8 *)__src + v10);
  if (v29 >= 2)
  {
    if (v10 <= 3)
      v30 = v10;
    else
      v30 = 4;
    __asm { BR              X12 }
  }
  if (v29 != 1)
    goto LABEL_41;
LABEL_16:
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(__dst, __src, v5);
  v15 = (_QWORD *)(((unint64_t)__dst + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)__src + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)(v20 + 8);
  swift_retain();
  if (v21 < 0xFFFFFFFF)
  {
    v24 = *(_OWORD *)v20;
    *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
    *(_OWORD *)v19 = v24;
  }
  else
  {
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
    *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
    swift_retain();
    swift_retain();
  }
  v25 = ((unint64_t)v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v16 + 55) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_QWORD *)(v26 + 8);
  if (v27 >= 0xFFFFFFFF)
    LODWORD(v27) = -1;
  if ((int)v27 - 1 < 0)
  {
    swift_weakCopyInit();
    *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
    *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v28 = *(_OWORD *)v26;
    *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
    *(_OWORD *)v25 = v28;
  }
  v31 = (_OWORD *)((v25 + 31) & 0xFFFFFFFFFFFFFFF8);
  v32 = (__int128 *)((v26 + 31) & 0xFFFFFFFFFFFFFFF8);
  v33 = *v32;
  v34 = v32[2];
  v31[1] = v32[1];
  v31[2] = v34;
  *v31 = v33;
  v35 = ((unint64_t)v31 + 55) & 0xFFFFFFFFFFFFFFF8;
  v36 = ((unint64_t)v32 + 55) & 0xFFFFFFFFFFFFFFF8;
  v37 = *(_OWORD *)v36;
  *(_QWORD *)(v35 + 16) = *(_QWORD *)(v36 + 16);
  *(_OWORD *)v35 = v37;
  *((_BYTE *)__dst + v10) = 1;
  return __dst;
}

_OWORD *initializeWithTake for ContentListItemNavigationLinkStyle(_OWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  __int128 v20;
  _OWORD *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= ((v6 + 17) & (unint64_t)~v6) + v7)
    v8 = ((v6 + 17) & ~v6) + v7;
  else
    v8 = ((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24;
  v9 = __src[v8];
  if (v9 > 1)
  {
    memcpy(__dst, __src, v8 + 1);
  }
  else if (v9 == 1)
  {
    (*(void (**)(_OWORD *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    v10 = (_QWORD *)(((unint64_t)__dst + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
    v14 = ((unint64_t)v10 + 31) & 0xFFFFFFFFFFFFFFF8;
    v15 = ((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_OWORD *)v15;
    *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
    *(_OWORD *)v14 = v16;
    v17 = ((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)(v18 + 8);
    if (*(_QWORD *)(v18 + 8) >= 0xFFFFFFFFuLL)
      v19 = -1;
    if (v19 - 1 < 0)
    {
      v17 = swift_weakTakeInit();
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(v18 + 8);
    }
    else
    {
      v20 = *(_OWORD *)v18;
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v17 = v20;
    }
    v21 = (_OWORD *)((v17 + 31) & 0xFFFFFFFFFFFFFFF8);
    v22 = (__int128 *)((v18 + 31) & 0xFFFFFFFFFFFFFFF8);
    v23 = *v22;
    v24 = v22[2];
    v21[1] = v22[1];
    v21[2] = v24;
    *v21 = v23;
    v25 = ((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFFFF8;
    v26 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_OWORD *)v26;
    *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
    *(_OWORD *)v25 = v27;
    *((_BYTE *)__dst + v8) = 1;
  }
  else
  {
    *__dst = *(_OWORD *)__src;
    *((_BYTE *)__dst + 16) = __src[16];
    (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)__dst + v6 + 17) & ~v6, (unint64_t)&__src[v6 + 17] & ~v6);
    *((_BYTE *)__dst + v8) = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for ContentListItemNavigationLinkStyle(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  if (((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= ((v7 + 17) & (unint64_t)~v7) + v9)
    v10 = ((v7 + 17) & ~v7) + v9;
  else
    v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
        + 24;
  v11 = __dst[v10];
  v12 = __src[v10];
  if (v11 > 1)
  {
    if (v12 <= 1)
    {
      if (v12 != 1)
      {
LABEL_38:
        *(_OWORD *)__dst = *(_OWORD *)__src;
        __dst[16] = __src[16];
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((unint64_t)&__dst[v7 + 17] & v8, (unint64_t)&__src[v7 + 17] & v8, v5);
        __dst[v10] = 0;
        return __dst;
      }
      goto LABEL_16;
    }
LABEL_28:
    memcpy(__dst, __src, v10 + 1);
    return __dst;
  }
  if (v12 > 1)
  {
    if (v11 == 1)
    {
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
      v26 = (unint64_t)&__dst[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
      swift_release();
      if (*(_QWORD *)(((v26 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      v27 = *(_QWORD *)(((v26 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v27 >= 0xFFFFFFFF)
        LODWORD(v27) = -1;
      if ((int)v27 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&__dst[v7 + 17] & v8, v5);
    }
    goto LABEL_28;
  }
  if (__dst == __src)
    return __dst;
  if (v11 == 1)
  {
    (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v13 = (unint64_t)&__dst[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
    swift_release();
    if (*(_QWORD *)(((v13 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
    {
      swift_release();
      swift_release();
    }
    v14 = *(_QWORD *)(((v13 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    if ((int)v14 - 1 < 0)
    {
      swift_weakDestroy();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&__dst[v7 + 17] & v8, v5);
  }
  v28 = __src[v10];
  if (v28 >= 2)
  {
    if (v10 <= 3)
      v29 = v10;
    else
      v29 = 4;
    __asm { BR              X12 }
  }
  if (v28 != 1)
    goto LABEL_38;
LABEL_16:
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
  v15 = (_QWORD *)((unint64_t)&__dst[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)((unint64_t)&__src[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  *(_OWORD *)v19 = v21;
  v22 = ((unint64_t)v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v16 + 55) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)(v23 + 8);
  if (*(_QWORD *)(v23 + 8) >= 0xFFFFFFFFuLL)
    v24 = -1;
  if (v24 - 1 < 0)
  {
    v22 = swift_weakTakeInit();
    *(_OWORD *)(v22 + 8) = *(_OWORD *)(v23 + 8);
  }
  else
  {
    v25 = *(_OWORD *)v23;
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
    *(_OWORD *)v22 = v25;
  }
  v30 = (_OWORD *)((v22 + 31) & 0xFFFFFFFFFFFFFFF8);
  v31 = (__int128 *)((v23 + 31) & 0xFFFFFFFFFFFFFFF8);
  v32 = *v31;
  v33 = v31[2];
  v30[1] = v31[1];
  v30[2] = v33;
  *v30 = v32;
  v34 = ((unint64_t)v30 + 55) & 0xFFFFFFFFFFFFFFF8;
  v35 = ((unint64_t)v31 + 55) & 0xFFFFFFFFFFFFFFF8;
  v36 = *(_OWORD *)v35;
  *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
  *(_OWORD *)v34 = v36;
  __dst[v10] = 1;
  return __dst;
}

uint64_t getEnumTagSinglePayload for ContentListItemNavigationLinkStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = ((v4 + 17) & ~v4) + v5;
  v7 = ((((((((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v7 > v6)
    v6 = v7;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v8 = v6 + 1;
  v9 = 8 * (v6 + 1);
  if ((v6 + 1) > 3)
    goto LABEL_6;
  v12 = ((a2 + ~(-1 << v9) - 253) >> v9) + 1;
  if (HIWORD(v12))
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (v10)
      goto LABEL_14;
LABEL_21:
    v14 = *(unsigned __int8 *)(a1 + v6);
    if (v14 >= 2)
      v15 = (v14 ^ 0xFF) + 1;
    else
      v15 = 0;
    if (v15 >= 2)
      return v15 - 1;
    else
      return 0;
  }
  if (v12 > 0xFF)
  {
    v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_14;
    goto LABEL_21;
  }
  if (v12 < 2)
    goto LABEL_21;
LABEL_6:
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_21;
LABEL_14:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if (!(_DWORD)v8)
    return (v13 + 254);
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18768A590 + 4 * byte_187C4C07F[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for ContentListItemNavigationLinkStyle(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = ((v6 + 17) & ~v6) + v7;
  v9 = ((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v9 <= v8)
    v9 = v8;
  v10 = v9 + 1;
  if (a3 < 0xFE)
  {
    v11 = 0u;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 253) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v12 = a2 - 254;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *a1 = v14;
        *((_BYTE *)a1 + 2) = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *a1 = v14;
      }
      else
      {
        *(_BYTE *)a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t type metadata completion function for NavigationLinkButtonStyle.Payload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  result = type metadata accessor for NavigationLinkButtonStyle.PayloadV1(319, v4, v5, a4);
  if (v8 <= 0x3F)
  {
    result = type metadata accessor for NavigationLinkButtonStyle.PayloadV4(319, v4, v5, v7);
    if (v9 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for NavigationLinkButtonStyle.Payload(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  unint64_t v12;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = ((v5 + 17) & ~v5) + v6;
  if (((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 > v7)
    v7 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24;
  v8 = *(unsigned __int8 *)(a1 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  if (v8 == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(v4 + 8))(a1, *(_QWORD *)(a2 + 16));
    v10 = (a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    result = swift_release();
    if (*(_QWORD *)(((v10 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
    {
      swift_release();
      result = swift_release();
    }
    v12 = *(_QWORD *)(((v10 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v12 >= 0xFFFFFFFF)
      LODWORD(v12) = -1;
    if ((int)v12 - 1 < 0)
    {
      swift_weakDestroy();
      swift_release();
      return swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))((a1 + v5 + 17) & ~v5, v3);
  }
  return result;
}

uint64_t initializeWithCopy for NavigationLinkButtonStyle.Payload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  char v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  _OWORD *v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  if (((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= ((v7 + 17) & (unint64_t)~v7) + v8)
    v9 = ((v7 + 17) & ~v7) + v8;
  else
    v9 = ((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24;
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X14 }
  }
  if (v10 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
    v12 = (_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)((a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
    v16 = ((unint64_t)v12 + 31) & 0xFFFFFFFFFFFFFFF8;
    v17 = ((unint64_t)v13 + 31) & 0xFFFFFFFFFFFFFFF8;
    v18 = *(_QWORD *)(v17 + 8);
    swift_retain();
    if (v18 < 0xFFFFFFFF)
    {
      v24 = *(_OWORD *)v17;
      *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
      *(_OWORD *)v16 = v24;
    }
    else
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
      *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
      swift_retain();
      swift_retain();
    }
    v25 = ((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8;
    v26 = ((unint64_t)v13 + 55) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_QWORD *)(v26 + 8);
    if (v27 >= 0xFFFFFFFF)
      LODWORD(v27) = -1;
    if ((int)v27 - 1 < 0)
    {
      swift_weakCopyInit();
      *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
      swift_retain();
      swift_retain();
    }
    else
    {
      v28 = *(_OWORD *)v26;
      *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
      *(_OWORD *)v25 = v28;
    }
    v29 = (_OWORD *)((v25 + 31) & 0xFFFFFFFFFFFFFFF8);
    v30 = (__int128 *)((v26 + 31) & 0xFFFFFFFFFFFFFFF8);
    v31 = *v30;
    v32 = v30[2];
    v29[1] = v30[1];
    v29[2] = v32;
    *v29 = v31;
    v33 = ((unint64_t)v29 + 55) & 0xFFFFFFFFFFFFFFF8;
    v34 = ((unint64_t)v30 + 55) & 0xFFFFFFFFFFFFFFF8;
    v35 = *(_OWORD *)v34;
    *(_QWORD *)(v33 + 16) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v33 = v35;
    v23 = 1;
  }
  else
  {
    v19 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v19;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v20 = (a1 + v7 + 17) & ~v7;
    v21 = (a2 + v7 + 17) & ~v7;
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v22(v20, v21, v5);
    v23 = 0;
  }
  *(_BYTE *)(a1 + v9) = v23;
  return a1;
}

uint64_t assignWithCopy for NavigationLinkButtonStyle.Payload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  _OWORD *v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v8 = *(_QWORD *)(v6 + 64);
    if (((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24 <= ((v7 + 17) & (unint64_t)~v7) + v8)
      v9 = ((v7 + 17) & ~v7) + v8;
    else
      v9 = ((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
         + 24;
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    v12 = ~v7;
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
      v13 = (a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
      swift_release();
      if (*(_QWORD *)(((v13 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      v14 = *(_QWORD *)(((v13 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((int)v14 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))((a1 + v7 + 17) & v12, v5);
    }
    v15 = *(unsigned __int8 *)(a2 + v9);
    if (v15 >= 2)
    {
      if (v9 <= 3)
        v16 = v9;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      v17 = (_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
      v18 = (_QWORD *)((a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
      *v17 = *v18;
      v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
      v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
      v21 = ((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8;
      v22 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
      v23 = *(_QWORD *)(v22 + 8);
      swift_retain();
      if (v23 < 0xFFFFFFFF)
      {
        v24 = *(_OWORD *)v22;
        *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
        *(_OWORD *)v21 = v24;
      }
      else
      {
        *(_QWORD *)v21 = *(_QWORD *)v22;
        *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
        *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
        swift_retain();
        swift_retain();
      }
      v25 = ((unint64_t)v17 + 55) & 0xFFFFFFFFFFFFFFF8;
      v26 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
      v27 = *(_QWORD *)(v26 + 8);
      if (v27 >= 0xFFFFFFFF)
        LODWORD(v27) = -1;
      if ((int)v27 - 1 < 0)
      {
        swift_weakCopyInit();
        *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
        *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
        swift_retain();
        swift_retain();
      }
      else
      {
        v28 = *(_OWORD *)v26;
        *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
        *(_OWORD *)v25 = v28;
      }
      v29 = (_OWORD *)((v25 + 31) & 0xFFFFFFFFFFFFFFF8);
      v30 = (__int128 *)((v26 + 31) & 0xFFFFFFFFFFFFFFF8);
      v31 = *v30;
      v32 = v30[2];
      v29[1] = v30[1];
      v29[2] = v32;
      *v29 = v31;
      v33 = ((unint64_t)v29 + 55) & 0xFFFFFFFFFFFFFFF8;
      v34 = ((unint64_t)v30 + 55) & 0xFFFFFFFFFFFFFFF8;
      v35 = *(_OWORD *)v34;
      *(_QWORD *)(v33 + 16) = *(_QWORD *)(v34 + 16);
      *(_OWORD *)v33 = v35;
      v36 = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      v37 = a2 + v7;
      v38 = (a1 + v7 + 17) & v12;
      v39 = (v37 + 17) & v12;
      v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      swift_retain();
      swift_retain();
      v40(v38, v39, v5);
      v36 = 0;
    }
    *(_BYTE *)(a1 + v9) = v36;
  }
  return a1;
}

uint64_t initializeWithTake for NavigationLinkButtonStyle.Payload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  __int128 v21;
  char v22;
  _OWORD *v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= ((v6 + 17) & (unint64_t)~v6) + v7)
    v8 = ((v6 + 17) & ~v6) + v7;
  else
    v8 = ((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24;
  v9 = *(unsigned __int8 *)(a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X14 }
  }
  if (v9 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a1, a2);
    v11 = (_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)((a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v12;
    v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
    v15 = ((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((unint64_t)v12 + 31) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_OWORD *)v16;
    *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
    *(_OWORD *)v15 = v17;
    v18 = ((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8;
    v19 = ((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8;
    v20 = *(_QWORD *)(v19 + 8);
    if (*(_QWORD *)(v19 + 8) >= 0xFFFFFFFFuLL)
      v20 = -1;
    if (v20 - 1 < 0)
    {
      v18 = swift_weakTakeInit();
      *(_OWORD *)(v18 + 8) = *(_OWORD *)(v19 + 8);
    }
    else
    {
      v21 = *(_OWORD *)v19;
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(v19 + 16);
      *(_OWORD *)v18 = v21;
    }
    v23 = (_OWORD *)((v18 + 31) & 0xFFFFFFFFFFFFFFF8);
    v24 = (__int128 *)((v19 + 31) & 0xFFFFFFFFFFFFFFF8);
    v25 = *v24;
    v26 = v24[2];
    v23[1] = v24[1];
    v23[2] = v26;
    *v23 = v25;
    v27 = ((unint64_t)v23 + 55) & 0xFFFFFFFFFFFFFFF8;
    v28 = ((unint64_t)v24 + 55) & 0xFFFFFFFFFFFFFFF8;
    v29 = *(_OWORD *)v28;
    *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
    *(_OWORD *)v27 = v29;
    v22 = 1;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(v5 + 32))((a1 + v6 + 17) & ~v6, (a2 + v6 + 17) & ~v6);
    v22 = 0;
  }
  *(_BYTE *)(a1 + v8) = v22;
  return a1;
}

uint64_t assignWithTake for NavigationLinkButtonStyle.Payload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  __int128 v27;
  _OWORD *v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  char v35;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v8 = *(_QWORD *)(v6 + 64);
    if (((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24 <= ((v7 + 17) & (unint64_t)~v7) + v8)
      v9 = ((v7 + 17) & ~v7) + v8;
    else
      v9 = ((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
         + 24;
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    v12 = ~v7;
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
      v13 = (a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
      swift_release();
      if (*(_QWORD *)(((v13 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      v14 = *(_QWORD *)(((v13 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((int)v14 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))((a1 + v7 + 17) & v12, v5);
    }
    v15 = *(unsigned __int8 *)(a2 + v9);
    if (v15 >= 2)
    {
      if (v9 <= 3)
        v16 = v9;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      v17 = (_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
      v18 = (_QWORD *)((a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
      *v17 = *v18;
      v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
      v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
      v21 = ((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8;
      v22 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
      v23 = *(_OWORD *)v22;
      *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
      *(_OWORD *)v21 = v23;
      v24 = ((unint64_t)v17 + 55) & 0xFFFFFFFFFFFFFFF8;
      v25 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
      v26 = *(_QWORD *)(v25 + 8);
      if (*(_QWORD *)(v25 + 8) >= 0xFFFFFFFFuLL)
        v26 = -1;
      if (v26 - 1 < 0)
      {
        v24 = swift_weakTakeInit();
        *(_OWORD *)(v24 + 8) = *(_OWORD *)(v25 + 8);
      }
      else
      {
        v27 = *(_OWORD *)v25;
        *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
        *(_OWORD *)v24 = v27;
      }
      v28 = (_OWORD *)((v24 + 31) & 0xFFFFFFFFFFFFFFF8);
      v29 = (__int128 *)((v25 + 31) & 0xFFFFFFFFFFFFFFF8);
      v30 = *v29;
      v31 = v29[2];
      v28[1] = v29[1];
      v28[2] = v31;
      *v28 = v30;
      v32 = ((unint64_t)v28 + 55) & 0xFFFFFFFFFFFFFFF8;
      v33 = ((unint64_t)v29 + 55) & 0xFFFFFFFFFFFFFFF8;
      v34 = *(_OWORD *)v33;
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
      *(_OWORD *)v32 = v34;
      v35 = 1;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))((a1 + v7 + 17) & v12, (a2 + v7 + 17) & v12, v5);
      v35 = 0;
    }
    *(_BYTE *)(a1 + v9) = v35;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationLinkButtonStyle.Payload(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = ((v4 + 17) & ~v4) + v5;
  v7 = ((((((((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v7 > v6)
    v6 = v7;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v8 = v6 + 1;
  v9 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 254) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v12 < 2)
    {
LABEL_21:
      v14 = *(unsigned __int8 *)(a1 + v6);
      if (v14 >= 2)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_21;
LABEL_14:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if (!(_DWORD)v8)
    return (v13 + 255);
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18768B79C + 4 * byte_187C4C0B0[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for NavigationLinkButtonStyle.Payload(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = ((v6 + 17) & ~v6) + v7;
  v9 = ((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v9 <= v8)
    v9 = v8;
  v10 = v9 + 1;
  if (a3 < 0xFF)
  {
    v11 = 0u;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v12 = a2 - 255;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *a1 = v14;
        *((_BYTE *)a1 + 2) = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *a1 = v14;
      }
      else
      {
        *(_BYTE *)a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for NavigationLinkButtonStyle.Payload(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = ((v3 + 17) & ~v3) + v4;
  v6 = ((((((((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v6 > v5)
    v5 = v6;
  if (*(unsigned __int8 *)(a1 + v5) < 2u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v7 = v5;
  else
    v7 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18768BA38 + 4 * byte_187C4C0BE[v7]))();
}

void destructiveInjectEnumTag for NavigationLinkButtonStyle.Payload(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (a2 > 1)
  {
    v7 = *(unsigned __int8 *)(v4 + 80);
    v8 = *(_QWORD *)(v4 + 64);
    v9 = ((v7 + 17) & ~v7) + v8;
    v10 = ((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
        + 24;
    if (v10 <= v9)
      v11 = v9;
    else
      v11 = v10;
    v12 = a2 - 2;
    if (v11 < 4)
    {
      v13 = v12 >> (8 * v11);
      v14 = v12 & ~(-1 << (8 * v11));
      a1[v11] = v13 + 2;
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v11 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
    else
    {
      a1[v11] = 2;
      bzero(a1, v11);
      *(_DWORD *)a1 = v12;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 64);
    v6 = ((*(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
    if (((((((((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24 > v6)
      v6 = ((((((((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
         + 24;
    a1[v6] = a2;
  }
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in HideNavigationLinkDisclosureIndicator()
{
  return &protocol witness table for HideNavigationLinkDisclosureIndicator;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in DefaultListNavigationLinkStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in ContentListItemNavigationLinkStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>, (void (*)(uint64_t))type metadata accessor for DefaultListNavigationLinkStyle.ListLink);
}

uint64_t type metadata accessor for DefaultListNavigationLinkStyle.ListLink()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DefaultListNavigationLinkStyle.ListLink;
  if (!type metadata singleton initialization cache for DefaultListNavigationLinkStyle.ListLink)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for _VariadicView.Tree();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ShowsNavigationIndicatorDisclosureIndicatorModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = a2[5];
  v7 = a2[6];
  v8 = *((_DWORD *)a2 + 20);
  v20 = *a2;
  v21 = v4;
  v22 = v5;
  v23 = *(_OWORD *)(a2 + 3);
  v24 = v6;
  v25 = v7;
  v26 = *(_OWORD *)(a2 + 7);
  v27 = a2[9];
  v28 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static ShowsNavigationIndicatorDisclosureIndicatorModifier._makeInputs(modifier:inputs:)();
  v11 = v20;
  v12 = v21;
  v13 = v5;
  v14 = v23;
  v15 = v6;
  v16 = v7;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ShowsNavigationIndicatorDisclosureIndicatorModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  char v29;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = a2[5];
  v7 = *((_DWORD *)a2 + 16);
  v8 = a2[9];
  v9 = *((_BYTE *)a2 + 80);
  v21 = *a2;
  v22 = v4;
  v23 = v5;
  v24 = *(_OWORD *)(a2 + 3);
  v25 = v6;
  v26 = *((_OWORD *)a2 + 3);
  v27 = v7;
  v28 = v8;
  v29 = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized static ShowsNavigationIndicatorDisclosureIndicatorModifier._makeInputs(modifier:inputs:)();
  v12 = v21;
  v13 = v22;
  v14 = v5;
  v15 = v24;
  v16 = v6;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  v20 = v29;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v10 = swift_bridgeObjectRetain();
  a3(v10, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance ShowsNavigationIndicatorDisclosureIndicatorModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double SplitViewNavigationIndicator.value.getter@<D0>(_OWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;
  double result;
  __int128 v5;

  if (*(_QWORD *)(AGGraphGetValue() + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  *(_QWORD *)&v5 = *Value;
  *((_QWORD *)&v5 + 1) = v3;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>, (uint64_t)&type metadata for DefaultNavigationIndicatorVisibilityKey, (uint64_t)&protocol witness table for DefaultNavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  result = *(double *)&v5;
  *a1 = v5;
  return result;
}

double protocol witness for Rule.value.getter in conformance SplitViewNavigationIndicator@<D0>(_OWORD *a1@<X8>)
{
  return SplitViewNavigationIndicator.value.getter(a1);
}

uint64_t protocol witness for Rule.value.getter in conformance AlwaysNavigationIndicator@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter();
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance PresentingToActivationProjection(_BYTE *a1, char *a2)
{
  char v3;
  uint64_t result;

  v3 = *a2;
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentingToActivationProjection and conformance PresentingToActivationProjection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection;
  if (!lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentingToActivationProjection, &unk_1E1B01710);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection;
  if (!lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentingToActivationProjection, &unk_1E1B01710);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection;
  if (!lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentingToActivationProjection, &unk_1E1B01710);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection);
  }
  return result;
}

uint64_t sub_18768C444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v5 = v4;
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = type metadata accessor for NavigationLinkButtonStyle(0, v6, v7, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 32) & ~v10;
  v24 = *(_QWORD *)(v9 + 64);
  v13 = type metadata accessor for NavigationLinkButtonStyle.PayloadV1(0, v6, v7, v12);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(v13 - 8) + 80);
  swift_release();
  v15 = v5 + v11 + *(int *)(v8 + 36);
  v17 = type metadata accessor for NavigationLinkButtonStyle.Payload(0, v6, v7, v16);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v15, 1, v17);
  v19 = v24;
  if (!v18)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v15, v6);
      v21 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4(0, v6, v7, v20);
      swift_release();
      if (*(_QWORD *)(v15 + *(int *)(v21 + 48) + 8))
      {
        swift_release();
        swift_release();
      }
      v19 = v24;
      v11 = (v10 + 32) & ~v10;
      if (*(_QWORD *)(v15 + *(int *)(v21 + 52) + 8) != 1)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
        v19 = v24;
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v15 + *(int *)(v13 + 36), v6);
      v19 = v24;
      v11 = (v10 + 32) & ~v10;
    }
  }
  v22 = v5 + ((v11 + v19 + v14) & ~v14);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v22 + *(int *)(v13 + 36), v6);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in NavigationLinkButtonStyle.reconfiguration(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  type metadata accessor for NavigationLinkButtonStyle(0, v5, v6, a4);
  type metadata accessor for NavigationLinkButtonStyle.PayloadV1(0, v5, v6, v7);
  return specialized NavigationLinkButtonStyle.triggerV1(payload:)();
}

uint64_t sub_18768C6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(unint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = type metadata accessor for NavigationLinkButtonStyle(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v12 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4(0, v5, v6, v11);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80);
  v14 = (v9 + v10 + v13) & ~v13;
  swift_release();
  v15 = v4 + v9 + *(int *)(v7 + 36);
  v17 = type metadata accessor for NavigationLinkButtonStyle.Payload(0, v5, v6, v16);
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v15, 1, v17))
  {
    v18 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v18(v15, v5);
    swift_release();
    if (*(_QWORD *)(v15 + *(int *)(v12 + 48) + 8))
    {
      swift_release();
      swift_release();
    }
    if (*(_QWORD *)(v15 + *(int *)(v12 + 52) + 8) != 1)
    {
      swift_weakDestroy();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    v20 = type metadata accessor for NavigationLinkButtonStyle.PayloadV1(0, v5, v6, v19);
    v18 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v18(v15 + *(int *)(v20 + 36), v5);
  }
  v18(v4 + v14, v5);
  swift_release();
  if (*(_QWORD *)(v4 + v14 + *(int *)(v12 + 48) + 8))
  {
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(v4 + v14 + *(int *)(v12 + 52) + 8) != 1)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationLinkButtonStyle.reconfiguration(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = type metadata accessor for NavigationLinkButtonStyle(0, v5, v6, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NavigationLinkButtonStyle.PayloadV4(0, v5, v6, v11)- 8)+ 80);
  return NavigationLinkButtonStyle.triggerV4(payload:)(v4 + ((v9 + v10 + v12) & ~v12), v7, v13, v14);
}

uint64_t specialized static ShowsNavigationIndicatorDisclosureIndicatorModifier._makeInputs(modifier:inputs:)()
{
  char v0;
  char v1;
  uint64_t result;

  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
LABEL_4:
    _GraphInputs.environment.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type SplitViewNavigationIndicator and conformance SplitViewNavigationIndicator();
    goto LABEL_9;
  }
  v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v0 & 1) != 0)
    goto LABEL_4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    v1 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    if ((v1 & 1) == 0)
      return result;
  }
  _GraphInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type AlwaysNavigationIndicator and conformance AlwaysNavigationIndicator();
LABEL_9:
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

uint64_t specialized NavigationLinkButtonStyle.triggerV1(payload:)()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t assignWithCopy for PresentingToActivationProjection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentingToActivationProjection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentingToActivationProjection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for PresentingToActivationProjection()
{
  return &unk_1E1B01710;
}

_QWORD *initializeBufferWithCopyOfBuffer for DefaultListNavigationLinkStyle.ListLink(_WORD *a1, _WORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char v49;
  char v51;
  char v52;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *a1 = *a2;
    v7 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v26 = *(_QWORD *)v9;
      v27 = *((_QWORD *)v9 + 1);
      v28 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v9, v27, v28);
      *(_QWORD *)v8 = v26;
      *((_QWORD *)v8 + 1) = v27;
      v8[16] = v28;
      v29 = *((_QWORD *)v9 + 5);
      v30 = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 24) = v30;
      *((_QWORD *)v8 + 5) = v29;
      v31 = (id)v30;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v11 = *(_QWORD *)v9;
        v12 = *((_QWORD *)v9 + 1);
        v14 = *((_QWORD *)v9 + 2);
        v13 = *((_QWORD *)v9 + 3);
        v51 = v9[34];
        v15 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v9, v12, v14, v13, v15, v51);
        *(_QWORD *)v8 = v11;
        *((_QWORD *)v8 + 1) = v12;
        *((_QWORD *)v8 + 2) = v14;
        *((_QWORD *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v15;
        v8[34] = v51;
        v16 = *((_QWORD *)v9 + 5);
        v17 = *((_QWORD *)v9 + 6);
        v18 = *((_QWORD *)v9 + 7);
        v19 = *((_QWORD *)v9 + 8);
        v52 = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v14, v52);
        *((_QWORD *)v8 + 5) = v16;
        *((_QWORD *)v8 + 6) = v17;
        *((_QWORD *)v8 + 7) = v18;
        *((_QWORD *)v8 + 8) = v19;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v52;
        v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v21 = &v8[v20];
        v22 = &v9[v20];
        v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
        v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        v33 = a3[5];
        v34 = (char *)v4 + v33;
        v35 = (char *)a2 + v33;
        v36 = *(_QWORD *)v35;
        v37 = *((_QWORD *)v35 + 1);
        v38 = *((_QWORD *)v35 + 2);
        v39 = *((_QWORD *)v35 + 3);
        v40 = v35[32];
        outlined copy of Environment<EdgeInsets>.Content(*(_QWORD *)v35, v37, v38, v39, v40);
        *(_QWORD *)v34 = v36;
        *((_QWORD *)v34 + 1) = v37;
        *((_QWORD *)v34 + 2) = v38;
        *((_QWORD *)v34 + 3) = v39;
        v34[32] = v40;
        v41 = a3[6];
        v42 = (char *)v4 + v41;
        v43 = (char *)a2 + v41;
        v44 = *(_QWORD *)v43;
        LOBYTE(v37) = v43[8];
        outlined copy of Environment<Bool>.Content(*(_QWORD *)v43, v37);
        *(_QWORD *)v42 = v44;
        v42[8] = v37;
        v45 = a3[7];
        v46 = (char *)v4 + v45;
        v47 = (char *)a2 + v45;
        v48 = *(_QWORD *)v47;
        v49 = v47[8];
        outlined copy of Environment<Bool>.Content(*(_QWORD *)v47, v49);
        *(_QWORD *)v46 = v48;
        v46[8] = v49;
        return v4;
      }
      v32 = *((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v32;
    }
    swift_retain();
    goto LABEL_9;
  }
  v25 = *(_QWORD *)a2;
  *v4 = *(_QWORD *)a2;
  v4 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for DefaultListNavigationLinkStyle.ListLink(uint64_t a1, int *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));

LABEL_6:
      swift_release();
      break;
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_WORD *)(v4 + 32), *(_BYTE *)(v4 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_WORD *)(v4 + 72), *(_BYTE *)(v4 + 74));
      v6 = v4 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      break;
    case 0:
      goto LABEL_6;
  }
  v8 = a1 + a2[5];
  outlined consume of Environment<EdgeInsets>.Content(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_BYTE *)(v8 + 32));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + a2[6]), *(_BYTE *)(a1 + a2[6] + 8));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
}

_WORD *initializeWithCopy for DefaultListNavigationLinkStyle.ListLink(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char v48;
  char v49;
  int *v50;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v24 = *(_QWORD *)v8;
    v25 = *((_QWORD *)v8 + 1);
    v26 = v8[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v25, v26);
    *(_QWORD *)v7 = v24;
    *((_QWORD *)v7 + 1) = v25;
    v7[16] = v26;
    v27 = *((_QWORD *)v8 + 5);
    v28 = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 24) = v28;
    *((_QWORD *)v7 + 5) = v27;
    v29 = (id)v28;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v30 = *((_QWORD *)v8 + 1);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *((_QWORD *)v7 + 1) = v30;
    goto LABEL_6;
  }
  v50 = a3;
  v10 = *(_QWORD *)v8;
  v11 = *((_QWORD *)v8 + 1);
  v13 = *((_QWORD *)v8 + 2);
  v12 = *((_QWORD *)v8 + 3);
  v48 = v8[34];
  v14 = *((_WORD *)v8 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v8, v11, v13, v12, v14, v48);
  *(_QWORD *)v7 = v10;
  *((_QWORD *)v7 + 1) = v11;
  *((_QWORD *)v7 + 2) = v13;
  *((_QWORD *)v7 + 3) = v12;
  *((_WORD *)v7 + 16) = v14;
  v7[34] = v48;
  v15 = *((_QWORD *)v8 + 5);
  v16 = *((_QWORD *)v8 + 6);
  v17 = *((_QWORD *)v8 + 7);
  v18 = *((_QWORD *)v8 + 8);
  v49 = v8[74];
  LOWORD(v13) = *((_WORD *)v8 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v13, v49);
  *((_QWORD *)v7 + 5) = v15;
  *((_QWORD *)v7 + 6) = v16;
  *((_QWORD *)v7 + 7) = v17;
  *((_QWORD *)v7 + 8) = v18;
  *((_WORD *)v7 + 36) = v13;
  a3 = v50;
  v7[74] = v49;
  v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v20 = &v7[v19];
  v21 = &v8[v19];
  v22 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = type metadata accessor for LinkDestination.Configuration();
  v20[*(int *)(v23 + 20)] = v21[*(int *)(v23 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  v31 = a3[5];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)v33;
  v35 = *((_QWORD *)v33 + 1);
  v36 = *((_QWORD *)v33 + 2);
  v37 = *((_QWORD *)v33 + 3);
  v38 = v33[32];
  outlined copy of Environment<EdgeInsets>.Content(*(_QWORD *)v33, v35, v36, v37, v38);
  *(_QWORD *)v32 = v34;
  *((_QWORD *)v32 + 1) = v35;
  *((_QWORD *)v32 + 2) = v36;
  *((_QWORD *)v32 + 3) = v37;
  v32[32] = v38;
  v39 = a3[6];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = *(_QWORD *)v41;
  LOBYTE(v35) = v41[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v41, v35);
  *(_QWORD *)v40 = v42;
  v40[8] = v35;
  v43 = a3[7];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = *(_QWORD *)v45;
  LOBYTE(v42) = v45[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v45, v42);
  *(_QWORD *)v44 = v46;
  v44[8] = v42;
  return a1;
}

_WORD *assignWithCopy for DefaultListNavigationLinkStyle.ListLink(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  char v59;
  char v60;

  *a1 = *a2;
  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v7 = *(int *)(v6 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v7, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v25 = *(_QWORD *)v9;
      v26 = *((_QWORD *)v9 + 1);
      v27 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v9, v26, v27);
      *(_QWORD *)v8 = v25;
      *((_QWORD *)v8 + 1) = v26;
      v8[16] = v27;
      v28 = (void *)*((_QWORD *)v9 + 3);
      *((_QWORD *)v8 + 3) = v28;
      v29 = *((_QWORD *)v9 + 5);
      *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
      *((_QWORD *)v8 + 5) = v29;
      v30 = v28;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v11 = *(_QWORD *)v9;
        v12 = *((_QWORD *)v9 + 1);
        v14 = *((_QWORD *)v9 + 2);
        v13 = *((_QWORD *)v9 + 3);
        v59 = v9[34];
        v15 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v9, v12, v14, v13, v15, v59);
        *(_QWORD *)v8 = v11;
        *((_QWORD *)v8 + 1) = v12;
        *((_QWORD *)v8 + 2) = v14;
        *((_QWORD *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v15;
        v8[34] = v59;
        v16 = *((_QWORD *)v9 + 5);
        v17 = *((_QWORD *)v9 + 6);
        v18 = *((_QWORD *)v9 + 7);
        v19 = *((_QWORD *)v9 + 8);
        v60 = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v14, v60);
        *((_QWORD *)v8 + 5) = v16;
        *((_QWORD *)v8 + 6) = v17;
        *((_QWORD *)v8 + 7) = v18;
        *((_QWORD *)v8 + 8) = v19;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v60;
        v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v21 = &v8[v20];
        v22 = &v9[v20];
        v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
        v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        goto LABEL_9;
      }
      v31 = *((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v31;
    }
    swift_retain();
    goto LABEL_8;
  }
LABEL_9:
  v32 = a3[5];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)v34;
  v36 = *((_QWORD *)v34 + 1);
  v37 = *((_QWORD *)v34 + 2);
  v38 = *((_QWORD *)v34 + 3);
  v39 = v34[32];
  outlined copy of Environment<EdgeInsets>.Content(*(_QWORD *)v34, v36, v37, v38, v39);
  v40 = *(_QWORD *)v33;
  v41 = *((_QWORD *)v33 + 1);
  v42 = *((_QWORD *)v33 + 2);
  v43 = *((_QWORD *)v33 + 3);
  v44 = v33[32];
  *(_QWORD *)v33 = v35;
  *((_QWORD *)v33 + 1) = v36;
  *((_QWORD *)v33 + 2) = v37;
  *((_QWORD *)v33 + 3) = v38;
  v33[32] = v39;
  outlined consume of Environment<EdgeInsets>.Content(v40, v41, v42, v43, v44);
  v45 = a3[6];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = *(_QWORD *)v47;
  LOBYTE(v36) = v47[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v47, v36);
  v49 = *(_QWORD *)v46;
  v50 = v46[8];
  *(_QWORD *)v46 = v48;
  v46[8] = v36;
  outlined consume of Environment<Bool>.Content(v49, v50);
  v51 = a3[7];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = *(_QWORD *)v53;
  v55 = v53[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v53, v55);
  v56 = *(_QWORD *)v52;
  v57 = v52[8];
  *(_QWORD *)v52 = v54;
  v52[8] = v55;
  outlined consume of Environment<Bool>.Content(v56, v57);
  return a1;
}

_WORD *initializeWithTake for DefaultListNavigationLinkStyle.ListLink(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *((_OWORD *)v8 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *((_OWORD *)v7 + 1) = v10;
    *(_DWORD *)(v7 + 31) = *(_DWORD *)(v8 + 31);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_DWORD *)(v7 + 71) = *(_DWORD *)(v8 + 71);
    v11 = *(int *)(type metadata accessor for LinkDestination() + 24);
    v12 = &v7[v11];
    v13 = &v8[v11];
    v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    v15 = type metadata accessor for LinkDestination.Configuration();
    v12[*(int *)(v15 + 20)] = v13[*(int *)(v15 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v16 = a3[5];
  v17 = a3[6];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  v18[32] = v19[32];
  v21 = (char *)a1 + v17;
  v22 = (char *)a2 + v17;
  v21[8] = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v23 = a3[7];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  return a1;
}

_WORD *assignWithTake for DefaultListNavigationLinkStyle.ListLink(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  *a1 = *a2;
  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v7 = *(int *)(v6 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v7, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    v10 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = *((_OWORD *)v9 + 1);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v11;
      *(_DWORD *)(v8 + 31) = *(_DWORD *)(v9 + 31);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
      *(_DWORD *)(v8 + 71) = *(_DWORD *)(v9 + 71);
      v12 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v13 = &v8[v12];
      v14 = &v9[v12];
      v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      v16 = type metadata accessor for LinkDestination.Configuration();
      v13[*(int *)(v16 + 20)] = v14[*(int *)(v16 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v17 = a3[5];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = v19[32];
  v21 = *(_QWORD *)v18;
  v22 = *((_QWORD *)v18 + 1);
  v23 = *((_QWORD *)v18 + 2);
  v24 = *((_QWORD *)v18 + 3);
  v25 = v18[32];
  v26 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v26;
  v18[32] = v20;
  outlined consume of Environment<EdgeInsets>.Content(v21, v22, v23, v24, v25);
  v27 = a3[6];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *(_QWORD *)v29;
  LOBYTE(v29) = v29[8];
  v31 = *(_QWORD *)v28;
  v32 = v28[8];
  *(_QWORD *)v28 = v30;
  v28[8] = (char)v29;
  outlined consume of Environment<Bool>.Content(v31, v32);
  v33 = a3[7];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = *(_QWORD *)v35;
  LOBYTE(v35) = v35[8];
  v37 = *(_QWORD *)v34;
  v38 = v34[8];
  *(_QWORD *)v34 = v36;
  v34[8] = (char)v35;
  outlined consume of Environment<Bool>.Content(v37, v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultListNavigationLinkStyle.ListLink()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18768D904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 32);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DefaultListNavigationLinkStyle.ListLink()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18768D98C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 32) = -(char)a2;
  return result;
}

uint64_t type metadata completion function for DefaultListNavigationLinkStyle.ListLink()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShowsNavigationIndicatorDisclosureIndicatorModifier()
{
  return &type metadata for ShowsNavigationIndicatorDisclosureIndicatorModifier;
}

uint64_t sub_18768DA94()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>, MEMORY[0x1E0CE74B8]);
}

void type metadata accessor for VStack<ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>)
  {
    type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>, lazy protocol witness table accessor for type DefaultListNavigationLinkStyle.ListLink and conformance DefaultListNavigationLinkStyle.ListLink, (uint64_t (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier);
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>);
  }
}

uint64_t lazy protocol witness table accessor for type DefaultListNavigationLinkStyle.ListLink and conformance DefaultListNavigationLinkStyle.ListLink()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DefaultListNavigationLinkStyle.ListLink and conformance DefaultListNavigationLinkStyle.ListLink, (uint64_t (*)(uint64_t))type metadata accessor for DefaultListNavigationLinkStyle.ListLink, (uint64_t)&protocol conformance descriptor for DefaultListNavigationLinkStyle.ListLink);
}

uint64_t sub_18768DB5C()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<DefaultListNavigationLinkStyle.ListLink> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<DefaultListNavigationLinkStyle.ListLink>, MEMORY[0x1E0CE74B8]);
}

void type metadata accessor for VStack<DefaultListNavigationLinkStyle.ListLink>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<DefaultListNavigationLinkStyle.ListLink>)
  {
    type metadata accessor for DefaultListNavigationLinkStyle.ListLink();
    lazy protocol witness table accessor for type DefaultListNavigationLinkStyle.ListLink and conformance DefaultListNavigationLinkStyle.ListLink();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<DefaultListNavigationLinkStyle.ListLink>);
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in ShowsNavigationIndicatorDisclosureIndicatorModifier()
{
  return &protocol witness table for ShowsNavigationIndicatorDisclosureIndicatorModifier;
}

uint64_t associated type witness table accessor for View.Body : View in DefaultListNavigationLinkStyle.ListLink()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type SplitViewNavigationIndicator and conformance SplitViewNavigationIndicator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SplitViewNavigationIndicator and conformance SplitViewNavigationIndicator;
  if (!lazy protocol witness table cache variable for type SplitViewNavigationIndicator and conformance SplitViewNavigationIndicator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SplitViewNavigationIndicator, &unk_1E1AF81F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SplitViewNavigationIndicator and conformance SplitViewNavigationIndicator);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type InvertedViewInputPredicate<_SemanticFeature_v4> and conformance InvertedViewInputPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InvertedViewInputPredicate<_SemanticFeature_v4> and conformance InvertedViewInputPredicate<A>;
  if (!lazy protocol witness table cache variable for type InvertedViewInputPredicate<_SemanticFeature_v4> and conformance InvertedViewInputPredicate<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<_SemanticFeature_v4>, MEMORY[0x1E0CE4C48], MEMORY[0x1E0CE4C38], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6010], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvertedViewInputPredicate<_SemanticFeature_v4> and conformance InvertedViewInputPredicate<A>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, EmptyView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, EmptyView>>)
  {
    type metadata accessor for StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>();
    type metadata accessor for StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, EmptyView>();
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, EmptyView>>);
  }
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>;
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator, (uint64_t)&type metadata for HideNavigationLinkDisclosureIndicator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>));
    lazy protocol witness table accessor for type InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator> and conformance InvertedViewInputPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>))
  {
    type metadata accessor for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>();
    type metadata accessor for ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>));
  }
}

void type metadata accessor for ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)
  {
    type metadata accessor for StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>)
  {
    type metadata accessor for AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>> and conformance AndOperationViewInputPredicate<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, MEMORY[0x1E0CE6530]);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<_SemanticFeature_v4>, MEMORY[0x1E0CE4C48], MEMORY[0x1E0CE4C38], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>, (uint64_t)&type metadata for SidebarListStyleContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    lazy protocol witness table accessor for type InvertedViewInputPredicate<_SemanticFeature_v4> and conformance InvertedViewInputPredicate<A>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>, (uint64_t)&type metadata for SidebarListStyleContext);
    v0 = type metadata accessor for AndOperationViewInputPredicate();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>);
  }
}

unint64_t lazy protocol witness table accessor for type InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator> and conformance InvertedViewInputPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator> and conformance InvertedViewInputPredicate<A>;
  if (!lazy protocol witness table cache variable for type InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator> and conformance InvertedViewInputPredicate<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator, (uint64_t)&type metadata for HideNavigationLinkDisclosureIndicator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6010], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator> and conformance InvertedViewInputPredicate<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, EmptyView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, EmptyView>;
  if (!lazy cache variable for type metadata for StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, EmptyView>)
  {
    type metadata accessor for StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>();
    lazy protocol witness table accessor for type ShowsDisclosureIndicatorPredicate and conformance ShowsDisclosureIndicatorPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShowsDisclosureIndicatorPredicate and conformance ShowsDisclosureIndicatorPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShowsDisclosureIndicatorPredicate and conformance ShowsDisclosureIndicatorPredicate;
  if (!lazy protocol witness table cache variable for type ShowsDisclosureIndicatorPredicate and conformance ShowsDisclosureIndicatorPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShowsDisclosureIndicatorPredicate, &type metadata for ShowsDisclosureIndicatorPredicate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShowsDisclosureIndicatorPredicate and conformance ShowsDisclosureIndicatorPredicate);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<_SemanticFeature_v4>, MEMORY[0x1E0CE4C48], MEMORY[0x1E0CE4C38], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE6000]);
    lazy protocol witness table accessor for type InvertedViewInputPredicate<_SemanticFeature_v4> and conformance InvertedViewInputPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, EdgesOutsettingByRowInsetsModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, EdgesOutsettingByRowInsetsModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, EdgesOutsettingByRowInsetsModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, EdgesOutsettingByRowInsetsModifier, EmptyModifier>);
    v2[0] = lazy protocol witness table accessor for type EdgesOutsettingByRowInsetsModifier and conformance EdgesOutsettingByRowInsetsModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, EdgesOutsettingByRowInsetsModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void *type metadata accessor for SplitViewNavigationIndicator()
{
  return &unk_1E1AF81F0;
}

void *type metadata accessor for AlwaysNavigationIndicator()
{
  return &unk_1E1AE8670;
}

ValueMetadata *type metadata accessor for ShowsDisclosureIndicatorPredicate()
{
  return &type metadata for ShowsDisclosureIndicatorPredicate;
}

uint64_t sub_18768E608()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputP, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInpu, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewI, (uint64_t (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
}

void static __UniversalListStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_18768E6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v3 = type metadata accessor for SelectionManagerBox(255, v1, v0, v2);
  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v3);
  v6 = type metadata accessor for UniversalList(255, v3, v4, v5);
  type metadata accessor for _VariadicView.Tree();
  v8 = type metadata accessor for __UniversalListStyle.Body(0, v1, v0, v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for __UniversalListStyle.Body<A>, v8);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalList<A>, v6);
  return static _VariadicView.Tree<>._makeView(view:inputs:)();
}

uint64_t type metadata accessor for __UniversalListStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for __UniversalListStyle.Body);
}

void static __UniversalListStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_18768E8BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v3 = type metadata accessor for SelectionManagerBox(255, v1, v0, v2);
  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v3);
  v6 = type metadata accessor for UniversalList(255, v3, v4, v5);
  type metadata accessor for _VariadicView.Tree();
  v8 = type metadata accessor for __UniversalListStyle.Body(0, v1, v0, v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for __UniversalListStyle.Body<A>, v8);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UniversalList<A>, v6);
  return static _VariadicView.Tree<>._makeViewList(view:inputs:)();
}

void __UniversalListStyle.Body.base.getter()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_18768EA38(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void __UniversalListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for SelectionManagerBox(255, a2, a3, a4);
  type metadata accessor for Binding();
  v5 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v5, v4);
  type metadata accessor for _ListValue();
}

void sub_18768EB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v2, v3);
  v6 = type metadata accessor for UniversalList(0, v2, v4, v5);
  MEMORY[0x1E0C80A78](v6, v7);
  __UniversalListStyle.Body.base.getter();
}

uint64_t sub_18768EBA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v2 + 32))(v5, v6, *(_QWORD *)(v7 - 176));
  UniversalList.init(selection:)(v5, v0);
  *(_QWORD *)(v7 - 144) = v3;
  *(_QWORD *)(v7 - 136) = v1;
  *(_DWORD *)(v7 - 128) = v4;
  return _VariadicView.Tree.init(_:content:)();
}

void closure #1 in __UniversalListStyle.Body.value.getter()
{
  type metadata accessor for _ListValue();
}

void sub_18768EC6C(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  __UniversalListStyle.Body.base.getter();
}

uint64_t sub_18768ECAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance __UniversalListStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v4);
  type metadata accessor for UniversalList(255, v4, v5, v6);
  v7 = type metadata accessor for _VariadicView.Tree();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

void protocol witness for Rule.value.getter in conformance __UniversalListStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;

  __UniversalListStyle.Body.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

ValueMetadata *type metadata accessor for __UniversalListStyle()
{
  return &type metadata for __UniversalListStyle;
}

void base witness table accessor for _AttributeBody in __UniversalListStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void partial apply for closure #1 in __UniversalListStyle.Body.value.getter()
{
  closure #1 in __UniversalListStyle.Body.value.getter();
}

uint64_t destroy for InspectorState(uint64_t a1)
{
  return outlined consume of StateOrBinding<Bool>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_BYTE *)(a1 + 17));
}

uint64_t initializeWithCopy for InspectorState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 17);
  v7 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of StateOrBinding<Bool>(*(_QWORD *)a2, v5, v7, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 17) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for InspectorState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 17);
  v7 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of StateOrBinding<Bool>(*(_QWORD *)a2, v5, v7, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 17);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v11 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 17) = v6;
  outlined consume of StateOrBinding<Bool>(v8, v9, v11, v10);
  v12 = *(_OWORD *)(a2 + 24);
  v13 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 24) = v12;
  return a1;
}

uint64_t assignWithTake for InspectorState(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 17);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v9 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 17) = v5;
  outlined consume of StateOrBinding<Bool>(v6, v7, v9, v8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for InspectorState(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32) >> 1;
  v4 = -2 - v3;
  if (-2 - (int)v3 < 0)
    v4 = -1;
  if (v3 <= 0x80000000)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InspectorState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 2 * ~a2;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_BYTE *)(result + 56) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InspectorState()
{
  return &type metadata for InspectorState;
}

ValueMetadata *type metadata accessor for InspectorColumnWidth()
{
  return &type metadata for InspectorColumnWidth;
}

ValueMetadata *type metadata accessor for InspectorColumnWidth.TraitKey()
{
  return &type metadata for InspectorColumnWidth.TraitKey;
}

ValueMetadata *type metadata accessor for InspectorStorageV5.PreferenceKey()
{
  return &type metadata for InspectorStorageV5.PreferenceKey;
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance InspectorStorageV5.PreferenceKey(_BYTE *a1, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _QWORD *result;
  char v4;
  uint64_t v5;

  result = a2(&v5);
  v4 = BYTE2(v5);
  *a1 = (*a1 | v5) & 1;
  a1[2] = (a1[2] | v4) & 1;
  return result;
}

ValueMetadata *type metadata accessor for InspectorStorageV5()
{
  return &type metadata for InspectorStorageV5;
}

void static ScrollPagingBehavior.paging.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ScrollPagingBehavior.childLeading.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t PagingScrollViewBehavior._updateEnvironment(_:context:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  char *v4;
  char v6;
  char v7;
  char v8;

  if (HIBYTE(a3))
  {
    if (HIBYTE(a3) == 1)
    {
      v6 = 3;
      v4 = &v6;
    }
    else
    {
      v7 = 2;
      v4 = &v7;
    }
  }
  else
  {
    v8 = 4;
    v4 = &v8;
  }
  return specialized PagingScrollViewBehavior.updateDeceleration(_:env:)(v4, a1);
}

uint64_t protocol witness for ScrollTargetBehavior._updateEnvironment(_:context:) in conformance PagingScrollViewBehavior(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;

  return PagingScrollViewBehavior._updateEnvironment(_:context:)(a1, a2, *v2 | (unsigned __int16)(v2[1] << 8));
}

void static ScrollPagingBehavior.childPaging.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_18768F120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v10[0] = v1;
  v10[1] = &protocol witness table for ScrollTargetModifier;
  v3 = MEMORY[0x1E0CE2E70];
  v4 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v10);
  v6 = type metadata accessor for SystemScrollViewContainer(255, v2, v4, v5);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ScrollBehaviorModifier<PagingScrollViewBehavior>, (uint64_t)&unk_1E1AE59E8, (uint64_t)&protocol witness table for PagingScrollViewBehavior, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ScrollBehaviorModifier);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemScrollViewContainer<A>, v6);
  v9[1] = &protocol witness table for ScrollBehaviorModifier<A>;
  return MEMORY[0x18D75FFDC](v3, v7, v9);
}

uint64_t storeEnumTagSinglePayload for ScrollPagingBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18768F24C + 4 * byte_187C4CA83[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18768F280 + 4 * byte_187C4CA7E[v4]))();
}

uint64_t sub_18768F280(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18768F288(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18768F290);
  return result;
}

uint64_t sub_18768F29C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18768F2A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18768F2A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18768F2B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for PagingScrollViewBehavior(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PagingScrollViewBehavior(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18768F39C + 4 * byte_187C4CA8D[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_18768F3D0 + 4 * byte_187C4CA88[v4]))();
}

uint64_t sub_18768F3D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_18768F3D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x18768F3E0);
  return result;
}

uint64_t sub_18768F3EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x18768F3F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18768F3F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_18768F400(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type PagingBehavior and conformance PagingBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PagingBehavior and conformance PagingBehavior;
  if (!lazy protocol witness table cache variable for type PagingBehavior and conformance PagingBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PagingBehavior, &type metadata for PagingBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PagingBehavior and conformance PagingBehavior);
  }
  return result;
}

uint64_t specialized PagingScrollViewBehavior.updateDeceleration(_:env:)(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v5;
  int v6[20];
  char v7;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v7 = v2;
  outlined init with copy of ScrollEnvironmentProperties(v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

uint64_t ScrollTest.run<A>(in:completion:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  static Update.ensure<A>(_:)();
  swift_beginAccess();
  outlined init with copy of ScrollTestRunner?(v2 + 56, (uint64_t)&v8);
  if (v9)
  {
    outlined init with take of OptionalBinaryInteger(&v8, (uint64_t)v10);
    v4 = v11;
    v5 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    v7 = outlined destroy of ScrollTestRunner?((uint64_t)&v8);
    return a2(v7);
  }
}

uint64_t closure #1 in ScrollTest.run<A>(in:completion:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  _BYTE v30[40];
  uint64_t v31;
  int v32;
  void *v33;
  _UNKNOWN **v34;

  v7 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x58), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v7);
  TestHost.scrollViewProxy.getter((uint64_t)&v31);
  v8 = v31;
  if (v31)
  {
    v29 = v32;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v13 = *(_BYTE *)(a2 + 48);
    v14 = swift_allocObject();
    swift_weakInit();
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = v14;
    v15[3] = a3;
    v15[4] = a4;
    v16 = type metadata accessor for ScrollProxyScrollTestRunner();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v9;
    *(_QWORD *)(v17 + 24) = v10;
    *(_QWORD *)(v17 + 32) = v11;
    *(_QWORD *)(v17 + 40) = v12;
    *(_BYTE *)(v17 + 48) = v13;
    *(_QWORD *)(v17 + 56) = 0;
    *(_QWORD *)(v17 + 64) = v8;
    *(_DWORD *)(v17 + 72) = v29;
    *(_QWORD *)(v17 + 80) = partial apply for closure #1 in closure #1 in ScrollTest.run<A>(in:completion:);
    *(_QWORD *)(v17 + 88) = v15;
    v33 = (void *)v16;
    v34 = &protocol witness table for ScrollProxyScrollTestRunner;
    v31 = v17;
    swift_retain();
    outlined init with take of ScrollTestRunner?((uint64_t)&v31, (uint64_t)v30);
    v18 = a2 + 56;
    swift_beginAccess();
  }
  else
  {
    result = _UIHostingView._topScrollView.getter();
    if (!result)
      return result;
    v20 = result;
    v21 = *(_QWORD *)(a2 + 16);
    v22 = *(_QWORD *)(a2 + 24);
    v23 = *(_QWORD *)(a2 + 32);
    v24 = *(_QWORD *)(a2 + 40);
    v25 = *(_BYTE *)(a2 + 48);
    v26 = swift_allocObject();
    swift_weakInit();
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = v26;
    v27[3] = a3;
    v27[4] = a4;
    v33 = &unk_1E1ADEB80;
    v34 = &protocol witness table for UIScrollViewTestRunner;
    v28 = swift_allocObject();
    v31 = v28;
    *(_QWORD *)(v28 + 16) = v21;
    *(_QWORD *)(v28 + 24) = v22;
    *(_QWORD *)(v28 + 32) = v23;
    *(_QWORD *)(v28 + 40) = v24;
    *(_BYTE *)(v28 + 48) = v25;
    *(_QWORD *)(v28 + 56) = v20;
    *(_QWORD *)(v28 + 64) = partial apply for closure #2 in closure #1 in ScrollTest.run<A>(in:completion:);
    *(_QWORD *)(v28 + 72) = v27;
    outlined init with take of ScrollTestRunner?((uint64_t)&v31, (uint64_t)v30);
    v18 = a2 + 56;
    swift_beginAccess();
    swift_retain();
  }
  outlined assign with take of ScrollTestRunner?((uint64_t)v30, v18);
  return swift_endAccess();
}

uint64_t _UIHostingView._topScrollView.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;

  v1 = objc_msgSend(v0, sel_subviews);
  type metadata accessor for UIView();
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v15 = v2;
  if (v2 >> 62)
    goto LABEL_16;
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    while (1)
    {
      while (1)
      {
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v2 & 0x8000000000000000) != 0
          || (v2 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v2);
        }
        v2 &= 0xFFFFFFFFFFFFFF8uLL;
        v3 = *(_QWORD *)(v2 + 16);
        if (v3)
          break;
        __break(1u);
LABEL_16:
        swift_bridgeObjectRetain();
        v13 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v13)
          goto LABEL_17;
      }
      v4 = v3 - 1;
      v7 = *(void **)(v2 + 32);
      v5 = v2 + 32;
      v6 = v7;
      memmove((void *)v5, (const void *)(v5 + 8), 8 * (v3 - 1));
      *(_QWORD *)(v5 - 16) = v4;
      specialized Array._endMutation()();
      objc_opt_self();
      v8 = swift_dynamicCastObjCClass();
      if (v8)
        break;
      v9 = objc_msgSend(v6, sel_subviews);
      v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      specialized Array.append<A>(contentsOf:)(v10);
      v2 = v15;
      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v11)
          goto LABEL_17;
      }
      else if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_17;
      }
    }
    v12 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v12;
}

uint64_t closure #1 in closure #1 in ScrollTest.run<A>(in:completion:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t Strong;
  uint64_t v4;
  _OWORD v6[2];
  uint64_t v7;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v4 = Strong + 56;
    v7 = 0;
    memset(v6, 0, sizeof(v6));
    swift_beginAccess();
    outlined assign with take of ScrollTestRunner?((uint64_t)v6, v4);
    swift_endAccess();
    Strong = swift_release();
  }
  return a2(Strong);
}

uint64_t ScrollTest.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of ScrollTestRunner?(v0 + 56);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScrollTest()
{
  return objc_opt_self();
}

void ScrollProxyScrollTestRunner.run()()
{
  uint64_t v0;
  id v1;
  double v2;
  double v3;
  id v4;
  void *v5;

  v1 = objc_msgSend((id)objc_opt_self(), sel_displayLinkWithTarget_selector_, v0, sel_incrementScrollTest);
  objc_msgSend(v1, sel_maximumRefreshRate);
  v3 = round(1.0 / v2);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 9.22337204e18)
  {
    objc_msgSend(v1, sel_setPreferredFramesPerSecond_, (uint64_t)v3);
    v4 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
    objc_msgSend(v1, sel_addToRunLoop_forMode_, v4, *MEMORY[0x1E0C99860]);

    v5 = *(void **)(v0 + 56);
    *(_QWORD *)(v0 + 56) = v1;

    return;
  }
LABEL_7:
  __break(1u);
}

void ScrollProxyScrollTestRunner.incrementScrollTest()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  double Height;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  double Width;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  _QWORD v45[4];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  CGRect v49;
  CGRect v50;

  v1 = *(void **)(v0 + 56);
  if (!v1)
    return;
  v2 = v0;
  v3 = (void *)objc_opt_self();
  v4 = v1;
  objc_msgSend(v3, sel_generateSeed);
  objc_msgSend(v4, sel_targetTimestamp);
  v6 = v5;
  objc_msgSend(v4, sel_targetTimestamp);
  v8 = v7;
  objc_msgSend(v4, sel_timestamp);
  objc_msgSend(v3, sel_setEarliestAutomaticCommitTime_, v6 - (v8 + v9 * -0.5));
  v10 = *(double **)(v2 + 64);
  if (v10)
  {
    swift_beginAccess();
    v12 = v10[8];
    v11 = v10[9];
    v13 = (double *)(v2 + 32);
    v14 = *(double *)(v2 + 32);
    v15 = (double *)(v2 + 16);
    if ((*(_BYTE *)(v2 + 48) & 1) != 0)
    {
      swift_beginAccess();
      v16 = v10[8];
      v17 = v10[9];
      swift_beginAccess();
      v18 = v16 - v10[27];
      v19 = v17 - v10[26];
      CGSize.inset(by:)();
      v49.size.width = v20;
      v49.size.height = v21;
      v49.origin.x = v18;
      v49.origin.y = v19;
      Height = CGRectGetHeight(v49);
      v23 = *v13;
      if (v14 > 0.0)
      {
LABEL_5:
        v24 = v11 + Height;
        goto LABEL_11;
      }
      goto LABEL_8;
    }
    swift_beginAccess();
    v26 = v10[8];
    v27 = v10[9];
    swift_beginAccess();
    v28 = v26 - v10[27];
    v29 = v27 - v10[26];
    CGSize.inset(by:)();
    v50.size.width = v30;
    v50.size.height = v31;
    v50.origin.x = v28;
    v50.origin.y = v29;
    Width = CGRectGetWidth(v50);
    v23 = *v13;
    if (v14 > 0.0)
      goto LABEL_10;
LABEL_14:
    v25 = v12 + v23;
LABEL_15:
    if (v25 <= *v15)
    {
      *(double *)(v2 + 32) = -v23;
      v33 = *(_QWORD *)(v2 + 24);
      v34 = __OFSUB__(v33, 1);
      v35 = v33 - 1;
      if (v34)
      {
        __break(1u);
        return;
      }
      *(_QWORD *)(v2 + 24) = v35;
    }
    goto LABEL_18;
  }
  v13 = (double *)(v2 + 32);
  v23 = *(double *)(v2 + 32);
  v15 = (double *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 48) & 1) != 0)
  {
    v11 = 0.0;
    v12 = 0.0;
    Height = 0.0;
    if (v23 > 0.0)
      goto LABEL_5;
LABEL_8:
    v25 = v11 + v23;
    goto LABEL_15;
  }
  v11 = 0.0;
  v12 = 0.0;
  Width = 0.0;
  if (v23 <= 0.0)
    goto LABEL_14;
LABEL_10:
  v24 = v12 + Width;
LABEL_11:
  if (*(double *)(v2 + 16) + *(double *)(v2 + 40) < v24 + v23)
    *v13 = -v23;
LABEL_18:
  if (*(_BYTE *)(v2 + 48))
    v36 = *(double *)(v2 + 32);
  else
    v36 = -0.0;
  if (*(_BYTE *)(v2 + 48))
    v37 = -0.0;
  else
    v37 = *(double *)(v2 + 32);
  v38 = *(_QWORD *)(v2 + 64);
  if (v38)
  {
    swift_beginAccess();
    if (((*(unsigned __int8 *)(v38 + 146) << 16) & 0xFFC1FFFF) != 0)
    {
      v39 = v11 + v36;
      v40 = v12 + v37;
      swift_retain();
      ScrollViewNode.bindingSafeOffset(_:)(v40, v39);
      *(double *)v45 = v40;
      *(double *)&v45[1] = v39;
      *(double *)&v45[2] = v41;
      *(double *)&v45[3] = v42;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      ScrollViewNode.commitScrollTransaction(_:value:)(v45, v41, v42);
      swift_release();
    }
  }
  if (!*(_QWORD *)(v2 + 24) || *(double *)(v2 + 32) == 0.0 || *(double *)(v2 + 40) == 0.0)
  {
    objc_msgSend(v4, sel_invalidate);
    v43 = *(void (**)(uint64_t))(v2 + 80);
    v44 = swift_retain();
    v43(v44);
    swift_release();
  }

}

uint64_t ScrollProxyScrollTestRunner.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScrollProxyScrollTestRunner()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for ScrollTest.Parameters(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for ScrollTest.Parameters()
{
  return &type metadata for ScrollTest.Parameters;
}

void protocol witness for ScrollTestRunner.run() in conformance ScrollProxyScrollTestRunner()
{
  ScrollProxyScrollTestRunner.run()();
}

void UIScrollViewTestRunner.run()()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  uint64_t aBlock;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t (*v17)();
  _OWORD *v18;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v1 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v2 = *(double *)(v0 + 16);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2 <= -2147483650.0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 >= 2147483650.0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v3 = *(double *)(v0 + 24);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v3 <= -2147483650.0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v3 < 2147483650.0)
  {
    v4 = *(void **)(v0 + 40);
    v5 = (int)v2;
    v6 = (int)v3;
    v17 = protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance TableDataSourceAdaptor;
    v18 = 0;
    v7 = MEMORY[0x1E0C809B0];
    aBlock = MEMORY[0x1E0C809B0];
    v14 = 1107296256;
    v15 = thunk for @escaping @callee_guaranteed () -> (@owned [AnyHashable : Any]?);
    v16 = &block_descriptor_47;
    v8 = _Block_copy(&aBlock);
    v9 = (_OWORD *)swift_allocObject();
    v10 = *(_OWORD *)(v0 + 16);
    v9[1] = *(_OWORD *)v0;
    v9[2] = v10;
    v11 = *(_OWORD *)(v0 + 48);
    v9[3] = *(_OWORD *)(v0 + 32);
    v9[4] = v11;
    v17 = partial apply for closure #2 in UIScrollViewTestRunner.run();
    v18 = v9;
    aBlock = v7;
    v14 = 1107296256;
    v15 = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?) -> ();
    v16 = &block_descriptor_16_0;
    v12 = _Block_copy(&aBlock);
    outlined retain of UIScrollViewTestRunner(v0);
    swift_release();
    objc_msgSend(v4, sel__performScrollTest_iterations_delta_length_scrollAxis_extraResultsBlock_completionBlock_, 0, v1, v5, v6, 2, v8, v12);
    _Block_release(v12);
    _Block_release(v8);
    return;
  }
LABEL_17:
  __break(1u);
}

void protocol witness for ScrollTestRunner.run() in conformance UIScrollViewTestRunner()
{
  UIScrollViewTestRunner.run()();
}

uint64_t outlined destroy of ScrollTestRunner?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ScrollTestRunner?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ScrollTestRunner?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ScrollTestRunner?)
  {
    type metadata accessor for ScrollTestRunner();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollTestRunner?);
  }
}

unint64_t type metadata accessor for ScrollTestRunner()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ScrollTestRunner;
  if (!lazy cache variable for type metadata for ScrollTestRunner)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ScrollTestRunner);
  }
  return result;
}

uint64_t partial apply for closure #1 in ScrollTest.run<A>(in:completion:)()
{
  uint64_t v0;

  return closure #1 in ScrollTest.run<A>(in:completion:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t outlined init with copy of ScrollTestRunner?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ScrollTestRunner?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1876905B0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ScrollTest.run<A>(in:completion:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in ScrollTest.run<A>(in:completion:)(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t outlined init with take of ScrollTestRunner?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ScrollTestRunner?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ScrollTestRunner?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ScrollTestRunner?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroy_2Tm_3()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t destroy for UIScrollViewTestRunner(uint64_t a1)
{

  return swift_release();
}

uint64_t initializeWithCopy for UIScrollViewTestRunner(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  id v6;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 56) = v4;
  v6 = (id)v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UIScrollViewTestRunner(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UIScrollViewTestRunner(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);

  v4 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = v4;
  swift_release();
  return a1;
}

void *type metadata accessor for UIScrollViewTestRunner()
{
  return &unk_1E1ADEB80;
}

uint64_t objectdestroy_5Tm_3()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIScrollViewTestRunner.run()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 64))();
}

uint64_t outlined retain of UIScrollViewTestRunner(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 40);
  swift_retain();
  return a1;
}

uint64_t EnvironmentValues.listSectionSpacing.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1E1B01148, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1E1B01148, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1E1B01148, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.listSectionSpacing : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  char v6;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1E1B01148, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1E1B01148, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 9) = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.listSectionSpacing : EnvironmentValues()
{
  return EnvironmentValues.listSectionSpacing.setter();
}

uint64_t EnvironmentValues.listSectionSpacing.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1E1B01148, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t ViewTraitCollection.effectiveListSectionSpacing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v7 = *v1;
  result = ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v10 & 1) != 0)
  {
    result = ViewTraitCollection.value<A>(for:defaultValue:)();
    v4 = v7;
    v5 = v7 ^ 1;
    v6 = v7;
  }
  else
  {
    v5 = 0;
    v6 = v9;
    v4 = v8;
  }
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = v5;
  return result;
}

void static ListSectionSpacing.default.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

void static ListSectionSpacing.compact.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 1;
}

void static ListSectionSpacing.custom(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t View.listSectionSpacing(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  __int16 v20;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListSectionSpacingTraitKey>, (uint64_t)&type metadata for ListSectionSpacingTraitKey, (uint64_t)&protocol witness table for ListSectionSpacingTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v7 = v6;
  v8 = type metadata accessor for ModifiedContent();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)v18 - v12;
  v14 = *((_BYTE *)a1 + 8);
  v19 = *a1;
  v20 = v14;
  MEMORY[0x18D75B4AC](&v19, a2, v7, a3, v11);
  swift_getKeyPath();
  v15 = *((_BYTE *)a1 + 8);
  v19 = *a1;
  v20 = v15;
  v16 = lazy protocol witness table accessor for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>();
  v18[0] = a3;
  v18[1] = v16;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v18);
  View.environment<A>(_:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
}

uint64_t key path getter for EnvironmentValues.listSectionSpacing : EnvironmentValues, serialized(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1E1B01148, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1E1B01148, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_187690FD8()
{
  return EnvironmentValues.listSectionSpacing.setter();
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListSectionSpacingTraitKey>, (uint64_t)&type metadata for ListSectionSpacingTraitKey, (uint64_t)&protocol witness table for ListSectionSpacingTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t View.listSectionSpacing(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4;
  char v5;

  v4 = a3;
  v5 = 0;
  return View.listSectionSpacing(_:)((uint64_t *)&v4, a1, a2);
}

uint64_t View.listSectionSpacing(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t v21;
  char v22;
  char v23;

  v19[1] = a4;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListSectionSpacingTraitKey>, (uint64_t)&type metadata for ListSectionSpacingTraitKey, (uint64_t)&protocol witness table for ListSectionSpacingTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v8 = v7;
  v9 = type metadata accessor for ModifiedContent();
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (char *)v19 - v13;
  v15 = *a1;
  v16 = *((_BYTE *)a1 + 8);
  LOBYTE(a1) = *((_BYTE *)a1 + 9);
  v21 = v15;
  v22 = v16;
  v23 = (char)a1;
  MEMORY[0x18D75B4AC](&v21, a2, v8, a3, v12);
  swift_getKeyPath();
  v21 = v15;
  v22 = v16;
  v23 = (char)a1;
  v17 = lazy protocol witness table accessor for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>();
  v20[0] = a3;
  v20[1] = v17;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v20);
  View.environment<A>(_:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
}

uint64_t sub_18769120C()
{
  return EnvironmentValues.listSectionSpacing.setter();
}

uint64_t static UseCompactSectionSpacingTraitKey.defaultValue.getter()
{
  return 0;
}

void (*EnvironmentValues.listSectionSpacing.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1E1B01148, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1E1B01148, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.listSectionSpacing.modify;
}

void EnvironmentValues.listSectionSpacing.modify(_QWORD **a1)
{
  _BYTE *v1;
  uint64_t v2;
  char v3;
  char v4;

  v1 = *a1;
  v2 = (*a1)[4];
  v3 = *((_BYTE *)*a1 + 8);
  v4 = *((_BYTE *)*a1 + 9);
  (*a1)[2] = **a1;
  v1[24] = v3;
  v1[25] = v4;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1E1B01148, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

ValueMetadata *type metadata accessor for ListSectionSpacing()
{
  return &type metadata for ListSectionSpacing;
}

ValueMetadata *type metadata accessor for ListSectionSpacingTraitKey()
{
  return &type metadata for ListSectionSpacingTraitKey;
}

ValueMetadata *type metadata accessor for UseCompactSectionSpacingTraitKey()
{
  return &type metadata for UseCompactSectionSpacingTraitKey;
}

uint64_t sub_1876914B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListSectionSpacingTraitKey>, (uint64_t)&type metadata for ListSectionSpacingTraitKey, (uint64_t)&protocol witness table for ListSectionSpacingTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<ListSectionSpacing?>();
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = lazy protocol witness table accessor for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>();
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListSectionSpacing?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ListSectionSpacing?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListSectionSpacing?>)
  {
    type metadata accessor for ListSectionSpacing?();
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListSectionSpacing?>);
  }
}

void type metadata accessor for ListSectionSpacing?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ListSectionSpacing?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ListSectionSpacing?);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListSectionSpacing?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListSectionSpacing?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListSectionSpacing?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ListSectionSpacing?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListSectionSpacing?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void *type metadata accessor for ListSectionSpacing.Storage()
{
  return &unk_1E1ACA0A0;
}

void *type metadata accessor for ListSectionSpacingEnvironmentKey()
{
  return &unk_1E1B01148;
}

uint64_t View.accessibilityDisabled()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  _QWORD v11[2];
  char v12;

  v3 = type metadata accessor for ModifiedContent();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v8 = (char *)&v11[-1] - v7;
  MEMORY[0x18D75B4AC](v6);
  swift_getKeyPath();
  v12 = 0;
  v11[0] = a2;
  v11[1] = &protocol witness table for DisableAccessibilityNodesModifier;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v11);
  View.environment<A>(_:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
}

uint64_t ModifiedContent<>.accessibilityAddVisibility(_:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD v7[2];

  v7[0] = *a1;
  v7[1] = v7[0];
  v5 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>, MEMORY[0x1E0CE6508]);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE5728], (uint64_t)v7, 1, a2, MEMORY[0x1E0CE5728], MEMORY[0x1E0CE5720], v5, a3);
}

uint64_t View.accessibilityHidden(_:isEnabled:)(unsigned __int8 a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t inited;
  int v9;
  int v10;
  _DWORD v12[2];

  type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  if ((a1 & a2 & 1) != 0)
    v9 = 4;
  else
    v9 = 0;
  *(_DWORD *)(inited + 32) = v9;
  swift_bridgeObjectRelease();
  if (a1 & 1 | ((a2 & 1) == 0))
    v10 = v9;
  else
    v10 = 4;
  v12[0] = v9;
  v12[1] = v10;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5728], (uint64_t)v12, 1, a3, MEMORY[0x1E0CE5728], a4);
}

uint64_t ModifiedContent<>.accessibilityHidden(_:isEnabled:)@<X0>(unsigned __int8 a1@<W0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t inited;
  int v9;
  int v10;
  uint64_t v11;
  _DWORD v13[2];

  type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  if ((a1 & a2 & 1) != 0)
    v9 = 4;
  else
    v9 = 0;
  *(_DWORD *)(inited + 32) = v9;
  swift_bridgeObjectRelease();
  if (a1 & 1 | ((a2 & 1) == 0))
    v10 = v9;
  else
    v10 = 4;
  v13[0] = v9;
  v13[1] = v10;
  v11 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>, MEMORY[0x1E0CE6508]);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE5728], (uint64_t)v13, 1, a3, MEMORY[0x1E0CE5728], MEMORY[0x1E0CE5720], v11, a4);
}

void type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>);
  }
}

uint64_t View.accessibilityHidden(_:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t inited;
  int v8;
  int v10;
  _DWORD v12[2];

  v6 = a1;
  type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  v8 = 4 * (a1 & 1);
  *(_DWORD *)(inited + 32) = v8;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0 || v6 == 2)
    v10 = 0;
  else
    v10 = 4;
  v12[0] = 4 * (a1 & 1);
  v12[1] = v10 | v8;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5728], (uint64_t)v12, 1, a2, MEMORY[0x1E0CE5728], a3);
}

uint64_t ModifiedContent<>.accessibilityHidden(_:)@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t inited;
  int v8;
  int v10;
  uint64_t v11;
  _DWORD v13[2];

  v6 = a1;
  type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  v8 = 4 * (a1 & 1);
  *(_DWORD *)(inited + 32) = v8;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0 || v6 == 2)
    v10 = 0;
  else
    v10 = 4;
  v13[0] = 4 * (a1 & 1);
  v13[1] = v10 | v8;
  v11 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>, MEMORY[0x1E0CE6508]);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE5728], (uint64_t)v13, 1, a2, MEMORY[0x1E0CE5728], MEMORY[0x1E0CE5720], v11, a3);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance DisableAccessibilityNodesModifier()
{
  return PreferenceKeys.remove<A>(_:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DisableAccessibilityNodesModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = a2[5];
  v7 = a2[6];
  v8 = *((_DWORD *)a2 + 20);
  v20 = *a2;
  v21 = v4;
  v22 = v5;
  v23 = *(_OWORD *)(a2 + 3);
  v24 = v6;
  v25 = v7;
  v26 = *(_OWORD *)(a2 + 7);
  v27 = a2[9];
  v28 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.remove<A>(_:)();
  v11 = v20;
  v12 = v21;
  v13 = v5;
  v14 = v23;
  v15 = v6;
  v16 = v7;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DisableAccessibilityNodesModifier()
{
  lazy protocol witness table accessor for type DisableAccessibilityNodesModifier and conformance DisableAccessibilityNodesModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance DisableAccessibilityNodesModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AccessibilityVisibilityStorageProxy.init()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AccessibilityVisibilityStorageProxy.isElement.getter()
{
  _BYTE *v0;

  if ((*v0 & 1) != 0)
    return 1;
  else
    return ~(2 * v0[4]) & 2;
}

uint64_t AccessibilityVisibilityStorageProxy.isContainer.getter()
{
  _BYTE *v0;

  if ((*v0 & 2) != 0)
    return 1;
  else
    return ~v0[4] & 2;
}

uint64_t AccessibilityVisibilityStorageProxy.resolvesToHidden.getter()
{
  uint64_t v0;

  if ((*(_DWORD *)v0 & 4) != 0)
    return 1;
  if ((*(_BYTE *)(v0 + 4) & 4) != 0)
    return 0;
  return (*(_DWORD *)v0 >> 3) & 1;
}

BOOL AccessibilityVisibilityStorageProxy.isDefault.getter()
{
  _QWORD *v0;

  return *v0 == 0;
}

BOOL static AccessibilityVisibilityStorageProxy.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void AccessibilityVisibilityStorageProxy.hash(into:)()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityVisibilityStorageProxy.CodingKeys()
{
  return 0x65756C6176;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityVisibilityStorageProxy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityVisibilityStorageProxy.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityVisibilityStorageProxy.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AccessibilityVisibilityStorageProxy.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v2 = v1;
  type metadata accessor for KeyedEncodingContainer<AccessibilityVisibilityStorageProxy.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityVisibilityStorageProxy.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[1] = *v2;
  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>();
  lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>, MEMORY[0x1E0CE6510]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityVisibilityStorageProxy.CodingKeys, &unk_1E1B05248);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityVisibilityStorageProxy.CodingKeys, &unk_1E1B05248);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityVisibilityStorageProxy.CodingKeys, &unk_1E1B05248);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityVisibilityStorageProxy.CodingKeys, &unk_1E1B05248);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys);
  }
  return result;
}

Swift::Int AccessibilityVisibilityStorageProxy.hashValue.getter()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t AccessibilityVisibilityStorageProxy.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];

  type metadata accessor for KeyedEncodingContainer<AccessibilityVisibilityStorageProxy.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityVisibilityStorageProxy.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v12 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>();
    lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>, MEMORY[0x1E0CE6518]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *a2 = v12[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityVisibilityStorageProxy(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityVisibilityStorageProxy()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityVisibilityStorageProxy()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityVisibilityStorageProxy()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;
  Swift::UInt32 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void type metadata accessor for KeyedEncodingContainer<AccessibilityVisibilityStorageProxy.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys();
    v7 = a3(a1, &unk_1E1B05248, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityVisibilityStorageProxy, &type metadata for AccessibilityVisibilityStorageProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityVisibilityStorageProxy, &type metadata for AccessibilityVisibilityStorageProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityVisibilityStorageProxy, &type metadata for AccessibilityVisibilityStorageProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityVisibilityStorageProxy@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return AccessibilityVisibilityStorageProxy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityVisibilityStorageProxy(_QWORD *a1)
{
  return AccessibilityVisibilityStorageProxy.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for AccessibilityVisibilityStorageProxy()
{
  return &type metadata for AccessibilityVisibilityStorageProxy;
}

uint64_t storeEnumTagSinglePayload for AccessibilityVisibilityStorageProxy.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1876924A8 + 4 * byte_187C4CDF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1876924C8 + 4 * byte_187C4CDF5[v4]))();
}

_BYTE *sub_1876924A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1876924C8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1876924D0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1876924D8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1876924E0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1876924E8(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for AccessibilityVisibilityStorageProxy.CodingKeys()
{
  return &unk_1E1B05248;
}

uint64_t lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>();
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DisableAccessibilityNodesModifier()
{
  return &type metadata for DisableAccessibilityNodesModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in DisableAccessibilityNodesModifier()
{
  return &protocol witness table for DisableAccessibilityNodesModifier;
}

unint64_t lazy protocol witness table accessor for type DisableAccessibilityNodesModifier and conformance DisableAccessibilityNodesModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableAccessibilityNodesModifier and conformance DisableAccessibilityNodesModifier;
  if (!lazy protocol witness table cache variable for type DisableAccessibilityNodesModifier and conformance DisableAccessibilityNodesModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableAccessibilityNodesModifier, &type metadata for DisableAccessibilityNodesModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableAccessibilityNodesModifier and conformance DisableAccessibilityNodesModifier);
  }
  return result;
}

void protocol witness for ControlWidgetConfiguration.body.getter in conformance EmptyControlWidgetConfiguration()
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)(a1, a2, a3, a4, a5);
}

{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  int v25;
  uint64_t result;
  Swift::String v27;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _BYTE v43[4];
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;

  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v33 = *(_OWORD *)(a2 + 3);
  v12 = a2[5];
  v11 = a2[6];
  v13 = *((_DWORD *)a2 + 14);
  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    static DynamicPropertyCache.fields(of:)();
    v14 = v48;
    v15 = v49;
    v16 = v50;
    v17 = HIDWORD(v50);
    v48 = v8;
    LODWORD(v49) = v9;
    v50 = v10;
    v51 = v33;
    v52 = v12;
    v53 = v11;
    v54 = v13;
    v29 = v17;
    v30 = v7;
    v44 = v7;
    v32 = v15;
    v34 = v14;
    HIDWORD(v37) = HIDWORD(v15);
    v31 = v16;
    v19 = type metadata accessor for ControlWidgetConfigurationBodyAccessor(0, a3, a4, v18);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetConfigurationBodyAccessor<A>, v19);
    BodyAccessor.makeBody(container:inputs:fields:)();
    v20 = v46;
    v28 = v45;
    v21 = v47;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v36 = v8;
    LODWORD(v37) = v49;
    v38 = v10;
    v39 = v51;
    v40 = v12;
    v41 = v11;
    v42 = v54;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                        + 32))(&v45, v43, &v36, AssociatedTypeWitness, AssociatedConformanceWitness);
    v24 = v45;
    v25 = v46;
    if ((v21 & 1) == 0)
    {
      v45 = v28;
      v46 = v20;
      v44 = v30;
      v36 = v34;
      v37 = v32;
      LOBYTE(v38) = v31;
      HIDWORD(v38) = v29;
      _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    result = outlined consume of DynamicPropertyCache.Fields.Layout();
    *(_QWORD *)a5 = v24;
    *(_DWORD *)(a5 + 8) = v25;
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)@<X0>(int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  char v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  __int128 v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;
  _OWORD v27[3];

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    static DynamicPropertyCache.fields(of:)();
    v5 = v25;
    v6 = v26;
    v7 = DWORD1(v26);
    v8 = a2[1];
    v22 = *a2;
    v23 = v8;
    v24[0] = a2[2];
    *(_OWORD *)((char *)v24 + 12) = *(__int128 *)((char *)a2 + 44);
    v21 = a1;
    outlined retain of _ViewInputs((uint64_t)a2);
    type metadata accessor for ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration>(0);
    lazy protocol witness table accessor for type ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration> and conformance ControlWidgetConfigurationBodyAccessor<A>(&lazy protocol witness table cache variable for type ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration> and conformance ControlWidgetConfigurationBodyAccessor<A>, (uint64_t (*)(uint64_t))type metadata accessor for ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration>);
    BodyAccessor.makeBody(container:inputs:fields:)();
    v9 = *((_QWORD *)&v16 + 1);
    v10 = v16;
    v11 = v17;
    v25 = v22;
    v26 = v23;
    v27[0] = v24[0];
    *(_OWORD *)((char *)v27 + 12) = *(_OWORD *)((char *)v24 + 12);
    specialized static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)(v19, &v25, (uint64_t)&v16);
    v12 = v16;
    v13 = DWORD2(v16);
    if ((v11 & 1) == 0)
    {
      v19 = v10;
      v20 = v9;
      v21 = a1;
      v16 = v5;
      v17 = v6;
      v18 = v7;
      _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    }
    outlined release of _ViewInputs((uint64_t)&v25);
    result = outlined consume of DynamicPropertyCache.Fields.Layout();
    *(_QWORD *)a3 = v12;
    *(_DWORD *)(a3 + 8) = v13;
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  __int128 v5;
  char v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  __int128 v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  _OWORD v30[3];

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    static DynamicPropertyCache.fields(of:)();
    v5 = v28;
    v6 = v29;
    v7 = DWORD1(v29);
    v8 = a2[1];
    v25 = *a2;
    v26 = v8;
    v27[0] = a2[2];
    *(_OWORD *)((char *)v27 + 12) = *(__int128 *)((char *)a2 + 44);
    v24 = a1;
    outlined retain of _ViewInputs((uint64_t)a2);
    type metadata accessor for ControlWidgetConfigurationBodyAccessor<Never>(0, v9, v10, v11);
    lazy protocol witness table accessor for type ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration> and conformance ControlWidgetConfigurationBodyAccessor<A>(&lazy protocol witness table cache variable for type ControlWidgetConfigurationBodyAccessor<Never> and conformance ControlWidgetConfigurationBodyAccessor<A>, (uint64_t (*)(uint64_t))type metadata accessor for ControlWidgetConfigurationBodyAccessor<Never>);
    BodyAccessor.makeBody(container:inputs:fields:)();
    v12 = *((_QWORD *)&v19 + 1);
    v13 = v19;
    v14 = v20;
    v28 = v25;
    v29 = v26;
    v30[0] = v27[0];
    *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)((char *)v27 + 12);
    specialized static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)(&v19, v22, &v28);
    v15 = v19;
    v16 = DWORD2(v19);
    if ((v14 & 1) == 0)
    {
      v22 = v13;
      v23 = v12;
      v24 = a1;
      v19 = v5;
      v20 = v6;
      v21 = v7;
      _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    }
    outlined release of _ViewInputs((uint64_t)&v28);
    result = outlined consume of DynamicPropertyCache.Fields.Layout();
    *(_QWORD *)a3 = v15;
    *(_DWORD *)(a3 + 8) = v16;
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ControlWidgetConfigurationBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ControlWidgetConfigurationBodyAccessor);
}

uint64_t ControlWidgetConfigurationBodyAccessor.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for ControlWidgetConfigurationBodyAccessor(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetConfigurationBodyAccessor<A>, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ControlWidgetConfigurationBodyAccessor<A>(uint64_t result, uint64_t a2)
{
  return ControlWidgetConfigurationBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t protocol witness for static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:) in conformance Never@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(__int128 *)((char *)a2 + 44);
  return specialized static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)(v3, v6, a3);
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t result;

  type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.Storage(0, a2, a3, a4);
  v7 = swift_allocObject();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 96) - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)v7 + 112), a1);
  *a5 = v7;
  return result;
}

uint64_t type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityControlWidgetConfiguration.Storage);
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.storage.getter()
{
  return swift_retain();
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.storage.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*LimitedAvailabilityControlWidgetConfiguration.storage.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.__allocating_init(config:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 96) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 112), a1);
  return v2;
}

void LimitedAvailabilityControlWidgetConfiguration.body.getter()
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static LimitedAvailabilityControlWidgetConfiguration._makeControlWidgetConfiguration(control:inputs:)@<X0>(uint64_t a1@<X8>)
{
  id v1;
  void *v2;
  uint64_t result;
  uint64_t v5;
  int v6;

  PreferencesOutputs.init()();
  PreferencesInputs.makeIndirectOutputs()();
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityControlWidgetConfiguration>, (uint64_t)&type metadata for LimitedAvailabilityControlWidgetConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  v1 = (id)AGSubgraphGetCurrent();
  if (!v1)
    __break(1u);
  v2 = v1;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs and conformance LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  result = PreferencesOutputs.setIndirectDependency(_:)();
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v6;
  return result;
}

void LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs.updateValue()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  if (!*(_QWORD *)(v0 + 96))
  {
    v1 = (id)AGSubgraphGetGraph();
    v2 = (void *)AGSubgraphCreate();

    *(_QWORD *)(v0 + 96) = v2;
    v4 = v2;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v3 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs.updateValue()(v0);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs.updateValue()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 64);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 56);
  v22 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  swift_beginAccess();
  v6 = *(_DWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v18 = *(_OWORD *)(v2 + 48);
  v19 = *(_OWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = *(_BYTE *)(v2 + 80);
  v11 = *(_BYTE *)(v2 + 81);
  v12 = *(_QWORD *)(v2 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v6;
  *(_QWORD *)(v13 + 24) = v7;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v18;
  *(_QWORD *)(v13 + 64) = v8;
  *(_QWORD *)(v13 + 72) = v9;
  *(_BYTE *)(v13 + 80) = v10;
  *(_BYTE *)(v13 + 81) = v11;
  *(_QWORD *)(v13 + 88) = v12;
  swift_retain();
  v14 = *(_QWORD *)(a1 + 80);
  LODWORD(v8) = *(_DWORD *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_retain();
  _GraphValue.init(_:)();
  v26 = v20;
  v27 = v22;
  v28 = v13;
  v29 = v4;
  v30 = v5;
  v31 = v21;
  v32 = v3;
  v33 = v23;
  v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v34, &v24, &v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v26 = v14;
  v27 = v8;
  v24 = v34;
  v25 = v35;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void protocol witness for ControlWidgetConfiguration.body.getter in conformance LimitedAvailabilityControlWidgetConfiguration()
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:) in conformance LimitedAvailabilityControlWidgetConfiguration@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(__int128 *)((char *)a2 + 44);
  return specialized static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)(v3, v6, a3);
}

void LimitedAvailabilityControlWidgetConfiguration.StorageBase.makeWidgetControlConfiguration(control:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.StorageBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.StorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  AGGraphGetValue();
  type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.Storage(0, a1, a2, v6);
  swift_retain();
  v7 = swift_dynamicCastClassUnconditional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v7 + *(_QWORD *)(*(_QWORD *)v7 + 112), a1);
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilityControlWidgetConfiguration.Storage<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LimitedAvailabilityControlWidgetConfiguration.Storage.Child.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 96) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 112));
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.init(config:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 96) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 112), a1);
  return v1;
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.makeWidgetControlConfiguration(control:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  _BYTE v24[4];

  v4 = *v2;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 14);
  v9 = *(_QWORD *)(*v2 + 96);
  LODWORD(v17) = *a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityControlWidgetConfiguration>, (uint64_t)&type metadata for LimitedAvailabilityControlWidgetConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v16 = *(_OWORD *)(a2 + 5);
  v10 = a2[3];
  v11 = a2[4];
  _GraphValue.value.getter();
  v12 = *(_QWORD *)(v4 + 104);
  v14 = type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.Storage.Child(0, v9, v12, v13);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityControlWidgetConfiguration.Storage<A>.Child, v14);
  _GraphValue.init<A>(_:)();
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v10;
  v21 = v11;
  v22 = v16;
  v23 = v8;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(v12 + 32))(v24, &v17, v9, v12);
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 96) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  return v0;
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 96) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  return swift_deallocClassInstance();
}

void protocol witness for ControlWidgetConfiguration.body.getter in conformance ControlWidgetConfigurationModifier_Content<A>()
{
  specialized PrimitiveControlWidgetConfiguration.body.getter();
}

unint64_t lazy protocol witness table accessor for type LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs and conformance LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs and conformance LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs;
  if (!lazy protocol witness table cache variable for type LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs and conformance LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs, &unk_1E1B09BC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs and conformance LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for ControlWidgetConfiguration.Body : ControlWidgetConfiguration in Never()
{
  return &protocol witness table for Never;
}

unint64_t instantiation function for generic protocol witness table for LimitedAvailabilityControlWidgetConfiguration(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LimitedAvailabilityControlWidgetConfiguration and conformance LimitedAvailabilityControlWidgetConfiguration();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type LimitedAvailabilityControlWidgetConfiguration and conformance LimitedAvailabilityControlWidgetConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LimitedAvailabilityControlWidgetConfiguration and conformance LimitedAvailabilityControlWidgetConfiguration;
  if (!lazy protocol witness table cache variable for type LimitedAvailabilityControlWidgetConfiguration and conformance LimitedAvailabilityControlWidgetConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityControlWidgetConfiguration, &type metadata for LimitedAvailabilityControlWidgetConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LimitedAvailabilityControlWidgetConfiguration and conformance LimitedAvailabilityControlWidgetConfiguration);
  }
  return result;
}

uint64_t associated type witness table accessor for ControlWidgetConfiguration.Body : ControlWidgetConfiguration in LimitedAvailabilityControlWidgetConfiguration()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t dispatch thunk of ControlWidgetConfiguration.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for ControlWidgetConfigurationBuilder()
{
  return &type metadata for ControlWidgetConfigurationBuilder;
}

ValueMetadata *type metadata accessor for LimitedAvailabilityControlWidgetConfiguration()
{
  return &type metadata for LimitedAvailabilityControlWidgetConfiguration;
}

uint64_t type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.StorageBase()
{
  return objc_opt_self();
}

uint64_t method lookup function for LimitedAvailabilityControlWidgetConfiguration.StorageBase()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for LimitedAvailabilityControlWidgetConfiguration.Storage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LimitedAvailabilityControlWidgetConfiguration.Storage.__allocating_init(config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

_UNKNOWN **sub_187693A40()
{
  return &protocol witness table for Never;
}

void *type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs()
{
  return &unk_1E1B09BC8;
}

uint64_t type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.Storage.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityControlWidgetConfiguration.Storage.Child);
}

void specialized ControlWidgetConfiguration.controlWidgetConfigurationBodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized PrimitiveControlWidgetConfiguration.body.getter()
{
  specialized ControlWidgetConfiguration.controlWidgetConfigurationBodyError()();
}

void type metadata accessor for ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration>)
  {
    v2 = lazy protocol witness table accessor for type LimitedAvailabilityControlWidgetConfiguration and conformance LimitedAvailabilityControlWidgetConfiguration();
    v4 = type metadata accessor for ControlWidgetConfigurationBodyAccessor(a1, (uint64_t)&type metadata for LimitedAvailabilityControlWidgetConfiguration, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration>);
  }
}

void type metadata accessor for ControlWidgetConfigurationBodyAccessor<Never>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ControlWidgetConfigurationBodyAccessor<Never>)
  {
    v4 = type metadata accessor for ControlWidgetConfigurationBodyAccessor(0, MEMORY[0x1E0DEDCE8], (uint64_t)&protocol witness table for Never, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ControlWidgetConfigurationBodyAccessor<Never>);
  }
}

uint64_t lazy protocol witness table accessor for type ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration> and conformance ControlWidgetConfigurationBodyAccessor<A>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetConfigurationBodyAccessor<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

void base witness table accessor for _AttributeBody in LimitedAvailabilityControlWidgetConfiguration.Storage<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

void static WindowPlacement.Position.controlPanel.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static WindowPlacement.Position.above(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(_:size:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(x:y:width:height:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(_:width:height:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(_:width:height:depth:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(position:size:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(position:size:display:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(x:y:width:height:display:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(relativeTo:size:display:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(relativeTo:width:height:display:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(position:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(position:width:height:depth:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacementContext.defaultDisplay.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacementContext.windows.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacementContext.activeWindows.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacementContext.currentDisplay.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacementContext.focusedDisplay.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacementContext.displays.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DisplayProxy.bounds.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DisplayProxy.safeAreaInsets.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DisplayProxy.visibleRect.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static DisplayProxy.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowProxy.id.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowProxy.phase.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowProxy.size.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowProxy.depth.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for WindowPlacement()
{
  return &type metadata for WindowPlacement;
}

ValueMetadata *type metadata accessor for WindowPlacement.Position()
{
  return &type metadata for WindowPlacement.Position;
}

ValueMetadata *type metadata accessor for WindowPlacementContext()
{
  return &type metadata for WindowPlacementContext;
}

uint64_t getEnumTagSinglePayload for DisplayProxy(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DisplayProxy(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 96) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DisplayProxy()
{
  return &type metadata for DisplayProxy;
}

ValueMetadata *type metadata accessor for WindowProxy()
{
  return &type metadata for WindowProxy;
}

void static WindowPlacement.Position.utilityPanel.getter()
{
  static WindowPlacement.Position.controlPanel.getter();
}

void static WindowPlacement.Position.trailing(_:)()
{
  static WindowPlacement.Position.above(_:)();
}

void static WindowPlacement.Position.leading(_:)()
{
  static WindowPlacement.Position.above(_:)();
}

void static WindowPlacement.Position.below(_:)()
{
  static WindowPlacement.Position.above(_:)();
}

void static WindowPlacement.Position.replacing(_:)()
{
  static WindowPlacement.Position.above(_:)();
}

void static WindowPlacement.Position.== infix(_:_:)()
{
  static DisplayProxy.== infix(_:_:)();
}

void static WindowPlacement.== infix(_:_:)()
{
  static DisplayProxy.== infix(_:_:)();
}

uint64_t Form.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

void Form.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ContentIsFooterBearing(255, *(_QWORD *)(a1 + 16), a3, a4);
  lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

void sub_187693FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for ModifiedContent();
  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentIsFooterBearing<A>, v0);
  *(_QWORD *)(v2 - 120) = v0;
  *(_QWORD *)(v2 - 112) = v1;
  *(_QWORD *)(v2 - 104) = v3;
  *(_QWORD *)(v2 - 96) = v4;
  type metadata accessor for StaticIf();
}

void sub_187693FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v8, v9);
  *(_QWORD *)(v7 - 176) = v4;
  *(_QWORD *)(v7 - 168) = v6;
  *(_QWORD *)(v7 - 160) = v2;
  *(_QWORD *)(v7 - 224) = v4;
  *(_QWORD *)(v7 - 216) = v6;
  *(_QWORD *)(v7 - 208) = v2;
  *(_QWORD *)(v7 - 136) = lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
  *(_QWORD *)(v7 - 128) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7 - 136);
  StaticIf<>.init(_:then:else:)(v3, (void (*)(void))partial apply for closure #1 in Link.body.getter);
}

uint64_t sub_1876940B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v6 - 152) = v5;
  *(_QWORD *)(v6 - 144) = v1;
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v2, v6 - 152);
  static ViewBuilder.buildExpression<A>(_:)(v4, v2, v7);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  v8(v4, v2);
  static ViewBuilder.buildBlock<A>(_:)(v3, v2, *(_QWORD *)(v6 - 248));
  return v8(v3, v2);
}

uint64_t type metadata accessor for ContentIsFooterBearing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentIsFooterBearing);
}

void closure #2 in Form.body.getter()
{
  lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

void sub_187694194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v5, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  *(_QWORD *)(v4 - 160) = v0;
  *(_QWORD *)(v4 - 152) = v1;
  *(_QWORD *)(v4 - 144) = v2;
  lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
  View.viewAlias<A, B>(_:_:)(v3, (uint64_t)partial apply for closure #1 in closure #1 in Link.archivedBody.getter);
}

uint64_t sub_187694238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v5 - 128) = v3;
  *(_QWORD *)(v5 - 120) = &protocol witness table for StaticSourceWriter<A, B>;
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v5 - 128);
  static ViewBuilder.buildExpression<A>(_:)(v4, v1, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  v7(v4, v1);
  static ViewBuilder.buildBlock<A>(_:)(v2, v1, *(_QWORD *)(v5 - 184));
  return v7(v2, v1);
}

void partial apply for closure #2 in Form.body.getter()
{
  closure #2 in Form.body.getter();
}

void Form.init<A, B>(content:footer:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(double);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v21 = a6;
  v22 = a7;
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = *(_QWORD *)(v12 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v19(v16);
  a3(v20);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a8, v18, a4);
  v23 = a4;
  v24 = a5;
  v25 = v21;
  v26 = v22;
  type metadata accessor for FormFooterContent();
}

uint64_t sub_1876943B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3 + *(int *)(a1 + 52), v4, v1);
}

void FormFooterContent.body.getter()
{
  lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

void sub_187694448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v11 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 288) = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  *(_QWORD *)(v10 - 328) = (char *)&a9 - v13;
  v14 = *(_QWORD *)(v9 + 24);
  v15 = lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer();
  *(_QWORD *)(v10 - 312) = v15;
  v16 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v10 - 120) = &type metadata for FormStyleConfiguration.Footer;
  *(_QWORD *)(v10 - 112) = v14;
  *(_QWORD *)(v10 - 104) = v15;
  *(_QWORD *)(v10 - 96) = v16;
  type metadata accessor for StaticSourceWriter();
}

void sub_1876944C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v15 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 296) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v14 - 320) = (char *)&a9 - v19;
  *(_QWORD *)(v14 - 192) = v12;
  *(_QWORD *)(v14 - 184) = v13;
  *(_QWORD *)(v14 - 176) = v11;
  *(_QWORD *)(v14 - 168) = v9;
  *(_QWORD *)(v14 - 160) = v10;
  lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for FormStyleConfiguration.Content, (uint64_t)partial apply for closure #1 in LabeledToolbarItemGroupContent.body.getter);
}

void sub_18769458C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 256) = v4;
  *(_QWORD *)(v7 - 248) = v6;
  *(_QWORD *)(v7 - 240) = v2;
  *(_QWORD *)(v7 - 232) = v0;
  *(_QWORD *)(v7 - 224) = v5;
  *(_QWORD *)(v7 - 136) = v3;
  *(_QWORD *)(v7 - 128) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v7 - 136);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for FormStyleConfiguration.Footer, (uint64_t)partial apply for closure #2 in FormFooterContent.body.getter);
}

uint64_t sub_1876945FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 288) + 8))(v0, v1);
  *(_QWORD *)(v7 - 152) = v5;
  *(_QWORD *)(v7 - 144) = v3;
  v8 = MEMORY[0x18D75FFDC](v4, v2, v7 - 152);
  v9 = *(_QWORD *)(v7 - 320);
  static ViewBuilder.buildExpression<A>(_:)(v6, v2, v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 296) + 8);
  v10(v6, v2);
  static ViewBuilder.buildBlock<A>(_:)(v9, v2, *(_QWORD *)(v7 - 280));
  return v10(v9, v2);
}

unint64_t lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer;
  if (!lazy protocol witness table cache variable for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormStyleConfiguration.Footer, &type metadata for FormStyleConfiguration.Footer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer;
  if (!lazy protocol witness table cache variable for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormStyleConfiguration.Footer, &type metadata for FormStyleConfiguration.Footer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer);
  }
  return result;
}

void closure #2 in FormFooterContent.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for FormFooterContent();
}

uint64_t sub_187694754(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 52), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

uint64_t partial apply for closure #2 in FormFooterContent.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in FormFooterContent.body.getter);
}

uint64_t associated type witness table accessor for View.Body : View in Form<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in FormFooterContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for Form(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876948D0 + 4 * byte_187C4D490[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for Form(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for Form(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Form);
}

uint64_t getEnumTagSinglePayload for FormFooterContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187694BB8 + 4 * byte_187C4D49E[v17 - 1]))();
}

void storeEnumTagSinglePayload for FormFooterContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for FormFooterContent()
{
  JUMPOUT(0x18D75FF28);
}

void sub_187694E40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ContentIsFooterBearing(255, *a1, a3, a4);
  lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

void sub_187694E88()
{
  uint64_t v0;

  type metadata accessor for ModifiedContent();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentIsFooterBearing<A>, v0);
  type metadata accessor for StaticIf();
}

uint64_t sub_187694EC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v5[2];
  _QWORD v6[12];

  v6[0] = lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
  v6[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v5[0] = v2;
  v5[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v5);
}

void sub_187694F18()
{
  lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

void sub_187694F54()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187694F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[12];

  v1 = type metadata accessor for ModifiedContent();
  v5[0] = lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
  v5[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v2 = MEMORY[0x1E0CE2E70];
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v5);
  v4[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](v2, v1, v4);
}

BOOL static ContentIsFooterBearing.evaluate(inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_conformsToProtocol2())
    v3 = a2;
  else
    v3 = 0;
  return v3 != 0;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ContentIsFooterBearing<A>(uint64_t a1, uint64_t a2)
{
  return static ContentIsFooterBearing.evaluate(inputs:)(a1, *(_QWORD *)(a2 + 16));
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance PrototypePrintingCommands@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, (uint64_t)v6, (void (*)(_QWORD *, __int128 *, uint64_t, __int128 *, _QWORD, _QWORD, unint64_t))specialized static Commands.makeBody(commands:inputs:fields:), a3);
}

uint64_t specialized static Commands._makeCommands(content:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  char v7;
  char v8;

  static DynamicPropertyCache.fields(of:)();
  outlined retain of _ViewInputs(a1);
  LOBYTE(v5) = v8;
  specialized static Commands.makeBody(commands:inputs:fields:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesOutputs.init()();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t specialized static Commands._makeCommands(content:inputs:)@<X0>(int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  char v6;
  int v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  __int128 v15;
  char v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];

  static DynamicPropertyCache.fields(of:)();
  v5 = v23;
  v6 = v24;
  v7 = DWORD1(v24);
  v8 = a2[1];
  v20 = *a2;
  v21 = v8;
  v22[0] = a2[2];
  *(_OWORD *)((char *)v22 + 12) = *(__int128 *)((char *)a2 + 44);
  outlined retain of _ViewInputs((uint64_t)a2);
  LOBYTE(v23) = v24;
  specialized static Commands.makeBody(commands:inputs:fields:)();
  v9 = v23;
  v10 = v24;
  v23 = v20;
  v24 = v21;
  v25[0] = v22[0];
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v22 + 12);
  outlined retain of _ViewInputs((uint64_t)&v23);
  specialized static WithCommandFlag._makeCommands(content:inputs:)(v15, (uint64_t)&v15);
  outlined release of _ViewInputs((uint64_t)&v23);
  v11 = v15;
  v12 = DWORD2(v15);
  if ((v10 & 1) == 0)
  {
    v19 = v9;
    v18 = a1;
    v15 = v5;
    v16 = v6;
    v17 = v7;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _ViewInputs((uint64_t)&v23);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a3 = v11;
  *(_DWORD *)(a3 + 8) = v12;
  return result;
}

{
  __int128 v5;
  char v6;
  int v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  __int128 v15;
  char v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];

  static DynamicPropertyCache.fields(of:)();
  v5 = v23;
  v6 = v24;
  v7 = DWORD1(v24);
  v8 = a2[1];
  v20 = *a2;
  v21 = v8;
  v22[0] = a2[2];
  *(_OWORD *)((char *)v22 + 12) = *(__int128 *)((char *)a2 + 44);
  outlined retain of _ViewInputs((uint64_t)a2);
  LOBYTE(v23) = v24;
  specialized static Commands.makeBody(commands:inputs:fields:)();
  v9 = v23;
  v10 = v24;
  v23 = v20;
  v24 = v21;
  v25[0] = v22[0];
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v22 + 12);
  specialized static Commands._makeCommands(content:inputs:)(&v15, v15, &v23);
  v11 = v15;
  v12 = DWORD2(v15);
  if ((v10 & 1) == 0)
  {
    v19 = v9;
    v18 = a1;
    v15 = v5;
    v16 = v6;
    v17 = v7;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _ViewInputs((uint64_t)&v23);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a3 = v11;
  *(_DWORD *)(a3 + 8) = v12;
  return result;
}

uint64_t specialized static Commands._makeCommands(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *, __int128 *, uint64_t, __int128 *, _QWORD, _QWORD, unint64_t)@<X2>, uint64_t a4@<X8>)
{
  __int128 v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  __int128 v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  _BYTE v24[28];

  static DynamicPropertyCache.fields(of:)();
  v8 = v22;
  v9 = v23;
  v10 = DWORD1(v23);
  v11 = *(_OWORD *)(a2 + 16);
  v22 = *(_OWORD *)a2;
  v23 = v11;
  *(_OWORD *)v24 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v24[12] = *(_OWORD *)(a2 + 44);
  outlined retain of _ViewInputs(a2);
  LOBYTE(v17) = v9;
  a3(v21, &v17, a1, &v22, v8, *((_QWORD *)&v8 + 1), v9 | (unint64_t)(v10 << 32));
  v13 = *((_QWORD *)&v17 + 1);
  v12 = v17;
  LOBYTE(a2) = v18;
  PreferencesOutputs.init()();
  v16 = v17;
  v14 = DWORD2(v17);
  if ((a2 & 1) == 0)
  {
    v21[0] = v12;
    v21[1] = v13;
    v20 = a1;
    v17 = v8;
    v18 = v9;
    v19 = v10;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v14;
  return result;
}

uint64_t static Commands._makeCommands(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  int v23;
  uint64_t result;
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE v39[4];
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;

  v8 = *a1;
  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v13 = a2[5];
  v12 = a2[6];
  v14 = *((_DWORD *)a2 + 14);
  static DynamicPropertyCache.fields(of:)();
  v15 = v44;
  v16 = v45;
  v17 = v46;
  v18 = HIDWORD(v46);
  v44 = v9;
  LODWORD(v45) = v10;
  v46 = v11;
  v47 = *(_OWORD *)(a2 + 3);
  v48 = v13;
  v49 = v12;
  v50 = v14;
  v25 = v18;
  v26 = v8;
  v40 = v8;
  v29 = v16;
  v30 = v15;
  v32 = v15;
  v33 = v16;
  v28 = v17;
  LOBYTE(v34) = v17;
  HIDWORD(v34) = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Commands.makeBody(commands:inputs:fields:)((uint64_t)v39, (uint64_t)&v41, (uint64_t)&v40, (uint64_t)&v44, (uint64_t)&v32, a3, a4);
  v19 = v42;
  v27 = v41;
  LOBYTE(v14) = v43;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = v44;
  LODWORD(v33) = v45;
  v34 = v46;
  v35 = v47;
  v36 = v48;
  v37 = v49;
  v38 = v50;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v41, v39, &v32, AssociatedTypeWitness, AssociatedConformanceWitness);
  v22 = v41;
  v23 = v42;
  if ((v14 & 1) == 0)
  {
    v41 = v27;
    v42 = v19;
    v40 = v26;
    v32 = v30;
    v33 = v29;
    LOBYTE(v34) = v28;
    HIDWORD(v34) = v25;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a5 = v22;
  *(_DWORD *)(a5 + 8) = v23;
  return result;
}

uint64_t Commands._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v11 = (char *)&v14 - v10;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 24))(a2, a3, v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, AssociatedTypeWitness);
}

uint64_t specialized static WithCommandFlag._makeCommands(content:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  LODWORD(v4) = a1;
  type metadata accessor for _GraphValue<WithCommandFlag<EmptyCommands>>();
  _GraphValue.subscript.getter();
  PreferencesOutputs.init()();
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    _GraphValue.value.getter();
    PreferencesOutputs.subscript.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for WithCommandFlag<EmptyCommands>.SetFlag, (uint64_t)&type metadata for EmptyCommands, (uint64_t)&protocol witness table for EmptyCommands, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WithCommandFlag.SetFlag);
    lazy protocol witness table accessor for type WithCommandFlag<EmptyCommands>.SetFlag and conformance WithCommandFlag<A>.SetFlag();
    Attribute.init<A>(body:value:flags:update:)();
    result = PreferencesOutputs.subscript.setter();
  }
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

void protocol witness for Commands.body.getter in conformance WithCommandFlag<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static Commands.makeBody(commands:inputs:fields:)()
{
  uint64_t result;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<PrototypePrintingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrototypePrintingCommands and conformance PrototypePrintingCommands, (uint64_t)&type metadata for PrototypePrintingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<PrototypePrintingCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<ImportFromDevicesCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type ImportFromDevicesCommands and conformance ImportFromDevicesCommands, (uint64_t)&type metadata for ImportFromDevicesCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<ImportFromDevicesCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<TextFormattingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextFormattingCommands and conformance TextFormattingCommands, (uint64_t)&type metadata for TextFormattingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<TextFormattingCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<TextEditingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextEditingCommands and conformance TextEditingCommands, (uint64_t)&type metadata for TextEditingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<TextEditingCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<InspectorCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorCommands and conformance InspectorCommands, (uint64_t)&type metadata for InspectorCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<InspectorCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<PrintingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrintingCommands and conformance PrintingCommands, (uint64_t)&type metadata for PrintingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<PrintingCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<ToolbarCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarCommands and conformance ToolbarCommands, (uint64_t)&type metadata for ToolbarCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<ToolbarCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<SidebarCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarCommands and conformance SidebarCommands, (uint64_t)&type metadata for SidebarCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<SidebarCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<Never>, MEMORY[0x1E0DEDCE8], (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<Never> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = 0x726576654ELL;
    v1._object = (void *)0xE500000000000000;
    String.append(_:)(v1);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static Commands.makeBody(commands:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::String v12;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    v10 = type metadata accessor for CommandsBodyAccessor(0, a6, a7, v9);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsBodyAccessor<A>, v10);
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t CommandsBodyAccessor.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for CommandsBodyAccessor(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsBodyAccessor<A>, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance CommandsBodyAccessor<A>(uint64_t result, uint64_t a2)
{
  return CommandsBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance Never@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(__int128 *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, v6, a3);
}

uint64_t Scene.commands<A>(content:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v20 = a5;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CommandsModifier(0, v11, v12, v11);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v20 - v17;
  a1(v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a4);
  Scene.modifier<A>(_:)(v18, a3, v13, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
}

uint64_t type metadata accessor for CommandsModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommandsModifier);
}

uint64_t (*CommandsModifier.UpdateList.value.getter(int a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  *(_DWORD *)(v6 + 32) = a1;
  return partial apply for closure #1 in CommandsModifier.UpdateList.value.getter;
}

uint64_t closure #1 in CommandsModifier.UpdateList.value.getter()
{
  uint64_t v0;

  AGGraphGetValue();
  v0 = swift_bridgeObjectRetain();
  return specialized Array.append<A>(contentsOf:)(v0);
}

uint64_t protocol witness for Rule.value.getter in conformance CommandsModifier<A>.UpdateList@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  int *v2;
  uint64_t (*updated)();
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  updated = CommandsModifier.UpdateList.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v6 = v5;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = updated;
  *(_QWORD *)(result + 24) = v6;
  *a2 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t static CommandsModifier._makeScene(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _BYTE v37[4];
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;

  v6 = *a1;
  v7 = *((_DWORD *)a1 + 2);
  v8 = a1[2];
  v10 = *((_DWORD *)a1 + 6);
  v9 = *((_DWORD *)a1 + 7);
  v29 = a1[4];
  v11 = a1[5];
  v12 = *((_DWORD *)a1 + 14);
  v13 = a1[6];
  v40 = v13;
  v14 = v12;
  v41 = v12;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v25 = a5;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PreferencesInputs.hostKeys.getter();
    PreferencesInputs.init(hostKeys:)();
    v40 = v6;
    v41 = v7;
    v42 = v8;
    v24 = __PAIR64__(v9, v10);
    *(_QWORD *)&v43 = __PAIR64__(v9, v10);
    *((_QWORD *)&v43 + 1) = v29;
    v44 = v11;
    v45 = v13;
    v46 = v14;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<CommandsList.Key>, (uint64_t)&type metadata for CommandsList.Key, (uint64_t)&protocol witness table for CommandsList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    lazy protocol witness table accessor for type _AnyPreferenceKey<CommandsList.Key> and conformance _AnyPreferenceKey<A>();
    PreferenceKeys.add(_:)();
    type metadata accessor for CommandsModifier(255, a3, a4, v15);
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    AGGraphCreateOffsetAttribute2();
    _GraphValue.init(_:)();
    v30 = v6;
    v31 = v7;
    v32 = v8;
    v33 = v43;
    v34 = v11;
    v35 = v13;
    v36 = v14;
    v16 = (*(_QWORD *(**)(uint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v38, v37, &v30, a3, a4);
    v17 = v38;
    v18 = v39;
    v30 = v6;
    v31 = v7;
    v32 = v8;
    *(_QWORD *)&v33 = v24;
    *((_QWORD *)&v33 + 1) = v29;
    v34 = v11;
    v35 = v13;
    v36 = v14;
    ((void (*)(uint64_t *__return_ptr, _QWORD *, uint64_t *))a2)(&v38, v16, &v30);
    v30 = v17;
    v31 = v18;
    v19 = PreferencesOutputs.subscript.getter();
    v20 = swift_bridgeObjectRelease();
    if ((v19 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      v30 = v13;
      v31 = v14;
      MEMORY[0x1E0C80A78](v20, v21);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    result = swift_release();
    v23 = v39;
    *(_QWORD *)v25 = v38;
    *(_DWORD *)(v25 + 8) = v23;
  }
  else
  {
    v40 = v6;
    v41 = v7;
    v42 = v8;
    *(_QWORD *)&v43 = __PAIR64__(v9, v10);
    *((_QWORD *)&v43 + 1) = v29;
    v44 = v11;
    v45 = v13;
    v46 = v14;
    return a2();
  }
  return result;
}

uint64_t implicit closure #1 in static CommandsModifier._makeScene(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  int v8;
  _BYTE v9[16];
  uint64_t updated;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  updated = type metadata accessor for CommandsModifier.UpdateList(0, a2, a3, a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsModifier<A>.UpdateList, updated);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_24, (uint64_t)v9, updated, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7;
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance CommandsModifier<A>@<X0>(uint64_t *a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static CommandsModifier._makeScene(modifier:inputs:body:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance CommandsKey(_QWORD *a1@<X8>)
{
  *a1 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  a1[1] = 0;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance CommandsKey(uint64_t a1, void (*a2)(__int128 *__return_ptr))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  __int128 v8;

  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a1;
  a2(&v8);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = v8;
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  v6[3] = v4;
  v6[4] = thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply;
  v6[5] = v5;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in static CommandsKey.reduce(value:nextValue:);
  *(_QWORD *)(result + 24) = v6;
  *(_QWORD *)a1 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance CommandsDescriptor()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance CommandsDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  static CommandsDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance CommandsDescriptor())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance TextEditingCommands@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, (uint64_t)v6, (void (*)(_QWORD *, __int128 *, uint64_t, __int128 *, _QWORD, _QWORD, unint64_t))specialized static Commands.makeBody(commands:inputs:fields:), a3);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance TextFormattingCommands@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, (uint64_t)v6, (void (*)(_QWORD *, __int128 *, uint64_t, __int128 *, _QWORD, _QWORD, unint64_t))specialized static Commands.makeBody(commands:inputs:fields:), a3);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance ToolbarCommands@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, (uint64_t)v6, (void (*)(_QWORD *, __int128 *, uint64_t, __int128 *, _QWORD, _QWORD, unint64_t))specialized static Commands.makeBody(commands:inputs:fields:), a3);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance SidebarCommands@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, (uint64_t)v6, (void (*)(_QWORD *, __int128 *, uint64_t, __int128 *, _QWORD, _QWORD, unint64_t))specialized static Commands.makeBody(commands:inputs:fields:), a3);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance InspectorCommands@<X0>(_OWORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v2;
  _OWORD v4[2];
  _OWORD v5[2];

  v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  v5[0] = a1[2];
  *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)((char *)a1 + 44);
  return specialized static Commands._makeCommands(content:inputs:)((uint64_t)v4, a2);
}

uint64_t protocol witness for Commands._resolve(into:) in conformance InspectorCommands(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t);
  _BYTE v18[16];

  v3 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *(_QWORD *)v1;
  v12 = *(_QWORD *)(v1 + 8);
  v13 = *(unsigned __int8 *)(v1 + 16);
  v14 = *(unsigned __int8 *)(v1 + 17);
  if (one-time initialization token for sidebar != -1)
    swift_once();
  v15 = __swift_project_value_buffer(v3, (uint64_t)static CommandGroupPlacement.sidebar);
  outlined init with copy of CommandGroupPlacement(v15, (uint64_t)v6);
  outlined copy of Environment<DismissWindowAction>.Content(v11, v12, v13, v14);
  specialized CommandGroup.init(after:addition:)((uint64_t)v6, v11, v12, v13 | (v14 << 8), (uint64_t)v10);
  v16 = *(void (**)(_BYTE *, uint64_t))&v10[*(int *)(type metadata accessor for CommandOperation() + 24)];
  if (v16)
    v16(v10, a1);
  return outlined destroy of CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>((uint64_t)v10);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance PrintingCommands@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(__int128 *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, v6, a3);
}

void protocol witness for Commands._resolve(into:) in conformance PrintingCommands()
{
  if (one-time initialization token for printing != -1)
    swift_once();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance ImportFromDevicesCommands@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, (uint64_t)v6, (void (*)(_QWORD *, __int128 *, uint64_t, __int128 *, _QWORD, _QWORD, unint64_t))specialized static Commands.makeBody(commands:inputs:fields:), a3);
}

void protocol witness for Commands.body.getter in conformance <> _ConditionalContent<A, B>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for Commands.body.getter in conformance <A> A?()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized implicit closure #1 in static CommandGroup._makeCommands(content:inputs:)()
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>>, (uint64_t (*)(uint64_t))type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>.MakeList(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>.MakeList and conformance CommandGroup<A>.MakeList, (uint64_t (*)(uint64_t))type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>.MakeList, (uint64_t)&protocol conformance descriptor for CommandGroup<A>.MakeList);
  return Attribute.init<A>(body:value:flags:update:)();
}

void protocol witness for Commands.body.getter in conformance <A> Group<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_UNKNOWN **associated type witness table accessor for Commands.Body : Commands in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of Commands.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static Commands._makeCommands(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of Commands._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

ValueMetadata *type metadata accessor for EmptyCommands()
{
  return &type metadata for EmptyCommands;
}

ValueMetadata *type metadata accessor for _ResolvedCommands()
{
  return &type metadata for _ResolvedCommands;
}

ValueMetadata *type metadata accessor for CommandsBuilder()
{
  return &type metadata for CommandsBuilder;
}

uint64_t sub_1876977FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for CommandsModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for CommandsModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v5, v7);
}

ValueMetadata *type metadata accessor for CommandsDescriptor()
{
  return &type metadata for CommandsDescriptor;
}

uint64_t getEnumTagSinglePayload for CommandsModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18769791C + 4 * byte_187C4D5C0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for CommandsModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

unint64_t lazy protocol witness table accessor for type CommandsDescriptor and conformance CommandsDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommandsDescriptor and conformance CommandsDescriptor;
  if (!lazy protocol witness table cache variable for type CommandsDescriptor and conformance CommandsDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsDescriptor, &type metadata for CommandsDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsDescriptor and conformance CommandsDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommandsDescriptor and conformance CommandsDescriptor;
  if (!lazy protocol witness table cache variable for type CommandsDescriptor and conformance CommandsDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsDescriptor, &type metadata for CommandsDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsDescriptor and conformance CommandsDescriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<CommandsList.Key> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<CommandsList.Key> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<CommandsList.Key> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<CommandsList.Key>, (uint64_t)&type metadata for CommandsList.Key, (uint64_t)&protocol witness table for CommandsList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<CommandsList.Key> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static CommandsModifier._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return implicit closure #1 in static CommandsModifier._makeScene(modifier:inputs:body:)(*(_DWORD *)(v4 + 32), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for CommandsModifier.UpdateList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommandsModifier.UpdateList);
}

unint64_t lazy protocol witness table accessor for type ImportFromDevicesCommands and conformance ImportFromDevicesCommands()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImportFromDevicesCommands and conformance ImportFromDevicesCommands;
  if (!lazy protocol witness table cache variable for type ImportFromDevicesCommands and conformance ImportFromDevicesCommands)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ImportFromDevicesCommands, &type metadata for ImportFromDevicesCommands);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImportFromDevicesCommands and conformance ImportFromDevicesCommands);
  }
  return result;
}

uint64_t type metadata accessor for CommandsBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommandsBodyAccessor);
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<ImportFromDevicesCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CommandsBodyAccessor<ImportFromDevicesCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<ImportFromDevicesCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<ImportFromDevicesCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type ImportFromDevicesCommands and conformance ImportFromDevicesCommands, (uint64_t)&type metadata for ImportFromDevicesCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<ImportFromDevicesCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for _GraphValue<WithCommandFlag<EmptyCommands>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<WithCommandFlag<EmptyCommands>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for WithCommandFlag<EmptyCommands>, (uint64_t)&type metadata for EmptyCommands, (uint64_t)&protocol witness table for EmptyCommands, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WithCommandFlag);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<WithCommandFlag<EmptyCommands>>);
  }
}

unint64_t lazy protocol witness table accessor for type WithCommandFlag<EmptyCommands>.SetFlag and conformance WithCommandFlag<A>.SetFlag()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type WithCommandFlag<EmptyCommands>.SetFlag and conformance WithCommandFlag<A>.SetFlag;
  if (!lazy protocol witness table cache variable for type WithCommandFlag<EmptyCommands>.SetFlag and conformance WithCommandFlag<A>.SetFlag)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for WithCommandFlag<EmptyCommands>.SetFlag, (uint64_t)&type metadata for EmptyCommands, (uint64_t)&protocol witness table for EmptyCommands, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WithCommandFlag.SetFlag);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WithCommandFlag<A>.SetFlag, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WithCommandFlag<EmptyCommands>.SetFlag and conformance WithCommandFlag<A>.SetFlag);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrintingCommands and conformance PrintingCommands()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrintingCommands and conformance PrintingCommands;
  if (!lazy protocol witness table cache variable for type PrintingCommands and conformance PrintingCommands)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrintingCommands, &type metadata for PrintingCommands);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrintingCommands and conformance PrintingCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<PrintingCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CommandsBodyAccessor<PrintingCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<PrintingCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<PrintingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrintingCommands and conformance PrintingCommands, (uint64_t)&type metadata for PrintingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<PrintingCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

uint64_t outlined init with copy of CommandGroupPlacement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommandGroupPlacement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for specialized implicit closure #1 in static CommandGroup._makeCommands(content:inputs:)()
{
  return specialized implicit closure #1 in static CommandGroup._makeCommands(content:inputs:)();
}

void type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>.MakeList(uint64_t a1)
{
  type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>(a1, &lazy cache variable for type metadata for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>.MakeList, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandGroup.MakeList);
}

void type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>(255);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type InspectorCommands and conformance InspectorCommands()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InspectorCommands and conformance InspectorCommands;
  if (!lazy protocol witness table cache variable for type InspectorCommands and conformance InspectorCommands)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InspectorCommands, &type metadata for InspectorCommands);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorCommands and conformance InspectorCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<InspectorCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CommandsBodyAccessor<InspectorCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<InspectorCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<InspectorCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorCommands and conformance InspectorCommands, (uint64_t)&type metadata for InspectorCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<InspectorCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SidebarCommands and conformance SidebarCommands()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarCommands and conformance SidebarCommands;
  if (!lazy protocol witness table cache variable for type SidebarCommands and conformance SidebarCommands)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarCommands, &type metadata for SidebarCommands);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarCommands and conformance SidebarCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<SidebarCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CommandsBodyAccessor<SidebarCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<SidebarCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<SidebarCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarCommands and conformance SidebarCommands, (uint64_t)&type metadata for SidebarCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<SidebarCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarCommands and conformance ToolbarCommands()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarCommands and conformance ToolbarCommands;
  if (!lazy protocol witness table cache variable for type ToolbarCommands and conformance ToolbarCommands)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarCommands, &type metadata for ToolbarCommands);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarCommands and conformance ToolbarCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<ToolbarCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CommandsBodyAccessor<ToolbarCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<ToolbarCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<ToolbarCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarCommands and conformance ToolbarCommands, (uint64_t)&type metadata for ToolbarCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<ToolbarCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextFormattingCommands and conformance TextFormattingCommands()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextFormattingCommands and conformance TextFormattingCommands;
  if (!lazy protocol witness table cache variable for type TextFormattingCommands and conformance TextFormattingCommands)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextFormattingCommands, &type metadata for TextFormattingCommands);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextFormattingCommands and conformance TextFormattingCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<TextFormattingCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CommandsBodyAccessor<TextFormattingCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<TextFormattingCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<TextFormattingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextFormattingCommands and conformance TextFormattingCommands, (uint64_t)&type metadata for TextFormattingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<TextFormattingCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextEditingCommands and conformance TextEditingCommands()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextEditingCommands and conformance TextEditingCommands;
  if (!lazy protocol witness table cache variable for type TextEditingCommands and conformance TextEditingCommands)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextEditingCommands, &type metadata for TextEditingCommands);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextEditingCommands and conformance TextEditingCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<TextEditingCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CommandsBodyAccessor<TextEditingCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<TextEditingCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<TextEditingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextEditingCommands and conformance TextEditingCommands, (uint64_t)&type metadata for TextEditingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<TextEditingCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<Never> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CommandsBodyAccessor<Never> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<Never> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<Never>, MEMORY[0x1E0DEDCE8], (uint64_t)&protocol witness table for Never, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<Never> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrototypePrintingCommands and conformance PrototypePrintingCommands()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrototypePrintingCommands and conformance PrototypePrintingCommands;
  if (!lazy protocol witness table cache variable for type PrototypePrintingCommands and conformance PrototypePrintingCommands)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrototypePrintingCommands, &type metadata for PrototypePrintingCommands);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrototypePrintingCommands and conformance PrototypePrintingCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<PrototypePrintingCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CommandsBodyAccessor<PrototypePrintingCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<PrototypePrintingCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<PrototypePrintingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrototypePrintingCommands and conformance PrototypePrintingCommands, (uint64_t)&type metadata for PrototypePrintingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsBodyAccessor<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<PrototypePrintingCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandsKey()
{
  return &type metadata for CommandsKey;
}

void base witness table accessor for _AttributeBody in CommandsModifier<A>.UpdateList()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187698438()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18769845C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CommandsModifier.UpdateList.value.getter()
{
  return closure #1 in CommandsModifier.UpdateList.value.getter();
}

uint64_t sub_187698478()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CommandsKey.reduce(value:nextValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(v1 + 32);
  (*(void (**)(void))(v1 + 16))();
  return v3(a1);
}

uint64_t MultiDatePicker.$selection.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultiDatePicker.init(selection:minimumDate:maximumDate:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X7>, char *a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  void (*v24)(uint64_t);
  uint64_t v25;

  v13 = *(_QWORD *)(a7 - 8);
  v24 = a6;
  v25 = v13;
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a8 = v16;
  *((_QWORD *)a8 + 1) = v17;
  *((_QWORD *)a8 + 2) = a3;
  v21 = (int *)type metadata accessor for MultiDatePicker(0, v20, v18, v19);
  outlined init with copy of Date?(a4, (uint64_t)&a8[v21[9]]);
  outlined init with copy of Date?(a5, (uint64_t)&a8[v21[10]]);
  swift_retain();
  swift_retain();
  v22 = swift_bridgeObjectRetain();
  v24(v22);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of Date?(a5);
  outlined destroy of Date?(a4);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v25 + 32))(&a8[v21[11]], v15, a7);
}

uint64_t MultiDatePicker.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v5 = MultiDatePicker.$selection.getter();
  v7 = v6;
  v9 = v8;
  v10 = v2 + *(int *)(a1 + 36);
  v11 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  outlined init with copy of Date?(v10, (uint64_t)a2 + *(int *)(v11 + 24));
  result = outlined init with copy of Date?(v2 + *(int *)(a1 + 40), (uint64_t)a2 + *(int *)(v11 + 28));
  *a2 = v5;
  a2[1] = v7;
  a2[2] = v9;
  return result;
}

uint64_t MultiDatePicker.init(selection:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v23 = a5;
  v24 = a6;
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v23 - v18;
  v20 = type metadata accessor for Date();
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v19, 1, 1, v20);
  v21(v15, 1, 1, v20);
  return MultiDatePicker.init(selection:minimumDate:maximumDate:label:)(a1, a2, a3, (uint64_t)v19, (uint64_t)v15, a4, v24, a7);
}

uint64_t MultiDatePicker.init(selection:in:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t, uint64_t, unint64_t);
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;

  v29 = a8;
  v30 = a5;
  v31 = a6;
  v32 = a7;
  v27 = a2;
  v28 = a3;
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v27 - v18;
  v20 = type metadata accessor for Date();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v22(v19, a4, v20);
  v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56);
  v23(v19, 0, 1, v20);
  v24 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEB848];
  type metadata accessor for Range<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Date>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEB848]);
  v22(v15, a4 + *(int *)(v25 + 36), v20);
  v23(v15, 0, 1, v20);
  MultiDatePicker.init(selection:minimumDate:maximumDate:label:)(a1, v27, v28, (uint64_t)v19, (uint64_t)v15, v30, v32, a9);
  return outlined destroy of Range<Date>(a4, (unint64_t *)&lazy cache variable for type metadata for Range<Date>, v24);
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;

  v26 = a8;
  v27 = a5;
  v28 = a6;
  v29 = a7;
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v26 - v20;
  v22 = type metadata accessor for Date();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v24(v21, 1, 1, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v17, a4, v22);
  v24(v17, 0, 1, v22);
  MultiDatePicker.init(selection:minimumDate:maximumDate:label:)(a1, a2, a3, (uint64_t)v21, (uint64_t)v17, v27, v29, a9);
  return outlined destroy of Range<Date>(a4, &lazy cache variable for type metadata for PartialRangeUpTo<Date>, MEMORY[0x1E0DEC930]);
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v1 = type metadata accessor for Date();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CB08B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t MultiDatePicker.init(selection:in:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;

  v27 = a6;
  v28 = a7;
  v26 = a5;
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v25 - v19;
  v21 = type metadata accessor for Date();
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v20, a4, v21);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v23(v20, 0, 1, v21);
  v23(v16, 1, 1, v21);
  MultiDatePicker.init(selection:minimumDate:maximumDate:label:)(a1, a2, a3, (uint64_t)v20, (uint64_t)v16, v26, v28, a8);
  return outlined destroy of Range<Date>(a4, &lazy cache variable for type metadata for PartialRangeFrom<Date>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEC910]);
}

uint64_t outlined destroy of Range<Date>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v4;

  type metadata accessor for Range<Date>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for Range<Date>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for Date();
    v7 = lazy protocol witness table accessor for type Date and conformance Date();
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t MultiDatePicker<>.init(_:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;

  v36 = a7;
  v37 = a1;
  v38 = a3;
  v39 = a8;
  type metadata accessor for MultiDatePicker<Text>(0, a2, a3, a4);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (uint64_t *)((char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v35 - v21;
  v23 = type metadata accessor for Date();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v22, 1, 1, v23);
  v24(v18, 1, 1, v23);
  *v14 = a5;
  v14[1] = a6;
  v14[2] = v36;
  outlined init with copy of Date?((uint64_t)v22, (uint64_t)v14 + v11[9]);
  outlined init with copy of Date?((uint64_t)v18, (uint64_t)v14 + v11[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = Text.init(_:tableName:bundle:comment:)();
  v27 = v26;
  LOBYTE(v23) = v28;
  v30 = v29;
  outlined destroy of Date?((uint64_t)v18);
  outlined destroy of Date?((uint64_t)v22);
  v31 = (char *)v14 + v11[11];
  *(_QWORD *)v31 = v25;
  *((_QWORD *)v31 + 1) = v27;
  v31[16] = v23 & 1;
  *((_QWORD *)v31 + 3) = v30;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v14, v39, v32, v33);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void type metadata accessor for MultiDatePicker<Text>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for MultiDatePicker<Text>)
  {
    v4 = type metadata accessor for MultiDatePicker(0, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for MultiDatePicker<Text>);
  }
}

uint64_t type metadata accessor for MultiDatePicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MultiDatePicker);
}

uint64_t outlined init with take of MultiDatePicker<Text>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for MultiDatePicker<Text>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t MultiDatePicker<>.init(_:selection:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v40 = a8;
  v41 = a6;
  v42 = a7;
  v43 = a2;
  v45 = a3;
  v44 = a1;
  v46 = a9;
  type metadata accessor for MultiDatePicker<Text>(0, a2, a3, a4);
  v12 = v11;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (uint64_t *)((char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v40 - v22;
  v24 = type metadata accessor for Date();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v26(v23, a8, v24);
  v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56);
  v27(v23, 0, 1, v24);
  type metadata accessor for Range<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Date>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEB848]);
  v26(v19, a8 + *(int *)(v28 + 36), v24);
  v27(v19, 0, 1, v24);
  v29 = v41;
  *v15 = a5;
  v15[1] = v29;
  v15[2] = v42;
  outlined init with copy of Date?((uint64_t)v23, (uint64_t)v15 + v12[9]);
  outlined init with copy of Date?((uint64_t)v19, (uint64_t)v15 + v12[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = Text.init(_:tableName:bundle:comment:)();
  v32 = v31;
  LOBYTE(a5) = v33;
  v35 = v34;
  outlined destroy of Date?((uint64_t)v19);
  outlined destroy of Date?((uint64_t)v23);
  v36 = (char *)v15 + v12[11];
  *(_QWORD *)v36 = v30;
  *((_QWORD *)v36 + 1) = v32;
  v36[16] = a5 & 1;
  *((_QWORD *)v36 + 3) = v35;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v15, v46, v37, v38);
  outlined destroy of Range<Date>(v40, (unint64_t *)&lazy cache variable for type metadata for Range<Date>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEB848]);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v9;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v9 = a8;
  v40 = a7;
  v41 = a8;
  v39 = a6;
  v43 = a3;
  v42 = a1;
  v44 = a9;
  type metadata accessor for MultiDatePicker<Text>(0, a2, a3, a4);
  v12 = v11;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (uint64_t *)((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v38 - v22;
  v24 = type metadata accessor for Date();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v23, v9, v24);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  v26(v23, 0, 1, v24);
  v26(v19, 1, 1, v24);
  v27 = v39;
  *v15 = a5;
  v15[1] = v27;
  v15[2] = v40;
  outlined init with copy of Date?((uint64_t)v23, (uint64_t)v15 + v12[9]);
  outlined init with copy of Date?((uint64_t)v19, (uint64_t)v15 + v12[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = Text.init(_:tableName:bundle:comment:)();
  v30 = v29;
  LOBYTE(v9) = v31;
  v33 = v32;
  outlined destroy of Date?((uint64_t)v19);
  outlined destroy of Date?((uint64_t)v23);
  v34 = (char *)v15 + v12[11];
  *(_QWORD *)v34 = v28;
  *((_QWORD *)v34 + 1) = v30;
  v34[16] = v9 & 1;
  *((_QWORD *)v34 + 3) = v33;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v15, v44, v35, v36);
  outlined destroy of Range<Date>(v41, &lazy cache variable for type metadata for PartialRangeFrom<Date>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEC910]);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v39 = a8;
  v40 = a7;
  v37 = a5;
  v38 = a6;
  v42 = a3;
  v41 = a1;
  v43 = a9;
  type metadata accessor for MultiDatePicker<Text>(0, a2, a3, a4);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (uint64_t *)((char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v37 - v21;
  v23 = type metadata accessor for Date();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v25(v22, 1, 1, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v18, a8, v23);
  v25(v18, 0, 1, v23);
  v26 = v38;
  *v14 = v37;
  v14[1] = v26;
  v14[2] = v40;
  outlined init with copy of Date?((uint64_t)v22, (uint64_t)v14 + v11[9]);
  outlined init with copy of Date?((uint64_t)v18, (uint64_t)v14 + v11[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = Text.init(_:tableName:bundle:comment:)();
  v29 = v28;
  LOBYTE(v25) = v30;
  v32 = v31;
  outlined destroy of Date?((uint64_t)v18);
  outlined destroy of Date?((uint64_t)v22);
  v33 = (char *)v14 + v11[11];
  *(_QWORD *)v33 = v27;
  *((_QWORD *)v33 + 1) = v29;
  v33[16] = v25 & 1;
  *((_QWORD *)v33 + 3) = v32;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v14, v43, v34, v35);
  outlined destroy of Range<Date>(v39, &lazy cache variable for type metadata for PartialRangeUpTo<Date>, MEMORY[0x1E0DEC930]);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MultiDatePicker<>.init<A>(_:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;

  v33 = a4;
  v34 = a6;
  v35 = a7;
  type metadata accessor for MultiDatePicker<Text>(0, a2, a3, a4);
  v12 = v11;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v32 - v22;
  v24 = type metadata accessor for Date();
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v25(v23, 1, 1, v24);
  v25(v19, 1, 1, v24);
  *v15 = a2;
  v15[1] = a3;
  v15[2] = v33;
  outlined init with copy of Date?((uint64_t)v23, (uint64_t)v15 + v12[9]);
  outlined init with copy of Date?((uint64_t)v19, (uint64_t)v15 + v12[10]);
  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)&v36);
  outlined destroy of Date?((uint64_t)v19);
  outlined destroy of Date?((uint64_t)v23);
  v26 = (char *)v15 + v12[11];
  v27 = v37;
  v28 = v38;
  *(_OWORD *)v26 = v36;
  v26[16] = v27;
  *((_QWORD *)v26 + 3) = v28;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v15, v35, v29, v30);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
}

uint64_t MultiDatePicker<>.init<A>(_:selection:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  uint64_t v44;

  v39 = a4;
  v40 = a7;
  v37 = a2;
  v38 = a3;
  v41 = a8;
  type metadata accessor for MultiDatePicker<Text>(0, a2, a3, a4);
  v12 = v11;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (uint64_t *)((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v36 - v22;
  v24 = type metadata accessor for Date();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v26(v23, a5, v24);
  v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56);
  v27(v23, 0, 1, v24);
  type metadata accessor for Range<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Date>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEB848]);
  v26(v19, a5 + *(int *)(v28 + 36), v24);
  v27(v19, 0, 1, v24);
  v29 = v38;
  *v15 = v37;
  v15[1] = v29;
  v15[2] = v39;
  outlined init with copy of Date?((uint64_t)v23, (uint64_t)v15 + v12[9]);
  outlined init with copy of Date?((uint64_t)v19, (uint64_t)v15 + v12[10]);
  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)&v42);
  outlined destroy of Date?((uint64_t)v19);
  outlined destroy of Date?((uint64_t)v23);
  v30 = (char *)v15 + v12[11];
  v31 = v43;
  v32 = v44;
  *(_OWORD *)v30 = v42;
  v30[16] = v31;
  *((_QWORD *)v30 + 3) = v32;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v15, v41, v33, v34);
  outlined destroy of Range<Date>(a5, (unint64_t *)&lazy cache variable for type metadata for Range<Date>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEB848]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
}

{
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  uint64_t v41;

  v36 = a1;
  v37 = a7;
  v35 = a4;
  v38 = a8;
  type metadata accessor for MultiDatePicker<Text>(0, a2, a3, a4);
  v13 = v12;
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (uint64_t *)((char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v35 - v23;
  v25 = type metadata accessor for Date();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v24, a5, v25);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  v27(v24, 0, 1, v25);
  v27(v20, 1, 1, v25);
  *v16 = a2;
  v16[1] = a3;
  v16[2] = v35;
  outlined init with copy of Date?((uint64_t)v24, (uint64_t)v16 + v13[9]);
  outlined init with copy of Date?((uint64_t)v20, (uint64_t)v16 + v13[10]);
  v28 = v36;
  closure #1 in LabeledContent<>.init<A>(_:value:)(v36, (uint64_t)&v39);
  outlined destroy of Date?((uint64_t)v20);
  outlined destroy of Date?((uint64_t)v24);
  v29 = (char *)v16 + v13[11];
  v30 = v40;
  v31 = v41;
  *(_OWORD *)v29 = v39;
  v29[16] = v30;
  *((_QWORD *)v29 + 3) = v31;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v16, v38, v32, v33);
  outlined destroy of Range<Date>(a5, &lazy cache variable for type metadata for PartialRangeFrom<Date>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEC910]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(v28, a6);
}

{
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  char v42;
  uint64_t v43;

  v38 = a1;
  v39 = a7;
  v36 = a3;
  v37 = a4;
  v40 = a8;
  type metadata accessor for MultiDatePicker<Text>(0, a2, a3, a4);
  v12 = v11;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (uint64_t *)((char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v35 - v22;
  v24 = type metadata accessor for Date();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  v26(v23, 1, 1, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v19, a5, v24);
  v26(v19, 0, 1, v24);
  v27 = v36;
  *v15 = a2;
  v15[1] = v27;
  v15[2] = v37;
  outlined init with copy of Date?((uint64_t)v23, (uint64_t)v15 + v12[9]);
  outlined init with copy of Date?((uint64_t)v19, (uint64_t)v15 + v12[10]);
  v28 = v38;
  closure #1 in LabeledContent<>.init<A>(_:value:)(v38, (uint64_t)&v41);
  outlined destroy of Date?((uint64_t)v19);
  outlined destroy of Date?((uint64_t)v23);
  v29 = (char *)v15 + v12[11];
  v30 = v42;
  v31 = v43;
  *(_OWORD *)v29 = v41;
  v29[16] = v30;
  *((_QWORD *)v29 + 3) = v31;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v15, v40, v32, v33);
  outlined destroy of Range<Date>(a5, &lazy cache variable for type metadata for PartialRangeUpTo<Date>, MEMORY[0x1E0DEC930]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(v28, a6);
}

uint64_t associated type witness table accessor for View.Body : View in MultiDatePicker<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata completion function for MultiDatePicker()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Date?();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for MultiDatePicker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  unsigned int (*v22)(const void *, uint64_t, uint64_t);
  void *v24;
  const void *v25;
  void *__dst;
  unsigned int (*v28)(const void *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v7 + 64) + 1;
  v10 = v9 + v8;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = ((v9 + v13 + ((v9 + v8 + ((v8 + 24) & ~v8)) & ~v8)) & ~v13) + *(_QWORD *)(v12 + 64);
  v15 = (*(_DWORD *)(v12 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000;
  v16 = *a2;
  *a1 = *a2;
  if ((v13 | v8) > 7 || v15 != 0 || v14 > 0x18)
  {
    a1 = (uint64_t *)(v16 + (((v13 | v8) & 0xF8 ^ 0x1F8) & ((v13 | v8) + 16)));
    swift_retain();
  }
  else
  {
    v30 = v12;
    v31 = v11;
    v19 = ~v8;
    v20 = a2[2];
    v29 = v6;
    a1[1] = a2[1];
    a1[2] = v20;
    __dst = (void *)(((unint64_t)a1 + v8 + 24) & ~v8);
    v21 = (const void *)(((unint64_t)a2 + v8 + 24) & ~v8);
    v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v28 = v22;
    if (v22(v21, 1, v29))
    {
      memcpy(__dst, v21, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(__dst, v21, v29);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(__dst, 0, 1, v29);
    }
    v24 = (void *)(((unint64_t)__dst + v10) & v19);
    v25 = (const void *)(((unint64_t)v21 + v10) & v19);
    if (v28(v25, 1, v29))
    {
      memcpy(v24, v25, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v24, v25, v29);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v24, 0, 1, v29);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v30 + 16))(((unint64_t)v24 + v9 + v13) & ~v13, ((unint64_t)v25 + v9 + v13) & ~v13, v31);
  }
  return a1;
}

uint64_t destroy for MultiDatePicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = a1 + v6 + 24;
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v8(v7 & ~v6, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7 & ~v6, v4);
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = *(_QWORD *)(v5 + 64) + 1;
  v10 = ((v7 | v6) + v9) & ~v6;
  if (!v8(v10, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v4);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v10 + v9 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for MultiDatePicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = a2[2];
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v21 = (unint64_t)a1 + v8 + 24;
  v22 = ~v8;
  v9 = (void *)(v21 & ~v8);
  v20 = (unint64_t)a2 + v8 + 24;
  v10 = (const void *)(v20 & ~v8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v11(v10, 1, v6))
  {
    v12 = *(_DWORD *)(v7 + 84);
    v13 = *(_QWORD *)(v7 + 64);
    if (v12)
      v14 = *(_QWORD *)(v7 + 64);
    else
      v14 = v13 + 1;
    memcpy(v9, v10, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    v12 = *(_DWORD *)(v7 + 84);
    v13 = *(_QWORD *)(v7 + 64);
  }
  if (v12)
    v15 = v13;
  else
    v15 = v13 + 1;
  v16 = (void *)(((v21 | v8) + v15) & v22);
  v17 = (const void *)(((v20 | v8) + v15) & v22);
  if (v11(v17, 1, v6))
  {
    memcpy(v16, v17, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v16, v17, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 16))(((unint64_t)v16 + v15 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v17 + v15 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

_QWORD *assignWithCopy for MultiDatePicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(unint64_t, uint64_t, uint64_t);
  int v11;
  int v12;
  size_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (unint64_t)a1 + v7 + 24;
  v21 = ~v7;
  v9 = (unint64_t)a2 + v7 + 24;
  v10 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  v11 = v10(v8 & ~v7, 1, v5);
  v12 = v10(v9 & ~v7, 1, v5);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v8 & ~v7, v9 & ~v7, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(v8 & ~v7, v9 & ~v7, v5);
      goto LABEL_10;
    }
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8 & ~v7, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v13 = *(_QWORD *)(v6 + 64);
  else
    v13 = *(_QWORD *)(v6 + 64) + 1;
  memcpy((void *)(v8 & ~v7), (const void *)(v9 & ~v7), v13);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v14 = *(_QWORD *)(v6 + 64);
  else
    v14 = *(_QWORD *)(v6 + 64) + 1;
  v15 = (void *)(((v8 | v7) + v14) & v21);
  v16 = (const void *)(((v9 | v7) + v14) & v21);
  v17 = v10((unint64_t)v15, 1, v5);
  v18 = v10((unint64_t)v16, 1, v5);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 24))(v15, v16, v5);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v15, v5);
    goto LABEL_18;
  }
  if (v18)
  {
LABEL_18:
    memcpy(v15, v16, v14);
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
LABEL_19:
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 24))(((unint64_t)v15 + v14 + *(unsigned __int8 *)(v19 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), ((unint64_t)v16 + v14 + *(unsigned __int8 *)(v19 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

uint64_t initializeWithTake for MultiDatePicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v21 = a1;
  v8 = v7 + 24 + a1;
  v9 = ~v7;
  v10 = v7 + 24 + a2;
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v19(v10 & ~v7, 1, v5))
  {
    v11 = *(_DWORD *)(v6 + 84);
    v12 = *(_QWORD *)(v6 + 64);
    if (v11)
      v13 = *(_QWORD *)(v6 + 64);
    else
      v13 = v12 + 1;
    memcpy((void *)(v8 & ~v7), (const void *)(v10 & ~v7), v13);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8 & ~v7, v10 & ~v7, v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
    v11 = *(_DWORD *)(v6 + 84);
    v12 = *(_QWORD *)(v6 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  v15 = (void *)(((v8 | v7) + v14) & v9);
  v16 = (const void *)(((v10 | v7) + v14) & v9);
  if (v19((uint64_t)v16, 1, v5))
  {
    memcpy(v15, v16, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))(((unint64_t)v15 + v14 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)v16 + v14 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return v21;
}

_QWORD *assignWithTake for MultiDatePicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(unint64_t, uint64_t, uint64_t);
  int v11;
  int v12;
  size_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (unint64_t)a1 + v7 + 24;
  v21 = ~v7;
  v9 = (unint64_t)a2 + v7 + 24;
  v10 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  v11 = v10(v8 & ~v7, 1, v5);
  v12 = v10(v9 & ~v7, 1, v5);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(v8 & ~v7, v9 & ~v7, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(v8 & ~v7, v9 & ~v7, v5);
      goto LABEL_10;
    }
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8 & ~v7, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v13 = *(_QWORD *)(v6 + 64);
  else
    v13 = *(_QWORD *)(v6 + 64) + 1;
  memcpy((void *)(v8 & ~v7), (const void *)(v9 & ~v7), v13);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v14 = *(_QWORD *)(v6 + 64);
  else
    v14 = *(_QWORD *)(v6 + 64) + 1;
  v15 = (void *)(((v8 | v7) + v14) & v21);
  v16 = (const void *)(((v9 | v7) + v14) & v21);
  v17 = v10((unint64_t)v15, 1, v5);
  v18 = v10((unint64_t)v16, 1, v5);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 40))(v15, v16, v5);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v15, v5);
    goto LABEL_18;
  }
  if (v18)
  {
LABEL_18:
    memcpy(v15, v16, v14);
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v15, v16, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
LABEL_19:
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 40))(((unint64_t)v15 + v14 + *(unsigned __int8 *)(v19 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), ((unint64_t)v16 + v14 + *(unsigned __int8 *)(v19 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiDatePicker(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;

  v6 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (v8 <= *(_DWORD *)(v9 + 84))
    v10 = *(_DWORD *)(v9 + 84);
  else
    v10 = v8;
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  if (v7)
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = *(_QWORD *)(v6 + 64) + 1;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v6 + 80);
  v14 = v12 + v13;
  v15 = *(unsigned __int8 *)(v9 + 80);
  v16 = v12 + v15;
  if (a2 <= v11)
    goto LABEL_32;
  v17 = ((v16 + ((v14 + ((v13 + 24) & ~v13)) & ~v13)) & ~v15) + *(_QWORD *)(v9 + 64);
  v18 = 8 * v17;
  if (v17 > 3)
    goto LABEL_16;
  v20 = ((a2 - v11 + ~(-1 << v18)) >> v18) + 1;
  if (HIWORD(v20))
  {
    v19 = *(_DWORD *)(a1 + v17);
    if (v19)
      goto LABEL_23;
LABEL_32:
    if ((v10 & 0x80000000) == 0)
    {
      v23 = *(_QWORD *)(a1 + 8);
      if (v23 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      return (v23 + 1);
    }
    v24 = ~v13;
    v25 = (a1 + v13 + 24) & ~v13;
    if (v8 != v11)
      return (*(uint64_t (**)(uint64_t, _QWORD))(v9 + 48))((v16 + ((v14 + v25) & v24)) & ~v15, *(unsigned int *)(v9 + 84));
    if (v7 >= 2)
    {
      v26 = (*(uint64_t (**)(uint64_t))(v6 + 48))(v25);
      if (v26 >= 2)
        return v26 - 1;
      else
        return 0;
    }
    return 0;
  }
  if (v20 > 0xFF)
  {
    v19 = *(unsigned __int16 *)(a1 + v17);
    if (*(_WORD *)(a1 + v17))
      goto LABEL_23;
    goto LABEL_32;
  }
  if (v20 < 2)
    goto LABEL_32;
LABEL_16:
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_32;
LABEL_23:
  v21 = (v19 - 1) << v18;
  if (v17 > 3)
    v21 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v22 = ((v16 + ((v14 + ((v13 + 24) & ~(_DWORD)v13)) & ~(_DWORD)v13)) & ~(_DWORD)v15) + *(_DWORD *)(v9 + 64);
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v11 + v21 + 1;
}

void storeEnumTagSinglePayload for MultiDatePicker(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v8 = 0u;
  v9 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (v11 <= *(_DWORD *)(v12 + 84))
    v13 = *(_DWORD *)(v12 + 84);
  else
    v13 = v11;
  if (v13 <= 0x7FFFFFFF)
    v14 = 0x7FFFFFFF;
  else
    v14 = v13;
  if (v10)
    v15 = *(_QWORD *)(v9 + 64);
  else
    v15 = *(_QWORD *)(v9 + 64) + 1;
  v16 = ((v15
        + *(unsigned __int8 *)(v12 + 80)
        + ((v15
          + *(unsigned __int8 *)(v9 + 80)
          + ((*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
      + *(_QWORD *)(v12 + 64);
  if (a3 > v14)
  {
    if (v16 > 3)
    {
      v8 = 1u;
      if (v14 >= a2)
LABEL_29:
        __asm { BR              X6 }
LABEL_22:
      v18 = ~v14 + a2;
      if (v16 < 4)
      {
        if ((_DWORD)v16)
        {
          v19 = v18 & ~(-1 << (8 * v16));
          bzero(a1, v16);
          if ((_DWORD)v16 == 3)
          {
            *(_WORD *)a1 = v19;
            a1[2] = BYTE2(v19);
          }
          else if ((_DWORD)v16 == 2)
          {
            *(_WORD *)a1 = v19;
          }
          else
          {
            *a1 = v19;
          }
        }
      }
      else
      {
        bzero(a1, v16);
        *(_DWORD *)a1 = v18;
      }
      __asm { BR              X10 }
    }
    v17 = ((a3 - v14 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v17))
    {
      v8 = 4u;
      if (v14 >= a2)
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v17 >= 0x100)
      v8 = 2;
    else
      v8 = v17 > 1;
  }
  if (v14 >= a2)
    goto LABEL_29;
  goto LABEL_22;
}

void sub_18769AE04()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_18769AE0C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

_UNKNOWN **sub_18769AE30()
{
  return &protocol witness table for ResolvedMultiDatePicker;
}

uint64_t Scene.onConnectionOptionPayload<A>(_:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v9 = type metadata accessor for ConnectionOptionPayloadSceneModifier(0, a5, a7, a4);
  swift_retain();
  Scene.modifier<A>(_:)(v11, a4, v9, a6);
  return swift_release();
}

uint64_t type metadata accessor for ConnectionOptionPayloadSceneModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConnectionOptionPayloadSceneModifier);
}

uint64_t View.onConnectionOptionPayload<A>(_:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  type metadata accessor for ConnectionOptionActionBox(0, a5, a7, a4);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8];
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UISceneConnectionOptionDefinition.Type>, 255, (uint64_t (*)(uint64_t))type metadata accessor for UISceneConnectionOptionDefinition.Type, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v13 + 32) = a1;
  *(_QWORD *)(v13 + 40) = a7;
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(ObjectIdentifier, [AnyConnectionOptionActionBox])>, 255, (uint64_t (*)(uint64_t))type metadata accessor for (ObjectIdentifier, [AnyConnectionOptionActionBox]), v12);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_QWORD *)(inited + 32) = a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, v12);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v15 + 32) = v11;
  v19 = v15;
  specialized Array._endMutation()();
  *(_QWORD *)(inited + 40) = v19;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for (ObjectIdentifier, [AnyConnectionOptionActionBox])(0, v16, v17);
  swift_retain();
  swift_retain();
  swift_arrayDestroy();
  View.preference<A>(key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t type metadata accessor for ConnectionOptionActionBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConnectionOptionActionBox);
}

unint64_t type metadata accessor for UISceneConnectionOptionDefinition.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UISceneConnectionOptionDefinition.Type;
  if (!lazy cache variable for type metadata for UISceneConnectionOptionDefinition.Type)
  {
    type metadata accessor for UISceneConnectionOptionDefinition();
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UISceneConnectionOptionDefinition.Type);
  }
  return result;
}

unint64_t type metadata accessor for UISceneConnectionOptionDefinition()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UISceneConnectionOptionDefinition;
  if (!lazy cache variable for type metadata for UISceneConnectionOptionDefinition)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UISceneConnectionOptionDefinition);
  }
  return result;
}

void type metadata accessor for (ObjectIdentifier, [AnyConnectionOptionActionBox])(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!lazy cache variable for type metadata for (ObjectIdentifier, [AnyConnectionOptionActionBox]))
  {
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for [AnyConnectionOptionActionBox], a3, (uint64_t (*)(uint64_t))type metadata accessor for AnyConnectionOptionActionBox, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ObjectIdentifier, [AnyConnectionOptionActionBox]));
  }
}

uint64_t type metadata accessor for AnyConnectionOptionActionBox()
{
  return objc_opt_self();
}

char *ConnectionOptionPayloadSceneModifier.UpdateSceneList.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *Value;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v5 = AccessibilityScenePropertiesModifier.TransformProperties.sceneList.getter(a1);
  if (!v5)
    return (char *)MEMORY[0x1E0DEE9D8];
  v7 = (char *)v5;
  type metadata accessor for ConnectionOptionActionBox(0, a2, a3, v6);
  type metadata accessor for ConnectionOptionPayloadSceneModifier(0, a2, a3, v8);
  Value = (uint64_t *)AGGraphGetValue();
  v11 = *Value;
  v10 = Value[1];
  v12 = (uint64_t *)swift_allocObject();
  v12[2] = v11;
  v12[3] = v10;
  v13 = *((_QWORD *)v7 + 2);
  swift_retain();
  if (v13)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_11;
    while (1)
    {
      v14 = 0;
      v15 = (uint64_t)(v7 + 32);
      while (v14 < *((_QWORD *)v7 + 2))
      {
        ++v14;
        closure #1 in ConnectionOptionPayloadSceneModifier.UpdateSceneList.value.getter(v15, v12);
        v15 += 272;
        if (v13 == v14)
          goto LABEL_7;
      }
      __break(1u);
LABEL_11:
      v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
    }
  }
LABEL_7:
  swift_release();
  return v7;
}

uint64_t closure #1 in ConnectionOptionPayloadSceneModifier.UpdateSceneList.value.getter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  __int128 v21;

  v3 = *a2;
  v4 = *(char **)(a1 + 256);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
  v6 = *((_QWORD *)v4 + 2);
  v5 = *((_QWORD *)v4 + 3);
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v4);
  v21 = *(_OWORD *)(v3 + 96);
  *((_QWORD *)v4 + 2) = v6 + 1;
  *(_OWORD *)&v4[16 * v6 + 32] = v21;
  *(_QWORD *)(a1 + 256) = v4;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0x8000000000000000;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_16:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_14:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    return specialized Array._endMutation()();
  }
  v14 = v9;
  if (*(_QWORD *)(v8 + 24) >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
LABEL_11:
    *(_QWORD *)(a1 + 264) = v8;
    v17 = swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(a1 + 264);
    if ((v14 & 1) == 0)
      v17 = specialized _NativeDictionary._insert(at:key:value:)(v10, v21, MEMORY[0x1E0DEE9D8], *(_QWORD *)(a1 + 264));
    v19 = (_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v10);
    MEMORY[0x18D75CF58](v17);
    if (*(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_14;
    goto LABEL_16;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, isUniquelyReferenced_nonNull_native);
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
  if ((v14 & 1) == (v16 & 1))
  {
    v10 = v15;
    goto LABEL_11;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

char *protocol witness for Rule.value.getter in conformance ConnectionOptionPayloadSceneModifier<A>.UpdateSceneList@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t *v2;
  char *result;

  result = ConnectionOptionPayloadSceneModifier.UpdateSceneList.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t static ConnectionOptionPayloadSceneModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t updated;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_DWORD *)(a2 + 56);
  v30 = *(_QWORD *)a2;
  v31 = v10;
  v32 = v11;
  v33 = *(_OWORD *)(a2 + 24);
  v34 = v12;
  v35 = v13;
  v36 = v14;
  a3(&v28);
  v30 = v13;
  v31 = v14;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    LODWORD(v30) = v9;
    type metadata accessor for ConnectionOptionPayloadSceneModifier(255, a4, a5, v16);
    type metadata accessor for _GraphValue();
    v17 = _GraphValue.value.getter();
    v30 = v28;
    v31 = v29;
    v18 = PreferencesOutputs.subscript.getter();
    v20 = *MEMORY[0x1E0CFED28];
    if ((v18 & 0x100000000) == 0)
      v20 = v18;
    v30 = __PAIR64__(v20, v17);
    MEMORY[0x1E0C80A78](v18, v19);
    updated = type metadata accessor for ConnectionOptionPayloadSceneModifier.UpdateSceneList(0, a4, a5, v21);
    v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConnectionOptionPayloadSceneModifier<A>.UpdateSceneList, updated);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<SceneList>, (uint64_t)&type metadata for SceneList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v30, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)&v25, updated, MEMORY[0x1E0DEDCE8], v22, MEMORY[0x1E0DEDD18], v23);
    LOBYTE(v30) = 0;
    result = PreferencesOutputs.subscript.setter();
  }
  v24 = v29;
  *(_QWORD *)a6 = v28;
  *(_DWORD *)(a6 + 8) = v24;
  return result;
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance ConnectionOptionPayloadSceneModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static ConnectionOptionPayloadSceneModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

unint64_t one-time initialization function for defaultValue()
{
  uint64_t v0;
  unint64_t result;

  v0 = MEMORY[0x1E0DEE9D8];
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  static ConnectionOptionPayloadStoragePreferenceKey.defaultValue = v0;
  *(_QWORD *)algn_1EDEFFCE8 = result;
  return result;
}

{
  unint64_t result;

  static TabOptions.TraitKey.defaultValue = 0;
  qword_1EDF00118 = 0;
  unk_1EDF00120 = 0;
  word_1EDF00128 = 255;
  byte_1EDF0012A = 0;
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  qword_1EDF00130 = result;
  word_1EDF00138 = 257;
  return result;
}

{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  static PositionedNavigationDestination.Key.defaultValue = result;
  return result;
}

{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  static EnvironmentValues.ToolbarForegroundStyleKey.defaultValue = result;
  return result;
}

{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  static Transaction.ScrollInfoKey.defaultValue = result;
  return result;
}

uint64_t ConnectionOptionPayloadStorage.merge(_:)(uint64_t a1, uint64_t a2)
{
  char **v2;
  char **v3;
  char *v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  __int128 v26;
  char *v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  v7 = *((_QWORD *)*v2 + 2);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v28 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v8 = v28;
    v9 = *(_QWORD *)(v28 + 16);
    v10 = 32;
    do
    {
      v11 = *(_QWORD *)&v6[v10];
      v28 = v8;
      v12 = *(_QWORD *)(v8 + 24);
      if (v9 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v9 + 1, 1);
        v8 = v28;
      }
      *(_QWORD *)(v8 + 16) = v9 + 1;
      *(_QWORD *)(v8 + 8 * v9 + 32) = v11;
      v10 += 16;
      ++v9;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  v13 = specialized Set.init<A>(_:)(v8);
  swift_bridgeObjectRelease();
  v28 = v13;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    v15 = 0;
    while (1)
    {
      v26 = *(_OWORD *)(a1 + 32 + 16 * v15);
      v16 = v28;
      if (!*(_QWORD *)(v28 + 16))
        goto LABEL_18;
      v17 = static Hasher._hash(seed:_:)();
      v18 = -1 << *(_BYTE *)(v16 + 32);
      v19 = v17 & ~v18;
      if (((*(_QWORD *)(v16 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        goto LABEL_18;
      v20 = *(_QWORD *)(v16 + 48);
      if (*(_QWORD *)(v20 + 8 * v19) != (_QWORD)v26)
        break;
LABEL_10:
      if (++v15 == v14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    v21 = ~v18;
    while (1)
    {
      v19 = (v19 + 1) & v21;
      if (((*(_QWORD *)(v16 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        break;
      if (*(_QWORD *)(v20 + 8 * v19) == (_QWORD)v26)
        goto LABEL_10;
    }
LABEL_18:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    v23 = *((_QWORD *)v6 + 2);
    v22 = *((_QWORD *)v6 + 3);
    if (v23 >= v22 >> 1)
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v6);
    *((_QWORD *)v6 + 2) = v23 + 1;
    *(_OWORD *)&v6[16 * v23 + 32] = v26;
    *v3 = v6;
    specialized Set._Variant.insert(_:)((uint64_t *)&v27, v26);
    goto LABEL_10;
  }
LABEL_23:
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v27 = v3[1];
  v3[1] = (char *)0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a2, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v27);
  v3[1] = v27;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ConnectionOptionPayloadStoragePreferenceKey@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EDEFFCE8;
  *a1 = static ConnectionOptionPayloadStoragePreferenceKey.defaultValue;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ConnectionOptionPayloadStoragePreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3[2];

  a2(v3);
  ConnectionOptionPayloadStorage.merge(_:)(v3[0], v3[1]);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void AnyConnectionOptionActionBox.dispatch<A>(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ConnectionOptionActionBox.dispatch<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *);
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v13 - v8;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) == v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness, v9);
    v12 = *(void (**)(char *))(v2 + 16);
    swift_retain();
    v12(v10);
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata completion function for ConnectionOptionActionBox()
{
  return swift_initClassMetadata2();
}

uint64_t sub_18769BF0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for ConnectionOptionPayloadSceneModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for ConnectionOptionPayloadSceneModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v5, v7);
}

uint64_t sub_18769BF6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey> and conformance _PreferenceWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey>)
  {
    v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionOptionPayloadStorage()
{
  return &type metadata for ConnectionOptionPayloadStorage;
}

ValueMetadata *type metadata accessor for ConnectionOptionPayloadStoragePreferenceKey()
{
  return &type metadata for ConnectionOptionPayloadStoragePreferenceKey;
}

uint64_t type metadata accessor for ConnectionOptionPayloadSceneModifier.UpdateSceneList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConnectionOptionPayloadSceneModifier.UpdateSceneList);
}

void base witness table accessor for _AttributeBody in ConnectionOptionPayloadSceneModifier<A>.UpdateSceneList()
{
  JUMPOUT(0x18D75FFDCLL);
}

ValueMetadata *type metadata accessor for CommandAccumulator()
{
  return &type metadata for CommandAccumulator;
}

_QWORD *initializeBufferWithCopyOfBuffer for CommandOperation(_BYTE *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, char *, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = *(_QWORD *)((char *)a2 + v7);
    v11 = *(_QWORD *)((char *)a2 + v7 + 8);
    v12 = *((_BYTE *)a2 + v7 + 16);
    outlined copy of Text.Storage(v10, v11, v12);
    *(_QWORD *)v8 = v10;
    *((_QWORD *)v8 + 1) = v11;
    v8[16] = v12;
    *((_QWORD *)v8 + 3) = *((_QWORD *)v9 + 3);
    v13 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v14 = &v8[v13];
    v15 = &v9[v13];
    v16 = type metadata accessor for UUID();
    v17 = *(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
    v18 = *(int *)(a3 + 24);
    v19 = (_QWORD *)((char *)v4 + v18);
    v20 = (_QWORD *)((char *)a2 + v18);
    if (*v20)
    {
      v21 = v20[1];
      *v19 = *v20;
      v19[1] = v21;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
  }
  return v4;
}

uint64_t destroy for CommandOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = a1 + *(int *)(a2 + 20);
  outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v6 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  if (*(_QWORD *)(a1 + *(int *)(a2 + 24)))
    return swift_release();
  return result;
}

_BYTE *initializeWithCopy for CommandOperation(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6];
  v10 = *(_QWORD *)&a2[v6 + 8];
  v11 = a2[v6 + 16];
  outlined copy of Text.Storage(v9, v10, v11);
  *(_QWORD *)v7 = v9;
  *((_QWORD *)v7 + 1) = v10;
  v7[16] = v11;
  *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
  v12 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v13 = &v7[v12];
  v14 = &v8[v12];
  v15 = type metadata accessor for UUID();
  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  v16(v13, v14, v15);
  v17 = *(int *)(a3 + 24);
  v18 = &a1[v17];
  v19 = &a2[v17];
  if (*v19)
  {
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  return a1;
}

_BYTE *assignWithCopy for CommandOperation(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6];
  v10 = *(_QWORD *)&a2[v6 + 8];
  v11 = a2[v6 + 16];
  outlined copy of Text.Storage(v9, v10, v11);
  v12 = *(_QWORD *)v7;
  v13 = *((_QWORD *)v7 + 1);
  v14 = v7[16];
  *(_QWORD *)v7 = v9;
  *((_QWORD *)v7 + 1) = v10;
  v7[16] = v11;
  outlined consume of Text.Storage(v12, v13, v14);
  *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = *(int *)(a3 + 24);
  v20 = &a1[v19];
  v21 = (uint64_t *)&a2[v19];
  v22 = *(_QWORD *)&a1[v19];
  v23 = *v21;
  if (!v22)
  {
    if (v23)
    {
      v25 = v21[1];
      *v20 = v23;
      v20[1] = v25;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    return a1;
  }
  if (!v23)
  {
    swift_release();
    goto LABEL_7;
  }
  v24 = v21[1];
  *v20 = v23;
  v20[1] = v24;
  swift_retain();
  swift_release();
  return a1;
}

_BYTE *initializeWithTake for CommandOperation(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  _BYTE *v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_OWORD *)&a2[v6 + 16];
  *v7 = *(_OWORD *)&a2[v6];
  v7[1] = v9;
  v10 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v11 = (char *)v7 + v10;
  v12 = &v8[v10];
  v13 = type metadata accessor for UUID();
  (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = (uint64_t *)&a2[v14];
  v17 = *v16;
  if (*v16)
  {
    v18 = v16[1];
    *v15 = v17;
    v15[1] = v18;
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  return a1;
}

_BYTE *assignWithTake for CommandOperation(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  LOBYTE(v6) = a2[v6 + 16];
  v9 = *(_QWORD *)v7;
  v10 = *((_QWORD *)v7 + 1);
  v11 = v7[16];
  *(_OWORD *)v7 = *(_OWORD *)v8;
  v7[16] = v6;
  outlined consume of Text.Storage(v9, v10, v11);
  *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
  swift_bridgeObjectRelease();
  v12 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v13 = &v7[v12];
  v14 = &v8[v12];
  v15 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = *(int *)(a3 + 24);
  v17 = &a1[v16];
  v18 = (uint64_t *)&a2[v16];
  v19 = *(_QWORD *)&a1[v16];
  v20 = *v18;
  if (!v19)
  {
    if (v20)
    {
      v22 = v18[1];
      *v17 = v20;
      v17[1] = v22;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    return a1;
  }
  if (!v20)
  {
    swift_release();
    goto LABEL_7;
  }
  v21 = v18[1];
  *v17 = v20;
  v17[1] = v21;
  swift_release();
  return a1;
}

uint64_t sub_18769C620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for CommandGroupPlacement(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_18769C6AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for CommandGroupPlacement(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
  return result;
}

uint64_t CommandOperation.init<A>(mutation:placement:content:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  v24 = a3;
  v11 = type metadata accessor for CommandGroupPlacement(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11, v14);
  v15 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CommandOperation();
  v17 = (uint64_t *)&a6[*(int *)(v16 + 24)];
  *v17 = 0;
  v17[1] = 0;
  *a6 = a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)&a6[*(int *)(v16 + 20)], type metadata accessor for CommandGroupPlacement);
  outlined init with take of TableCellFormula(a2, (uint64_t)v15, type metadata accessor for CommandGroupPlacement);
  v18 = (*(unsigned __int8 *)(v12 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v19 = *(_QWORD *)(a4 - 8);
  v20 = (v18 + v13 + *(unsigned __int8 *)(v19 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a4;
  *(_QWORD *)(v21 + 24) = a5;
  *(_BYTE *)(v21 + 32) = a1;
  outlined init with take of TableCellFormula((uint64_t)v15, v21 + v18, type metadata accessor for CommandGroupPlacement);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 32))(v21 + v20, v24, a4);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v17);
  *v17 = (uint64_t)partial apply for closure #1 in CommandOperation.init<A>(mutation:placement:content:);
  v17[1] = v21;
  return result;
}

uint64_t closure #1 in CommandOperation.init<A>(mutation:placement:content:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v48 = a6;
  v49 = a7;
  v46 = a1;
  v47 = a5;
  v9 = a3;
  v10 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v45 - v16;
  v18 = type metadata accessor for CommandGroupPlacementBox(0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v45 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v45 - v29;
  if (v9 == 3)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a4, (uint64_t)&v45 - v29, type metadata accessor for CommandGroupPlacement);
    v31 = *(_QWORD **)a2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v45 = a4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v31 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    v34 = v31[2];
    v33 = v31[3];
    if (v34 >= v33 >> 1)
      v31 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v31);
    v31[2] = v34 + 1;
    outlined init with take of TableCellFormula((uint64_t)v30, (uint64_t)v31+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v34, type metadata accessor for CommandGroupPlacementBox);
    *(_QWORD *)a2 = v31;
    a4 = v45;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a4, (uint64_t)v17, type metadata accessor for CommandGroupPlacement);
  v35 = *(_QWORD *)(a2 + 8);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, (uint64_t)v26, type metadata accessor for CommandGroupPlacement);
  if (*(_QWORD *)(v35 + 16) && (v36 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26), (v37 & 1) != 0))
  {
    v38 = (uint64_t *)(*(_QWORD *)(v35 + 56) + 16 * v36);
    v39 = *v38;
    v40 = v38[1];
    swift_retain();
    swift_bridgeObjectRetain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, type metadata accessor for CommandGroupPlacementBox);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, type metadata accessor for CommandGroupPlacement);
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, type metadata accessor for CommandGroupPlacementBox);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, type metadata accessor for CommandGroupPlacement);
    v39 = AnyView.init<A>(_:)();
    v40 = MEMORY[0x1E0DEE9E8];
  }
  v51 = v39;
  v52 = v40;
  CommandAccumulator.visit<A>(_:operation:)(v47, v46, v48, v49);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a4, (uint64_t)v13, type metadata accessor for CommandGroupPlacement);
  v41 = v51;
  v42 = v52;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v22, type metadata accessor for CommandGroupPlacement);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v43 = swift_isUniquelyReferenced_nonNull_native();
  v50 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v41, v42, (uint64_t)v22, v43);
  *(_QWORD *)(a2 + 8) = v50;
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, type metadata accessor for CommandGroupPlacementBox);
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for CommandGroupPlacement);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_18769CBD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = type metadata accessor for CommandGroupPlacement(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v1 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v0 + v4;
  outlined consume of Text.Storage(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(_BYTE *)(v0 + v4 + 16));
  swift_bridgeObjectRelease();
  v8 = v7 + *(int *)(v2 + 20);
  v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CommandOperation.init<A>(mutation:placement:content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(type metadata accessor for CommandGroupPlacement(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return closure #1 in CommandOperation.init<A>(mutation:placement:content:)(a1, a2, *(_BYTE *)(v2 + 32), v2 + v8, v2 + ((v8 + *(_QWORD *)(v7 + 64) + v9) & ~v9), v5, v6);
}

void CommandAccumulator.visit<A>(_:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;

  v48 = a3;
  v49 = a4;
  v50 = a1;
  v5 = type metadata accessor for CommandGroupPlacementBox(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v47 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v46 = (char *)&v38 - v10;
  type metadata accessor for PlatformItemListTransformModifier<AllPlatformItemListFlags>(255, v11, v12, v13);
  v14 = type metadata accessor for ModifiedContent();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v16);
  v41 = (char *)&v38 - v17;
  v42 = type metadata accessor for TupleView();
  MEMORY[0x1E0C80A78](v42, v18);
  v40 = (char *)&v38 - v19;
  v20 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](v20, v21);
  v39 = type metadata accessor for TupleView();
  MEMORY[0x1E0C80A78](v39, v22);
  v38 = (char *)&v38 - v23;
  v44 = type metadata accessor for CommandOperation();
  v24 = *(_QWORD *)(v44 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  MEMORY[0x1E0C80A78](v44, v26);
  v27 = (char *)&v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v14;
  v45 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v38 - v32;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
  v34 = (*(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v35 = swift_allocObject();
  v36 = (uint64_t)v27;
  v37 = v49;
  outlined init with take of TableCellFormula(v36, v35 + v34, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
  v51 = v33;
  View.transformPlatformItemList<A>(_:_:)((uint64_t)&type metadata for AllPlatformItemListFlags, (uint64_t)partial apply for closure #1 in CommandAccumulator.visit<A>(_:operation:), v35, v48, (uint64_t)&type metadata for AllPlatformItemListFlags, v37, (uint64_t)&protocol witness table for AllPlatformItemListFlags);
  swift_release();
  __asm { BR              X10 }
}

uint64_t sub_18769D008()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(uint64_t **)(v3 - 176);
  v5 = (char *)v0 + *(int *)(v1 + 48);
  *v0 = *v4;
  v6 = *(_QWORD *)(v3 - 200);
  v7 = *(_QWORD *)(v3 - 216);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 16))(v5, *(_QWORD *)(v3 - 144), v7);
  swift_retain();
  v8 = v6;
  TupleView.init(_:)();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], *(_QWORD *)(v3 - 248));
  v9 = AnyView.init<A>(_:)();
  v11 = *(_QWORD *)(v3 - 192);
  v10 = *(_QWORD *)(v3 - 184);
  v12 = *(_QWORD *)(v3 - 208);
  swift_release();
  *v4 = v9;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2 + *(int *)(v12 + 20), v10, type metadata accessor for CommandGroupPlacement);
  specialized Set._Variant.insert(_:)(v11, v10);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v11, type metadata accessor for CommandGroupPlacementBox);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v8 + 8))(*(_QWORD *)(v3 - 144), v7);
}

uint64_t closure #1 in CommandAccumulator.visit<A>(_:operation:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v3)
  {
    v5 = (_QWORD *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_8;
    while (1)
    {
      v6 = 0;
      while (1)
      {
        *v5 = v2;
        if (v6 >= v2[2])
          break;
        v7 = type metadata accessor for PlatformItemList.Item();
        v8 = (uint64_t)v2
           + ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))
           + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v6
           + *(int *)(v7 + 112);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v8, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation?);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, v8, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
        v9 = type metadata accessor for CommandOperation();
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
        v2 = (_QWORD *)*v5;
        if (v3 == ++v6)
          return result;
      }
      __break(1u);
LABEL_8:
      v2 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    }
  }
  return result;
}

uint64_t sub_18769D39C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for CommandOperation();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v0 + v3 + *(int *)(v1 + 20);
  outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  if (*(_QWORD *)(v0 + v3 + *(int *)(v1 + 24)))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CommandAccumulator.visit<A>(_:operation:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CommandOperation() - 8) + 80);
  return closure #1 in CommandAccumulator.visit<A>(_:operation:)(a1, v1 + ((v3 + 16) & ~v3));
}

ValueMetadata *type metadata accessor for CommandAccumulator.Result()
{
  return &type metadata for CommandAccumulator.Result;
}

uint64_t storeEnumTagSinglePayload for CommandOperation.Mutation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_18769D4F4 + 4 * byte_187C4DB4A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_18769D528 + 4 * byte_187C4DB45[v4]))();
}

uint64_t sub_18769D528(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18769D530(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18769D538);
  return result;
}

uint64_t sub_18769D544(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18769D54CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_18769D550(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18769D558(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommandOperation.Mutation()
{
  return &type metadata for CommandOperation.Mutation;
}

unint64_t lazy protocol witness table accessor for type CommandOperation.Mutation and conformance CommandOperation.Mutation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommandOperation.Mutation and conformance CommandOperation.Mutation;
  if (!lazy protocol witness table cache variable for type CommandOperation.Mutation and conformance CommandOperation.Mutation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandOperation.Mutation, &type metadata for CommandOperation.Mutation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandOperation.Mutation and conformance CommandOperation.Mutation);
  }
  return result;
}

uint64_t View.onPencilDoubleTap(perform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];

  v4[0] = a1;
  v4[1] = a2;
  v4[2] = 0;
  v4[3] = 0;
  return MEMORY[0x18D75B4AC](v4, a3, &type metadata for PencilEventsModifier);
}

__n128 PencilDoubleTapGestureValue.hoverPose.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_BYTE *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  result = *(__n128 *)(v1 + 32);
  v5 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 64) = v2;
  return result;
}

void PencilDoubleTapGestureValue.hash(into:)()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 64) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    PencilHoverPose.hash(into:)();
  }
}

Swift::Int PencilDoubleTapGestureValue.hashValue.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 64);
  Hasher.init(_seed:)();
  if (v1 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    PencilHoverPose.hash(into:)();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PencilDoubleTapGestureValue()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 64);
  Hasher.init(_seed:)();
  if (v1 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    PencilHoverPose.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PencilDoubleTapGestureValue()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 64) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    PencilHoverPose.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PencilDoubleTapGestureValue()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 64);
  Hasher.init(_seed:)();
  if (v1 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    PencilHoverPose.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t View.onPencilSqueeze(perform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];

  v4[0] = 0;
  v4[1] = 0;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x18D75B4AC](v4, a3, &type metadata for PencilEventsModifier);
}

__n128 PencilSqueezeGestureValue.hoverPose.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __n128 result;
  __int128 v5;

  v2 = *(_BYTE *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  result = *(__n128 *)(v1 + 32);
  v5 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 64) = v2;
  return result;
}

uint64_t PencilSqueezeGestureValue.normalizedForceVelocity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t PencilSqueezeGestureValue.normalizedForceVelocity.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*PencilSqueezeGestureValue.normalizedForceVelocity.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void PencilSqueezeGestureValue.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt64 v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(unsigned __int8 *)(v0 + 80);
  if (*(_BYTE *)(v0 + 64) != 1)
  {
    Hasher._combine(_:)(1u);
    PencilHoverPose.hash(into:)();
    if (!v2)
      goto LABEL_3;
LABEL_8:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  if (v2)
    goto LABEL_8;
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

Swift::Int PencilSqueezeGestureValue.hashValue.getter()
{
  Hasher.init(_seed:)();
  PencilSqueezeGestureValue.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PencilSqueezeGestureValue()
{
  Hasher.init(_seed:)();
  PencilSqueezeGestureValue.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PencilSqueezeGestureValue()
{
  Hasher.init(_seed:)();
  PencilSqueezeGestureValue.hash(into:)();
  return Hasher._finalize()();
}

uint64_t specialized static PencilSqueezeGesturePhase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float64_t v2;
  float64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char v12;
  int v13;
  float64_t v14;
  float64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  int v24;
  int v25;
  float64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v3 = *(double *)a1;
  v2 = *(double *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v10 = *(double *)(a1 + 72);
  v12 = *(_BYTE *)(a1 + 80);
  v13 = *(unsigned __int8 *)(a1 + 81);
  v14 = *(double *)a2;
  v15 = *(double *)(a2 + 8);
  v16 = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(a2 + 32);
  v19 = *(_QWORD *)(a2 + 40);
  v21 = *(_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a2 + 64);
  v23 = *(double *)(a2 + 72);
  v24 = *(unsigned __int8 *)(a2 + 80);
  v25 = *(unsigned __int8 *)(a2 + 81);
  if (!v13)
  {
    if (v25)
      return 0;
    if ((v11 & 1) != 0)
    {
      if ((v22 & 1) == 0)
        return 0;
    }
    else
    {
      v35.f64[0] = v3;
      v35.f64[1] = v2;
      v36 = v5;
      v37 = v4;
      v38 = v7;
      v39 = v6;
      v40 = v8;
      v41 = v9;
      v42 = 0;
      if ((v22 & 1) != 0)
        return 0;
      v28.f64[0] = v14;
      v28.f64[1] = v15;
      v29 = v16;
      v30 = v17;
      v31 = v18;
      v32 = v19;
      v33 = v21;
      v34 = v20;
      if ((specialized static PencilHoverPose.== infix(_:_:)(&v35, &v28) & 1) == 0)
        return 0;
    }
    if ((v12 & 1) == 0)
      return (v24 & 1) == 0 && v10 == v23;
    goto LABEL_26;
  }
  if (v13 != 1)
  {
    if (v25 != 2)
      return 0;
    return !(*(_QWORD *)&v15 | *(_QWORD *)&v14 | v16 | v17 | v18 | v19 | v21 | v20 | v22 | *(_QWORD *)&v23) && v24 == 0;
  }
  if (v25 == 1)
  {
    if ((v11 & 1) != 0)
    {
      if ((v22 & 1) == 0)
        return 0;
    }
    else
    {
      v35.f64[0] = v3;
      v35.f64[1] = v2;
      v36 = v5;
      v37 = v4;
      v38 = v7;
      v39 = v6;
      v40 = v8;
      v41 = v9;
      v42 = 0;
      if ((v22 & 1) != 0)
        return 0;
      v28.f64[0] = v14;
      v28.f64[1] = v15;
      v29 = v16;
      v30 = v17;
      v31 = v18;
      v32 = v19;
      v33 = v21;
      v34 = v20;
      if ((specialized static PencilHoverPose.== infix(_:_:)(&v35, &v28) & 1) == 0)
        return 0;
    }
    if ((v12 & 1) == 0)
      return (v24 & 1) == 0 && v10 == v23;
LABEL_26:
    if ((v24 & 1) != 0)
      return 1;
  }
  return 0;
}

BOOL specialized static PencilSqueezeGestureValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  char v3;
  char v4;
  double v5;
  char v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  char v14;
  float64x2_t v15[4];
  float64x2_t v16[4];
  char v17;

  v2 = *(double *)(a1 + 72);
  v3 = *(_BYTE *)(a1 + 80);
  v4 = *(_BYTE *)(a2 + 64);
  v5 = *(double *)(a2 + 72);
  v6 = *(_BYTE *)(a2 + 80);
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) == 0)
      return 0;
  }
  else
  {
    v7 = *(float64x2_t *)a2;
    v8 = *(float64x2_t *)(a2 + 16);
    v9 = *(float64x2_t *)(a2 + 32);
    v10 = *(float64x2_t *)(a2 + 48);
    v11 = *(float64x2_t *)(a1 + 16);
    v16[0] = *(float64x2_t *)a1;
    v16[1] = v11;
    v12 = *(float64x2_t *)(a1 + 48);
    v16[2] = *(float64x2_t *)(a1 + 32);
    v16[3] = v12;
    v17 = 0;
    if ((v4 & 1) != 0)
      return 0;
    v15[0] = v7;
    v15[1] = v8;
    v15[2] = v9;
    v15[3] = v10;
    if ((specialized static PencilHoverPose.== infix(_:_:)(v16, v15) & 1) == 0)
      return 0;
  }
  if ((v3 & 1) == 0)
  {
    if (v2 == v5)
      v14 = v6;
    else
      v14 = 1;
    return (v14 & 1) == 0;
  }
  return (v6 & 1) != 0;
}

BOOL specialized static PencilDoubleTapGestureValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v10[4];
  float64x2_t v11[4];
  char v12;

  v2 = *(_BYTE *)(a2 + 64);
  if ((*(_BYTE *)(a1 + 64) & 1) == 0)
  {
    v3 = *(float64x2_t *)a2;
    v4 = *(float64x2_t *)(a2 + 16);
    v5 = *(float64x2_t *)(a2 + 32);
    v6 = *(float64x2_t *)(a2 + 48);
    v7 = *(float64x2_t *)(a1 + 16);
    v11[0] = *(float64x2_t *)a1;
    v11[1] = v7;
    v8 = *(float64x2_t *)(a1 + 48);
    v11[2] = *(float64x2_t *)(a1 + 32);
    v11[3] = v8;
    v12 = 0;
    if ((v2 & 1) != 0)
      return 0;
    v10[0] = v3;
    v10[1] = v4;
    v10[2] = v5;
    v10[3] = v6;
    return (specialized static PencilHoverPose.== infix(_:_:)(v11, v10) & 1) != 0;
  }
  return (*(_BYTE *)(a2 + 64) & 1) != 0;
}

unint64_t lazy protocol witness table accessor for type PencilDoubleTapGestureValue and conformance PencilDoubleTapGestureValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilDoubleTapGestureValue and conformance PencilDoubleTapGestureValue;
  if (!lazy protocol witness table cache variable for type PencilDoubleTapGestureValue and conformance PencilDoubleTapGestureValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilDoubleTapGestureValue, &type metadata for PencilDoubleTapGestureValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilDoubleTapGestureValue and conformance PencilDoubleTapGestureValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PencilSqueezeGestureValue and conformance PencilSqueezeGestureValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilSqueezeGestureValue and conformance PencilSqueezeGestureValue;
  if (!lazy protocol witness table cache variable for type PencilSqueezeGestureValue and conformance PencilSqueezeGestureValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilSqueezeGestureValue, &type metadata for PencilSqueezeGestureValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilSqueezeGestureValue and conformance PencilSqueezeGestureValue);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PencilDoubleTapGestureValue(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PencilDoubleTapGestureValue(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 65) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PencilDoubleTapGestureValue()
{
  return &type metadata for PencilDoubleTapGestureValue;
}

uint64_t getEnumTagSinglePayload for PencilSqueezeGesturePhase(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 82))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 81);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PencilSqueezeGesturePhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 80) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 82) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 82) = 0;
    if (a2)
      *(_BYTE *)(result + 81) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PencilSqueezeGesturePhase(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 81);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for PencilSqueezeGesturePhase(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 > 1)
  {
    v2 = a2 - 2;
    *(_BYTE *)(result + 80) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)result = v2;
  }
  *(_BYTE *)(result + 81) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PencilSqueezeGesturePhase()
{
  return &type metadata for PencilSqueezeGesturePhase;
}

uint64_t getEnumTagSinglePayload for PencilSqueezeGestureValue(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PencilSqueezeGestureValue(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 81) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PencilSqueezeGestureValue()
{
  return &type metadata for PencilSqueezeGestureValue;
}

uint64_t sub_18769E030(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for PencilEventsModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t ScrollActionDispatcher.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  os_log_type_t v56;
  NSObject *v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  void (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v81)(uint64_t, uint64_t, uint64_t);
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t);
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char v104;
  void (*v105)(char *, uint64_t);
  char *v106;
  void (*v107)(char *, uint64_t);
  char *v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t Strong;
  _QWORD *v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t);
  _QWORD v124[2];
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t TupleTypeMetadata2;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  __int128 v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v135 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v7);
  v138 = (char *)v124 - v8;
  v146 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v133 = (char *)v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v144 = (uint64_t)v124 - v14;
  v15 = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v16 - 8);
  v140 = v16;
  v141 = v17;
  MEMORY[0x1E0C80A78](v16, v18);
  v142 = (char *)v124 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v139 = (uint64_t)v124 - v22;
  v145 = *(void (**)(char *, uint64_t))(v6 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v134 = (char *)v124 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v136 = (char *)v124 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  *(_QWORD *)&v143 = (char *)v124 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v148 = (char *)v124 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v149 = (char *)v124 - v37;
  v147 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v38, v39);
  v150 = (char *)v124 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(_DWORD *)AGGraphGetValue() >> 1;
  v42 = *(int *)(a1 + 48);
  if (v41 != *(_DWORD *)(v1 + v42))
  {
    *(_DWORD *)(v1 + v42) = v41;
    v43 = v1 + *(int *)(a1 + 44);
    *(_QWORD *)(v43 + 4) = 0xFFFFFFFFLL;
    *(_BYTE *)(v43 + 12) = 0;
    v44 = static Array._allocateUninitialized(_:)();
    v45 = *(int *)(a1 + 52);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + v45) = v44;
  }
  v46 = type metadata accessor for Array();
  v47 = *(_QWORD *)AGGraphGetValue();
  if ((v48 & 1) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_6:
    $defer #1 <A>() in ScrollActionDispatcher.updateValue()(v1, v47, v3, v4);
    return swift_bridgeObjectRelease();
  }
  v49 = *(int *)(a1 + 52);
  v151 = v47;
  v131 = v49;
  swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50 = static Array<A>.== infix(_:_:)();
  v47 = v151;
  swift_bridgeObjectRelease();
  if ((v50 & 1) != 0)
    goto LABEL_6;
  v128 = AssociatedTypeWitness;
  v130 = v6;
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v147 + 16);
  v132 = v1;
  v52(v150, v1, v3);
  v53 = v3;
  v125 = dispatch thunk of CustomStringConvertible.description.getter();
  v55 = v54;
  if (MEMORY[0x18D75D024](v47, v15) >= 2)
  {
    v56 = static os_log_type_t.fault.getter();
    v57 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v57, v56))
    {
      swift_bridgeObjectRetain_n();
      v58 = (uint8_t *)swift_slowAlloc();
      v129 = swift_slowAlloc();
      *(_QWORD *)&v153 = v129;
      *(_DWORD *)v58 = 136315138;
      v127 = (uint64_t)(v58 + 4);
      swift_bridgeObjectRetain();
      v152 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v125, v55, (uint64_t *)&v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v57, v56, "%s: Multiple scroll views were found. Picking the first one to compare.", v58, 0xCu);
      v59 = v129;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v59, -1, -1);
      MEMORY[0x18D760108](v58, -1, -1);
    }

  }
  v124[1] = a1;
  v129 = v55;
  *(_QWORD *)&v153 = v47;
  v127 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v46);
  v60 = v139;
  v61 = Collection.first.getter();
  v126 = v124;
  MEMORY[0x1E0C80A78](v61, v62);
  v63 = v53;
  v124[-4] = v53;
  v124[-3] = v4;
  v64 = v150;
  v124[-2] = v150;
  v65 = v140;
  v66 = v128;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ScrollActionDispatcher.updateValue(), (uint64_t)&v124[-6], MEMORY[0x1E0DEDCE8], v128, v67, (uint64_t)v149);
  v68 = v4;
  v69 = *(void (**)(uint64_t, uint64_t))(v141 + 8);
  v69(v60, v65);
  v70 = v64;
  *(_QWORD *)&v153 = *(_QWORD *)(v132 + v131);
  v71 = v142;
  v72 = Collection.first.getter();
  MEMORY[0x1E0C80A78](v72, v73);
  v139 = v63;
  v124[-4] = v63;
  v124[-3] = v68;
  v141 = v68;
  v124[-2] = v70;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ScrollActionDispatcher.updateValue(), (uint64_t)&v124[-6], MEMORY[0x1E0DEDCE8], v66, v74, (uint64_t)v148);
  v69((uint64_t)v71, v65);
  v75 = (uint64_t)v149;
  v76 = v145;
  v77 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v145 + 2);
  v78 = v143;
  v79 = v130;
  v77((char *)v143, (uint64_t)v149, v130);
  v80 = v146;
  v81 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48);
  if (v81(v78, 1, v66) == 1)
  {
    v82 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v76 + 1);
    v82(v75, v79);
    swift_bridgeObjectRelease();
    v82((uint64_t)v148, v79);
    v83 = v139;
    (*(void (**)(char *, uint64_t))(v147 + 8))(v150, v139);
    v82(v78, v79);
    v84 = v141;
    v85 = v151;
    v86 = v132;
LABEL_25:
    $defer #1 <A>() in ScrollActionDispatcher.updateValue()(v86, v85, v83, v84);
    return swift_bridgeObjectRelease();
  }
  v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32);
  v88 = v144;
  v87(v144, v78, v66);
  v89 = v136;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v136, v88, v66);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v89, 0, 1, v66);
  v90 = v138;
  v91 = &v138[*(int *)(TupleTypeMetadata2 + 48)];
  v77(v138, (uint64_t)v89, v79);
  v77(v91, (uint64_t)v148, v79);
  v92 = v79;
  if (v81((uint64_t)v90, 1, v66) == 1)
  {
    v93 = (void (*)(char *, uint64_t))*((_QWORD *)v145 + 1);
    v93(v89, v79);
    v94 = v81((uint64_t)v91, 1, v66);
    v95 = v66;
    v85 = v151;
    v86 = v132;
    if (v94 == 1)
    {
      v93(v90, v92);
      v97 = (uint64_t)v149;
      v96 = (uint64_t)v150;
LABEL_20:
      v93((char *)v97, v92);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v144, v95);
      v93(v148, v92);
LABEL_24:
      v83 = v139;
      (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v96, v139);
      v84 = v141;
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  v98 = v134;
  v77(v134, (uint64_t)v90, v79);
  v99 = v81((uint64_t)v91, 1, v66);
  v95 = v66;
  v85 = v151;
  v86 = v132;
  if (v99 == 1)
  {
    v93 = (void (*)(char *, uint64_t))*((_QWORD *)v145 + 1);
    v93(v136, v92);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v98, v95);
LABEL_18:
    v97 = (uint64_t)v149;
    v96 = (uint64_t)v150;
    v100 = (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v138, TupleTypeMetadata2);
    goto LABEL_21;
  }
  v102 = v133;
  v87((uint64_t)v133, (uint64_t)v91, v95);
  swift_getAssociatedConformanceWitness();
  v103 = v92;
  v104 = dispatch thunk of static Equatable.== infix(_:_:)();
  v105 = *(void (**)(char *, uint64_t))(v146 + 8);
  v105(v102, v95);
  v106 = v98;
  v107 = (void (*)(char *, uint64_t))*((_QWORD *)v145 + 1);
  v107(v136, v103);
  v108 = v106;
  v93 = v107;
  v105(v108, v95);
  v92 = v103;
  v100 = ((uint64_t (*)(char *, uint64_t))v107)(v90, v103);
  v97 = (uint64_t)v149;
  v96 = (uint64_t)v150;
  if ((v104 & 1) != 0)
    goto LABEL_20;
LABEL_21:
  v145 = v93;
  MEMORY[0x1E0C80A78](v100, v101);
  v109 = v129;
  v124[-2] = v125;
  v124[-1] = v109;
  v110 = UpdateCycleDetector.dispatch(label:isDebug:)();
  swift_bridgeObjectRelease();
  if ((v110 & 1) == 0)
  {
    v122 = v130;
    v123 = (void (*)(uint64_t, uint64_t))v145;
    v145((char *)v97, v130);
    (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v144, v95);
    v123((uint64_t)v148, v122);
    goto LABEL_24;
  }
  AGGraphClearUpdate();
  v111 = v86;
  v112 = (uint64_t)v148;
  v113 = v144;
  v114 = v139;
  v115 = v141;
  closure #3 in ScrollActionDispatcher.updateValue()(v96, (uint64_t)v148, v144, v139, v141, (uint64_t (**)())&v153);
  AGGraphSetUpdate();
  v143 = v153;
  v116 = swift_allocObject();
  *(_OWORD *)(v116 + 16) = v143;
  v117 = v111;
  Strong = swift_weakLoadStrong();
  v119 = (_QWORD *)swift_allocObject();
  v119[2] = partial apply for thunk for @callee_guaranteed () -> ();
  v119[3] = v116;
  v119[4] = Strong;
  swift_retain();
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
  swift_release();
  v120 = v130;
  v121 = (void (*)(uint64_t, uint64_t))v145;
  v145(v149, v130);
  (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v113, v95);
  v121(v112, v120);
  (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v96, v114);
  $defer #1 <A>() in ScrollActionDispatcher.updateValue()(v117, v151, v114, v115);
  return swift_bridgeObjectRelease();
}

uint64_t $defer #1 <A>() in ScrollActionDispatcher.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a1 + *(int *)(type metadata accessor for ScrollActionDispatcher(0, a3, a4, a4) + 52)) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in ScrollActionDispatcher.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (**a6)()@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t (**v29)();
  _QWORD v30[2];
  uint64_t v31;
  uint64_t (**v32)();

  v30[1] = a1;
  v31 = a4;
  v32 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v30 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)v30 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, a2, v10, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, a3, AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v24, v19, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v24, v14, AssociatedTypeWitness);
  }
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(a5 + 56))(v24, a3, v31, a5);
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v24, AssociatedTypeWitness);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v25;
  *(_QWORD *)(result + 24) = v27;
  v29 = v32;
  *v32 = partial apply for thunk for @callee_guaranteed () -> ();
  v29[1] = (uint64_t (*)())result;
  return result;
}

uint64_t closure #4 in ScrollActionDispatcher.updateValue()(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t ObjectType;

  result = a1();
  if (a3)
  {
    swift_beginAccess();
    result = MEMORY[0x18D760234](a3 + 200);
    if (result)
    {
      v5 = *(_QWORD *)(a3 + 208);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, double))(v5 + 40))(ObjectType, v5, 0.0);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t ScrollActionDispatcher.init(provider:inputs:viewPhase:cycleDetector:oldResetSeed:oldInputs:viewGraph:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  int v15;
  char v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;

  v15 = *(_DWORD *)(a4 + 8);
  v16 = *(_BYTE *)(a4 + 12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(a8, a1, a7);
  v18 = (int *)type metadata accessor for ScrollActionDispatcher(0, a7, a9, v17);
  *(_DWORD *)(a8 + v18[9]) = a2;
  *(_DWORD *)(a8 + v18[10]) = a3;
  v19 = a8 + v18[11];
  *(_QWORD *)v19 = *(_QWORD *)a4;
  *(_DWORD *)(v19 + 8) = v15;
  *(_BYTE *)(v19 + 12) = v16;
  *(_DWORD *)(a8 + v18[12]) = a5;
  *(_QWORD *)(a8 + v18[13]) = a6;
  swift_weakInit();
  return swift_release();
}

__n128 static OnScrollPhaseChangeModifier._makeView(modifier:inputs:body:)@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  char v27;
  __n128 result;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  __n128 v42;
  unint64_t v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  _BYTE v50[12];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v29 = *a1;
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 24);
  v8 = *(_DWORD *)(a2 + 28);
  v9 = *(_DWORD *)(a2 + 32);
  v10 = *(_DWORD *)(a2 + 36);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_DWORD *)(a2 + 56);
  v14 = *(_DWORD *)(a2 + 60);
  v15 = *(_DWORD *)(a2 + 64);
  v16 = *(_DWORD *)(a2 + 68);
  v18 = *(_DWORD *)(a2 + 72);
  v17 = *(_DWORD *)(a2 + 76);
  v19 = *(_DWORD *)(a2 + 80);
  v57 = v4;
  v40 = v7;
  v41 = v5;
  v58 = v5;
  v59 = v6;
  *(_QWORD *)&v60 = __PAIR64__(v8, v7);
  v38 = v9;
  v39 = v8;
  *((_QWORD *)&v60 + 1) = __PAIR64__(v10, v9);
  v36 = v13;
  v37 = v10;
  v61 = v11;
  v62 = v12;
  *(_QWORD *)&v63 = __PAIR64__(v14, v13);
  v34 = v15;
  v35 = v14;
  *((_QWORD *)&v63 + 1) = __PAIR64__(v16, v15);
  v32 = v18;
  v33 = v16;
  v64 = __PAIR64__(v17, v18);
  v30 = v19;
  v31 = v17;
  v65 = v19;
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollPhasePreferenceKey>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<ScrollPhasePreferenceKey> and conformance _AnyPreferenceKey<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  v48 = v4;
  v49 = v58;
  *(_QWORD *)&v50[4] = v6;
  v51 = v60;
  v52 = v11;
  v53 = v12;
  v54 = v63;
  v55 = v64;
  v56 = v65;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  a3(&v46, v20, &v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v21.n128_u64[0] = v47;
  v44 = v46;
  v48 = v46;
  v42 = v21;
  v49 = v47;
  v22 = PreferencesOutputs.subscript.getter();
  if ((v22 & 0x100000000) == 0)
  {
    v23 = v22;
    LODWORD(v48) = v29;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<OnScrollPhaseChangeModifier>, (uint64_t)&type metadata for OnScrollPhaseChangeModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    v24 = _GraphValue.value.getter();
    v48 = v4;
    v49 = v41;
    *(_QWORD *)&v50[4] = v6;
    *(_QWORD *)&v51 = __PAIR64__(v39, v40);
    *((_QWORD *)&v51 + 1) = __PAIR64__(v37, v38);
    v52 = v11;
    v53 = v12;
    *(_QWORD *)&v54 = __PAIR64__(v35, v36);
    *((_QWORD *)&v54 + 1) = __PAIR64__(v33, v34);
    v55 = __PAIR64__(v31, v32);
    v56 = v30;
    v25 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    v26 = v47;
    v27 = BYTE4(v47);
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    v48 = __PAIR64__(v23, v24);
    v49 = v25;
    *(_QWORD *)v50 = v46;
    *(_DWORD *)&v50[8] = v26;
    LOBYTE(v51) = v27;
    DWORD1(v51) = -1;
    *((_QWORD *)&v51 + 1) = MEMORY[0x1E0DEE9D8];
    swift_weakInit();
    swift_release();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(0, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider, (uint64_t)&unk_1E1AF3680);
    lazy protocol witness table accessor for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>((uint64_t)&v48, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider, (uint64_t)&unk_1E1AF3680);
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *a4 = v44;
  result = v42;
  a4[1] = v42.n128_u64[0];
  return result;
}

uint64_t closure #1 in OnScrollPhaseChangeModifier.PhaseActionProvider.makeAction(oldOutput:newOutput:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t (*protocol witness for ScrollActionProvider.makeAction(oldOutput:newOutput:) in conformance OnScrollPhaseChangeModifier.PhaseActionProvider(char *a1, char *a2))()
{
  char v2;
  char v3;
  uint64_t *Value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  Value = (uint64_t *)AGGraphGetValue();
  v6 = *Value;
  v5 = Value[1];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  *(_BYTE *)(v7 + 32) = v2;
  *(_BYTE *)(v7 + 33) = v3;
  swift_retain();
  return _s7SwiftUI27OnScrollPhaseChangeModifierV0E14ActionProvider33_1176EEC1E4A702DD8DB07F9D0C463078LLV04makeH09oldOutput03newT0yycAA0dE0O_AKtFyycfU_TA_0;
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OnScrollPhaseChangeModifier.PhaseActionProvider()
{
  return 0xD00000000000001ELL;
}

void protocol witness for ViewModifier.body(content:) in conformance OnScrollPhaseChangeModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

__n128 static OnScrollPhaseContextChangeModifier._makeView(modifier:inputs:body:)@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  char v30;
  __n128 result;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  __n128 v47;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v32 = *a1;
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 24);
  v8 = *(_DWORD *)(a2 + 28);
  v9 = *(_DWORD *)(a2 + 32);
  v10 = *(_DWORD *)(a2 + 36);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_DWORD *)(a2 + 56);
  v14 = *(_DWORD *)(a2 + 60);
  v15 = *(_DWORD *)(a2 + 64);
  v16 = *(_DWORD *)(a2 + 68);
  v18 = *(_DWORD *)(a2 + 72);
  v17 = *(_DWORD *)(a2 + 76);
  v19 = *(_DWORD *)(a2 + 80);
  v61 = v4;
  v44 = v5;
  v62 = v5;
  v63 = v6;
  v42 = v8;
  v43 = v7;
  *(_QWORD *)&v64 = __PAIR64__(v8, v7);
  v40 = v10;
  v41 = v9;
  *((_QWORD *)&v64 + 1) = __PAIR64__(v10, v9);
  v65 = v11;
  v66 = v12;
  v38 = v14;
  v39 = v13;
  *(_QWORD *)&v67 = __PAIR64__(v14, v13);
  v36 = v16;
  v37 = v15;
  *((_QWORD *)&v67 + 1) = __PAIR64__(v16, v15);
  v34 = v17;
  v35 = v18;
  v68 = __PAIR64__(v17, v18);
  v33 = v19;
  v69 = v19;
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollPhasePreferenceKey>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<ScrollPhasePreferenceKey> and conformance _AnyPreferenceKey<A>();
  v45 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollGeometryPreferenceKey>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<ScrollGeometryPreferenceKey> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  v51 = v4;
  v52 = v62;
  v54 = v6;
  v55 = v64;
  v56 = v11;
  v57 = v12;
  v58 = v67;
  v59 = v68;
  v60 = v69;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  a3(&v49, v20, &v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v21 = v49;
  v22.n128_u64[0] = v50;
  v51 = v49;
  v23 = v50;
  v47 = v22;
  v52 = v50;
  swift_bridgeObjectRetain();
  v24 = PreferencesOutputs.subscript.getter();
  if ((v24 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v25 = v24;
  v51 = v21;
  v52 = v23;
  v26 = PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v26 & 0x100000000) != 0)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_6;
  }
  LODWORD(v51) = v32;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<OnScrollPhaseContextChangeModifier>, (uint64_t)&type metadata for OnScrollPhaseContextChangeModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v27 = _GraphValue.value.getter();
  v51 = v45;
  v52 = v44;
  v54 = v6;
  *(_QWORD *)&v55 = __PAIR64__(v42, v43);
  *((_QWORD *)&v55 + 1) = __PAIR64__(v40, v41);
  v56 = v11;
  v57 = v12;
  *(_QWORD *)&v58 = __PAIR64__(v38, v39);
  *((_QWORD *)&v58 + 1) = __PAIR64__(v36, v37);
  v59 = __PAIR64__(v34, v35);
  v60 = v33;
  v28 = _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  v29 = v50;
  v30 = BYTE4(v50);
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C5F8]();
  v51 = __PAIR64__(v26, v27);
  v52 = v25;
  v53 = v28;
  v54 = v49;
  LODWORD(v55) = v29;
  BYTE4(v55) = v30;
  DWORD2(v55) = -1;
  v56 = MEMORY[0x1E0DEE9D8];
  swift_weakInit();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(0, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, (uint64_t)&unk_1E1B04878);
  lazy protocol witness table accessor for type ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider> and conformance ScrollActionDispatcher<A>();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>((uint64_t)&v51, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, (uint64_t)&unk_1E1B04878);
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_6:
  swift_release();
  *a4 = v21;
  result = v47;
  a4[1] = v47.n128_u64[0];
  return result;
}

uint64_t (*OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:)(char *a1, char *a2))()
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Value;
  _OWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E0CE4958], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  Value = AGGraphGetValue();
  v9 = *(_OWORD **)Value;
  if (*(_QWORD *)(*(_QWORD *)Value + 16))
  {
    v15 = v9[2];
    v16 = v9[3];
    v17 = v9[4];
    v18 = v9[5];
    v19 = v9[6];
    v20 = v9[7];
    v21 = v9[8];
  }
  else
  {
    static ScrollGeometry.zero.getter();
  }
  v10 = (uint64_t *)AGGraphGetValue();
  v12 = *v10;
  v11 = v10[1];
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 80) = v19;
  *(_OWORD *)(v13 + 96) = v20;
  *(_OWORD *)(v13 + 112) = v21;
  *(_OWORD *)(v13 + 16) = v15;
  *(_OWORD *)(v13 + 32) = v16;
  *(_OWORD *)(v13 + 48) = v17;
  *(_OWORD *)(v13 + 64) = v18;
  *(_BYTE *)(v13 + 128) = v5;
  *(_QWORD *)(v13 + 136) = v6;
  *(_QWORD *)(v13 + 144) = v7;
  *(_QWORD *)(v13 + 152) = v12;
  *(_QWORD *)(v13 + 160) = v11;
  *(_BYTE *)(v13 + 168) = v2;
  *(_QWORD *)(v13 + 176) = v3;
  *(_QWORD *)(v13 + 184) = v4;
  swift_retain();
  return partial apply for closure #1 in OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:);
}

uint64_t closure #1 in OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:)(__int128 *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _OWORD *), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[6];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;

  v17 = a1[1];
  v18 = *a1;
  v15 = a1[3];
  v16 = a1[2];
  v13 = a1[5];
  v14 = a1[4];
  v8 = *((_QWORD *)a1 + 12);
  v9 = *((_QWORD *)a1 + 13);
  ScrollPhaseState.velocity.getter();
  v25 = 0;
  v19[0] = v18;
  v19[1] = v17;
  v19[2] = v16;
  v19[3] = v15;
  v19[4] = v14;
  v19[5] = v13;
  v20 = v8;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  v24 = 0;
  return a3(a5, a2, v19);
}

__n128 protocol witness for ScrollActionProvider.makeOutput(input:) in conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider@<Q0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_QWORD *)a2 = *a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (*protocol witness for ScrollActionProvider.makeAction(oldOutput:newOutput:) in conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider(char *a1, char *a2))()
{
  return OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:)(a1, a2);
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider()
{
  return 0xD000000000000025;
}

void protocol witness for ViewModifier.body(content:) in conformance OnScrollPhaseContextChangeModifier()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

double static OnScrollGeometryChangeModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, _DWORD *a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, _QWORD)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  void (*v7)(_QWORD *__return_ptr, _QWORD, _QWORD);
  int v8;
  void (*v9)(_QWORD *__return_ptr, _QWORD, _QWORD);
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  void (*v14)(_QWORD *__return_ptr, _QWORD, _QWORD);
  void (*v15)(_QWORD *__return_ptr, _QWORD, _QWORD);
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  double result;
  _QWORD v41[5];
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  void (*v58)(_QWORD *__return_ptr, uint64_t, _QWORD);
  _QWORD *v59;
  void (*v60)(_QWORD *__return_ptr, _QWORD, _QWORD);
  int v61;
  char v62;
  int v63;
  void (*v64)(_QWORD *__return_ptr, uint64_t, _QWORD);
  uint64_t v65;
  void (*v66)(_QWORD *__return_ptr, _QWORD, _QWORD);
  int v67;
  void (*v68)(_QWORD *__return_ptr, _QWORD, _QWORD);
  __int128 v69;
  void (*v70)(_QWORD *__return_ptr, _QWORD, _QWORD);
  void (*v71)(_QWORD *__return_ptr, _QWORD, _QWORD);
  __int128 v72;
  unint64_t v73;
  int v74;
  void (*v75)(_QWORD *__return_ptr, _QWORD, _QWORD);
  int v76;
  void (*v77)(_QWORD *__return_ptr, _QWORD, _QWORD);
  __int128 v78;
  void (*v79)(_QWORD *__return_ptr, _QWORD, _QWORD);
  void (*v80)(_QWORD *__return_ptr, _QWORD, _QWORD);
  __int128 v81;
  unint64_t v82;
  int v83;
  uint64_t v84;

  v56 = a6;
  v55 = a5;
  *(_QWORD *)&v57 = a4;
  v58 = a3;
  v59 = a7;
  v84 = *MEMORY[0x1E0C80C00];
  v42 = *a1;
  v7 = *(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))a2;
  v8 = a2[2];
  v9 = (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))*((_QWORD *)a2 + 2);
  v10 = a2[6];
  v11 = a2[7];
  v12 = a2[8];
  v13 = a2[9];
  v14 = (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))*((_QWORD *)a2 + 5);
  v15 = (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))*((_QWORD *)a2 + 6);
  v16 = a2[14];
  v17 = a2[15];
  v18 = a2[16];
  v19 = a2[17];
  v21 = a2[18];
  v20 = a2[19];
  v22 = a2[20];
  v75 = v7;
  v54 = v8;
  v76 = v8;
  v77 = v9;
  v53 = v10;
  *(_QWORD *)&v78 = __PAIR64__(v11, v10);
  v52 = v11;
  v51 = v12;
  *((_QWORD *)&v78 + 1) = __PAIR64__(v13, v12);
  v50 = v13;
  v79 = v14;
  v80 = v15;
  v49 = v16;
  *(_QWORD *)&v81 = __PAIR64__(v17, v16);
  v48 = v17;
  v47 = v18;
  *((_QWORD *)&v81 + 1) = __PAIR64__(v19, v18);
  v46 = v19;
  v45 = v21;
  v82 = __PAIR64__(v20, v21);
  v44 = v20;
  v43 = v22;
  v83 = v22;
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollGeometryPreferenceKey>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<ScrollGeometryPreferenceKey> and conformance _AnyPreferenceKey<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  v66 = v7;
  v67 = v76;
  v68 = v9;
  v69 = v78;
  v70 = v14;
  v71 = v15;
  v72 = v81;
  v73 = v82;
  v74 = v83;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = swift_bridgeObjectRetain();
  v58(&v64, v23, &v66);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)&v24 = v65;
  v58 = v64;
  v66 = v64;
  v57 = v24;
  v67 = v65;
  v25 = PreferencesOutputs.subscript.getter();
  if ((v25 & 0x100000000) == 0)
  {
    v27 = v25;
    LODWORD(v66) = v42;
    type metadata accessor for OnScrollGeometryChangeModifier(255, v55, v56, v26);
    type metadata accessor for _GraphValue();
    v63 = _GraphValue.value.getter();
    v66 = v7;
    v67 = v54;
    v68 = v9;
    *(_QWORD *)&v69 = __PAIR64__(v52, v53);
    *((_QWORD *)&v69 + 1) = __PAIR64__(v50, v51);
    v70 = v14;
    v71 = v15;
    *(_QWORD *)&v72 = __PAIR64__(v48, v49);
    *((_QWORD *)&v72 + 1) = __PAIR64__(v46, v47);
    v73 = __PAIR64__(v44, v45);
    v74 = v43;
    v28 = _ViewInputs.viewPhase.getter();
    v30 = type metadata accessor for OnScrollGeometryChangeModifier.GeometryActionProvider(0, v55, v56, v29);
    v31 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnScrollGeometryChangeModifier<A>.GeometryActionProvider, v30);
    UpdateCycleDetector.init()();
    v60 = v64;
    v61 = v65;
    v62 = BYTE4(v65);
    swift_getAssociatedTypeWitness();
    v32 = static Array._allocateUninitialized(_:)();
    type metadata accessor for ViewGraph();
    MEMORY[0x18D75C5F8]();
    v33 = ScrollActionDispatcher.init(provider:inputs:viewPhase:cycleDetector:oldResetSeed:oldInputs:viewGraph:)((uint64_t)&v63, v27, v28, (uint64_t)&v60, -1, v32, v30, (uint64_t)&v66, v31);
    MEMORY[0x1E0C80A78](v33, v34);
    v36 = type metadata accessor for ScrollActionDispatcher(0, v30, v31, v35);
    v41[2] = v36;
    v41[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollActionDispatcher<A>, v36);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v66, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)v41, v36, MEMORY[0x1E0DEDCE8], v37, MEMORY[0x1E0DEDD18], v38);
    (*(void (**)(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD), uint64_t))(*(_QWORD *)(v36 - 8)
                                                                                                + 8))(&v66, v36);
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v39 = v59;
  *v59 = v58;
  result = *(double *)&v57;
  v39[1] = v57;
  return result;
}

uint64_t OnScrollGeometryChangeModifier.GeometryActionProvider.modifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for OnScrollGeometryChangeModifier(0, a2, a3, a4);
  v4 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v4;
}

uint64_t OnScrollGeometryChangeModifier.GeometryActionProvider.makeOutput(input:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_OWORD *);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[6];
  uint64_t v18;
  uint64_t v19;

  v15 = a1[1];
  v16 = *a1;
  v13 = a1[3];
  v14 = a1[2];
  v11 = a1[5];
  v12 = a1[4];
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  v9 = (void (*)(_OWORD *))OnScrollGeometryChangeModifier.GeometryActionProvider.modifier.getter(a2, a3, a4, a4);
  swift_release();
  v17[0] = v16;
  v17[1] = v15;
  v17[2] = v14;
  v17[3] = v13;
  v17[4] = v12;
  v17[5] = v11;
  v18 = v7;
  v19 = v8;
  v9(v17);
  swift_release();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a5, 0, 1, a3);
}

uint64_t (*OnScrollGeometryChangeModifier.GeometryActionProvider.makeAction(oldOutput:newOutput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;

  v9 = *(_QWORD *)(a4 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v29 - v14;
  OnScrollGeometryChangeModifier.GeometryActionProvider.modifier.getter(v16, v17, v18, v17);
  v30 = v19;
  v21 = v20;
  swift_release();
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v22(v15, a1, a4);
  v22(v11, a2, a4);
  v23 = *(unsigned __int8 *)(v9 + 80);
  v24 = (v23 + 48) & ~v23;
  v25 = (v10 + v23 + v24) & ~v23;
  v26 = (char *)swift_allocObject();
  *((_QWORD *)v26 + 2) = a4;
  *((_QWORD *)v26 + 3) = a5;
  *((_QWORD *)v26 + 4) = v30;
  *((_QWORD *)v26 + 5) = v21;
  v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v27(&v26[v24], v15, a4);
  v27(&v26[v25], v11, a4);
  return partial apply for closure #1 in OnScrollGeometryChangeModifier.GeometryActionProvider.makeAction(oldOutput:newOutput:);
}

uint64_t protocol witness for ScrollActionProvider.makeOutput(input:) in conformance OnScrollGeometryChangeModifier<A>.GeometryActionProvider@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v3;

  return OnScrollGeometryChangeModifier.GeometryActionProvider.makeOutput(input:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t (*protocol witness for ScrollActionProvider.makeAction(oldOutput:newOutput:) in conformance OnScrollGeometryChangeModifier<A>.GeometryActionProvider(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  unsigned int *v3;

  return OnScrollGeometryChangeModifier.GeometryActionProvider.makeAction(oldOutput:newOutput:)(a1, a2, *v3, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OnScrollGeometryChangeModifier<A>.GeometryActionProvider()
{
  return 0xD000000000000021;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OnScrollGeometryChangeModifier<A>@<D0>(int *a1@<X0>, _DWORD *a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, _QWORD)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return static OnScrollGeometryChangeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OnScrollGeometryChangeModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnScrollGeometryChangeModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

__n128 ScrollPhaseChangeContext.geometry.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  result = *(__n128 *)(v1 + 96);
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t ScrollPhaseChangeContext.velocity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t View.onScrollPhaseChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return View.onScrollPhaseChange(_:)(a1, a2, a3, a4, (uint64_t)&type metadata for OnScrollPhaseChangeModifier);
}

{
  return View.onScrollPhaseChange(_:)(a1, a2, a3, a4, (uint64_t)&type metadata for OnScrollPhaseContextChangeModifier);
}

uint64_t View.onScrollPhaseChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a2;
  return MEMORY[0x18D75B4AC](v6, a3, a5);
}

uint64_t View.onScrollGeometryChange<A>(for:of:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  _QWORD v13[4];

  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a5;
  v11 = type metadata accessor for OnScrollGeometryChangeModifier(0, a7, a9, a4);
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B4AC](v13, a6, v11, a8);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for OnScrollGeometryChangeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OnScrollGeometryChangeModifier);
}

BOOL ScrollEventState.isTracking.getter()
{
  unsigned __int8 *v0;

  return *v0 == 1;
}

BOOL ScrollEventState.isDragging.getter()
{
  unsigned __int8 *v0;

  return *v0 == 2;
}

BOOL ScrollEventState.isDecelerating.getter()
{
  unsigned __int8 *v0;

  return *v0 == 3;
}

BOOL ScrollEventState.isAnimating.getter()
{
  unsigned __int8 *v0;

  return *v0 == 4;
}

uint64_t static ScrollEventStateReader._makeView(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t View;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 7);
  v22 = *((_DWORD *)a2 + 8);
  v23 = *((_DWORD *)a2 + 6);
  v21 = *((_DWORD *)a2 + 9);
  v24 = *((_DWORD *)a2 + 20);
  v30 = *a2;
  v8 = v30;
  v31 = v9;
  v32 = v10;
  v33 = v23;
  v34 = v11;
  v35 = v22;
  v36 = v21;
  v20 = *(_OWORD *)(a2 + 5);
  *(_QWORD *)&v37 = a2[5];
  v12 = _GraphInputs.scrollPhaseState.getter();
  LODWORD(v30) = v7;
  type metadata accessor for ScrollEventStateReader(255, a3, a4, v13);
  type metadata accessor for _GraphValue();
  v19 = *(_OWORD *)(a2 + 7);
  v14 = a2[9];
  LODWORD(v30) = _GraphValue.value.getter();
  HIDWORD(v30) = v12;
  v27 = a3;
  View = type metadata accessor for ScrollEventStateReader.MakeView(0, a3, a4, v15);
  v29 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollEventStateReader<A>.MakeView, View);
  v16 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v30, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v26, View, MEMORY[0x1E0DEDCE8], v16, MEMORY[0x1E0DEDD18], v17);
  _GraphValue.init(_:)();
  v30 = v8;
  v31 = v9;
  v32 = v10;
  v33 = v23;
  v34 = v11;
  v35 = v22;
  v36 = v21;
  v37 = v20;
  v38 = v19;
  v39 = v14;
  v40 = v24;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t))(a4 + 24))(&v25, &v30, a3, a4);
}

uint64_t static ScrollEventStateReader._viewListCount(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  __int128 v6;
  int v7;
  uint64_t v8;

  v3 = *((_DWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 3);
  v6 = *a1;
  v7 = v3;
  v8 = v4;
  return (*(uint64_t (**)(__int128 *))(a3 + 40))(&v6);
}

uint64_t ScrollEventStateReader.MakeView.view.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for ScrollEventStateReader(0, a1, a2, a3);
  Value = (uint64_t *)AGGraphGetValue();
  v7 = *Value;
  v6 = Value[1];
  *a4 = v7;
  a4[1] = v6;
  return swift_retain();
}

uint64_t ScrollEventStateReader.MakeView.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t View;

  View = type metadata accessor for ScrollEventStateReader.MakeView(0, a2, a3, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollEventStateReader<A>.MakeView, View);
  return Rule.withObservation<A>(do:)();
}

uint64_t closure #1 in ScrollEventStateReader.MakeView.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v5)(_BYTE *);
  _BYTE v7[8];
  __int128 v8;
  _BYTE v9[8];
  __int128 v10;
  void (*v11)(_BYTE *);

  ScrollEventStateReader.MakeView.view.getter(a2, a3, a4, &v11);
  v5 = v11;
  ScrollEventStateReader.MakeView.resolvedState.getter(a1, (uint64_t)v9);
  v7[0] = v9[0];
  v8 = v10;
  v5(v7);
  return swift_release();
}

__n128 ScrollEventStateReader.MakeView.resolvedState.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *Value;
  int v4;
  char *v5;
  __n128 result;
  char v7;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1) || (Value = (char *)AGGraphGetValue(), v4 = *Value, v4 == 5))
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    v5 = &v7;
    ScrollPhaseState.init(phase:velocity:)();
    LOBYTE(v4) = v7;
  }
  else
  {
    v5 = Value;
  }
  result = *(__n128 *)(v5 + 8);
  *(_BYTE *)a2 = v4;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollEventStateReader<A>.MakeView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return ScrollEventStateReader.MakeView.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ScrollEventStateReader<A>(int *a1, uint64_t *a2, uint64_t a3)
{
  return static ScrollEventStateReader._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ScrollEventStateReader<A>(__int128 *a1, uint64_t a2)
{
  return static ScrollEventStateReader._viewListCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

void protocol witness for View.body.getter in conformance ScrollEventStateReader<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollEventStateReader<A>, a1);
  specialized PrimitiveView.body.getter();
}

double ScrollGestureState_V1.Binding.wrappedValue.getter@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;
  __int128 v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ScrollPhaseState>, MEMORY[0x1E0CE3390], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v3);
  *(_BYTE *)a1 = v3;
  result = *(double *)&v4;
  *(_OWORD *)(a1 + 8) = v4;
  return result;
}

double key path getter for ScrollGestureState_V1.Binding.wrappedValue : <A>ScrollGestureState_V1<A>.Binding@<D0>(uint64_t a1@<X8>)
{
  double result;
  _BYTE v3[8];
  __int128 v4;

  ScrollGestureState_V1.Binding.wrappedValue.getter((uint64_t)v3);
  *(_BYTE *)a1 = v3[0];
  result = *(double *)&v4;
  *(_OWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for ScrollGestureState_V1.Binding.wrappedValue : <A>ScrollGestureState_V1<A>.Binding()
{
  return ScrollGestureState_V1.Binding.wrappedValue.setter();
}

uint64_t ScrollGestureState_V1.Binding.wrappedValue.setter()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t ScrollGestureState_V1.Binding.projectedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  swift_retain();
  return swift_retain();
}

void ScrollGestureState_V1.wrappedValue.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ScrollGestureState_V1.projectedValue.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ScrollGestureStateValue_V1.velocity.getter()
{
  return ScrollPhaseState.velocity.getter();
}

uint64_t static ScrollGestureStateValue_V1.== infix(_:_:)()
{
  return static ScrollPhaseState.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ScrollGestureStateValue_V1()
{
  return static ScrollPhaseState.== infix(_:_:)() & 1;
}

uint64_t View.scrollGestureState<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v5;

  static os_log_type_t.fault.getter();
  v5 = (void *)static Log.runtimeIssuesLog.getter();
  os_log(_:dso:log:_:_:)();

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t type metadata accessor for ScrollEventStateReader.MakeView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollEventStateReader.MakeView);
}

_UNKNOWN **base witness table accessor for View in ScrollEventStateReader<A>()
{
  return &protocol witness table for ScrollEventStateReader<A>;
}

uint64_t sub_1876A0E80()
{
  return 8;
}

_QWORD *sub_1876A0E8C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollPhaseChangeContext(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 129))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScrollPhaseChangeContext(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 128) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 129) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ScrollPhaseChangeContext()
{
  return &type metadata for ScrollPhaseChangeContext;
}

uint64_t type metadata accessor for ScrollGestureState_V1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollGestureState_V1);
}

uint64_t initializeWithCopy for ScrollGestureState_V1.Binding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollGestureState_V1.Binding(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ScrollGestureState_V1.Binding(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t type metadata accessor for ScrollGestureState_V1.Binding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollGestureState_V1.Binding);
}

uint64_t getEnumTagSinglePayload for ScrollEventState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && a1[24])
    return (*(_DWORD *)a1 + 252);
  v3 = *a1;
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollEventState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollGestureStateValue_V1()
{
  return &type metadata for ScrollGestureStateValue_V1;
}

uint64_t sub_1876A10D4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for OnScrollPhaseChangeModifier, (uint64_t)&protocol witness table for OnScrollPhaseChangeModifier);
}

uint64_t sub_1876A10E8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for OnScrollPhaseContextChangeModifier, (uint64_t)&protocol witness table for OnScrollPhaseContextChangeModifier);
}

uint64_t sub_1876A10FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for OnScrollGeometryChangeModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for OnScrollGeometryChangeModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t sub_1876A115C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

ValueMetadata *type metadata accessor for OnScrollPhaseContextChangeModifier()
{
  return &type metadata for OnScrollPhaseContextChangeModifier;
}

ValueMetadata *type metadata accessor for OnScrollPhaseChangeModifier()
{
  return &type metadata for OnScrollPhaseChangeModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnScrollPhaseChangeModifier()
{
  return &protocol witness table for OnScrollPhaseChangeModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnScrollPhaseContextChangeModifier()
{
  return &protocol witness table for OnScrollPhaseContextChangeModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnScrollGeometryChangeModifier<A>()
{
  return &protocol witness table for OnScrollGeometryChangeModifier<A>;
}

void base witness table accessor for _AttributeBody in ScrollEventStateReader<A>.MakeView()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in ScrollEventStateReader.MakeView.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return closure #1 in ScrollEventStateReader.MakeView.value.getter(v4[4], v4[2], v4[3], a4);
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<ScrollPhasePreferenceKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollPhasePreferenceKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollPhasePreferenceKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollPhasePreferenceKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollPhasePreferenceKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider;
  if (!lazy protocol witness table cache variable for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnScrollPhaseChangeModifier.PhaseActionProvider, &unk_1E1AF3680);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider;
  if (!lazy protocol witness table cache variable for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnScrollPhaseChangeModifier.PhaseActionProvider, &unk_1E1AF3680);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider);
  }
  return result;
}

uint64_t type metadata accessor for ScrollActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollActionDispatcher);
}

unint64_t lazy protocol witness table accessor for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>;
  if (!lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>)
  {
    type metadata accessor for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(255, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider, (uint64_t)&unk_1E1AF3680);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollActionDispatcher<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>);
  }
  return result;
}

uint64_t sub_1876A12E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s7SwiftUI27OnScrollPhaseChangeModifierV0E14ActionProvider33_1176EEC1E4A702DD8DB07F9D0C463078LLV04makeH09oldOutput03newT0yycAA0dE0O_AKtFyycfU_TA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 32), *(unsigned __int8 *)(v0 + 33));
}

uint64_t partial apply for closure #1 in ScrollActionDispatcher.updateValue()(uint64_t a1)
{
  return partial apply for closure #1 in ScrollActionDispatcher.updateValue()(a1);
}

{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 24) + 48))(a1, *(_QWORD *)(v1 + 16));
}

uint64_t _s7SwiftUI22ScrollActionDispatcher33_1176EEC1E4A702DD8DB07F9D0C463078LLV11updateValueyyFSSyXEfu0_TA_0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1876A13A4()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1876A13D0()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<ScrollGeometryPreferenceKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollGeometryPreferenceKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollGeometryPreferenceKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<ScrollGeometryPreferenceKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollGeometryPreferenceKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

void type metadata accessor for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for ScrollActionDispatcher(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider;
  if (!lazy protocol witness table cache variable for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, &unk_1E1B04878);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider;
  if (!lazy protocol witness table cache variable for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, &unk_1E1B04878);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider> and conformance ScrollActionDispatcher<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider> and conformance ScrollActionDispatcher<A>;
  if (!lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider> and conformance ScrollActionDispatcher<A>)
  {
    type metadata accessor for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(255, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider, (uint64_t)&unk_1E1B04878);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollActionDispatcher<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseContextChangeModifier.PhaseContextActionProvider> and conformance ScrollActionDispatcher<A>);
  }
  return result;
}

uint64_t outlined destroy of ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_1876A158C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:)()
{
  uint64_t v0;

  return closure #1 in OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:)((__int128 *)(v0 + 16), *(unsigned __int8 *)(v0 + 128), *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(v0 + 152), *(_QWORD *)(v0 + 160), *(unsigned __int8 *)(v0 + 168));
}

uint64_t type metadata accessor for OnScrollGeometryChangeModifier.GeometryActionProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OnScrollGeometryChangeModifier.GeometryActionProvider);
}

void *type metadata accessor for OnScrollPhaseContextChangeModifier.PhaseContextActionProvider()
{
  return &unk_1E1B04878;
}

void *type metadata accessor for OnScrollPhaseChangeModifier.PhaseActionProvider()
{
  return &unk_1E1AF3680;
}

uint64_t type metadata completion function for ScrollActionDispatcher()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ScrollActionDispatcher(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for ScrollActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v10 = *v9;
  v11 = (_QWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v12 = (_QWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = *(_QWORD *)((char *)v12 + 5);
  *v11 = *v12;
  *(_QWORD *)((char *)v11 + 5) = v13;
  v14 = (_DWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFCLL);
  v15 = (_DWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFCLL);
  *v14 = *v15;
  *(_QWORD *)(((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  return a1;
}

uint64_t assignWithCopy for ScrollActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = ((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = ((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_DWORD *)(v11 + 4) = *(_DWORD *)(v12 + 4);
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_BYTE *)(v11 + 12) = *(_BYTE *)(v12 + 12);
  v13 = (_DWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFCLL);
  v14 = (_DWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFCLL);
  *v13 = *v14;
  *(_QWORD *)(((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for ScrollActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v10 = *v9;
  v11 = (_QWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v12 = (_QWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = *(_QWORD *)((char *)v12 + 5);
  *v11 = *v12;
  *(_QWORD *)((char *)v11 + 5) = v13;
  v14 = (_DWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFCLL);
  v15 = (_DWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFCLL);
  *v14 = *v15;
  *(_QWORD *)(((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFF8);
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithTake for ScrollActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = ((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = ((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_DWORD *)(v11 + 4) = *(_DWORD *)(v12 + 4);
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(_BYTE *)(v11 + 12) = *(_BYTE *)(v12 + 12);
  v13 = (_DWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFCLL);
  v14 = (_DWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFCLL);
  *v13 = *v14;
  *(_QWORD *)(((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollActionDispatcher(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((((((((a1 + v7 + 3) & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL)
                       + 27) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1876A1AB8 + 4 * byte_187C4DDA0[v10]))();
  }
}

void storeEnumTagSinglePayload for ScrollActionDispatcher(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((((*(_DWORD *)(v5 + 64) + 3) & 0xFFFFFFFC) + 7) & 0xFFFFFFFC) + 23) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((((*(_DWORD *)(v5 + 64) + 3) & 0xFFFFFFFC) + 7) & 0xFFFFFFFC) + 23) & 0xFFFFFFFC) + 11) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((((*(_QWORD *)(v5 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFFCLL)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1876A1C68()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1876A1CF4);
}

void sub_1876A1C70(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1876A1C78);
  JUMPOUT(0x1876A1CF4);
}

void sub_1876A1CD0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876A1CF4);
}

void sub_1876A1CD8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876A1CF4);
}

uint64_t sub_1876A1CE0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1876A1CF4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1876A1CF0);
    JUMPOUT(0x1876A1CECLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void base witness table accessor for _AttributeBody in ScrollActionDispatcher<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t lazy protocol witness table accessor for type ScrollGeometryState and conformance ScrollGeometryState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollGeometryState and conformance ScrollGeometryState;
  if (!lazy protocol witness table cache variable for type ScrollGeometryState and conformance ScrollGeometryState)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4960], MEMORY[0x1E0CE4958]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryState and conformance ScrollGeometryState);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for OnScrollGeometryChangeModifier<A>.GeometryActionProvider(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnScrollGeometryChangeModifier<A>.GeometryActionProvider);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollPhaseState and conformance ScrollPhaseState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollPhaseState and conformance ScrollPhaseState;
  if (!lazy protocol witness table cache variable for type ScrollPhaseState and conformance ScrollPhaseState)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3398], MEMORY[0x1E0CE3390]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollPhaseState and conformance ScrollPhaseState);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for OnScrollPhaseContextChangeModifier.PhaseContextActionProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type OnScrollPhaseContextChangeModifier.PhaseContextActionProvider and conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollPhase and conformance ScrollPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollPhase and conformance ScrollPhase;
  if (!lazy protocol witness table cache variable for type ScrollPhase and conformance ScrollPhase)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1258], MEMORY[0x1E0CE1250]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollPhase and conformance ScrollPhase);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for OnScrollPhaseChangeModifier.PhaseActionProvider(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1876A1EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3;
  swift_release();
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v0 + v4, v1);
  v6(v0 + v5, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnScrollGeometryChangeModifier.GeometryActionProvider.makeAction(oldOutput:newOutput:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 32))(v0 + ((v2 + 48) & ~v2), v0 + ((*(_QWORD *)(v1 + 64) + v2 + ((v2 + 48) & ~v2)) & ~v2));
}

uint64_t SliderMark<>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v21[0] = a3;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v10;
  v12 = v10[1];
  v13 = v10[2];
  v14 = v10[3];
  v18 = type metadata accessor for SliderMark(0, v15, v16, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1 + *(int *)(v18 + 36), a2);
  outlined copy of Text?(v11, v12, v13, v14);
  outlined copy of Text?(v11, v12, v13, v14);
  lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
  v19 = v21[1];
  *a4 = v11;
  a4[1] = v12;
  a4[2] = v13;
  a4[3] = v14;
  a4[4] = v19;
  return outlined consume of Text?(v11, v12, v13, v14);
}

uint64_t SliderMark.normalized<>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, double);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;

  v50 = a3;
  v52 = a4;
  v6 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v51 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v49 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v44 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v53 = (char *)&v44 - v16;
  v48 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v44 - v24;
  v27 = *(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16);
  v27((char *)&v44 - v24, a1, v6, v23);
  v28 = type metadata accessor for ClosedRange();
  ((void (*)(char *, uint64_t, uint64_t))v27)(v20, a1 + *(int *)(v28 + 36), v6);
  v30 = *v4;
  v29 = v4[1];
  v31 = v4[3];
  v46 = v4[2];
  v47 = v29;
  v45 = v31;
  outlined copy of Text?(v30, v29, v46, v31);
  dispatch thunk of Strideable.distance(to:)();
  v32 = v49;
  dispatch thunk of Strideable.distance(to:)();
  v33 = v50;
  dispatch thunk of static FloatingPoint./ infix(_:_:)();
  v34 = v51;
  v35 = *(void (**)(char *, uint64_t))(v51 + 8);
  v35(v32, AssociatedTypeWitness);
  v35(v13, AssociatedTypeWitness);
  v36 = *(void (**)(char *, uint64_t))(v48 + 8);
  v36(v20, v6);
  v36(v25, v6);
  v37 = v52;
  v38 = v47;
  *v52 = v30;
  v37[1] = v38;
  v39 = v45;
  v37[2] = v46;
  v37[3] = v39;
  v40 = v37;
  v42 = type metadata accessor for SliderMark(0, AssociatedTypeWitness, v33, v41);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v34 + 32))((char *)v40 + *(int *)(v42 + 36), v53, AssociatedTypeWitness);
}

void Slider.init<A>(value:in:label:minimumValueLabel:maximumValueLabel:marks:onEditingChanged:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Slider.init<A>(value:in:step:label:minimumValueLabel:maximumValueLabel:marks:onEditingChanged:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Slider<>.init<A>(value:in:label:marks:onEditingChanged:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Slider<>.init<A>(value:in:step:label:marks:onEditingChanged:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t SliderMark.ID.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static SliderMark.ID.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int SliderMark.ID.hashValue.getter()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SliderMark<A>.ID()
{
  Hasher.init(_seed:)();
  SliderMark.ID.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SliderMark<A>.ID()
{
  return static SliderMark.ID.== infix(_:_:)();
}

uint64_t SliderMark.init(_:label:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  char *v12;

  *a5 = a2();
  a5[1] = v9;
  a5[2] = v10 & 1;
  a5[3] = v11;
  v12 = (char *)a5 + *(int *)(type metadata accessor for SliderMark(0, a3, a4, v11) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v12, a1, a3);
}

uint64_t SliderMark.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;

  v8 = type metadata accessor for SliderMark(0, a2, a3, a4);
  *(_OWORD *)a5 = 0u;
  *((_OWORD *)a5 + 1) = 0u;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(&a5[*(int *)(v8 + 36)], a1, a2);
}

uint64_t SliderMark.id.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3 + *(int *)(v7 + 36), v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v9, v5);
}

uint64_t static SliderMark.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SliderMark(0, a3, a4, a4);
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

uint64_t type metadata accessor for SliderMark(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SliderMark);
}

uint64_t static SliderMark.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;

  v4 = a4;
  v5 = a3;
  v6 = a1[3];
  v7 = a2[3];
  if (v6)
  {
    if (v7)
    {
      v8 = *a1;
      v9 = a1[1];
      v10 = a1[2];
      v12 = *a2;
      v11 = a2[1];
      v13 = a2[2];
      outlined copy of Text?(*a2, v11, v13, v7);
      v17 = v8;
      outlined copy of Text?(v8, v9, v10, v6);
      LOBYTE(v8) = static Text.== infix(_:_:)();
      v14 = v11;
      v15 = v13;
      v4 = a4;
      v5 = a3;
      outlined consume of Text?(v12, v14, v15, v7);
      outlined consume of Text?(v17, v9, v10, v6);
      if ((v8 & 1) != 0)
        goto LABEL_4;
    }
  }
  else if (!v7)
  {
LABEL_4:
    type metadata accessor for SliderMark(0, v5, v4, a4);
    return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
  }
  return 0;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance SliderMark<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static SliderMark.< infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SliderMark<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SliderMark.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SliderMark.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v10 = *(_QWORD *)(a4 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v14, v15, v11);
  *a6 = closure #2 in LabeledContent<>.init(_:content:)();
  a6[1] = v16;
  a6[2] = v17 & 1;
  a6[3] = v18;
  v19 = type metadata accessor for SliderMark(0, a4, a5, v18);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)a6 + *(int *)(v19 + 36), v13, a4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, a4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SliderMark.init<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v12 + 16))(v15, v13);
  *a6 = closure #2 in LabeledContent<>.init<A>(_:content:)(a1);
  a6[1] = v16;
  a6[2] = v17 & 1;
  a6[3] = v18;
  v19 = type metadata accessor for SliderMark(0, a3, a5, v18);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))((char *)a6 + *(int *)(v19 + 36), v15, a3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

uint64_t static SliderMarkBuilder.buildBlock(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for SliderMark(255, a2, a3, a4);
  v5 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SliderMark<A>, v4);
  return Sequence<>.sorted()();
}

void base witness table accessor for Equatable in SliderMark<A>.ID()
{
  JUMPOUT(0x18D75FFDCLL);
}

void associated type witness table accessor for Identifiable.ID : Hashable in SliderMark<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Equatable in SliderMark<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata completion function for SliderMark()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_OWORD *initializeBufferWithCopyOfBuffer for SliderMark(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 32) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (_OWORD *)(v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 24);
    if (v11 < 0xFFFFFFFF)
    {
      v15 = *(_OWORD *)(a2 + 16);
      *a1 = *(_OWORD *)a2;
      a1[1] = v15;
    }
    else
    {
      v12 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v13, v14);
      *(_QWORD *)v4 = v12;
      *((_QWORD *)v4 + 1) = v13;
      *((_BYTE *)v4 + 16) = v14;
      *((_QWORD *)v4 + 3) = v11;
      swift_bridgeObjectRetain();
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16))(((unint64_t)v4 + v7 + 32) & ~v7, (a2 + v7 + 32) & ~v7, v5);
  }
  return v4;
}

uint64_t destroy for SliderMark(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for SliderMark(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;

  v6 = a2[3];
  if (v6 < 0xFFFFFFFF)
  {
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = *((_BYTE *)a2 + 16);
    outlined copy of Text.Storage(*a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 16))((*(unsigned __int8 *)(v11 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t assignWithCopy for SliderMark(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v14, v15);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v14;
      *(_BYTE *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v16;
    goto LABEL_8;
  }
  if (v6 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 24))((*(unsigned __int8 *)(v17 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(unsigned __int8 *)(v17 + 80) + 32 + a2) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

_OWORD *initializeWithTake for SliderMark(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithTake for SliderMark(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;

  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    goto LABEL_6;
  }
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v7;
  outlined consume of Text.Storage(v8, v9, v10);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
LABEL_6:
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))((*(unsigned __int8 *)(v12 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(unsigned __int8 *)(v12 + 80) + 32 + a2) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SliderMark(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 32) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0x7FFFFFFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 32) & ~v7);
      v15 = *(_QWORD *)(a1 + 24);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      if ((v15 + 1) >= 2)
        return v15;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876A3054 + 4 * byte_187C4E3D0[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for SliderMark(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t getEnumTagSinglePayload for SliderMark.ID(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876A3394 + 4 * byte_187C4E3DE[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for SliderMark.ID(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for SliderMark.ID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SliderMark.ID);
}

uint64_t type metadata accessor for SliderMarkBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SliderMarkBuilder);
}

uint64_t destroy for SceneID(uint64_t a1)
{
  return outlined consume of SceneID(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for SceneID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of SceneID(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SceneID(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of SceneID(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of SceneID(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SceneID(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of SceneID(v4, v5, v6);
  return a1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneID()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  char v3;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  else
  {
    String.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SceneID()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    Hasher._combine(_:)(*(_QWORD *)v0);
    Hasher._combine(_:)(v1);
  }
  else
  {
    String.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneID()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  char v3;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  else
  {
    String.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SceneID(uint64_t a1, uint64_t a2)
{
  return specialized static SceneID.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance SceneIDKey(uint64_t a1, uint64_t a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t specialized static SceneID.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v8;
  char v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a5;
  v8 = a2;
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) != 0)
    {
      v10 = a1 == a4 && a2 == a5;
      return v10 & 1;
    }
    v18 = _typeName(_:qualified:)();
    v20 = v11;
    v12._countAndFlagsBits = 45;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v8 = v20;
    swift_bridgeObjectRetain();
    if (v18 != a4)
      goto LABEL_15;
LABEL_10:
    if (v8 == v6)
    {
      swift_bridgeObjectRelease_n();
      v10 = 1;
      return v10 & 1;
    }
LABEL_15:
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v10 & 1;
  }
  if ((a6 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v19 = _typeName(_:qualified:)();
    v21 = v14;
    v15._countAndFlagsBits = 45;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v6 = v21;
    if (a1 != v19)
      goto LABEL_15;
    goto LABEL_10;
  }
  if (a1 == a4 && a2 == a5)
  {
    v10 = 1;
    return v10 & 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

ValueMetadata *type metadata accessor for SceneIDKey()
{
  return &type metadata for SceneIDKey;
}

ValueMetadata *type metadata accessor for WidgetBorderedProminentButtonStyle()
{
  return &type metadata for WidgetBorderedProminentButtonStyle;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in WidgetBorderedProminentButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ResolvedBorderedButton.init(configuration:isProminent:)@<X0>(char *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v5;
  char v6;
  char v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  *(_QWORD *)a3 = swift_getKeyPath();
  *(_BYTE *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = swift_getKeyPath();
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = swift_getKeyPath();
  *(_BYTE *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = swift_getKeyPath();
  *(_BYTE *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = swift_getKeyPath();
  *(_WORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = swift_getKeyPath();
  *(_BYTE *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 89) = v5;
  *(_BYTE *)(a3 + 90) = v6;
  *(_BYTE *)(a3 + 91) = v7;
  *(_BYTE *)(a3 + 92) = a2;
  KeyPath = swift_getKeyPath();
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  *(_QWORD *)(a3 + 96) = KeyPath;
  *(_BYTE *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 112) = v9;
  *(_WORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = v10;
  *(_BYTE *)(a3 + 152) = 0;
  result = static Color.secondarySystemFill.getter();
  *(_QWORD *)(a3 + 160) = result;
  return result;
}

double protocol witness for ButtonStyle.makeBody(configuration:) in conformance WidgetBorderedButtonStyle@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for ButtonStyle.makeBody(configuration:) in conformance WidgetBorderedButtonStyle(a1, 0, a2).n128_u64[0];
  return result;
}

double protocol witness for ButtonStyle.makeBody(configuration:) in conformance WidgetBorderedProminentButtonStyle@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for ButtonStyle.makeBody(configuration:) in conformance WidgetBorderedButtonStyle(a1, 1, a2).n128_u64[0];
  return result;
}

__n128 protocol witness for ButtonStyle.makeBody(configuration:) in conformance WidgetBorderedButtonStyle@<Q0>(char *a1@<X0>, char a2@<W3>, uint64_t a3@<X8>)
{
  char v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  char v11[3];
  _OWORD v12[10];
  uint64_t v13;

  v4 = a1[1];
  v5 = a1[2];
  v11[0] = *a1;
  v11[1] = v4;
  v11[2] = v5;
  ResolvedBorderedButton.init(configuration:isProminent:)(v11, a2, (uint64_t)v12);
  v6 = v12[9];
  *(_OWORD *)(a3 + 128) = v12[8];
  *(_OWORD *)(a3 + 144) = v6;
  *(_QWORD *)(a3 + 160) = v13;
  v7 = v12[5];
  *(_OWORD *)(a3 + 64) = v12[4];
  *(_OWORD *)(a3 + 80) = v7;
  v8 = v12[7];
  *(_OWORD *)(a3 + 96) = v12[6];
  *(_OWORD *)(a3 + 112) = v8;
  v9 = v12[1];
  *(_OWORD *)a3 = v12[0];
  *(_OWORD *)(a3 + 16) = v9;
  result = (__n128)v12[3];
  *(_OWORD *)(a3 + 32) = v12[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in WidgetBorderedButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 ResolvedBorderedButton.body.getter@<Q0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  double v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  __n128 result;
  uint64_t v57;
  double v58;
  __int128 v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  char v67;
  __int128 v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  char v72;
  char v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v3 = v1[9];
  v98 = v1[8];
  v99 = v3;
  v100 = *((_QWORD *)v1 + 20);
  v4 = v1[5];
  v94 = v1[4];
  v95 = v4;
  v5 = v1[7];
  v96 = v1[6];
  v97 = v5;
  v6 = v1[1];
  v90 = *v1;
  v91 = v6;
  v7 = v1[3];
  v92 = v1[2];
  v93 = v7;
  v8 = static VerticalAlignment.center.getter();
  v9 = v1[8];
  v10 = v1[9];
  v11 = v1[6];
  v86 = v1[7];
  v87 = v9;
  v88 = v10;
  v12 = v1[4];
  v13 = v1[5];
  v14 = v1[2];
  v82 = v1[3];
  v83 = v12;
  v84 = v13;
  v85 = v11;
  v15 = v1[1];
  v79 = *v1;
  v89 = *((_QWORD *)v1 + 20);
  v80 = v15;
  v81 = v14;
  ResolvedBorderedButton.specs.getter((uint64_t)v66);
  v16 = v68;
  v17 = v69;
  v18 = v70;
  outlined copy of BorderedButtonColorSpec.LabelStyle(v69);
  swift_release();
  outlined consume of Material?(v16);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v17);
  v86 = v97;
  v87 = v98;
  v88 = v99;
  v82 = v93;
  v83 = v94;
  v84 = v95;
  v85 = v96;
  v79 = v90;
  v89 = v100;
  v80 = v91;
  v81 = v92;
  ResolvedBorderedButton.specs.getter((uint64_t)v66);
  v19 = v68;
  v20 = v69;
  v21 = v71;
  swift_release();
  outlined consume of Material?(v19);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v20);
  static UnitPoint.center.getter();
  v23 = v22;
  v25 = v24;
  KeyPath = swift_getKeyPath();
  v27 = v90;
  LOBYTE(v20) = BYTE8(v90);
  outlined retain of ResolvedBorderedButton((uint64_t)&v90);
  outlined copy of Environment<Bool>.Content(v27, v20);
  specialized Environment.wrappedValue.getter(v27, v20, &v79);
  outlined consume of Environment<Bool>.Content(v27, v20);
  if (v79 < 2u)
    v28 = 5;
  else
    v28 = 6;
  LOBYTE(v79) = v28;
  LOBYTE(v66[0]) = 4;
  static Font.Weight.semibold.getter();
  v29 = static Font.system(_:design:weight:)();
  outlined release of ResolvedBorderedButton((uint64_t)&v90);
  v30 = v94;
  v31 = BYTE8(v94);
  v32 = BYTE9(v94);
  outlined retain of ResolvedBorderedButton((uint64_t)&v90);
  outlined copy of Environment<CGFloat?>.Content(v30, v31, v32);
  specialized Environment.wrappedValue.getter(v30, v31 | (v32 << 8), (uint64_t)&v79);
  outlined consume of Environment<CGFloat?>.Content(v30, v31, v32);
  v64 = v23;
  v65 = v21;
  v63 = v25;
  v61 = v29;
  v62 = KeyPath;
  if (BYTE8(v79) == 1 && (unint64_t)v79 >= 3)
  {
    v33 = v8;
    v86 = v97;
    v87 = v98;
    v88 = v99;
    v82 = v93;
    v83 = v94;
    v84 = v95;
    v85 = v96;
    v79 = v90;
    v89 = v100;
    v80 = v91;
    v81 = v92;
    ResolvedBorderedButton.circleButtonPadding.getter();
  }
  else
  {
    v33 = v8;
    *(_QWORD *)&v79 = v96;
    BYTE8(v79) = BYTE8(v96);
    v80 = v97;
    *(_QWORD *)&v81 = v98;
    WORD4(v81) = WORD4(v98);
    *(_QWORD *)&v82 = v99;
    BYTE8(v82) = BYTE8(v99);
    v34 = BorderedButtonSpec.padding.getter();
  }
  v58 = v34;
  v38 = v35;
  v39 = v36;
  v40 = v37;
  outlined release of ResolvedBorderedButton((uint64_t)&v90);
  v42 = static Edge.Set.all.getter();
  v86 = v97;
  v87 = v98;
  v88 = v99;
  v82 = v93;
  v83 = v94;
  v84 = v95;
  v85 = v96;
  v79 = v90;
  v78 = 1;
  v77 = 0;
  v89 = v100;
  v80 = v91;
  v81 = v92;
  ResolvedBorderedButton.background.getter((uint64_t)v66);
  v43 = v66[0];
  v44 = v66[1];
  v45 = v67;
  v46 = v69;
  v47 = v70;
  v48 = v71;
  v49 = v72;
  v50 = v73;
  v59 = v68;
  v60 = v74;
  v52 = v75;
  v51 = v76;
  v53 = static Alignment.center.getter();
  v54 = v78;
  v55 = v77;
  *(_QWORD *)a1 = v33;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = v54;
  *(_QWORD *)(a1 + 24) = v17;
  v41 = v18;
  *(float *)(a1 + 32) = v41;
  *(_QWORD *)(a1 + 40) = v65;
  *(_QWORD *)(a1 + 48) = v65;
  *(_QWORD *)(a1 + 56) = v64;
  *(_QWORD *)(a1 + 64) = v63;
  *(_QWORD *)(a1 + 72) = v62;
  *(_QWORD *)(a1 + 80) = v61;
  *(_BYTE *)(a1 + 88) = v42;
  *(double *)(a1 + 96) = v58;
  *(_QWORD *)(a1 + 104) = v38;
  *(_QWORD *)(a1 + 112) = v39;
  *(_QWORD *)(a1 + 120) = v40;
  *(_BYTE *)(a1 + 128) = v55;
  *(_BYTE *)(a1 + 136) = v43;
  *(_QWORD *)(a1 + 144) = v44;
  *(_BYTE *)(a1 + 152) = v45;
  *(_OWORD *)(a1 + 160) = v59;
  *(_QWORD *)(a1 + 176) = v46;
  *(double *)(a1 + 184) = v47;
  *(_QWORD *)(a1 + 192) = v48;
  *(_BYTE *)(a1 + 200) = v49;
  *(_BYTE *)(a1 + 201) = v50;
  result = v60;
  *(__n128 *)(a1 + 208) = v60;
  *(_QWORD *)(a1 + 224) = v52;
  *(_QWORD *)(a1 + 232) = v51;
  *(_QWORD *)(a1 + 240) = v53;
  *(_QWORD *)(a1 + 248) = v57;
  return result;
}

uint64_t ResolvedBorderedButton.specs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  char v11;
  int v12;
  char v13;
  double v14;
  int v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t result;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  char v39;
  double v40;
  char v41;
  unint64_t v42;
  unsigned __int8 v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v3 = *(_OWORD *)(v1 + 128);
  v4 = *(_OWORD *)(v1 + 144);
  v5 = *(_OWORD *)(v1 + 96);
  v50 = *(_OWORD *)(v1 + 112);
  v51 = v3;
  v52 = v4;
  v53 = *(_QWORD *)(v1 + 160);
  v6 = *(_OWORD *)(v1 + 80);
  v47 = *(_OWORD *)(v1 + 64);
  v48 = v6;
  v49 = v5;
  v7 = *(_OWORD *)(v1 + 16);
  v44[0] = *(_OWORD *)v1;
  v44[1] = v7;
  v8 = *(_OWORD *)(v1 + 48);
  v45 = *(_OWORD *)(v1 + 32);
  v46 = v8;
  v9 = v7;
  v10 = BYTE8(v7);
  outlined copy of Environment<Bool>.Content(v7, SBYTE8(v7));
  v11 = specialized Environment.wrappedValue.getter(v9, v10);
  outlined consume of Environment<Bool>.Content(v9, v10);
  if ((v11 & 1) == 0)
  {
    *(_QWORD *)a1 = v53;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a1 + 8) = _Q0;
    *(_QWORD *)(a1 + 24) = 8;
    *(_DWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 36) = 0;
    *(_QWORD *)(a1 + 40) = 1;
    *(_OWORD *)(a1 + 48) = xmmword_187C4E620;
    return swift_retain();
  }
  v12 = BYTE9(v48);
  v13 = BYTE10(v48);
  v14 = 1.0;
  v15 = BYTE11(v48);
  v16 = 1.0;
  if (BYTE11(v48) == 1)
  {
    v17 = v47;
    v18 = BYTE8(v47);
    v19 = BYTE9(v47);
    outlined copy of Environment<CGFloat?>.Content(v47, BYTE8(v47), SBYTE9(v47));
    outlined retain of ResolvedBorderedButton((uint64_t)v44);
    specialized Environment.wrappedValue.getter(v17, v18 | (v19 << 8), (uint64_t)&v42);
    outlined consume of Environment<CGFloat?>.Content(v17, v18, v19);
    outlined release of ResolvedBorderedButton((uint64_t)v44);
    v16 = 0.9;
    if ((v43 & (v42 > 2)) != 0)
      v14 = 0.8;
    else
      v14 = 0.9;
  }
  v20 = v46;
  v21 = BYTE8(v46);
  outlined copy of Environment<Color?>.Content(v46, BYTE8(v46));
  v22 = specialized Environment.wrappedValue.getter(v20, v21);
  outlined consume of Environment<Color?>.Content(v20, v21);
  if (!v22)
  {
    if (v12 == 1)
      v23 = v13;
    else
      v23 = 1;
    if ((v23 & 1) != 0)
      v24 = static Color.accentColor.getter();
    else
      v24 = static Color.red.getter();
    v22 = v24;
  }
  v31 = BYTE12(v48);
  v32 = v48;
  v33 = BYTE8(v48);
  outlined copy of Environment<Bool>.Content(v48, SBYTE8(v48));
  v34 = specialized Environment.wrappedValue.getter(v32, v33);
  outlined consume of Environment<Bool>.Content(v32, v33);
  if (v34 == 2)
  {
    if ((v31 & 1) == 0)
      goto LABEL_23;
    goto LABEL_20;
  }
  if ((v31 & 1) == 0)
  {
    if ((v34 & 1) != 0)
    {
LABEL_23:
      v38 = v45;
      v39 = BYTE8(v45);
      swift_retain_n();
      outlined copy of Environment<Bool>.Content(v38, v39);
      specialized Environment.wrappedValue.getter(v38, v39, &v42);
      outlined consume of Environment<Bool>.Content(v38, v39);
      if ((v42 & 1) != 0)
      {
        result = swift_release();
        if (v15)
          v37 = 0.24;
        else
          v37 = 0.32;
      }
      else
      {
        if (v15)
          v37 = 0.2;
        else
          v37 = 0.14;
        if (v22 == static Color.yellow.getter())
        {
          result = swift_release_n();
        }
        else
        {
          if (v15)
            v40 = 0.18;
          else
            v40 = 0.12;
          v41 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
          swift_release();
          result = swift_release();
          if ((v41 & 1) == 0)
            v37 = v40;
        }
      }
      v36 = v22;
      goto LABEL_39;
    }
    goto LABEL_22;
  }
  if ((v34 & 1) == 0)
  {
LABEL_22:
    v36 = v22;
    v22 = v53;
    result = swift_retain();
    v37 = 1.0;
    goto LABEL_39;
  }
LABEL_20:
  LOBYTE(v42) = 0;
  Color.init(_:white:opacity:)();
  v35 = Color.over(_:)();
  swift_release();
  result = swift_release();
  v36 = 0;
  v37 = 1.0;
  v22 = v35;
LABEL_39:
  *(_QWORD *)a1 = v22;
  *(double *)(a1 + 8) = v37;
  *(double *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = 8;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = v36;
  *(_QWORD *)(a1 + 48) = 0x3FF0000000000000;
  *(double *)(a1 + 56) = v14;
  return result;
}

uint64_t ResolvedBorderedButton.background.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[23];
  uint64_t v36;
  char v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[30];
  _QWORD v44[3];
  unint64_t v45;
  unint64_t v46;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(unsigned __int8 *)(v1 + 72);
  v7 = *(_BYTE *)(v1 + 73);
  outlined copy of Environment<CGFloat?>.Content(v5, v6, v7 & 1);
  specialized Environment.wrappedValue.getter(v5, v6 & 0xFFFFFEFF | ((v7 & 1) << 8), (uint64_t)&v31);
  outlined consume of Environment<CGFloat?>.Content(v5, v6, v7 & 1);
  if (v32 == 1 && v31 == 0)
  {
    v30 = 1;
    v9 = 1;
  }
  else
  {
    outlined copy of Environment<CGFloat?>.Content(v5, v6, v7 & 1);
    specialized Environment.wrappedValue.getter(v5, v6 & 0xFFFFFEFF | ((v7 & 1) << 8), (uint64_t)&v31);
    outlined consume of Environment<CGFloat?>.Content(v5, v6, v7 & 1);
    v30 = v31;
    v9 = v32;
  }
  v29 = v9;
  outlined copy of Environment<Bool>.Content(v3, v4 & 1);
  specialized Environment.wrappedValue.getter(v3, v4 & 1, &v31);
  outlined consume of Environment<Bool>.Content(v3, v4 & 1);
  v28 = v31;
  static EdgeInsets.zero.getter();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v31 = v3;
  v32 = v4;
  v33 = *(_OWORD *)(v1 + 9);
  v34 = *(_OWORD *)(v1 + 25);
  *(_OWORD *)v35 = *(_OWORD *)(v1 + 41);
  *(_QWORD *)&v35[15] = *(_QWORD *)(v1 + 56);
  v36 = v5;
  v37 = v6;
  v38 = v7;
  v41 = *(_OWORD *)(v1 + 106);
  v42 = *(_OWORD *)(v1 + 122);
  *(_OWORD *)v43 = *(_OWORD *)(v1 + 138);
  *(_OWORD *)&v43[14] = *(_OWORD *)(v1 + 152);
  v39 = *(_OWORD *)(v1 + 74);
  v40 = *(_OWORD *)(v1 + 90);
  ResolvedBorderedButton.specs.getter((uint64_t)v44);
  v18 = v45;
  v19 = v4;
  v20 = v46;
  v27 = Color.opacity(_:)();
  swift_release();
  outlined consume of Material?(v18);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v20);
  v31 = v3;
  v32 = v19;
  v33 = *(_OWORD *)(v1 + 9);
  v34 = *(_OWORD *)(v1 + 25);
  *(_OWORD *)v35 = *(_OWORD *)(v1 + 41);
  *(_QWORD *)&v35[15] = *(_QWORD *)(v1 + 56);
  v36 = v5;
  v37 = v6;
  v38 = v7;
  v41 = *(_OWORD *)(v1 + 106);
  v42 = *(_OWORD *)(v1 + 122);
  *(_OWORD *)v43 = *(_OWORD *)(v1 + 138);
  *(_OWORD *)&v43[14] = *(_OWORD *)(v1 + 152);
  v39 = *(_OWORD *)(v1 + 74);
  v40 = *(_OWORD *)(v1 + 90);
  ResolvedBorderedButton.specs.getter((uint64_t)v44);
  v21 = v44[2];
  v22 = v45;
  v23 = v46;
  swift_release();
  outlined consume of Material?(v22);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v23);
  result = static UnitPoint.center.getter();
  *(_BYTE *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v30;
  *(_BYTE *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v27;
  *(_WORD *)(a1 + 64) = 256;
  *(_QWORD *)(a1 + 72) = v21;
  *(_QWORD *)(a1 + 80) = v21;
  *(_QWORD *)(a1 + 88) = v25;
  *(_QWORD *)(a1 + 96) = v26;
  return result;
}

uint64_t ResolvedBorderedButton.circleButtonPadding.getter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  char v14;

  v12 = *(_QWORD *)v0;
  v1 = *(_BYTE *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_BYTE *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = *(_BYTE *)(v0 + 137);
  v8 = *(_QWORD *)(v0 + 144);
  v9 = *(_BYTE *)(v0 + 152);
  v10 = *(unsigned __int8 *)(v0 + 136);
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<KeyboardShortcut?>.Content(v4, v5, v6, v10, v7);
  outlined copy of Environment<Bool>.Content(v8, v9);
  outlined copy of Environment<Bool>.Content(v8, v9);
  specialized Environment.wrappedValue.getter(v8, v9, &v14);
  outlined consume of Environment<Bool>.Content(v8, v9);
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<KeyboardShortcut?>.Content(v4, v5, v6, v10, v7);
  outlined consume of Environment<Bool>.Content(v8, v9);
  outlined copy of Environment<Bool>.Content(v12, v1);
  specialized Environment.wrappedValue.getter(v12, v1, &v13);
  outlined consume of Environment<Bool>.Content(v12, v1);
  return EdgeInsets.init(_all:)();
}

uint64_t getEnumTagSinglePayload for ResolvedBorderedButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 160);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedBorderedButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 160) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>);
}

void type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for ButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    type metadata accessor for _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>);
  }
}

void type metadata accessor for _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>, (uint64_t)&type metadata for BorderedButtonColorSpec.LabelStyle, (uint64_t)&protocol witness table for BorderedButtonColorSpec.LabelStyle, MEMORY[0x1E0CE4650]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle> and conformance _OpacityShapeStyle<A>();
    v6 = type metadata accessor for _DefaultForegroundStyleModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle> and conformance _OpacityShapeStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle> and conformance _OpacityShapeStyle<A>;
  if (!lazy protocol witness table cache variable for type _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle> and conformance _OpacityShapeStyle<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>, (uint64_t)&type metadata for BorderedButtonColorSpec.LabelStyle, (uint64_t)&protocol witness table for BorderedButtonColorSpec.LabelStyle, MEMORY[0x1E0CE4650]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4660], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle> and conformance _OpacityShapeStyle<A>);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, Color>);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, Color>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<ResolvedBorderShape, Color> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, Color>, MEMORY[0x1E0CE0E50]);
    v3[1] = MEMORY[0x1E0CE1BD0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<ButtonContainerIsBorderedInput>(uint64_t a1)
{
  unint64_t IsBorderedInput;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<ButtonContainerIsBorderedInput>)
  {
    IsBorderedInput = lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for ButtonContainerIsBorderedInput, IsBorderedInput, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ButtonContainerIsBorderedInput>);
  }
}

unint64_t lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput;
  if (!lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonContainerIsBorderedInput, &type metadata for ButtonContainerIsBorderedInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput;
  if (!lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonContainerIsBorderedInput, &type metadata for ButtonContainerIsBorderedInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput;
  if (!lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonContainerIsBorderedInput, &type metadata for ButtonContainerIsBorderedInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput;
  if (!lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonContainerIsBorderedInput, &type metadata for ButtonContainerIsBorderedInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput;
  if (!lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonContainerIsBorderedInput, &type metadata for ButtonContainerIsBorderedInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2BC0]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>> and conformance _BackgroundModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>, MEMORY[0x1E0CE4B88]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, lazy protocol witness table accessor for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE1BD0]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>, (uint64_t)&protocol witness table for _DefaultForegroundStyleModifier<A>);
}

uint64_t sub_1876A5754()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for ViewInputFlagModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>, type metadata accessor for ViewInputFlagModifier<ButtonContainerIsBorderedInput>);
}

void TabRole.hash(into:)()
{
  Hasher._combine(_:)(0);
}

uint64_t static TabRole.== infix(_:_:)()
{
  return 1;
}

Swift::Int TabRole.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type TabRole and conformance TabRole()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabRole and conformance TabRole;
  if (!lazy protocol witness table cache variable for type TabRole and conformance TabRole)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabRole, &type metadata for TabRole);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabRole and conformance TabRole);
  }
  return result;
}

ValueMetadata *type metadata accessor for TabRole()
{
  return &type metadata for TabRole;
}

uint64_t storeEnumTagSinglePayload for TabRole.Role(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1876A58AC + 4 * byte_187C4E8F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1876A58CC + 4 * byte_187C4E8F5[v4]))();
}

_BYTE *sub_1876A58AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1876A58CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1876A58D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1876A58DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1876A58E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1876A58EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TabRole.Role()
{
  return &type metadata for TabRole.Role;
}

unint64_t lazy protocol witness table accessor for type TabRole.Role and conformance TabRole.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabRole.Role and conformance TabRole.Role;
  if (!lazy protocol witness table cache variable for type TabRole.Role and conformance TabRole.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabRole.Role, &type metadata for TabRole.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabRole.Role and conformance TabRole.Role);
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultIndexViewStyle()
{
  return &type metadata for DefaultIndexViewStyle;
}

uint64_t associated type witness table accessor for IndexViewStyle._Body : View in DefaultIndexViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for IndexViewStyle._makeBody(configuration:) in conformance DefaultIndexViewStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PageIndexViewStyle._makeBody(configuration:)(a1, a2);
}

_UNKNOWN **sub_1876A599C()
{
  return &protocol witness table for UIKitPageIndexView<A>;
}

_QWORD *protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance DisplayListTestComparator.Key@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

Swift::Int DisplayListTestComparator.Option.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  switch(a1)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      break;
    default:
      Hasher._combine(_:)(0);
      if (a1)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Set.hash(into:)((uint64_t)v3, a1);
        outlined consume of DisplayListTestComparator.Option(a1);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      break;
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DisplayListTestComparator.Option()
{
  uint64_t *v0;

  return DisplayListTestComparator.Option.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance DisplayListTestComparator.Option(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  Swift::UInt v5;

  v2 = v1;
  v4 = *v2;
  if (*v2 == 1)
  {
    v5 = 1;
    goto LABEL_7;
  }
  if (v4 == 2)
  {
    v5 = 2;
    goto LABEL_7;
  }
  if (v4 == 3)
  {
    v5 = 3;
LABEL_7:
    Hasher._combine(_:)(v5);
    return;
  }
  Hasher._combine(_:)(0);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
    outlined consume of DisplayListTestComparator.Option(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayListTestComparator.Option()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      break;
    default:
      Hasher._combine(_:)(0);
      if (v1)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Set.hash(into:)((uint64_t)v3, v1);
        outlined consume of DisplayListTestComparator.Option(v1);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      break;
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DisplayListTestComparator.Option(uint64_t *a1, uint64_t *a2)
{
  return specialized static DisplayListTestComparator.Option.== infix(_:_:)(*a1, *a2);
}

uint64_t type metadata accessor for DisplayListTestComparator()
{
  return objc_opt_self();
}

unint64_t destroy for DisplayListTestComparator.Option(unint64_t *a1)
{
  unint64_t result;
  int v2;

  result = *a1;
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if ((v2 + 1) <= 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisplayListTestComparator.Option(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  if ((v4 + 1) <= 1)
    v3 = swift_bridgeObjectRetain();
  *a1 = v3;
  return a1;
}

uint64_t *assignWithCopy for DisplayListTestComparator.Option(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;

  LODWORD(v3) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v4) = -1;
  else
    v4 = *a1;
  v5 = v4 + 1;
  v6 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v3 = *a2;
  v7 = v3 + 1;
  if (v5 > 1)
  {
    *a1 = v6;
    if (v7 <= 1)
      swift_bridgeObjectRetain();
  }
  else if (v7 > 1)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t *assignWithTake for DisplayListTestComparator.Option(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a1;
  v4 = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = v3;
  v5 = *a2;
  if ((v4 + 1) > 1)
    goto LABEL_9;
  LODWORD(v6) = -1;
  if (v5 < 0xFFFFFFFF)
    v6 = *a2;
  if ((v6 + 1) > 1)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    *a1 = v5;
    return a1;
  }
  *a1 = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayListTestComparator.Option(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) < 2)
    LODWORD(v3) = 0;
  if (v3 >= 4)
    return (v3 - 3);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DisplayListTestComparator.Option(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for DisplayListTestComparator.Option(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  if ((v1 + 1) >= 2)
    return v1;
  else
    return 0;
}

_QWORD *destructiveInjectEnumTag for DisplayListTestComparator.Option(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    *result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayListTestComparator.Option()
{
  return &type metadata for DisplayListTestComparator.Option;
}

uint64_t outlined copy of DisplayListTestComparator.Key(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 1 <= 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for DisplayListTestComparator.Key(uint64_t a1)
{
  return outlined consume of DisplayListTestComparator.Key(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of DisplayListTestComparator.Key(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 1 <= 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DisplayListTestComparator.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of DisplayListTestComparator.Key(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DisplayListTestComparator.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of DisplayListTestComparator.Key(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of DisplayListTestComparator.Key(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DisplayListTestComparator.Key(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of DisplayListTestComparator.Key(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayListTestComparator.Key(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayListTestComparator.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for DisplayListTestComparator.Key(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for DisplayListTestComparator.Key(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DisplayListTestComparator.Key()
{
  return &type metadata for DisplayListTestComparator.Key;
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in DisplayListTestComparator.Key()
{
  return MEMORY[0x1E0DEA9F8];
}

unint64_t lazy protocol witness table accessor for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key;
  if (!lazy protocol witness table cache variable for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayListTestComparator.Key, &type metadata for DisplayListTestComparator.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key;
  if (!lazy protocol witness table cache variable for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayListTestComparator.Key, &type metadata for DisplayListTestComparator.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in DisplayListTestComparator.Key()
{
  return MEMORY[0x1E0DEAA00];
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in DisplayListTestComparator.Key()
{
  return MEMORY[0x1E0DEA9F0];
}

unint64_t lazy protocol witness table accessor for type DisplayListTestComparator.Option and conformance DisplayListTestComparator.Option()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisplayListTestComparator.Option and conformance DisplayListTestComparator.Option;
  if (!lazy protocol witness table cache variable for type DisplayListTestComparator.Option and conformance DisplayListTestComparator.Option)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayListTestComparator.Option, &type metadata for DisplayListTestComparator.Option);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTestComparator.Option and conformance DisplayListTestComparator.Option);
  }
  return result;
}

void specialized Set.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  Swift::Int v14;
  unint64_t v16;
  int64_t v17;

  Hasher._finalize()();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_19;
    if (v9 >= v7)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v8);
      return;
    }
    v16 = *(_QWORD *)(v3 + 8 * v9);
    if (!v16)
      break;
LABEL_16:
    v6 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    v12 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v11);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    v13 = v12;
    String.hash(into:)();
    v14 = Hasher._finalize()();

    swift_bridgeObjectRelease();
    v8 ^= v14;
  }
  v17 = v9 + 1;
  if (v9 + 1 >= v7)
    goto LABEL_17;
  v16 = *(_QWORD *)(v3 + 8 * v17);
  if (v16)
  {
    ++v9;
    goto LABEL_16;
  }
  while (1)
  {
    v9 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v9 >= v7)
      goto LABEL_17;
    v16 = *(_QWORD *)(v3 + 8 * v9);
    ++v17;
    if (v16)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t outlined consume of DisplayListTestComparator.Option(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized static DisplayListTestComparator.Option.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v5;

  switch(a1)
  {
    case 1:
      return a2 == 1;
    case 2:
      if (a2 == 2)
        return 1;
      break;
    case 3:
      return a2 == 3;
    default:
      if ((unint64_t)(a2 - 1) >= 3)
      {
        if (a1)
        {
          if (!a2)
            return 0;
          outlined copy of DisplayListTestComparator.Option(a2);
          outlined copy of DisplayListTestComparator.Option(a1);
          v5 = specialized static Set.== infix(_:_:)(a1, a2);
          outlined consume of DisplayListTestComparator.Option(a2);
          outlined consume of DisplayListTestComparator.Option(a1);
          return (v5 & 1) != 0;
        }
        if (!a2)
          return 1;
        outlined consume of DisplayListTestComparator.Option(0);
      }
      break;
  }
  return 0;
}

uint64_t outlined copy of DisplayListTestComparator.Option(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t EnvironmentValues.toolbarCustomizationVisibility.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.toolbarCustomizationVisibility.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.toolbarCustomizationOptions.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.toolbarCustomizationOptions.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t static CustomizationOptionsModifier._makeToolbar(content:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 6);
  v7 = *((_DWORD *)a2 + 7);
  v8 = *((_DWORD *)a2 + 8);
  v9 = *((_DWORD *)a2 + 9);
  v10 = a2[5];
  v11 = a2[6];
  v12 = *((_DWORD *)a2 + 14);
  v13 = a2[8];
  v14 = *((_DWORD *)a2 + 18);
  v26 = *a2;
  v27 = v4;
  v28 = v5;
  *(_QWORD *)&v29 = __PAIR64__(v7, v6);
  *((_QWORD *)&v29 + 1) = __PAIR64__(v9, v8);
  v30 = v10;
  v31 = v11;
  v32 = v12;
  v33 = v13;
  v34 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.environment.getter();
  type metadata accessor for _GraphValue<CustomizationOptionsModifier>();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type CustomizationOptionsModifier.ChildEnvironment and conformance CustomizationOptionsModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphInputs.environment.setter();
  v17 = v26;
  v18 = v27;
  v19 = v5;
  v20 = v29;
  v21 = v10;
  v22 = v11;
  v23 = v32;
  v24 = v33;
  v25 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v17);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

double CustomizationOptionsModifier.ChildEnvironment.value.getter@<D0>(_OWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  double result;
  __int128 v7;

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  *(_QWORD *)&v7 = *Value;
  *((_QWORD *)&v7 + 1) = v3;
  v4 = *(_BYTE *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI10VisibilityO_s5NeverOytTg503_s7c114UI28CustomizationOptionsModifier33_D8F8B35B8E1C27D674C1EB157F00472FLLV16ChildEnvironmentV5valueAA0Q6ValuesVvgyAA10E6OXEfU_AD0X6ValuesVTf1cn_n(v4, (uint64_t)&v7);
  v5 = AGGraphGetValue();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI27ToolbarCustomizationOptionsV_s5NeverOytTB503_s7c4UI28fG107Modifier33_D8F8B35B8E1C27D674C1EB157F00472FLLV16ChildEnvironmentV5valueAA0Q6ValuesVvgyAA07ToolbarcD0VXEfU0_AD0X6ValuesVTf1cn_n(*(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16), (uint64_t)&v7);
  result = *(double *)&v7;
  *a1 = v7;
  return result;
}

double protocol witness for Rule.value.getter in conformance CustomizationOptionsModifier.ChildEnvironment@<D0>(_OWORD *a1@<X8>)
{
  return CustomizationOptionsModifier.ChildEnvironment.value.getter(a1);
}

void static ToolbarCustomizationOptions.alwaysAvailable.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

SwiftUI::ToolbarCustomizationOptions __swiftcall ToolbarCustomizationOptions.init(rawValue:)(SwiftUI::ToolbarCustomizationOptions rawValue)
{
  SwiftUI::ToolbarCustomizationOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t ToolbarCustomizationOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ToolbarCustomizationOptions.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ToolbarCustomizationOptions.rawValue.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t CustomizableToolbarContent.defaultCustomization(_:options:)@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;
  char v8;

  v4 = *a2;
  v6[0] = a1;
  v7 = v4;
  v8 = 0;
  return ToolbarContent.modifier<A>(_:)((uint64_t)v6, a3, (uint64_t)&type metadata for CustomizationOptionsModifier, a4);
}

uint64_t CustomizableToolbarContent.defaultCustomization()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

unint64_t lazy protocol witness table accessor for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions;
  if (!lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarCustomizationOptions, &type metadata for ToolbarCustomizationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions;
  if (!lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarCustomizationOptions, &type metadata for ToolbarCustomizationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions;
  if (!lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarCustomizationOptions, &type metadata for ToolbarCustomizationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions;
  if (!lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarCustomizationOptions, &type metadata for ToolbarCustomizationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarCustomizationOptions()
{
  return &type metadata for ToolbarCustomizationOptions;
}

uint64_t sub_1876A6D0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ToolbarModifiedContent(255, *a1, (uint64_t)&type metadata for CustomizationOptionsModifier, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for CustomizationOptionsModifier;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ToolbarModifiedContent<A, B>, v5, v7);
}

uint64_t sub_1876A6D60(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t getEnumTagSinglePayload for CustomizationOptionsModifier(unsigned __int8 *a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && a1[17])
    return (*(_DWORD *)a1 + 253);
  if (*a1 <= 3u)
    v3 = 3;
  else
    v3 = *a1;
  v4 = v3 - 4;
  if (*a1 < 3u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for CustomizationOptionsModifier()
{
  return &type metadata for CustomizationOptionsModifier;
}

void type metadata accessor for _GraphValue<CustomizationOptionsModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<CustomizationOptionsModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<CustomizationOptionsModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type CustomizationOptionsModifier.ChildEnvironment and conformance CustomizationOptionsModifier.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomizationOptionsModifier.ChildEnvironment and conformance CustomizationOptionsModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type CustomizationOptionsModifier.ChildEnvironment and conformance CustomizationOptionsModifier.ChildEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomizationOptionsModifier.ChildEnvironment, &unk_1E1AF6490);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomizationOptionsModifier.ChildEnvironment and conformance CustomizationOptionsModifier.ChildEnvironment);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarCustomizationVisibilityKey()
{
  return &type metadata for EnvironmentValues.ToolbarCustomizationVisibilityKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarCustomizationOptionsKey()
{
  return &type metadata for EnvironmentValues.ToolbarCustomizationOptionsKey;
}

void *type metadata accessor for CustomizationOptionsModifier.ChildEnvironment()
{
  return &unk_1E1AF6490;
}

unint64_t destroy for SystemScrollLayoutState(uint64_t a1)
{
  return outlined consume of SystemScrollLayoutState.ContentOffsetMode(*(_QWORD *)(a1 + 96));
}

uint64_t assignWithTake for SystemScrollLayoutState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v7);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemScrollLayoutState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x1E && *(_BYTE *)(a1 + 108))
    return (*(_DWORD *)a1 + 30);
  v3 = (*(_QWORD *)(a1 + 96) & 4 | ((*(_QWORD *)(a1 + 96) >> 59) >> 3) & 0xFFFFFFE7 | (8 * (((*(_QWORD *)(a1 + 96) >> 59) >> 1) & 3))) ^ 0x1F;
  if (v3 >= 0x1D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SystemScrollLayoutState(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x1D)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 30;
    if (a3 >= 0x1E)
      *(_BYTE *)(result + 108) = 1;
  }
  else
  {
    if (a3 >= 0x1E)
      *(_BYTE *)(result + 108) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 7 | (8 * (-a2 & 0x1F));
      *(_QWORD *)(result + 96) = ((v3 << 59) | (4 * v3)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemScrollLayoutState()
{
  return &type metadata for SystemScrollLayoutState;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemScrollLayoutState.ContentOffsetAdjustmentReason()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SystemScrollLayoutState.ContentOffsetAdjustmentReason()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemScrollLayoutState.ContentOffsetAdjustmentReason()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

_BYTE *protocol witness for RawRepresentable.init(rawValue:) in conformance SystemScrollLayoutState.ContentOffsetAdjustmentReason@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*(_DWORD *)result >= 4u)
    v2 = 3;
  else
    v2 = 0x2010003u >> (8 * *result);
  *a2 = v2;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SystemScrollLayoutState.ContentOffsetAdjustmentReason(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

void SystemScrollLayoutState.adjustContentOffset(by:state:updateSeed:)(double a1, double a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[4];
  uint64_t v20[14];
  int v21;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_QWORD *)(v4 + 40);
  v9 = *(_QWORD *)(v4 + 48);
  v10 = *(_QWORD *)(v4 + 56);
  v11 = *(_QWORD *)(v4 + 64);
  v12 = *(unsigned int *)(v4 + 104);
  if (a1 != 0.0 || a2 != 0.0)
  {
    v13 = *(double *)v4 + a1;
    v14 = *(double *)(v4 + 8) + a2;
    v17 = *(_QWORD *)(v4 + 88);
    v18 = *(_QWORD *)(v4 + 80);
    v15 = *(_QWORD *)(v4 + 72);
    if ((_DWORD)v12 != -1)
    {
      if ((_DWORD)v12)
        a4 = merge32(_:_:)(v12, a4);
      if (a4)
      {
        v12 = a4;
        if (a4 != -1)
          v12 = merge32(_:_:)(a4, 1u);
      }
      else
      {
        v12 = 1;
      }
    }
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(0);
    v16 = AGCreateWeakAttribute();
    *(double *)v20 = v13;
    *(double *)&v20[1] = v14;
    v20[2] = v5;
    v20[3] = v6;
    v20[4] = v7;
    v20[5] = v8;
    v20[6] = v9;
    v20[7] = v10;
    v20[8] = v11;
    v20[9] = v15;
    v20[10] = v18;
    v20[11] = v17;
    v20[12] = 0;
    v20[13] = v12 | (v16 << 32);
    v21 = HIDWORD(v16);
    v19[0] = 5;
    memset(&v19[1], 0, 24);
    specialized static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)(v20, v19, 0, 0, 0, 1, 1, 1);
    outlined consume of SystemScrollLayoutState.ContentOffsetMode(0);
    outlined consume of SystemScrollLayoutState.ContentOffsetMode(0);
  }
}

void closure #1 in static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ObjectType;

  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    if (MEMORY[0x18D760234](a2 + 200))
    {
      v3 = *(_QWORD *)(a2 + 208);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, double))(v3 + 40))(ObjectType, v3, 0.0);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    GraphHost.flushTransactions()();
  }
}

uint64_t SystemScrollLayoutState.description.getter()
{
  uint64_t v0;
  unint64_t v1;
  int v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_DWORD *)(v0 + 104);
  _StringGuts.grow(_:)(102);
  v3._countAndFlagsBits = 0xD00000000000001ALL;
  v3._object = (void *)0x8000000187BE67C0;
  String.append(_:)(v3);
  type metadata accessor for CGPoint(0);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 0x74657366666F202CLL;
  v4._object = (void *)0xEE00203A65646F4DLL;
  String.append(_:)(v4);
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(v1);
  v5._countAndFlagsBits = SystemScrollLayoutState.ContentOffsetMode.description.getter(v1);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v1);
  v6._countAndFlagsBits = 0x74657366666F202CLL;
  v6._object = (void *)0xEE00203A64656553;
  String.append(_:)(v6);
  if (v2 == -1)
  {
    v7 = 0xE700000000000000;
    v8 = 0x64696C61766E69;
  }
  else if (v2)
  {
    v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v7 = v9;
  }
  else
  {
    v7 = 0xE500000000000000;
    v8 = 0x7974706D65;
  }
  v10 = v7;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x8000000187BE67E0;
  v11._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v11);
  _print_unlocked<A, B>(_:_:)();
  v12._countAndFlagsBits = 0xD000000000000015;
  v12._object = (void *)0x8000000187BE6800;
  String.append(_:)(v12);
  type metadata accessor for CGSize(0);
  _print_unlocked<A, B>(_:_:)();
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t SystemScrollLayoutState.ContentOffsetMode.description.getter(unint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v11;
  Swift::String v12;
  unint64_t v13;

  if (a1 >> 62)
  {
    if (a1 >> 62 != 1)
      return 0x6D6574737973;
    v1 = *(unsigned __int8 *)(a1 + 32);
    v2 = *(unsigned __int8 *)(a1 + 33);
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v13 = 0xD000000000000011;
    if (v1)
      v3 = 1702195828;
    else
      v3 = 0x65736C6166;
    if (v1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = v4;
    String.append(_:)(*(Swift::String *)&v3);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 0xD000000000000016;
    v6._object = (void *)0x8000000187BE6840;
    String.append(_:)(v6);
    if (v2)
      v7 = 1702195828;
    else
      v7 = 0x65736C6166;
    if (v2)
      v8 = 0xE400000000000000;
    else
      v8 = 0xE500000000000000;
  }
  else
  {
    v13 = 0x656D7473756A6461;
    v9 = a1;
    if ((_BYTE)a1)
    {
      if (a1 == 1)
        v7 = 0x6E656D6E67696C61;
      else
        v7 = 0x7465736572;
      if (v9 == 1)
        v8 = 0xE900000000000074;
      else
        v8 = 0xE500000000000000;
    }
    else
    {
      v8 = 0xEB000000006E6F69;
      v7 = 0x74616C736E617274;
    }
  }
  v11 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return v13;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemScrollLayoutState.ContentOffsetMode()
{
  unint64_t *v0;

  return SystemScrollLayoutState.ContentOffsetMode.description.getter(*v0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemScrollLayoutState.ContentOffsetAdjustmentReason()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E656D6E67696C61;
  if (*v0 != 1)
    v1 = 0x7465736572;
  if (*v0)
    return v1;
  else
    return 0x74616C736E617274;
}

uint64_t specialized static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v32 = a1[1];
  v33 = *a1;
  v28 = a1[4];
  v29 = a1[3];
  v30 = a1[6];
  v31 = a1[2];
  v26 = a1[7];
  v27 = a1[5];
  v35 = a1[10];
  v36 = a1[9];
  v34 = a1[11];
  v9 = *a2;
  v24 = a1[12];
  v25 = a1[8];
  if ((v24 & 0xF000000000000004) == 0xF000000000000004
    || AGWeakAttributeGetAttribute() == *MEMORY[0x1E0CFED28])
  {
    v10 = 0;
  }
  else
  {
    v11 = (id)AGGraphGetAttributeGraph();
    v12 = AGGraphRef.viewGraph()();

    v10 = v12;
  }
  if (v9 == 5 || AGWeakAttributeGetAttribute() == *MEMORY[0x1E0CFED28])
  {
    v13 = 0;
    if ((a6 & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    v14 = v10;
    v15 = (id)AGGraphGetAttributeGraph();
    v13 = AGGraphRef.viewGraph()();

    v10 = v14;
    if ((a6 & 1) != 0)
      goto LABEL_11;
  }
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x1E0CFED28])
  {
    v18 = v10;
    v19 = (id)AGGraphGetAttributeGraph();
    v20 = AGGraphRef.viewGraph()();

    v10 = v18;
    result = v20;
    if (v18)
      goto LABEL_12;
    goto LABEL_14;
  }
LABEL_11:
  result = 0;
  if (v10)
  {
LABEL_12:
    v17 = v10;
    goto LABEL_18;
  }
LABEL_14:
  if (v13)
  {
    swift_retain();
    v17 = v13;
  }
  else
  {
    if (!result)
      return result;
    v17 = swift_retain();
  }
LABEL_18:
  swift_retain();
  outlined copy of Transaction?(a8);
  Transaction.fromScrollView.setter();
  outlined copy of SystemScrollLayoutState?(v33, v32, v31, v29, v28, v27, v30, v26, v25, v36, v35, v34, v24);
  lazy protocol witness table accessor for type ScrollViewCommitMutation and conformance ScrollViewCommitMutation();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
  GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
  swift_release();
  if ((v24 & 0xF000000000000004) == 0xF000000000000004)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    if (v24 == 0x8000000000000000)
    {
      outlined copy of SystemScrollLayoutState.ContentOffsetMode(0x8000000000000000);
      static Semantics.v6.getter();
      v21 = isLinkedOnOrAfter(_:)();
    }
    else
    {
      outlined copy of SystemScrollLayoutState.ContentOffsetMode(v24);
      v21 = 0;
    }
    v22 = swift_allocObject();
    *(_BYTE *)(v22 + 16) = v21 & 1;
    *(_QWORD *)(v22 + 24) = v17;
    swift_retain();
    static Update.enqueueAction(_:)();
    outlined consume of SystemScrollLayoutState?(v33, v32, v31, v29, v28, v27, v30, v26, v25, v36, v35, v34, v24);
    swift_release();
    swift_release();
    outlined consume of SystemScrollLayoutState?(v33, v32, v31, v29, v28, v27, v30, v26, v25, v36, v35, v34, v24);
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type ScrollViewCommitMutation and conformance ScrollViewCommitMutation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollViewCommitMutation and conformance ScrollViewCommitMutation;
  if (!lazy protocol witness table cache variable for type ScrollViewCommitMutation and conformance ScrollViewCommitMutation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollViewCommitMutation, &type metadata for ScrollViewCommitMutation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewCommitMutation and conformance ScrollViewCommitMutation);
  }
  return result;
}

uint64_t sub_1876A7C28()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)()
{
  uint64_t v0;

  closure #1 in static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t destroy for ScrollViewCommitMutation(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if ((~result & 0xF000000000000004) != 0)
    return outlined consume of SystemScrollLayoutState.ContentOffsetMode(result);
  return result;
}

uint64_t assignWithCopy for ScrollViewCommitMutation(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;

  v4 = a2[6] & 0xF000000000000004;
  if ((~*(_QWORD *)(a1 + 96) & 0xF000000000000004) != 0)
  {
    if (v4 == 0xF000000000000004)
    {
      outlined destroy of (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>)(a1);
      v11 = a2[3];
      v13 = *a2;
      v12 = a2[1];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v11;
      *(_OWORD *)a1 = v13;
      *(_OWORD *)(a1 + 16) = v12;
      v15 = a2[5];
      v14 = a2[6];
      v16 = a2[4];
      *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
      *(_OWORD *)(a1 + 80) = v15;
      *(_OWORD *)(a1 + 96) = v14;
      *(_OWORD *)(a1 + 64) = v16;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
      *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      v20 = *((_QWORD *)a2 + 12);
      outlined copy of SystemScrollLayoutState.ContentOffsetMode(v20);
      v21 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v20;
      outlined consume of SystemScrollLayoutState.ContentOffsetMode(v21);
      *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
      *(_DWORD *)(a1 + 108) = *((_DWORD *)a2 + 27);
      *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    }
  }
  else if (v4 == 0xF000000000000004)
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    v8 = a2[4];
    v9 = a2[5];
    v10 = a2[6];
    *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    *(_OWORD *)(a1 + 80) = v9;
    *(_OWORD *)(a1 + 96) = v10;
    *(_OWORD *)(a1 + 64) = v8;
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    v17 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v17;
    v18 = a2[4];
    *(_OWORD *)(a1 + 48) = a2[3];
    *(_OWORD *)(a1 + 64) = v18;
    *(_OWORD *)(a1 + 80) = a2[5];
    v19 = *((_QWORD *)a2 + 12);
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(v19);
    *(_QWORD *)(a1 + 96) = v19;
    *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
    *(_QWORD *)(a1 + 108) = *(_QWORD *)((char *)a2 + 108);
  }
  v22 = *(__int128 *)((char *)a2 + 120);
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  *(_OWORD *)(a1 + 120) = v22;
  v23 = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 161) = *(__int128 *)((char *)a2 + 161);
  *(_OWORD *)(a1 + 152) = v23;
  *(_BYTE *)(a1 + 177) = *((_BYTE *)a2 + 177);
  return a1;
}

uint64_t outlined destroy of (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>))
  {
    type metadata accessor for WeakAttribute<SystemScrollLayoutState>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>));
  }
}

void type metadata accessor for WeakAttribute<SystemScrollLayoutState>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakAttribute<SystemScrollLayoutState>)
  {
    v0 = type metadata accessor for WeakAttribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakAttribute<SystemScrollLayoutState>);
  }
}

uint64_t assignWithTake for ScrollViewCommitMutation(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *(_QWORD *)(a1 + 96);
  if ((~v4 & 0xF000000000000004) != 0)
  {
    v5 = *(_QWORD *)(a2 + 96);
    if ((~v5 & 0xF000000000000004) != 0)
    {
      v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      v10 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v10;
      v11 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v11;
      *(_QWORD *)(a1 + 96) = v5;
      outlined consume of SystemScrollLayoutState.ContentOffsetMode(v4);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
      goto LABEL_6;
    }
    outlined destroy of (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>)(a1);
  }
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
LABEL_6:
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewCommitMutation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 178))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 177);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewCommitMutation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 176) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 178) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 178) = 0;
    if (a2)
      *(_BYTE *)(result + 177) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewCommitMutation()
{
  return &type metadata for ScrollViewCommitMutation;
}

uint64_t storeEnumTagSinglePayload for SystemScrollLayoutState.ContentOffsetAdjustmentReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1876A8114 + 4 * byte_187C4EF35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1876A8148 + 4 * byte_187C4EF30[v4]))();
}

uint64_t sub_1876A8148(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876A8150(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1876A8158);
  return result;
}

uint64_t sub_1876A8164(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1876A816CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1876A8170(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876A8178(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for SystemScrollLayoutState.ContentOffsetMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for SystemScrollLayoutState.ContentOffsetMode(unint64_t *a1)
{
  return outlined consume of SystemScrollLayoutState.ContentOffsetMode(*a1);
}

unint64_t *assignWithCopy for SystemScrollLayoutState.ContentOffsetMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v4);
  return a1;
}

unint64_t *assignWithTake for SystemScrollLayoutState.ContentOffsetMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemScrollLayoutState.ContentOffsetMode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x1E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 30);
  v3 = (*(_QWORD *)a1 & 4 | ((*(_QWORD *)a1 >> 59) >> 3) & 0xFFFFFFE7 | (8
                                                                                     * (((*(_QWORD *)a1 >> 59) >> 1) & 3))) ^ 0x1F;
  if (v3 >= 0x1D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SystemScrollLayoutState.ContentOffsetMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x1D)
  {
    *(_QWORD *)result = a2 - 30;
    if (a3 >= 0x1E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x1E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 7 | (8 * (-a2 & 0x1F));
      *(_QWORD *)result = ((v3 << 59) | (4 * v3)) & 0xF000000000000007;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemScrollLayoutState.ContentOffsetAdjustmentReason and conformance SystemScrollLayoutState.ContentOffsetAdjustmentReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemScrollLayoutState.ContentOffsetAdjustmentReason and conformance SystemScrollLayoutState.ContentOffsetAdjustmentReason;
  if (!lazy protocol witness table cache variable for type SystemScrollLayoutState.ContentOffsetAdjustmentReason and conformance SystemScrollLayoutState.ContentOffsetAdjustmentReason)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemScrollLayoutState.ContentOffsetAdjustmentReason, &type metadata for SystemScrollLayoutState.ContentOffsetAdjustmentReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemScrollLayoutState.ContentOffsetAdjustmentReason and conformance SystemScrollLayoutState.ContentOffsetAdjustmentReason);
  }
  return result;
}

uint64_t outlined release of ScrollViewCommitMutation(uint64_t a1)
{
  outlined consume of SystemScrollLayoutState?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  return a1;
}

uint64_t static MultimodalNavigationTitle.title(from:)()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  lazy protocol witness table accessor for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationTitle, &type metadata for MultimodalNavigationTitle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationTitle, &type metadata for MultimodalNavigationTitle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle);
  }
  return result;
}

uint64_t static MultimodalNavigationTitle.== infix(_:_:)()
{
  return 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MultimodalNavigationTitle.CodingKeys()
{
  lazy protocol witness table accessor for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MultimodalNavigationTitle.CodingKeys()
{
  lazy protocol witness table accessor for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t MultimodalNavigationTitle.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  type metadata accessor for KeyedEncodingContainer<MultimodalNavigationTitle.CodingKeys>();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void type metadata accessor for KeyedEncodingContainer<MultimodalNavigationTitle.CodingKeys>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for KeyedEncodingContainer<MultimodalNavigationTitle.CodingKeys>)
  {
    lazy protocol witness table accessor for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys();
    v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<MultimodalNavigationTitle.CodingKeys>);
  }
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationTitle.CodingKeys, &unk_1E1AEA668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationTitle.CodingKeys, &unk_1E1AEA668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationTitle.CodingKeys, &unk_1E1AEA668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys);
  }
  return result;
}

uint64_t MultimodalNavigationTitle.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MultimodalNavigationTitle(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  type metadata accessor for KeyedEncodingContainer<MultimodalNavigationTitle.CodingKeys>();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

ValueMetadata *type metadata accessor for MultimodalNavigationTitle()
{
  return &type metadata for MultimodalNavigationTitle;
}

void *type metadata accessor for MultimodalNavigationTitle.CodingKeys()
{
  return &unk_1E1AEA668;
}

BOOL static MenuActionDismissBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t EnvironmentValues.menuActionDismissBehavior.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.menuActionDismissBehavior.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.menuActionDismissBehavior(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

void static MenuActionDismissBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static MenuActionDismissBehavior.enabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static MenuActionDismissBehavior.disabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t View.actionKeepsMenuPresented(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_1876A8A9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<MenuActionDismissBehavior>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<MenuActionDismissBehavior>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<MenuActionDismissBehavior>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MenuActionDismissBehavior>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MenuActionDismissBehavior>);
  }
}

uint64_t storeEnumTagSinglePayload for MenuActionDismissBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1876A8BBC + 4 * byte_187C4F255[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1876A8BF0 + 4 * byte_187C4F250[v4]))();
}

uint64_t sub_1876A8BF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876A8BF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1876A8C00);
  return result;
}

uint64_t sub_1876A8C0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1876A8C14);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1876A8C18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876A8C20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type MenuActionDismissBehavior.Guts and conformance MenuActionDismissBehavior.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuActionDismissBehavior.Guts and conformance MenuActionDismissBehavior.Guts;
  if (!lazy protocol witness table cache variable for type MenuActionDismissBehavior.Guts and conformance MenuActionDismissBehavior.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuActionDismissBehavior.Guts, &type metadata for MenuActionDismissBehavior.Guts);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuActionDismissBehavior.Guts and conformance MenuActionDismissBehavior.Guts);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>);
  }
}

ValueMetadata *type metadata accessor for MenuActionDismissBehaviorKey()
{
  return &type metadata for MenuActionDismissBehaviorKey;
}

void HSplitView.init(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for View.body.getter in conformance HSplitView<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for HSplitView<A>, a1);
  specialized PrimitiveView.body.getter();
}

void protocol witness for View.body.getter in conformance VSplitView<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for VSplitView<A>, a1);
  specialized PrimitiveView.body.getter();
}

void _SplitViewContainer.body(children:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static _SplitViewContainer._viewListOptions.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for PubliclyPrimitiveView.InternalBody : View in HSplitView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for HSplitView<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HSplitView<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in HSplitView<A>()
{
  return &protocol witness table for HSplitView<A>;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveView.InternalBody : View in VSplitView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for VSplitView<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for VSplitView<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in VSplitView<A>()
{
  return &protocol witness table for VSplitView<A>;
}

unint64_t instantiation function for generic protocol witness table for _SplitViewContainer(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _SplitViewContainer and conformance _SplitViewContainer();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _SplitViewContainer and conformance _SplitViewContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SplitViewContainer and conformance _SplitViewContainer;
  if (!lazy protocol witness table cache variable for type _SplitViewContainer and conformance _SplitViewContainer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SplitViewContainer, &type metadata for _SplitViewContainer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SplitViewContainer and conformance _SplitViewContainer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _SplitViewContainer and conformance _SplitViewContainer;
  if (!lazy protocol witness table cache variable for type _SplitViewContainer and conformance _SplitViewContainer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _SplitViewContainer, &type metadata for _SplitViewContainer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SplitViewContainer and conformance _SplitViewContainer);
  }
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in _SplitViewContainer()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _SplitViewContainer()
{
  lazy protocol witness table accessor for type _SplitViewContainer and conformance _SplitViewContainer();
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t type metadata completion function for HSplitView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HSplitView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned __int8 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 57 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v11 + 32) >> 1) + 1 > 0x80000001)
    {
      v18 = *(_OWORD *)v11;
      v19 = *(_OWORD *)(v11 + 16);
      v20 = *(_OWORD *)(v11 + 32);
      *(_OWORD *)(v10 + 41) = *(_OWORD *)(v11 + 41);
      *(_OWORD *)(v10 + 16) = v19;
      *(_OWORD *)(v10 + 32) = v20;
      *(_OWORD *)v10 = v18;
    }
    else
    {
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(v11 + 8);
      v14 = *(_BYTE *)(v11 + 17);
      v15 = *(_BYTE *)(v11 + 16);
      outlined copy of StateOrBinding<Bool>(*(_QWORD *)v11, v13, v15, v14);
      *(_QWORD *)v10 = v12;
      *(_QWORD *)(v10 + 8) = v13;
      *(_BYTE *)(v10 + 16) = v15;
      *(_BYTE *)(v10 + 17) = v14;
      v16 = *(_OWORD *)(v11 + 24);
      v17 = *(_OWORD *)(v11 + 40);
      *(_BYTE *)(v10 + 56) = *(_BYTE *)(v11 + 56);
      *(_OWORD *)(v10 + 40) = v17;
      *(_OWORD *)(v10 + 24) = v16;
    }
  }
  return v4;
}

uint64_t destroy for HSplitView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  result = (*(uint64_t (**)(void))(v3 + 8))();
  v5 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(v5 + 32) >> 1) + 1 <= 0x80000001)
    return outlined consume of StateOrBinding<Bool>(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(unsigned __int8 *)(v5 + 16), *(_BYTE *)(v5 + 17));
  return result;
}

uint64_t initializeWithCopy for HSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned __int8 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(v8 + 32) >> 1) + 1 > 0x80000001)
  {
    v15 = *(_OWORD *)v8;
    v16 = *(_OWORD *)(v8 + 16);
    v17 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 41) = *(_OWORD *)(v8 + 41);
    *(_OWORD *)(v7 + 16) = v16;
    *(_OWORD *)(v7 + 32) = v17;
    *(_OWORD *)v7 = v15;
  }
  else
  {
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_BYTE *)(v8 + 17);
    v12 = *(_BYTE *)(v8 + 16);
    outlined copy of StateOrBinding<Bool>(*(_QWORD *)v8, v10, v12, v11);
    *(_QWORD *)v7 = v9;
    *(_QWORD *)(v7 + 8) = v10;
    *(_BYTE *)(v7 + 16) = v12;
    *(_BYTE *)(v7 + 17) = v11;
    v13 = *(_OWORD *)(v8 + 24);
    v14 = *(_OWORD *)(v8 + 40);
    *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
    *(_OWORD *)(v7 + 40) = v14;
    *(_OWORD *)(v7 + 24) = v13;
  }
  return a1;
}

uint64_t assignWithCopy for HSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned __int8 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = (*(_QWORD *)(v8 + 32) >> 1) + 1;
  if ((*(_QWORD *)(v7 + 32) >> 1) + 1 >= 0x80000002)
  {
    if (v9 < 0x80000002)
    {
      v18 = *(_QWORD *)v8;
      v19 = *(_QWORD *)(v8 + 8);
      v20 = *(_BYTE *)(v8 + 17);
      v21 = *(_BYTE *)(v8 + 16);
      outlined copy of StateOrBinding<Bool>(*(_QWORD *)v8, v19, v21, v20);
      *(_QWORD *)v7 = v18;
      *(_QWORD *)(v7 + 8) = v19;
      *(_BYTE *)(v7 + 16) = v21;
      *(_BYTE *)(v7 + 17) = v20;
      goto LABEL_6;
    }
LABEL_8:
    v24 = *(_OWORD *)v8;
    v25 = *(_OWORD *)(v8 + 16);
    v26 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 41) = *(_OWORD *)(v8 + 41);
    *(_OWORD *)(v7 + 16) = v25;
    *(_OWORD *)(v7 + 32) = v26;
    *(_OWORD *)v7 = v24;
    return a1;
  }
  if (v9 >= 0x80000002)
  {
    outlined consume of StateOrBinding<Bool>(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(unsigned __int8 *)(v7 + 16), *(_BYTE *)(v7 + 17));
    goto LABEL_8;
  }
  v10 = *(_QWORD *)v8;
  v11 = *(_QWORD *)(v8 + 8);
  v12 = *(_BYTE *)(v8 + 17);
  v13 = *(_BYTE *)(v8 + 16);
  outlined copy of StateOrBinding<Bool>(*(_QWORD *)v8, v11, v13, v12);
  v14 = *(_QWORD *)v7;
  v15 = *(_QWORD *)(v7 + 8);
  v16 = *(_BYTE *)(v7 + 17);
  *(_QWORD *)v7 = v10;
  *(_QWORD *)(v7 + 8) = v11;
  v17 = *(unsigned __int8 *)(v7 + 16);
  *(_BYTE *)(v7 + 16) = v13;
  *(_BYTE *)(v7 + 17) = v12;
  outlined consume of StateOrBinding<Bool>(v14, v15, v17, v16);
LABEL_6:
  v22 = *(_OWORD *)(v8 + 24);
  v23 = *(_OWORD *)(v8 + 40);
  *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
  *(_OWORD *)(v7 + 24) = v22;
  *(_OWORD *)(v7 + 40) = v23;
  return a1;
}

uint64_t initializeWithTake for HSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (__int128 *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v10 = v8[1];
  v9 = v8[2];
  v11 = *v8;
  *(_OWORD *)((char *)v7 + 41) = *(__int128 *)((char *)v8 + 41);
  v7[1] = v10;
  v7[2] = v9;
  *v7 = v11;
  return a1;
}

uint64_t assignWithTake for HSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_QWORD *)(v7 + 32) >> 1) + 1 >= 0x80000002)
    goto LABEL_5;
  if ((*(_QWORD *)(v8 + 32) >> 1) + 1 >= 0x80000002)
  {
    outlined consume of StateOrBinding<Bool>(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(unsigned __int8 *)(v7 + 16), *(_BYTE *)(v7 + 17));
LABEL_5:
    v17 = *(_OWORD *)v8;
    v18 = *(_OWORD *)(v8 + 16);
    v19 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 41) = *(_OWORD *)(v8 + 41);
    *(_OWORD *)(v7 + 16) = v18;
    *(_OWORD *)(v7 + 32) = v19;
    *(_OWORD *)v7 = v17;
    return a1;
  }
  v9 = *(_BYTE *)(v8 + 16);
  v10 = *(_BYTE *)(v8 + 17);
  v11 = *(_QWORD *)v7;
  v12 = *(_QWORD *)(v7 + 8);
  v13 = *(_BYTE *)(v7 + 17);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  v14 = *(unsigned __int8 *)(v7 + 16);
  *(_BYTE *)(v7 + 16) = v9;
  *(_BYTE *)(v7 + 17) = v10;
  outlined consume of StateOrBinding<Bool>(v11, v12, v14, v13);
  v15 = *(_OWORD *)(v8 + 24);
  v16 = *(_OWORD *)(v8 + 40);
  *(_BYTE *)(v7 + 56) = *(_BYTE *)(v8 + 56);
  *(_OWORD *)(v7 + 24) = v15;
  *(_OWORD *)(v7 + 40) = v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for HSplitView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFD)
    v6 = 2147483645;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFD)
    {
      v14 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x20) >> 1;
      v15 = -2 - v14;
      if (-2 - (int)v14 < 0)
        v15 = -1;
      if (v14 <= 0x80000000)
        v16 = -1;
      else
        v16 = v15;
      if (v16 + 1 >= 2)
        return v16;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 57;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1876A9548 + 4 * byte_187C4F370[v12]))();
  }
}

void storeEnumTagSinglePayload for HSplitView(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFDu)
    v6 = 2147483645;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_1876A971C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1876A97C4);
}

void sub_1876A9724(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1876A972CLL);
  JUMPOUT(0x1876A97C4);
}

void sub_1876A9788()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876A97C4);
}

void sub_1876A9790()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876A97C4);
}

uint64_t sub_1876A9798(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFD)
  {
    v4 = (v7 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (a2 > 0x7FFFFFFD)
      JUMPOUT(0x1876A97A4);
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 2 * (-2 - a2);
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_BYTE *)(v4 + 56) = 0;
LABEL_6:
    JUMPOUT(0x1876A97C4);
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v7);
}

uint64_t type metadata accessor for HSplitView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HSplitView);
}

uint64_t getEnumTagSinglePayload for VSplitView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876A9898 + 4 * byte_187C4F37F[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for VSplitView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for VSplitView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VSplitView);
}

uint64_t destroy for _SplitViewContainer(uint64_t result)
{
  if (*(_QWORD *)(result + 40) >> 1 != 4294967294 || *(unsigned __int8 *)(result + 64) >= 2u)
    return outlined consume of StateOrBinding<Bool>(*(_QWORD *)(result + 8), *(_QWORD *)(result + 16), *(unsigned __int8 *)(result + 24), *(_BYTE *)(result + 25));
  return result;
}

uint64_t initializeWithCopy for _SplitViewContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 v8;
  __int128 v9;
  __int128 v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  if (*(_QWORD *)(a2 + 40) >> 1 != 4294967294 || *(unsigned __int8 *)(a2 + 64) >= 2u)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_BYTE *)(a2 + 25);
    v8 = *(_BYTE *)(a2 + 24);
    outlined copy of StateOrBinding<Bool>(v5, v6, v8, v7);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 25) = v7;
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v10;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  }
  return a1;
}

uint64_t assignWithCopy for _SplitViewContainer(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  BOOL v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned __int8 v26;
  __int128 v27;
  __int128 v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (__int128 *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 40) >> 1 == 4294967294 && *(unsigned __int8 *)(a2 + 64) < 2u;
  if (*(_QWORD *)(a1 + 40) >> 1 == 4294967294 && *(unsigned __int8 *)(a1 + 64) < 2u)
  {
    if (v7)
    {
      v12 = *v5;
      v13 = *(_OWORD *)(a2 + 24);
      v14 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
      *(_OWORD *)(a1 + 24) = v13;
      *(_OWORD *)(a1 + 40) = v14;
      *v4 = v12;
      return a1;
    }
    v23 = *(_QWORD *)(a2 + 8);
    v24 = *(_QWORD *)(a2 + 16);
    v25 = *(_BYTE *)(a2 + 25);
    v26 = *(_BYTE *)(a2 + 24);
    outlined copy of StateOrBinding<Bool>(v23, v24, v26, v25);
    *(_QWORD *)(a1 + 8) = v23;
    *(_QWORD *)(a1 + 16) = v24;
    *(_BYTE *)(a1 + 24) = v26;
    *(_BYTE *)(a1 + 25) = v25;
LABEL_18:
    v27 = *(_OWORD *)(a2 + 32);
    v28 = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v27;
    *(_OWORD *)(a1 + 48) = v28;
    return a1;
  }
  if (!v7)
  {
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a2 + 16);
    v17 = *(_BYTE *)(a2 + 25);
    v18 = *(_BYTE *)(a2 + 24);
    outlined copy of StateOrBinding<Bool>(v15, v16, v18, v17);
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_BYTE *)(a1 + 25);
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v16;
    v22 = *(unsigned __int8 *)(a1 + 24);
    *(_BYTE *)(a1 + 24) = v18;
    *(_BYTE *)(a1 + 25) = v17;
    outlined consume of StateOrBinding<Bool>(v19, v20, v22, v21);
    goto LABEL_18;
  }
  outlined destroy of InspectorState(a1 + 8);
  v10 = v5[1];
  v9 = v5[2];
  v11 = *v5;
  *(_OWORD *)((char *)v4 + 41) = *(__int128 *)((char *)v5 + 41);
  v4[1] = v10;
  v4[2] = v9;
  *v4 = v11;
  return a1;
}

uint64_t outlined destroy of InspectorState(uint64_t a1)
{
  destroy for InspectorState(a1);
  return a1;
}

uint64_t assignWithTake for _SplitViewContainer(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = (_OWORD *)(a1 + 8);
  v4 = (_OWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 40) >> 1 == 4294967294 && *(unsigned __int8 *)(a1 + 64) < 2u)
    goto LABEL_12;
  if (*(_QWORD *)(a2 + 40) >> 1 == 4294967294 && *(unsigned __int8 *)(a2 + 64) < 2u)
  {
    outlined destroy of InspectorState(a1 + 8);
LABEL_12:
    v15 = v4[1];
    *v3 = *v4;
    v3[1] = v15;
    v3[2] = v4[2];
    *(_OWORD *)((char *)v3 + 41) = *(_OWORD *)((char *)v4 + 41);
    return a1;
  }
  v8 = *(_BYTE *)(a2 + 24);
  v9 = *(_BYTE *)(a2 + 25);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v13 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 25) = v9;
  outlined consume of StateOrBinding<Bool>(v10, v11, v13, v12);
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SplitViewContainer(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 40) >> 1;
  if (v3 <= 0x80000000)
    v4 = -1;
  else
    v4 = ((-2 - v3) & ~((-2 - (int)v3) >> 31)) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _SplitViewContainer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = 2 * (-2 - a2);
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = 0;
      *(_BYTE *)(result + 64) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SplitViewContainer()
{
  return &type metadata for _SplitViewContainer;
}

uint64_t sub_1876A9EA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for StyleContextWriter<ContainerStyleContext>();
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for _VariadicView.Tree();
  v4 = lazy protocol witness table accessor for type _SplitViewContainer and conformance _SplitViewContainer();
  v7[0] = v1;
  v7[1] = lazy protocol witness table accessor for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>();
  v6[0] = v4;
  v6[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v3, v6);
}

void VSplitView.init(content:)()
{
  HSplitView.init(content:)();
}

void __swiftcall PullDownMenuButtonStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PullDownMenuButtonStyle._body(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void __swiftcall BorderlessPullDownMenuButtonStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void BorderlessPullDownMenuButtonStyle._body(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void __swiftcall BorderlessButtonMenuButtonStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void BorderlessButtonMenuButtonStyle._body(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void __swiftcall _TexturedPullDownMenuButtonStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _TexturedPullDownMenuButtonStyle._body(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for MenuButtonStyle._Body : View in PullDownMenuButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for MenuButtonStyle._Body : View in BorderlessPullDownMenuButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for MenuButtonStyle._Body : View in BorderlessButtonMenuButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for MenuButtonStyle._Body : View in _TexturedPullDownMenuButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PullDownMenuButtonStyle()
{
  return &type metadata for PullDownMenuButtonStyle;
}

ValueMetadata *type metadata accessor for BorderlessPullDownMenuButtonStyle()
{
  return &type metadata for BorderlessPullDownMenuButtonStyle;
}

ValueMetadata *type metadata accessor for BorderlessButtonMenuButtonStyle()
{
  return &type metadata for BorderlessButtonMenuButtonStyle;
}

ValueMetadata *type metadata accessor for _TexturedPullDownMenuButtonStyle()
{
  return &type metadata for _TexturedPullDownMenuButtonStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>>, &lazy cache variable for type metadata for MenuStyleModifier<BorderedButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonMenuStyle and conformance BorderedButtonMenuStyle, (uint64_t)&type metadata for BorderedButtonMenuStyle);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content> and conformance Menu<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v3[1] = &protocol witness table for MenuStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>;
  if (!lazy cache variable for type metadata for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>)
    type metadata accessor for Menu();
  return result;
}

unint64_t lazy protocol witness table accessor for type BorderedButtonMenuStyle and conformance BorderedButtonMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BorderedButtonMenuStyle and conformance BorderedButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type BorderedButtonMenuStyle and conformance BorderedButtonMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BorderedButtonMenuStyle, &type metadata for BorderedButtonMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderedButtonMenuStyle and conformance BorderedButtonMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, &lazy cache variable for type metadata for MenuStyleModifier<BorderlessButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle, (uint64_t)&type metadata for BorderlessButtonMenuStyle);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content> and conformance Menu<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v3[1] = &protocol witness table for MenuStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>();
    type metadata accessor for MenuStyleModifier<BorderedButtonMenuStyle>(255, a3, a4, a5);
    v9 = type metadata accessor for ModifiedContent();
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>>)
  {
    type metadata accessor for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, &lazy cache variable for type metadata for MenuStyleModifier<BorderlessButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle, (uint64_t)&type metadata for BorderlessButtonMenuStyle);
    type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<TexturedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<TexturedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<TexturedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<TexturedButtonMenuStyle>>, &lazy cache variable for type metadata for MenuStyleModifier<TexturedButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TexturedButtonMenuStyle and conformance TexturedButtonMenuStyle, (uint64_t)&type metadata for TexturedButtonMenuStyle);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content> and conformance Menu<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v3[1] = &protocol witness table for MenuStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<TexturedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for MenuStyleModifier<BorderedButtonMenuStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for MenuStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type TexturedButtonMenuStyle and conformance TexturedButtonMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TexturedButtonMenuStyle and conformance TexturedButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type TexturedButtonMenuStyle and conformance TexturedButtonMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TexturedButtonMenuStyle, &type metadata for TexturedButtonMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TexturedButtonMenuStyle and conformance TexturedButtonMenuStyle);
  }
  return result;
}

uint64_t (*ContainerBackgroundBridge.transparentBackgroundSeedTracker.modify())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void ContainerBackgroundBridge.background.didset(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v6;
  id v7;
  id v8;
  char v9;
  id v10;
  uint64_t v11;
  uint64_t ObjectType;

  v3 = v2;
  v4 = *(void **)(v2 + 128);
  if (!v4)
  {
    if (!a1)
    {
      v10 = 0;
      return;
    }
    goto LABEL_10;
  }
  v6 = v4;
  if (!a1)
  {

LABEL_10:
    if (MEMORY[0x18D760234](v3 + 24))
    {
      v11 = *(_QWORD *)(v3 + 32);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(ObjectType, v11);
      swift_unknownObjectRelease();
    }
    return;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v7 = a1;
  v8 = v6;
  v9 = static NSObject.== infix(_:_:)();

  if ((v9 & 1) == 0 || !*(_QWORD *)(v3 + 128) || ((((a2 & 1) == 0) ^ *(unsigned __int8 *)(v3 + 136)) & 1) == 0)
    goto LABEL_10;
}

unsigned __int8 *ContainerBackgroundBridge.hostsBackgroundPlacement.didset(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  void *v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  int v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v2 = v1;
  v3 = *result;
  v4 = *(unsigned __int8 *)(v1 + 137);
  if (v3 == 5)
  {
    if (v4 == 5)
      return result;
LABEL_8:
    v6 = (void *)MEMORY[0x18D760234](v1 + 64);
    if (v6)
    {
      v7 = *(_QWORD *)(v1 + 72);
      ObjectType = swift_getObjectType();
      v9 = *(void (**)(uint64_t, uint64_t))(v7 + 16);
      v10 = v6;
      v9(ObjectType, v7);

      if (*(_BYTE *)(v1 + 137) != 5)
        ContainerBackgroundKind.Builtin.addPreference(to:)();
      swift_release();
      v11 = *(unsigned __int8 *)(v1 + 137);
      v12 = swift_getObjectType();
      v13 = v10;
      v9(v12, v7);

      if (v11 == 5)
      {
        GraphHost.removePreference<A>(_:)();
        swift_release();
LABEL_14:
        v14 = *(_QWORD *)(v1 + 80);
        v15 = *(_QWORD *)(v1 + 88);
        v16 = *(_QWORD *)(v1 + 96);
        v17 = *(_QWORD *)(v1 + 104);
        *(_QWORD *)(v1 + 80) = 0;
        *(_QWORD *)(v1 + 88) = 0;
        *(_QWORD *)(v1 + 96) = 0;
        *(_QWORD *)(v1 + 104) = 1;
        *(_QWORD *)(v1 + 112) = 0;
        *(_QWORD *)(v1 + 120) = 0;
        outlined consume of ContainerBackgroundValue?(v14, v15, v16, v17);
        v18 = 0;
        if (*(_QWORD *)(v1 + 104) != 1)
        {
          if ((*(_QWORD *)(v1 + 88) & 0x8000000000000000) != 0)
          {
            v18 = 0;
          }
          else
          {
            v18 = *(_QWORD *)(v1 + 80);
            swift_retain();
          }
        }
        ContainerBackgroundBridge.updateBackground(from:)(v18);

        swift_release();
        v19 = 1;
        result = (unsigned __int8 *)swift_beginAccess();
        *(_DWORD *)(v2 + 56) = 0;
        goto LABEL_21;
      }
      GraphHost.addPreference<A>(_:)();
      swift_release();

    }
    else if (*(_BYTE *)(v1 + 137) == 5)
    {
      goto LABEL_14;
    }
    result = (unsigned __int8 *)swift_beginAccess();
    v19 = 0;
    *(_DWORD *)(v2 + 56) = -1;
LABEL_21:
    *(_BYTE *)(v2 + 60) = v19;
    return result;
  }
  if (v4 == 5 || v3 != v4)
    goto LABEL_8;
  return result;
}

uint64_t ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(char a1)
{
  uint64_t v1;

  swift_unknownObjectWeakInit();
  *(_QWORD *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 60) = 1;
  *(_QWORD *)(v1 + 72) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 1;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 112) = 0;
  *(_WORD *)(v1 + 136) = 1280;
  *(_BYTE *)(v1 + 40) = a1;
  return v1;
}

uint64_t ContainerBackgroundBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_QWORD *, _QWORD *(*)(uint64_t), uint64_t);
  uint64_t v7;
  uint64_t (*v8)();
  _DWORD *v9;
  uint64_t v10;
  char v11;
  int v12;
  int v13;
  _QWORD v14[4];

  v2 = *a1;
  v14[0] = *a1;
  result = PreferenceList.seed.getter();
  if (v13 && *(_BYTE *)(v1 + 137) != 5)
  {
    v4 = *(_QWORD *)(v1 + 48);
    if (v4)
    {
      v14[0] = v2;
      v5 = swift_allocObject();
      swift_weakInit();
      v6 = *(void (**)(_QWORD *, _QWORD *(*)(uint64_t), uint64_t))(*(_QWORD *)v4 + 80);
      swift_retain();
      v6(v14, partial apply for closure #1 in ContainerBackgroundBridge.preferencesDidChange(_:), v5);
      swift_release();
      swift_release();
    }
    v8 = ContainerBackgroundBridge.transparentBackgroundSeedTracker.modify();
    if ((*(_BYTE *)(v7 + 4) & 1) != 0)
    {
      return ((uint64_t (*)(_QWORD *, _QWORD))v8)(v14, 0);
    }
    else
    {
      v9 = (_DWORD *)v7;
      swift_weakInit();
      v10 = v2;
      PreferenceList.subscript.getter();
      if (*v9 == -1 || v12 == -1 || *v9 != v12)
      {
        *v9 = v12;
        LOBYTE(v10) = v11;
        specialized closure #2 in ContainerBackgroundBridge.preferencesDidChange(_:)((unsigned __int8 *)&v10);
      }
      ((void (*)(_QWORD *, _QWORD))v8)(v14, 0);
      return swift_weakDestroy();
    }
  }
  return result;
}

_QWORD *closure #1 in ContainerBackgroundBridge.preferencesDidChange(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  swift_beginAccess();
  result = (_QWORD *)swift_weakLoadStrong();
  if (result)
  {
    v8 = result;
    v9 = result[11];
    v10 = result[12];
    v11 = result[13];
    v13 = result[10];
    result[10] = v1;
    result[11] = v2;
    result[12] = v3;
    result[13] = v5;
    result[14] = v4;
    result[15] = v6;
    outlined copy of ContainerBackgroundValue.Content(v1, v2);
    swift_retain();
    swift_retain();
    swift_retain();
    outlined consume of ContainerBackgroundValue?(v13, v9, v10, v11);
    if (v8[13] == 1 || (v8[11] & 0x8000000000000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      v12 = v8[10];
      swift_retain();
    }
    ContainerBackgroundBridge.updateBackground(from:)(v12);
    swift_release();
    return (_QWORD *)swift_release();
  }
  return result;
}

void specialized closure #2 in ContainerBackgroundBridge.preferencesDidChange(_:)(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t ObjectType;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v1 = *a1;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = Strong;
    v4 = (void *)MEMORY[0x18D760234](Strong + 64);
    v5 = *(_QWORD *)(v3 + 72);
    swift_release();
    if (v4)
    {
      ObjectType = swift_getObjectType();
      v7 = type metadata accessor for ContainerBackgroundHost();
      (*(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, uint64_t))(*(_QWORD *)(v5 + 8)
                                                                                                + 16))(v10, v7, v7, ObjectType);

      if (v10[0])
      {
        v8 = v10[1];
        v9 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))(8, v1, v9, v8);
        swift_unknownObjectRelease();
      }
    }
  }
}

uint64_t ContainerBackgroundBridge.update(environment:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v7[3];
  unsigned __int8 v8;

  v2 = *(unsigned __int8 *)(v1 + 137);
  v3 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v2 == 5)
  {
    if (v8 == 5)
      goto LABEL_19;
LABEL_9:
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v3)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (v7[2] == 5)
      v4 = 0;
    else
      ContainerBackgroundKind.Builtin.versionSeedTracker.getter();
    *(_QWORD *)(v1 + 48) = v4;
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v3)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v5 = *(_BYTE *)(v1 + 137);
    *(_BYTE *)(v1 + 137) = v7[1];
    v7[0] = v5;
    ContainerBackgroundBridge.hostsBackgroundPlacement.didset(v7);
    goto LABEL_19;
  }
  if (v8 == 5 || v2 != v8)
    goto LABEL_9;
LABEL_19:
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void ContainerBackgroundBridge.updateBackground(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  void *v8;
  char v9;
  Class v10;
  id v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  char v26;
  _QWORD *v27;
  id v28;

  v2 = v1;
  if (a1)
  {
    if (*(_BYTE *)(v1 + 40) == 1)
    {
      swift_retain();
      static Edge.Set.all.getter();
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE65E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
      lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
      swift_retain();
      v3 = AnyView.init<A>(_:)();
      v4 = *(void **)(v1 + 128);
      v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      if (v4)
      {
        v6 = v4;
        static Transaction.current.getter();
        v7 = (_QWORD *)((char *)v6 + *(_QWORD *)((*v5 & *v6) + 0x60));
        swift_beginAccess();
        *v7 = v3;
        swift_retain();
        swift_release();
        swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_retain();
        default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
        GraphHost.asyncTransaction(_:id:_:)();
        swift_release_n();
        swift_release();
      }
      else
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        v11 = objc_allocWithZone(v10);
        v6 = specialized _UIHostingView.init(rootView:)(v3);
      }
      v12 = *(_QWORD *)(v2 + 104);
      if (v12 == 1)
      {
        v13 = 0;
        v14 = 0;
        v15 = 1;
      }
      else
      {
        v16 = *(unsigned __int8 *)(v2 + 96);
        v13 = v16 & 1;
        v18 = *(_QWORD *)(v2 + 80);
        v17 = *(_QWORD *)(v2 + 88);
        v19 = ((unint64_t)*(unsigned int *)(v2 + 97) << 8) | ((unint64_t)(*(unsigned __int16 *)(v2 + 101) | (*(unsigned __int8 *)(v2 + 103) << 16)) << 40) | v16;
        outlined copy of ContainerBackgroundValue.Content(v18, v17);
        swift_retain();
        swift_retain();
        swift_retain();
        outlined consume of ContainerBackgroundValue?(v18, v17, v19, v12);
        v15 = *(_QWORD *)(v2 + 104);
        if (v15 == 1)
        {
          v14 = 0;
        }
        else
        {
          v14 = *(_QWORD *)(v2 + 112);
          v21 = *(_QWORD *)(v2 + 88);
          v20 = *(_QWORD *)(v2 + 96);
          v22 = *(_QWORD *)(v2 + 80);
          outlined copy of ContainerBackgroundValue?(v22, v21, v20, *(_QWORD *)(v2 + 104));
          swift_retain();
          swift_retain();
          outlined consume of ContainerBackgroundValue?(v22, v21, v20, v15);
        }
        v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      }
      v23 = (_QWORD *)((char *)v6 + *(_QWORD *)((*v5 & *v6) + 0x120));
      swift_beginAccess();
      v24 = *v23;
      *v23 = v15;
      v23[1] = v14;
      outlined consume of EnvironmentValues?(v24);
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      v25 = *(void **)(v2 + 128);
      *(_QWORD *)(v2 + 128) = v6;
      v26 = *(_BYTE *)(v2 + 136);
      *(_BYTE *)(v2 + 136) = v13;
      v27 = v6;
      ContainerBackgroundBridge.background.didset(v25, v26);
      swift_release();
      swift_release();

    }
  }
  else
  {
    v8 = *(void **)(v1 + 128);
    if (v8)
    {
      *(_QWORD *)(v1 + 128) = 0;
      v9 = *(_BYTE *)(v1 + 136);
      *(_BYTE *)(v1 + 136) = 0;
      v28 = v8;
      ContainerBackgroundBridge.background.didset(v8, v9);

    }
  }
}

uint64_t ContainerBackgroundBridge.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  outlined destroy of weak FallbackResponderProvider?(v0 + 24);
  swift_release();
  outlined destroy of weak FallbackResponderProvider?(v0 + 64);
  outlined consume of ContainerBackgroundValue?(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ContainerBackgroundBridge()
{
  return objc_opt_self();
}

uint64_t sub_1876AB4A8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t outlined copy of ContainerBackgroundValue?(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    outlined copy of ContainerBackgroundValue.Content(result, a2);
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1876AB51C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in ContainerBackgroundBridge.preferencesDidChange(_:)(uint64_t a1)
{
  return closure #1 in ContainerBackgroundBridge.preferencesDidChange(_:)(a1);
}

unint64_t type metadata accessor for ContainerBackgroundHost()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ContainerBackgroundHost;
  if (!lazy cache variable for type metadata for ContainerBackgroundHost)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ContainerBackgroundHost);
  }
  return result;
}

uint64_t associated type witness table accessor for Commands.Body : Commands in TextEditingCommands()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Commands.Body : Commands in TextFormattingCommands()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for TextEditingCommands()
{
  return &type metadata for TextEditingCommands;
}

ValueMetadata *type metadata accessor for TextFormattingCommands()
{
  return &type metadata for TextFormattingCommands;
}

uint64_t getEnumTagSinglePayload for PlatformItemsReader(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  uint64_t v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  v9 = v7 + 16;
  v10 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v11 = (v9 & ~v7) + *(_QWORD *)(v4 + 64) + (v9 & ~v8);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(_WORD *)((char *)a1 + v11))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v15 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v9 + (((unint64_t)a1 + v8 + 16) & ~v8)) & ~v7);
      v17 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v17) = -1;
      return (v17 + 1);
    }
  }
  v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((_BYTE *)a1 + v11))
    goto LABEL_22;
LABEL_15:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v6 + v16 + 1;
  if (v11 > 3)
    LODWORD(v11) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876AB6C8 + 4 * byte_187C4F730[(v11 - 1)]))();
}

void storeEnumTagSinglePayload for PlatformItemsReader(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + ((v7 + 16) & ~(v7 | 7));
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + ((v7 + 16) & ~(v7 | 7)));
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + ((v7 + 16) & ~(v7 | 7)));
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_1876AB9B8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1876AB9A4);
}

void sub_1876AB9C0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1876AB9A4);
}

void sub_1876AB9D0()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1876AB9A4);
}

void type metadata accessor for PlatformItemsReader()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t getEnumTagSinglePayload for PlatformItemTraitWriter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876ABA98 + 4 * byte_187C4F742[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PlatformItemTraitWriter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void type metadata accessor for PlatformItemTraitWriter()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformItemTraitWriter<A, B, C>()
{
  return &protocol witness table for PlatformItemTraitWriter<A, B, C>;
}

_UNKNOWN **base witness table accessor for View in PlatformItemsReader<A, B, C>()
{
  return &protocol witness table for PlatformItemsReader<A, B, C>;
}

void PlatformItemsReader.init(for:content:source:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for ZStack();
  MEMORY[0x1E0C80A78](v9, v10);
  *a5 = a2;
  a5[1] = a3;
  swift_retain();
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
  type metadata accessor for PlatformItemsReader();
}

uint64_t sub_1876ABDC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 240) + 32))(v1 + *(int *)(a1 + 68), v2, *(_QWORD *)(v3 - 232));
}

void View.platformItemTrait<A, B, C>(for:strategy:source:)()
{
  type metadata accessor for PlatformItemTraitWriter();
}

uint64_t sub_1876ABE54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[80];

  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = &v14[-v9];
  v13 = v3;
  v11 = *(_QWORD *)(v6 - 152);
  closure #1 in View.platformItemTrait<A, B, C>(for:strategy:source:)(*(_QWORD *)(v6 - 168), *(_QWORD *)(v6 - 160), v2, (uint64_t)&v14[-v9], v4, v13);
  MEMORY[0x18D75B4AC](v10, v11, a1, v5);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, a1);
}

void View.platformItemLabelTrait<A, B>(for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[3];

  type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>(255);
  v9 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for ModifiedContent();
  v11 = type metadata accessor for ModifiedContent();
  v15[0] = a9;
  v15[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v12 = MEMORY[0x1E0CE2E70];
  v14[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v15);
  v14[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v13[0] = MEMORY[0x18D75FFDC](v12, v10, v14);
  v13[1] = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  MEMORY[0x18D75FFDC](v12, v11, v13);
  View.platformItemTrait<A, B, C>(for:strategy:source:)();
}

void static PlatformItemsReader._makeView(view:inputs:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[62];

  v16[15] = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v16[12] = (char *)v16 - v15;
  v16[49] = a1;
  v16[50] = a2;
  v16[51] = a3;
  v16[52] = a4;
  v16[53] = a5;
  v16[54] = a6;
  type metadata accessor for PlatformItemsReader.Child();
}

void sub_1876AC0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  *(_QWORD *)(v9 + 104) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v9 + 112) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 + 88) = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)(v9 + 80) = (char *)&a9 - v22;
  v23 = *v14;
  *(_DWORD *)(v9 + 44) = *v14;
  v24 = *v10;
  *(_QWORD *)(v9 + 168) = v10[2];
  *(_QWORD *)(v9 + 176) = v24;
  v25 = *((_DWORD *)v10 + 6);
  *(_DWORD *)(v9 + 160) = *((_DWORD *)v10 + 7);
  *(_DWORD *)(v9 + 164) = v25;
  v26 = *((_DWORD *)v10 + 8);
  *(_DWORD *)(v9 + 152) = *((_DWORD *)v10 + 9);
  *(_DWORD *)(v9 + 156) = v26;
  v27 = v10[5];
  *(_QWORD *)(v9 + 136) = v10[6];
  *(_QWORD *)(v9 + 144) = v27;
  LODWORD(v27) = *((_DWORD *)v10 + 14);
  *(_DWORD *)(v9 + 128) = *((_DWORD *)v10 + 15);
  *(_DWORD *)(v9 + 132) = v27;
  LODWORD(v27) = *((_DWORD *)v10 + 16);
  *(_DWORD *)(v9 + 200) = *((_DWORD *)v10 + 17);
  *(_DWORD *)(v9 + 204) = v27;
  LODWORD(v27) = *((_DWORD *)v10 + 18);
  *(_DWORD *)(v9 + 192) = *((_DWORD *)v10 + 19);
  *(_DWORD *)(v9 + 196) = v27;
  *(_DWORD *)(v9 + 188) = *((_DWORD *)v10 + 20);
  *(_QWORD *)(v9 + 16) = v16;
  *(_QWORD *)(v9 + 24) = v15;
  *(_QWORD *)(v9 + 224) = v15;
  *(_QWORD *)(v9 + 232) = v17;
  *(_QWORD *)(v9 + 64) = v11;
  *(_QWORD *)(v9 + 72) = v17;
  *(_QWORD *)(v9 + 240) = v13;
  *(_QWORD *)(v9 + 248) = v16;
  *(_QWORD *)(v9 + 256) = v11;
  *(_QWORD *)(v9 + 264) = v12;
  *(_DWORD *)(v9 + 304) = v23;
  *(_QWORD *)(v18 - 184) = v15;
  *(_QWORD *)(v18 - 176) = v17;
  *(_QWORD *)(v18 - 168) = v13;
  *(_QWORD *)(v18 - 160) = v16;
  *(_QWORD *)(v9 + 48) = v12;
  *(_QWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v18 - 152) = v11;
  *(_QWORD *)(v18 - 144) = v12;
  type metadata accessor for PlatformItemsReader();
}

void sub_1876AC1DC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int OffsetAttribute2;

  *(_QWORD *)(v0 + 32) = type metadata accessor for _GraphValue();
  *(_QWORD *)(v0 + 8) = type metadata accessor for ZStack();
  _GraphValue.subscript.getter();
  *(_QWORD *)(v3 - 184) = v1;
  *(_DWORD *)(v0 + 40) = v2;
  *(_DWORD *)(v3 - 176) = v2;
  v4 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v3 - 168) = v4;
  v6 = *(_DWORD *)(v0 + 160);
  v5 = *(_DWORD *)(v0 + 164);
  *(_DWORD *)(v3 - 160) = v5;
  *(_DWORD *)(v3 - 156) = v6;
  v8 = *(_DWORD *)(v0 + 152);
  v7 = *(_DWORD *)(v0 + 156);
  *(_DWORD *)(v3 - 152) = v7;
  *(_DWORD *)(v3 - 148) = v8;
  v9 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v3 - 144) = v10;
  *(_QWORD *)(v3 - 136) = v9;
  LODWORD(v9) = *(_DWORD *)(v0 + 128);
  *(_DWORD *)(v3 - 128) = *(_DWORD *)(v0 + 132);
  *(_DWORD *)(v3 - 124) = v9;
  LODWORD(v9) = *(_DWORD *)(v0 + 200);
  *(_DWORD *)(v3 - 120) = *(_DWORD *)(v0 + 204);
  *(_DWORD *)(v3 - 116) = v9;
  LODWORD(v9) = *(_DWORD *)(v0 + 192);
  *(_DWORD *)(v3 - 112) = *(_DWORD *)(v0 + 196);
  *(_DWORD *)(v3 - 108) = v9;
  *(_DWORD *)(v3 - 104) = *(_DWORD *)(v0 + 188);
  PreferenceKeys.init()();
  *(_QWORD *)(v0 + 288) = *(_QWORD *)(v0 + 304);
  *(_BYTE *)(v3 - 185) = 0;
  *(_DWORD *)(v0 + 4) = _ViewInputs.intern<A>(_:id:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 304) = *(_QWORD *)(v0 + 176);
  *(_DWORD *)(v0 + 312) = v2;
  *(_QWORD *)(v0 + 320) = v4;
  *(_DWORD *)(v0 + 328) = v5;
  *(_DWORD *)(v0 + 332) = v6;
  *(_DWORD *)(v0 + 336) = v7;
  *(_DWORD *)(v0 + 340) = v8;
  v11 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 344) = v10;
  *(_QWORD *)(v0 + 352) = v11;
  LODWORD(v4) = *(_DWORD *)(v0 + 128);
  *(_DWORD *)(v0 + 360) = *(_DWORD *)(v0 + 132);
  *(_DWORD *)(v0 + 364) = v4;
  *(_DWORD *)(v0 + 368) = *(_DWORD *)(v0 + 204);
  *(_DWORD *)(v0 + 372) = *(_DWORD *)(v0 + 200);
  *(_DWORD *)(v0 + 376) = *(_DWORD *)(v0 + 196);
  *(_DWORD *)(v0 + 380) = *(_DWORD *)(v0 + 192);
  *(_DWORD *)(v0 + 384) = *(_DWORD *)(v0 + 188);
  _ViewInputs.withoutGeometryDependencies.getter();
  PreferencesInputs.init(hostKeys:)();
  v12 = *(_QWORD *)(v0 + 304);
  v13 = *(_DWORD *)(v0 + 312);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 - 136) = v12;
  *(_DWORD *)(v3 - 128) = v13;
  v14 = *(_QWORD *)(v0 + 16);
  v15 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v3 - 184, v15, v14);
  v16 = *(_OWORD *)(v0 + 432);
  *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 416);
  v17 = *(_DWORD *)(v3 - 176);
  v18 = *(_QWORD *)(v3 - 168);
  v19 = *(_DWORD *)(v3 - 104);
  *(_QWORD *)(v0 + 304) = *(_QWORD *)(v3 - 184);
  *(_DWORD *)(v0 + 312) = v17;
  *(_QWORD *)(v0 + 320) = v18;
  *(_OWORD *)(v0 + 344) = v16;
  *(_OWORD *)(v0 + 360) = *(_OWORD *)(v0 + 448);
  *(_QWORD *)(v0 + 376) = *(_QWORD *)(v3 - 112);
  *(_DWORD *)(v0 + 384) = v19;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], *(_QWORD *)(v0 + 8));
  static View.makeDebuggableView(view:inputs:)();
  v20 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 304) = *(_QWORD *)(v0 + 288);
  *(_QWORD *)(v0 + 312) = v20;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 56))(v0 + 304, v15, v14);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v0 + 304) = *(_DWORD *)(v0 + 44);
  _GraphValue.value.getter();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v15, v14);
  PlatformItemsReader.Child.init(content:viewContent:oldContent:)(v21, OffsetAttribute2, *(_DWORD **)(v0 + 80));
}

uint64_t sub_1876AC478()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v0 + 104);
  v6 = v1;
  v7 = v1;
  v8 = *(_QWORD *)(v0 + 112);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 16))(*(_QWORD *)(v0 + 88), v6, v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsReader<A, B, C>.Child, v8);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v0 + 304) = *(_QWORD *)(v0 + 176);
  *(_DWORD *)(v0 + 312) = *(_DWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 320) = *(_QWORD *)(v0 + 168);
  *(_DWORD *)(v0 + 328) = *(_DWORD *)(v0 + 164);
  *(_DWORD *)(v0 + 332) = *(_DWORD *)(v0 + 160);
  *(_DWORD *)(v0 + 336) = *(_DWORD *)(v0 + 156);
  *(_DWORD *)(v0 + 340) = *(_DWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 344) = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 352) = v3;
  *(_DWORD *)(v0 + 360) = v4;
  *(_DWORD *)(v0 + 364) = v2;
  *(_DWORD *)(v0 + 368) = *(_DWORD *)(v0 + 204);
  *(_DWORD *)(v0 + 372) = *(_DWORD *)(v0 + 200);
  *(_DWORD *)(v0 + 376) = *(_DWORD *)(v0 + 196);
  *(_DWORD *)(v0 + 380) = *(_DWORD *)(v0 + 192);
  *(_DWORD *)(v0 + 384) = *(_DWORD *)(v0 + 188);
  static View.makeDebuggableView(view:inputs:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void closure #1 in static PlatformItemsReader._makeView(view:inputs:)()
{
  type metadata accessor for PlatformItemsReader();
}

uint64_t sub_1876AC5E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v2 = v1 + *(int *)(a1 + 68);
  v6[2] = a1;
  v7 = type metadata accessor for ZStack();
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v7, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void PlatformItemsReader.Child.init(content:viewContent:oldContent:)(int a1@<W0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for PlatformItemsReader.Child();
}

uint64_t sub_1876AC6B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v2 + *(int *)(a1 + 72);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, v1, AssociatedTypeWitness);
}

void PlatformItemsReader.Child.updateValue()(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *Value;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  int v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  _DWORD *v42;
  unsigned __int8 v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;

  v3 = v2;
  v73 = *MEMORY[0x1E0C80C00];
  v64 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v63 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 24);
  v66 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v65 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v69 = *(_QWORD *)(v10 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v58 - v19;
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v70 = (char *)&v58 - v24;
  v72 = v7;
  swift_getFunctionTypeMetadata1();
  Value = (uint64_t *)AGGraphGetValue();
  v27 = *Value;
  v26 = Value[1];
  v61 = v28;
  v62 = v27;
  v29 = *(int *)(TupleTypeMetadata2 + 48);
  v71 = v3;
  LODWORD(v27) = *v3;
  v30 = *MEMORY[0x1E0CFED28];
  v67 = v26;
  v68 = v21;
  if ((_DWORD)v27 == v30)
  {
    v38 = v69;
    v39 = *(void (**)(uint64_t, uint64_t))(v69 + 16);
    swift_retain();
    v39(v11, v38);
    v36 = 0;
    v35 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v37 = v38;
  }
  else
  {
    v31 = AGGraphGetValue();
    v33 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v16, v31, AssociatedTypeWitness);
    v16[v29] = v33 & 1;
    v34 = *(int *)(TupleTypeMetadata2 + 48);
    v35 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v35(v20, v16, AssociatedTypeWitness);
    v36 = v16[v34];
    swift_retain();
    v37 = v69;
  }
  v40 = AssociatedTypeWitness;
  v20[v29] = v36;
  v41 = v70;
  v69 = v40;
  ((void (*)(char *, char *))v35)(v70, v20);
  v42 = v71;
  v43 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v37 + 40))((char *)v71 + *(int *)(a1 + 72), v41, v11, v37);
  v44 = v72;
  if (!AGGraphGetOutputValue() || ((v36 != 0) & v43) != 0 || (v61 & 1) != 0)
  {
    v45 = v63;
    v46 = v64;
    v47 = (*(uint64_t (**)(char *, _DWORD *, uint64_t))(v64 + 16))(v63, v42, a1);
    v58 = (uint64_t)&v58;
    v49 = MEMORY[0x1E0C80A78](v47, v48);
    *(&v58 - 10) = v11;
    *(&v58 - 9) = v44;
    v60 = *(_QWORD *)(a1 + 32);
    v61 = v11;
    *(&v58 - 8) = v60;
    *(&v58 - 7) = v37;
    v50 = *(_QWORD *)(a1 + 56);
    v59 = *(_QWORD *)(a1 + 48);
    *(&v58 - 6) = v59;
    *(&v58 - 5) = v50;
    v51 = v67;
    *(&v58 - 4) = v62;
    *(&v58 - 3) = v51;
    *(&v58 - 2) = (uint64_t)v41;
    v52 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsReader<A, B, C>.Child, a1, v49);
    v53 = (uint64_t)v65;
    StatefulRule.withObservation<A>(do:)();
    v54 = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v45, a1);
    MEMORY[0x1E0C80A78](v54, v55);
    *(&v58 - 2) = a1;
    *(&v58 - 1) = v52;
    v56 = v72;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v53, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v58 - 4), v72, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v57);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v53, v56);
  }
  $defer #1 <A, B, C>() in PlatformItemsReader.Child.updateValue()();
}

uint64_t sub_1876ACB24()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 144) + 8))(v0, *(_QWORD *)(v1 - 136));
}

void $defer #1 <A, B, C>() in PlatformItemsReader.Child.updateValue()()
{
  type metadata accessor for PlatformItemsReader.Child();
}

uint64_t sub_1876ACBB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v2 + *(int *)(a1 + 72);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 24))(v3, v1, AssociatedTypeWitness);
}

void protocol witness for static View._makeView(view:inputs:) in conformance PlatformItemsReader<A, B, C>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  static PlatformItemsReader._makeView(view:inputs:)(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PlatformItemsReader<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsReader<A, B, C>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PlatformItemsReader<A, B, C>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsReader<A, B, C>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance PlatformItemsReader<A, B, C>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsReader<A, B, C>, a1);
  specialized PrimitiveView.body.getter();
}

void static PlatformItemTraitWriter._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  _QWORD v22[12];
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_DWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_BYTE *)(a2 + 80);
  v22[11] = *(_QWORD *)a2;
  v23 = v8;
  v24 = v9;
  v25 = v10;
  v26 = v11;
  v27 = v12;
  v28 = v13;
  v29 = v15;
  v30 = v14;
  v31 = v16;
  v32 = v17;
  v33 = v18;
  v34 = v19;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  _ViewInputs.init(withoutGeometry:)();
  _ViewInputs.withoutGeometryDependencies.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(_QWORD *, uint64_t, _QWORD))(*(_QWORD *)(a8 + 8) + 48))(v22, a5, *(_QWORD *)(a8 + 8));
  type metadata accessor for PlatformItemTraitWriter();
}

void sub_1876ACF08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  v4 = *(_DWORD *)(v0 + 888);
  v5 = *(_QWORD *)(v0 + 896);
  v6 = *(_DWORD *)(v0 + 960);
  *(_QWORD *)(v0 + 536) = *(_QWORD *)(v0 + 880);
  *(_DWORD *)(v0 + 544) = v4;
  *(_QWORD *)(v0 + 552) = v5;
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 904);
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 920);
  *(_OWORD *)(v0 + 592) = *(_OWORD *)(v0 + 936);
  *(_QWORD *)(v0 + 608) = *(_QWORD *)(v0 + 952);
  *(_DWORD *)(v0 + 616) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 24))(v0 + 184, v0 + 536, v3, v2);
  v7 = *(_DWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 536) = *(_QWORD *)(v0 + 192);
  *(_DWORD *)(v0 + 544) = v7;
  v8 = PreferencesOutputs.subscript.getter();
  if ((v8 & 0x100000000) != 0)
  {
    v10 = *MEMORY[0x1E0CFED28];
    swift_bridgeObjectRelease();
    v9 = v10;
  }
  else
  {
    *(_DWORD *)(v0 + 536) = v8;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem();
    v9 = Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    v10 = *MEMORY[0x1E0CFED28];
  }
  *(_QWORD *)(v0 + 536) = *(_QWORD *)(v0 + 104);
  *(_DWORD *)(v0 + 544) = *(_DWORD *)(v0 + 100);
  *(_QWORD *)(v0 + 552) = *(_QWORD *)(v0 + 88);
  *(_DWORD *)(v0 + 560) = *(_DWORD *)(v0 + 84);
  *(_DWORD *)(v0 + 564) = *(_DWORD *)(v0 + 80);
  *(_DWORD *)(v0 + 568) = *(_DWORD *)(v0 + 76);
  *(_DWORD *)(v0 + 572) = *(_DWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 576) = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 584) = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 592) = *(_QWORD *)(v0 + 48);
  *(_DWORD *)(v0 + 600) = *(_DWORD *)(v0 + 44);
  *(_QWORD *)(v0 + 608) = *(_QWORD *)(v0 + 32);
  *(_BYTE *)(v0 + 616) = *(_DWORD *)(v0 + 28);
  v11 = _ViewListInputs.traits.getter();
  if ((v11 & 0x100000000) != 0)
    v12 = v10;
  else
    v12 = v11;
  v13 = *(_QWORD *)(v0 + 152);
  (*(void (**)(uint64_t, uint64_t))(v1 + 16))(v13, v1);
  *(_DWORD *)(v0 + 536) = v9;
  *(_DWORD *)(v0 + 540) = v12;
  *(_QWORD *)(v0 + 192) = v13;
  *(_QWORD *)(v0 + 200) = v3;
  v14 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 208) = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 216) = v14;
  v15 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 224) = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 232) = v15;
  type metadata accessor for PlatformItemTraitWriter.AddTrait();
}

uint64_t sub_1876AD10C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD v21[16];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1 + 192, v1 + 536, a1);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v21[2] = a1;
  v21[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemTraitWriter<A, B, C>.AddTrait, a1, v8);
  type metadata accessor for Attribute<ViewTraitCollection>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 192, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_20, (uint64_t)v21, a1, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v11(v1 + 192, a1);
  *(_BYTE *)(v1 + 192) = 0;
  _ViewListInputs.traits.setter();
  v12 = *(_QWORD *)(v3 - 112);
  v13 = *(_BYTE *)(v3 - 104);
  if (v12)
  {
    *(_QWORD *)(v1 + 192) = v12;
    *(_BYTE *)(v1 + 200) = v13 & 1;
    specialized Set._Variant.insert(_:)((uint64_t *)(v1 + 184), v2);
    v14 = *(_QWORD *)(v1 + 192);
    v13 = *(_BYTE *)(v1 + 200);
    *(_QWORD *)(v3 - 112) = v14;
    *(_BYTE *)(v3 - 104) = v13;
  }
  else
  {
    v14 = 0;
  }
  v15 = *(_DWORD *)(v3 - 176);
  v16 = *(_QWORD *)(v3 - 168);
  v17 = *(_QWORD *)(v3 - 144);
  v18 = *(_DWORD *)(v3 - 120);
  *(_QWORD *)(v1 + 192) = *(_QWORD *)(v3 - 184);
  *(_DWORD *)(v1 + 200) = v15;
  *(_QWORD *)(v1 + 208) = v16;
  *(_OWORD *)(v1 + 216) = *(_OWORD *)(v1 + 992);
  *(_QWORD *)(v1 + 232) = v17;
  *(_OWORD *)(v1 + 240) = *(_OWORD *)(v1 + 1016);
  *(_DWORD *)(v1 + 256) = v18;
  *(_QWORD *)(v1 + 264) = v14;
  *(_BYTE *)(v1 + 272) = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v19 = swift_bridgeObjectRetain();
  (*(void (**)(uint64_t, uint64_t))(v1 + 128))(v19, v1 + 192);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v11(v1 + 536, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t PlatformItemTraitWriter.AddTrait.updateValue()(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  int v4;
  uint64_t Value;
  char v6;
  char v7;
  int v8;
  uint64_t *v9;
  char v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _BYTE __src[344];
  _QWORD __dst[44];

  v2 = v1;
  __dst[43] = *MEMORY[0x1E0C80C00];
  v4 = *MEMORY[0x1E0CFED28];
  if (*v1 == *MEMORY[0x1E0CFED28])
  {
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16))(__dst);
    v8 = 0;
  }
  else
  {
    Value = AGGraphGetValue();
    v7 = v6;
    outlined init with copy of PlatformItem(Value, (uint64_t)__src);
    memcpy(__dst, __src, 0x150uLL);
    v8 = v7 & 1;
  }
  memcpy(__src, __dst, 0x150uLL);
  if (v2[1] == v4 || (v9 = (uint64_t *)AGGraphGetValue(), v11 = v10, v12 = *v9, swift_bridgeObjectRetain(), !v12))
  {
    ViewTraitCollection.init()();
    v13 = 0;
    v12 = __dst[0];
  }
  else
  {
    v13 = v11 & 1;
  }
  v14 = (uint64_t)(v2 + 2);
  v15 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))(v14, __src);
  if (!AGGraphGetOutputValue() || (v8 & v15 & 1) != 0 || v13)
  {
    outlined init with copy of PlatformItem((uint64_t)__src, (uint64_t)__dst);
    ViewTraitCollection.subscript.setter();
    __dst[0] = v12;
    AGGraphSetOutputValue();
  }
  swift_bridgeObjectRelease();
  outlined assign with copy of PlatformItem((uint64_t)__src, v14);
  return outlined destroy of PlatformItem((uint64_t)__src);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemTraitWriter<A, B, C>.AddTrait(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemTraitWriter<A, B, C>.AddTrait, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformItemTraitWriter<A, B, C>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OnChangeOfSuggestionsModifier(a1, a2, a3);
}

void protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PlatformItemTraitWriter<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  static PlatformItemTraitWriter._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5]);
}

uint64_t closure #1 in View.platformItemTrait<A, B, C>(for:strategy:source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16(v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a6);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, a3);
}

void closure #1 in View.platformItemLabelTrait<A, B>(for:_:)(void (*a1)(double)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(double);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  _QWORD v33[2];
  uint64_t v34;

  v31 = a5;
  v7 = *(_QWORD *)(a3 - 8);
  v25 = a1;
  v26 = v7;
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>(255);
  v10 = type metadata accessor for ModifiedContent();
  v27 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v25 - v12;
  v14 = type metadata accessor for ModifiedContent();
  v29 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v16 = type metadata accessor for ModifiedContent();
  v30 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v28 = (char *)&v25 - v21;
  v25(v20);
  v22 = lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon();
  View.input<A>(_:)((uint64_t)&type metadata for AccessibilityShowsLabelIcon, a3, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, a4, v22);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, a3);
  if (one-time initialization token for combine != -1)
    swift_once();
  v34 = static AccessibilityChildBehavior.combine;
  v33[0] = a4;
  v33[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v23 = MEMORY[0x1E0CE2E70];
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v33);
  View._accessibilityElement(children:)(&v34, v10, v24);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v10);
  v32[0] = v24;
  v32[1] = &protocol witness table for AccessibilityAttachmentModifier;
  MEMORY[0x18D75FFDC](v23, v14, v32);
  View.accessibilityApplyDetachedProperties()();
}

void type metadata accessor for PlatformItemTraitWriter.AddTrait()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem;
  if (!lazy protocol witness table cache variable for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ViewOutputs.FirstItem, &type metadata for _ViewOutputs.FirstItem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem);
  }
  return result;
}

void type metadata accessor for PlatformItemsReader.Child()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #1 in static PlatformItemsReader._makeView(view:inputs:)()
{
  closure #1 in static PlatformItemsReader._makeView(view:inputs:)();
}

uint64_t partial apply for closure #1 in PlatformItemsReader.init(for:content:source:)()
{
  return partial apply for closure #1 in PlatformItemsReader.init(for:content:source:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in PlatformItemListReader.init(flags:content:source:));
}

uint64_t partial apply for closure #1 in View.platformItemLabelTrait<A, B>(for:_:)()
{
  return partial apply for closure #1 in PlatformItemsReader.init(for:content:source:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in View.platformItemLabelTrait<A, B>(for:_:));
}

uint64_t partial apply for closure #1 in PlatformItemsReader.init(for:content:source:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

void type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>)
  {
    v2 = lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>);
  }
}

uint64_t type metadata completion function for PlatformItemsReader.Child()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlatformItemsReader.Child(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 | 3uLL) > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 8) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(v6 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v10 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v11 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v10 = *v11;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v10 + v6 + 4) & ~v6, ((unint64_t)v11 + v6 + 4) & ~v6, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t destroy for PlatformItemsReader.Child(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((v1 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

_DWORD *initializeWithCopy for PlatformItemsReader.Child(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *assignWithCopy for PlatformItemsReader.Child(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *initializeWithTake for PlatformItemsReader.Child(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *assignWithTake for PlatformItemsReader.Child(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemsReader.Child(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v6)
    goto LABEL_20;
  v8 = ((v7 + 8) & ~v7) + *(_QWORD *)(v5 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_20;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_20;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_20:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 4) & ~v7, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_20;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v13 = v8;
    else
      v13 = 4;
    __asm { BR              X11 }
  }
  return (v6 + v12 + 1);
}

void storeEnumTagSinglePayload for PlatformItemsReader.Child(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t destroy for PlatformItemTraitWriter.AddTrait(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int v4;

  swift_bridgeObjectRelease();
  v2 = *(void **)(a1 + 32);
  if (v2 != (void *)1)
  {

    v3 = *(_QWORD *)(a1 + 176);
    if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v4 = *(unsigned __int8 *)(a1 + 64);
      if (v4 != 255)
        outlined consume of GraphicsImage.Contents(*(void **)(a1 + 56), v4);
      if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), v3);
      swift_unknownObjectRelease();
      swift_release();

    }
    swift_release();
  }
  if (*(_QWORD *)(a1 + 296) >= 2uLL)
    __swift_destroy_boxed_opaque_existential_1(a1 + 272);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlatformItemTraitWriter.AddTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  void *v14;
  _OWORD *v15;
  id *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  id v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _OWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v5 = a2 + 32;
  v6 = *(void **)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v6 == (void *)1)
  {
    v7 = *(_OWORD *)(v5 + 176);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(v5 + 160);
    *(_OWORD *)(a1 + 208) = v7;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(v5 + 192);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(v5 + 208);
    v8 = *(_OWORD *)(v5 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(v5 + 96);
    *(_OWORD *)(a1 + 144) = v8;
    v9 = *(_OWORD *)(v5 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(v5 + 128);
    *(_OWORD *)(a1 + 176) = v9;
    v10 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(a1 + 80) = v10;
    v11 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(a1 + 112) = v11;
    v12 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 48) = v12;
  }
  else
  {
    v13 = *(void **)(a2 + 40);
    v14 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    v15 = (_OWORD *)(a1 + 56);
    v16 = (id *)(a2 + 56);
    v17 = *(_QWORD *)(a2 + 176);
    v18 = v6;
    v19 = v13;
    v20 = v14;
    if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFCLL)
    {
      v21 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v21;
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
      v22 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v22;
      v23 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v23;
      v24 = *(_OWORD *)(a2 + 72);
      *v15 = *(_OWORD *)v16;
      *(_OWORD *)(a1 + 72) = v24;
      v25 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v25;
    }
    else
    {
      v26 = *(unsigned __int8 *)(a2 + 64);
      if (v26 == 255)
      {
        *(_QWORD *)v15 = *v16;
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      }
      else
      {
        v27 = *v16;
        outlined copy of GraphicsImage.Contents(*v16, *(_BYTE *)(a2 + 64));
        *(_QWORD *)(a1 + 56) = v27;
        *(_BYTE *)(a1 + 64) = v26;
      }
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 100);
      *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      v28 = *(_OWORD *)(a2 + 136);
      *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
      *(_OWORD *)(a1 + 136) = v28;
      if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
      {
        v29 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v29;
      }
      else
      {
        v30 = *(_QWORD *)(a2 + 160);
        v31 = *(_QWORD *)(a2 + 168);
        v32 = *(_QWORD *)(a2 + 184);
        outlined copy of AccessibilityImageLabel(v30, v31, v17);
        *(_QWORD *)(a1 + 160) = v30;
        *(_QWORD *)(a1 + 168) = v31;
        *(_QWORD *)(a1 + 176) = v17;
        *(_QWORD *)(a1 + 184) = v32;
      }
      v33 = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = v33;
      *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
      *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      v34 = *(void **)(a2 + 224);
      *(_QWORD *)(a1 + 224) = v34;
      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
      swift_unknownObjectRetain();
      swift_retain();
      v35 = v34;
    }
    *(_BYTE *)(a1 + 235) = *(_BYTE *)(a2 + 235);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    swift_retain();
  }
  v36 = *(_QWORD *)(a2 + 296);
  if (v36 == 1)
  {
    v37 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v37;
    v38 = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 296) = v38;
  }
  else
  {
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v39 = (_OWORD *)(a1 + 272);
    v40 = (_OWORD *)(a2 + 272);
    if (v36)
    {
      v41 = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 296) = v36;
      *(_QWORD *)(a1 + 304) = v41;
      (**(void (***)(_OWORD *, _OWORD *))(v36 - 8))(v39, v40);
    }
    else
    {
      v42 = *(_OWORD *)(a2 + 288);
      *v39 = *v40;
      *(_OWORD *)(a1 + 288) = v42;
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    }
  }
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  v43 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v43;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlatformItemTraitWriter.AddTrait(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  void *v5;
  void *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  void *v29;
  _OWORD *v30;
  id *v31;
  unint64_t v32;
  id v33;
  id v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  _OWORD *v52;
  id *v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  id v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  id v76;
  int v77;
  id v78;
  void *v79;
  char v80;
  id v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  void *v91;
  id v92;
  id v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  unint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  void *v103;
  id v104;
  id v105;
  char v106;
  id v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _OWORD *v111;
  _OWORD *v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  void *v127;
  void *v128;
  id v129;
  __int128 *v130;
  __int128 *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _OWORD *v140;
  __int128 *v141;
  uint64_t v142;
  __int128 *v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v7 = (_OWORD *)(a2 + 32);
  v6 = *(void **)(a2 + 32);
  if (v5 == (void *)1)
  {
    if (v6 == (void *)1)
    {
      v8 = *(_OWORD *)(a2 + 48);
      *v4 = *v7;
      *(_OWORD *)(a1 + 48) = v8;
      v9 = *(_OWORD *)(a2 + 64);
      v10 = *(_OWORD *)(a2 + 80);
      v11 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 64) = v9;
      *(_OWORD *)(a1 + 80) = v10;
      v12 = *(_OWORD *)(a2 + 128);
      v13 = *(_OWORD *)(a2 + 144);
      v14 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v14;
      *(_OWORD *)(a1 + 128) = v12;
      *(_OWORD *)(a1 + 144) = v13;
      v15 = *(_OWORD *)(a2 + 192);
      v16 = *(_OWORD *)(a2 + 208);
      v17 = *(_OWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 208) = v16;
      *(_OWORD *)(a1 + 224) = v17;
      *(_OWORD *)(a1 + 192) = v15;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v6;
      v28 = *(void **)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v28;
      v29 = *(void **)(a2 + 48);
      *(_QWORD *)(a1 + 48) = v29;
      v30 = (_OWORD *)(a1 + 56);
      v31 = (id *)(a2 + 56);
      v32 = *(_QWORD *)(a2 + 176);
      v33 = v6;
      v34 = v28;
      v35 = v29;
      if (v32 >> 1 == 4294967294)
      {
        v36 = *(_OWORD *)v31;
        v37 = *(_OWORD *)(a2 + 72);
        v38 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = v38;
        *v30 = v36;
        *(_OWORD *)(a1 + 72) = v37;
        v39 = *(_OWORD *)(a2 + 120);
        v40 = *(_OWORD *)(a2 + 136);
        v41 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 168) = v41;
        *(_OWORD *)(a1 + 120) = v39;
        *(_OWORD *)(a1 + 136) = v40;
        v42 = *(_OWORD *)(a2 + 184);
        v43 = *(_OWORD *)(a2 + 200);
        v44 = *(_OWORD *)(a2 + 216);
        *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
        *(_OWORD *)(a1 + 200) = v43;
        *(_OWORD *)(a1 + 216) = v44;
        *(_OWORD *)(a1 + 184) = v42;
      }
      else
      {
        v64 = *(unsigned __int8 *)(a2 + 64);
        if (v64 == 255)
        {
          v81 = *v31;
          *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
          *(_QWORD *)v30 = v81;
        }
        else
        {
          v65 = *v31;
          outlined copy of GraphicsImage.Contents(*v31, *(_BYTE *)(a2 + 64));
          *(_QWORD *)(a1 + 56) = v65;
          *(_BYTE *)(a1 + 64) = v64;
        }
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
        v82 = *(_OWORD *)(a2 + 100);
        *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
        *(_OWORD *)(a1 + 100) = v82;
        v83 = *(_OWORD *)(a2 + 120);
        v84 = *(_OWORD *)(a2 + 136);
        *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
        *(_OWORD *)(a1 + 136) = v84;
        *(_OWORD *)(a1 + 120) = v83;
        *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
        *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
        *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
        v85 = *(_QWORD *)(a2 + 176);
        if (v85 >> 1 == 0xFFFFFFFF)
        {
          v86 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v86;
        }
        else
        {
          v87 = *(_QWORD *)(a2 + 160);
          v88 = *(_QWORD *)(a2 + 168);
          v89 = *(_QWORD *)(a2 + 184);
          outlined copy of AccessibilityImageLabel(v87, v88, *(_QWORD *)(a2 + 176));
          *(_QWORD *)(a1 + 160) = v87;
          *(_QWORD *)(a1 + 168) = v88;
          *(_QWORD *)(a1 + 176) = v85;
          *(_QWORD *)(a1 + 184) = v89;
        }
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
        *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
        *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
        v90 = *(_DWORD *)(a2 + 212);
        *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
        *(_DWORD *)(a1 + 212) = v90;
        v91 = *(void **)(a2 + 224);
        *(_QWORD *)(a1 + 224) = v91;
        *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
        *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
        swift_unknownObjectRetain();
        swift_retain();
        v92 = v91;
      }
      *(_BYTE *)(a1 + 235) = *(_BYTE *)(a2 + 235);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      swift_retain();
    }
  }
  else if (v6 == (void *)1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 32);
    v18 = *(_OWORD *)(a2 + 48);
    *v4 = *v7;
    *(_OWORD *)(a1 + 48) = v18;
    v19 = *(_OWORD *)(a2 + 112);
    v21 = *(_OWORD *)(a2 + 64);
    v20 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v19;
    *(_OWORD *)(a1 + 64) = v21;
    *(_OWORD *)(a1 + 80) = v20;
    v22 = *(_OWORD *)(a2 + 176);
    v24 = *(_OWORD *)(a2 + 128);
    v23 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v22;
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 144) = v23;
    v26 = *(_OWORD *)(a2 + 208);
    v25 = *(_OWORD *)(a2 + 224);
    v27 = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 208) = v26;
    *(_OWORD *)(a1 + 224) = v25;
    *(_OWORD *)(a1 + 192) = v27;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v6;
    v45 = v6;

    v46 = *(void **)(a1 + 40);
    v47 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v47;
    v48 = v47;

    v49 = *(void **)(a1 + 48);
    v50 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v50;
    v51 = v50;

    v52 = (_OWORD *)(a1 + 56);
    v53 = (id *)(a2 + 56);
    v54 = *(_QWORD *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(a1 + 176) >> 1 == 4294967294)
    {
      if (v54 == 0x1FFFFFFFCLL)
      {
        v55 = *(_OWORD *)v53;
        v56 = *(_OWORD *)(a2 + 72);
        v57 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = v57;
        *v52 = v55;
        *(_OWORD *)(a1 + 72) = v56;
        v58 = *(_OWORD *)(a2 + 120);
        v59 = *(_OWORD *)(a2 + 136);
        v60 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 168) = v60;
        *(_OWORD *)(a1 + 120) = v58;
        *(_OWORD *)(a1 + 136) = v59;
        v61 = *(_OWORD *)(a2 + 184);
        v62 = *(_OWORD *)(a2 + 200);
        v63 = *(_OWORD *)(a2 + 216);
        *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
        *(_OWORD *)(a1 + 200) = v62;
        *(_OWORD *)(a1 + 216) = v63;
        *(_OWORD *)(a1 + 184) = v61;
      }
      else
      {
        v75 = *(unsigned __int8 *)(a2 + 64);
        if (v75 == 255)
        {
          v93 = *v53;
          *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
          *(_QWORD *)v52 = v93;
        }
        else
        {
          v76 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(_BYTE *)(a2 + 64));
          *(_QWORD *)(a1 + 56) = v76;
          *(_BYTE *)(a1 + 64) = v75;
        }
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
        v94 = *(_OWORD *)(a2 + 100);
        *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
        *(_OWORD *)(a1 + 100) = v94;
        v95 = *(_OWORD *)(a2 + 120);
        v96 = *(_OWORD *)(a2 + 136);
        *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
        *(_OWORD *)(a1 + 136) = v96;
        *(_OWORD *)(a1 + 120) = v95;
        *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
        *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
        *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
        v97 = *(_QWORD *)(a2 + 176);
        if (v97 >> 1 == 0xFFFFFFFF)
        {
          v98 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v98;
        }
        else
        {
          v99 = *(_QWORD *)(a2 + 160);
          v100 = *(_QWORD *)(a2 + 168);
          v101 = *(_QWORD *)(a2 + 184);
          outlined copy of AccessibilityImageLabel(v99, v100, *(_QWORD *)(a2 + 176));
          *(_QWORD *)(a1 + 160) = v99;
          *(_QWORD *)(a1 + 168) = v100;
          *(_QWORD *)(a1 + 176) = v97;
          *(_QWORD *)(a1 + 184) = v101;
        }
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
        *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
        *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
        v102 = *(_DWORD *)(a2 + 212);
        *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
        *(_DWORD *)(a1 + 212) = v102;
        v103 = *(void **)(a2 + 224);
        *(_QWORD *)(a1 + 224) = v103;
        *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
        *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
        swift_unknownObjectRetain();
        swift_retain();
        v104 = v103;
      }
    }
    else if (v54 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved(a1 + 56);
      v66 = *(_OWORD *)(a2 + 104);
      v68 = *(_OWORD *)v53;
      v67 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v66;
      *v52 = v68;
      *(_OWORD *)(a1 + 72) = v67;
      v69 = *(_OWORD *)(a2 + 168);
      v71 = *(_OWORD *)(a2 + 120);
      v70 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v69;
      *(_OWORD *)(a1 + 120) = v71;
      *(_OWORD *)(a1 + 136) = v70;
      v73 = *(_OWORD *)(a2 + 200);
      v72 = *(_OWORD *)(a2 + 216);
      v74 = *(_OWORD *)(a2 + 184);
      *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
      *(_OWORD *)(a1 + 200) = v73;
      *(_OWORD *)(a1 + 216) = v72;
      *(_OWORD *)(a1 + 184) = v74;
    }
    else
    {
      v77 = *(unsigned __int8 *)(a2 + 64);
      if (*(unsigned __int8 *)(a1 + 64) == 255)
      {
        if (v77 == 255)
        {
          v107 = *v53;
          *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
          *(_QWORD *)v52 = v107;
        }
        else
        {
          v105 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(_BYTE *)(a2 + 64));
          *(_QWORD *)(a1 + 56) = v105;
          *(_BYTE *)(a1 + 64) = v77;
        }
      }
      else if (v77 == 255)
      {
        outlined destroy of GraphicsImage.Contents(a1 + 56);
        v106 = *(_BYTE *)(a2 + 64);
        *(_QWORD *)v52 = *v53;
        *(_BYTE *)(a1 + 64) = v106;
      }
      else
      {
        v78 = *v53;
        outlined copy of GraphicsImage.Contents(*v53, *(_BYTE *)(a2 + 64));
        v79 = *(void **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v78;
        v80 = *(_BYTE *)(a1 + 64);
        *(_BYTE *)(a1 + 64) = v77;
        outlined consume of GraphicsImage.Contents(v79, v80);
      }
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      v108 = *(_OWORD *)(a2 + 100);
      *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
      *(_OWORD *)(a1 + 100) = v108;
      v109 = *(_OWORD *)(a2 + 120);
      v110 = *(_OWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = v110;
      *(_OWORD *)(a1 + 120) = v109;
      *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
      v111 = (_OWORD *)(a1 + 160);
      v112 = (_OWORD *)(a2 + 160);
      v113 = *(_QWORD *)(a2 + 176);
      v114 = v113 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_QWORD *)(a1 + 176) >> 1 == 0xFFFFFFFFLL)
      {
        if (v114 == 0x1FFFFFFFELL)
        {
          v115 = *(_OWORD *)(a2 + 176);
          *v111 = *v112;
          *(_OWORD *)(a1 + 176) = v115;
        }
        else
        {
          v117 = *(_QWORD *)(a2 + 160);
          v118 = *(_QWORD *)(a2 + 168);
          v119 = *(_QWORD *)(a2 + 184);
          outlined copy of AccessibilityImageLabel(v117, v118, *(_QWORD *)(a2 + 176));
          *(_QWORD *)(a1 + 160) = v117;
          *(_QWORD *)(a1 + 168) = v118;
          *(_QWORD *)(a1 + 176) = v113;
          *(_QWORD *)(a1 + 184) = v119;
        }
      }
      else if (v114 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel(a1 + 160);
        v116 = *(_OWORD *)(a2 + 176);
        *v111 = *v112;
        *(_OWORD *)(a1 + 176) = v116;
      }
      else
      {
        v120 = *(_QWORD *)(a2 + 160);
        v121 = *(_QWORD *)(a2 + 168);
        v122 = *(_QWORD *)(a2 + 184);
        outlined copy of AccessibilityImageLabel(v120, v121, *(_QWORD *)(a2 + 176));
        v123 = *(_QWORD *)(a1 + 160);
        v124 = *(_QWORD *)(a1 + 168);
        v125 = *(_QWORD *)(a1 + 176);
        *(_QWORD *)(a1 + 160) = v120;
        *(_QWORD *)(a1 + 168) = v121;
        *(_QWORD *)(a1 + 176) = v113;
        *(_QWORD *)(a1 + 184) = v122;
        outlined consume of AccessibilityImageLabel(v123, v124, v125);
      }
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
      v126 = *(_DWORD *)(a2 + 212);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_DWORD *)(a1 + 212) = v126;
      v127 = *(void **)(a1 + 224);
      v128 = *(void **)(a2 + 224);
      *(_QWORD *)(a1 + 224) = v128;
      v129 = v128;

      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
    }
    *(_BYTE *)(a1 + 235) = *(_BYTE *)(a2 + 235);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    swift_retain();
    swift_release();
  }
  v130 = (__int128 *)(a1 + 248);
  v131 = (__int128 *)(a2 + 248);
  v132 = *(_QWORD *)(a1 + 296);
  v133 = *(_QWORD *)(a2 + 296);
  if (v132 == 1)
  {
    if (v133 == 1)
    {
      v134 = *v131;
      v135 = *(_OWORD *)(a2 + 264);
      v136 = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 296) = v136;
LABEL_47:
      *v130 = v134;
      v130[1] = v135;
      goto LABEL_59;
    }
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v140 = (_OWORD *)(a1 + 272);
    v141 = (__int128 *)(a2 + 272);
    v142 = *(_QWORD *)(a2 + 296);
    if (v142)
    {
      *(_QWORD *)(a1 + 296) = v142;
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      (**(void (***)(_OWORD *, __int128 *))(v142 - 8))(v140, v141);
    }
    else
    {
      v145 = *v141;
      v146 = *(_OWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *v140 = v145;
      *(_OWORD *)(a1 + 288) = v146;
    }
  }
  else
  {
    if (v133 == 1)
    {
      outlined destroy of PlatformItem.SelectionContent(a1 + 248);
      v137 = *(_OWORD *)(a2 + 296);
      v139 = *v131;
      v138 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 296) = v137;
      *v130 = v139;
      *(_OWORD *)(a1 + 264) = v138;
      goto LABEL_59;
    }
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
    *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    v130 = (__int128 *)(a1 + 272);
    v143 = (__int128 *)(a2 + 272);
    v144 = *(_QWORD *)(a2 + 296);
    if (!v132)
    {
      if (v144)
      {
        *(_QWORD *)(a1 + 296) = v144;
        *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
        (**(void (***)(uint64_t, uint64_t))(v144 - 8))(a1 + 272, a2 + 272);
        goto LABEL_59;
      }
      v134 = *v143;
      v135 = *(_OWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      goto LABEL_47;
    }
    if (v144)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 272), (uint64_t *)(a2 + 272));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(a1 + 272);
      v147 = *(_QWORD *)(a2 + 304);
      v148 = *(_OWORD *)(a2 + 288);
      *v130 = *v143;
      *(_OWORD *)(a1 + 288) = v148;
      *(_QWORD *)(a1 + 304) = v147;
    }
  }
LABEL_59:
  v149 = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = v149;
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  return a1;
}

void *__swift_memcpy344_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x158uLL);
}

uint64_t assignWithTake for PlatformItemTraitWriter.AddTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  if (v5 == (void *)1)
    goto LABEL_4;
  if (v4 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 32);
LABEL_4:
    v6 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v6;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    v8 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v8;
    v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    v10 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v10;
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 32) = v4;

  v12 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  v13 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  v14 = (_QWORD *)(a1 + 56);
  v15 = (_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 176) >> 1 == 4294967294)
    goto LABEL_8;
  if (*(_QWORD *)(a2 + 176) >> 1 != 4294967294)
  {
    v21 = *(unsigned __int8 *)(a1 + 64);
    if (v21 != 255)
    {
      v22 = *(unsigned __int8 *)(a2 + 64);
      if (v22 != 255)
      {
        v23 = *(void **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = *v15;
        *(_BYTE *)(a1 + 64) = v22;
        outlined consume of GraphicsImage.Contents(v23, v21);
        goto LABEL_14;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 56);
    }
    *v14 = *v15;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
LABEL_14:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 100);
    *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    v24 = *(_QWORD *)(a1 + 176);
    *(_WORD *)(a1 + 154) = *(_WORD *)(a2 + 154);
    if (v24 >> 1 != 0xFFFFFFFF)
    {
      v25 = *(_QWORD *)(a2 + 176);
      if (v25 >> 1 != 0xFFFFFFFF)
      {
        v27 = *(_QWORD *)(a2 + 184);
        v28 = *(_QWORD *)(a1 + 160);
        v29 = *(_QWORD *)(a1 + 168);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 176) = v25;
        *(_QWORD *)(a1 + 184) = v27;
        outlined consume of AccessibilityImageLabel(v28, v29, v24);
        goto LABEL_19;
      }
      outlined destroy of AccessibilityImageLabel(a1 + 160);
    }
    v26 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v26;
LABEL_19:
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    swift_release();
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *(_BYTE *)(a1 + 209) = *(_BYTE *)(a2 + 209);
    *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    v30 = *(void **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);

    *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
    *(_BYTE *)(a1 + 234) = *(_BYTE *)(a2 + 234);
    goto LABEL_20;
  }
  outlined destroy of Image.Resolved(a1 + 56);
LABEL_8:
  v16 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
  v17 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v17;
  v18 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v18;
  v19 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(a1 + 72) = v19;
  v20 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v20;
LABEL_20:
  *(_BYTE *)(a1 + 235) = *(_BYTE *)(a2 + 235);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_release();
LABEL_21:
  v31 = *(_QWORD *)(a1 + 296);
  if (v31 == 1)
  {
LABEL_24:
    v33 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v33;
    v34 = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 296) = v34;
    goto LABEL_30;
  }
  v32 = *(_QWORD *)(a2 + 296);
  if (v32 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(a1 + 248);
    goto LABEL_24;
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  if (v31)
  {
    v35 = a1 + 272;
    if (v32)
      __swift_destroy_boxed_opaque_existential_1(v35);
    else
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v35);
  }
  v36 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v36;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
LABEL_30:
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemTraitWriter.AddTrait(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 344))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItemTraitWriter.AddTrait(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 344) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 344) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in PlatformItemTraitWriter<A, B, C>.AddTrait()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in PlatformItemsReader<A, B, C>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in PlatformItemsReader.Child.updateValue()()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 64))(*(_QWORD *)(v0 + 80));
}

void TableColumnAlignment.Guts.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for Locale.NumberingSystem();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v4 = type metadata accessor for TableColumnAlignment.Guts(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)v7, v8);
  v9 = (char *)sub_1876AF390
     + 4 * byte_187C4F9D0[(*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 5, v1)];
  __asm { BR              X10 }
}

uint64_t sub_1876AF390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  Hasher._combine(_:)(5uLL);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0B48], MEMORY[0x1E0CB0B58]);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnAlignment.Guts()
{
  Hasher.init(_seed:)();
  TableColumnAlignment.Guts.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnAlignment.Guts()
{
  Hasher.init(_seed:)();
  TableColumnAlignment.Guts.hash(into:)();
  return Hasher._finalize()();
}

uint64_t static TableColumnAlignment.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  return static TableColumnAlignment.automatic.getter(1, a1);
}

uint64_t static TableColumnAlignment.leading.getter@<X0>(uint64_t a1@<X8>)
{
  return static TableColumnAlignment.automatic.getter(2, a1);
}

uint64_t static TableColumnAlignment.center.getter@<X0>(uint64_t a1@<X8>)
{
  return static TableColumnAlignment.automatic.getter(3, a1);
}

uint64_t static TableColumnAlignment.trailing.getter@<X0>(uint64_t a1@<X8>)
{
  return static TableColumnAlignment.automatic.getter(4, a1);
}

uint64_t static TableColumnAlignment.numeric.getter@<X0>(uint64_t a1@<X8>)
{
  return static TableColumnAlignment.automatic.getter(5, a1);
}

uint64_t static TableColumnAlignment.automatic.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for Locale.NumberingSystem();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, a1, 5, v4);
}

uint64_t static TableColumnAlignment.numeric(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Locale.NumberingSystem();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 5, v4);
}

void TableColumnAlignment.resolve(in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  char *v19;
  _QWORD v20[6];
  uint64_t v21;

  type metadata accessor for Locale.NumberingSystem?();
  MEMORY[0x1E0C80A78](v1, v2);
  v20[1] = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Locale.Components();
  v20[2] = *(_QWORD *)(v4 - 8);
  v20[3] = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v20[0] = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = type metadata accessor for Locale.NumberingSystem();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v12 = type metadata accessor for Locale();
  v20[4] = *(_QWORD *)(v12 - 8);
  v20[5] = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v14 = type metadata accessor for TableColumnAlignment.Guts(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)v17, v18);
  v19 = (char *)sub_1876AF720
      + 4 * byte_187C4F9D6[(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v17, 5, v9)];
  __asm { BR              X10 }
}

uint64_t sub_1876AF720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = v0;
  *(_QWORD *)(v2 - 88) = v1;
  EnvironmentValues.layoutDirection.getter();
  if (*(_BYTE *)(v2 - 97))
    return 2;
  else
    return 0;
}

uint64_t TableColumnAlignment.resolveNumeric(locale:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t result;
  _QWORD v16[4];

  v2 = type metadata accessor for Locale();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntegerFormatStyle<Int>();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v11 = MEMORY[0x1E0C80A78](v7, v10);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = 0;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, a1, v2, v11);
  lazy protocol witness table accessor for type Int and conformance Int();
  IntegerFormatStyle.init(locale:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>, (uint64_t (*)(uint64_t))type metadata accessor for IntegerFormatStyle<Int>, MEMORY[0x1E0CAF4D0]);
  BinaryInteger.formatted<A>(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  v14 = specialized Collection.first.getter(v16[2], v16[3]);
  result = swift_bridgeObjectRelease();
  if ((v14 & 0x100000000) != 0)
    return 2;
  if ((v14 & 0x80000000) != 0)
  {
    __break(1u);
  }
  else if (_DirectionForCharIsRTL())
  {
    return 0;
  }
  else
  {
    return 2;
  }
  return result;
}

void TableColumnAlignment.resolveTextAlignment(in:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(_QWORD);
  char *v22;
  _QWORD v23[6];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  type metadata accessor for Locale.NumberingSystem?();
  MEMORY[0x1E0C80A78](v4, v5);
  v23[3] = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale.NumberingSystem();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v23[2] = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Locale();
  v23[5] = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v11);
  v24 = type metadata accessor for Locale.Components();
  v23[4] = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v12);
  MEMORY[0x1E0C80A78](v13, v14);
  v15 = type metadata accessor for TableColumnAlignment.Guts(0);
  MEMORY[0x1E0C80A78](v15, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v23 - v19;
  v26 = *a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v23 - v19, v21);
  v22 = (char *)sub_1876AFBE0
      + 4 * byte_187C4F9DC[(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v20, 5, v7)];
  __asm { BR              X10 }
}

uint64_t sub_1876AFBE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v2, type metadata accessor for TableColumnAlignment.Guts);
  *(_QWORD *)(v10 - 96) = *(_QWORD *)(v10 - 112);
  *(_QWORD *)(v10 - 88) = v1;
  *(_QWORD *)(v10 - 168) = v1;
  EnvironmentValues.locale.getter();
  Locale.Components.init(locale:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v5, v0, type metadata accessor for TableColumnAlignment.Guts);
  if (v3(v0, 5, v6))
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0, type metadata accessor for TableColumnAlignment.Guts);
  }
  else
  {
    v11 = *(_QWORD *)(v10 - 160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v0, v6);
    v12 = *(_QWORD *)(v10 - 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v11, v6);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v12, 0, 1, v6);
    Locale.Components.numberingSystem.setter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v6);
  }
  v13 = *(_QWORD *)(v10 - 144);
  v14 = *(_QWORD *)(v10 - 128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v9, v7, v14);
  Locale.init(components:)();
  v15 = TableColumnAlignment.resolveNumeric(locale:)(v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 - 136) + 8))(v4, *(_QWORD *)(v10 - 120));
  v16 = *(_QWORD *)(v10 - 168);
  *(_QWORD *)(v10 - 96) = *(_QWORD *)(v10 - 112);
  *(_QWORD *)(v10 - 88) = v16;
  EnvironmentValues.layoutDirection.getter();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v7, v14);
  if (v15)
  {
    if (v15 == 1)
      return 1;
    if (!*(_BYTE *)(v10 - 97))
      return 2;
    return 0;
  }
  if ((*(_BYTE *)(v10 - 97) & 1) == 0)
    return 0;
  return 2;
}

void TableColumnAlignment.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for Locale.NumberingSystem();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v4 = type metadata accessor for TableColumnAlignment.Guts(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)v7, v8);
  v9 = (char *)sub_1876AFE48
     + 4 * byte_187C4F9E2[(*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 5, v1)];
  __asm { BR              X10 }
}

uint64_t sub_1876AFE48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  Hasher._combine(_:)(5uLL);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0B48], MEMORY[0x1E0CB0B58]);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

uint64_t type metadata accessor for TableColumnAlignment.Guts(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TableColumnAlignment.Guts);
}

Swift::Int TableColumnAlignment.hashValue.getter()
{
  Hasher.init(_seed:)();
  TableColumnAlignment.Guts.hash(into:)();
  return Hasher._finalize()();
}

void TableColumnContent.alignment(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  TableColumnContent.environment<A>(key:value:)((uint64_t)&unk_1E1AD51F0, a1, a2, a3);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance TableColumnAlignment.Key@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = type metadata accessor for TableColumnAlignment(0);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static TableColumnAlignment.Key.defaultValue);
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a1, type metadata accessor for TableColumnAlignment);
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance TableColumnAlignment.Resolved.Key@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized static TableColumnAlignment.Resolved.Key.value(in:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance TableColumnAlignment.Resolved.TextAlignmentKey@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized static TableColumnAlignment.Resolved.TextAlignmentKey.value(in:)(a1);
  *a2 = result;
  return result;
}

void specialized static TableColumnAlignment.Guts.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v4 = type metadata accessor for Locale.NumberingSystem();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v7 = type metadata accessor for TableColumnAlignment.Guts(0);
  MEMORY[0x1E0C80A78](v7, v8);
  type metadata accessor for (TableColumnAlignment.Guts, TableColumnAlignment.Guts)();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t)&v12[*(int *)(v13 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v12, type metadata accessor for TableColumnAlignment.Guts);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, v14, type metadata accessor for TableColumnAlignment.Guts);
  v15 = (char *)sub_1876B01A0
      + 4 * byte_187C4F9E8[(*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 5, v4)];
  __asm { BR              X10 }
}

uint64_t sub_1876B01A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  char v7;
  uint64_t (*v8)(_QWORD);
  void (*v10)(uint64_t, uint64_t);

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, v3, type metadata accessor for TableColumnAlignment.Guts);
  if (v5(v4, 5, v1))
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v1);
    v7 = 0;
    v8 = (uint64_t (*)(_QWORD))type metadata accessor for (TableColumnAlignment.Guts, TableColumnAlignment.Guts);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v2, v4, v1);
    v7 = MEMORY[0x18D7549F0](v3, v2);
    v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v10(v2, v1);
    v10(v3, v1);
    v8 = type metadata accessor for TableColumnAlignment.Guts;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0, v8);
  return v7 & 1;
}

uint64_t base witness table accessor for Equatable in TableColumnAlignment()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TableColumnAlignment and conformance TableColumnAlignment, type metadata accessor for TableColumnAlignment, (uint64_t)&protocol conformance descriptor for TableColumnAlignment);
}

uint64_t type metadata accessor for TableColumnAlignment(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TableColumnAlignment);
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumnAlignment(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(type metadata accessor for TableColumnAlignment.Guts(0) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for Locale.NumberingSystem();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 5, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 5, v6);
    }
  }
  return a1;
}

void *initializeWithCopy for TableColumnAlignment(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Locale.NumberingSystem();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 5, v4))
  {
    v6 = type metadata accessor for TableColumnAlignment.Guts(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 5, v4);
  }
  return a1;
}

void *assignWithCopy for TableColumnAlignment(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for Locale.NumberingSystem();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 5, v4);
  v8 = v6(a2, 5, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = type metadata accessor for TableColumnAlignment.Guts(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 5, v4);
  return a1;
}

void *initializeWithTake for TableColumnAlignment(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Locale.NumberingSystem();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 5, v4))
  {
    v6 = type metadata accessor for TableColumnAlignment.Guts(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 5, v4);
  }
  return a1;
}

void *assignWithTake for TableColumnAlignment(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = type metadata accessor for Locale.NumberingSystem();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 5, v4);
  v8 = v6(a2, 5, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = type metadata accessor for TableColumnAlignment.Guts(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 5, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnAlignment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876B0724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TableColumnAlignment.Guts(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TableColumnAlignment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876B076C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TableColumnAlignment.Guts(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for TableColumnAlignment()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TableColumnAlignment.Guts(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1876B0814()
{
  type metadata accessor for EnvironmentWritingTableColumnContent();
}

uint64_t sub_1876B0848(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentWritingTableColumnContent<A, B>, a1);
}

void *type metadata accessor for TableColumnAlignment.Key()
{
  return &unk_1E1AD51F0;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumnAlignment.Guts(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Locale.NumberingSystem();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 5, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 5, v7);
    }
  }
  return a1;
}

uint64_t destroy for TableColumnAlignment(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for Locale.NumberingSystem();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 5, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for TableColumnAlignment.Guts(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Locale.NumberingSystem();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 5, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 5, v6);
  }
  return a1;
}

void *assignWithCopy for TableColumnAlignment.Guts(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for Locale.NumberingSystem();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 5, v6);
  v10 = v8(a2, 5, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 5, v6);
  return a1;
}

void *initializeWithTake for TableColumnAlignment.Guts(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Locale.NumberingSystem();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 5, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 5, v6);
  }
  return a1;
}

void *assignWithTake for TableColumnAlignment.Guts(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for Locale.NumberingSystem();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 5, v6);
  v10 = v8(a2, 5, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnAlignment.Guts()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876B0CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for Locale.NumberingSystem();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 6)
    return v5 - 5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TableColumnAlignment.Guts()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876B0D30(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 5);
  else
    v5 = 0;
  v6 = type metadata accessor for Locale.NumberingSystem();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for TableColumnAlignment.Guts(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Locale.NumberingSystem();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 5, v2);
}

uint64_t destructiveInjectEnumTag for TableColumnAlignment.Guts(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Locale.NumberingSystem();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 5, v4);
}

uint64_t type metadata completion function for TableColumnAlignment.Guts()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Locale.NumberingSystem();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in TableColumnAlignment.Guts()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TableColumnAlignment.Guts and conformance TableColumnAlignment.Guts, type metadata accessor for TableColumnAlignment.Guts, (uint64_t)&protocol conformance descriptor for TableColumnAlignment.Guts);
}

void type metadata accessor for (TableColumnAlignment.Guts, TableColumnAlignment.Guts)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (TableColumnAlignment.Guts, TableColumnAlignment.Guts))
  {
    type metadata accessor for TableColumnAlignment.Guts(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TableColumnAlignment.Guts, TableColumnAlignment.Guts));
  }
}

ValueMetadata *type metadata accessor for TableColumnAlignment.Resolved.TextAlignmentKey()
{
  return &type metadata for TableColumnAlignment.Resolved.TextAlignmentKey;
}

ValueMetadata *type metadata accessor for TableColumnAlignment.Resolved.Key()
{
  return &type metadata for TableColumnAlignment.Resolved.Key;
}

uint64_t storeEnumTagSinglePayload for TableColumnAlignment.Resolved(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1876B0F48 + 4 * byte_187C4F9F3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1876B0F7C + 4 * byte_187C4F9EE[v4]))();
}

uint64_t sub_1876B0F7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876B0F84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1876B0F8CLL);
  return result;
}

uint64_t sub_1876B0F98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1876B0FA0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1876B0FA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876B0FAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TableColumnAlignment.Resolved()
{
  return &type metadata for TableColumnAlignment.Resolved;
}

unint64_t lazy protocol witness table accessor for type TableColumnAlignment.Resolved and conformance TableColumnAlignment.Resolved()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnAlignment.Resolved and conformance TableColumnAlignment.Resolved;
  if (!lazy protocol witness table cache variable for type TableColumnAlignment.Resolved and conformance TableColumnAlignment.Resolved)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnAlignment.Resolved, &type metadata for TableColumnAlignment.Resolved);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnAlignment.Resolved and conformance TableColumnAlignment.Resolved);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAlignment and conformance TextAlignment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAlignment and conformance TextAlignment;
  if (!lazy protocol witness table cache variable for type TextAlignment and conformance TextAlignment)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE20A0], MEMORY[0x1E0CE2098]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAlignment and conformance TextAlignment);
  }
  return result;
}

uint64_t specialized static TableColumnAlignment.Resolved.Key.value(in:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = type metadata accessor for TableColumnAlignment(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v6 = a1[1];
  type metadata accessor for EnvironmentPropertyKey<TableColumnAlignment.Key>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnAlignment.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TableColumnAlignment.Key>, MEMORY[0x1E0CE53F0]);
  swift_retain_n();
  if (v6)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v11[0] = v7;
  v11[1] = v6;
  TableColumnAlignment.resolve(in:)();
  v9 = v8;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for TableColumnAlignment);
  return v9;
}

void type metadata accessor for EnvironmentPropertyKey<TableColumnAlignment.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnAlignment.Key>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnAlignment.Key>);
  }
}

void type metadata accessor for Locale.NumberingSystem?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Locale.NumberingSystem?)
  {
    type metadata accessor for Locale.NumberingSystem();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Locale.NumberingSystem?);
  }
}

void type metadata accessor for IntegerFormatStyle<Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for IntegerFormatStyle<Int>)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    v0 = type metadata accessor for IntegerFormatStyle();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IntegerFormatStyle<Int>);
  }
}

uint64_t specialized static TableColumnAlignment.Resolved.TextAlignmentKey.value(in:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[2];

  v2 = type metadata accessor for TableColumnAlignment(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v6 = a1[1];
  type metadata accessor for EnvironmentPropertyKey<TableColumnAlignment.Key>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnAlignment.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TableColumnAlignment.Key>, MEMORY[0x1E0CE53F0]);
  swift_retain_n();
  if (v6)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v11[0] = v7;
  v11[1] = v6;
  TableColumnAlignment.resolveTextAlignment(in:)(v11);
  v9 = v8;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for TableColumnAlignment);
  return v9;
}

uint64_t initializeBufferWithCopyOfBuffer for HalfOpenCircularGauge(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 7);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HalfOpenCircularGauge(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for HalfOpenCircularGauge(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HalfOpenCircularGauge()
{
  return &type metadata for HalfOpenCircularGauge;
}

uint64_t associated type witness table accessor for View.Body : View in HalfOpenCircularGauge()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t HalfOpenCircularGauge.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  char v21;
  int v22;
  __int16 v23;
  _BYTE v24[7];
  _BYTE v25[7];
  _BYTE v26[7];

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 8);
  v5 = *((_BYTE *)v1 + 9);
  v6 = *((_BYTE *)v1 + 10);
  v21 = *((_BYTE *)v1 + 11);
  v7 = v1[2];
  KeyPath = swift_getKeyPath();
  v19 = swift_getKeyPath();
  v18 = swift_getKeyPath();
  v17 = swift_getKeyPath();
  v16 = swift_getKeyPath();
  v14 = swift_getKeyPath();
  v15 = swift_getKeyPath();
  v13 = swift_getKeyPath();
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  v11 = swift_getKeyPath();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = v5;
  *(_BYTE *)(a1 + 10) = v6;
  *(_BYTE *)(a1 + 11) = v21;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = KeyPath;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v19;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v18;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v17;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v16;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = v14;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 121) = 1;
  *(_OWORD *)(a1 + 128) = xmmword_187C4FC10;
  *(_OWORD *)(a1 + 144) = xmmword_187C4FC20;
  *(_QWORD *)(a1 + 160) = v3;
  *(_BYTE *)(a1 + 168) = v4;
  *(_BYTE *)(a1 + 169) = v5;
  *(_BYTE *)(a1 + 170) = v6;
  *(_BYTE *)(a1 + 171) = v21;
  *(_QWORD *)(a1 + 176) = v7;
  *(_QWORD *)(a1 + 184) = v15;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = v13;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = v8;
  *(_BYTE *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 236) = *(_DWORD *)&v26[3];
  *(_DWORD *)(a1 + 233) = *(_DWORD *)v26;
  *(_QWORD *)(a1 + 240) = v9;
  *(_BYTE *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 252) = *(_DWORD *)&v25[3];
  *(_DWORD *)(a1 + 249) = *(_DWORD *)v25;
  *(_QWORD *)(a1 + 256) = v10;
  *(_BYTE *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 265) = *(_DWORD *)v24;
  *(_DWORD *)(a1 + 268) = *(_DWORD *)&v24[3];
  *(_QWORD *)(a1 + 272) = v11;
  *(_WORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 282) = v22;
  *(_WORD *)(a1 + 286) = v23;
  *(_OWORD *)(a1 + 288) = xmmword_187C4FC10;
  *(_OWORD *)(a1 + 304) = xmmword_187C4FC20;
  return swift_bridgeObjectRetain_n();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance HalfOpenCircularGauge()
{
  return specialized static StaticIf<>._viewListCount(inputs:)();
}

uint64_t SizedHalfOpenCircularGauge.effectivePrimaryTint.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v1 = v0[7];
  v20 = v0[6];
  v21 = v1;
  v2 = v0[9];
  v22 = v0[8];
  v23 = v2;
  v3 = v0[3];
  v16 = v0[2];
  v17 = v3;
  v4 = v0[5];
  v18 = v0[4];
  v19 = v4;
  v5 = v0[1];
  v14 = *v0;
  v15 = v5;
  v6 = *((_QWORD *)&v16 + 1);
  v7 = v17;
  v8 = BYTE8(v17);
  outlined retain of SizedHalfOpenCircularGauge((uint64_t)&v14);
  outlined copy of Environment<(Color, Color)?>.Content(v6, v7, v8);
  v9 = specialized Environment.wrappedValue.getter(v6, v7, v8);
  outlined consume of Environment<(Color, Color)?>.Content(v6, v7, v8);
  if (!v9)
  {
    if ((_QWORD)v15)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v11 = *((_QWORD *)&v15 + 1);
      v12 = v16;
      outlined copy of Environment<SceneBridge?>.Content(*((_QWORD *)&v15 + 1), v16);
      v10 = specialized Environment.wrappedValue.getter(v11, v12);
      outlined consume of Environment<AnyShapeStyle?>.Content(v11, v12);
      if (v10)
        goto LABEL_7;
      static Color.primary.getter();
    }
    v10 = AnyShapeStyle.init<A>(_:)();
LABEL_7:
    outlined release of SizedHalfOpenCircularGauge((uint64_t)&v14);
    return v10;
  }
  swift_release();
  outlined release of SizedHalfOpenCircularGauge((uint64_t)&v14);
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t SizedHalfOpenCircularGauge.body.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t result;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[10];
  _BYTE v35[11];
  _BYTE v36[17];

  v3 = v1[6];
  v4 = v1[8];
  v5 = v1[9];
  v34[7] = v1[7];
  v34[8] = v4;
  v34[9] = v5;
  v6 = v1[3];
  v34[2] = v1[2];
  v34[3] = v6;
  v7 = v1[5];
  v34[4] = v1[4];
  v34[5] = v7;
  v34[6] = v3;
  v8 = v1[1];
  v34[0] = *v1;
  v34[1] = v8;
  v9 = v7;
  v10 = BYTE8(v7);
  outlined copy of Environment<ControlSize>.Content(v7, BYTE8(v7));
  specialized Environment.wrappedValue.getter(v9, v10);
  outlined consume of Environment<ControlSize>.Content(v9, v10);
  v11 = (_OWORD *)swift_allocObject();
  v12 = v1[7];
  v11[7] = v1[6];
  v11[8] = v12;
  v13 = v1[9];
  v11[9] = v1[8];
  v11[10] = v13;
  v14 = v1[3];
  v11[3] = v1[2];
  v11[4] = v14;
  v15 = v1[5];
  v11[5] = v1[4];
  v11[6] = v15;
  v16 = v1[1];
  v11[1] = *v1;
  v11[2] = v16;
  outlined retain of SizedHalfOpenCircularGauge((uint64_t)v34);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v17 = v28;
  v18 = v29;
  v19 = v30;
  v20 = v31;
  v25 = v33;
  v26 = v32;
  KeyPath = swift_getKeyPath();
  v22 = static VerticalAlignment.center.getter();
  *(_QWORD *)v35 = *(_QWORD *)&v34[0];
  *(_DWORD *)&v35[7] = *(_DWORD *)((char *)v34 + 7);
  outlined init with take of Image.Resolved?((uint64_t)&v35[8], (uint64_t)v36, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel);
  result = outlined init with take of Image.Resolved?((uint64_t)v36, (uint64_t)&v27, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel);
  v24 = v27;
  *(_QWORD *)a1 = partial apply for closure #1 in SizedHalfOpenCircularGauge.body.getter;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v17;
  *(_BYTE *)(a1 + 24) = v18;
  *(_QWORD *)(a1 + 32) = v19;
  *(_BYTE *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 48) = v26;
  *(_QWORD *)(a1 + 56) = v25;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = KeyPath;
  *(_QWORD *)(a1 + 88) = 0x3F847AE147AE147BLL;
  *(_QWORD *)(a1 + 96) = v22;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 113) = v24;
  return result;
}

uint64_t closure #1 in closure #1 in SizedHalfOpenCircularGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int64x2_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v48;
  _OWORD v50[11];
  uint64_t v51;
  _BYTE v52[337];
  char v53;
  char v54;
  char v55;
  char v56;
  _OWORD v57[33];
  int64x2_t v58;
  _OWORD v59[21];
  _OWORD v60[11];
  uint64_t v61;
  _BYTE v62[11];
  char v63;
  char v64;
  _OWORD v65[4];
  uint64_t v66;
  char v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _BYTE __src[320];
  _BYTE v82[336];

  v5 = *(_OWORD *)(a1 + 112);
  v57[6] = *(_OWORD *)(a1 + 96);
  v57[7] = v5;
  v6 = *(_OWORD *)(a1 + 144);
  v57[8] = *(_OWORD *)(a1 + 128);
  v57[9] = v6;
  v7 = *(_OWORD *)(a1 + 48);
  v57[2] = *(_OWORD *)(a1 + 32);
  v57[3] = v7;
  v8 = *(_OWORD *)(a1 + 80);
  v57[4] = *(_OWORD *)(a1 + 64);
  v57[5] = v8;
  v9 = *(_OWORD *)(a1 + 16);
  v57[0] = *(_OWORD *)a1;
  v57[1] = v9;
  SizedHalfOpenCircularGauge.centerContent(proxy:)(&v58);
  v10 = v58;
  v11 = v59[0];
  v12 = v59[1];
  v48 = BYTE1(v59[2]);
  v13 = LOBYTE(v59[2]);
  *(int64x2_t *)v52 = v58;
  *(_OWORD *)&v52[16] = v59[0];
  *(_OWORD *)&v52[32] = v59[1];
  *(_WORD *)&v52[48] = v59[2];
  v14 = *(_OWORD *)(a2 + 16);
  v57[0] = *(_OWORD *)a2;
  v57[1] = v14;
  v57[2] = *(_OWORD *)(a2 + 32);
  LODWORD(v57[3]) = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, MEMORY[0x1E0CE7C38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView> and conformance <> _ConditionalContent<A, B>();
  View.baselineOffset(_:)();
  outlined consume of _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>.Storage(v10.i64[0], v10.i64[1], v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, v48);
  v65[2] = v57[2];
  v65[3] = v57[3];
  v66 = *(_QWORD *)&v57[4];
  v65[1] = v57[1];
  v65[0] = v57[0];
  v15 = *(_OWORD *)(a2 + 16);
  v58 = *(int64x2_t *)a2;
  v59[0] = v15;
  v59[1] = *(_OWORD *)(a2 + 32);
  LODWORD(v59[2]) = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  v17 = v16 * 0.7;
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, v17, 0, 0.0, 1, (uint64_t)&v69, 0.0, 1, 0.0, 1);
  outlined release of ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>((uint64_t)v65);
  v18 = static HorizontalAlignment.center.getter();
  closure #1 in closure #1 in closure #1 in SizedHalfOpenCircularGauge.body.getter(a1, a2, (uint64_t)__src);
  v82[320] = 1;
  memcpy(&v82[7], __src, 0x139uLL);
  *(_QWORD *)v62 = *(_QWORD *)a1;
  *(_DWORD *)&v62[7] = *(_DWORD *)(a1 + 7);
  outlined init with take of Image.Resolved?((uint64_t)&v62[10], (uint64_t)&v63, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.MaximumValueLabel);
  outlined init with take of Image.Resolved?((uint64_t)&v63, (uint64_t)&v68, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.MaximumValueLabel);
  if ((v68 & 1) != 0
    || (outlined init with take of Image.Resolved?((uint64_t)&v62[9], (uint64_t)&v64, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel), outlined init with take of Image.Resolved?((uint64_t)&v64, (uint64_t)&v67, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel), (v67 & 1) != 0))
  {
    v19 = 0x3FF921FB54442D18;
  }
  else
  {
    v19 = 0x4000C152382D7365;
  }
  v20 = *(_QWORD *)(a1 + 96);
  v21 = *(unsigned __int8 *)(a1 + 104);
  outlined retain of SizedHalfOpenCircularGauge(a1);
  outlined copy of Environment<ControlSize>.Content(v20, v21);
  specialized Environment.wrappedValue.getter(v20, v21, (uint64_t *)v57);
  outlined consume of Environment<ControlSize>.Content(v20, v21);
  if ((v57[0] & 2) == 0
    || (v22 = *(_QWORD *)(a1 + 112),
        v23 = *(unsigned __int8 *)(a1 + 120),
        outlined copy of Environment<ControlSize>.Content(v22, v23),
        v24 = specialized Environment.wrappedValue.getter(v22, v23),
        outlined consume of Environment<ControlSize>.Content(v22, v23),
        v25 = 0,
        (v24 & 1) == 0))
  {
    v25 = *(_QWORD *)v62;
  }
  v26 = *(_OWORD *)(a1 + 112);
  v57[6] = *(_OWORD *)(a1 + 96);
  v57[7] = v26;
  v27 = *(_OWORD *)(a1 + 144);
  v57[8] = *(_OWORD *)(a1 + 128);
  v57[9] = v27;
  v28 = *(_OWORD *)(a1 + 48);
  v57[2] = *(_OWORD *)(a1 + 32);
  v57[3] = v28;
  v29 = *(_OWORD *)(a1 + 80);
  v57[4] = *(_OWORD *)(a1 + 64);
  v57[5] = v29;
  v30 = *(_OWORD *)(a1 + 16);
  v57[0] = *(_OWORD *)a1;
  v57[1] = v30;
  v31 = SizedHalfOpenCircularGauge.effectivePrimaryTint.getter();
  outlined release of SizedHalfOpenCircularGauge(a1);
  v32 = *(_QWORD *)(a1 + 40);
  v33 = *(_QWORD *)(a1 + 48);
  v34 = *(_BYTE *)(a1 + 56);
  outlined retain of SizedHalfOpenCircularGauge(a1);
  outlined retain of SizedHalfOpenCircularGauge(a1);
  outlined copy of Environment<(Color, Color)?>.Content(v32, v33, v34);
  v35 = specialized Environment.wrappedValue.getter(v32, v33, v34);
  v37 = v36;
  outlined consume of Environment<(Color, Color)?>.Content(v32, v33, v34);
  if (v35)
  {
    swift_release();
    outlined release of SizedHalfOpenCircularGauge(a1);
    *(_QWORD *)&v57[0] = v37;
    v35 = AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    outlined release of SizedHalfOpenCircularGauge(a1);
  }
  outlined release of SizedHalfOpenCircularGauge(a1);
  v38 = *(_BYTE *)(a1 + 11);
  KeyPath = swift_getKeyPath();
  v40 = swift_getKeyPath();
  v41 = swift_getKeyPath();
  v42 = swift_getKeyPath();
  v50[8] = v77;
  v50[9] = v78;
  v50[10] = v79;
  v51 = v80;
  v50[4] = v73;
  v50[5] = v74;
  v50[6] = v75;
  v50[7] = v76;
  v50[0] = v69;
  v50[1] = v70;
  v50[2] = v71;
  v50[3] = v72;
  *(_OWORD *)v52 = (unint64_t)v18;
  v52[16] = 1;
  memcpy(&v52[17], v82, 0x140uLL);
  v57[8] = v77;
  v57[9] = v78;
  v57[10] = v79;
  *(_QWORD *)&v57[11] = v80;
  v57[4] = v73;
  v57[5] = v74;
  v57[6] = v75;
  v57[7] = v76;
  v57[0] = v69;
  v57[1] = v70;
  v57[2] = v71;
  v57[3] = v72;
  memcpy((char *)&v57[11] + 8, v52, 0x151uLL);
  v56 = 0;
  v55 = 0;
  v54 = 0;
  v53 = 0;
  memcpy((void *)a3, v57, 0x210uLL);
  v43 = v56;
  v44 = v55;
  v45 = v54;
  v46 = v53;
  *(_QWORD *)(a3 + 528) = v19;
  *(_QWORD *)(a3 + 536) = v25;
  *(_QWORD *)(a3 + 544) = v31;
  *(_QWORD *)(a3 + 552) = v35;
  *(_BYTE *)(a3 + 560) = v38;
  *(_QWORD *)(a3 + 568) = v40;
  *(_BYTE *)(a3 + 576) = v43;
  *(_QWORD *)(a3 + 584) = v41;
  *(_BYTE *)(a3 + 592) = v44;
  *(_QWORD *)(a3 + 600) = v42;
  *(_BYTE *)(a3 + 608) = v45;
  *(_QWORD *)(a3 + 616) = KeyPath;
  *(_BYTE *)(a3 + 624) = v46;
  outlined retain of ModifiedContent<ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>, _FlexFrameLayout>((uint64_t)v50);
  outlined retain of VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>((uint64_t)v52);
  swift_retain();
  swift_retain();
  outlined copy of Environment<ControlSize>.Content(v40, 0);
  outlined copy of Environment<ControlSize>.Content(v41, 0);
  outlined copy of Environment<ControlSize>.Content(v42, 0);
  outlined copy of Environment<SceneBridge?>.Content(KeyPath, 0);
  swift_release();
  swift_release();
  outlined consume of Environment<ControlSize>.Content(v40, 0);
  outlined consume of Environment<ControlSize>.Content(v41, 0);
  outlined consume of Environment<ControlSize>.Content(v42, 0);
  outlined consume of Environment<AnyShapeStyle?>.Content(KeyPath, 0);
  v58 = (int64x2_t)(unint64_t)v18;
  LOBYTE(v59[0]) = 1;
  memcpy((char *)v59 + 1, v82, 0x140uLL);
  outlined release of VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>((uint64_t)&v58);
  v60[8] = v77;
  v60[9] = v78;
  v60[10] = v79;
  v61 = v80;
  v60[4] = v73;
  v60[5] = v74;
  v60[6] = v75;
  v60[7] = v76;
  v60[0] = v69;
  v60[1] = v70;
  v60[2] = v71;
  v60[3] = v72;
  return outlined release of ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>((uint64_t)v60);
}

uint64_t SizedHalfOpenCircularGauge.centerContent(proxy:)@<X0>(int64x2_t *a1@<X8>)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int8 v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = v1[7];
  v23 = v1[6];
  v24 = v3;
  v4 = v1[9];
  v25 = v1[8];
  v26 = v4;
  v5 = v1[3];
  v19 = v1[2];
  v20 = v5;
  v6 = v1[5];
  v21 = v1[4];
  v22 = v6;
  v7 = v1[1];
  v18[0] = *v1;
  v18[1] = v7;
  v8 = BYTE8(v18[0]);
  if ((BYTE8(v18[0]) & 1) != 0)
  {
    KeyPath = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0uLL;
  }
  else
  {
    GeometryProxy.size.getter();
    static Font.Weight.medium.getter();
    static Font.system(size:weight:design:)();
    v10 = Font.leading(_:)();
    swift_release();
    KeyPath = swift_getKeyPath();
    v14 = *((_QWORD *)&v19 + 1);
    v15 = v20;
    v16 = BYTE8(v20);
    outlined retain of SizedHalfOpenCircularGauge((uint64_t)v18);
    outlined copy of Environment<(Color, Color)?>.Content(v14, v15, v16);
    v12 = specialized Environment.wrappedValue.getter(v14, v15, v16);
    outlined consume of Environment<(Color, Color)?>.Content(v14, v15, v16);
    if (v12)
      swift_release();
    outlined release of SizedHalfOpenCircularGauge((uint64_t)v18);
    v11 = swift_getKeyPath();
    result = swift_getKeyPath();
    v13 = vdupq_n_s64(1uLL);
    v13.i64[0] = result;
  }
  a1->i64[0] = KeyPath;
  a1->i64[1] = v10;
  a1[1].i64[0] = v11;
  a1[1].i64[1] = v12;
  a1[2] = v13;
  a1[3].i8[0] = 0;
  a1[3].i8[1] = v8;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in SizedHalfOpenCircularGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  __int128 v7;
  double v8;
  double v9;
  __int128 v10;
  double v11;
  double v12;
  __int128 v13;
  uint64_t KeyPath;
  _BYTE v16[288];
  _BYTE v17[160];
  _BYTE __dst[272];
  _QWORD v19[38];
  _OWORD v20[19];
  char v21;
  _OWORD __src[18];
  uint64_t v23;
  char v24;

  SizedHalfOpenCircularGauge.bottomContent(proxy:)((__int128 *)a2, (uint64_t)v17);
  v6 = *(double *)(a1 + 152);
  v7 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v7;
  v20[2] = *(_OWORD *)(a2 + 32);
  LODWORD(v20[3]) = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  v9 = v6 * v8;
  v10 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v10;
  v20[2] = *(_OWORD *)(a2 + 32);
  LODWORD(v20[3]) = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  v12 = v11 * 0.3;
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, v9, 0, 0.0, 1, __src, 0.0, 1, v12, 0);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>((uint64_t)v17);
  memcpy(__dst, __src, sizeof(__dst));
  memcpy(v19, __src, 0x110uLL);
  v13 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v13;
  v20[2] = *(_OWORD *)(a2 + 32);
  LODWORD(v20[3]) = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, MEMORY[0x1E0CE35F0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
  View.baselineOffset(_:)();
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>((uint64_t)__dst);
  memcpy(v16, v20, sizeof(v16));
  KeyPath = swift_getKeyPath();
  memcpy(v19, v16, 0x120uLL);
  v19[36] = KeyPath;
  LOBYTE(v19[37]) = 1;
  v21 = 1;
  memcpy((char *)v20 + 7, v19, 0x129uLL);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  memcpy((void *)(a3 + 9), v20, 0x130uLL);
  memcpy(__src, v16, sizeof(__src));
  v23 = KeyPath;
  v24 = 1;
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>((uint64_t)v19);
  return outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>((uint64_t)__src);
}

uint64_t SizedHalfOpenCircularGauge.bottomContent(proxy:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;

  v4 = a1[1];
  v44 = *a1;
  v45 = v4;
  v46 = a1[2];
  v47 = *((_DWORD *)a1 + 12);
  v5 = v2[7];
  v40 = v2[6];
  v41 = v5;
  v6 = v2[9];
  v42 = v2[8];
  v43 = v6;
  v7 = v2[3];
  v36 = v2[2];
  v37 = v7;
  v8 = v2[5];
  v38 = v2[4];
  v39 = v8;
  v9 = v2[1];
  v35[0] = *v2;
  v35[1] = v9;
  v28 = static VerticalAlignment.center.getter();
  closure #1 in SizedHalfOpenCircularGauge.bottomContent(proxy:)((uint64_t)v35, (uint64_t)&v29);
  v26 = *((_QWORD *)&v29 + 1);
  v27 = v29;
  v24 = *((_QWORD *)&v30 + 1);
  v25 = v30;
  v22 = *((_QWORD *)&v31 + 1);
  v23 = v31;
  v21 = v32;
  v19 = v34;
  v20 = v33;
  v29 = v44;
  v30 = v45;
  v31 = v46;
  LODWORD(v32) = v47;
  GeometryProxy.size.getter();
  static Font.Weight.medium.getter();
  LOBYTE(v29) = 4;
  static Font.system(size:weight:design:)();
  LOBYTE(v29) = 1;
  v10 = Font.leading(_:)();
  swift_release();
  KeyPath = swift_getKeyPath();
  v12 = swift_getKeyPath();
  v13 = *((_QWORD *)&v36 + 1);
  v14 = v37;
  v15 = BYTE8(v37);
  outlined retain of SizedHalfOpenCircularGauge((uint64_t)v35);
  outlined copy of Environment<(Color, Color)?>.Content(v13, v14, v15);
  v16 = specialized Environment.wrappedValue.getter(v13, v14, v15);
  outlined consume of Environment<(Color, Color)?>.Content(v13, v14, v15);
  if (v16)
    swift_release();
  outlined release of SizedHalfOpenCircularGauge((uint64_t)v35);
  v17 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a2 = v28;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = v27;
  *(_QWORD *)(a2 + 32) = v26;
  *(_QWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 48) = v24;
  *(_QWORD *)(a2 + 56) = v23;
  *(_QWORD *)(a2 + 64) = v22;
  *(_QWORD *)(a2 + 72) = v21;
  *(_BYTE *)(a2 + 80) = v20;
  *(_BYTE *)(a2 + 81) = v19;
  *(_QWORD *)(a2 + 88) = KeyPath;
  *(_QWORD *)(a2 + 96) = v10;
  *(_QWORD *)(a2 + 104) = v12;
  *(_QWORD *)(a2 + 112) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 120) = v17;
  *(_QWORD *)(a2 + 128) = v16;
  *(_QWORD *)(a2 + 136) = result;
  *(_QWORD *)(a2 + 144) = 1;
  *(_BYTE *)(a2 + 152) = 0;
  return result;
}

uint64_t closure #1 in SizedHalfOpenCircularGauge.bottomContent(proxy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  char v7;
  double v8;
  double v10;

  v3 = *(_BYTE *)(a1 + 9);
  if ((v3 & 1) != 0)
  {
    KeyPath = 0;
    v5 = 0;
    result = 0;
    v7 = 0;
    v8 = 0.0;
  }
  else
  {
    v5 = *(_BYTE *)(a1 + 10) & 1;
    GeometryProxy.size.getter();
    v8 = v10 * 1.5 / *(double *)(a1 + 128);
    KeyPath = swift_getKeyPath();
    result = swift_getKeyPath();
    v7 = 2;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = KeyPath;
  *(_QWORD *)(a2 + 16) = 0;
  *(double *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = result;
  *(_BYTE *)(a2 + 56) = v7;
  *(_BYTE *)(a2 + 57) = v3 & 1;
  return result;
}

double implicit closure #2 in implicit closure #1 in RingOverlay.body.getter@<D0>(uint64_t a1@<X8>)
{
  return RingOverlay.content(_:)(a1);
}

double RingOverlay.content(_:)@<D0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  double result;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unsigned __int8 v59;

  v3 = v1[5];
  v57 = v1[4];
  v58 = v3;
  v59 = *((_BYTE *)v1 + 96);
  v4 = v1[1];
  v53 = *v1;
  v54 = v4;
  v5 = v1[3];
  v55 = v1[2];
  v56 = v5;
  GeometryProxy.size.getter();
  v7 = v6;
  GeometryProxy.size.getter();
  v9 = v8;
  v10 = *((double *)&v53 + 1);
  v11 = *(double *)&v53 * 0.5 + 1.57079633;
  v12 = v11 + 6.28318531 - *(double *)&v53;
  v13 = v55;
  v42 = v57;
  v43 = v58;
  LOBYTE(v44) = v59;
  v38 = v53;
  v39 = v54;
  v40 = v55;
  v41 = v56;
  v14 = RingOverlay.resolveTint(_:startAngle:endAngle:)(v54, v11, v12);
  v15 = v14;
  if (*((_QWORD *)&v54 + 1))
  {
    v42 = v57;
    v43 = v58;
    LOBYTE(v44) = v59;
    v38 = v53;
    v39 = v54;
    v40 = v55;
    v41 = v56;
    v16 = swift_retain();
    v17 = RingOverlay.resolveTint(_:startAngle:endAngle:)(v16, v11, v12);
    swift_release();
  }
  else if ((_BYTE)v55)
  {
    *(_QWORD *)&v38 = v14;
    DWORD2(v38) = 1051931443;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], MEMORY[0x1E0CE4650]);
    lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>();
    swift_retain();
    v17 = AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    swift_retain();
    v17 = v15;
  }
  v18 = *((_QWORD *)&v58 + 1);
  v19 = v59;
  outlined retain of RingOverlay((uint64_t)&v53);
  outlined copy of Environment<SceneBridge?>.Content(v18, v19);
  v20 = specialized Environment.wrappedValue.getter(v18, v19);
  outlined consume of Environment<AnyShapeStyle?>.Content(v18, v19);
  outlined release of RingOverlay((uint64_t)&v53);
  if (!v20)
  {
    swift_retain();
    v20 = v15;
  }
  if (v9 >= v7)
    v21 = v7;
  else
    v21 = v9;
  v22 = v21 / 10.5;
  v23 = v10 * (v12 - v11);
  v24 = v11 + v23;
  if (v13)
    v25 = v11 + v23;
  else
    v25 = v12;
  v26 = (v21 - v22) * 0.5;
  v27 = static Alignment.center.getter();
  v29 = v28;
  closure #1 in RingOverlay.content(_:)((uint64_t)&v53, v17, v15, v20, (uint64_t)&v38, v22, v26, v11, v12, v25, v24);
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = v29;
  v30 = v51;
  *(_OWORD *)(a1 + 208) = v50;
  *(_OWORD *)(a1 + 224) = v30;
  *(_OWORD *)(a1 + 240) = v52[0];
  *(_OWORD *)(a1 + 254) = *(_OWORD *)((char *)v52 + 14);
  v31 = v47;
  *(_OWORD *)(a1 + 144) = v46;
  *(_OWORD *)(a1 + 160) = v31;
  v32 = v49;
  *(_OWORD *)(a1 + 176) = v48;
  *(_OWORD *)(a1 + 192) = v32;
  v33 = v43;
  *(_OWORD *)(a1 + 80) = v42;
  *(_OWORD *)(a1 + 96) = v33;
  v34 = v45;
  *(_OWORD *)(a1 + 112) = v44;
  *(_OWORD *)(a1 + 128) = v34;
  v35 = v39;
  *(_OWORD *)(a1 + 16) = v38;
  *(_OWORD *)(a1 + 32) = v35;
  result = *(double *)&v40;
  v37 = v41;
  *(_OWORD *)(a1 + 48) = v40;
  *(_OWORD *)(a1 + 64) = v37;
  return result;
}

uint64_t RingOverlay.resolveTint(_:startAngle:endAngle:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  v7 = *(_QWORD *)(v3 + 72);
  v8 = *(unsigned __int8 *)(v3 + 80);
  AnyShapeStyle.as<A>(type:)();
  v9 = v14[0];
  if (v14[0])
  {
    outlined copy of Environment<ControlSize>.Content(v7, v8);
    specialized Environment.wrappedValue.getter(v7, v8, v14);
    outlined consume of Environment<ControlSize>.Content(v7, v8);
    if (LOBYTE(v14[0]) == 1)
    {
      v10 = Gradient.reversed.getter();
      swift_bridgeObjectRelease();
      v9 = v10;
    }
    static UnitPoint.center.getter();
    v14[0] = v9;
    v14[1] = v11;
    v14[2] = v12;
    *(double *)&v14[3] = a2;
    *(double *)&v14[4] = a3;
    return AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    swift_retain();
  }
  return a1;
}

uint64_t closure #1 in RingOverlay.content(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>, double a10@<D4>, double a11@<D6>)
{
  int v19;
  double v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  __int16 v70;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[166];
  _QWORD v87[5];
  float v88;
  __int16 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  uint64_t v100;
  char v101;
  _BYTE v102[7];
  uint64_t v103;
  uint64_t v104;
  _BYTE v105[7];
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  uint64_t v111;

  v19 = *(unsigned __int8 *)(a1 + 32);
  if (v19 != 1)
  {
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(unsigned __int8 *)(a1 + 48);
    outlined retain of RingOverlay(a1);
    outlined copy of Environment<ControlSize>.Content(v23, v24);
    specialized Environment.wrappedValue.getter(v23, v24, (uint64_t *)v86);
    outlined consume of Environment<ControlSize>.Content(v23, v24);
    if ((v86[0] & 2) != 0)
    {
      v25 = *(_QWORD *)(a1 + 56);
      v26 = *(unsigned __int8 *)(a1 + 64);
      outlined copy of Environment<ControlSize>.Content(v25, v26);
      v27 = specialized Environment.wrappedValue.getter(v25, v26);
      outlined consume of Environment<ControlSize>.Content(v25, v26);
      outlined release of RingOverlay(a1);
      if ((v27 & 1) != 0)
      {
        v72 = 0;
        v70 = 0;
        v69 = 0.0;
        v22 = 0.3;
LABEL_10:
        a3 = a2;
        v65 = 0.0;
        v66 = 0.0;
        a9 = 0.0;
        goto LABEL_11;
      }
    }
    else
    {
      outlined release of RingOverlay(a1);
    }
    v72 = 0;
    v70 = 0;
    v69 = 0.0;
    v22 = 1.0;
    goto LABEL_10;
  }
  v21 = 0.0;
  if (*(double *)(a1 + 8) > 0.0)
    v21 = 1.0;
  v22 = v21;
  swift_retain();
  v70 = 256;
  v69 = a6;
  v65 = a8;
  v66 = a7;
  v72 = a2;
LABEL_11:
  swift_retain();
  v28 = static Alignment.center.getter();
  v67 = v29;
  v68 = v28;
  if (!v19)
  {
    static Color.black.getter();
    v43 = *(_QWORD *)(a1 + 40);
    v44 = *(unsigned __int8 *)(a1 + 48);
    outlined retain of RingOverlay(a1);
    outlined copy of Environment<ControlSize>.Content(v43, v44);
    specialized Environment.wrappedValue.getter(v43, v44, (uint64_t *)v86);
    outlined consume of Environment<ControlSize>.Content(v43, v44);
    if ((v86[0] & 2) != 0)
    {
      v45 = *(_QWORD *)(a1 + 56);
      v46 = *(unsigned __int8 *)(a1 + 64);
      outlined copy of Environment<ControlSize>.Content(v45, v46);
      specialized Environment.wrappedValue.getter(v45, v46);
      outlined consume of Environment<ControlSize>.Content(v45, v46);
    }
    outlined release of RingOverlay(a1);
    v38 = Color.opacity(_:)();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    v62 = v106;
    v63 = v107;
    v74 = v108;
    v47 = v109;
    v32 = v110;
    v31 = v111;
    v48 = *(_QWORD *)(a1 + 40);
    v49 = *(unsigned __int8 *)(a1 + 48);
    outlined retain of RingOverlay(a1);
    outlined copy of Environment<ControlSize>.Content(v48, v49);
    specialized Environment.wrappedValue.getter(v48, v49, (uint64_t *)v86);
    outlined consume of Environment<ControlSize>.Content(v48, v49);
    if ((v86[0] & 2) != 0)
    {
      v50 = *(_QWORD *)(a1 + 56);
      v51 = *(unsigned __int8 *)(a1 + 64);
      outlined copy of Environment<ControlSize>.Content(v50, v51);
      v52 = specialized Environment.wrappedValue.getter(v50, v51);
      outlined consume of Environment<ControlSize>.Content(v50, v51);
      outlined release of RingOverlay(a1);
      if ((v52 & 1) != 0)
      {
        v53 = 0;
LABEL_20:
        v54 = v53 | 0x10000000000;
        swift_retain();
        v40 = v54;
        v39 = a4;
        v34 = v74;
        v30 = 18;
        v37 = 256;
        v41 = a7;
        v42 = a6;
        v33 = v47;
        v36 = v62;
        v35 = v63;
        goto LABEL_21;
      }
    }
    else
    {
      outlined release of RingOverlay(a1);
    }
    v53 = 1065353216;
    goto LABEL_20;
  }
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0.0;
  a11 = 0.0;
  v42 = 0.0;
LABEL_21:
  v75 = v34;
  v64 = v33;
  *(double *)&v76 = a6;
  *((double *)&v76 + 1) = a7;
  *(double *)&v77 = a8;
  *((double *)&v77 + 1) = a10;
  *(_QWORD *)&v78 = a3;
  *((float *)&v78 + 2) = v22;
  WORD6(v78) = 256;
  *(_QWORD *)&v79 = v38;
  *((_QWORD *)&v79 + 1) = v37;
  *(_QWORD *)&v80 = v36;
  *((_QWORD *)&v80 + 1) = v35;
  *(_QWORD *)&v81 = v34;
  *((_QWORD *)&v81 + 1) = v33;
  *(_QWORD *)&v82 = v32;
  *((_QWORD *)&v82 + 1) = v31;
  *(double *)&v83 = a11;
  *((double *)&v83 + 1) = v41;
  *(_QWORD *)&v84 = 0;
  BYTE8(v84) = v30;
  *(_DWORD *)((char *)&v84 + 9) = *(_DWORD *)v105;
  HIDWORD(v84) = *(_DWORD *)&v105[3];
  *(_QWORD *)&v85 = v68;
  *((_QWORD *)&v85 + 1) = v67;
  *(_OWORD *)&v86[6] = v76;
  *(_OWORD *)&v86[22] = v77;
  *(_OWORD *)&v86[86] = v81;
  *(_OWORD *)&v86[70] = v80;
  *(_OWORD *)&v86[54] = v79;
  *(_OWORD *)&v86[38] = v78;
  *(_OWORD *)&v86[150] = v85;
  *(_OWORD *)&v86[134] = v84;
  *(_OWORD *)&v86[118] = v83;
  *(_OWORD *)&v86[102] = v82;
  v55 = *(_OWORD *)&v86[96];
  *(_OWORD *)(a5 + 154) = *(_OWORD *)&v86[112];
  v56 = *(_OWORD *)&v86[144];
  *(_OWORD *)(a5 + 170) = *(_OWORD *)&v86[128];
  *(_OWORD *)(a5 + 186) = v56;
  *(_QWORD *)(a5 + 200) = *(_QWORD *)&v86[158];
  v57 = *(_OWORD *)&v86[32];
  *(_OWORD *)(a5 + 90) = *(_OWORD *)&v86[48];
  v58 = *(_OWORD *)&v86[80];
  *(_OWORD *)(a5 + 106) = *(_OWORD *)&v86[64];
  *(_OWORD *)(a5 + 122) = v58;
  *(_OWORD *)(a5 + 138) = v55;
  v59 = *(_OWORD *)&v86[16];
  *(_OWORD *)(a5 + 42) = *(_OWORD *)v86;
  *(_OWORD *)(a5 + 58) = v59;
  *(_OWORD *)(a5 + 74) = v57;
  *(double *)a5 = v69;
  *(double *)(a5 + 8) = v66;
  *(double *)(a5 + 16) = v65;
  *(double *)(a5 + 24) = a9;
  *(_QWORD *)(a5 + 32) = v72;
  *(_WORD *)(a5 + 40) = v70;
  *(double *)(a5 + 208) = v42;
  *(double *)(a5 + 216) = v41;
  *(double *)(a5 + 224) = a11;
  *(double *)(a5 + 232) = a11;
  *(_QWORD *)(a5 + 240) = v39;
  *(_WORD *)(a5 + 252) = WORD2(v40);
  *(_DWORD *)(a5 + 248) = v40;
  v60 = v30;
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>((uint64_t)&v76);
  *(double *)v87 = a6;
  *(double *)&v87[1] = a7;
  *(double *)&v87[2] = a8;
  *(double *)&v87[3] = a10;
  v87[4] = a3;
  v88 = v22;
  v89 = 256;
  v90 = v38;
  v91 = v37;
  v92 = v36;
  v93 = v35;
  v94 = v75;
  v95 = v64;
  v96 = v32;
  v97 = v31;
  v98 = a11;
  v99 = v41;
  v100 = 0;
  v101 = v60;
  *(_DWORD *)&v102[3] = *(_DWORD *)&v105[3];
  *(_DWORD *)v102 = *(_DWORD *)v105;
  v103 = v68;
  v104 = v67;
  outlined release of ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>((uint64_t)v87);
  return swift_release();
}

uint64_t protocol witness for View.body.getter in conformance RingOverlay@<X0>(double (**a1)@<D0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[6];
  char v12;

  v3 = *(_OWORD *)(v1 + 80);
  v11[4] = *(_OWORD *)(v1 + 64);
  v11[5] = v3;
  v12 = *(_BYTE *)(v1 + 96);
  v4 = *(_OWORD *)(v1 + 16);
  v11[0] = *(_OWORD *)v1;
  v11[1] = v4;
  v5 = *(_OWORD *)(v1 + 48);
  v11[2] = *(_OWORD *)(v1 + 32);
  v11[3] = v5;
  v6 = swift_allocObject();
  v7 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v6 + 96) = v7;
  *(_BYTE *)(v6 + 112) = *(_BYTE *)(v1 + 96);
  v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v6 + 32) = v8;
  v9 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v6 + 64) = v9;
  *a1 = partial apply for implicit closure #2 in implicit closure #1 in RingOverlay.body.getter;
  a1[1] = (double (*)@<D0>(uint64_t@<X8>))v6;
  return outlined retain of RingOverlay((uint64_t)v11);
}

uint64_t OpenRing.path(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, double a6@<D6>, double a7@<D7>)
{
  uint64_t result;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[40];
  __int128 v21;
  __int128 v22;
  char v23;
  _OWORD v24[2];
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[40];
  CGRect v33;
  CGRect v34;

  CGRectGetMidX(*(CGRect *)&a2);
  if (a6 == a7)
  {
    __sincos_stret(a6);
    v33.origin.x = a2;
    v33.origin.y = a3;
    v33.size.width = a4;
    v33.size.height = a5;
    CGRectGetMidY(v33);
    v26 = 0x3FF0000000000000;
    v27 = 0;
    v28 = 0;
    v29 = 0x3FF0000000000000;
    v30 = 0;
    v31 = 0;
    result = Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
    v15 = 0u;
    v16 = 0u;
    v17 = 6;
  }
  else
  {
    v34.origin.x = a2;
    v34.origin.y = a3;
    v34.size.width = a4;
    v34.size.height = a5;
    CGRectGetMidY(v34);
    v26 = 0x3FF0000000000000;
    v27 = 0;
    v28 = 0;
    v29 = 0x3FF0000000000000;
    v30 = 0;
    v31 = 0;
    Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
    memset(v24, 0, sizeof(v24));
    v25 = 6;
    outlined init with take of Path.Storage((uint64_t)v24, (uint64_t)v32);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    Path.strokedPath(_:)();
    v18 = v22;
    v19 = v21;
    v17 = v23;
    outlined release of StrokeStyle((uint64_t)v20);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    result = outlined retain of TableColumnCustomizationID.Base((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    v16 = v18;
    v15 = v19;
  }
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  *(_BYTE *)(a1 + 32) = v17;
  return result;
}

double protocol witness for Shape.path(in:) in conformance OpenRing@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  uint64_t v5;
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  OpenRing.path(in:)((uint64_t)v9, a2, a3, a4, a5, *(double *)(v5 + 16), *(double *)(v5 + 24));
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

__n128 protocol witness for View.body.getter in conformance OpenRing@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 32) = 256;
  return result;
}

CGFloat protocol witness for GeometryEffect.effectValue(size:) in conformance RotationOffsetEffect@<D0>(uint64_t a1@<X8>, unint64_t a2@<D0>, unint64_t a3@<D1>)
{
  uint64_t v3;
  CGFloat v7;
  CGFloat v8;
  CGPoint v9;
  CGFloat tx;
  CGFloat ty;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CGFloat result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CGAffineTransform v31;
  CGAffineTransform v32;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v7 = *(double *)(v3 + 8);
  v8 = *(double *)(v3 + 16);
  static UnitPoint.center.getter();
  v9 = UnitPoint.in(_:)((CGSize)__PAIR128__(a3, a2));
  CGAffineTransformMakeTranslation(&t1, v7, v8);
  v25 = *(_OWORD *)&t1.c;
  v28 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -v9.x, -v9.y);
  v12 = *(_OWORD *)&t1.a;
  v13 = *(_OWORD *)&t1.c;
  v14 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v28;
  *(_OWORD *)&t1.c = v25;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v12;
  *(_OWORD *)&t2.c = v13;
  *(_OWORD *)&t2.tx = v14;
  CGAffineTransformConcat(&v32, &t1, &t2);
  v26 = *(_OWORD *)&v32.c;
  v29 = *(_OWORD *)&v32.a;
  v15 = v32.tx;
  v16 = v32.ty;
  CGAffineTransform.init(rotation:)();
  *(_OWORD *)&t2.a = v29;
  *(_OWORD *)&t2.c = v26;
  t2.tx = v15;
  t2.ty = v16;
  v32 = t1;
  CGAffineTransformConcat(&v31, &t2, &v32);
  v27 = *(_OWORD *)&v31.c;
  v30 = *(_OWORD *)&v31.a;
  v17 = v31.tx;
  v18 = v31.ty;
  CGAffineTransformMakeTranslation(&t2, v9.x, v9.y);
  v19 = *(_OWORD *)&t2.a;
  v20 = *(_OWORD *)&t2.c;
  v21 = *(_OWORD *)&t2.tx;
  *(_OWORD *)&t2.a = v30;
  *(_OWORD *)&t2.c = v27;
  t2.tx = v17;
  t2.ty = v18;
  *(_OWORD *)&v32.a = v19;
  *(_OWORD *)&v32.c = v20;
  *(_OWORD *)&v32.tx = v21;
  CGAffineTransformConcat(&v31, &t2, &v32);
  result = v31.a;
  v23 = *(_OWORD *)&v31.c;
  v24 = *(_OWORD *)&v31.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v31.a;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v23;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v24;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RotationOffsetEffect()
{
  lazy protocol witness table accessor for type RotationOffsetEffect and conformance RotationOffsetEffect();
  return static GeometryEffect.makeGeometryEffect(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance RotationOffsetEffect()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

__n128 protocol witness for Animatable.animatableData.getter in conformance RotationOffsetEffect@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(double *)a1 = *(double *)v1 * 128.0;
  result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 protocol witness for Animatable.animatableData.setter in conformance RotationOffsetEffect(uint64_t a1)
{
  uint64_t v1;
  __n128 result;

  *(double *)v1 = *(double *)a1 * 0.0078125;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 8) = result;
  return result;
}

double (*protocol witness for Animatable.animatableData.modify in conformance RotationOffsetEffect(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  *(double *)a1 = *(double *)v1 * 128.0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  return protocol witness for Animatable.animatableData.modify in conformance RotationOffsetEffect;
}

double protocol witness for Animatable.animatableData.modify in conformance RotationOffsetEffect(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;

  v1 = *(_QWORD *)(a1 + 24);
  result = *(double *)a1 * 0.0078125;
  v3 = *(_OWORD *)(a1 + 8);
  *(double *)v1 = result;
  *(_OWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t destroy for RingOverlay(uint64_t a1)
{
  swift_release();
  swift_release();
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80));
  return outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(a1 + 88), *(unsigned __int8 *)(a1 + 96));
}

uint64_t initializeWithCopy for RingOverlay(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(unsigned __int8 *)(a2 + 48);
  swift_retain();
  swift_retain();
  outlined copy of Environment<ControlSize>.Content(v5, v6);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  LOBYTE(v5) = *(_BYTE *)(a2 + 64);
  outlined copy of Environment<ControlSize>.Content(v7, v5);
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = v5;
  v8 = *(_QWORD *)(a2 + 72);
  LOBYTE(v5) = *(_BYTE *)(a2 + 80);
  outlined copy of Environment<ControlSize>.Content(v8, v5);
  *(_QWORD *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 80) = v5;
  v9 = *(_QWORD *)(a2 + 88);
  v10 = *(unsigned __int8 *)(a2 + 96);
  outlined copy of Environment<SceneBridge?>.Content(v9, v10);
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 96) = v10;
  return a1;
}

uint64_t assignWithCopy for RingOverlay(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_BYTE *)(a2 + 48);
  outlined copy of Environment<ControlSize>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = v5;
  outlined consume of Environment<ControlSize>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_BYTE *)(a2 + 64);
  outlined copy of Environment<ControlSize>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(unsigned __int8 *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = v9;
  outlined consume of Environment<ControlSize>.Content(v10, v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_BYTE *)(a2 + 80);
  outlined copy of Environment<ControlSize>.Content(v12, v13);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(unsigned __int8 *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 80) = v13;
  outlined consume of Environment<ControlSize>.Content(v14, v15);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(unsigned __int8 *)(a2 + 96);
  outlined copy of Environment<SceneBridge?>.Content(v16, v17);
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *(unsigned __int8 *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v16;
  *(_BYTE *)(a1 + 96) = v17;
  outlined consume of Environment<AnyShapeStyle?>.Content(v18, v19);
  return a1;
}

uint64_t assignWithTake for RingOverlay(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = v4;
  outlined consume of Environment<ControlSize>.Content(v5, v6);
  v7 = *(_BYTE *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(unsigned __int8 *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = v7;
  outlined consume of Environment<ControlSize>.Content(v8, v9);
  v10 = *(_BYTE *)(a2 + 80);
  v11 = *(_QWORD *)(a1 + 72);
  v12 = *(unsigned __int8 *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = v10;
  outlined consume of Environment<ControlSize>.Content(v11, v12);
  v13 = *(_BYTE *)(a2 + 96);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(unsigned __int8 *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v13;
  outlined consume of Environment<AnyShapeStyle?>.Content(v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for RingOverlay(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 97))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RingOverlay(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 97) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RingOverlay()
{
  return &type metadata for RingOverlay;
}

uint64_t destroy for SizedHalfOpenCircularGauge(uint64_t a1)
{
  swift_bridgeObjectRelease();
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  outlined consume of Environment<(Color, Color)?>.Content(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 80), *(unsigned __int8 *)(a1 + 88));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 96), *(unsigned __int8 *)(a1 + 104));
  return outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 112), *(unsigned __int8 *)(a1 + 120));
}

uint64_t initializeWithCopy for SizedHalfOpenCircularGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 7);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 32);
  swift_bridgeObjectRetain();
  outlined copy of Environment<SceneBridge?>.Content(v4, v5);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<(Color, Color)?>.Content(v6, v7, v8);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 64);
  LOBYTE(v7) = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<ControlSize>.Content(v9, v7);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = v7;
  v10 = *(_QWORD *)(a2 + 80);
  LOBYTE(v7) = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<ControlSize>.Content(v10, v7);
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 88) = v7;
  v11 = *(_QWORD *)(a2 + 96);
  LOBYTE(v7) = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<ControlSize>.Content(v11, v7);
  *(_QWORD *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 104) = v7;
  v12 = *(_QWORD *)(a2 + 112);
  LOBYTE(v7) = *(_BYTE *)(a2 + 120);
  outlined copy of Environment<ControlSize>.Content(v12, v7);
  *(_QWORD *)(a1 + 112) = v12;
  *(_BYTE *)(a1 + 120) = v7;
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v13;
  return a1;
}

uint64_t assignWithCopy for SizedHalfOpenCircularGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<SceneBridge?>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<(Color, Color)?>.Content(v8, v9, v10);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  outlined consume of Environment<(Color, Color)?>.Content(v11, v12, v13);
  v14 = *(_QWORD *)(a2 + 64);
  LOBYTE(v9) = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<ControlSize>.Content(v14, v9);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(unsigned __int8 *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v14;
  *(_BYTE *)(a1 + 72) = v9;
  outlined consume of Environment<ControlSize>.Content(v15, v16);
  v17 = *(_QWORD *)(a2 + 80);
  LOBYTE(v9) = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<ControlSize>.Content(v17, v9);
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v17;
  *(_BYTE *)(a1 + 88) = v9;
  outlined consume of Environment<ControlSize>.Content(v18, v19);
  v20 = *(_QWORD *)(a2 + 96);
  LOBYTE(v9) = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<ControlSize>.Content(v20, v9);
  v21 = *(_QWORD *)(a1 + 96);
  v22 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_BYTE *)(a1 + 104) = v9;
  outlined consume of Environment<ControlSize>.Content(v21, v22);
  v23 = *(_QWORD *)(a2 + 112);
  LOBYTE(v9) = *(_BYTE *)(a2 + 120);
  outlined copy of Environment<ControlSize>.Content(v23, v9);
  v24 = *(_QWORD *)(a1 + 112);
  v25 = *(unsigned __int8 *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v23;
  *(_BYTE *)(a1 + 120) = v9;
  outlined consume of Environment<ControlSize>.Content(v24, v25);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  return a1;
}

uint64_t assignWithTake for SizedHalfOpenCircularGauge(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of Environment<AnyShapeStyle?>.Content(v5, v6);
  v7 = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = v7;
  outlined consume of Environment<(Color, Color)?>.Content(v8, v9, v10);
  v11 = *(_BYTE *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(unsigned __int8 *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = v11;
  outlined consume of Environment<ControlSize>.Content(v12, v13);
  v14 = *(_BYTE *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 80);
  v16 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = v14;
  outlined consume of Environment<ControlSize>.Content(v15, v16);
  v17 = *(_BYTE *)(a2 + 104);
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = v17;
  outlined consume of Environment<ControlSize>.Content(v18, v19);
  v20 = *(_BYTE *)(a2 + 120);
  v21 = *(_QWORD *)(a1 + 112);
  v22 = *(unsigned __int8 *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = v20;
  outlined consume of Environment<ControlSize>.Content(v21, v22);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  v23 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v23;
  return a1;
}

uint64_t getEnumTagSinglePayload for SizedHalfOpenCircularGauge(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SizedHalfOpenCircularGauge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 160) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SizedHalfOpenCircularGauge()
{
  return &type metadata for SizedHalfOpenCircularGauge;
}

uint64_t storeEnumTagSinglePayload for HalfOpenCircularGauge.IndicatorStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1876B43C0 + 4 * byte_187C4FC45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1876B43F4 + 4 * byte_187C4FC40[v4]))();
}

uint64_t sub_1876B43F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876B43FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1876B4404);
  return result;
}

uint64_t sub_1876B4410(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1876B4418);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1876B441C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876B4424(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HalfOpenCircularGauge.IndicatorStyle()
{
  return &type metadata for HalfOpenCircularGauge.IndicatorStyle;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge>();
    v2[0] = lazy protocol witness table accessor for type SizedHalfOpenCircularGauge and conformance SizedHalfOpenCircularGauge();
    v2[1] = v2[0];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, MEMORY[0x1E0CE5FC8], MEMORY[0x1E0CE5FB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SizedHalfOpenCircularGauge and conformance SizedHalfOpenCircularGauge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SizedHalfOpenCircularGauge and conformance SizedHalfOpenCircularGauge;
  if (!lazy protocol witness table cache variable for type SizedHalfOpenCircularGauge and conformance SizedHalfOpenCircularGauge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SizedHalfOpenCircularGauge, &type metadata for SizedHalfOpenCircularGauge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizedHalfOpenCircularGauge and conformance SizedHalfOpenCircularGauge);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HalfOpenCircularGauge.IndicatorStyle and conformance HalfOpenCircularGauge.IndicatorStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HalfOpenCircularGauge.IndicatorStyle and conformance HalfOpenCircularGauge.IndicatorStyle;
  if (!lazy protocol witness table cache variable for type HalfOpenCircularGauge.IndicatorStyle and conformance HalfOpenCircularGauge.IndicatorStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HalfOpenCircularGauge.IndicatorStyle, &type metadata for HalfOpenCircularGauge.IndicatorStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HalfOpenCircularGauge.IndicatorStyle and conformance HalfOpenCircularGauge.IndicatorStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SizedHalfOpenCircularGauge()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in RingOverlay()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1876B45E4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 56), *(unsigned __int8 *)(v0 + 64));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 72), *(unsigned __int8 *)(v0 + 80));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 88), *(unsigned __int8 *)(v0 + 96));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(v0 + 104), *(unsigned __int8 *)(v0 + 112));
  return swift_deallocObject();
}

double partial apply for implicit closure #2 in implicit closure #1 in RingOverlay.body.getter@<D0>(uint64_t a1@<X8>)
{
  return implicit closure #2 in implicit closure #1 in RingOverlay.body.getter(a1);
}

uint64_t outlined retain of RingOverlay(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(unsigned __int8 *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(unsigned __int8 *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(unsigned __int8 *)(a1 + 96);
  swift_retain();
  swift_retain();
  outlined copy of Environment<ControlSize>.Content(v2, v3);
  outlined copy of Environment<ControlSize>.Content(v4, v5);
  outlined copy of Environment<ControlSize>.Content(v6, v7);
  outlined copy of Environment<SceneBridge?>.Content(v8, v9);
  return a1;
}

uint64_t outlined release of RingOverlay(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(unsigned __int8 *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(unsigned __int8 *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(unsigned __int8 *)(a1 + 96);
  swift_release();
  swift_release();
  outlined consume of Environment<ControlSize>.Content(v2, v3);
  outlined consume of Environment<ControlSize>.Content(v4, v5);
  outlined consume of Environment<ControlSize>.Content(v6, v7);
  outlined consume of Environment<AnyShapeStyle?>.Content(v8, v9);
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1876B47F4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
  outlined consume of Environment<(Color, Color)?>.Content(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 80), *(unsigned __int8 *)(v0 + 88));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 96), *(unsigned __int8 *)(v0 + 104));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 112), *(unsigned __int8 *)(v0 + 120));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 128), *(unsigned __int8 *)(v0 + 136));
  return swift_deallocObject();
}

void *partial apply for closure #1 in SizedHalfOpenCircularGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[3];
  int v10;
  _BYTE __src[632];

  v4 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v4;
  v9[2] = *(_OWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 48);
  v5 = static Alignment.center.getter();
  v7 = v6;
  closure #1 in closure #1 in SizedHalfOpenCircularGauge.body.getter(v2 + 16, (uint64_t)v9, (uint64_t)__src);
  *a2 = v5;
  a2[1] = v7;
  return memcpy(a2 + 2, __src, 0x271uLL);
}

uint64_t outlined retain of SizedHalfOpenCircularGauge(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(unsigned __int8 *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(unsigned __int8 *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  v12 = *(unsigned __int8 *)(a1 + 104);
  v15 = *(_QWORD *)(a1 + 112);
  v14 = *(unsigned __int8 *)(a1 + 120);
  swift_bridgeObjectRetain();
  outlined copy of Environment<SceneBridge?>.Content(v2, v3);
  outlined copy of Environment<(Color, Color)?>.Content(v4, v5, v6);
  outlined copy of Environment<ControlSize>.Content(v7, v8);
  outlined copy of Environment<ControlSize>.Content(v9, v10);
  outlined copy of Environment<ControlSize>.Content(v13, v12);
  outlined copy of Environment<ControlSize>.Content(v15, v14);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, MEMORY[0x1E0CE63B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, MEMORY[0x1E0CE7C38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>);
    v3[1] = MEMORY[0x1E0CE7C28];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE63A0]);
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = &protocol witness table for GaugeStyleConfiguration.CurrentValueLabel;
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t)&protocol conformance descriptor for LabelStyleWritingModifier<A>);
}

uint64_t outlined consume of _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  if ((a8 & 1) == 0)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined release of SizedHalfOpenCircularGauge(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(unsigned __int8 *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(unsigned __int8 *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  v12 = *(unsigned __int8 *)(a1 + 104);
  v15 = *(_QWORD *)(a1 + 112);
  v14 = *(unsigned __int8 *)(a1 + 120);
  swift_bridgeObjectRelease();
  outlined consume of Environment<AnyShapeStyle?>.Content(v2, v3);
  outlined consume of Environment<(Color, Color)?>.Content(v4, v5, v6);
  outlined consume of Environment<ControlSize>.Content(v7, v8);
  outlined consume of Environment<ControlSize>.Content(v9, v10);
  outlined consume of Environment<ControlSize>.Content(v13, v12);
  outlined consume of Environment<ControlSize>.Content(v15, v14);
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>, _FlexFrameLayout>(uint64_t a1)
{
  outlined copy of _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_BYTE *)(a1 + 49));
  swift_retain();
  return a1;
}

uint64_t outlined copy of _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  if ((a8 & 1) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined retain of VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>(uint64_t a1)
{
  outlined copy of _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>.Storage(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(unsigned __int8 *)(a1 + 120), *(_BYTE *)(a1 + 121));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined copy of _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if ((a9 & 1) == 0)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined release of VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>(uint64_t a1)
{
  outlined consume of _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>.Storage(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(unsigned __int8 *)(a1 + 120), *(_BYTE *)(a1 + 121));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined consume of _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;

  if ((a9 & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined release of ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>(uint64_t a1)
{
  outlined consume of _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_BYTE *)(a1 + 49));
  swift_release();
  return a1;
}

void type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>)
  {
    type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>();
    lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label> and conformance <> _ConditionalContent<A, B>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, MEMORY[0x1E0CE35F0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>);
    v3[1] = MEMORY[0x1E0CE35E0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, MEMORY[0x1E0CE63B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>);
    v3[1] = MEMORY[0x1E0CE63A0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, MEMORY[0x1E0CE73D0]);
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>(uint64_t a1)
{
  outlined consume of _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), *(_BYTE *)(a1 + 81));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1876B5484@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1876B54B0()
{
  return EnvironmentValues.allowsTightening.setter();
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1)
{
  outlined copy of _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), *(_BYTE *)(a1 + 81));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1)
{
  outlined consume of _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), *(_BYTE *)(a1 + 81));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

void *type metadata accessor for RotationOffsetEffect()
{
  return &unk_1E1AD42B0;
}

void *type metadata accessor for OpenRing()
{
  return &unk_1E1B0C768;
}

ValueMetadata *type metadata accessor for SizedHalfOpenCircularGauge.Metrics()
{
  return &type metadata for SizedHalfOpenCircularGauge.Metrics;
}

uint64_t sub_1876B56A4()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>> and conformance GeometryReader<A>, (uint64_t (*)(uint64_t))type metadata accessor for GeometryReader<ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>>, MEMORY[0x1E0CE2768]);
}

void type metadata accessor for GeometryReader<ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for GeometryReader<ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>, lazy protocol witness table accessor for type ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>> and conformance ZStack<A>, MEMORY[0x1E0CE5B88]);
    v0 = type metadata accessor for GeometryReader();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>>);
  }
}

void type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, MEMORY[0x1E0CE5B98], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?));
    v0 = type metadata accessor for ZStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>);
  }
}

void type metadata accessor for (_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?))
  {
    type metadata accessor for _ShapeView<OpenRing, AnyShapeStyle>?();
    type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?));
  }
}

void type metadata accessor for _ShapeView<OpenRing, AnyShapeStyle>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<OpenRing, AnyShapeStyle>?)
  {
    type metadata accessor for _ShapeView<OpenRing, AnyShapeStyle>(255, &lazy cache variable for type metadata for _ShapeView<OpenRing, AnyShapeStyle>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<OpenRing, AnyShapeStyle>?);
  }
}

unint64_t lazy protocol witness table accessor for type OpenRing and conformance OpenRing()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpenRing and conformance OpenRing;
  if (!lazy protocol witness table cache variable for type OpenRing and conformance OpenRing)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OpenRing, &unk_1E1B0C768);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenRing and conformance OpenRing);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpenRing and conformance OpenRing;
  if (!lazy protocol witness table cache variable for type OpenRing and conformance OpenRing)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OpenRing, &unk_1E1B0C768);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenRing and conformance OpenRing);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpenRing and conformance OpenRing;
  if (!lazy protocol witness table cache variable for type OpenRing and conformance OpenRing)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OpenRing, &unk_1E1B0C768);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenRing and conformance OpenRing);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, (void (*)(uint64_t))type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>);
  }
}

void type metadata accessor for _ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], MEMORY[0x1E0CE4650]);
    lazy protocol witness table accessor for type OpenRing and conformance OpenRing();
    lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>);
  }
}

void type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>? and conformance <A> A?();
    v0 = type metadata accessor for _OverlayModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, MEMORY[0x1E0CE35B8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, (uint64_t)&unk_1E1AD42B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, Color>, MEMORY[0x1E0CE1A90], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for _ShapeView<Circle, Color>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<Circle, Color>)
  {
    lazy protocol witness table accessor for type Circle and conformance Circle();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Circle, Color>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>? and conformance <A> A?)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for RotationOffsetEffect);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, lazy protocol witness table accessor for type _ShapeView<Circle, Color> and conformance _ShapeView<A, B>, MEMORY[0x1E0CE1A80]);
}

uint64_t lazy protocol witness table accessor for type _ShapeView<Circle, Color> and conformance _ShapeView<A, B>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<Circle, Color> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, Color>, MEMORY[0x1E0CE0E50]);
}

void type metadata accessor for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, MEMORY[0x1E0CE63B0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

uint64_t lazy protocol witness table accessor for type ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>> and conformance ZStack<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, MEMORY[0x1E0CE74D8]);
}

unint64_t lazy protocol witness table accessor for type _ShapeView<OpenRing, ForegroundStyle> and conformance _ShapeView<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ShapeView<OpenRing, ForegroundStyle> and conformance _ShapeView<A, B>;
  if (!lazy protocol witness table cache variable for type _ShapeView<OpenRing, ForegroundStyle> and conformance _ShapeView<A, B>)
  {
    type metadata accessor for _ShapeView<OpenRing, AnyShapeStyle>(255, &lazy cache variable for type metadata for _ShapeView<OpenRing, ForegroundStyle>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0E50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeView<OpenRing, ForegroundStyle> and conformance _ShapeView<A, B>);
  }
  return result;
}

void type metadata accessor for _ShapeView<OpenRing, AnyShapeStyle>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    lazy protocol witness table accessor for type OpenRing and conformance OpenRing();
    v3 = type metadata accessor for _ShapeView();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t instantiation function for generic protocol witness table for OpenRing(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type OpenRing and conformance OpenRing();
  result = lazy protocol witness table accessor for type OpenRing and conformance OpenRing();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in RotationOffsetEffect()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>, MEMORY[0x1E0CE26B8]);
}

void type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, MEMORY[0x1E0CE26B8]);
    v0 = type metadata accessor for AnimatablePair();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
  }
}

unint64_t instantiation function for generic protocol witness table for RotationOffsetEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type RotationOffsetEffect and conformance RotationOffsetEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type RotationOffsetEffect and conformance RotationOffsetEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RotationOffsetEffect and conformance RotationOffsetEffect;
  if (!lazy protocol witness table cache variable for type RotationOffsetEffect and conformance RotationOffsetEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RotationOffsetEffect, &unk_1E1AD42B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotationOffsetEffect and conformance RotationOffsetEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RotationOffsetEffect and conformance RotationOffsetEffect;
  if (!lazy protocol witness table cache variable for type RotationOffsetEffect and conformance RotationOffsetEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RotationOffsetEffect, &unk_1E1AD42B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotationOffsetEffect and conformance RotationOffsetEffect);
  }
  return result;
}

uint64_t HitTestingLeafPlatformView<>.responderForHitTesting.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t HitTestingLeafPlatformView<>.responderForHitTesting.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a1, a3);
  if (result)
  {
    type metadata accessor for ViewResponder();
    result = swift_dynamicCastClass();
    if (!result)
    {
      swift_release();
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for HitTestingLeafPlatformView.responderForHitTesting.getter in conformance PlatformViewHost<A>()
{
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return HitTestingLeafPlatformView<>.responderForHitTesting.getter(ObjectType, (uint64_t)&protocol witness table for PlatformViewHost<A>);
}

uint64_t protocol witness for HitTestingLeafPlatformView.responderForHitTesting.getter in conformance _UIHostingView<A1>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a1);
  return HitTestingLeafPlatformView<>.responderForHitTesting.getter(a1, v3, v2);
}

uint64_t initializeBufferWithCopyOfBuffer for FileExportOperation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    type metadata accessor for FileExportOperation.Mode(0);
    v5 = (char *)&loc_1876B61B8 + 4 * byte_187C50130[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t outlined copy of FileExportOperation.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return outlined copy of AnyTransferable?(a1);
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t outlined copy of AnyTransferable?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for FileExportOperation(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  type metadata accessor for FileExportOperation.Mode(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for FileExportOperation.Move(0);
      swift_release();
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 2u:
      outlined consume of FileExportOperation.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_6:
      swift_release();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  v5 = a1 + a2[6];
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = a1 + a2[7];
  if (*(_QWORD *)(v8 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  v9 = a1 + a2[8];
  if (*(_QWORD *)(v9 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v10 = a1 + a2[9];
  if (*(_QWORD *)(v10 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  v11 = a1 + a2[10];
  type metadata accessor for Predicate<Pack{URL}>();
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v11, 1, v12);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
  return result;
}

uint64_t outlined consume of FileExportOperation.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return outlined consume of AnyTransferable?(a1);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of AnyTransferable?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void initializeWithCopy for FileExportOperation()
{
  char *v0;

  type metadata accessor for FileExportOperation.Mode(0);
  v0 = (char *)sub_1876B6958 + 4 * byte_187C50138[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1876B6958()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v0, v1, v3);
  v4 = type metadata accessor for FileExportOperation.Move(0);
  v5 = *(int *)(v4 + 20);
  v6 = (_QWORD *)(v0 + v5);
  v7 = (uint64_t *)(v1 + v5);
  v9 = *v7;
  v8 = v7[1];
  *v6 = v9;
  v6[1] = v8;
  v10 = *(int *)(v4 + 24);
  v11 = (_QWORD *)(v0 + v10);
  v12 = (_QWORD *)(v1 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_retain();
  swift_storeEnumTagMultiPayload();
  v14 = v2[5];
  v15 = v2[6];
  v16 = (_QWORD *)(v0 + v14);
  v17 = (_QWORD *)(v1 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = (void *)(v0 + v15);
  v20 = (const void *)(v1 + v15);
  v21 = type metadata accessor for URL();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48);
  swift_bridgeObjectRetain();
  if (v23(v20, 1, v21))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v25 = v2[7];
  v26 = v0 + v25;
  v27 = v1 + v25;
  if (*(_QWORD *)(v1 + v25 + 24))
  {
    v28 = *(_QWORD *)v27;
    v29 = *(_QWORD *)(v27 + 8);
    v30 = *(_BYTE *)(v27 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v27, v29, v30);
    *(_QWORD *)v26 = v28;
    *(_QWORD *)(v26 + 8) = v29;
    *(_BYTE *)(v26 + 16) = v30;
    *(_QWORD *)(v26 + 24) = *(_QWORD *)(v27 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v31 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v31;
  }
  v32 = v2[8];
  v33 = v0 + v32;
  v34 = v1 + v32;
  if (*(_QWORD *)(v1 + v32 + 24))
  {
    v35 = *(_QWORD *)v34;
    v36 = *(_QWORD *)(v34 + 8);
    v37 = *(_BYTE *)(v34 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v34, v36, v37);
    *(_QWORD *)v33 = v35;
    *(_QWORD *)(v33 + 8) = v36;
    *(_BYTE *)(v33 + 16) = v37;
    *(_QWORD *)(v33 + 24) = *(_QWORD *)(v34 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v38 = *(_OWORD *)(v34 + 16);
    *(_OWORD *)v33 = *(_OWORD *)v34;
    *(_OWORD *)(v33 + 16) = v38;
  }
  v39 = v2[9];
  v40 = v0 + v39;
  v41 = v1 + v39;
  if (*(_QWORD *)(v1 + v39 + 24))
  {
    v42 = *(_QWORD *)v41;
    v43 = *(_QWORD *)(v41 + 8);
    v44 = *(_BYTE *)(v41 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v41, v43, v44);
    *(_QWORD *)v40 = v42;
    *(_QWORD *)(v40 + 8) = v43;
    *(_BYTE *)(v40 + 16) = v44;
    *(_QWORD *)(v40 + 24) = *(_QWORD *)(v41 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v45 = *(_OWORD *)(v41 + 16);
    *(_OWORD *)v40 = *(_OWORD *)v41;
    *(_OWORD *)(v40 + 16) = v45;
  }
  v46 = v2[10];
  v47 = (void *)(v0 + v46);
  v48 = (const void *)(v1 + v46);
  type metadata accessor for Predicate<Pack{URL}>();
  v50 = v49;
  v51 = *(_QWORD *)(v49 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v51 + 48))(v48, 1, v49))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v51 + 16))(v47, v48, v50);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v47, 0, 1, v50);
  }
  v53 = v2[12];
  *(_BYTE *)(v0 + v2[11]) = *(_BYTE *)(v1 + v2[11]);
  v54 = v0 + v53;
  v55 = v1 + v53;
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *(_BYTE *)(v54 + 8) = *(_BYTE *)(v55 + 8);
  return v0;
}

uint64_t assignWithCopy for FileExportOperation(uint64_t a1, uint64_t a2, int *a3)
{
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(void *, uint64_t, uint64_t);
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for FileExportOperation.Mode);
    type metadata accessor for FileExportOperation.Mode(0);
    v6 = (char *)&loc_1876B6DD4 + 4 * byte_187C5013C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_8:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_9:
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)(a1 + v19 + 24);
  v23 = *(_QWORD *)(a2 + v19 + 24);
  if (v22)
  {
    if (v23)
    {
      v24 = *(_QWORD *)v21;
      v25 = *(_QWORD *)(v21 + 8);
      v26 = *(_BYTE *)(v21 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v21, v25, v26);
      v27 = *(_QWORD *)v20;
      v28 = *(_QWORD *)(v20 + 8);
      v29 = *(_BYTE *)(v20 + 16);
      *(_QWORD *)v20 = v24;
      *(_QWORD *)(v20 + 8) = v25;
      *(_BYTE *)(v20 + 16) = v26;
      outlined consume of Text.Storage(v27, v28, v29);
      *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v20);
      v33 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *(_OWORD *)(v20 + 16) = v33;
    }
  }
  else if (v23)
  {
    v30 = *(_QWORD *)v21;
    v31 = *(_QWORD *)(v21 + 8);
    v32 = *(_BYTE *)(v21 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v21, v31, v32);
    *(_QWORD *)v20 = v30;
    *(_QWORD *)(v20 + 8) = v31;
    *(_BYTE *)(v20 + 16) = v32;
    *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v34 = *(_OWORD *)(v21 + 16);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *(_OWORD *)(v20 + 16) = v34;
  }
  v35 = a3[8];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = *(_QWORD *)(a1 + v35 + 24);
  v39 = *(_QWORD *)(a2 + v35 + 24);
  if (v38)
  {
    if (v39)
    {
      v40 = *(_QWORD *)v37;
      v41 = *(_QWORD *)(v37 + 8);
      v42 = *(_BYTE *)(v37 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v37, v41, v42);
      v43 = *(_QWORD *)v36;
      v44 = *(_QWORD *)(v36 + 8);
      v45 = *(_BYTE *)(v36 + 16);
      *(_QWORD *)v36 = v40;
      *(_QWORD *)(v36 + 8) = v41;
      *(_BYTE *)(v36 + 16) = v42;
      outlined consume of Text.Storage(v43, v44, v45);
      *(_QWORD *)(v36 + 24) = *(_QWORD *)(v37 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v36);
      v49 = *(_OWORD *)(v37 + 16);
      *(_OWORD *)v36 = *(_OWORD *)v37;
      *(_OWORD *)(v36 + 16) = v49;
    }
  }
  else if (v39)
  {
    v46 = *(_QWORD *)v37;
    v47 = *(_QWORD *)(v37 + 8);
    v48 = *(_BYTE *)(v37 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v37, v47, v48);
    *(_QWORD *)v36 = v46;
    *(_QWORD *)(v36 + 8) = v47;
    *(_BYTE *)(v36 + 16) = v48;
    *(_QWORD *)(v36 + 24) = *(_QWORD *)(v37 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v50 = *(_OWORD *)(v37 + 16);
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *(_OWORD *)(v36 + 16) = v50;
  }
  v51 = a3[9];
  v52 = a1 + v51;
  v53 = a2 + v51;
  v54 = *(_QWORD *)(a1 + v51 + 24);
  v55 = *(_QWORD *)(a2 + v51 + 24);
  if (v54)
  {
    if (v55)
    {
      v56 = *(_QWORD *)v53;
      v57 = *(_QWORD *)(v53 + 8);
      v58 = *(_BYTE *)(v53 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v53, v57, v58);
      v59 = *(_QWORD *)v52;
      v60 = *(_QWORD *)(v52 + 8);
      v61 = *(_BYTE *)(v52 + 16);
      *(_QWORD *)v52 = v56;
      *(_QWORD *)(v52 + 8) = v57;
      *(_BYTE *)(v52 + 16) = v58;
      outlined consume of Text.Storage(v59, v60, v61);
      *(_QWORD *)(v52 + 24) = *(_QWORD *)(v53 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v52);
      v65 = *(_OWORD *)(v53 + 16);
      *(_OWORD *)v52 = *(_OWORD *)v53;
      *(_OWORD *)(v52 + 16) = v65;
    }
  }
  else if (v55)
  {
    v62 = *(_QWORD *)v53;
    v63 = *(_QWORD *)(v53 + 8);
    v64 = *(_BYTE *)(v53 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v53, v63, v64);
    *(_QWORD *)v52 = v62;
    *(_QWORD *)(v52 + 8) = v63;
    *(_BYTE *)(v52 + 16) = v64;
    *(_QWORD *)(v52 + 24) = *(_QWORD *)(v53 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v66 = *(_OWORD *)(v53 + 16);
    *(_OWORD *)v52 = *(_OWORD *)v53;
    *(_OWORD *)(v52 + 16) = v66;
  }
  v67 = a3[10];
  v68 = (void *)(a1 + v67);
  v69 = (void *)(a2 + v67);
  type metadata accessor for Predicate<Pack{URL}>();
  v71 = v70;
  v72 = *(_QWORD *)(v70 - 8);
  v73 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v72 + 48);
  v74 = v73(v68, 1, v70);
  v75 = v73(v69, 1, v71);
  if (!v74)
  {
    if (!v75)
    {
      (*(void (**)(void *, void *, uint64_t))(v72 + 24))(v68, v69, v71);
      goto LABEL_37;
    }
    (*(void (**)(void *, uint64_t))(v72 + 8))(v68, v71);
    goto LABEL_36;
  }
  if (v75)
  {
LABEL_36:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v72 + 16))(v68, v69, v71);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v68, 0, 1, v71);
LABEL_37:
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v77 = a3[12];
  v78 = a1 + v77;
  v79 = (uint64_t *)(a2 + v77);
  v80 = *v79;
  *(_BYTE *)(v78 + 8) = *((_BYTE *)v79 + 8);
  *(_QWORD *)v78 = v80;
  return a1;
}

char *initializeWithTake for FileExportOperation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v6 = type metadata accessor for FileExportOperation.Mode(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = type metadata accessor for FileExportOperation.Move(0);
    *(_OWORD *)&a1[*(int *)(v8 + 20)] = *(_OWORD *)&a2[*(int *)(v8 + 20)];
    *(_OWORD *)&a1[*(int *)(v8 + 24)] = *(_OWORD *)&a2[*(int *)(v8 + 24)];
    swift_storeEnumTagMultiPayload();
  }
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  v20 = &a1[v16];
  v21 = &a2[v16];
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  v23 = a3[9];
  v24 = a3[10];
  v25 = *(_OWORD *)&a2[v23];
  v26 = *(_OWORD *)&a2[v23 + 16];
  v27 = &a1[v23];
  *(_OWORD *)v27 = v25;
  *((_OWORD *)v27 + 1) = v26;
  v28 = &a1[v24];
  v29 = &a2[v24];
  type metadata accessor for Predicate<Pack{URL}>();
  v31 = v30;
  v32 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v29, 1, v30))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v28, v29, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v31);
  }
  v34 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  v35 = &a1[v34];
  v36 = &a2[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v35[8] = v36[8];
  return a1;
}

char *assignWithTake for FileExportOperation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileExportOperation.Mode);
    v6 = type metadata accessor for FileExportOperation.Mode(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = type metadata accessor for FileExportOperation.Move(0);
      *(_OWORD *)&a1[*(int *)(v8 + 20)] = *(_OWORD *)&a2[*(int *)(v8 + 20)];
      *(_OWORD *)&a1[*(int *)(v8 + 24)] = *(_OWORD *)&a2[*(int *)(v8 + 24)];
      swift_storeEnumTagMultiPayload();
    }
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v13 = *(_QWORD *)v11;
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for URL();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_10:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_11:
  v23 = a3[7];
  v24 = (uint64_t)&a1[v23];
  v25 = &a2[v23];
  if (*(_QWORD *)&a1[v23 + 24])
  {
    if (*((_QWORD *)v25 + 3))
    {
      v26 = v25[16];
      v27 = *(_QWORD *)v24;
      v28 = *(_QWORD *)(v24 + 8);
      v29 = *(_BYTE *)(v24 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *(_BYTE *)(v24 + 16) = v26;
      outlined consume of Text.Storage(v27, v28, v29);
      *(_QWORD *)(v24 + 24) = *((_QWORD *)v25 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    outlined destroy of Text(v24);
  }
  v30 = *((_OWORD *)v25 + 1);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v30;
LABEL_16:
  v31 = a3[8];
  v32 = (uint64_t)&a1[v31];
  v33 = &a2[v31];
  if (*(_QWORD *)&a1[v31 + 24])
  {
    if (*((_QWORD *)v33 + 3))
    {
      v34 = v33[16];
      v35 = *(_QWORD *)v32;
      v36 = *(_QWORD *)(v32 + 8);
      v37 = *(_BYTE *)(v32 + 16);
      *(_OWORD *)v32 = *(_OWORD *)v33;
      *(_BYTE *)(v32 + 16) = v34;
      outlined consume of Text.Storage(v35, v36, v37);
      *(_QWORD *)(v32 + 24) = *((_QWORD *)v33 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of Text(v32);
  }
  v38 = *((_OWORD *)v33 + 1);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *(_OWORD *)(v32 + 16) = v38;
LABEL_21:
  v39 = a3[9];
  v40 = (uint64_t)&a1[v39];
  v41 = &a2[v39];
  if (*(_QWORD *)&a1[v39 + 24])
  {
    if (*((_QWORD *)v41 + 3))
    {
      v42 = v41[16];
      v43 = *(_QWORD *)v40;
      v44 = *(_QWORD *)(v40 + 8);
      v45 = *(_BYTE *)(v40 + 16);
      *(_OWORD *)v40 = *(_OWORD *)v41;
      *(_BYTE *)(v40 + 16) = v42;
      outlined consume of Text.Storage(v43, v44, v45);
      *(_QWORD *)(v40 + 24) = *((_QWORD *)v41 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    outlined destroy of Text(v40);
  }
  v46 = *((_OWORD *)v41 + 1);
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v46;
LABEL_26:
  v47 = a3[10];
  v48 = &a1[v47];
  v49 = &a2[v47];
  type metadata accessor for Predicate<Pack{URL}>();
  v51 = v50;
  v52 = *(_QWORD *)(v50 - 8);
  v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  v54 = v53(v48, 1, v50);
  v55 = v53(v49, 1, v51);
  if (!v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 40))(v48, v49, v51);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v48, v51);
    goto LABEL_31;
  }
  if (v55)
  {
LABEL_31:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v48, v49, v51);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v48, 0, 1, v51);
LABEL_32:
  v57 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  v58 = &a1[v57];
  v59 = &a2[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v59[8];
  return a1;
}

uint64_t sub_1876B79E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for FileExportOperation.Mode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + a3[5] + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v13 = v11;
      v14 = a3[6];
    }
    else
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v13 = v15;
      v12 = *(_QWORD *)(v15 - 8);
      v14 = a3[10];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1 + v14, a2, v13);
  }
}

uint64_t sub_1876B7AF0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = type metadata accessor for FileExportOperation.Mode(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[5] + 8) = a2;
      return result;
    }
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v10 = v16;
      v14 = *(_QWORD *)(v16 - 8);
      v15 = a4[10];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t *initializeBufferWithCopyOfBuffer for FileExportOperation.Move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)v4 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)v4 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for FileExportOperation.Move(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for FileExportOperation.Move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FileExportOperation.Move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for FileExportOperation.Move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for FileExportOperation.Move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FileExportOperation.Move()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876B7EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for FileExportOperation.Move()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876B7F7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FileExportOperation.Mode(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1876B8050 + 4 * byte_187C50140[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for FileExportOperation.Mode(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v3 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for FileExportOperation.Move(0);
      swift_release();
      goto LABEL_6;
    case 1:
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 2:
      outlined consume of FileExportOperation.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_6:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for FileExportOperation.Mode()
{
  char *v0;

  v0 = (char *)sub_1876B8374 + 4 * byte_187C50148[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1876B8374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  v3 = type metadata accessor for FileExportOperation.Move(0);
  v4 = *(int *)(v3 + 20);
  v5 = (_QWORD *)(v0 + v4);
  v6 = (uint64_t *)(v1 + v4);
  v8 = *v6;
  v7 = v6[1];
  *v5 = v8;
  v5[1] = v7;
  v9 = *(int *)(v3 + 24);
  v10 = (_QWORD *)(v0 + v9);
  v11 = (_QWORD *)(v1 + v9);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_retain();
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for FileExportOperation.Mode(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(result, type metadata accessor for FileExportOperation.Mode);
    v2 = (char *)&loc_1876B858C + 4 * byte_187C5014C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

char *initializeWithTake for FileExportOperation.Mode(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = type metadata accessor for FileExportOperation.Move(0);
    *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
    *(_OWORD *)&a1[*(int *)(v7 + 24)] = *(_OWORD *)&a2[*(int *)(v7 + 24)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for FileExportOperation.Mode(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileExportOperation.Mode);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = type metadata accessor for FileExportOperation.Move(0);
      *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
      *(_OWORD *)&a1[*(int *)(v7 + 24)] = *(_OWORD *)&a2[*(int *)(v7 + 24)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

ValueMetadata *type metadata accessor for FileExportOperation.Key()
{
  return &type metadata for FileExportOperation.Key;
}

uint64_t FileExportOperation.Resolved.init(base:environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t *v5;
  int *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t *v31;

  v4 = (int *)type metadata accessor for FileExportOperation.Resolved(0);
  v5 = (uint64_t *)(a2 + v4[7]);
  *v5 = 0;
  v5[1] = 0;
  v31 = v5;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for FileExportOperation);
  v6 = (int *)type metadata accessor for FileExportOperation(0);
  v7 = (uint64_t *)(a1 + v6[7]);
  if (v7[3])
  {
    v8 = v7[1];
    v9 = *v7;
    v10 = v7[2] & 1;
    outlined copy of Text.Storage(*v7, v8, v10);
    swift_bridgeObjectRetain();
    v11 = Text.resolveString(in:with:idiom:)();
    v13 = v12;
    outlined consume of Text.Storage(v9, v8, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v14 = (uint64_t *)(a2 + v4[5]);
  *v14 = v11;
  v14[1] = v13;
  v15 = (uint64_t *)(a1 + v6[8]);
  if (v15[3])
  {
    v16 = v15[1];
    v17 = *v15;
    v18 = v15[2] & 1;
    outlined copy of Text.Storage(*v15, v16, v18);
    swift_bridgeObjectRetain();
    v19 = Text.resolveString(in:with:idiom:)();
    v21 = v20;
    outlined consume of Text.Storage(v17, v16, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = 0;
    v21 = 0;
  }
  v22 = (uint64_t *)(a2 + v4[6]);
  *v22 = v19;
  v22[1] = v21;
  v23 = (uint64_t *)(a1 + v6[9]);
  if (v23[3])
  {
    v24 = v23[1];
    v25 = *v23;
    v26 = v23[2] & 1;
    outlined copy of Text.Storage(*v23, v24, v26);
    swift_bridgeObjectRetain();
    v27 = Text.resolveString(in:with:idiom:)();
    v29 = v28;
    outlined consume of Text.Storage(v25, v24, v26);
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for FileExportOperation);
    swift_release();
    swift_release();
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for FileExportOperation);
    swift_release();
    swift_release();
    v27 = 0;
    v29 = 0;
  }
  result = swift_bridgeObjectRelease();
  *v31 = v27;
  v31[1] = v29;
  return result;
}

void FileExportOperation.allowedContentTypes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for FileExportOperation.Mode(0);
  MEMORY[0x1E0C80A78](v1, v2);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v5 = (char *)sub_1876B8BE0 + 4 * byte_187C50150[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1876B8BE0()
{
  uint64_t v0;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0, type metadata accessor for FileExportOperation.Mode);
  return MEMORY[0x1E0DEE9D8];
}

uint64_t FileExportOperation.defaultFilename(contentType:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  Class v24;
  id v25;
  uint64_t v26;
  void *v27;
  Class isa;
  id v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for UTType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FileExportOperation.Mode(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v12, v13);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v14 = *(_QWORD *)v12;
    v15 = *((_QWORD *)v12 + 1);
    v16 = *((_QWORD *)v12 + 2);
    v32 = *((_QWORD *)v12 + 3);
    v33 = v14;
    v17 = v12[32];
    v18 = *((_QWORD *)v12 + 5);
    v19 = *((_QWORD *)v12 + 6);
    v20 = *((_QWORD *)v12 + 7);
    v34 = *((_QWORD *)v12 + 9);
    v35 = v18;
    v21 = *((_QWORD *)v12 + 11);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    if (v20)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v26 = UTType.genericPartialFilename.getter();
      v31[1] = v21;
      v27 = (void *)MEMORY[0x18D75CC88](v26);
      swift_bridgeObjectRelease();
      isa = UTType._bridgeToObjectiveC()().super.isa;
      v29 = objc_msgSend(v27, sel_stringByAppendingPathExtensionForType_, isa);

      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    outlined consume of FileExportOperation.Storage(v33, v15, v16, v32, v17);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for FileExportOperation.Mode);
    v22 = UTType.genericPartialFilename.getter();
    v23 = (void *)MEMORY[0x18D75CC88](v22);
    swift_bridgeObjectRelease();
    v24 = UTType._bridgeToObjectiveC()().super.isa;
    v25 = objc_msgSend(v23, sel_stringByAppendingPathExtensionForType_, v24);

    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v19;
}

uint64_t FileExportOperation.File.preferredFilename.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Class isa;
  id v19;
  uint64_t v21;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FileExportOperation.File.Storage(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (id *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (uint64_t *)(v0 + *(int *)(type metadata accessor for FileExportOperation.File(0) + 20));
  if (v10[1])
  {
    v11 = *v10;
  }
  else
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)v9, type metadata accessor for FileExportOperation.File.Storage);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = *v9;
      v13 = objc_msgSend(*v9, sel_filename);
      if (v13 || (v13 = objc_msgSend(v12, sel_preferredFilename)) != 0)
      {
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v16 = v15;

        v17 = (void *)MEMORY[0x18D75CC88](v14, v16);
        swift_bridgeObjectRelease();
        isa = UTType._bridgeToObjectiveC()().super.isa;
        v19 = objc_msgSend(v17, sel_stringByAppendingPathExtensionForType_, isa);

        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {

        v11 = 0;
      }
    }
    else
    {
      (*(void (**)(char *, id *, uint64_t))(v2 + 32))(v5, v9, v1);
      v11 = URL.lastPathComponent.getter();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    }
  }
  swift_bridgeObjectRetain();
  return v11;
}

void FileExportOperation.didFinish(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD);
  char *v17;
  _QWORD v18[8];

  v18[7] = a1;
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  MEMORY[0x1E0C80A78](v5, v6);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Result<URL, Error>?, (uint64_t (*)(uint64_t))type metadata accessor for Result<URL, Error>, v2);
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  v11 = type metadata accessor for FileExportOperation.Move(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v13 = type metadata accessor for FileExportOperation.Mode(0);
  MEMORY[0x1E0C80A78](v13, v14);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  v17 = (char *)&loc_1876B940C + dword_1876B9814[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1876B941C()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;

  outlined init with take of TableCellFormula(v5, v1, type metadata accessor for FileExportOperation.Move);
  v7 = *(void (**)(_QWORD *))(v1 + *(int *)(v4 + 20));
  if (v2 != -1)
  {
    if ((v2 & 1) == 0)
    {
      v8 = *(_QWORD *)(v6 - 88);
      v9 = *(_QWORD *)(v8 + 16);
      v10 = type metadata accessor for URL();
      v11 = *(_QWORD *)(v10 - 8);
      if (v9)
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(v3, v8 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v10);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v3, 0, 1, v10);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v3, 1, v10) != 1)
        {
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 32))(v0, v3, v10);
          type metadata accessor for Result<URL, Error>();
          v13 = v12;
          swift_storeEnumTagMultiPayload();
LABEL_8:
          type metadata accessor for Result<URL, Error>();
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v0, 0, 1, v13);
          goto LABEL_9;
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v3, 1, 1, v10);
      }
      __break(1u);
      JUMPOUT(0x1876B97F8);
    }
    v15 = *(void **)(v6 - 88);
    *v0 = v15;
    type metadata accessor for Result<URL, Error>();
    v13 = v16;
    swift_storeEnumTagMultiPayload();
    v17 = v15;
    goto LABEL_8;
  }
  type metadata accessor for Result<URL, Error>();
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v0, 1, 1, v14);
LABEL_9:
  v7(v0);
  outlined destroy of TaskPriority?((uint64_t)v0, &lazy cache variable for type metadata for Result<URL, Error>?, (uint64_t (*)(uint64_t))type metadata accessor for Result<URL, Error>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v1, type metadata accessor for FileExportOperation.Move);
}

Swift::Void __swiftcall FileExportOperation.didCancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for FileExportOperation.Move(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = type metadata accessor for FileExportOperation.Mode(0);
  MEMORY[0x1E0C80A78](v3, v4);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v7 = (char *)sub_1876B98F0 + 4 * byte_187C50154[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1876B98F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = outlined init with take of TableCellFormula(v1, v2, type metadata accessor for FileExportOperation.Move);
  (*(void (**)(uint64_t))(v2 + *(int *)(v0 + 24)))(v3);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v2, type metadata accessor for FileExportOperation.Move);
}

uint64_t FileExportOperation.writeTemporaryFilesIfNecessary()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  v1[5] = v0;
  v2 = type metadata accessor for UTType();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340];
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = type metadata accessor for FileExportOperation.File(0);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for FileDocumentWriteConfiguration(0);
  v1[13] = swift_task_alloc();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, v3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  type metadata accessor for FileExportOperation.Move(0);
  v1[18] = swift_task_alloc();
  v1[19] = type metadata accessor for FileExportOperation.Mode(0);
  v1[20] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v1[21] = v4;
  v1[22] = *(_QWORD *)(v4 - 8);
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  outlined destroy of TaskPriority?(*(_QWORD *)(v0 + 120), (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
  outlined consume of FileExportOperation.Storage(v4, v3, v2, v1, 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FileExportOperation.Storage(v4, v3, v2, v1, 1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v6);
  v8 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, 1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Class isa;
  id v15;
  void *v16;
  NSURL *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(void **)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD **)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  outlined destroy of TaskPriority?(*(_QWORD *)(v0 + 120), (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v34 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_187BF9830;
  v8 = (uint64_t)v3 + *(int *)(v4 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v5, v7);
  v9 = (_QWORD *)((char *)v3 + *(int *)(v4 + 20));
  *v9 = 0;
  v9[1] = 0;
  *v3 = v1;
  type metadata accessor for FileExportOperation.File.Storage(0);
  swift_storeEnumTagMultiPayload();
  v10 = v1;
  FileExportOperation.File.preferredFilename.getter();
  if (!v11)
  {
    v12 = FileExportOperation.defaultFilename(contentType:)(v8);
    v13 = (void *)MEMORY[0x18D75CC88](v12);
    swift_bridgeObjectRelease();
    isa = UTType._bridgeToObjectiveC()().super.isa;
    v15 = objc_msgSend(v13, sel_stringByAppendingPathExtensionForType_, isa);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  v16 = *(void **)(v0 + 280);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(*(_QWORD *)(v0 + 80), type metadata accessor for FileExportOperation.File);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v17);
  v19 = v18;
  *(_QWORD *)(v0 + 24) = 0;
  v20 = objc_msgSend(v16, sel_writeToURL_options_originalContentsURL_error_, v18, 0, 0, v0 + 24);

  v21 = *(void **)(v0 + 24);
  v22 = *(void **)(v0 + 280);
  v23 = *(_QWORD *)(v0 + 232);
  v24 = *(_QWORD *)(v0 + 216);
  v25 = *(_QWORD *)(v0 + 224);
  v36 = *(_QWORD *)(v0 + 208);
  v27 = *(_QWORD *)(v0 + 176);
  v26 = *(_QWORD *)(v0 + 184);
  v28 = *(_QWORD *)(v0 + 168);
  v39 = *(_QWORD *)(v0 + 64);
  v40 = *(_QWORD *)(v0 + 200);
  v37 = *(_QWORD *)(v0 + 56);
  v38 = *(_QWORD *)(v0 + 48);
  v35 = v20;
  if (v20)
  {
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 32))(v41 + v34, v26, v28);
    v29 = v21;

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of FileExportOperation.Storage(v36, v24, v25, v23, 1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of FileExportOperation.Storage(v36, v24, v25, v23, 1);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v40, v28);
  }
  else
  {
    v30 = v21;
    v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    v32 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v32(v26, v28);
    *(_QWORD *)(v41 + 16) = 0;
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of FileExportOperation.Storage(v36, v24, v25, v23, 1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of FileExportOperation.Storage(v36, v24, v25, v23, 1);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
    v41 = v31;
    v32(v40, v28);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v41, v35 ^ 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = (_QWORD *)swift_task_alloc();
  v5[2] = v3;
  v5[3] = v4;
  v5[4] = v0 + 16;
  specialized Sequence.forEach(_:)(v1, (void (*)(uint64_t, char *))partial apply for closure #1 in FileExportOperation.writeTemporaryFilesIfNecessary());
  v6 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    v10 = v2;
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 16);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, BOOL))(v0 + 8))(v10, v2 != 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v5 = *(_QWORD *)(v0 + 344);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, 1);
}

void FileExportOperation.writeTemporaryFilesIfNecessary()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  char *v5;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v4 = objc_msgSend(v3, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, v1, type metadata accessor for FileExportOperation.Mode);
  v5 = (char *)&loc_1876B9C90 + dword_1876BA64C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_1876B9CA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;

  v61 = v60[25];
  v62 = v60[21];
  v63 = v60[22];
  v64 = v60[18];
  outlined init with take of TableCellFormula(v60[20], v64, type metadata accessor for FileExportOperation.Move);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v65 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_187BF9830;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v63 + 16))(v66 + v65, v64, v62);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v64, type metadata accessor for FileExportOperation.Move);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  __asm { BR              X2 }
}

uint64_t FileExportOperation.writeTemporaryFilesIfNecessary()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 280) = a1;
  *(_QWORD *)(v3 + 288) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 336) = a1;
  *(_QWORD *)(v3 + 344) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t FileExportOperation.makeFileWrappers(from:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 + 208) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = type metadata accessor for FileDocumentWriteConfiguration(0);
  *(_QWORD *)(v3 + 48) = swift_task_alloc();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  *(_QWORD *)(v3 + 56) = swift_task_alloc();
  *(_QWORD *)(v3 + 64) = swift_task_alloc();
  *(_QWORD *)(v3 + 72) = swift_task_alloc();
  v4 = type metadata accessor for UTType();
  *(_QWORD *)(v3 + 80) = v4;
  *(_QWORD *)(v3 + 88) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 96) = swift_task_alloc();
  *(_QWORD *)(v3 + 104) = swift_task_alloc();
  *(_QWORD *)(v3 + 112) = swift_task_alloc();
  *(_QWORD *)(v3 + 120) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t FileExportOperation.makeFileWrappers(from:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  int isUniquelyReferenced_nonNull_native;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  _QWORD *v53;
  uint64_t (*v54)(unint64_t, uint64_t, uint64_t);
  void (*v55)(_QWORD, _QWORD, _QWORD);
  uint64_t v56;
  uint64_t v57;
  int *v58;

  v1 = *(_BYTE *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v4 = (_QWORD *)v3;
  if ((v1 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    FileExportOperation.allowedContentTypes.getter();
    if (*(_QWORD *)(v5 + 16))
    {
      (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 16))(*(_QWORD *)(v0 + 72), v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 88) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 88) + 80)), *(_QWORD *)(v0 + 80));
      v6 = 0;
    }
    else
    {
      v6 = 1;
    }
    v15 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 88);
    v17 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v17, v6, 1, v15);
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15);
    if ((_DWORD)result == 1)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v54 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 88) + 32);
    v54(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    v19 = *(_QWORD *)(v2 + 16);
    if (v19)
    {
      v56 = *(_QWORD *)(v0 + 88);
      v57 = *(_QWORD *)(v0 + 40);
      v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v56 + 16);
      v21 = v2 + 48;
      v55 = v20;
      while (1)
      {
        v22 = *(_QWORD *)(v0 + 48);
        v23 = *(uint64_t (**)(uint64_t))(v21 - 16);
        v20(v22, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 80));
        *(_QWORD *)(v22 + *(int *)(v57 + 20)) = 0;
        swift_retain();
        swift_bridgeObjectRetain();
        v24 = (void *)v23(v22);
        v25 = *(_QWORD *)(v0 + 120);
        v26 = *(_QWORD *)(v0 + 80);
        v27 = *(_QWORD *)(v0 + 112);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(*(_QWORD *)(v0 + 48), type metadata accessor for FileDocumentWriteConfiguration);
        v20(v27, v25, v26);
        v28 = v24;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v28);
        v32 = v4[2];
        v33 = (v30 & 1) == 0;
        result = v32 + v33;
        if (__OFADD__(v32, v33))
          break;
        v34 = v30;
        if (v4[3] >= result)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
          v35 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v28);
          if ((v34 & 1) != (v36 & 1))
          {
            type metadata accessor for NSFileWrapper();
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          }
          v31 = v35;
        }
        v37 = *(_QWORD *)(v0 + 112);
        v38 = *(_QWORD *)(v0 + 80);
        if ((v34 & 1) != 0)
        {
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v56 + 40))(v4[7] + *(_QWORD *)(v56 + 72) * v31, v37, v38);
        }
        else
        {
          v4[(v31 >> 6) + 8] |= 1 << v31;
          *(_QWORD *)(v4[6] + 8 * v31) = v28;
          result = v54(v4[7] + *(_QWORD *)(v56 + 72) * v31, v37, v38);
          v39 = v4[2];
          v40 = __OFADD__(v39, 1);
          v41 = v39 + 1;
          if (v40)
            goto LABEL_29;
          v4[2] = v41;
          v42 = v28;
        }
        swift_bridgeObjectRelease();

        swift_release();
        swift_bridgeObjectRelease();
        v21 += 24;
        --v19;
        v20 = v55;
        if (!v19)
          goto LABEL_22;
      }
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_22:
    v43 = *(_QWORD *)(v0 + 120);
    v44 = *(_QWORD *)(v0 + 80);
    v45 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
LABEL_23:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v4);
  }
  v7 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v0 + 128) = v7;
  if (!v7)
    goto LABEL_23;
  *(_QWORD *)(v0 + 136) = v3;
  *(_QWORD *)(v0 + 144) = 0;
  v8 = *(_QWORD **)(v0 + 24);
  v9 = (int *)v8[4];
  *(_QWORD *)(v0 + 152) = v8[5];
  *(_QWORD *)(v0 + 160) = v8[6];
  *(_QWORD *)(v0 + 168) = v8[7];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  FileExportOperation.allowedContentTypes.getter();
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v10 + 16))
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v12 + 16))(*(_QWORD *)(v0 + 56), v10 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), *(_QWORD *)(v0 + 80));
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v14(v13, 0, 1, v11);
  }
  else
  {
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v14(*(_QWORD *)(v0 + 56), 1, 1, v11);
  }
  v46 = *(_QWORD *)(v0 + 80);
  v47 = *(_QWORD *)(v0 + 88);
  v48 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v48, 1, v46);
  if ((_DWORD)result != 1)
  {
    v49 = *(_QWORD *)(v0 + 80);
    v50 = *(_QWORD *)(v0 + 56);
    v51 = *(_QWORD *)(v0 + 64);
    v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 88) + 32);
    *(_QWORD *)(v0 + 176) = v52;
    v52(v51, v50, v49);
    v14(v51, 0, 1, v49);
    v58 = (int *)((char *)v9 + *v9);
    v53 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v53;
    *v53 = v0;
    v53[1] = FileExportOperation.makeFileWrappers(from:);
    return ((uint64_t (*)(_QWORD, _QWORD))v58)(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 64));
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v0;

  outlined destroy of TaskPriority?(*(_QWORD *)(v0 + 64), (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t (*v21)(unint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  _QWORD *v51;
  _QWORD *v52;
  int *v53;

  v1 = *(void **)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  outlined destroy of TaskPriority?(*(_QWORD *)(v0 + 64), (unint64_t *)&lazy cache variable for type metadata for UTType?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v3, v5);
  v7 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 16) = v2;
  v9 = (_QWORD *)(v0 + 16);
  v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
  v12 = *(_QWORD *)(v2 + 16);
  v13 = (v10 & 1) == 0;
  result = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_20;
  }
  v15 = v10;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 136) + 24) >= result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 192);
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
    if ((v15 & 1) != (v18 & 1))
    {
      type metadata accessor for NSFileWrapper();
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
    v11 = v17;
  }
  v19 = (_QWORD *)*v9;
  v52 = (_QWORD *)*v9;
  if ((v15 & 1) != 0)
  {
    (*(void (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 40))(v19[7] + *(_QWORD *)(*(_QWORD *)(v0 + 88) + 72) * v11, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    goto LABEL_12;
  }
  v20 = *(_QWORD *)(v0 + 192);
  v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v0 + 176);
  v23 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 80);
  v19[(v11 >> 6) + 8] |= 1 << v11;
  *(_QWORD *)(v19[6] + 8 * v11) = v20;
  result = v21(v19[7] + *(_QWORD *)(v23 + 72) * v11, v22, v24);
  v25 = v19[2];
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v28 = *(void **)(v0 + 192);
  v19[2] = v27;
  v29 = v28;
LABEL_12:
  v30 = *(void **)(v0 + 192);
  v31 = *(_QWORD *)(v0 + 144);
  v32 = *(_QWORD *)(v0 + 128);
  v33 = *(_QWORD *)(v0 + 104);
  v35 = *(_QWORD *)(v0 + 80);
  v34 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
  if (v31 + 1 == v32)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v52);
  }
  v36 = *(_QWORD *)(v0 + 144) + 1;
  *(_QWORD *)(v0 + 136) = v52;
  *(_QWORD *)(v0 + 144) = v36;
  v37 = (_QWORD *)(*(_QWORD *)(v0 + 24) + 32 * v36);
  v38 = (int *)v37[4];
  *(_QWORD *)(v0 + 152) = v37[5];
  *(_QWORD *)(v0 + 160) = v37[6];
  *(_QWORD *)(v0 + 168) = v37[7];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  FileExportOperation.allowedContentTypes.getter();
  v40 = *(_QWORD *)(v0 + 80);
  v41 = *(_QWORD *)(v0 + 88);
  v42 = *(_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v39 + 16))
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v41 + 16))(*(_QWORD *)(v0 + 56), v39 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80)), *(_QWORD *)(v0 + 80));
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56);
    v43(v42, 0, 1, v40);
  }
  else
  {
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56);
    v43(*(_QWORD *)(v0 + 56), 1, 1, v40);
  }
  v44 = *(_QWORD *)(v0 + 80);
  v45 = *(_QWORD *)(v0 + 88);
  v46 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v46, 1, v44);
  if ((_DWORD)result != 1)
  {
    v47 = *(_QWORD *)(v0 + 80);
    v48 = *(_QWORD *)(v0 + 56);
    v49 = *(_QWORD *)(v0 + 64);
    v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 88) + 32);
    *(_QWORD *)(v0 + 176) = v50;
    v50(v49, v48, v47);
    v43(v49, 0, 1, v47);
    v53 = (int *)((char *)v38 + *v38);
    v51 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v51;
    *v51 = v0;
    v51[1] = FileExportOperation.makeFileWrappers(from:);
    return ((uint64_t (*)(_QWORD, _QWORD))v53)(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 64));
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t FileExportOperation.makeFileWrappers(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 192) = a1;
  *(_QWORD *)(v3 + 200) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in FileExportOperation.writeTemporaryFilesIfNecessary()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  Class isa;
  id v30;
  NSURL *v31;
  void *v32;
  void *v33;
  unsigned int v34;
  id v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  char **v39;
  char *v40;
  id v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  id v46;
  uint64_t v47;
  char *v48;
  char **v49;
  uint64_t v50;
  char *v51;
  id v52[2];

  v49 = a5;
  v50 = a3;
  v52[1] = *(id *)MEMORY[0x1E0C80C00];
  v7 = type metadata accessor for FileExportOperation.File(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (uint64_t *)((char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v48 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v47 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v51 = (char *)&v47 - v21;
  v22 = (uint64_t)v10 + *(int *)(v7 + 24);
  v23 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v22, a2, v23);
  v24 = (_QWORD *)((char *)v10 + *(int *)(v7 + 20));
  *v24 = 0;
  v24[1] = 0;
  *v10 = a1;
  type metadata accessor for FileExportOperation.File.Storage(0);
  swift_storeEnumTagMultiPayload();
  v25 = a1;
  FileExportOperation.File.preferredFilename.getter();
  if (!v26)
  {
    v27 = FileExportOperation.defaultFilename(contentType:)(v22);
    v28 = (void *)MEMORY[0x18D75CC88](v27);
    swift_bridgeObjectRelease();
    isa = UTType._bridgeToObjectiveC()().super.isa;
    v30 = objc_msgSend(v28, sel_stringByAppendingPathExtensionForType_, isa);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for FileExportOperation.File);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v31);
  v33 = v32;
  v52[0] = 0;
  v34 = objc_msgSend(v25, sel_writeToURL_options_originalContentsURL_error_, v32, 0, 0, v52);

  v35 = v52[0];
  if (v34)
  {
    v36 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v37 = v51;
    v36(v51, v18, v11);
    v38 = v48;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v48, v37, v11);
    v39 = v49;
    v40 = *v49;
    v41 = v35;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v39 = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v40 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v40 + 2) + 1, 1, v40);
      *v39 = v40;
    }
    v44 = *((_QWORD *)v40 + 2);
    v43 = *((_QWORD *)v40 + 3);
    if (v44 >= v43 >> 1)
    {
      v40 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v40);
      *v39 = v40;
    }
    *((_QWORD *)v40 + 2) = v44 + 1;
    v36(&v40[((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v44], v38, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v51, v11);
  }
  else
  {
    v46 = v52[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v18, v11);
  }
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FileExportOperation.Key(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for FileExportOperation?, type metadata accessor for FileExportOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v15 - v10;
  outlined init with take of FileExportOperation?(a1, (uint64_t)v7);
  v12 = type metadata accessor for FileExportOperation(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) == 1)
  {
    a2();
    outlined destroy of TaskPriority?((uint64_t)v7, &lazy cache variable for type metadata for FileExportOperation?, type metadata accessor for FileExportOperation);
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v11, type metadata accessor for FileExportOperation);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  }
  return outlined init with take of FileExportOperation?((uint64_t)v11, a1);
}

uint64_t UTType.genericPartialFilename.getter()
{
  uint64_t ObjCClassFromMetadata;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  void *v8;
  void *object;
  id v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v17;
  Swift::String v18;

  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = (void *)objc_opt_self();
  v2 = objc_msgSend(v1, sel_bundleForClass_, ObjCClassFromMetadata);
  v17._countAndFlagsBits = 0xD000000000000028;
  v17._object = (void *)0x8000000187BE69E0;
  v3._countAndFlagsBits = 0x646574726F707845;
  v3._object = (void *)0xEB00000000402520;
  v4.value._countAndFlagsBits = 0xD000000000000010;
  v4.value._object = (void *)0x8000000187BE69C0;
  v5._countAndFlagsBits = 0x646574726F707845;
  v5._object = (void *)0xEB00000000402520;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v17);

  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
  countAndFlagsBits = UTType.localizedDescription.getter();
  object = v8;
  *(_QWORD *)(v6 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
  if (!object)
  {
    v10 = objc_msgSend(v1, sel_bundleForClass_, ObjCClassFromMetadata);
    v18._countAndFlagsBits = 0xD000000000000026;
    v18._object = (void *)0x8000000187BE6A10;
    v11._countAndFlagsBits = 1701603686;
    v11._object = (void *)0xE400000000000000;
    v12.value._countAndFlagsBits = 0xD000000000000010;
    v12.value._object = (void *)0x8000000187BE69C0;
    v13._countAndFlagsBits = 1701603686;
    v13._object = (void *)0xE400000000000000;
    v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v18);
    countAndFlagsBits = v14._countAndFlagsBits;
    object = v14._object;

  }
  *(_QWORD *)(v6 + 32) = countAndFlagsBits;
  *(_QWORD *)(v6 + 40) = object;
  v15 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t protocol witness for ConfigurableFileOperation.customizationID.setter in conformance FileExportOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 20));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.defaultDirectory.setter in conformance FileExportOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return outlined assign with take of Predicate<Pack{URL}>?(a1, v2 + *(int *)(a2 + 24), (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
}

uint64_t protocol witness for ConfigurableFileOperation.message.setter in conformance FileExportOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v10;
  uint64_t result;

  v10 = (uint64_t *)(v5 + *(int *)(a5 + 28));
  result = outlined consume of Text?(*v10, v10[1], v10[2], v10[3]);
  *v10 = a1;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = a4;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.confirmationLabel.setter in conformance FileExportOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v10;
  uint64_t result;

  v10 = (uint64_t *)(v5 + *(int *)(a5 + 32));
  result = outlined consume of Text?(*v10, v10[1], v10[2], v10[3]);
  *v10 = a1;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = a4;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.filenameLabel.setter in conformance FileExportOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v10;
  uint64_t result;

  v10 = (uint64_t *)(v5 + *(int *)(a5 + 36));
  result = outlined consume of Text?(*v10, v10[1], v10[2], v10[3]);
  *v10 = a1;
  v10[1] = a2;
  v10[2] = a3;
  v10[3] = a4;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.urlEnabled.setter in conformance FileExportOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return outlined assign with take of Predicate<Pack{URL}>?(a1, v2 + *(int *)(a2 + 40), &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
}

uint64_t protocol witness for ConfigurableFileOperation.importsUnresolvedAliases.setter in conformance FileExportOperation(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.browserOptions.setter in conformance FileExportOperation(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;

  v3 = *(_BYTE *)(result + 8);
  v4 = v2 + *(int *)(a2 + 48);
  *(_QWORD *)v4 = *(_QWORD *)result;
  *(_BYTE *)(v4 + 8) = v3;
  return result;
}

uint64_t outlined assign with take of Predicate<Pack{URL}>?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with take of FileExportOperation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for FileExportOperation?, type metadata accessor for FileExportOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for FileExportOperation.File(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileExportOperation.File);
}

uint64_t partial apply for closure #1 in FileExportOperation.writeTemporaryFilesIfNecessary()(void *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in FileExportOperation.writeTemporaryFilesIfNecessary()(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(char ***)(v2 + 32));
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, char *))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  id v28;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(uint64_t, char *);
  uint64_t v38;

  v37 = a2;
  type metadata accessor for (key: NSFileWrapper, value: UTType)();
  v36 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8, v9);
  v35 = (char *)&v32 - v10;
  v11 = *(_QWORD *)(a1 + 64);
  v33 = a1 + 64;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v34 = (unint64_t)(v12 + 63) >> 6;
  v38 = a1;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  while (v14)
  {
    v17 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v18 = v17 | (v16 << 6);
LABEL_5:
    v19 = *(_QWORD *)(v38 + 56);
    v20 = *(void **)(*(_QWORD *)(v38 + 48) + 8 * v18);
    v21 = type metadata accessor for UTType();
    v22 = *(_QWORD *)(v21 - 8);
    v23 = v19 + *(_QWORD *)(v22 + 72) * v18;
    v25 = v35;
    v24 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(&v35[*(int *)(v36 + 48)], v23, v21);
    *v25 = v20;
    outlined init with take of TableCellFormula((uint64_t)v25, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (key: NSFileWrapper, value: UTType));
    v26 = *v7;
    v27 = (char *)v7 + *(int *)(v24 + 48);
    v28 = v20;
    v37(v26, v27);
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (key: NSFileWrapper, value: UTType));
    if (v2)
      return swift_release();
  }
  if (__OFADD__(v16++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v16 >= v34)
    return swift_release();
  v30 = *(_QWORD *)(v33 + 8 * v16);
  if (v30)
  {
LABEL_19:
    v14 = (v30 - 1) & v30;
    v18 = __clz(__rbit64(v30)) + (v16 << 6);
    goto LABEL_5;
  }
  v31 = v16 + 1;
  if (v16 + 1 >= v34)
    return swift_release();
  v30 = *(_QWORD *)(v33 + 8 * v31);
  if (v30)
    goto LABEL_18;
  v31 = v16 + 2;
  if (v16 + 2 >= v34)
    return swift_release();
  v30 = *(_QWORD *)(v33 + 8 * v31);
  if (v30)
    goto LABEL_18;
  v31 = v16 + 3;
  if (v16 + 3 >= v34)
    return swift_release();
  v30 = *(_QWORD *)(v33 + 8 * v31);
  if (v30)
    goto LABEL_18;
  v31 = v16 + 4;
  if (v16 + 4 >= v34)
    return swift_release();
  v30 = *(_QWORD *)(v33 + 8 * v31);
  if (v30)
  {
LABEL_18:
    v16 = v31;
    goto LABEL_19;
  }
  while (1)
  {
    v16 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v16 >= v34)
      return swift_release();
    v30 = *(_QWORD *)(v33 + 8 * v16);
    ++v31;
    if (v30)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type FileExportOperation.Error and conformance FileExportOperation.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FileExportOperation.Error and conformance FileExportOperation.Error;
  if (!lazy protocol witness table cache variable for type FileExportOperation.Error and conformance FileExportOperation.Error)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileExportOperation.Error, &type metadata for FileExportOperation.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileExportOperation.Error and conformance FileExportOperation.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FileExportOperation.Error and conformance FileExportOperation.Error;
  if (!lazy protocol witness table cache variable for type FileExportOperation.Error and conformance FileExportOperation.Error)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FileExportOperation.Error, &type metadata for FileExportOperation.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileExportOperation.Error and conformance FileExportOperation.Error);
  }
  return result;
}

uint64_t type metadata accessor for FileExportOperation.File.Storage(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileExportOperation.File.Storage);
}

uint64_t specialized FileExportOperation.BatchExport.allowedContentTypes.getter(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a3;
  v4 = *(_QWORD *)(a3 + 16);
  if ((a2 & 1) != 0)
  {
    if (v4)
      goto LABEL_8;
    if (a1[2])
    {
      v3 = a1[7];
      goto LABEL_8;
    }
    return MEMORY[0x1E0DEE9D8];
  }
  if (!v4)
  {
    if (a1[2])
    {
      v3 = a1[6];
      goto LABEL_8;
    }
    return MEMORY[0x1E0DEE9D8];
  }
LABEL_8:
  swift_bridgeObjectRetain();
  return v3;
}

void type metadata accessor for (key: NSFileWrapper, value: UTType)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: NSFileWrapper, value: UTType))
  {
    type metadata accessor for NSFileWrapper();
    type metadata accessor for UTType();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: NSFileWrapper, value: UTType));
  }
}

unint64_t type metadata accessor for NSFileWrapper()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSFileWrapper;
  if (!lazy cache variable for type metadata for NSFileWrapper)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSFileWrapper);
  }
  return result;
}

uint64_t type metadata accessor for FileExportOperation.Resolved(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileExportOperation.Resolved);
}

char *initializeBufferWithCopyOfBuffer for FileExportOperation.File.Storage(char *a1, char **a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = *a2;
      *(_QWORD *)a1 = *a2;
      v7 = v6;
    }
    else
    {
      v9 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for FileExportOperation.File.Storage(id *a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() == 1)
  {

  }
  else
  {
    v2 = type metadata accessor for URL();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  }
}

void **initializeWithCopy for FileExportOperation.File.Storage(void **a1, void **a2)
{
  void *v4;
  id v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = *a2;
    *a1 = *a2;
    v5 = v4;
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for FileExportOperation.File.Storage(void **a1, void **a2)
{
  void *v4;
  id v5;
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileExportOperation.File.Storage);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = *a2;
      *a1 = *a2;
      v5 = v4;
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for FileExportOperation.File.Storage(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for FileExportOperation.File.Storage(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileExportOperation.File.Storage);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for FileExportOperation.File.Storage()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for FileExportOperation.File(char *a1, char **a2, uint64_t a3)
{
  int v5;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    type metadata accessor for FileExportOperation.File.Storage(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = *a2;
      *(_QWORD *)a1 = *a2;
      v8 = v7;
    }
    else
    {
      v10 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
    v11 = *(int *)(a3 + 20);
    v12 = *(int *)(a3 + 24);
    v13 = &a1[v11];
    v14 = (char **)((char *)a2 + v11);
    v15 = v14[1];
    *(_QWORD *)v13 = *v14;
    *((_QWORD *)v13 + 1) = v15;
    v16 = &a1[v12];
    v17 = (char *)a2 + v12;
    v18 = type metadata accessor for UTType();
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    v19(v16, v17, v18);
  }
  return a1;
}

uint64_t destroy for FileExportOperation.File(id *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  type metadata accessor for FileExportOperation.File.Storage(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {

  }
  else
  {
    v4 = type metadata accessor for URL();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  swift_bridgeObjectRelease();
  v5 = (char *)a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for UTType();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

void **initializeWithCopy for FileExportOperation.File(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);

  type metadata accessor for FileExportOperation.File.Storage(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = *a2;
    *a1 = *a2;
    v7 = v6;
  }
  else
  {
    v8 = type metadata accessor for URL();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = (void **)((char *)a1 + v9);
  v12 = (void **)((char *)a2 + v9);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = (char *)a1 + v10;
  v15 = (char *)a2 + v10;
  v16 = type metadata accessor for UTType();
  v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  v17(v14, v15, v16);
  return a1;
}

void **assignWithCopy for FileExportOperation.File(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileExportOperation.File.Storage);
    type metadata accessor for FileExportOperation.File.Storage(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = *a2;
      *a1 = *a2;
      v7 = v6;
    }
    else
    {
      v8 = type metadata accessor for URL();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  v9 = *(int *)(a3 + 20);
  v10 = (void **)((char *)a1 + v9);
  v11 = (void **)((char *)a2 + v9);
  *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UTType();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

char *initializeWithTake for FileExportOperation.File(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = type metadata accessor for FileExportOperation.File.Storage(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  v8 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for UTType();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

char *assignWithTake for FileExportOperation.File(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileExportOperation.File.Storage);
    v6 = type metadata accessor for FileExportOperation.File.Storage(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v13 = *(int *)(a3 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for UTType();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileExportOperation.File()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876BD37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for FileExportOperation.File.Storage(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = type metadata accessor for UTType();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for FileExportOperation.File()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876BD440(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for FileExportOperation.File.Storage(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
      return result;
    }
    v10 = type metadata accessor for UTType();
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for FileExportOperation.File()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for FileExportOperation.File.Storage(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for UTType();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FileExportOperation.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1876BD5C0 + 4 * byte_187C5015D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1876BD5F4 + 4 * byte_187C50158[v4]))();
}

uint64_t sub_1876BD5F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876BD5FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1876BD604);
  return result;
}

uint64_t sub_1876BD610(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1876BD618);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1876BD61C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1876BD624(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FileExportOperation.Error()
{
  return &type metadata for FileExportOperation.Error;
}

uint64_t initializeBufferWithCopyOfBuffer for FileExportOperation.Resolved(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    type metadata accessor for FileExportOperation.Mode(0);
    v5 = (char *)&loc_1876BD6AC + 4 * byte_187C50162[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for FileExportOperation.Resolved(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for FileExportOperation.Mode(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v2 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      type metadata accessor for FileExportOperation.Move(0);
      swift_release();
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 2u:
      outlined consume of FileExportOperation.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_6:
      swift_release();
      break;
    default:
      break;
  }
  v3 = (int *)type metadata accessor for FileExportOperation(0);
  swift_bridgeObjectRelease();
  v4 = a1 + v3[6];
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + v3[7];
  if (*(_QWORD *)(v7 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  v8 = a1 + v3[8];
  if (*(_QWORD *)(v8 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  v9 = a1 + v3[9];
  if (*(_QWORD *)(v9 + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v10 = a1 + v3[10];
  type metadata accessor for Predicate<Pack{URL}>();
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void initializeWithCopy for FileExportOperation.Resolved()
{
  char *v0;

  type metadata accessor for FileExportOperation.Mode(0);
  v0 = (char *)sub_1876BDDE4 + 4 * byte_187C5016A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1876BDDE4()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(const void *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;

  v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v0, v1, v3);
  v4 = type metadata accessor for FileExportOperation.Move(0);
  v5 = *(int *)(v4 + 20);
  v6 = (_QWORD *)(v0 + v5);
  v7 = (uint64_t *)(v1 + v5);
  v9 = *v7;
  v8 = v7[1];
  *v6 = v9;
  v6[1] = v8;
  v10 = *(int *)(v4 + 24);
  v11 = (_QWORD *)(v0 + v10);
  v12 = (_QWORD *)(v1 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_retain();
  swift_storeEnumTagMultiPayload();
  v14 = (int *)type metadata accessor for FileExportOperation(0);
  v15 = v14[5];
  v16 = (_QWORD *)(v0 + v15);
  v17 = (_QWORD *)(v1 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = v14[6];
  v20 = (void *)(v0 + v19);
  v21 = (const void *)(v1 + v19);
  v22 = type metadata accessor for URL();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  swift_bridgeObjectRetain();
  if (v24(v21, 1, v22))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v26 = v14[7];
  v27 = v0 + v26;
  v28 = v1 + v26;
  if (*(_QWORD *)(v1 + v26 + 24))
  {
    v29 = *(_QWORD *)v28;
    v30 = *(_QWORD *)(v28 + 8);
    v31 = *(_BYTE *)(v28 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v28, v30, v31);
    *(_QWORD *)v27 = v29;
    *(_QWORD *)(v27 + 8) = v30;
    *(_BYTE *)(v27 + 16) = v31;
    *(_QWORD *)(v27 + 24) = *(_QWORD *)(v28 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v32 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *(_OWORD *)(v27 + 16) = v32;
  }
  v33 = v14[8];
  v34 = v0 + v33;
  v35 = v1 + v33;
  if (*(_QWORD *)(v1 + v33 + 24))
  {
    v36 = *(_QWORD *)v35;
    v37 = *(_QWORD *)(v35 + 8);
    v38 = *(_BYTE *)(v35 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v35, v37, v38);
    *(_QWORD *)v34 = v36;
    *(_QWORD *)(v34 + 8) = v37;
    *(_BYTE *)(v34 + 16) = v38;
    *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v39 = *(_OWORD *)(v35 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v35;
    *(_OWORD *)(v34 + 16) = v39;
  }
  v40 = v14[9];
  v41 = v0 + v40;
  v42 = v1 + v40;
  if (*(_QWORD *)(v1 + v40 + 24))
  {
    v43 = *(_QWORD *)v42;
    v44 = *(_QWORD *)(v42 + 8);
    v45 = *(_BYTE *)(v42 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v42, v44, v45);
    *(_QWORD *)v41 = v43;
    *(_QWORD *)(v41 + 8) = v44;
    *(_BYTE *)(v41 + 16) = v45;
    *(_QWORD *)(v41 + 24) = *(_QWORD *)(v42 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v46 = *(_OWORD *)(v42 + 16);
    *(_OWORD *)v41 = *(_OWORD *)v42;
    *(_OWORD *)(v41 + 16) = v46;
  }
  v47 = v14[10];
  v48 = (void *)(v0 + v47);
  v49 = (const void *)(v1 + v47);
  type metadata accessor for Predicate<Pack{URL}>();
  v51 = v50;
  v52 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v52 + 48))(v49, 1, v50))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v52 + 16))(v48, v49, v51);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v48, 0, 1, v51);
  }
  *(_BYTE *)(v0 + v14[11]) = *(_BYTE *)(v1 + v14[11]);
  v54 = v14[12];
  v55 = v0 + v54;
  v56 = v1 + v54;
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *(_BYTE *)(v55 + 8) = *(_BYTE *)(v56 + 8);
  v57 = v2[5];
  v58 = v2[6];
  v59 = (_QWORD *)(v0 + v57);
  v60 = (_QWORD *)(v1 + v57);
  v61 = v60[1];
  *v59 = *v60;
  v59[1] = v61;
  v62 = (_QWORD *)(v0 + v58);
  v63 = (_QWORD *)(v1 + v58);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  v65 = v2[7];
  v66 = (_QWORD *)(v0 + v65);
  v67 = (_QWORD *)(v1 + v65);
  v68 = v67[1];
  *v66 = *v67;
  v66[1] = v68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t assignWithCopy for FileExportOperation.Resolved(uint64_t a1, uint64_t a2, int *a3)
{
  char *v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(void *, uint64_t, uint64_t);
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for FileExportOperation.Mode);
    type metadata accessor for FileExportOperation.Mode(0);
    v6 = (char *)&loc_1876BE2C0 + 4 * byte_187C5016E[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = (int *)type metadata accessor for FileExportOperation(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = v7[6];
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_8:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
LABEL_9:
  v20 = v7[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a1 + v20 + 24);
  v24 = *(_QWORD *)(a2 + v20 + 24);
  if (v23)
  {
    if (v24)
    {
      v25 = *(_QWORD *)v22;
      v26 = *(_QWORD *)(v22 + 8);
      v27 = *(_BYTE *)(v22 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v22, v26, v27);
      v28 = *(_QWORD *)v21;
      v29 = *(_QWORD *)(v21 + 8);
      v30 = *(_BYTE *)(v21 + 16);
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v26;
      *(_BYTE *)(v21 + 16) = v27;
      outlined consume of Text.Storage(v28, v29, v30);
      *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v21);
      v34 = *(_OWORD *)(v22 + 16);
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *(_OWORD *)(v21 + 16) = v34;
    }
  }
  else if (v24)
  {
    v31 = *(_QWORD *)v22;
    v32 = *(_QWORD *)(v22 + 8);
    v33 = *(_BYTE *)(v22 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v22, v32, v33);
    *(_QWORD *)v21 = v31;
    *(_QWORD *)(v21 + 8) = v32;
    *(_BYTE *)(v21 + 16) = v33;
    *(_QWORD *)(v21 + 24) = *(_QWORD *)(v22 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v35 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *(_OWORD *)(v21 + 16) = v35;
  }
  v36 = v7[8];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = *(_QWORD *)(a1 + v36 + 24);
  v40 = *(_QWORD *)(a2 + v36 + 24);
  if (v39)
  {
    if (v40)
    {
      v41 = *(_QWORD *)v38;
      v42 = *(_QWORD *)(v38 + 8);
      v43 = *(_BYTE *)(v38 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v38, v42, v43);
      v44 = *(_QWORD *)v37;
      v45 = *(_QWORD *)(v37 + 8);
      v46 = *(_BYTE *)(v37 + 16);
      *(_QWORD *)v37 = v41;
      *(_QWORD *)(v37 + 8) = v42;
      *(_BYTE *)(v37 + 16) = v43;
      outlined consume of Text.Storage(v44, v45, v46);
      *(_QWORD *)(v37 + 24) = *(_QWORD *)(v38 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v37);
      v50 = *(_OWORD *)(v38 + 16);
      *(_OWORD *)v37 = *(_OWORD *)v38;
      *(_OWORD *)(v37 + 16) = v50;
    }
  }
  else if (v40)
  {
    v47 = *(_QWORD *)v38;
    v48 = *(_QWORD *)(v38 + 8);
    v49 = *(_BYTE *)(v38 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v38, v48, v49);
    *(_QWORD *)v37 = v47;
    *(_QWORD *)(v37 + 8) = v48;
    *(_BYTE *)(v37 + 16) = v49;
    *(_QWORD *)(v37 + 24) = *(_QWORD *)(v38 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v51 = *(_OWORD *)(v38 + 16);
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *(_OWORD *)(v37 + 16) = v51;
  }
  v52 = v7[9];
  v53 = a1 + v52;
  v54 = a2 + v52;
  v55 = *(_QWORD *)(a1 + v52 + 24);
  v56 = *(_QWORD *)(a2 + v52 + 24);
  if (v55)
  {
    if (v56)
    {
      v57 = *(_QWORD *)v54;
      v58 = *(_QWORD *)(v54 + 8);
      v59 = *(_BYTE *)(v54 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v54, v58, v59);
      v60 = *(_QWORD *)v53;
      v61 = *(_QWORD *)(v53 + 8);
      v62 = *(_BYTE *)(v53 + 16);
      *(_QWORD *)v53 = v57;
      *(_QWORD *)(v53 + 8) = v58;
      *(_BYTE *)(v53 + 16) = v59;
      outlined consume of Text.Storage(v60, v61, v62);
      *(_QWORD *)(v53 + 24) = *(_QWORD *)(v54 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v53);
      v66 = *(_OWORD *)(v54 + 16);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *(_OWORD *)(v53 + 16) = v66;
    }
  }
  else if (v56)
  {
    v63 = *(_QWORD *)v54;
    v64 = *(_QWORD *)(v54 + 8);
    v65 = *(_BYTE *)(v54 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v54, v64, v65);
    *(_QWORD *)v53 = v63;
    *(_QWORD *)(v53 + 8) = v64;
    *(_BYTE *)(v53 + 16) = v65;
    *(_QWORD *)(v53 + 24) = *(_QWORD *)(v54 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v67 = *(_OWORD *)(v54 + 16);
    *(_OWORD *)v53 = *(_OWORD *)v54;
    *(_OWORD *)(v53 + 16) = v67;
  }
  v68 = v7[10];
  v69 = (void *)(a1 + v68);
  v70 = (void *)(a2 + v68);
  type metadata accessor for Predicate<Pack{URL}>();
  v72 = v71;
  v73 = *(_QWORD *)(v71 - 8);
  v74 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v73 + 48);
  v75 = v74(v69, 1, v71);
  v76 = v74(v70, 1, v72);
  if (!v75)
  {
    if (!v76)
    {
      (*(void (**)(void *, void *, uint64_t))(v73 + 24))(v69, v70, v72);
      goto LABEL_37;
    }
    (*(void (**)(void *, uint64_t))(v73 + 8))(v69, v72);
    goto LABEL_36;
  }
  if (v76)
  {
LABEL_36:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v73 + 16))(v69, v70, v72);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v69, 0, 1, v72);
LABEL_37:
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  v78 = v7[12];
  v79 = a1 + v78;
  v80 = (uint64_t *)(a2 + v78);
  v81 = *v80;
  *(_BYTE *)(v79 + 8) = *((_BYTE *)v80 + 8);
  *(_QWORD *)v79 = v81;
  v82 = a3[5];
  v83 = (_QWORD *)(a1 + v82);
  v84 = (_QWORD *)(a2 + v82);
  *v83 = *v84;
  v83[1] = v84[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v85 = a3[6];
  v86 = (_QWORD *)(a1 + v85);
  v87 = (_QWORD *)(a2 + v85);
  *v86 = *v87;
  v86[1] = v87[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v88 = a3[7];
  v89 = (_QWORD *)(a1 + v88);
  v90 = (_QWORD *)(a2 + v88);
  *v89 = *v90;
  v89[1] = v90[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for FileExportOperation.Resolved(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  v6 = type metadata accessor for FileExportOperation.Mode(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = type metadata accessor for FileExportOperation.Move(0);
    *(_OWORD *)&a1[*(int *)(v8 + 20)] = *(_OWORD *)&a2[*(int *)(v8 + 20)];
    *(_OWORD *)&a1[*(int *)(v8 + 24)] = *(_OWORD *)&a2[*(int *)(v8 + 24)];
    swift_storeEnumTagMultiPayload();
  }
  v9 = (int *)type metadata accessor for FileExportOperation(0);
  *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
  v10 = v9[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = v9[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  v20 = v9[8];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  v24 = v9[9];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  v28 = v9[10];
  v29 = &a1[v28];
  v30 = &a2[v28];
  type metadata accessor for Predicate<Pack{URL}>();
  v32 = v31;
  v33 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v30, 1, v31))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v29, v30, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
  }
  a1[v9[11]] = a2[v9[11]];
  v35 = v9[12];
  v36 = &a1[v35];
  v37 = &a2[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v37[8];
  v38 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v38] = *(_OWORD *)&a2[v38];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for FileExportOperation.Resolved(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for FileExportOperation.Mode);
    v6 = type metadata accessor for FileExportOperation.Mode(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = type metadata accessor for FileExportOperation.Move(0);
      *(_OWORD *)&a1[*(int *)(v8 + 20)] = *(_OWORD *)&a2[*(int *)(v8 + 20)];
      *(_OWORD *)&a1[*(int *)(v8 + 24)] = *(_OWORD *)&a2[*(int *)(v8 + 24)];
      swift_storeEnumTagMultiPayload();
    }
  }
  v9 = (int *)type metadata accessor for FileExportOperation(0);
  v10 = v9[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v14 = *(_QWORD *)v12;
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = v14;
  *((_QWORD *)v11 + 1) = v13;
  swift_bridgeObjectRelease();
  v15 = v9[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for URL();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
LABEL_10:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 40))(v16, v17, v18);
LABEL_11:
  v24 = v9[7];
  v25 = (uint64_t)&a1[v24];
  v26 = &a2[v24];
  if (*(_QWORD *)&a1[v24 + 24])
  {
    if (*((_QWORD *)v26 + 3))
    {
      v27 = v26[16];
      v28 = *(_QWORD *)v25;
      v29 = *(_QWORD *)(v25 + 8);
      v30 = *(_BYTE *)(v25 + 16);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *(_BYTE *)(v25 + 16) = v27;
      outlined consume of Text.Storage(v28, v29, v30);
      *(_QWORD *)(v25 + 24) = *((_QWORD *)v26 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    outlined destroy of Text(v25);
  }
  v31 = *((_OWORD *)v26 + 1);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v31;
LABEL_16:
  v32 = v9[8];
  v33 = (uint64_t)&a1[v32];
  v34 = &a2[v32];
  if (*(_QWORD *)&a1[v32 + 24])
  {
    if (*((_QWORD *)v34 + 3))
    {
      v35 = v34[16];
      v36 = *(_QWORD *)v33;
      v37 = *(_QWORD *)(v33 + 8);
      v38 = *(_BYTE *)(v33 + 16);
      *(_OWORD *)v33 = *(_OWORD *)v34;
      *(_BYTE *)(v33 + 16) = v35;
      outlined consume of Text.Storage(v36, v37, v38);
      *(_QWORD *)(v33 + 24) = *((_QWORD *)v34 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of Text(v33);
  }
  v39 = *((_OWORD *)v34 + 1);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *(_OWORD *)(v33 + 16) = v39;
LABEL_21:
  v40 = v9[9];
  v41 = (uint64_t)&a1[v40];
  v42 = &a2[v40];
  if (*(_QWORD *)&a1[v40 + 24])
  {
    if (*((_QWORD *)v42 + 3))
    {
      v43 = v42[16];
      v44 = *(_QWORD *)v41;
      v45 = *(_QWORD *)(v41 + 8);
      v46 = *(_BYTE *)(v41 + 16);
      *(_OWORD *)v41 = *(_OWORD *)v42;
      *(_BYTE *)(v41 + 16) = v43;
      outlined consume of Text.Storage(v44, v45, v46);
      *(_QWORD *)(v41 + 24) = *((_QWORD *)v42 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    outlined destroy of Text(v41);
  }
  v47 = *((_OWORD *)v42 + 1);
  *(_OWORD *)v41 = *(_OWORD *)v42;
  *(_OWORD *)(v41 + 16) = v47;
LABEL_26:
  v48 = v9[10];
  v49 = &a1[v48];
  v50 = &a2[v48];
  type metadata accessor for Predicate<Pack{URL}>();
  v52 = v51;
  v53 = *(_QWORD *)(v51 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v49, 1, v51);
  v56 = v54(v50, 1, v52);
  if (!v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v49, v50, v52);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v49, v52);
    goto LABEL_31;
  }
  if (v56)
  {
LABEL_31:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v49, v50, v52);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v49, 0, 1, v52);
LABEL_32:
  a1[v9[11]] = a2[v9[11]];
  v58 = v9[12];
  v59 = &a1[v58];
  v60 = &a2[v58];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  v59[8] = v60[8];
  v61 = a3[5];
  v62 = &a1[v61];
  v63 = &a2[v61];
  v65 = *(_QWORD *)v63;
  v64 = *((_QWORD *)v63 + 1);
  *(_QWORD *)v62 = v65;
  *((_QWORD *)v62 + 1) = v64;
  swift_bridgeObjectRelease();
  v66 = a3[6];
  v67 = &a1[v66];
  v68 = &a2[v66];
  v70 = *(_QWORD *)v68;
  v69 = *((_QWORD *)v68 + 1);
  *(_QWORD *)v67 = v70;
  *((_QWORD *)v67 + 1) = v69;
  swift_bridgeObjectRelease();
  v71 = a3[7];
  v72 = &a1[v71];
  v73 = &a2[v71];
  v75 = *(_QWORD *)v73;
  v74 = *((_QWORD *)v73 + 1);
  *(_QWORD *)v72 = v75;
  *((_QWORD *)v72 + 1) = v74;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FileExportOperation.Resolved()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876BF00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for FileExportOperation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for FileExportOperation.Resolved()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876BF0A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for FileExportOperation(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for FileExportOperation.Resolved()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FileExportOperation(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for FileExportOperation.BatchExport()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for FileExportOperation.BatchExport(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  __int128 v6;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FileExportOperation.BatchExport(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FileExportOperation.BatchExport(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;

  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  v5 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FileExportOperation.BatchExport()
{
  return &type metadata for FileExportOperation.BatchExport;
}

uint64_t destroy for FileExportOperation.Export(uint64_t a1)
{
  outlined consume of FileExportOperation.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for FileExportOperation.Export(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of FileExportOperation.Storage(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FileExportOperation.Export(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of FileExportOperation.Storage(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of FileExportOperation.Storage(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v14;
  swift_retain();
  swift_release();
  v15 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v15;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FileExportOperation.Export(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of FileExportOperation.Storage(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  v11 = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = v11;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FileExportOperation.Export()
{
  return &type metadata for FileExportOperation.Export;
}

uint64_t initializeWithCopy for FileExportOperation.BatchMove(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for FileExportOperation.BatchMove(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FileExportOperation.BatchMove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FileExportOperation.BatchMove()
{
  return &type metadata for FileExportOperation.BatchMove;
}

uint64_t initializeBufferWithCopyOfBuffer for FileExportOperation.BatchStorage(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FileExportOperation.BatchStorage(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FileExportOperation.BatchStorage(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FileExportOperation.BatchStorage()
{
  return &type metadata for FileExportOperation.BatchStorage;
}

uint64_t destroy for FileExportOperation.Storage(uint64_t a1)
{
  return outlined consume of FileExportOperation.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for FileExportOperation.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of FileExportOperation.Storage(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for FileExportOperation.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of FileExportOperation.Storage(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of FileExportOperation.Storage(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for FileExportOperation.Storage(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of FileExportOperation.Storage(v4, v6, v5, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for FileExportOperation.Storage()
{
  return &type metadata for FileExportOperation.Storage;
}

void DisclosureGroupConfiguration.init(isExpanded:label:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a6, a8);
  type metadata accessor for DisclosureGroupConfiguration();
}

uint64_t sub_1876BF9C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = v6 + *(int *)(a1 + 52);
  *(_QWORD *)v7 = v5;
  *(_QWORD *)(v7 + 8) = v4;
  *(_BYTE *)(v7 + 16) = v3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v6 + *(int *)(a1 + 56), v2, v1);
}

void DisclosureGroup<>.init(configuration:)()
{
  type metadata accessor for DisclosureGroupConfiguration();
}

void sub_1876BFA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v15 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&a9 - v16;
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(int *)(v23 + 56);
  v25 = v9 + *(int *)(v23 + 52);
  v26 = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(v13 - 160) = *(_QWORD *)v25;
  *(_QWORD *)(v13 - 152) = v26;
  *(_DWORD *)(v13 - 132) = *(unsigned __int8 *)(v25 + 16);
  *(_QWORD *)(v13 - 144) = v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16))(v22, v9 + v24, v11, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v9, a1);
  v28 = (*(unsigned __int8 *)(v15 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v29 = (char *)swift_allocObject();
  *((_QWORD *)v29 + 2) = v11;
  *((_QWORD *)v29 + 3) = v10;
  v30 = *(_QWORD *)(v13 - 128);
  *((_QWORD *)v29 + 4) = v12;
  *((_QWORD *)v29 + 5) = v30;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v29[v28], v17, a1);
  v31 = *(_QWORD *)(v13 - 160);
  swift_retain();
  v32 = *(_QWORD *)(v13 - 152);
  swift_retain();
  DisclosureGroup.init(isExpanded:label:content:)(v31, v32);
}

uint64_t sub_1876BFB8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 144), v1);
}

uint64_t DisclosureGroup.$isExpanded.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 56));
  v3 = *v2;
  if ((*((_BYTE *)v2 + 17) & 1) != 0)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    type metadata accessor for State<Bool>();
    State.projectedValue.getter();
    return v5;
  }
  return v3;
}

void DisclosureGroup.init(isExpanded:label:content:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for DisclosureGroup();
}

uint64_t sub_1876BFCD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;

  v9 = v5 + *(int *)(a1 + 56);
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 16) = 0;
  v10 = *(_QWORD *)(v3 - 8);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v5, v4, v3);
  (*(void (**)(uint64_t))(v7 - 128))(v11);
  v12 = *(_QWORD *)(v7 - 120);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v5 + *(int *)(a1 + 52), v6, v2);
  if (v12)
  {
    v14 = *(_DWORD *)(v7 - 140) & 1;
    result = outlined consume of StateOrBinding<Bool>(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(unsigned __int8 *)(v9 + 16), *(_BYTE *)(v9 + 17));
    *(_QWORD *)v9 = *(_QWORD *)(v7 - 136);
    *(_QWORD *)(v9 + 8) = v12;
    *(_BYTE *)(v9 + 16) = v14;
    *(_BYTE *)(v9 + 17) = 1;
  }
  return result;
}

void DisclosureGroup.init(content:label:)(uint64_t a1, uint64_t a2)
{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  DisclosureGroup.init(isExpanded:label:content:)(0, 0);
}

void DisclosureGroup.init(isExpanded:content:label:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1, a2);
  swift_retain();
  v9 = swift_retain();
  a6(v9);
  DisclosureGroup.init(isExpanded:label:content:)(a1, a2);
}

uint64_t sub_1876BFF00()
{
  swift_release();
  return swift_release();
}

void DisclosureGroup.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  _QWORD v6[2];

  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>(255);
  v3 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label();
  v6[0] = *(_QWORD *)(a1 + 32);
  v6[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v4 = MEMORY[0x1E0CE2E70];
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v6);
  v5[1] = &protocol witness table for ViewInputFlagModifier<A>;
  MEMORY[0x18D75FFDC](v4, v3, v5);
  type metadata accessor for StaticSourceWriter();
}

void sub_1876C0024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v11 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 320) = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  *(_QWORD *)(v10 - 368) = (char *)&a9 - v13;
  v14 = *(_QWORD *)(v9 + 24);
  v15 = lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content();
  *(_QWORD *)(v10 - 336) = v15;
  v16 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v10 - 152) = &type metadata for DisclosureGroupStyleConfiguration.Content;
  *(_QWORD *)(v10 - 144) = v14;
  *(_QWORD *)(v10 - 136) = v15;
  *(_QWORD *)(v10 - 128) = v16;
  type metadata accessor for StaticSourceWriter();
}

void sub_1876C00A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v6 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v5 - 328) = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  *(_QWORD *)(v5 - 376) = v0;
  *(_QWORD *)(v5 - 152) = DisclosureGroup.$isExpanded.getter(v4);
  *(_QWORD *)(v5 - 144) = v10;
  *(_BYTE *)(v5 - 136) = v11 & 1;
  *(_QWORD *)(v5 - 224) = v2;
  *(_QWORD *)(v5 - 216) = v1;
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v5 - 360);
  *(_QWORD *)(v5 - 200) = v3;
  *(_QWORD *)(v5 - 192) = v0;
  lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Label, (uint64_t)partial apply for closure #1 in DisclosureGroup.body.getter);
}

void sub_1876C018C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();
  *(_QWORD *)(v5 - 288) = *(_QWORD *)(v5 - 384);
  *(_QWORD *)(v5 - 280) = v0;
  *(_QWORD *)(v5 - 272) = v1;
  *(_QWORD *)(v5 - 264) = v2;
  *(_QWORD *)(v5 - 256) = *(_QWORD *)(v5 - 376);
  *(_QWORD *)(v5 - 168) = v4;
  *(_QWORD *)(v5 - 160) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5 - 168);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, (uint64_t)partial apply for closure #2 in DisclosureGroup.body.getter);
}

uint64_t sub_1876C0238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 320) + 8))(v6, v3);
  *(_QWORD *)(v7 - 184) = v2;
  *(_QWORD *)(v7 - 176) = &protocol witness table for StaticSourceWriter<A, B>;
  v8 = MEMORY[0x18D75FFDC](v4, v5, v7 - 184);
  static ViewBuilder.buildExpression<A>(_:)(v1, v5, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 328) + 8);
  v9(v1, v5);
  static ViewBuilder.buildBlock<A>(_:)(v0, v5, *(_QWORD *)(v7 - 312));
  return v9(v0, v5);
}

void type metadata accessor for ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>)
  {
    v2 = lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for HideNavigationLinkDisclosureIndicator, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>);
  }
}

void closure #1 in DisclosureGroup.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>(255);
  v0 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v0, v1);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for DisclosureGroup();
}

uint64_t sub_1876C0400(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  DisclosureGroup.groupLabel.getter(a1);
  *(_QWORD *)(v7 - 128) = v4;
  *(_QWORD *)(v7 - 120) = &protocol witness table for AccessibilityAttachmentModifier;
  v8 = MEMORY[0x1E0CE2E70];
  *(_QWORD *)(v7 - 144) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7 - 128);
  *(_QWORD *)(v7 - 136) = &protocol witness table for ViewInputFlagModifier<A>;
  v9 = MEMORY[0x18D75FFDC](v8, v2, v7 - 144);
  static ViewBuilder.buildExpression<A>(_:)(v5, v2, v9);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
  v10(v5, v2);
  static ViewBuilder.buildBlock<A>(_:)(v3, v2, *(_QWORD *)(v7 - 152));
  return v10(v3, v2);
}

uint64_t partial apply for closure #1 in DisclosureGroup.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in DisclosureGroup.body.getter);
}

uint64_t DisclosureGroup.groupLabel.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v16[2];
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for ModifiedContent();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v16[-1] - v6;
  DisclosureGroup.$isExpanded.getter(a1);
  v8 = *(_QWORD *)(a1 + 32);
  v17 = AccessibilityDisclosureModifier.init(_:)() & 1;
  v10 = type metadata accessor for AccessibilityDisclosureModifier(0, v2, v8, v9);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDisclosureModifier<A>, v10);
  v16[0] = v8;
  v16[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v16);
  View.accessibilityConfiguration<A>(_:)((uint64_t)&v17, v2, v10, v8, v11);
  v13 = lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator();
  View.input<A>(_:)((uint64_t)&type metadata for HideNavigationLinkDisclosureIndicator, v3, (uint64_t)&type metadata for HideNavigationLinkDisclosureIndicator, v12, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void closure #2 in DisclosureGroup.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for DisclosureGroup();
}

uint64_t sub_1876C067C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 52), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

uint64_t partial apply for closure #2 in DisclosureGroup.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in DisclosureGroup.body.getter);
}

void DisclosureGroup<>.init(_:content:)()
{
  Text.init(_:tableName:bundle:comment:)();
  DisclosureGroup.init(isExpanded:label:content:)(0, 0);
}

void DisclosureGroup<>.init(_:isExpanded:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_retain();
  swift_retain();
  Text.init(_:tableName:bundle:comment:)();
  DisclosureGroup.init(isExpanded:label:content:)(a5, a6);
}

uint64_t sub_1876C0860()
{
  swift_release();
  return swift_release();
}

void DisclosureGroup<>.init<A>(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9, v7);
  v13[0] = Text.init<A>(_:)();
  v13[1] = v10;
  v14 = v11 & 1;
  v15 = v12;
  DisclosureGroup.init(isExpanded:label:content:)(0, 0);
}

uint64_t sub_1876C0968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void DisclosureGroup<>.init<A>(_:isExpanded:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[6];
  char v19;
  uint64_t v20;

  v18[2] = a6;
  v18[3] = a7;
  v18[1] = a5;
  v11 = *(_QWORD *)(a8 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14, v12);
  swift_retain();
  swift_retain();
  v18[4] = Text.init<A>(_:)();
  v18[5] = v15;
  v19 = v16 & 1;
  v20 = v17;
  DisclosureGroup.init(isExpanded:label:content:)(a2, a3);
}

uint64_t sub_1876C0A84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t associated type witness table accessor for View.Body : View in DisclosureGroup<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for DisclosureGroup()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisclosureGroup(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v15, v16, v5);
    v17 = (v10 + v16) & 0xFFFFFFFFFFFFFFF8;
    v18 = *(unsigned __int8 *)(v17 + 17);
    if (v18 >= 2)
      v18 = *(_DWORD *)v17 + 2;
    v19 = (v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFFFF8;
    if (v18 == 1)
    {
      *(_QWORD *)v19 = *(_QWORD *)v17;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v17 + 8);
      *(_BYTE *)(v19 + 16) = *(_BYTE *)(v17 + 16);
      *(_BYTE *)(v19 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v19 = *(_BYTE *)v17;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v17 + 8);
      *(_BYTE *)(v19 + 17) = 0;
    }
  }
  swift_retain();
  return v4;
}

uint64_t destroy for DisclosureGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(unsigned __int8 *)(v8 + 17);
  if (v9 >= 2)
    v9 = *(_DWORD *)v8 + 2;
  if (v9 == 1)
    swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for DisclosureGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  char v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = v13 + v11;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(unsigned __int8 *)(v15 + 17);
  if (v16 >= 2)
    v16 = *(_DWORD *)v15 + 2;
  v17 = v14 & 0xFFFFFFFFFFFFFFF8;
  if (v16 == 1)
  {
    *(_QWORD *)v17 = *(_QWORD *)v15;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v15 + 8);
    *(_BYTE *)(v17 + 16) = *(_BYTE *)(v15 + 16);
    swift_retain();
    v18 = 1;
  }
  else
  {
    v18 = 0;
    *(_BYTE *)v17 = *(_BYTE *)v15;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v15 + 8);
  }
  swift_retain();
  *(_BYTE *)(v17 + 17) = v18;
  return a1;
}

uint64_t assignWithCopy for DisclosureGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  if (v14 != v15)
  {
    v16 = *(unsigned __int8 *)(v14 + 17);
    if (v16 >= 2)
      v16 = *(_DWORD *)v14 + 2;
    if (v16 == 1)
      swift_release();
    swift_release();
    v17 = *(unsigned __int8 *)(v15 + 17);
    if (v17 >= 2)
      v17 = *(_DWORD *)v15 + 2;
    if (v17 == 1)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
      *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
      *(_BYTE *)(v14 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v14 = *(_BYTE *)v15;
      *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
      *(_BYTE *)(v14 + 17) = 0;
    }
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithTake for DisclosureGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  __int128 v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = v13 + v11;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(unsigned __int8 *)(v15 + 17);
  if (v16 >= 2)
    v16 = *(_DWORD *)v15 + 2;
  v17 = v14 & 0xFFFFFFFFFFFFFFF8;
  if (v16 == 1)
  {
    v18 = *(_OWORD *)v15;
    *(_BYTE *)(v17 + 16) = *(_BYTE *)(v15 + 16);
  }
  else
  {
    LOBYTE(v16) = 0;
    v18 = *(_OWORD *)v15;
  }
  *(_OWORD *)v17 = v18;
  *(_BYTE *)(v17 + 17) = v16;
  return a1;
}

uint64_t assignWithTake for DisclosureGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  __int128 v18;
  char v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  if (v14 != v15)
  {
    v16 = *(unsigned __int8 *)(v14 + 17);
    if (v16 >= 2)
      v16 = *(_DWORD *)v14 + 2;
    if (v16 == 1)
      swift_release();
    swift_release();
    v17 = *(unsigned __int8 *)(v15 + 17);
    if (v17 >= 2)
      v17 = *(_DWORD *)v15 + 2;
    if (v17 == 1)
    {
      v18 = *(_OWORD *)v15;
      *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
      *(_OWORD *)v14 = v18;
      v19 = 1;
    }
    else
    {
      v19 = 0;
      *(_OWORD *)v14 = *(_OWORD *)v15;
    }
    *(_BYTE *)(v14 + 17) = v19;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DisclosureGroup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0xFE)
    v9 = 254;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64) + 7;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v19 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v19);
      }
      else
      {
        v20 = *(unsigned __int8 *)(((v12 + v19) & 0xFFFFFFFFFFFFF8) + 0x11);
        if (v20 >= 2)
          return (v20 ^ 0xFF) + 1;
        else
          return 0;
      }
    }
  }
  else
  {
    v13 = ((v12 + (v11 & ~(_DWORD)v10)) & 0xFFFFFFF8) + 18;
    v14 = (a2 - v9 + 0xFFFF) >> (8 * v13);
    if (v13 <= 3)
      v15 = v14 + 1;
    else
      v15 = 2;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1876C1230 + 4 * byte_187C503E0[v17]))();
  }
}

void storeEnumTagSinglePayload for DisclosureGroup(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE)
    v7 = 254;
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((*(_QWORD *)(v6 + 64) + 7 + ((*(_QWORD *)(v5 + 64) + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 18;
  if (v7 >= a3)
  {
    v12 = 0u;
    if (v7 >= a2)
      goto LABEL_19;
  }
  else
  {
    if (v9 <= 3)
      v10 = ((a3 - v7 + 0xFFFF) >> (8 * v9)) + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v7 >= a2)
LABEL_19:
      __asm { BR              X0 }
  }
  v13 = ~v7 + a2;
  bzero(a1, ((*(_QWORD *)(v6 + 64) + 7 + ((*(_QWORD *)(v5 + 64) + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 18);
  if (v9 > 3)
    *a1 = v13;
  else
    *(_WORD *)a1 = v13;
  __asm { BR              X11 }
}

void sub_1876C1414(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x1876C14B0);
}

void sub_1876C141C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1876C1424);
  JUMPOUT(0x1876C14B0);
}

void sub_1876C1468(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x1876C14B0);
}

void sub_1876C1470(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x1876C14B0);
}

uint64_t sub_1876C1478(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x1876C14B0);
  if (v6 == v10)
  {
    v3 = *(uint64_t (**)(uint64_t))(v9 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v10)
      JUMPOUT(0x1876C1484);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

void type metadata accessor for DisclosureGroup()
{
  JUMPOUT(0x18D75FF28);
}

void sub_1876C14D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  _QWORD v6[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>(255);
  v3 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label();
  v6[0] = v1;
  v6[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v4 = MEMORY[0x1E0CE2E70];
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v6);
  v5[1] = &protocol witness table for ViewInputFlagModifier<A>;
  MEMORY[0x18D75FFDC](v4, v3, v5);
  type metadata accessor for StaticSourceWriter();
}

void sub_1876C1588()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_1876C15C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[18];

  v2 = type metadata accessor for ModifiedContent();
  v5[0] = lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle();
  v5[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v4[0] = MEMORY[0x18D75FFDC](v0, v1, v5);
  v4[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

void type metadata accessor for DisclosureGroupConfiguration()
{
  JUMPOUT(0x18D75FF28);
}

void sub_1876C162C()
{
  type metadata accessor for DisclosureGroupConfiguration();
}

uint64_t sub_1876C1670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = v2 + ((v4 + 48) & ~v4);
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v5 + *(int *)(a1 + 56), v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in DisclosureGroup<>.init(configuration:)()
{
  type metadata accessor for DisclosureGroupConfiguration();
}

uint64_t sub_1876C1744(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v1, v2 + ((v3 + 48) & ~v3));
}

uint64_t EnvironmentValues.shouldBuildExpandedContentLazily.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.shouldBuildExpandedContentLazily.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShouldBuildExpandedContentLazilyEnvironmentKey()
{
  return &type metadata for ShouldBuildExpandedContentLazilyEnvironmentKey;
}

uint64_t type metadata completion function for DisclosureGroupConfiguration()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisclosureGroupConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 = *(_QWORD *)(v6 + 64),
         ((v8 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v8) + *(_QWORD *)(v7 + 64) <= 0x18)
      ? (v11 = v9 > 7)
      : (v11 = 1),
        v11))
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + (((v9 | 7) + 16) & ~(unint64_t)(v9 | 7)));
    swift_retain();
  }
  else
  {
    v12 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v13 = ((unint64_t)v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = ((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
    *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
    v15 = v14 + v8;
    v16 = (v13 + v8 + 17) & ~v8;
    v17 = (v15 + 17) & v12;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v18(v16, v17, v5);
  }
  return v4;
}

uint64_t destroy for DisclosureGroupConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = (a1 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v5 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for DisclosureGroupConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 17 + v8) & ~v12;
  v14 = (v12 + 17 + v9) & ~v12;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_retain();
  swift_retain();
  v15(v13, v14, v10);
  return a1;
}

uint64_t assignWithCopy for DisclosureGroupConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  swift_retain();
  swift_release();
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))((*(unsigned __int8 *)(v10 + 80) + 17 + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 17 + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t initializeWithTake for DisclosureGroupConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_BYTE *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 32))((*(unsigned __int8 *)(v11 + 80) + 17 + v8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 17 + v9) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t assignWithTake for DisclosureGroupConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  swift_release();
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_release();
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 17 + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 17 + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for DisclosureGroupConfiguration(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v3 + 64);
  v9 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v7)
    goto LABEL_27;
  v10 = ((v9 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v9) + *(_QWORD *)(v5 + 64);
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v14 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v14 < 2)
    {
LABEL_27:
      if (v4 == v7)
        return (*(uint64_t (**)(void))(v3 + 48))();
      v17 = (a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v5 + 48))((v17 + v9 + 17) & ~v9);
      v18 = *(_QWORD *)(v17 + 8);
      if (v18 >= 0xFFFFFFFF)
        LODWORD(v18) = -1;
      return (v18 + 1);
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_27;
LABEL_18:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if (!(_DWORD)v10)
    return v7 + v15 + 1;
  if (v10 <= 3)
    v16 = ((v9 + ((v8 + 7) & 0xFFFFFFF8) + 17) & ~(_DWORD)v9) + *(_DWORD *)(v5 + 64);
  else
    v16 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1876C1F94 + 4 * byte_187C503EF[v16 - 1]))();
}

void storeEnumTagSinglePayload for DisclosureGroupConfiguration(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  v9 = ((*(unsigned __int8 *)(v6 + 80) + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X4 }
}

void View.textInputCompletion(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1876C2284(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TextInputSuggestionCompletion(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for TextInputSuggestionCompletion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextInputSuggestionCompletion);
}

uint64_t type metadata completion function for TextInputSuggestionCompletion()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TextInputSuggestionCompletion(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v8 + ((v7 + 73) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 33 > 0x18)
  {
    v11 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v12 = *((unsigned __int8 *)a2 + 72);
    if (v12 >= 2)
      v12 = *(_DWORD *)a2 + 2;
    v13 = ~v7;
    if (v12 == 1)
    {
      v14 = a2[3];
      *(_QWORD *)(a1 + 24) = v14;
      (**(void (***)(uint64_t, uint64_t *))(v14 - 8))(a1, a2);
      v15 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v4 + 56) = v15;
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(v4 + 32, (uint64_t)(a2 + 4));
      v16 = 1;
    }
    else
    {
      v17 = a2[1];
      *(_QWORD *)v4 = *a2;
      *(_QWORD *)(v4 + 8) = v17;
      swift_bridgeObjectRetain();
      v16 = 0;
    }
    *(_BYTE *)(v4 + 72) = v16;
    v18 = (uint64_t)a2 + v7;
    v19 = (v4 + v7 + 73) & v13;
    v20 = (v18 + 73) & v13;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v19, v20, v5);
    v21 = (v8 + v19) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v8 + v20) & 0xFFFFFFFFFFFFFFF8;
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(v22 + 8);
    v25 = *(_QWORD *)(v22 + 16);
    v26 = *(_QWORD *)(v22 + 24);
    v27 = *(_BYTE *)(v22 + 32);
    outlined copy of Environment<Binding<String>?>.Content(*(_QWORD *)v22, v24, v25, v26, v27);
    *(_QWORD *)v21 = v23;
    *(_QWORD *)(v21 + 8) = v24;
    *(_QWORD *)(v21 + 16) = v25;
    *(_QWORD *)(v21 + 24) = v26;
    *(_BYTE *)(v21 + 32) = v27;
  }
  return v4;
}

uint64_t outlined copy of Environment<Binding<String>?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return outlined copy of Binding<String>?(a1, a2);
  else
    return swift_retain();
}

uint64_t destroy for TextInputSuggestionCompletion(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = *(unsigned __int8 *)(a1 + 72);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  if (v4 == 1)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v6);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return outlined consume of Environment<Binding<String>?>.Content(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_BYTE *)(v7 + 32));
}

uint64_t outlined consume of Environment<Binding<String>?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return outlined consume of Binding<String>?(a1, a2);
  else
    return swift_release();
}

uint64_t initializeWithCopy for TextInputSuggestionCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v6 = *(unsigned __int8 *)(a2 + 72);
  if (v6 >= 2)
    v6 = *(_DWORD *)a2 + 2;
  if (v6 == 1)
  {
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
    v8 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 32, a2 + 32);
    v9 = 1;
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v10;
    swift_bridgeObjectRetain();
    v9 = 0;
  }
  *(_BYTE *)(a1 + 72) = v9;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 73 + a1) & ~v12;
  v14 = (v12 + 73 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v13, v14);
  v15 = *(_QWORD *)(v11 + 64) + 7;
  v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  v19 = *(_QWORD *)(v17 + 8);
  v20 = *(_QWORD *)(v17 + 16);
  v21 = *(_QWORD *)(v17 + 24);
  v22 = *(_BYTE *)(v17 + 32);
  outlined copy of Environment<Binding<String>?>.Content(*(_QWORD *)v17, v19, v20, v21, v22);
  *(_QWORD *)v16 = v18;
  *(_QWORD *)(v16 + 8) = v19;
  *(_QWORD *)(v16 + 16) = v20;
  *(_QWORD *)(v16 + 24) = v21;
  *(_BYTE *)(v16 + 32) = v22;
  return a1;
}

uint64_t assignWithCopy for TextInputSuggestionCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  if (a1 != a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 72);
    if (v6 >= 2)
      v6 = *(_DWORD *)a1 + 2;
    if (v6 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v7 = *(unsigned __int8 *)(a2 + 72);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 == 1)
    {
      v8 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      v9 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v9;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 32, a2 + 32);
      *(_BYTE *)(a1 + 72) = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 72) = 0;
      swift_bridgeObjectRetain();
    }
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 73 + a1) & ~v11;
  v13 = (v11 + 73 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)v16;
  v18 = *(_QWORD *)(v16 + 8);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = *(_QWORD *)(v16 + 24);
  v21 = *(_BYTE *)(v16 + 32);
  outlined copy of Environment<Binding<String>?>.Content(*(_QWORD *)v16, v18, v19, v20, v21);
  v22 = *(_QWORD *)v15;
  v23 = *(_QWORD *)(v15 + 8);
  v24 = *(_QWORD *)(v15 + 16);
  v25 = *(_QWORD *)(v15 + 24);
  v26 = *(_BYTE *)(v15 + 32);
  *(_QWORD *)v15 = v17;
  *(_QWORD *)(v15 + 8) = v18;
  *(_QWORD *)(v15 + 16) = v19;
  *(_QWORD *)(v15 + 24) = v20;
  *(_BYTE *)(v15 + 32) = v21;
  outlined consume of Environment<Binding<String>?>.Content(v22, v23, v24, v25, v26);
  return a1;
}

uint64_t initializeWithTake for TextInputSuggestionCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  __int128 v16;

  v4 = *(unsigned __int8 *)(a2 + 72);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 73 + a1) & ~v9;
  v11 = (v9 + 73 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64) + 7;
  v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_BYTE *)(v14 + 32);
  v16 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v16;
  *(_BYTE *)(v13 + 32) = v15;
  return a1;
}

uint64_t assignWithTake for TextInputSuggestionCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;

  if (a1 != a2)
  {
    v6 = *(unsigned __int8 *)(a1 + 72);
    if (v6 >= 2)
      v6 = *(_DWORD *)a1 + 2;
    if (v6 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v7 = *(unsigned __int8 *)(a2 + 72);
    if (v7 >= 2)
      v7 = *(_DWORD *)a2 + 2;
    if (v7 == 1)
    {
      v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      v10 = 1;
    }
    else
    {
      v10 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(_BYTE *)(a1 + 72) = v10;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 73 + a1) & ~v12;
  v14 = (v12 + 73 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v13, v14);
  v15 = *(_QWORD *)(v11 + 64) + 7;
  v16 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_BYTE *)(v16 + 32);
  v18 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v20 = *(_QWORD *)(v18 + 8);
  v21 = *(_QWORD *)(v18 + 16);
  v22 = *(_QWORD *)(v18 + 24);
  v23 = *(_BYTE *)(v18 + 32);
  v24 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v16;
  *(_OWORD *)(v18 + 16) = v24;
  *(_BYTE *)(v18 + 32) = v17;
  outlined consume of Environment<Binding<String>?>.Content(v19, v20, v21, v22, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextInputSuggestionCompletion(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if (v5 > 0xFE)
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 73) & ~v7);
    }
    else
    {
      v14 = *(unsigned __int8 *)(a1 + 72);
      if (v14 >= 2)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  else
  {
    v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 73) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 33;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1876C2AA8 + 4 * byte_187C504F0[v12]))();
  }
}

void storeEnumTagSinglePayload for TextInputSuggestionCompletion(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + ((*(unsigned __int8 *)(v5 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 33;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_1876C2C68()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1876C2CECLL);
}

void sub_1876C2C70(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1876C2C78);
  JUMPOUT(0x1876C2CECLL);
}

void sub_1876C2CB8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876C2CECLL);
}

void sub_1876C2CC0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876C2CECLL);
}

uint64_t sub_1876C2CC8@<X0>(unsigned int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    goto LABEL_6;
  if (a2 <= 0xFE)
  {
    if (a1 > 0xFE)
      JUMPOUT(0x1876C2CD4);
    *(_BYTE *)(v6 + 72) = -(char)a1;
LABEL_6:
    JUMPOUT(0x1876C2CECLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 73) & a3);
}

uint64_t destroy for TextInputSuggestionCompletionKind(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 72);
  if (v2 >= 2)
    v2 = *(_DWORD *)a1 + 2;
  if (v2 != 1)
    return swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 32);
}

uint64_t initializeWithCopy for TextInputSuggestionCompletionKind(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(a2 + 72);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    v6 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 32, a2 + 32);
    v7 = 1;
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v8;
    swift_bridgeObjectRetain();
    v7 = 0;
  }
  *(_BYTE *)(a1 + 72) = v7;
  return a1;
}

uint64_t assignWithCopy for TextInputSuggestionCompletionKind(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v5 = *(unsigned __int8 *)(a2 + 72);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      v7 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v7;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 32, a2 + 32);
      *(_BYTE *)(a1 + 72) = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 72) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithTake for TextInputSuggestionCompletionKind(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  char v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v5 = *(unsigned __int8 *)(a2 + 72);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v6;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(_BYTE *)(a1 + 72) = v8;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TextInputSuggestionCompletionKind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TextInputSuggestionCompletionKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 57) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_BYTE *)(result + 72) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TextInputSuggestionCompletionKind(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 72);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for TextInputSuggestionCompletionKind(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TextInputSuggestionCompletionKind()
{
  return &type metadata for TextInputSuggestionCompletionKind;
}

uint64_t associated type witness table accessor for View.Body : View in TextInputSuggestionCompletion<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TextInputSuggestionCompletion.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, double);
  unint64_t v29;
  uint64_t v30;
  _WORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  _WORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72[16];
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];
  _QWORD v77[2];
  __int128 v78;
  __int128 v79;
  _OWORD v80[2];
  char v81;
  char v82[8];

  v3 = v2;
  v71 = a2;
  v63 = type metadata accessor for TextInputCompletionButtonStyle();
  MEMORY[0x1E0C80A78](v63, v5);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v10, v11);
  v12 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v16 = type metadata accessor for Button(0, v13, v14, v15);
  v64 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v62 = (_WORD *)((char *)&v60 - v18);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle>(255);
  v19 = type metadata accessor for ModifiedContent();
  v68 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v60 = (char *)&v60 - v21;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v69 = v19;
  v70 = type metadata accessor for ModifiedContent();
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70, v22);
  v65 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v66 = (char *)&v60 - v27;
  v28 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  v61 = a1;
  v28(v12, v3, a1, v26);
  v29 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v13;
  *(_QWORD *)(v30 + 24) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v30 + v29, v12, a1);
  v73 = v13;
  v74 = v14;
  v75 = v3;
  v31 = v62;
  v32 = v14;
  v33 = v60;
  Button.init(action:label:)((uint64_t)partial apply for closure #1 in TextInputSuggestionCompletion.body.getter, v30, (void (*)(uint64_t))partial apply for closure #2 in TextInputSuggestionCompletion.body.getter, (uint64_t)v72, v13, v32, v62);
  outlined init with copy of TextInputSuggestionCompletionKind(v3, (uint64_t)v7);
  v34 = v63;
  v35 = (uint64_t *)&v7[*(int *)(v63 + 20)];
  *v35 = swift_getKeyPath();
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  swift_storeEnumTagMultiPayload();
  v36 = &v7[*(int *)(v34 + 24)];
  *(_QWORD *)v36 = swift_getKeyPath();
  *((_QWORD *)v36 + 1) = 0;
  v36[16] = 0;
  v37 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v16);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextInputCompletionButtonStyle and conformance TextInputCompletionButtonStyle, (uint64_t (*)(uint64_t))type metadata accessor for TextInputCompletionButtonStyle, (uint64_t)&protocol conformance descriptor for TextInputCompletionButtonStyle);
  View.buttonStyle<A>(_:)((uint64_t)v7, v16, v34, v37);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for TextInputCompletionButtonStyle);
  (*(void (**)(_WORD *, uint64_t))(v64 + 8))(v31, v16);
  v38 = v3 + *(int *)(v61 + 40);
  v39 = *(_OWORD *)(v38 + 16);
  v80[0] = *(_OWORD *)v38;
  v80[1] = v39;
  v81 = *(_BYTE *)(v38 + 32);
  outlined init with take of Environment<Binding<String>?>.Content((uint64_t)v80, (uint64_t)v82);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<Binding<String>?>.Content);
  v40 = specialized Environment.wrappedValue.getter();
  v42 = v41;
  v44 = v43;
  v46 = v45;
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<Binding<String>?>.Content);
  if (v42)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    *((_QWORD *)&v79 + 1) = v47;
    v48 = (_QWORD *)swift_allocObject();
    *(_QWORD *)&v78 = v48;
    v48[2] = v40;
    v48[3] = v42;
    v48[4] = v44;
    v48[5] = v46;
  }
  else
  {
    v78 = 0u;
    v79 = 0u;
  }
  outlined destroy of Any?((uint64_t)&v78);
  v49 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle>, (uint64_t)&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>);
  v77[0] = v37;
  v77[1] = v49;
  v50 = MEMORY[0x1E0CE2E70];
  v51 = v69;
  v52 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v69, v77);
  v53 = v65;
  View.disabled(_:)();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v33, v51);
  v54 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  v76[0] = v52;
  v76[1] = v54;
  v55 = v70;
  v56 = MEMORY[0x18D75FFDC](v50, v70, v76);
  v57 = (uint64_t)v66;
  static ViewBuilder.buildExpression<A>(_:)(v53, v55, v56);
  v58 = *(void (**)(char *, uint64_t))(v67 + 8);
  v58(v53, v55);
  static ViewBuilder.buildBlock<A>(_:)(v57, v55, v71);
  return ((uint64_t (*)(uint64_t, uint64_t))v58)(v57, v55);
}

uint64_t closure #1 in TextInputSuggestionCompletion.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  _OWORD v14[2];
  char v15;
  _BYTE v16[40];

  outlined init with copy of TextInputSuggestionCompletionKind(a1, (uint64_t)&v12);
  if ((v13 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v7 = a1 + *(int *)(type metadata accessor for TextInputSuggestionCompletion(0, a2, a3, v6) + 40);
    v8 = *(_OWORD *)(v7 + 16);
    v14[0] = *(_OWORD *)v7;
    v14[1] = v8;
    v15 = *(_BYTE *)(v7 + 32);
    outlined init with take of Environment<Binding<String>?>.Content((uint64_t)v14, (uint64_t)v16);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<Binding<String>?>.Content);
    specialized Environment.wrappedValue.getter();
    v10 = v9;
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<Binding<String>?>.Content);
    if (v10)
    {
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #2 in TextInputSuggestionCompletion.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TextInputSuggestionCompletion(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 36), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t type metadata accessor for TextInputCompletionButtonStyle()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TextInputCompletionButtonStyle;
  if (!type metadata singleton initialization cache for TextInputCompletionButtonStyle)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle>)
  {
    v2 = type metadata accessor for TextInputCompletionButtonStyle();
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextInputCompletionButtonStyle and conformance TextInputCompletionButtonStyle, (uint64_t (*)(uint64_t))type metadata accessor for TextInputCompletionButtonStyle, (uint64_t)&protocol conformance descriptor for TextInputCompletionButtonStyle);
    v5 = type metadata accessor for PrimitiveButtonStyleContainerModifier(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle>);
  }
}

uint64_t sub_1876C387C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for TextInputSuggestionCompletion(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v4 + v8;
  if ((*(_BYTE *)(v4 + v8 + 72) & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1(v4 + v8);
    __swift_destroy_boxed_opaque_existential_1(v9 + 32);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v9 + *(int *)(v6 + 36), v5);
  v10 = v9 + *(int *)(v6 + 40);
  outlined consume of Environment<Binding<String>?>.Content(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), *(_BYTE *)(v10 + 32));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextInputSuggestionCompletion.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TextInputSuggestionCompletion(0, v5, v6, a4) - 8)
                          + 80);
  return closure #1 in TextInputSuggestionCompletion.body.getter(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t partial apply for closure #2 in TextInputSuggestionCompletion.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in TextInputSuggestionCompletion.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t outlined init with copy of TextInputSuggestionCompletionKind(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TextInputSuggestionCompletionKind(a2, a1);
  return a2;
}

uint64_t closure #1 in TextInputCompletionButtonStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(uint64_t *);
  uint64_t v13;
  uint64_t v14;

  v3 = type metadata accessor for DismissSearchAccessoryAction(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  PrimitiveButtonStyleConfiguration.trigger()();
  v7 = a2 + *(int *)(type metadata accessor for TextInputCompletionButtonStyle() + 24);
  v8 = *(_QWORD *)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(_BYTE *)(v7 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v7, v9, v10);
  v11 = (void (*)(uint64_t *))specialized Environment.wrappedValue.getter(v8, v9, v10);
  outlined consume of Environment<AppIntentExecutor?>.Content(v8, v9, v10, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  if (v11)
  {
    v14 = 4;
    v11(&v14);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v11);
  }
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  DismissSearchAccessoryAction.callAsFunction()();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for DismissSearchAccessoryAction);
}

uint64_t outlined init with take of Environment<Binding<String>?>.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Binding<String>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<String>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Binding<String>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<String>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>?);
  }
}

uint64_t sub_1876C3BC0()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance TextInputCompletionButtonStyle@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t (**v26)();
  uint64_t v28;
  uint64_t v29;

  v29 = a5;
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, a2, a3, a4);
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v15, v16);
  v17 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v17, v20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a1, (uint64_t)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v5, (uint64_t)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for TextInputCompletionButtonStyle);
  v22 = (*(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v23 = (v19 + *(unsigned __int8 *)(v13 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v24 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v22, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of TableCellFormula((uint64_t)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v23, (uint64_t (*)(_QWORD))type metadata accessor for TextInputCompletionButtonStyle);
  v25 = a1[1];
  *v12 = *a1;
  v12[1] = v25;
  v26 = (uint64_t (**)())&v12[*(int *)(v9 + 36)];
  *v26 = partial apply for closure #1 in TextInputCompletionButtonStyle.makeBody(configuration:);
  v26[1] = (uint64_t (*)())v24;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, v29, (uint64_t (*)(_QWORD))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
}

uint64_t specialized static TextInputSuggestionCompletionKind.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  _OWORD v6[2];
  _OWORD v7[2];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  _BYTE v11[80];
  _OWORD v12[4];
  uint64_t v13;
  char v14;

  outlined init with copy of TextInputSuggestionCompletionKind(a1, (uint64_t)v11);
  outlined init with copy of TextInputSuggestionCompletionKind(a2, (uint64_t)v12);
  if ((v11[72] & 1) == 0)
  {
    outlined init with copy of TextInputSuggestionCompletionKind((uint64_t)v11, (uint64_t)v9);
    if ((v14 & 1) == 0)
    {
      if (v9[0] == v12[0])
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v4 & 1) == 0)
        {
          outlined destroy of TextInputSuggestionCompletionKind((uint64_t)v11);
          goto LABEL_8;
        }
      }
      outlined destroy of TextInputSuggestionCompletionKind((uint64_t)v11);
      v3 = 1;
      return v3 & 1;
    }
    swift_bridgeObjectRelease();
LABEL_7:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for (TextInputSuggestionCompletionKind, TextInputSuggestionCompletionKind));
LABEL_8:
    v3 = 0;
    return v3 & 1;
  }
  outlined init with copy of TextInputSuggestionCompletionKind((uint64_t)v11, (uint64_t)v9);
  if (v14 != 1)
  {
    outlined destroy of AnyToken((uint64_t)v9);
    goto LABEL_7;
  }
  v7[0] = v12[2];
  v7[1] = v12[3];
  v8 = v13;
  v6[0] = v12[0];
  v6[1] = v12[1];
  v3 = MEMORY[0x18D75E284](&v10, v7);
  outlined destroy of AnyToken((uint64_t)v6);
  outlined destroy of AnyToken((uint64_t)v9);
  outlined destroy of TextInputSuggestionCompletionKind((uint64_t)v11);
  return v3 & 1;
}

void type metadata accessor for (TextInputSuggestionCompletionKind, TextInputSuggestionCompletionKind)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (TextInputSuggestionCompletionKind, TextInputSuggestionCompletionKind))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TextInputSuggestionCompletionKind, TextInputSuggestionCompletionKind));
  }
}

uint64_t outlined destroy of TextInputSuggestionCompletionKind(uint64_t a1)
{
  destroy for TextInputSuggestionCompletionKind(a1);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for TextInputCompletionButtonStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *((unsigned __int8 *)a2 + 72);
    if (v7 == 255)
    {
      v8 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else if ((v7 & 1) != 0)
    {
      v12 = a2[3];
      *(_QWORD *)(a1 + 24) = v12;
      (**(void (***)(uint64_t, uint64_t *))(v12 - 8))(a1, a2);
      v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v4 + 56) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v4 + 32, (uint64_t)(a2 + 4));
      *(_BYTE *)(v4 + 72) = 1;
    }
    else
    {
      v11 = a2[1];
      *(_QWORD *)v4 = *a2;
      *(_QWORD *)(v4 + 8) = v11;
      *(_BYTE *)(v4 + 72) = 0;
      swift_bridgeObjectRetain();
    }
    v14 = *(int *)(a3 + 20);
    v15 = (_QWORD *)(v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<SearchFieldState>(0);
      v18 = v17;
      v19 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v17))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v40 = v16[1];
        *v15 = *v16;
        v15[1] = v40;
        v21 = *(int *)(v18 + 32);
        v41 = v19;
        v22 = (char *)v15 + v21;
        v23 = (char *)v16 + v21;
        *v22 = *((_BYTE *)v16 + v21);
        v22[1] = *((_BYTE *)v16 + v21 + 1);
        *((_WORD *)v22 + 1) = *(_WORD *)((char *)v16 + v21 + 2);
        v22[8] = *((_BYTE *)v16 + v21 + 8);
        *((_DWORD *)v22 + 1) = *(_DWORD *)((char *)v16 + v21 + 4);
        v24 = (int *)type metadata accessor for SearchFieldState();
        v25 = v24[9];
        v38 = &v23[v25];
        v39 = &v22[v25];
        v26 = type metadata accessor for AttributedString();
        v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
        swift_retain();
        swift_retain();
        v37(v39, v38, v26);
        v22[v24[10]] = v23[v24[10]];
        v27 = v24[11];
        v28 = &v22[v27];
        v29 = &v23[v27];
        v28[4] = v29[4];
        *(_DWORD *)v28 = *(_DWORD *)v29;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v15, 0, 1, v18);
      }
    }
    else
    {
      *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v30 = *(int *)(a3 + 24);
    v31 = v4 + v30;
    v32 = (uint64_t)a2 + v30;
    v33 = *(_QWORD *)v32;
    v34 = *(_QWORD *)(v32 + 8);
    v35 = *(_BYTE *)(v32 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v32, v34, v35);
    *(_QWORD *)v31 = v33;
    *(_QWORD *)(v31 + 8) = v34;
    *(_BYTE *)(v31 + 16) = v35;
  }
  return v4;
}

uint64_t destroy for TextInputCompletionButtonStyle(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(a1 + 72);
  if (v4 != 255)
  {
    if ((v4 & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v5 = a1 + *(int *)(a2 + 20);
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    v7 = v6;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    {
      swift_release();
      swift_release();
      v8 = v5 + *(int *)(v7 + 32);
      v9 = v8 + *(int *)(type metadata accessor for SearchFieldState() + 36);
      v10 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    }
  }
  else
  {
    swift_release();
  }
  return outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
}

uint64_t initializeWithCopy for TextInputCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v6 = *(unsigned __int8 *)(a2 + 72);
  if (v6 == 255)
  {
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  else if ((v6 & 1) != 0)
  {
    v10 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
    v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 32, a2 + 32);
    *(_BYTE *)(a1 + 72) = 1;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 72) = 0;
    swift_bridgeObjectRetain();
  }
  v12 = *(int *)(a3 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    v16 = v15;
    v17 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v38 = v14[1];
      *v13 = *v14;
      v13[1] = v38;
      v19 = *(int *)(v16 + 32);
      v39 = v17;
      v20 = (char *)v13 + v19;
      v21 = (char *)v14 + v19;
      *v20 = *((_BYTE *)v14 + v19);
      v20[1] = *((_BYTE *)v14 + v19 + 1);
      *((_WORD *)v20 + 1) = *(_WORD *)((char *)v14 + v19 + 2);
      v20[8] = *((_BYTE *)v14 + v19 + 8);
      *((_DWORD *)v20 + 1) = *(_DWORD *)((char *)v14 + v19 + 4);
      v22 = (int *)type metadata accessor for SearchFieldState();
      v23 = v22[9];
      v36 = &v21[v23];
      v37 = &v20[v23];
      v24 = type metadata accessor for AttributedString();
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
      swift_retain();
      swift_retain();
      v35(v37, v36, v24);
      v20[v22[10]] = v21[v22[10]];
      v25 = v22[11];
      v26 = &v20[v25];
      v27 = &v21[v25];
      v26[4] = v27[4];
      *(_DWORD *)v26 = *(_DWORD *)v27;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v13, 0, 1, v16);
    }
  }
  else
  {
    *v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v28 = *(int *)(a3 + 24);
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_QWORD *)v30;
  v32 = *(_QWORD *)(v30 + 8);
  v33 = *(_BYTE *)(v30 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v30, v32, v33);
  *(_QWORD *)v29 = v31;
  *(_QWORD *)(v29 + 8) = v32;
  *(_BYTE *)(v29 + 16) = v33;
  return a1;
}

uint64_t assignWithCopy for TextInputCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  uint64_t v45;

  v6 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) == 255)
  {
    if (v6 == 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v10 = *(_OWORD *)(a2 + 16);
      v11 = *(_OWORD *)(a2 + 32);
      v12 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)(a1 + 48) = v12;
      *(_OWORD *)(a1 + 16) = v10;
      if (a1 == a2)
        goto LABEL_21;
      goto LABEL_12;
    }
    if ((v6 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    if (v6 == 255)
    {
      outlined destroy of TextInputSuggestionCompletionKind(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v8 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 16) = v9;
      if (a1 == a2)
        goto LABEL_21;
      goto LABEL_12;
    }
    if (a1 == a2)
    {
LABEL_11:
      if (a1 == a2)
        goto LABEL_21;
      goto LABEL_12;
    }
    outlined destroy of TextInputSuggestionCompletionKind(a1);
    if ((*(_BYTE *)(a2 + 72) & 1) != 0)
    {
LABEL_10:
      v13 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
      v14 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v14;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 32, a2 + 32);
      *(_BYTE *)(a1 + 72) = 1;
      goto LABEL_11;
    }
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 72) = 0;
  swift_bridgeObjectRetain();
  if (a1 == a2)
    goto LABEL_21;
LABEL_12:
  v15 = *(int *)(a3 + 20);
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + v15, (uint64_t (*)(_QWORD))type metadata accessor for Environment<DismissSearchAccessoryAction>.Content);
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    v19 = v18;
    v20 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v18))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      *v16 = *v17;
      v45 = v20;
      v16[1] = v17[1];
      v22 = *(int *)(v19 + 32);
      v23 = (char *)v16 + v22;
      v24 = (char *)v17 + v22;
      *v23 = *((_BYTE *)v17 + v22);
      v23[1] = *((_BYTE *)v17 + v22 + 1);
      v23[2] = *((_BYTE *)v17 + v22 + 2);
      v23[3] = *((_BYTE *)v17 + v22 + 3);
      LODWORD(v22) = *(_DWORD *)((char *)v17 + v22 + 4);
      v23[8] = v24[8];
      *((_DWORD *)v23 + 1) = v22;
      v25 = (int *)type metadata accessor for SearchFieldState();
      v26 = v25[9];
      v43 = &v24[v26];
      v44 = &v23[v26];
      v27 = type metadata accessor for AttributedString();
      v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      swift_retain();
      swift_retain();
      v42(v44, v43, v27);
      v23[v25[10]] = v24[v25[10]];
      v28 = v25[11];
      v29 = &v23[v28];
      v30 = &v24[v28];
      v31 = v30[4];
      *(_DWORD *)v29 = *(_DWORD *)v30;
      v29[4] = v31;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v16, 0, 1, v19);
    }
  }
  else
  {
    *v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_21:
  v32 = *(int *)(a3 + 24);
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = *(_QWORD *)v34;
  v36 = *(_QWORD *)(v34 + 8);
  v37 = *(_BYTE *)(v34 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v34, v36, v37);
  v38 = *(_QWORD *)v33;
  v39 = *(_QWORD *)(v33 + 8);
  v40 = *(_BYTE *)(v33 + 16);
  *(_QWORD *)v33 = v35;
  *(_QWORD *)(v33 + 8) = v36;
  *(_BYTE *)(v33 + 16) = v37;
  outlined consume of Environment<AppIntentExecutor?>.Content(v38, v39, v40, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  return a1;
}

_OWORD *initializeWithTake for TextInputCompletionButtonStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v31;
  char *v32;

  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *(_OWORD *)((char *)a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  v12 = v11;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    v14 = v13;
    v15 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v13))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v17 = v10[1];
      *v9 = *v10;
      v9[1] = v17;
      v18 = *(int *)(v14 + 32);
      v19 = (char *)v9 + v18;
      v20 = (char *)v10 + v18;
      *v19 = *((_BYTE *)v10 + v18);
      v19[1] = *((_BYTE *)v10 + v18 + 1);
      *((_WORD *)v19 + 1) = *(_WORD *)((char *)v10 + v18 + 2);
      v19[8] = *((_BYTE *)v10 + v18 + 8);
      *((_DWORD *)v19 + 1) = *(_DWORD *)((char *)v10 + v18 + 4);
      v21 = (int *)type metadata accessor for SearchFieldState();
      v22 = v21[9];
      v31 = &v20[v22];
      v32 = &v19[v22];
      v23 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v32, v31, v23);
      v19[v21[10]] = v20[v21[10]];
      v24 = v21[11];
      v25 = &v19[v24];
      v26 = &v20[v24];
      v25[4] = v26[4];
      *(_DWORD *)v25 = *(_DWORD *)v26;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  v27 = *(int *)(a3 + 24);
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  *(_OWORD *)v28 = *(_OWORD *)v29;
  v28[16] = v29[16];
  return a1;
}

uint64_t assignWithTake for TextInputCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v36;
  char *v37;

  if (*(unsigned __int8 *)(a1 + 72) == 255)
    goto LABEL_7;
  if (*(unsigned __int8 *)(a2 + 72) == 255 || a1 != a2)
  {
    outlined destroy of TextInputSuggestionCompletionKind(a1);
LABEL_7:
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 20);
    v10 = (_QWORD *)(a1 + v9);
    v11 = (_QWORD *)(a2 + v9);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + v9, (uint64_t (*)(_QWORD))type metadata accessor for Environment<DismissSearchAccessoryAction>.Content);
    type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
    v13 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<SearchFieldState>(0);
      v15 = v14;
      v16 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v11, 1, v14))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        v18 = v11[1];
        *v10 = *v11;
        v10[1] = v18;
        v19 = *(int *)(v15 + 32);
        v20 = (char *)v10 + v19;
        v21 = (char *)v11 + v19;
        *v20 = *((_BYTE *)v11 + v19);
        v20[1] = *((_BYTE *)v11 + v19 + 1);
        *((_WORD *)v20 + 1) = *(_WORD *)((char *)v11 + v19 + 2);
        v20[8] = *((_BYTE *)v11 + v19 + 8);
        *((_DWORD *)v20 + 1) = *(_DWORD *)((char *)v11 + v19 + 4);
        v22 = (int *)type metadata accessor for SearchFieldState();
        v23 = v22[9];
        v36 = &v21[v23];
        v37 = &v20[v23];
        v24 = type metadata accessor for AttributedString();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v37, v36, v24);
        v20[v22[10]] = v21[v22[10]];
        v25 = v22[11];
        v26 = &v20[v25];
        v27 = &v21[v25];
        v26[4] = v27[4];
        *(_DWORD *)v26 = *(_DWORD *)v27;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v10, 0, 1, v15);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v28 = *(int *)(a3 + 24);
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_BYTE *)(v30 + 16);
  v32 = *(_QWORD *)v29;
  v33 = *(_QWORD *)(v29 + 8);
  v34 = *(_BYTE *)(v29 + 16);
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *(_BYTE *)(v29 + 16) = v31;
  outlined consume of Environment<AppIntentExecutor?>.Content(v32, v33, v34, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextInputCompletionButtonStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1876C4D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E0CE1160]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 16);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TextInputCompletionButtonStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1876C4E40(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E0CE1160]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, v8);
  else
    *(_BYTE *)(a1 + *(int *)(a4 + 24) + 16) = -(char)a2;
}

void type metadata completion function for TextInputCompletionButtonStyle()
{
  unint64_t v0;

  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1876C4F54(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v4 = type metadata accessor for Button(255, *a1, a1[1], a4);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle>(255);
  v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v6 = type metadata accessor for ModifiedContent();
  v10[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Button<A>, v4);
  v10[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle>, (uint64_t)&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>);
  v7 = MEMORY[0x1E0CE2E70];
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v10);
  v9[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  return MEMORY[0x18D75FFDC](v7, v6, v9);
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in TextInputCompletionButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1876C5058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int EnumCaseMultiPayload;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for TextInputCompletionButtonStyle();
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = v0 + *(int *)(v1 + 24) + v3;
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      goto LABEL_8;
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_WORD *)(v8 + 32), *(_BYTE *)(v8 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 56), *(_QWORD *)(v8 + 64), *(_WORD *)(v8 + 72), *(_BYTE *)(v8 + 74));
  v10 = v8 + *(int *)(type metadata accessor for LinkDestination() + 24);
  v11 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
LABEL_8:
  v12 = v0 + v7;
  v13 = *(unsigned __int8 *)(v0 + v7 + 72);
  if (v13 != 255)
  {
    if ((v13 & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_1(v0 + v7);
      __swift_destroy_boxed_opaque_existential_1(v12 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v14 = v12 + *(int *)(v5 + 20);
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    v16 = v15;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      swift_release();
      swift_release();
      v17 = *(int *)(v16 + 32);
      v18 = v14 + v17 + *(int *)(type metadata accessor for SearchFieldState() + 36);
      v19 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    }
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v12 + *(int *)(v5 + 24)), *(_QWORD *)(v12 + *(int *)(v5 + 24) + 8), *(_BYTE *)(v12 + *(int *)(v5 + 24) + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextInputCompletionButtonStyle.makeBody(configuration:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TextInputCompletionButtonStyle() - 8) + 80);
  return closure #1 in TextInputCompletionButtonStyle.makeBody(configuration:)(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>>(255, a2, a3, a4);
    v6 = v5;
    v7[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>, (uint64_t (*)(uint64_t))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&protocol conformance descriptor for Button<A>);
    v7[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, (uint64_t)&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, a2, a3, a4);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(255);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>>);
  }
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>)
  {
    v2 = lazy protocol witness table accessor for type DefaultListButtonStyle and conformance DefaultListButtonStyle();
    v4 = type metadata accessor for PrimitiveButtonStyleContainerModifier(a1, (uint64_t)&type metadata for DefaultListButtonStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>);
  }
}

Swift::Void __swiftcall UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(UIViewController *pushingFrom, Swift::Bool enablePreemption)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  UIView *v9;
  uint64_t v10;
  UIView *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  id v26;
  void *v27;
  _QWORD v28[5];
  _OWORD v29[2];
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v3 = v2;
  v6 = *v2;
  v7 = *MEMORY[0x1E0DEEDD8];
  UIHostingController.transitionContent.getter(&v33);
  if (*((_QWORD *)&v35 + 1))
  {
    v8 = v33;
    v31[0] = v34;
    v31[1] = v35;
    v32 = v36;
    v9 = -[UIViewController view](pushingFrom, sel_view);
    if (v9)
    {
      v11 = v9;
      v12 = v7 & v6;
      MEMORY[0x1E0C80A78](v9, v10);
      v28[2] = v8;
      v28[3] = v31;
      v14 = _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(v13, _sSo6UIViewC7SwiftUIE28_findMatchedTransitionSource2id2inAC0efG11MarkingViewCSgx_AC9NamespaceV2IDVtSHRzlFSbAHXEfU_s11AnyHashableV_TG5TA_0, (uint64_t)v28);
      type metadata accessor for MatchedTransitionSourceMarkingView();
      v15 = (void *)swift_dynamicCastClass();

      if (!v15)
      v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3FD0]), sel_init);
      objc_msgSend(v16, sel_set_popPreemptsPushInSwiftUIEnabled_, enablePreemption);
      v17 = swift_allocObject();
      swift_unknownObjectWeakInit();
      outlined init with copy of AnyHashable((uint64_t)v31, (uint64_t)v29);
      v18 = swift_allocObject();
      v19 = *(_QWORD *)(v12 + 80);
      *(_QWORD *)(v18 + 16) = v19;
      v20 = *(_QWORD *)(v12 + 88);
      *(_QWORD *)(v18 + 24) = v20;
      *(_QWORD *)(v18 + 32) = v17;
      v21 = v29[1];
      *(_OWORD *)(v18 + 40) = v29[0];
      *(_OWORD *)(v18 + 56) = v21;
      *(_QWORD *)(v18 + 72) = v30;
      *(_QWORD *)(v18 + 80) = v8;
      swift_retain();
      UIZoomTransitionOptions.alignmentRectProvider.setter();
      swift_release();
      type metadata accessor for UIViewControllerTransition();
      v22 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v23 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v24 = (_QWORD *)swift_allocObject();
      v24[2] = v19;
      v24[3] = v20;
      v24[4] = v22;
      v24[5] = v23;
      v24[6] = v15;
      v25 = v15;
      v26 = v16;
      swift_retain();
      swift_retain();
      v27 = (void *)static UIViewControllerTransition.zoom(options:sourceViewProvider:)();

      swift_release();
      swift_release();
      swift_release();
      objc_msgSend(v3, sel_setPreferredTransition_, v27);

      objc_msgSend(v3, sel_setModalPresentationStyle_, 5);
      outlined destroy of AnyHashable((uint64_t)v31);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    objc_msgSend(v2, sel__setPreferredTransition_, 0);
  }
}

uint64_t UIHostingController.transitionContent.getter@<X0>(_OWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t result;
  _QWORD v9[6];
  _BYTE v10[48];

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = (void *)specialized UIHostingController.host.getter();
  v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  v7 = v4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
  ViewRendererHost.preferenceValue<A>(_:)();

  if (v9[4] == 1)
  {
    result = outlined destroy of _NavigationTransitionOutputs?((uint64_t)v9);
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  else
  {
    outlined init with copy of _NavigationTransitionOutputs.Content((uint64_t)v9, (uint64_t)v10);
    outlined destroy of _NavigationTransitionOutputs((uint64_t)v9);
    return outlined init with take of _NavigationTransitionOutputs.Content((uint64_t)v10, (uint64_t)a1);
  }
  return result;
}

uint64_t closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  _BYTE v11[40];

  v3 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x18D760234](v3);
  if (!result)
    goto LABEL_3;
  v5 = (void *)result;
  specialized UIHostingController.matchedTransitionAlignmentRect<A>(id:namespace:)((uint64_t)v10);
  v8 = v10[1];
  v9 = v10[0];

  result = outlined init with take of CGRect?((uint64_t)v10, (uint64_t)v11);
  v7 = v8;
  v6 = v9;
  if (v11[32] == 1)
  {
LABEL_3:
    v6 = *MEMORY[0x1E0C9D628];
    v7 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  }
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 32) = 0;
  return result;
}

id closure #2 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _BYTE *v11;
  _BYTE *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  _QWORD v20[6];

  v6 = a2 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x18D760234](v6);
  if (!v7)
  {
LABEL_7:
    if (!a4)
      return 0;
LABEL_8:
    v17 = *(id *)&a4[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView];
    v18 = v17;
    return v17;
  }
  v8 = (void *)v7;
  swift_beginAccess();
  v9 = (void *)MEMORY[0x18D760234](a3 + 16);
  if (!v9)
  {

    goto LABEL_7;
  }
  v10 = v9;
  v11 = UIHostingController.findSourceMarkingView(previousViewController:fallbackSource:)(v9, a4);
  if (!v11)
  {

    if (!a4)
      return 0;
    goto LABEL_8;
  }
  v12 = v11;
  v13 = objc_msgSend(v8, sel_transitionCoordinator);
  if (v13)
  {
    v14 = v13;
    v12[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom] = 1;
    MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(0);
    objc_msgSend(v12, sel_setNeedsLayout);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v12;
    v20[4] = _s7SwiftUI19UIHostingControllerC28configurePreferredTransition11pushingFrom16enablePreemptionySo06UIViewD0C_SbtFSo0L0CSgSo06UIZoomG25SourceViewProviderContextCcfU0_ySo0ldg11CoordinatorQ0_pcfU_TA_0;
    v20[5] = v15;
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 1107296256;
    v20[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v20[3] = &block_descriptor_48;
    v16 = _Block_copy(v20);
    v12 = v12;
    swift_release();
    objc_msgSend(v14, sel_animateAlongsideTransitionInView_animation_completion_, 0, 0, v16);
    swift_unknownObjectRelease();

    _Block_release(v16);
  }
  else
  {

  }
  v17 = *(id *)&v12[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView];

  return v17;
}

id UIHostingController.findSourceMarkingView(previousViewController:fallbackSource:)(void *a1, void *a2)
{
  uint64_t v4;
  id result;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  UIHostingController.transitionContent.getter(&v14);
  if (!v17)
    goto LABEL_6;
  v4 = v14;
  result = objc_msgSend(a1, sel_view, v15, v16, v17, v18);
  if (result)
  {
    v7 = result;
    MEMORY[0x1E0C80A78](result, v6);
    v12[2] = v4;
    v12[3] = &v13;
    v9 = _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(v8, (uint64_t (*)(uint64_t *))closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)specialized partial apply, (uint64_t)v12);
    type metadata accessor for MatchedTransitionSourceMarkingView();
    v10 = swift_dynamicCastClass();

    if (v10)
    {
      outlined destroy of AnyHashable((uint64_t)&v13);
      return (id)v10;
    }

    outlined destroy of AnyHashable((uint64_t)&v13);
LABEL_6:
    v11 = a2;
    return a2;
  }
  __break(1u);
  return result;
}

id closure #1 in closure #2 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom) = 0;
  return MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(0);
}

uint64_t specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  _BYTE v9[40];
  _BYTE v10[40];
  _BYTE v11[40];
  _BYTE v12[40];

  v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_effect);
  swift_beginAccess();
  v6 = *v5;
  outlined init with copy of AnyHashable(a3, (uint64_t)v12);
  if (v6 == a2)
  {
    outlined init with copy of AnyHashable((uint64_t)(v5 + 1), (uint64_t)v11);
    outlined init with copy of AnyHashable((uint64_t)v12, (uint64_t)v9);
    AnyHashable.init<A>(_:)();
    v7 = MEMORY[0x18D75E284](v11, v10);
    outlined destroy of AnyHashable((uint64_t)v10);
    outlined destroy of AnyHashable((uint64_t)v11);
    outlined destroy of AnyHashable((uint64_t)v12);
  }
  else
  {
    outlined destroy of AnyHashable((uint64_t)v12);
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(*a1, a2, a3);
}

uint64_t _sSo6UIViewC7SwiftUIE28_findMatchedTransitionSource2id2inAC0efG11MarkingViewCSgx_AC9NamespaceV2IDVtSHRzlFSbAHXEfU_s11AnyHashableV_TG5TA_0(uint64_t *a1)
{
  uint64_t v1;

  return specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(*a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1876C5CDC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1876C5D00()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(*(_QWORD *)(v1 + 32), a1);
}

unint64_t type metadata accessor for UIViewControllerTransition()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIViewControllerTransition;
  if (!lazy cache variable for type metadata for UIViewControllerTransition)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIViewControllerTransition);
  }
  return result;
}

uint64_t sub_1876C5D7C()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

id partial apply for closure #2 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(char **)(v1 + 48));
}

uint64_t sub_1876C5DC0()
{
  uint64_t v0;

  return swift_deallocObject();
}

id _s7SwiftUI19UIHostingControllerC28configurePreferredTransition11pushingFrom16enablePreemptionySo06UIViewD0C_SbtFSo0L0CSgSo06UIZoomG25SourceViewProviderContextCcfU0_ySo0ldg11CoordinatorQ0_pcfU_TA_0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom) = 0;
  return MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(0);
}

uint64_t outlined destroy of _NavigationTransitionOutputs?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _NavigationTransitionOutputs?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for AlertStorage(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  result = swift_release();
  if (*(_QWORD *)(a1 + 136))
  {
    if (*(_QWORD *)(a1 + 120))
    {
      outlined consume of Text.Storage(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112));
      swift_bridgeObjectRelease();
    }
    swift_release();
    result = swift_release();
  }
  if (*(_QWORD *)(a1 + 152))
  {

    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AlertStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  __int128 v19;
  __int128 v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v6 = (_OWORD *)(a1 + 96);
  v7 = a2 + 96;
  v8 = *(_QWORD *)(a2 + 136);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 120);
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 96);
      v11 = *(_QWORD *)(a2 + 104);
      v12 = *(_BYTE *)(a2 + 112);
      outlined copy of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 96) = v10;
      *(_QWORD *)(a1 + 104) = v11;
      *(_BYTE *)(a1 + 112) = v12;
      *(_QWORD *)(a1 + 120) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = *(_OWORD *)(v7 + 16);
      *v6 = *(_OWORD *)v7;
      *(_OWORD *)(a1 + 112) = v14;
    }
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v8;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    swift_retain();
    swift_retain();
  }
  else
  {
    v13 = *(_OWORD *)(v7 + 16);
    *v6 = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 112) = v13;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(v7 + 32);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(v7 + 48);
  }
  v15 = *(_QWORD *)(a2 + 152);
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v15;
    *(_QWORD *)(a1 + 160) = v16;
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
    v17 = *(void **)(a2 + 184);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = v17;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v18 = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v19;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v20 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v20;
  }
  return a1;
}

uint64_t assignWithCopy for AlertStorage(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  v4 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v5 = (_OWORD *)(a1 + 96);
  v6 = (_OWORD *)(a2 + 96);
  v7 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 120);
      if (*(_QWORD *)(a1 + 120))
      {
        if (v8)
        {
          v9 = *(_QWORD *)(a2 + 96);
          v10 = *(_QWORD *)(a2 + 104);
          v11 = *(_BYTE *)(a2 + 112);
          outlined copy of Text.Storage(v9, v10, v11);
          v12 = *(_QWORD *)(a1 + 96);
          v13 = *(_QWORD *)(a1 + 104);
          v14 = *(_BYTE *)(a1 + 112);
          *(_QWORD *)(a1 + 96) = v9;
          *(_QWORD *)(a1 + 104) = v10;
          *(_BYTE *)(a1 + 112) = v11;
          outlined consume of Text.Storage(v12, v13, v14);
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of Text(a1 + 96);
          v27 = *(_OWORD *)(a2 + 112);
          *v5 = *v6;
          *(_OWORD *)(a1 + 112) = v27;
        }
      }
      else if (v8)
      {
        v21 = *(_QWORD *)(a2 + 96);
        v22 = *(_QWORD *)(a2 + 104);
        v23 = *(_BYTE *)(a2 + 112);
        outlined copy of Text.Storage(v21, v22, v23);
        *(_QWORD *)(a1 + 96) = v21;
        *(_QWORD *)(a1 + 104) = v22;
        *(_BYTE *)(a1 + 112) = v23;
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        swift_bridgeObjectRetain();
      }
      else
      {
        v29 = *(_OWORD *)(a2 + 112);
        *v5 = *v6;
        *(_OWORD *)(a1 + 112) = v29;
      }
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    }
    else
    {
      outlined destroy of DialogSuppressionConfiguration(a1 + 96);
      v19 = *(_OWORD *)(a2 + 112);
      v18 = *(_OWORD *)(a2 + 128);
      v20 = *v6;
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v19;
      *(_OWORD *)(a1 + 128) = v18;
      *v5 = v20;
    }
  }
  else if (v7)
  {
    if (*(_QWORD *)(a2 + 120))
    {
      v15 = *(_QWORD *)(a2 + 96);
      v16 = *(_QWORD *)(a2 + 104);
      v17 = *(_BYTE *)(a2 + 112);
      outlined copy of Text.Storage(v15, v16, v17);
      *(_QWORD *)(a1 + 96) = v15;
      *(_QWORD *)(a1 + 104) = v16;
      *(_BYTE *)(a1 + 112) = v17;
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
    }
    else
    {
      v28 = *(_OWORD *)(a2 + 112);
      *v5 = *v6;
      *(_OWORD *)(a1 + 112) = v28;
    }
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    swift_retain();
    swift_retain();
  }
  else
  {
    v24 = *v6;
    v25 = *(_OWORD *)(a2 + 112);
    v26 = *(_OWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v25;
    *(_OWORD *)(a1 + 128) = v26;
    *v5 = v24;
  }
  v30 = (_OWORD *)(a1 + 152);
  v32 = (_OWORD *)(a2 + 152);
  v31 = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 152))
  {
    if (v31)
    {
      v33 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = v31;
      *(_QWORD *)(a1 + 160) = v33;
      *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      v34 = *(void **)(a2 + 184);
      v35 = *(void **)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v34;
      v36 = v34;

      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_retain();
      swift_release();
      *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_retain();
      swift_release();
      *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
      *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
      *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(a1 + 152);
      v40 = *(_OWORD *)(a2 + 168);
      *v30 = *v32;
      *(_OWORD *)(a1 + 168) = v40;
      v42 = *(_OWORD *)(a2 + 200);
      v41 = *(_OWORD *)(a2 + 216);
      v43 = *(_OWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 200) = v42;
      *(_OWORD *)(a1 + 216) = v41;
      *(_OWORD *)(a1 + 184) = v43;
    }
  }
  else if (v31)
  {
    v37 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v31;
    *(_QWORD *)(a1 + 160) = v37;
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    v38 = *(void **)(a2 + 184);
    *(_QWORD *)(a1 + 184) = v38;
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v39 = v38;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v44 = *(_OWORD *)(a2 + 168);
    *v30 = *v32;
    *(_OWORD *)(a1 + 168) = v44;
    v45 = *(_OWORD *)(a2 + 184);
    v46 = *(_OWORD *)(a2 + 200);
    v47 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 200) = v46;
    *(_OWORD *)(a1 + 216) = v47;
    *(_OWORD *)(a1 + 184) = v45;
  }
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t assignWithTake for AlertStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v5 = (_OWORD *)(a1 + 96);
  v6 = (_OWORD *)(a2 + 96);
  if (!*(_QWORD *)(a1 + 136))
    goto LABEL_7;
  v7 = *(_QWORD *)(a2 + 136);
  if (!v7)
  {
    outlined destroy of DialogSuppressionConfiguration(a1 + 96);
LABEL_7:
    v13 = *(_OWORD *)(a2 + 112);
    *v5 = *v6;
    *(_OWORD *)(a1 + 112) = v13;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    goto LABEL_11;
  }
  if (!*(_QWORD *)(a1 + 120))
  {
LABEL_9:
    v14 = *(_OWORD *)(a2 + 112);
    *v5 = *v6;
    *(_OWORD *)(a1 + 112) = v14;
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(a2 + 120);
  if (!v8)
  {
    outlined destroy of Text(a1 + 96);
    goto LABEL_9;
  }
  v9 = *(_BYTE *)(a2 + 112);
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 104);
  v12 = *(_BYTE *)(a1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(_QWORD *)(a1 + 120) = v8;
  swift_bridgeObjectRelease();
LABEL_10:
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  *(_QWORD *)(a1 + 136) = v7;
  swift_release();
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
LABEL_11:
  v15 = *(_QWORD *)(a2 + 152);
  if (!*(_QWORD *)(a1 + 152))
  {
LABEL_15:
    v19 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v19;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v20 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v20;
    return a1;
  }
  if (!v15)
  {
    outlined destroy of BoundInputsView(a1 + 152);
    goto LABEL_15;
  }
  v16 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v15;
  *(_QWORD *)(a1 + 160) = v16;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  v17 = *(_QWORD *)(a2 + 184);
  v18 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v17;

  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_release();
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertStorage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 240))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlertStorage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 240) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 240) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata completion function for AlertModifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for AlertModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v5 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  if ((v8 | v6) > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((v10 + ((v9 + ((v6 + 64) & ~v6)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 89 > 0x18)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v14 = v13 + (((v8 | v6) & 0xF8 ^ 0x1F8) & ((v8 | v6) + 16));
    swift_retain();
  }
  else
  {
    v36 = *(_QWORD *)(a3 + 24);
    v38 = ~v8;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v15 = a1 & 0xFFFFFFFFFFFFFFF8;
    v16 = a2 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_QWORD *)(v15 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_BYTE *)(v15 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    v18 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    v19 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
    v35 = v4;
    v37 = v10;
    swift_retain();
    swift_retain();
    outlined copy of Text.Storage(v17, v18, v19);
    *(_QWORD *)(v15 + 32) = v17;
    *(_QWORD *)(v15 + 40) = v18;
    *(_BYTE *)(v15 + 48) = v19;
    *(_QWORD *)(v15 + 56) = *(_QWORD *)(v16 + 56);
    v20 = (v15 + v6 + 64) & ~v6;
    v21 = (v16 + v6 + 64) & ~v6;
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v22(v20, v21, v35);
    v23 = (v20 + v9) & v38;
    v24 = (v21 + v9) & v38;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v23, v24, v36);
    v25 = (v37 + v23) & 0xFFFFFFFFFFFFFFF8;
    v26 = (v37 + v24) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v26 < 0xFFFFFFFFuLL)
    {
      v30 = *(_OWORD *)(v26 + 16);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *(_OWORD *)(v25 + 16) = v30;
      v31 = *(_OWORD *)(v26 + 32);
      v32 = *(_OWORD *)(v26 + 48);
      v33 = *(_OWORD *)(v26 + 64);
      *(_QWORD *)(v25 + 80) = *(_QWORD *)(v26 + 80);
      *(_OWORD *)(v25 + 48) = v32;
      *(_OWORD *)(v25 + 64) = v33;
      *(_OWORD *)(v25 + 32) = v31;
    }
    else
    {
      v27 = *(_QWORD *)(v26 + 8);
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *(_QWORD *)(v25 + 8) = v27;
      *(_DWORD *)(v25 + 16) = *(_DWORD *)(v26 + 16);
      *(_QWORD *)(v25 + 24) = *(_QWORD *)(v26 + 24);
      v28 = *(void **)(v26 + 32);
      *(_QWORD *)(v25 + 32) = v28;
      *(_QWORD *)(v25 + 40) = *(_QWORD *)(v26 + 40);
      *(_DWORD *)(v25 + 48) = *(_DWORD *)(v26 + 48);
      *(_QWORD *)(v25 + 56) = *(_QWORD *)(v26 + 56);
      *(_DWORD *)(v25 + 64) = *(_DWORD *)(v26 + 64);
      *(_DWORD *)(v25 + 68) = *(_DWORD *)(v26 + 68);
      *(_DWORD *)(v25 + 72) = *(_DWORD *)(v26 + 72);
      *(_DWORD *)(v25 + 76) = *(_DWORD *)(v26 + 76);
      *(_QWORD *)(v25 + 80) = *(_QWORD *)(v26 + 80);
      v29 = v28;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    *(_BYTE *)(v25 + 88) = *(_BYTE *)(v26 + 88);
    return a1;
  }
  return v14;
}

uint64_t destroy for AlertModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;

  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  outlined consume of Text.Storage(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_BYTE *)(v3 + 48));
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  result = (*(uint64_t (**)(unint64_t))(v7 + 8))(v8);
  v10 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v10 >= 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t initializeWithCopy for AlertModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v5 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  v9 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v7, v8, v9);
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v8;
  *(_BYTE *)(v5 + 48) = v9;
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v6 + 56);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 64 + v5) & ~v12;
  v14 = (v12 + 64 + v6) & ~v12;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  v15(v13, v14, v10);
  v16 = *(_QWORD *)(v11 + 64);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v16 + v18;
  v20 = (v19 + v13) & ~v18;
  v21 = (v19 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v20, v21);
  v22 = *(_QWORD *)(v17 + 64) + 7;
  v23 = (v22 + v20) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v22 + v21) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v24 < 0xFFFFFFFFuLL)
  {
    v28 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v28;
    v29 = *(_OWORD *)(v24 + 32);
    v30 = *(_OWORD *)(v24 + 48);
    v31 = *(_OWORD *)(v24 + 64);
    *(_QWORD *)(v23 + 80) = *(_QWORD *)(v24 + 80);
    *(_OWORD *)(v23 + 48) = v30;
    *(_OWORD *)(v23 + 64) = v31;
    *(_OWORD *)(v23 + 32) = v29;
  }
  else
  {
    v25 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_QWORD *)(v23 + 8) = v25;
    *(_DWORD *)(v23 + 16) = *(_DWORD *)(v24 + 16);
    *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
    v26 = *(void **)(v24 + 32);
    *(_QWORD *)(v23 + 32) = v26;
    *(_QWORD *)(v23 + 40) = *(_QWORD *)(v24 + 40);
    *(_DWORD *)(v23 + 48) = *(_DWORD *)(v24 + 48);
    *(_QWORD *)(v23 + 56) = *(_QWORD *)(v24 + 56);
    *(_DWORD *)(v23 + 64) = *(_DWORD *)(v24 + 64);
    *(_DWORD *)(v23 + 68) = *(_DWORD *)(v24 + 68);
    *(_DWORD *)(v23 + 72) = *(_DWORD *)(v24 + 72);
    *(_DWORD *)(v23 + 76) = *(_DWORD *)(v24 + 76);
    *(_QWORD *)(v23 + 80) = *(_QWORD *)(v24 + 80);
    v27 = v26;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  *(_BYTE *)(v23 + 88) = *(_BYTE *)(v24 + 88);
  return a1;
}

unint64_t assignWithCopy for AlertModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v6 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(v5 + 24) = *(_BYTE *)(v6 + 24);
  v7 = *(_QWORD *)(v6 + 32);
  v8 = *(_QWORD *)(v6 + 40);
  v9 = *(_BYTE *)(v6 + 48);
  outlined copy of Text.Storage(v7, v8, v9);
  v10 = *(_QWORD *)(v5 + 32);
  v11 = *(_QWORD *)(v5 + 40);
  v12 = *(_BYTE *)(v5 + 48);
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v8;
  *(_BYTE *)(v5 + 48) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v6 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 + 64 + v5) & ~v14;
  v16 = (v14 + 64 + v6) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v15, v16);
  v17 = *(_QWORD *)(v13 + 64);
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = v17 + v19;
  v21 = (v20 + v15) & ~v19;
  v22 = (v20 + v16) & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v18 + 24))(v21, v22);
  v23 = *(_QWORD *)(v18 + 64) + 7;
  v24 = (v23 + v21) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v23 + v22) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_QWORD *)v25;
  if (*(_QWORD *)v24 < 0xFFFFFFFFuLL)
  {
    if (v26 >= 0xFFFFFFFF)
    {
      v31 = *(_QWORD *)(v25 + 8);
      *(_QWORD *)v24 = v26;
      *(_QWORD *)(v24 + 8) = v31;
      *(_DWORD *)(v24 + 16) = *(_DWORD *)(v25 + 16);
      *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
      v32 = *(void **)(v25 + 32);
      *(_QWORD *)(v24 + 32) = v32;
      *(_QWORD *)(v24 + 40) = *(_QWORD *)(v25 + 40);
      *(_DWORD *)(v24 + 48) = *(_DWORD *)(v25 + 48);
      *(_QWORD *)(v24 + 56) = *(_QWORD *)(v25 + 56);
      *(_DWORD *)(v24 + 64) = *(_DWORD *)(v25 + 64);
      *(_DWORD *)(v24 + 68) = *(_DWORD *)(v25 + 68);
      *(_DWORD *)(v24 + 72) = *(_DWORD *)(v25 + 72);
      *(_DWORD *)(v24 + 76) = *(_DWORD *)(v25 + 76);
      *(_QWORD *)(v24 + 80) = *(_QWORD *)(v25 + 80);
      v33 = v32;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    v34 = *(_OWORD *)(v25 + 16);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *(_OWORD *)(v24 + 16) = v34;
    v35 = *(_OWORD *)(v25 + 32);
    v36 = *(_OWORD *)(v25 + 48);
    v37 = *(_OWORD *)(v25 + 64);
    *(_QWORD *)(v24 + 80) = *(_QWORD *)(v25 + 80);
    *(_OWORD *)(v24 + 48) = v36;
    *(_OWORD *)(v24 + 64) = v37;
    *(_OWORD *)(v24 + 32) = v35;
    goto LABEL_8;
  }
  if (v26 < 0xFFFFFFFF)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v27 = *(_QWORD *)(v25 + 8);
  *(_QWORD *)v24 = v26;
  *(_QWORD *)(v24 + 8) = v27;
  *(_DWORD *)(v24 + 16) = *(_DWORD *)(v25 + 16);
  *(_QWORD *)(v24 + 24) = *(_QWORD *)(v25 + 24);
  v28 = *(void **)(v25 + 32);
  v29 = *(void **)(v24 + 32);
  *(_QWORD *)(v24 + 32) = v28;
  v30 = v28;

  *(_QWORD *)(v24 + 40) = *(_QWORD *)(v25 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(v24 + 48) = *(_DWORD *)(v25 + 48);
  *(_QWORD *)(v24 + 56) = *(_QWORD *)(v25 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(v24 + 64) = *(_DWORD *)(v25 + 64);
  *(_DWORD *)(v24 + 68) = *(_DWORD *)(v25 + 68);
  *(_DWORD *)(v24 + 72) = *(_DWORD *)(v25 + 72);
  *(_DWORD *)(v24 + 76) = *(_DWORD *)(v25 + 76);
  *(_QWORD *)(v24 + 80) = *(_QWORD *)(v25 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  *(_BYTE *)(v24 + 88) = *(_BYTE *)(v25 + 88);
  return a1;
}

unint64_t initializeWithTake for AlertModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v5 + 24) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v5 + 8) = v6;
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_OWORD *)(v5 + 48) = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 64 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v11 = (v9 + 64 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_OWORD *)(v19 + 16) = v21;
  v23 = *(_OWORD *)(v20 + 48);
  v22 = *(_OWORD *)(v20 + 64);
  v24 = *(_OWORD *)(v20 + 32);
  *(_QWORD *)(v19 + 80) = *(_QWORD *)(v20 + 80);
  *(_OWORD *)(v19 + 48) = v23;
  *(_OWORD *)(v19 + 64) = v22;
  *(_OWORD *)(v19 + 32) = v24;
  *(_BYTE *)(v19 + 88) = *(_BYTE *)(v20 + 88);
  return a1;
}

unint64_t assignWithTake for AlertModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v6 + 16);
  swift_release();
  *(_BYTE *)(v5 + 24) = *(_BYTE *)(v6 + 24);
  v7 = *(_BYTE *)(v6 + 48);
  v8 = *(_QWORD *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 40);
  v10 = *(_BYTE *)(v5 + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
  *(_BYTE *)(v5 + 48) = v7;
  outlined consume of Text.Storage(v8, v9, v10);
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v6 + 56);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 64 + v5) & ~v12;
  v14 = (v12 + 64 + v6) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v13, v14);
  v15 = *(_QWORD *)(v11 + 64);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v15 + v17;
  v19 = (v18 + v13) & ~v17;
  v20 = (v18 + v14) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v16 + 40))(v19, v20);
  v21 = *(_QWORD *)(v16 + 64) + 7;
  v22 = (v21 + v19) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v21 + v20) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v22 < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)v23 < 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_5:
    v26 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v26;
    v27 = *(_OWORD *)(v23 + 32);
    v28 = *(_OWORD *)(v23 + 48);
    v29 = *(_OWORD *)(v23 + 64);
    *(_QWORD *)(v22 + 80) = *(_QWORD *)(v23 + 80);
    *(_OWORD *)(v22 + 48) = v28;
    *(_OWORD *)(v22 + 64) = v29;
    *(_OWORD *)(v22 + 32) = v27;
    goto LABEL_6;
  }
  v24 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_QWORD *)(v22 + 8) = v24;
  *(_DWORD *)(v22 + 16) = *(_DWORD *)(v23 + 16);
  *(_QWORD *)(v22 + 24) = *(_QWORD *)(v23 + 24);
  v25 = *(void **)(v22 + 32);
  *(_QWORD *)(v22 + 32) = *(_QWORD *)(v23 + 32);

  *(_QWORD *)(v22 + 40) = *(_QWORD *)(v23 + 40);
  swift_release();
  *(_DWORD *)(v22 + 48) = *(_DWORD *)(v23 + 48);
  *(_QWORD *)(v22 + 56) = *(_QWORD *)(v23 + 56);
  swift_release();
  *(_DWORD *)(v22 + 64) = *(_DWORD *)(v23 + 64);
  *(_DWORD *)(v22 + 68) = *(_DWORD *)(v23 + 68);
  *(_DWORD *)(v22 + 72) = *(_DWORD *)(v23 + 72);
  *(_DWORD *)(v22 + 76) = *(_DWORD *)(v23 + 76);
  *(_QWORD *)(v22 + 80) = *(_QWORD *)(v23 + 80);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_BYTE *)(v22 + 88) = *(_BYTE *)(v23 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(unsigned __int8 *)(v5 + 80);
  if (v7 >= a2)
  {
    v16 = a1 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 0x80000000) != 0)
    {
      v18 = (v16 + v8 + 64) & ~v8;
      if (v4 == v7)
        return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 48))(v18, *(unsigned int *)(v3 + 84));
      else
        return (*(uint64_t (**)(uint64_t))(v5 + 48))((v18 + v9 + v10) & ~v10);
    }
    else
    {
      v17 = *(_QWORD *)(v16 + 16);
      if (v17 >= 0xFFFFFFFF)
        LODWORD(v17) = -1;
      return (v17 + 1);
    }
  }
  else
  {
    v11 = ((*(_QWORD *)(v5 + 64) + ((v9 + v10 + ((v8 + 64) & ~v8)) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 89;
    if (v11 < 4)
      v12 = ((a2 - v7 + 255) >> (8 * v11)) + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1876C7454 + 4 * byte_187C50690[v14]))();
  }
}

void storeEnumTagSinglePayload for AlertModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  v9 = ((*(_QWORD *)(v6 + 64)
       + ((*(_QWORD *)(v5 + 64)
         + *(unsigned __int8 *)(v6 + 80)
         + ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 89;
  if (v8 >= a3)
  {
    v12 = 0u;
    if (v8 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (v9 <= 3)
      v10 = ((a3 - v8 + 255) >> (8 * v9)) + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v8 >= a2)
LABEL_20:
      __asm { BR              X6 }
  }
  if (v9 >= 4)
    v13 = ~v8 + a2;
  else
    v13 = (~(_BYTE)v8 + a2);
  bzero(a1, v9);
  if ((_DWORD)v9 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_1876C7670()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1876C76E0);
}

void sub_1876C7678(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1876C7680);
  JUMPOUT(0x1876C76E0);
}

void sub_1876C7698()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876C76E0);
}

void sub_1876C76A0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876C76E0);
}

void sub_1876C76A8(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (v2 < 0)
      JUMPOUT(0x1876C76B4);
    if (a2 < 0)
      JUMPOUT(0x1876C76D4);
    *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 16) = (a2 - 1);
  }
  JUMPOUT(0x1876C76E0);
}

void type metadata accessor for AlertModifier()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **base witness table accessor for ViewModifier in AlertModifier<A, B>()
{
  return &protocol witness table for AlertModifier<A, B>;
}

void AlertModifier.init(presentedValue:isPresented:title:actions:message:auxiliaryContent:representsError:)()
{
  type metadata accessor for AlertModifier();
}

__n128 sub_1876C77DC(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v11 = v1 + a1[17];
  *(_BYTE *)v1 = v8;
  *(_QWORD *)(v1 + 8) = v7;
  *(_QWORD *)(v1 + 16) = v6;
  *(_BYTE *)(v1 + 24) = v5;
  *(_QWORD *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 40) = v13;
  *(_BYTE *)(v1 + 48) = v15 & 1;
  *(_QWORD *)(v1 + 56) = v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v1 + a1[15], v14, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v1 + a1[16], v23, v2);
  *(_OWORD *)v11 = v22;
  *(_OWORD *)(v11 + 16) = v21;
  *(_OWORD *)(v11 + 32) = v20;
  *(_OWORD *)(v11 + 48) = v19;
  result = v18;
  *(__n128 *)(v11 + 64) = v18;
  *(_QWORD *)(v11 + 80) = v17;
  *(_BYTE *)(v1 + a1[18]) = *(_DWORD *)(v9 - 124);
  return result;
}

uint64_t static AlertModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v18;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v18 = *a1;
  v11 = *a2;
  v12 = a2[2];
  v28 = *((_DWORD *)a2 + 2);
  v29 = a2[3];
  v30 = *((_DWORD *)a2 + 9);
  v13 = a2[5];
  v27 = a2[6];
  v20 = *((_DWORD *)a2 + 8);
  v21 = *((_DWORD *)a2 + 15);
  v22 = *((_DWORD *)a2 + 16);
  v23 = *((_DWORD *)a2 + 17);
  v24 = *((_DWORD *)a2 + 18);
  v25 = *((_DWORD *)a2 + 19);
  v26 = *((_DWORD *)a2 + 14);
  v31 = *((_DWORD *)a2 + 20);
  lazy protocol witness table accessor for type IsInVolumetricContext and conformance IsInVolumetricContext();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v34 & 1) == 0)
  {
    lazy protocol witness table accessor for type IsInImmersiveContext and conformance IsInImmersiveContext();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v16 = swift_release();
    v34 = v11;
    LODWORD(v35) = v28;
    v36 = v12;
    v37 = v29;
    v38 = v20;
    v39 = v30;
    v40 = v13;
    v41 = v27;
    v42 = v26;
    v43 = v21;
    v44 = v22;
    v45 = v23;
    v46 = v24;
    v47 = v25;
    v48 = v31;
    a3(&v32, v16, &v34);
    v33 = v18;
    v34 = a5;
    v35 = a6;
    v36 = a7;
    v37 = a8;
    type metadata accessor for AlertModifier();
  }
  MEMORY[0x18D75AC90](0xD000000000000041, 0x8000000187BD5550);
  swift_bridgeObjectRelease();
  swift_release();
  v14 = swift_release();
  v34 = v11;
  LODWORD(v35) = v28;
  v36 = v12;
  v37 = v29;
  v38 = v20;
  v39 = v30;
  v40 = v13;
  v41 = v27;
  v42 = v26;
  v43 = v21;
  v44 = v22;
  v45 = v23;
  v46 = v24;
  v47 = v25;
  v48 = v31;
  return ((uint64_t (*)(uint64_t, uint64_t *))a3)(v14, &v34);
}

void closure #1 in static AlertModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for AlertModifier();
}

uint64_t sub_1876C8314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 60);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

void closure #2 in static AlertModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for AlertModifier();
}

uint64_t sub_1876C83AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 64);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

void implicit closure #1 in static AlertModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for MakeAlertStorage();
}

uint64_t sub_1876C8480(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned int v11;
  _QWORD v12[4];
  _OWORD v13[9];
  char v14;

  v12[2] = a1;
  v12[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeAlertStorage<A, B>, a1);
  outlined retain of MakeAlertStorage<A, B>(v1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v12, a1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  v6 = v13[7];
  *(_OWORD *)(v2 - 96) = v13[6];
  *(_OWORD *)(v2 - 80) = v6;
  *(_OWORD *)(v2 - 64) = v13[8];
  *(_BYTE *)(v2 - 48) = v14;
  v7 = v13[3];
  *(_OWORD *)(v2 - 160) = v13[2];
  *(_OWORD *)(v2 - 144) = v7;
  v8 = v13[5];
  *(_OWORD *)(v2 - 128) = v13[4];
  *(_OWORD *)(v2 - 112) = v8;
  v9 = v13[1];
  *(_OWORD *)(v2 - 192) = v13[0];
  *(_OWORD *)(v2 - 176) = v9;
  outlined release of MakeAlertStorage<A, B>((_QWORD *)(v2 - 192));
  return v11;
}

void MakeAlertStorage.modifier.getter()
{
  type metadata accessor for AlertModifier();
}

uint64_t sub_1876C8594(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AlertModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a4, uint64_t *a5)
{
  return static AlertModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5]);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AlertModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AlertModifier<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

void MakeAlertStorage.resolveTitle()()
{
  type metadata accessor for AlertModifier();
}

void sub_1876C86A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  MEMORY[0x1E0C80A78](a1, a2);
  v8 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v2 + 32) = v8;
  v9 = *(_QWORD *)(v3 + 32);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(v3 + 88);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(v3 + 104);
  *(_OWORD *)((char *)v6 + 120) = *(_OWORD *)(v3 + 120);
  *(_OWORD *)((char *)v6 + 129) = *(_OWORD *)(v3 + 129);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(v3 + 56);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(v3 + 72);
  PropertyList.Tracker.reset()();
  v10 = v4[1];
  v6[10] = *v4;
  v6[11] = v10;
  *(_QWORD *)(v2 + 208) = v9;
  *(_OWORD *)((char *)v6 + 248) = *(_OWORD *)((char *)v4 + 88);
  *(_OWORD *)(v5 + 104) = *(_OWORD *)((char *)v4 + 104);
  *(_OWORD *)(v5 + 120) = *(_OWORD *)((char *)v4 + 120);
  *(_OWORD *)(v5 + 129) = *(_OWORD *)((char *)v4 + 129);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)((char *)v4 + 40);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)((char *)v4 + 56);
  *(_OWORD *)(v5 + 72) = *(_OWORD *)((char *)v4 + 72);
  MakeConfirmationDialog.environment.getter((_QWORD *)(v7 - 112));
  swift_release();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  *(_QWORD *)(v2 + 48) = v9;
  MakeAlertStorage.modifier.getter();
}

uint64_t sub_1876C87A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 40);
  v9 = *(_BYTE *)(v2 + 48);
  outlined copy of Text.Storage(v7, v8, v9);
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  v10(v2, v1);
  v0[22] = v4;
  v0[23] = v3;
  v0[2] = 0;
  v0[3] = 0;
  *(_QWORD *)(v6 - 112) = 0;
  v11 = Text.resolveString(in:with:idiom:)();
  outlined consume of Text.Storage(v7, v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v11;
}

unint64_t MakeAlertStorage.resolveTintColor()()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[5];

  v1 = v0[1];
  v17[2] = *v0;
  v17[3] = v1;
  v2 = *(_OWORD *)((char *)v0 + 88);
  v3 = *(_OWORD *)((char *)v0 + 120);
  v16 = *(_OWORD *)((char *)v0 + 104);
  v17[0] = v3;
  *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)((char *)v0 + 129);
  v4 = *(_OWORD *)((char *)v0 + 56);
  v12 = *(_OWORD *)((char *)v0 + 40);
  v13 = v4;
  v14 = *(_OWORD *)((char *)v0 + 72);
  v15 = v2;
  v10 = *v0;
  MakeConfirmationDialog.environment.getter(v11);
  if (v11[1])
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  swift_release();
  swift_release();
  if (!(_QWORD)v10)
    return 0;
  PropertyList.Tracker.reset()();
  MakeConfirmationDialog.environment.getter(v11);
  swift_release();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  dispatch thunk of AnyColorBox.resolve(in:)();
  v6 = v5;
  v8 = v7;
  swift_release();
  swift_release();
  swift_release();
  return v6 | ((unint64_t)v8 << 32);
}

void MakeAlertStorage.updateValue()()
{
  type metadata accessor for AlertModifier();
}

uint64_t sub_1876C8BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t OutputValue;
  char *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Value;
  char v36;
  char v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t result;
  int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unint64_t Alert;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  char v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;

  *(_QWORD *)(v2 + 192) = a1;
  *(_QWORD *)(v2 + 152) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v133 - v7;
  *(_QWORD *)(v2 + 88) = type metadata accessor for (_:)();
  OutputValue = AGGraphGetOutputValue();
  *(_QWORD *)(v2 + 376) = v4;
  *(_QWORD *)(v2 + 160) = v8;
  if (!OutputValue)
  {
    *(_QWORD *)(v2 + 24) = v3;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 64) = 0;
    *(_QWORD *)(v2 + 72) = 0;
    *(_QWORD *)(v2 + 80) = 0;
    *(_DWORD *)(v2 + 60) = 0;
    *(_QWORD *)(v2 + 168) = 0;
    *(_QWORD *)(v2 + 120) = 0;
    *(_QWORD *)(v2 + 216) = 0;
    *(_QWORD *)(v2 + 136) = 0;
    *(_QWORD *)(v2 + 144) = 1;
    v24 = *(_QWORD *)(v2 + 152);
LABEL_5:
    v25 = *(_QWORD *)(v2 + 200);
    v26 = *(_DWORD *)(v25 + 4);
    *(_DWORD *)(v2 + 320) = *(_DWORD *)v25;
    v27 = *(_DWORD *)(v25 + 8);
    v28 = *(_DWORD *)(v25 + 12);
    *(_DWORD *)(v2 + 368) = *(_DWORD *)(v25 + 16);
    *(_DWORD *)(v2 + 392) = *(_DWORD *)(v25 + 20);
    *(_DWORD *)(v2 + 384) = *(_DWORD *)(v25 + 24);
    *(_DWORD *)(v2 + 360) = *(_DWORD *)(v25 + 28);
    *(_QWORD *)(v2 + 240) = *(_QWORD *)(v25 + 32);
    v29 = *(_QWORD *)(v25 + 48);
    *(_QWORD *)(v2 + 224) = *(_QWORD *)(v25 + 40);
    *(_DWORD *)(v2 + 212) = *(unsigned __int8 *)(v25 + 56);
    *(_DWORD *)(v2 + 424) = *(_DWORD *)(v25 + 57);
    *(_DWORD *)(v2 + 427) = *(_DWORD *)(v25 + 60);
    v30 = *(_QWORD *)(v25 + 64);
    *(_QWORD *)(v2 + 344) = *(_QWORD *)(v25 + 72);
    *(_QWORD *)(v2 + 352) = v30;
    *(_QWORD *)(v2 + 336) = *(_QWORD *)(v25 + 80);
    *(_DWORD *)(v2 + 316) = *(unsigned __int8 *)(v25 + 88);
    *(_DWORD *)(v2 + 332) = *(unsigned __int8 *)(v25 + 89);
    *(_WORD *)(v2 + 420) = *(_WORD *)(v25 + 94);
    *(_DWORD *)(v2 + 416) = *(_DWORD *)(v25 + 90);
    v31 = *(_QWORD *)(v25 + 96);
    *(_QWORD *)(v2 + 296) = *(_QWORD *)(v25 + 104);
    *(_QWORD *)(v2 + 304) = v31;
    v32 = *(_QWORD *)(v25 + 112);
    *(_QWORD *)(v2 + 280) = *(_QWORD *)(v25 + 120);
    *(_QWORD *)(v2 + 288) = v32;
    v33 = *(_QWORD *)(v25 + 128);
    *(_QWORD *)(v2 + 264) = *(_QWORD *)(v25 + 136);
    *(_QWORD *)(v2 + 272) = v33;
    *(_DWORD *)(v2 + 256) = *(unsigned __int8 *)(v25 + 144);
    *(_DWORD *)(v2 + 180) = v26;
    v34 = *(_QWORD *)(v2 + 192);
    Value = AGGraphGetValue();
    v37 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v8, Value, v34);
    if (!v29 || (v37 & 1) != 0)
    {
      *(_DWORD *)(v2 + 448) = *(_DWORD *)(v2 + 320);
      *(_DWORD *)(v2 + 452) = *(_DWORD *)(v2 + 180);
      *(_DWORD *)(v2 + 456) = v27;
      *(_DWORD *)(v2 + 460) = v28;
      *(_DWORD *)(v2 + 464) = *(_DWORD *)(v2 + 368);
      *(_DWORD *)(v2 + 468) = *(_DWORD *)(v2 + 392);
      *(_DWORD *)(v2 + 472) = *(_DWORD *)(v2 + 384);
      *(_DWORD *)(v2 + 476) = *(_DWORD *)(v2 + 360);
      v52 = *(_QWORD *)(v2 + 224);
      *(_QWORD *)(v2 + 480) = *(_QWORD *)(v2 + 240);
      *(_QWORD *)(v2 + 488) = v52;
      *(_QWORD *)(v2 + 496) = v29;
      *(_BYTE *)(v2 + 504) = *(_DWORD *)(v2 + 212);
      *(_DWORD *)(v2 + 505) = *(_DWORD *)(v2 + 424);
      *(_DWORD *)(v2 + 508) = *(_DWORD *)(v2 + 427);
      *(_QWORD *)(v2 + 512) = *(_QWORD *)(v2 + 352);
      *(_QWORD *)(v2 + 520) = *(_QWORD *)(v2 + 344);
      *(_QWORD *)(v2 + 528) = *(_QWORD *)(v2 + 336);
      *(_BYTE *)(v2 + 536) = *(_DWORD *)(v2 + 316);
      *(_BYTE *)(v2 + 537) = *(_DWORD *)(v2 + 332);
      *(_WORD *)(v2 + 542) = *(_WORD *)(v2 + 420);
      *(_DWORD *)(v5 + 90) = *(_DWORD *)(v2 + 416);
      v53 = *(_QWORD *)(v2 + 296);
      *(_QWORD *)(v5 + 96) = *(_QWORD *)(v2 + 304);
      *(_QWORD *)(v5 + 104) = v53;
      v54 = *(_QWORD *)(v2 + 280);
      *(_QWORD *)(v5 + 112) = *(_QWORD *)(v2 + 288);
      *(_QWORD *)(v5 + 120) = v54;
      v55 = *(_QWORD *)(v2 + 264);
      *(_QWORD *)(v5 + 128) = *(_QWORD *)(v2 + 272);
      *(_QWORD *)(v5 + 136) = v55;
      *(_BYTE *)(v2 + 592) = *(_DWORD *)(v2 + 256);
      MakeAlertStorage.resolveTitle()();
    }
    swift_bridgeObjectRetain();
    v38 = *(_QWORD *)(v2 + 224);
    v39 = *(_DWORD *)(v2 + 320);
    *(_QWORD *)(v2 + 216) = v38;
    *(_QWORD *)(v2 + 128) = v29;
    *(_DWORD *)(v2 + 448) = v39;
    v56 = *(_DWORD *)(v2 + 180);
    *(_DWORD *)(v2 + 452) = v56;
    *(_DWORD *)(v2 + 232) = v27;
    *(_DWORD *)(v2 + 456) = v27;
    *(_DWORD *)(v2 + 252) = v28;
    *(_DWORD *)(v2 + 460) = v28;
    *(_DWORD *)(v2 + 464) = *(_DWORD *)(v2 + 368);
    *(_DWORD *)(v2 + 468) = *(_DWORD *)(v2 + 392);
    *(_DWORD *)(v2 + 472) = *(_DWORD *)(v2 + 384);
    *(_DWORD *)(v2 + 476) = *(_DWORD *)(v2 + 360);
    *(_QWORD *)(v2 + 480) = *(_QWORD *)(v2 + 240);
    *(_QWORD *)(v2 + 488) = v38;
    *(_QWORD *)(v2 + 496) = v29;
    v57 = *(_DWORD *)(v2 + 212);
    *(_BYTE *)(v2 + 504) = v57;
    *(_DWORD *)(v2 + 505) = *(_DWORD *)(v2 + 424);
    *(_DWORD *)(v2 + 508) = *(_DWORD *)(v2 + 427);
    *(_QWORD *)(v2 + 512) = *(_QWORD *)(v2 + 352);
    *(_QWORD *)(v2 + 520) = *(_QWORD *)(v2 + 344);
    *(_QWORD *)(v2 + 528) = *(_QWORD *)(v2 + 336);
    *(_BYTE *)(v2 + 536) = *(_DWORD *)(v2 + 316);
    *(_BYTE *)(v2 + 537) = *(_DWORD *)(v2 + 332);
    *(_WORD *)(v2 + 542) = *(_WORD *)(v2 + 420);
    *(_DWORD *)(v5 + 90) = *(_DWORD *)(v2 + 416);
    v58 = *(_QWORD *)(v2 + 296);
    *(_QWORD *)(v5 + 96) = *(_QWORD *)(v2 + 304);
    *(_QWORD *)(v5 + 104) = v58;
    v59 = *(_QWORD *)(v2 + 280);
    *(_QWORD *)(v5 + 112) = *(_QWORD *)(v2 + 288);
    *(_QWORD *)(v5 + 120) = v59;
    v60 = *(_QWORD *)(v2 + 264);
    *(_QWORD *)(v5 + 128) = *(_QWORD *)(v2 + 272);
    *(_QWORD *)(v5 + 136) = v60;
    *(_BYTE *)(v2 + 592) = *(_DWORD *)(v2 + 256);
    MakeConfirmationDialog.environment.getter((_QWORD *)(v6 - 152));
    v61 = *(_QWORD *)(v5 + 160);
    *(_QWORD *)(v2 + 184) = v29;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    if (v61)
    {
      v29 = *(_QWORD *)(v2 + 184);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v62 = *(unsigned __int8 *)(v2 + 407);
    v63 = *(_DWORD *)(v2 + 232);
    v64 = *(_DWORD *)(v2 + 252);
    if (v62 == 2)
    {
      *(_DWORD *)(v2 + 448) = *(_DWORD *)(v2 + 320);
      *(_DWORD *)(v2 + 452) = v56;
      *(_DWORD *)(v2 + 456) = v63;
      *(_DWORD *)(v2 + 460) = v64;
      *(_DWORD *)(v2 + 464) = *(_DWORD *)(v2 + 368);
      *(_DWORD *)(v2 + 468) = *(_DWORD *)(v2 + 392);
      *(_DWORD *)(v2 + 472) = *(_DWORD *)(v2 + 384);
      *(_DWORD *)(v2 + 476) = *(_DWORD *)(v2 + 360);
      v65 = *(_QWORD *)(v2 + 224);
      *(_QWORD *)(v2 + 480) = *(_QWORD *)(v2 + 240);
      *(_QWORD *)(v2 + 488) = v65;
      *(_QWORD *)(v2 + 496) = v29;
      *(_BYTE *)(v2 + 504) = v57;
      *(_DWORD *)(v2 + 505) = *(_DWORD *)(v2 + 424);
      *(_DWORD *)(v2 + 508) = *(_DWORD *)(v2 + 427);
      *(_QWORD *)(v2 + 512) = *(_QWORD *)(v2 + 352);
      *(_QWORD *)(v2 + 520) = *(_QWORD *)(v2 + 344);
      *(_QWORD *)(v2 + 528) = *(_QWORD *)(v2 + 336);
      *(_BYTE *)(v2 + 536) = *(_DWORD *)(v2 + 316);
      *(_BYTE *)(v2 + 537) = *(_DWORD *)(v2 + 332);
      *(_WORD *)(v2 + 542) = *(_WORD *)(v2 + 420);
      *(_DWORD *)(v5 + 90) = *(_DWORD *)(v2 + 416);
      v66 = *(_QWORD *)(v2 + 296);
      *(_QWORD *)(v5 + 96) = *(_QWORD *)(v2 + 304);
      *(_QWORD *)(v5 + 104) = v66;
      v67 = *(_QWORD *)(v2 + 280);
      *(_QWORD *)(v5 + 112) = *(_QWORD *)(v2 + 288);
      *(_QWORD *)(v5 + 120) = v67;
      v68 = *(_QWORD *)(v2 + 264);
      *(_QWORD *)(v5 + 128) = *(_QWORD *)(v2 + 272);
      *(_QWORD *)(v5 + 136) = v68;
      *(_BYTE *)(v2 + 592) = *(_DWORD *)(v2 + 256);
      MakeConfirmationDialog.environment.getter((_QWORD *)(v2 + 432));
      v69 = *(_QWORD *)(v2 + 440);
      *(_QWORD *)(v2 + 448) = *(_QWORD *)(v2 + 432);
      *(_QWORD *)(v2 + 456) = v69;
      EnvironmentValues.explicitPreferredColorScheme.getter();
      swift_release();
      swift_release();
      v62 = *(unsigned __int8 *)(v2 + 408);
    }
    *(_DWORD *)(v2 + 20) = v62;
    *(_DWORD *)(v2 + 448) = *(_DWORD *)(v2 + 320);
    *(_DWORD *)(v2 + 452) = v56;
    *(_DWORD *)(v2 + 456) = v63;
    *(_DWORD *)(v2 + 460) = v64;
    *(_DWORD *)(v2 + 464) = *(_DWORD *)(v2 + 368);
    *(_DWORD *)(v2 + 468) = *(_DWORD *)(v2 + 392);
    *(_DWORD *)(v2 + 472) = *(_DWORD *)(v2 + 384);
    *(_DWORD *)(v2 + 476) = *(_DWORD *)(v2 + 360);
    v70 = *(_QWORD *)(v2 + 224);
    *(_QWORD *)(v2 + 480) = *(_QWORD *)(v2 + 240);
    *(_QWORD *)(v2 + 488) = v70;
    *(_QWORD *)(v2 + 496) = v29;
    *(_BYTE *)(v2 + 504) = v57;
    *(_DWORD *)(v2 + 505) = *(_DWORD *)(v2 + 424);
    *(_DWORD *)(v2 + 508) = *(_DWORD *)(v2 + 427);
    *(_QWORD *)(v2 + 512) = *(_QWORD *)(v2 + 352);
    *(_QWORD *)(v2 + 520) = *(_QWORD *)(v2 + 344);
    *(_QWORD *)(v2 + 528) = *(_QWORD *)(v2 + 336);
    v71 = *(_DWORD *)(v2 + 316);
    *(_BYTE *)(v2 + 536) = v71;
    *(_BYTE *)(v2 + 537) = *(_DWORD *)(v2 + 332);
    *(_WORD *)(v2 + 542) = *(_WORD *)(v2 + 420);
    *(_DWORD *)(v5 + 90) = *(_DWORD *)(v2 + 416);
    v72 = *(_QWORD *)(v2 + 296);
    *(_QWORD *)(v5 + 96) = *(_QWORD *)(v2 + 304);
    *(_QWORD *)(v5 + 104) = v72;
    v73 = *(_QWORD *)(v2 + 280);
    *(_QWORD *)(v5 + 112) = *(_QWORD *)(v2 + 288);
    *(_QWORD *)(v5 + 120) = v73;
    v74 = *(_QWORD *)(v2 + 264);
    *(_QWORD *)(v5 + 128) = *(_QWORD *)(v2 + 272);
    *(_QWORD *)(v5 + 136) = v74;
    *(_BYTE *)(v2 + 592) = *(_DWORD *)(v2 + 256);
    MakeConfirmationDialog.environment.getter((_QWORD *)(v6 - 152));
    if (*(_QWORD *)(v5 + 160))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v75 = *(_QWORD *)(v2 + 144);
    v76 = *(_DWORD *)(v2 + 232);
    v77 = *(_DWORD *)(v2 + 384);
    *(_QWORD *)(v2 + 8) = *(_QWORD *)(v2 + 448);
    if ((_DWORD)v75)
    {
      *(_DWORD *)(v2 + 448) = *(_DWORD *)(v2 + 320);
      *(_DWORD *)(v2 + 452) = v56;
      *(_DWORD *)(v2 + 456) = v76;
      *(_DWORD *)(v2 + 460) = *(_DWORD *)(v2 + 252);
      *(_DWORD *)(v2 + 464) = *(_DWORD *)(v2 + 368);
      *(_DWORD *)(v2 + 468) = *(_DWORD *)(v2 + 392);
      *(_DWORD *)(v2 + 472) = v77;
      *(_DWORD *)(v2 + 476) = *(_DWORD *)(v2 + 360);
      v78 = *(_QWORD *)(v2 + 224);
      *(_QWORD *)(v2 + 480) = *(_QWORD *)(v2 + 240);
      *(_QWORD *)(v2 + 488) = v78;
      *(_QWORD *)(v2 + 496) = *(_QWORD *)(v2 + 184);
      *(_BYTE *)(v2 + 504) = *(_DWORD *)(v2 + 212);
      *(_DWORD *)(v2 + 505) = *(_DWORD *)(v2 + 424);
      *(_DWORD *)(v2 + 508) = *(_DWORD *)(v2 + 427);
      *(_QWORD *)(v2 + 512) = *(_QWORD *)(v2 + 352);
      *(_QWORD *)(v2 + 520) = *(_QWORD *)(v2 + 344);
      *(_QWORD *)(v2 + 528) = *(_QWORD *)(v2 + 336);
      *(_BYTE *)(v2 + 536) = *(_DWORD *)(v2 + 316);
      *(_BYTE *)(v2 + 537) = *(_DWORD *)(v2 + 332);
      v79 = v2 + 448;
      *(_DWORD *)(v2 + 538) = *(_DWORD *)(v2 + 416);
      *(_WORD *)(v2 + 542) = *(_WORD *)(v2 + 420);
      v80 = *(_QWORD *)(v2 + 296);
      v81 = *(_QWORD *)(v2 + 304);
      *(_QWORD *)(v2 + 544) = v81;
      *(_QWORD *)(v2 + 552) = v80;
      v83 = *(_QWORD *)(v2 + 280);
      v82 = *(_QWORD *)(v2 + 288);
      *(_QWORD *)(v2 + 560) = v82;
      *(_QWORD *)(v2 + 568) = v83;
      v85 = *(_QWORD *)(v2 + 264);
      v84 = *(_QWORD *)(v2 + 272);
      *(_QWORD *)(v2 + 576) = v84;
      *(_QWORD *)(v2 + 584) = v85;
      v86 = *(_DWORD *)(v2 + 256);
      *(_BYTE *)(v2 + 592) = v86;
      Alert = MakeAlertStorage.resolveTintColor()();
      v88 = *(_DWORD *)(v2 + 360);
      v89 = *(_DWORD *)(v2 + 212);
      v90 = *(_QWORD *)(v2 + 184);
      v91 = *(_DWORD *)(v2 + 320);
      v92 = *(_DWORD *)(v2 + 368);
      v93 = *(_DWORD *)(v2 + 392);
      v94 = v84;
      v95 = v82;
      v96 = *(_QWORD *)(v2 + 240);
      v97 = v80;
      v76 = *(_DWORD *)(v2 + 232);
      v98 = v81;
      v99 = *(_DWORD *)(v2 + 332);
      v101 = *(_QWORD *)(v2 + 336);
      v100 = *(_QWORD *)(v2 + 344);
      v71 = *(_DWORD *)(v2 + 316);
      v102 = *(_QWORD *)(v2 + 352);
      *(_QWORD *)(v2 + 136) = Alert;
      v103 = v85;
      v56 = *(_DWORD *)(v2 + 180);
      *(_QWORD *)(v2 + 168) = v104;
      LOBYTE(v104) = v86;
      v105 = *(_QWORD *)(v2 + 224);
      v107 = v106 & 1;
      v77 = *(_DWORD *)(v2 + 384);
      *(_DWORD *)(v2 + 144) = v107;
      v108 = *(_DWORD *)(v2 + 252);
    }
    else
    {
      *(_DWORD *)(v2 + 144) = 0;
      v108 = *(_DWORD *)(v2 + 252);
      LODWORD(v104) = *(_DWORD *)(v2 + 256);
      v93 = *(_DWORD *)(v2 + 392);
      v92 = *(_DWORD *)(v2 + 368);
      v79 = v2 + 448;
      v91 = *(_DWORD *)(v2 + 320);
      v88 = *(_DWORD *)(v2 + 360);
      v90 = *(_QWORD *)(v2 + 184);
      v96 = *(_QWORD *)(v2 + 240);
      v105 = *(_QWORD *)(v2 + 224);
      v89 = *(_DWORD *)(v2 + 212);
      v100 = *(_QWORD *)(v2 + 344);
      v102 = *(_QWORD *)(v2 + 352);
      v101 = *(_QWORD *)(v2 + 336);
      v99 = *(_DWORD *)(v2 + 332);
      v97 = *(_QWORD *)(v2 + 296);
      v98 = *(_QWORD *)(v2 + 304);
      v83 = *(_QWORD *)(v2 + 280);
      v95 = *(_QWORD *)(v2 + 288);
      v103 = *(_QWORD *)(v2 + 264);
      v94 = *(_QWORD *)(v2 + 272);
    }
    *(_DWORD *)(v2 + 448) = v91;
    *(_DWORD *)(v2 + 452) = v56;
    *(_DWORD *)(v2 + 456) = v76;
    *(_DWORD *)(v2 + 460) = v108;
    *(_DWORD *)(v2 + 464) = v92;
    *(_DWORD *)(v2 + 468) = v93;
    *(_DWORD *)(v2 + 472) = v77;
    *(_DWORD *)(v2 + 476) = v88;
    *(_QWORD *)(v2 + 480) = v96;
    *(_QWORD *)(v2 + 488) = v105;
    *(_QWORD *)(v2 + 496) = v90;
    *(_BYTE *)(v2 + 504) = v89;
    *(_DWORD *)(v2 + 505) = *(_DWORD *)(v2 + 424);
    *(_DWORD *)(v2 + 508) = *(_DWORD *)(v2 + 427);
    *(_QWORD *)(v2 + 512) = v102;
    *(_QWORD *)(v2 + 520) = v100;
    *(_QWORD *)(v2 + 528) = v101;
    *(_BYTE *)(v2 + 536) = v71;
    *(_BYTE *)(v2 + 537) = v99;
    *(_WORD *)(v2 + 542) = *(_WORD *)(v2 + 420);
    *(_DWORD *)(v79 + 90) = *(_DWORD *)(v2 + 416);
    *(_QWORD *)(v79 + 96) = v98;
    *(_QWORD *)(v79 + 104) = v97;
    *(_QWORD *)(v79 + 112) = v95;
    *(_QWORD *)(v79 + 120) = v83;
    *(_QWORD *)(v79 + 128) = v94;
    *(_QWORD *)(v79 + 136) = v103;
    *(_BYTE *)(v2 + 592) = v104;
    MakeConfirmationDialog.environment.getter((_QWORD *)(v6 - 152));
    v109 = v96;
    if (*(_QWORD *)(v79 + 160))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
      v76 = *(_DWORD *)(v2 + 232);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v110 = *(unsigned __int8 *)(v2 + 448);
    *(_DWORD *)(v2 + 448) = *(_DWORD *)(v2 + 320);
    *(_DWORD *)(v2 + 452) = *(_DWORD *)(v2 + 180);
    *(_DWORD *)(v2 + 456) = v76;
    *(_DWORD *)(v2 + 460) = *(_DWORD *)(v2 + 252);
    *(_DWORD *)(v2 + 464) = *(_DWORD *)(v2 + 368);
    *(_DWORD *)(v2 + 468) = *(_DWORD *)(v2 + 392);
    *(_DWORD *)(v2 + 472) = *(_DWORD *)(v2 + 384);
    *(_DWORD *)(v2 + 476) = *(_DWORD *)(v2 + 360);
    *(_QWORD *)(v2 + 480) = v109;
    *(_QWORD *)(v2 + 488) = v105;
    *(_QWORD *)(v2 + 496) = *(_QWORD *)(v2 + 184);
    *(_BYTE *)(v2 + 504) = *(_DWORD *)(v2 + 212);
    *(_DWORD *)(v2 + 505) = *(_DWORD *)(v2 + 424);
    *(_DWORD *)(v2 + 508) = *(_DWORD *)(v2 + 427);
    *(_QWORD *)(v2 + 512) = *(_QWORD *)(v2 + 352);
    *(_QWORD *)(v2 + 520) = *(_QWORD *)(v2 + 344);
    *(_QWORD *)(v2 + 528) = *(_QWORD *)(v2 + 336);
    *(_BYTE *)(v2 + 536) = *(_DWORD *)(v2 + 316);
    *(_BYTE *)(v2 + 537) = *(_DWORD *)(v2 + 332);
    *(_WORD *)(v2 + 542) = *(_WORD *)(v2 + 420);
    *(_DWORD *)(v2 + 538) = *(_DWORD *)(v2 + 416);
    v111 = *(_QWORD *)(v2 + 296);
    *(_QWORD *)(v2 + 544) = *(_QWORD *)(v2 + 304);
    *(_QWORD *)(v2 + 552) = v111;
    v112 = *(_QWORD *)(v2 + 280);
    *(_QWORD *)(v2 + 560) = *(_QWORD *)(v2 + 288);
    *(_QWORD *)(v2 + 568) = v112;
    v113 = *(_QWORD *)(v2 + 264);
    *(_QWORD *)(v2 + 576) = *(_QWORD *)(v2 + 272);
    *(_QWORD *)(v2 + 584) = v113;
    *(_BYTE *)(v2 + 592) = *(_DWORD *)(v2 + 256);
    MakeConfirmationDialog.environment.getter((_QWORD *)(v2 + 432));
    v114 = *(_QWORD *)(v2 + 440);
    *(_DWORD *)(v2 + 240) = v110;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
    swift_retain_n();
    if (v114)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    v115 = *(_QWORD *)(v2 + 192);
    swift_release_n();
    outlined init with take of SwipeActions.Value?(v2 + 448, v6 - 152, (uint64_t)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    v116 = *(char **)(v2 + 160);
    outlined init with take of SwipeActions.Value?((uint64_t)&v116[*(int *)(v115 + 68)], v2 + 448, (uint64_t)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    v117 = *(_DWORD *)AGGraphGetValue() >> 1;
    v118 = *(_DWORD *)(v2 + 392);
    if (v117 != *(_DWORD *)(v2 + 384) || !v118)
    {
      v118 = static ViewIdentity.nextSeed;
      if ((static ViewIdentity.nextSeed + 1) > 1)
        v119 = static ViewIdentity.nextSeed + 1;
      else
        v119 = 1;
      static ViewIdentity.nextSeed = v119;
      v120 = *(_QWORD *)(v2 + 200);
      *(_DWORD *)(v120 + 20) = v118;
      *(_DWORD *)(v120 + 24) = v117;
    }
    v121 = *v116;
    v123 = *((_QWORD *)v116 + 1);
    v122 = *((_QWORD *)v116 + 2);
    v124 = v116[24];
    v125 = v116[*(int *)(v115 + 72)];
    v126 = swift_allocObject();
    *(_DWORD *)(v126 + 16) = v118;
    *(_BYTE *)(v126 + 20) = v121;
    *(_QWORD *)(v126 + 24) = v123;
    *(_QWORD *)(v126 + 32) = v122;
    *(_BYTE *)(v126 + 40) = v124;
    v127 = *(_DWORD *)(v2 + 252);
    *(_DWORD *)(v126 + 44) = *(_DWORD *)(v2 + 232);
    *(_DWORD *)(v126 + 48) = v127;
    v128 = *(_QWORD *)(v2 + 128);
    *(_QWORD *)(v126 + 56) = *(_QWORD *)(v2 + 216);
    *(_QWORD *)(v126 + 64) = v128;
    *(_BYTE *)(v126 + 72) = v125;
    v129 = *(_DWORD *)(v2 + 20);
    *(_BYTE *)(v126 + 73) = v129;
    v130 = *(_QWORD *)(v2 + 8);
    v131 = *(_QWORD *)(v2 + 136);
    *(_QWORD *)(v126 + 80) = v130;
    *(_QWORD *)(v126 + 88) = v131;
    *(_QWORD *)(v126 + 96) = *(_QWORD *)(v2 + 168);
    *(_BYTE *)(v126 + 104) = *(_DWORD *)(v2 + 144);
    v132 = *(_DWORD *)(v2 + 240);
    *(_BYTE *)(v126 + 105) = v132;
    outlined init with take of SwipeActions.Value?(v6 - 152, v126 + 112, (uint64_t)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    outlined init with take of SwipeActions.Value?(v2 + 448, v126 + 168, (uint64_t)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    *(_QWORD *)(v2 + 432) = partial apply for closure #2 in MakeAlertStorage.updateValue();
    *(_QWORD *)(v2 + 440) = v126;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined retain of DialogSuppressionConfiguration?(v6 - 152, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of DialogSuppressionConfiguration?);
    outlined retain of BoundInputsView?(v2 + 448);
    AGGraphSetOutputValue();
    swift_release();
    $defer #1 <A, B>() in MakeAlertStorage.updateValue()(*(_QWORD *)(v2 + 200), *(_QWORD *)(v2 + 216), v128, v129, v130, v131, *(_QWORD *)(v2 + 168), *(_DWORD *)(v2 + 144), v132);
    outlined consume of DialogSuppressionConfiguration?(*(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 80));
    swift_release();
    swift_release();
    outlined retain of DialogSuppressionConfiguration?(v6 - 152, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of DialogSuppressionConfiguration?);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 152) + 8))(*(_QWORD *)(v2 + 160), *(_QWORD *)(v2 + 192));
  }
  v10 = v8;
  v11 = *(int **)(v2 + 200);
  v12 = *v11;
  *(_DWORD *)(v2 + 296) = v11[1];
  *(_DWORD *)(v2 + 352) = v11[2];
  *(_DWORD *)(v2 + 252) = v11[3];
  *(_DWORD *)(v2 + 344) = v11[4];
  *(_DWORD *)(v2 + 336) = v11[5];
  *(_DWORD *)(v2 + 332) = v11[6];
  *(_QWORD *)(v2 + 320) = *((_QWORD *)v11 + 4);
  v13 = *((_QWORD *)v11 + 5);
  v14 = *((_QWORD *)v11 + 6);
  *(_DWORD *)(v2 + 316) = *((unsigned __int8 *)v11 + 56);
  v15 = *((_QWORD *)v11 + 9);
  *(_QWORD *)(v2 + 280) = *((_QWORD *)v11 + 8);
  v16 = *((_QWORD *)v11 + 10);
  *(_QWORD *)(v2 + 384) = v13;
  *(_QWORD *)(v2 + 392) = v16;
  v17 = *((unsigned __int8 *)v11 + 88);
  v18 = *((unsigned __int8 *)v11 + 89);
  v19 = *((_QWORD *)v11 + 13);
  v20 = *((_QWORD *)v11 + 14);
  *(_QWORD *)(v2 + 264) = *((_QWORD *)v11 + 12);
  *(_QWORD *)(v2 + 272) = v19;
  *(_QWORD *)(v2 + 288) = *((_QWORD *)v11 + 15);
  v21 = *((_QWORD *)v11 + 17);
  *(_QWORD *)(v2 + 360) = *((_QWORD *)v11 + 16);
  *(_QWORD *)(v2 + 368) = v14;
  *(_DWORD *)(v2 + 304) = *((unsigned __int8 *)v11 + 144);
  *(_DWORD *)(v2 + 448) = v12;
  v22 = AGGraphAnyInputsChanged();
  v23 = *(_DWORD *)(v2 + 448);
  *v11 = v23;
  if ((v22 & 1) != 0)
  {
    *(_QWORD *)(v2 + 136) = 0;
    *(_QWORD *)(v2 + 144) = 1;
    *(_QWORD *)(v2 + 24) = v3;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 64) = 0;
    *(_QWORD *)(v2 + 72) = 0;
    *(_QWORD *)(v2 + 80) = 0;
    *(_DWORD *)(v2 + 60) = 0;
    *(_QWORD *)(v2 + 168) = 0;
    *(_QWORD *)(v2 + 120) = 0;
    *(_QWORD *)(v2 + 216) = 0;
    v24 = *(_QWORD *)(v2 + 152);
    v5 = v2 + 448;
    v8 = v10;
    goto LABEL_5;
  }
  *(_DWORD *)(v2 + 180) = v17;
  *(_BYTE *)(v2 + 408) = v17 & 1;
  *(_DWORD *)(v2 + 448) = v23;
  *(_DWORD *)(v2 + 452) = *(_DWORD *)(v2 + 296);
  *(_DWORD *)(v2 + 456) = *(_DWORD *)(v2 + 352);
  v40 = *(_DWORD *)(v2 + 252);
  *(_DWORD *)(v2 + 460) = v40;
  *(_DWORD *)(v2 + 464) = *(_DWORD *)(v2 + 344);
  *(_DWORD *)(v2 + 468) = *(_DWORD *)(v2 + 336);
  *(_DWORD *)(v2 + 472) = *(_DWORD *)(v2 + 332);
  v41 = *(_QWORD *)(v2 + 384);
  *(_QWORD *)(v2 + 480) = *(_QWORD *)(v2 + 320);
  *(_QWORD *)(v2 + 488) = v41;
  *(_QWORD *)(v2 + 496) = *(_QWORD *)(v2 + 368);
  *(_BYTE *)(v2 + 504) = *(_DWORD *)(v2 + 316);
  *(_QWORD *)(v2 + 512) = *(_QWORD *)(v2 + 280);
  *(_QWORD *)(v2 + 520) = v15;
  *(_QWORD *)(v2 + 528) = *(_QWORD *)(v2 + 392);
  *(_DWORD *)(v2 + 184) = v17 & 1;
  *(_BYTE *)(v2 + 536) = v17 & 1;
  *(_BYTE *)(v2 + 537) = v18;
  v42 = *(_QWORD *)(v2 + 272);
  *(_QWORD *)(v2 + 544) = *(_QWORD *)(v2 + 264);
  *(_QWORD *)(v2 + 552) = v42;
  *(_QWORD *)(v2 + 232) = v20;
  v43 = *(_QWORD *)(v2 + 288);
  *(_QWORD *)(v2 + 560) = v20;
  *(_QWORD *)(v2 + 568) = v43;
  *(_QWORD *)(v2 + 576) = *(_QWORD *)(v2 + 360);
  *(_QWORD *)(v2 + 584) = v21;
  *(_BYTE *)(v2 + 592) = *(_DWORD *)(v2 + 304);
  *(_DWORD *)(v2 + 240) = v23;
  *(_QWORD *)(v2 + 256) = v15;
  MakeConfirmationDialog.environment.getter((_QWORD *)(v6 - 152));
  swift_release();
  v44 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
  result = swift_release();
  v46 = *(_DWORD *)(v2 + 296);
  if ((v44 & 1) != 0)
  {
    *(_QWORD *)(v2 + 24) = v3;
    *(_DWORD *)(v2 + 448) = *(_DWORD *)(v2 + 240);
    *(_DWORD *)(v2 + 452) = v46;
    *(_DWORD *)(v2 + 456) = *(_DWORD *)(v2 + 352);
    *(_DWORD *)(v2 + 460) = v40;
    *(_DWORD *)(v2 + 464) = *(_DWORD *)(v2 + 344);
    *(_DWORD *)(v2 + 468) = *(_DWORD *)(v2 + 336);
    *(_DWORD *)(v2 + 472) = *(_DWORD *)(v2 + 332);
    v47 = *(_QWORD *)(v2 + 320);
    v48 = v18;
    *(_DWORD *)(v2 + 212) = v18;
    v49 = *(_QWORD *)(v2 + 384);
    *(_QWORD *)(v2 + 480) = v47;
    *(_QWORD *)(v2 + 488) = v49;
    *(_QWORD *)(v2 + 496) = *(_QWORD *)(v2 + 368);
    *(_BYTE *)(v2 + 504) = *(_DWORD *)(v2 + 316);
    *(_QWORD *)(v2 + 224) = v21;
    v50 = *(_QWORD *)(v2 + 272);
    *(_QWORD *)(v2 + 512) = *(_QWORD *)(v2 + 280);
    *(_QWORD *)(v2 + 520) = *(_QWORD *)(v2 + 256);
    *(_QWORD *)(v2 + 528) = *(_QWORD *)(v2 + 392);
    *(_BYTE *)(v2 + 536) = *(_DWORD *)(v2 + 184);
    *(_BYTE *)(v2 + 537) = v48;
    *(_QWORD *)(v2 + 544) = *(_QWORD *)(v2 + 264);
    *(_QWORD *)(v2 + 552) = v50;
    v51 = *(_QWORD *)(v2 + 288);
    *(_QWORD *)(v2 + 560) = *(_QWORD *)(v2 + 232);
    *(_QWORD *)(v2 + 568) = v51;
    *(_QWORD *)(v2 + 576) = *(_QWORD *)(v2 + 360);
    *(_QWORD *)(v2 + 584) = v21;
    *(_BYTE *)(v2 + 592) = *(_DWORD *)(v2 + 304);
    MakeAlertStorage.resolveTitle()();
  }
  return result;
}

uint64_t $defer #1 <A, B>() in MakeAlertStorage.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  uint64_t result;

  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 64) = a5;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a1 + 72) = a6;
  *(_QWORD *)(a1 + 80) = a7;
  *(_BYTE *)(a1 + 88) = a8 & 1;
  *(_BYTE *)(a1 + 89) = a9;
  return result;
}

_QWORD *closure #2 in MakeAlertStorage.updateValue()(uint64_t a1, Swift::UInt32 a2, char a3, uint64_t a4, uint64_t a5, char a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, __int128 a12, uint64_t a13, __int16 a14, uint64_t a15, uint64_t a16)
{
  char v21;
  char isUniquelyReferenced_nonNull_native;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[3];
  _OWORD v51[6];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[15];
  _QWORD v68[6];
  char v69;
  _QWORD v70[11];
  _OWORD v71[16];

  outlined init with take of SwipeActions.Value?(a16, (uint64_t)v70, (uint64_t)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v41 = v70[1];
  v42 = v70[0];
  v39 = v70[3];
  v40 = v70[2];
  v37 = v70[5];
  v38 = v70[4];
  v35 = v70[7];
  v36 = v70[6];
  v33 = v70[9];
  v34 = v70[8];
  v32 = v70[10];
  outlined init with take of SwipeActions.Value?(a15, (uint64_t)v68, (uint64_t)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v30 = v68[1];
  v31 = v68[0];
  v28 = v68[3];
  v29 = v68[2];
  v26 = v68[5];
  v27 = v68[4];
  v25 = v69;
  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v21 & 1) != 0)
      MEMORY[0x18D75AC90](0xD00000000000007DLL, 0x8000000187BE6A90);
  }
  LOBYTE(v45) = a3 & 1;
  *((_QWORD *)&v45 + 1) = a4;
  *(_QWORD *)&v46 = a5;
  BYTE8(v46) = a6 & 1;
  HIDWORD(v46) = a7;
  LODWORD(v47) = a8;
  *((_QWORD *)&v47 + 1) = a9;
  *(_QWORD *)&v48 = a10;
  WORD4(v48) = a11 & 0xFF01;
  *(_QWORD *)&v49 = a13;
  WORD4(v49) = a14 & 0xFF01;
  outlined init with take of SwipeActions.Value?(a15, (uint64_t)v50, (uint64_t)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined init with take of SwipeActions.Value?(a16, (uint64_t)v51 + 8, (uint64_t)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  LOBYTE(v52) = a3 & 1;
  BYTE8(v53) = a6 & 1;
  HIDWORD(v53) = a7;
  LODWORD(v54) = a8;
  *((_QWORD *)&v54 + 1) = a9;
  WORD4(v55) = a11 & 0xFF01;
  *(_QWORD *)&v57 = a13;
  WORD4(v57) = a14 & 0xFF01;
  *(_QWORD *)&v58 = v31;
  *((_QWORD *)&v58 + 1) = v30;
  *(_QWORD *)&v59 = v29;
  *((_QWORD *)&v59 + 1) = v28;
  *(_QWORD *)&v60 = v27;
  *((_QWORD *)&v60 + 1) = v26;
  LOBYTE(v61) = v25;
  *((_QWORD *)&v61 + 1) = v42;
  *(_QWORD *)&v62 = v41;
  *((_QWORD *)&v62 + 1) = v40;
  *(_QWORD *)&v63 = v39;
  *((_QWORD *)&v63 + 1) = v38;
  *(_QWORD *)&v64 = v37;
  *((_QWORD *)&v64 + 1) = v36;
  *(_QWORD *)&v65 = v35;
  *((_QWORD *)&v65 + 1) = v34;
  *(_QWORD *)&v66 = v33;
  *((_QWORD *)&v66 + 1) = v32;
  v56 = a12;
  *((_QWORD *)&v52 + 1) = a4;
  *(_QWORD *)&v53 = a5;
  *(_QWORD *)&v55 = a10;
  v71[9] = v61;
  v71[8] = v60;
  v71[1] = v53;
  v71[0] = v52;
  v71[7] = v59;
  v71[6] = v58;
  v71[5] = v57;
  v71[4] = a12;
  v71[2] = v54;
  v71[3] = v55;
  v71[14] = v66;
  v71[13] = v65;
  v71[12] = v64;
  v71[10] = v62;
  v71[11] = v63;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of DialogSuppressionConfiguration?(a15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of DialogSuppressionConfiguration?);
  outlined retain of BoundInputsView?(a16);
  outlined retain of AlertStorage(&v52);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v67[0] = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v71, a2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)a1 = *(_QWORD *)&v67[0];
  swift_bridgeObjectRelease();
  v67[12] = v51[3];
  v67[13] = v51[4];
  v67[14] = v51[5];
  v67[8] = v50[2];
  v67[9] = v51[0];
  v67[10] = v51[1];
  v67[11] = v51[2];
  v67[4] = a12;
  v67[5] = v49;
  v67[6] = v50[0];
  v67[7] = v50[1];
  v67[0] = v45;
  v67[1] = v46;
  v67[2] = v47;
  v67[3] = v48;
  return outlined release of AlertStorage(v67);
}

_QWORD *specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[15];

  v2 = *a1;
  v3 = *(_OWORD *)(a1 + 46);
  v4 = *(_OWORD *)(a1 + 54);
  v11[12] = *(_OWORD *)(a1 + 50);
  v11[13] = v4;
  v11[14] = *(_OWORD *)(a1 + 58);
  v5 = *(_OWORD *)(a1 + 30);
  v6 = *(_OWORD *)(a1 + 38);
  v11[8] = *(_OWORD *)(a1 + 34);
  v11[9] = v6;
  v11[10] = *(_OWORD *)(a1 + 42);
  v11[11] = v3;
  v7 = *(_OWORD *)(a1 + 14);
  v8 = *(_OWORD *)(a1 + 22);
  v11[4] = *(_OWORD *)(a1 + 18);
  v11[5] = v8;
  v11[6] = *(_OWORD *)(a1 + 26);
  v11[7] = v5;
  v9 = *(_OWORD *)(a1 + 6);
  v11[0] = *(_OWORD *)(a1 + 2);
  v11[1] = v9;
  v11[2] = *(_OWORD *)(a1 + 10);
  v11[3] = v7;
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a1 + 46);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 50);
  *(_OWORD *)(a2 + 216) = *(_OWORD *)(a1 + 54);
  *(_OWORD *)(a2 + 232) = *(_OWORD *)(a1 + 58);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 30);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 34);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 38);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 42);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 14);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 18);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 22);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 26);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 2);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 6);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 10);
  *(_DWORD *)a2 = v2;
  return outlined retain of AlertStorage(v11);
}

void partial apply for implicit closure #1 in static AlertModifier._makeView(modifier:inputs:body:)()
{
  implicit closure #1 in static AlertModifier._makeView(modifier:inputs:body:)();
}

_QWORD *outlined release of MakeAlertStorage<A, B>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[12];
  v3 = a1[13];
  v4 = a1[14];
  v5 = a1[15];
  v6 = a1[16];
  v7 = a1[17];
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of DialogSuppressionConfiguration?(v2, v3, v4, v5, v6, v7);
  return a1;
}

void type metadata accessor for MakeAlertStorage()
{
  JUMPOUT(0x18D75FF28);
}

_QWORD *outlined retain of MakeAlertStorage<A, B>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[12];
  v3 = a1[13];
  v4 = a1[14];
  v5 = a1[15];
  v6 = a1[16];
  v7 = a1[17];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of DialogSuppressionConfiguration?(v2, v3, v4, v5, v6, v7);
  return a1;
}

uint64_t destroy for MakeAlertStorage(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_bridgeObjectRelease();
  result = swift_release();
  if (*(_QWORD *)(a1 + 136))
  {
    if (*(_QWORD *)(a1 + 120))
    {
      outlined consume of Text.Storage(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112));
      swift_bridgeObjectRelease();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for MakeAlertStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v6 = (_OWORD *)(a1 + 96);
  v7 = a2 + 96;
  v8 = *(_QWORD *)(a2 + 136);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 120);
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 96);
      v11 = *(_QWORD *)(a2 + 104);
      v12 = *(_BYTE *)(a2 + 112);
      outlined copy of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 96) = v10;
      *(_QWORD *)(a1 + 104) = v11;
      *(_BYTE *)(a1 + 112) = v12;
      *(_QWORD *)(a1 + 120) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = *(_OWORD *)(v7 + 16);
      *v6 = *(_OWORD *)v7;
      *(_OWORD *)(a1 + 112) = v14;
    }
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v8;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    swift_retain();
    swift_retain();
  }
  else
  {
    v13 = *(_OWORD *)(v7 + 16);
    *v6 = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 112) = v13;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(v7 + 32);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(v7 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for MakeAlertStorage(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  v4 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v5 = (_OWORD *)(a1 + 96);
  v6 = (_OWORD *)(a2 + 96);
  v7 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 120);
      if (*(_QWORD *)(a1 + 120))
      {
        if (v8)
        {
          v9 = *(_QWORD *)(a2 + 96);
          v10 = *(_QWORD *)(a2 + 104);
          v11 = *(_BYTE *)(a2 + 112);
          outlined copy of Text.Storage(v9, v10, v11);
          v12 = *(_QWORD *)(a1 + 96);
          v13 = *(_QWORD *)(a1 + 104);
          v14 = *(_BYTE *)(a1 + 112);
          *(_QWORD *)(a1 + 96) = v9;
          *(_QWORD *)(a1 + 104) = v10;
          *(_BYTE *)(a1 + 112) = v11;
          outlined consume of Text.Storage(v12, v13, v14);
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of Text(a1 + 96);
          v27 = *(_OWORD *)(a2 + 112);
          *v5 = *v6;
          *(_OWORD *)(a1 + 112) = v27;
        }
      }
      else if (v8)
      {
        v21 = *(_QWORD *)(a2 + 96);
        v22 = *(_QWORD *)(a2 + 104);
        v23 = *(_BYTE *)(a2 + 112);
        outlined copy of Text.Storage(v21, v22, v23);
        *(_QWORD *)(a1 + 96) = v21;
        *(_QWORD *)(a1 + 104) = v22;
        *(_BYTE *)(a1 + 112) = v23;
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        swift_bridgeObjectRetain();
      }
      else
      {
        v29 = *(_OWORD *)(a2 + 112);
        *v5 = *v6;
        *(_OWORD *)(a1 + 112) = v29;
      }
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    }
    else
    {
      outlined destroy of DialogSuppressionConfiguration(a1 + 96);
      v19 = *(_OWORD *)(a2 + 112);
      v18 = *(_OWORD *)(a2 + 128);
      v20 = *v6;
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v19;
      *(_OWORD *)(a1 + 128) = v18;
      *v5 = v20;
    }
  }
  else if (v7)
  {
    if (*(_QWORD *)(a2 + 120))
    {
      v15 = *(_QWORD *)(a2 + 96);
      v16 = *(_QWORD *)(a2 + 104);
      v17 = *(_BYTE *)(a2 + 112);
      outlined copy of Text.Storage(v15, v16, v17);
      *(_QWORD *)(a1 + 96) = v15;
      *(_QWORD *)(a1 + 104) = v16;
      *(_BYTE *)(a1 + 112) = v17;
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
    }
    else
    {
      v28 = *(_OWORD *)(a2 + 112);
      *v5 = *v6;
      *(_OWORD *)(a1 + 112) = v28;
    }
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    swift_retain();
    swift_retain();
  }
  else
  {
    v24 = *v6;
    v25 = *(_OWORD *)(a2 + 112);
    v26 = *(_OWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v25;
    *(_OWORD *)(a1 + 128) = v26;
    *v5 = v24;
  }
  return a1;
}

uint64_t assignWithTake for MakeAlertStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v5 = (_OWORD *)(a1 + 96);
  v6 = (_OWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 136))
  {
    v7 = *(_QWORD *)(a2 + 136);
    if (v7)
    {
      if (*(_QWORD *)(a1 + 120))
      {
        v8 = *(_QWORD *)(a2 + 120);
        if (v8)
        {
          v9 = *(_BYTE *)(a2 + 112);
          v10 = *(_QWORD *)(a1 + 96);
          v11 = *(_QWORD *)(a1 + 104);
          v12 = *(_BYTE *)(a1 + 112);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_BYTE *)(a1 + 112) = v9;
          outlined consume of Text.Storage(v10, v11, v12);
          *(_QWORD *)(a1 + 120) = v8;
          swift_bridgeObjectRelease();
LABEL_10:
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
          swift_release();
          *(_QWORD *)(a1 + 136) = v7;
          swift_release();
          *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
          return a1;
        }
        outlined destroy of Text(a1 + 96);
      }
      v14 = *(_OWORD *)(a2 + 112);
      *v5 = *v6;
      *(_OWORD *)(a1 + 112) = v14;
      goto LABEL_10;
    }
    outlined destroy of DialogSuppressionConfiguration(a1 + 96);
  }
  v13 = *(_OWORD *)(a2 + 112);
  *v5 = *v6;
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for MakeAlertStorage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 145))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeAlertStorage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 145) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlertStorage.PreferenceKey()
{
  return &type metadata for AlertStorage.PreferenceKey;
}

void base witness table accessor for _AttributeBody in MakeAlertStorage<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized static AlertStorage.PreferenceKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  a2(&v6);
  v3 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;
  return swift_bridgeObjectRelease();
}

void type metadata accessor for (ViewIdentity, AlertStorage)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ViewIdentity, AlertStorage))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage));
  }
}

uint64_t sub_1876CBCC0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(v0 + 152))
  {
    if (*(_QWORD *)(v0 + 136))
    {
      outlined consume of Text.Storage(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128));
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(v0 + 168))
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

_QWORD *partial apply for closure #2 in MakeAlertStorage.updateValue()(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in MakeAlertStorage.updateValue()(a1, *(_DWORD *)(v1 + 16), *(_BYTE *)(v1 + 20), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_DWORD *)(v1 + 44), *(_DWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_WORD *)(v1 + 72), *(_OWORD *)(v1 + 80), *(_QWORD *)(v1 + 96), *(_WORD *)(v1 + 104), v1 + 112, v1 + 168);
}

void __swiftcall PlainWindowStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PlainWindowStyle.configureWindow(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for PlainWindowStyle()
{
  return &type metadata for PlainWindowStyle;
}

uint64_t specialized OptionSet<>.remove(_:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned int v4;
  int v5;

  v4 = *v2;
  if (v4 >= 0x10)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v5 = v4 & result;
    if ((v4 & result) != 0)
      result = specialized SetAlgebra.subtract(_:)(result);
    *a2 = v5;
    a2[1] = v5 == 0;
  }
  return result;
}

uint64_t specialized OptionSet.union(_:)@<X0>(uint64_t result@<X0>, unsigned __int8 a2@<W1>, _BYTE *a3@<X8>)
{
  if (a2 >= 0x10u || (a2 | result) >= 0x10)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a3 = a2 | result;
  }
  return result;
}

uint64_t specialized OptionSet.intersection(_:)@<X0>(uint64_t result@<X0>, unsigned __int8 a2@<W1>, _BYTE *a3@<X8>)
{
  if (a2 >= 0x10u)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a3 = a2 & result;
  }
  return result;
}

uint64_t specialized OptionSet.symmetricDifference(_:)@<X0>(uint64_t result@<X0>, unsigned __int8 a2@<W1>, _BYTE *a3@<X8>)
{
  if (a2 >= 0x10u || (a2 ^ result) >= 0x10)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a3 = a2 ^ result;
  }
  return result;
}

uint64_t specialized OptionSet<>.update(with:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  unsigned int v3;
  unsigned int v4;

  v3 = *v2;
  if (v3 >= 0x10 || (v3 | result) >= 0x10)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *v2 = v3 | result;
    v4 = v3 & result;
    *a2 = v4;
    a2[1] = v4 == 0;
  }
  return result;
}

uint64_t specialized SetAlgebra.subtracting(_:)@<X0>(uint64_t result@<X0>, unsigned __int8 a2@<W1>, _BYTE *a3@<X8>)
{
  if (a2 >= 0x10u || (a2 ^ result) >= 0x10)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a3 = (a2 ^ result) & a2;
  }
  return result;
}

uint64_t specialized SetAlgebra.isSubset(of:)(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t result;

  if (a2 < 0x10u)
    return (a2 & ~a1) == 0;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized SetAlgebra.isDisjoint(with:)(char a1, unsigned __int8 a2)
{
  uint64_t result;

  if (a2 < 0x10u)
    return (a2 & a1) == 0;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized OptionSet<>.contains(_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t result;

  if (a1 < 0x10u)
    return (a1 & ~a2) == 0;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t result)
{
  _BYTE *v1;
  unsigned int v2;

  v2 = *v1;
  if (v2 >= 0x10 || (v2 ^ result) >= 0x10)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *v1 = (v2 ^ result) & v2;
  }
  return result;
}

uint64_t SwipeGesture.Direction.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SwipeGesture.Direction.rawValue.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*SwipeGesture.Direction.rawValue.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SwipeGesture.Direction.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result > 0xFu)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

void static SwipeGesture.Direction.left.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static SwipeGesture.Direction.right.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static SwipeGesture.Direction.up.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static SwipeGesture.Direction.down.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t one-time initialization function for horizontal(uint64_t a1)
{
  return one-time initialization function for horizontal(a1, byte_1E1AB3D18, &static SwipeGesture.Direction.horizontal, &byte_1E1AB3D18[1]);
}

_QWORD *static SwipeGesture.Direction.horizontal.getter@<X0>(_BYTE *a1@<X8>)
{
  return static SwipeGesture.Direction.horizontal.getter(&one-time initialization token for horizontal, &static SwipeGesture.Direction.horizontal, a1);
}

uint64_t one-time initialization function for vertical(uint64_t a1)
{
  return one-time initialization function for horizontal(a1, byte_1E1AB3DF0, &static SwipeGesture.Direction.vertical, &byte_1E1AB3DF0[1]);
}

uint64_t one-time initialization function for horizontal(uint64_t a1, unsigned __int8 *a2, _BYTE *a3, unsigned __int8 *a4)
{
  unsigned int v4;
  int v5;
  uint64_t result;

  v4 = *a2;
  if (v4 >= 0x10 || (v5 = *a4, (v5 & ~v4) != 0) && (v4 |= v5, v4 >= 0x10))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a3 = v4;
  }
  return result;
}

_QWORD *static SwipeGesture.Direction.vertical.getter@<X0>(_BYTE *a1@<X8>)
{
  return static SwipeGesture.Direction.horizontal.getter(&one-time initialization token for vertical, &static SwipeGesture.Direction.vertical, a1);
}

_QWORD *static SwipeGesture.Direction.horizontal.getter@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  if (*result != -1)
    result = (_QWORD *)swift_once();
  *a3 = *a2;
  return result;
}

_QWORD *static SwipeGesture.Direction.all.getter@<X0>(_BYTE *a1@<X8>)
{
  return static SwipeGesture.Direction.horizontal.getter(&one-time initialization token for all, &static SwipeGesture.Direction.all, a1);
}

unsigned __int8 *protocol witness for OptionSet.init(rawValue:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;

  v2 = *result;
  if (v2 >= 0x10)
  {
    result = (unsigned __int8 *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = v2;
  }
  return result;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;

  return specialized OptionSet.union(_:)(*a1, *v2, a2);
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;

  return specialized OptionSet.intersection(_:)(*a1, *v2, a2);
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;

  return specialized OptionSet.symmetricDifference(_:)(*a1, *v2, a2);
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance SwipeGesture.Direction(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  return specialized OptionSet<>.remove(_:)(*a1, a2);
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  return specialized OptionSet<>.update(with:)(*a1, a2);
}

unsigned __int8 *protocol witness for SetAlgebra.formUnion(_:) in conformance SwipeGesture.Direction(unsigned __int8 *result)
{
  _BYTE *v1;
  unsigned int v2;

  v2 = *v1 | *result;
  if (v2 >= 0x10)
  {
    result = (unsigned __int8 *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *v1 = v2;
  }
  return result;
}

_BYTE *protocol witness for SetAlgebra.formIntersection(_:) in conformance SwipeGesture.Direction(_BYTE *result)
{
  _BYTE *v1;
  unsigned int v2;

  v2 = (*v1 & *result);
  if (v2 >= 0x10)
  {
    result = (_BYTE *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *v1 = v2;
  }
  return result;
}

unsigned __int8 *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance SwipeGesture.Direction(unsigned __int8 *result)
{
  _BYTE *v1;
  unsigned int v2;

  v2 = *v1 ^ *result;
  if (v2 >= 0x10)
  {
    result = (unsigned __int8 *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *v1 = v2;
  }
  return result;
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned __int8 *v2;

  return specialized SetAlgebra.subtracting(_:)(*a1, *v2, a2);
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance SwipeGesture.Direction(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return specialized SetAlgebra.isSubset(of:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance SwipeGesture.Direction(char *a1)
{
  unsigned __int8 *v1;

  return specialized SetAlgebra.isDisjoint(with:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance SwipeGesture.Direction(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return specialized OptionSet<>.contains(_:)(*a1, *v1) & 1;
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance SwipeGesture.Direction(unsigned __int8 *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  unsigned int v2;

  v2 = *result;
  if (v2 >= 0x10)
  {
    result = (unsigned __int8 *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = v2;
  }
  return result;
}

uint64_t (*SwipeGesture.Value.direction.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void SwipeGesture.allowedDirections.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *SwipeGesture.allowedDirections.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*SwipeGesture.allowedDirections.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

_BYTE *SwipeGesture.init(direction:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t static SwipeGesture._makeGesture(gesture:inputs:)()
{
  lazy protocol witness table accessor for type SwipeGesture and conformance SwipeGesture();
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

unint64_t lazy protocol witness table accessor for type SwipeGesture and conformance SwipeGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeGesture and conformance SwipeGesture;
  if (!lazy protocol witness table cache variable for type SwipeGesture and conformance SwipeGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeGesture, &type metadata for SwipeGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeGesture and conformance SwipeGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeGesture and conformance SwipeGesture;
  if (!lazy protocol witness table cache variable for type SwipeGesture and conformance SwipeGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeGesture, &type metadata for SwipeGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeGesture and conformance SwipeGesture);
  }
  return result;
}

double SwipeGesture.internalBody.getter@<D0>(uint64_t a1@<X8>)
{
  char *v1;
  char v2;
  double result;

  v2 = *v1;
  *(_OWORD *)a1 = xmmword_187C508C0;
  *(_OWORD *)(a1 + 16) = xmmword_187C508D0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_187C508E0;
  *(_OWORD *)(a1 + 48) = xmmword_187C508F0;
  *(_BYTE *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 72) = 4;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

double protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance SwipeGesture@<D0>(uint64_t a1@<X8>)
{
  char *v1;
  char v2;
  double result;

  v2 = *v1;
  *(_OWORD *)a1 = xmmword_187C508C0;
  *(_OWORD *)(a1 + 16) = xmmword_187C508D0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_187C508E0;
  *(_OWORD *)(a1 + 48) = xmmword_187C508F0;
  *(_BYTE *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 72) = 4;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance SwipeGesture()
{
  lazy protocol witness table accessor for type SwipeGesture and conformance SwipeGesture();
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance SwipeGesture()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t SpatialSwipeGesture.body.getter()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char v7;

  v5 = v0[2];
  v6 = v0[3];
  v7 = *((_BYTE *)v0 + 64);
  v3 = *v0;
  v4 = v0[1];
  type metadata accessor for EventListener<SpatialEvent>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>, (uint64_t (*)(uint64_t))type metadata accessor for EventListener<SpatialEvent>, MEMORY[0x1E0CE1EC0]);
  Gesture.eventFilter<A>(forType:_:)();
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 48) = v5;
  *(_OWORD *)(v1 + 64) = v6;
  *(_BYTE *)(v1 + 80) = v7;
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v4;
  type metadata accessor for ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>>, MEMORY[0x1E0CE2E88]);
  Gesture.dependency(_:)();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in SpatialSwipeGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[4];
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;

  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_BYTE *)(a2 + 72);
  v6 = a3[3];
  v16 = a3[2];
  v17 = v6;
  v18 = *((_BYTE *)a3 + 64);
  v7 = a3[1];
  v14 = *a3;
  v15 = v7;
  v8 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v8;
  v9 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  v11[3] = v9;
  v12 = v4;
  v13 = v5;
  return SpatialSwipeGesture.phase(state:event:)(a1, (uint64_t)v11, a4);
}

uint64_t SpatialSwipeGesture.phase(state:event:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  __int16 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unsigned __int8 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  __int16 v46;
  double v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v4 = result;
  v5 = *(_QWORD *)a2;
  v6 = *(double *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(unsigned __int8 *)(a2 + 72);
  v15 = v3[1];
  v55 = *v3;
  v56 = v15;
  v16 = v3[3];
  v57 = v3[2];
  v58 = v16;
  if ((v14 - 1) >= 2)
  {
    if (v14)
    {
      v22 = 0;
      goto LABEL_20;
    }
    if (!*((_BYTE *)v3 + 64))
      goto LABEL_19;
  }
  else
  {
    if ((*(_BYTE *)(result + 57) & 1) != 0)
      goto LABEL_19;
    v41 = a3;
    v43 = v11;
    v44 = v9;
    v39 = *((_BYTE *)v3 + 64);
    if ((*(_BYTE *)(result + 24) & 1) != 0)
    {
      LOBYTE(v46) = v5;
      v47 = v6;
      v48 = v8;
      v49 = v7;
      v50 = v10;
      v51 = v9;
      v52 = v11;
      v53 = v12;
      v54 = v13;
      outlined copy of GesturePhase<SpatialEvent>(v5, *(uint64_t *)&v6, v8, v7, v10, v9, v11, v12, v13, v14);
      SpatialEvent.globalLocation.getter();
      v18 = v17;
      v20 = v19;
      v21 = v6;
    }
    else
    {
      v20 = *(double *)(result + 8);
      v21 = *(double *)(result + 16);
      v18 = *(double *)result;
      outlined copy of GesturePhase<SpatialEvent>(v5, *(uint64_t *)&v6, v8, v7, v10, v9, v11, v12, v13, v14);
    }
    *(double *)v4 = v18;
    *(double *)(v4 + 8) = v20;
    *(double *)(v4 + 16) = v21;
    *(_BYTE *)(v4 + 24) = 0;
    v23 = v21;
    v24 = v18;
    v25 = v20;
    if ((*(_BYTE *)(v4 + 56) & 1) == 0)
    {
      v25 = *(double *)(v4 + 40);
      v23 = *(double *)(v4 + 48);
      v24 = *(double *)(v4 + 32);
    }
    *(double *)(v4 + 32) = v24;
    *(double *)(v4 + 40) = v25;
    *(double *)(v4 + 48) = v23;
    *(_BYTE *)(v4 + 56) = 0;
    v26 = v6 - v21;
    if (v26 > 0.5)
    {
      result = outlined consume of GesturePhase<SpatialEvent>(v5, *(uint64_t *)&v6, v8, v7, v10, v44, v43, v12, v13, v14);
      v22 = 0;
LABEL_16:
      LOBYTE(v14) = 3;
      a3 = v41;
      goto LABEL_20;
    }
    v42 = v12;
    SpatialEvent.globalLocation.getter();
    v28 = v27 - v18;
    SpatialEvent.globalLocation.getter();
    v30 = v29 - v20;
    SpatialEvent.globalLocation.getter();
    LOBYTE(v46) = v5;
    v32 = v31 - v24;
    v47 = v6;
    v48 = v8;
    v49 = v7;
    v50 = v10;
    v51 = v44;
    v52 = v43;
    v53 = v12;
    v54 = v13;
    SpatialEvent.globalLocation.getter();
    v45 = v39;
    v40 = SwipeDetector.checkForSwipe(with:time:currentDelta:currentTimeChange:allowedDirections:state:)(&v46, &v45, v28, v30, v26, v32, v33 - v25, v6 - v23);
    v22 = v46;
    LOBYTE(v46) = v5;
    v47 = v6;
    v48 = v8;
    v49 = v7;
    v50 = v10;
    v51 = v44;
    v52 = v43;
    v53 = v42;
    v54 = v13;
    SpatialEvent.globalLocation.getter();
    v35 = v34;
    v37 = v36;
    result = outlined consume of GesturePhase<SpatialEvent>(v5, *(uint64_t *)&v6, v8, v7, v10, v44, v43, v42, v13, v14);
    *(_QWORD *)(v4 + 32) = v35;
    *(_QWORD *)(v4 + 40) = v37;
    *(double *)(v4 + 48) = v6;
    *(_BYTE *)(v4 + 56) = 0;
    if ((v40 & 1) != 0)
    {
      v22 = 0;
      *(_BYTE *)(v4 + 57) = 1;
      goto LABEL_16;
    }
    if ((v38 & 1) == 0)
    {
      *(_BYTE *)(v4 + 58) = v22;
      LOBYTE(v14) = 2;
      a3 = v41;
      goto LABEL_20;
    }
    a3 = v41;
    if (v14 == 2)
    {
LABEL_19:
      v22 = 0;
      LOBYTE(v14) = 3;
      goto LABEL_20;
    }
  }
  LOBYTE(v14) = 0;
  v22 = *(unsigned __int8 *)(v4 + 58);
LABEL_20:
  *(_WORD *)a3 = v22;
  *(_BYTE *)(a3 + 2) = v14;
  return result;
}

void protocol witness for GestureStateProtocol.init() in conformance SpatialSwipeGesture.StateType(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_WORD *)(a1 + 57) = 0;
}

uint64_t SwipeDetector.checkForSwipe(with:time:currentDelta:currentTimeChange:allowedDirections:state:)(__int16 *a1, unsigned __int8 *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  _BYTE *v9;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  int v26;
  uint64_t result;
  double v28;
  double v29;
  double v30;
  double v32;
  double v33;
  __int16 v36;
  double v37;
  double v38;

  v15 = *a2;
  v16 = 0.5;
  if (a5 <= 0.5)
    v16 = a5;
  v18 = SwipeDetector.movementRates(for:)(v16);
  v20 = v19;
  v22 = v21;
  v23 = *(double *)(v8 + 32);
  if (one-time initialization token for horizontal == -1)
  {
    if (v15 < 0x10)
      goto LABEL_5;
LABEL_83:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_84:
    v38 = v17;
    swift_once();
    v17 = v38;
    goto LABEL_13;
  }
  v37 = v17;
  swift_once();
  v17 = v37;
  if (v15 >= 0x10)
    goto LABEL_83;
LABEL_5:
  v9 = &unk_1EDE2F000;
  v24 = (static SwipeGesture.Direction.horizontal & v15);
  if (v24 == 1)
  {
    if (v23 < a3)
      goto LABEL_18;
  }
  else if (v24 == 2 && -v23 > a3)
  {
    goto LABEL_18;
  }
  if (one-time initialization token for vertical != -1)
    goto LABEL_84;
LABEL_13:
  v26 = (static SwipeGesture.Direction.vertical & v15);
  if (v26 == 8)
  {
    if (-v23 > a4)
      goto LABEL_18;
  }
  else if (v26 == 4 && v23 < a4)
  {
    goto LABEL_18;
  }
  v28 = 0.01;
  if (a8 > 0.01)
  {
    if ((v9[4016] & v15) != 0)
    {
      v29 = fabs(a3);
      v30 = fabs(a4);
      if (v20 >= v29 && v22 >= v30)
      {
        if (v18 > v29 || v17 > v30)
        {
          if ((static SwipeGesture.Direction.vertical & v15) == 0
            || v20 < v30
            || v22 < v29)
          {
            goto LABEL_68;
          }
LABEL_51:
          if (v18 > v30 || v17 > v29)
            goto LABEL_68;
          goto LABEL_67;
        }
        v28 = a8;
LABEL_74:
        if (*(double *)(v8 + 56) <= fabs(a6 / v28))
        {
          result = 0;
          if (a3 >= 0.0)
            v36 = 2;
          else
            v36 = 1;
          goto LABEL_69;
        }
        if ((static SwipeGesture.Direction.vertical & v15) == 0)
          goto LABEL_68;
        v30 = fabs(a4);
        if (v20 < v30)
          goto LABEL_68;
        v29 = fabs(a3);
        a8 = v28;
        if (v22 < v29)
          goto LABEL_68;
        goto LABEL_51;
      }
      if ((static SwipeGesture.Direction.vertical & v15) != 0
        && v20 >= v30
        && v22 >= v29)
      {
        goto LABEL_51;
      }
    }
    else
    {
      if ((static SwipeGesture.Direction.vertical & v15) == 0)
        goto LABEL_68;
      v30 = fabs(a4);
      v29 = fabs(a3);
      if (v20 >= v30 && v22 >= v29)
        goto LABEL_51;
    }
LABEL_18:
    *a1 = 256;
    return 1;
  }
  if ((v9[4016] & v15) != 0)
  {
    v32 = fabs(a3);
    if (v20 >= v32)
    {
      v33 = fabs(a4);
      if (v22 >= v33)
      {
        if (v18 <= v32 && v17 <= v33)
          goto LABEL_74;
        if ((static SwipeGesture.Direction.vertical & v15) == 0
          || v20 < v33
          || v22 < v32)
        {
          goto LABEL_68;
        }
        goto LABEL_64;
      }
      if ((static SwipeGesture.Direction.vertical & v15) == 0)
        goto LABEL_18;
    }
    else
    {
      if ((static SwipeGesture.Direction.vertical & v15) == 0)
        goto LABEL_18;
      v33 = fabs(a4);
    }
    if (v20 < v33 || v22 < v32)
      goto LABEL_18;
  }
  else
  {
    if ((static SwipeGesture.Direction.vertical & v15) == 0)
      goto LABEL_68;
    v33 = fabs(a4);
    v32 = fabs(a3);
    if (v20 < v33 || v22 < v32)
      goto LABEL_18;
  }
LABEL_64:
  if (v18 > v33 || v17 > v32)
    goto LABEL_68;
  a8 = 0.01;
LABEL_67:
  if (*(double *)(v8 + 56) <= fabs(a7 / a8))
  {
    result = 0;
    if (a4 >= 0.0)
      v36 = 8;
    else
      v36 = 4;
    goto LABEL_69;
  }
LABEL_68:
  result = 0;
  v36 = 256;
LABEL_69:
  *a1 = v36;
  return result;
}

double SwipeDetector.movementRates(for:)(double a1)
{
  double *v1;
  double v2;

  v2 = *v1 * (1.0 - (1.0 - v1[5]) * a1);
  if (*v1 == 1.79769313e308)
    return 1.79769313e308;
  return v2;
}

void *static SwipeGesture.Direction.allCases.getter()
{
  return &outlined read-only object #0 of static SwipeGesture.Direction.allCases.getter;
}

uint64_t SwipeGesture.Direction.description.getter()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;

  v1 = *v0;
  if (one-time initialization token for all != -1)
    swift_once();
  if (static SwipeGesture.Direction.all == v1)
    return 1819042094;
  if (one-time initialization token for vertical != -1)
    swift_once();
  if (static SwipeGesture.Direction.vertical == v1)
    return 0x616369747265762ELL;
  if (one-time initialization token for horizontal != -1)
    swift_once();
  if (static SwipeGesture.Direction.horizontal == v1)
    return 0x6E6F7A69726F682ELL;
  v3 = (char *)MEMORY[0x1E0DEE9D8];
  if ((v1 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v4 = *((_QWORD *)v3 + 2);
    v5 = *((_QWORD *)v3 + 3);
    v6 = v4 + 1;
    if (v4 >= v5 >> 1)
    {
      v26 = v3;
      v27 = *((_QWORD *)v3 + 2);
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v4 + 1, 1, v26);
      v4 = v27;
      v3 = v28;
    }
    *((_QWORD *)v3 + 2) = v6;
    v7 = &v3[16 * v4];
    *((_QWORD *)v7 + 4) = *(_QWORD *)".left";
    *((_QWORD *)v7 + 5) = 0xE500000000000000;
  }
  if ((~v1 & 2) == 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
    v8 = *((_QWORD *)v3 + 2);
    v9 = *((_QWORD *)v3 + 3);
    v10 = v8 + 1;
    if (v8 >= v9 >> 1)
    {
      v29 = v3;
      v30 = *((_QWORD *)v3 + 2);
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v8 + 1, 1, v29);
      v8 = v30;
      v3 = v31;
    }
    *((_QWORD *)v3 + 2) = v10;
    v11 = &v3[16 * v8];
    *((_QWORD *)v11 + 4) = *(_QWORD *)".right";
    *((_QWORD *)v11 + 5) = 0xE600000000000000;
  }
  if ((~v1 & 4) == 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
    v12 = *((_QWORD *)v3 + 2);
    v13 = *((_QWORD *)v3 + 3);
    v14 = v12 + 1;
    if (v12 >= v13 >> 1)
    {
      v32 = v3;
      v33 = *((_QWORD *)v3 + 2);
      v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v12 + 1, 1, v32);
      v12 = v33;
      v3 = v34;
    }
    *((_QWORD *)v3 + 2) = v14;
    v15 = &v3[16 * v12];
    *((_QWORD *)v15 + 4) = 7370030;
    *((_QWORD *)v15 + 5) = 0xE300000000000000;
  }
  if ((~v1 & 8) == 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
    v17 = *((_QWORD *)v3 + 2);
    v16 = *((_QWORD *)v3 + 3);
    if (v17 >= v16 >> 1)
      v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v3);
    *((_QWORD *)v3 + 2) = v17 + 1;
    v18 = &v3[16 * v17];
    *((_QWORD *)v18 + 4) = *(_QWORD *)".down";
    *((_QWORD *)v18 + 5) = 0xE500000000000000;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  swift_arrayDestroy();
  v19 = *((_QWORD *)v3 + 2);
  if (v19)
  {
    if (v19 == 1)
    {
      v2 = *((_QWORD *)v3 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v20 = BidirectionalCollection<>.joined(separator:)();
      v22 = v21;
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = v20;
      v23._object = v22;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 93;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      return 91;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 23899;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SwipeGesture.Direction and conformance SwipeGesture.Direction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction;
  if (!lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeGesture.Direction, &type metadata for SwipeGesture.Direction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction;
  if (!lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeGesture.Direction, &type metadata for SwipeGesture.Direction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction;
  if (!lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeGesture.Direction, &type metadata for SwipeGesture.Direction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction;
  if (!lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeGesture.Direction, &type metadata for SwipeGesture.Direction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction);
  }
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in SwipeGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in SwipeGesture()
{
  return &protocol witness table for SwipeGesture;
}

ValueMetadata *type metadata accessor for SwipeGesture()
{
  return &type metadata for SwipeGesture;
}

ValueMetadata *type metadata accessor for SwipeGesture.Direction()
{
  return &type metadata for SwipeGesture.Direction;
}

ValueMetadata *type metadata accessor for SwipeGesture.Value()
{
  return &type metadata for SwipeGesture.Value;
}

uint64_t sub_1876CDB8C()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<SwipeGesture.Value>, SpatialSwipeGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CategoryGesture<SwipeGesture.Value>, SpatialSwipeGesture>, MEMORY[0x1E0CE2E88]);
}

void type metadata accessor for ModifierGesture<CategoryGesture<SwipeGesture.Value>, SpatialSwipeGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<SwipeGesture.Value>, SpatialSwipeGesture>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for CategoryGesture<SwipeGesture.Value>, (uint64_t)&type metadata for SwipeGesture.Value, MEMORY[0x1E0CE2C58]);
    lazy protocol witness table accessor for type CategoryGesture<SwipeGesture.Value> and conformance CategoryGesture<A>();
    lazy protocol witness table accessor for type SpatialSwipeGesture and conformance SpatialSwipeGesture();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<SwipeGesture.Value>, SpatialSwipeGesture>);
  }
}

unint64_t lazy protocol witness table accessor for type CategoryGesture<SwipeGesture.Value> and conformance CategoryGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CategoryGesture<SwipeGesture.Value> and conformance CategoryGesture<A>;
  if (!lazy protocol witness table cache variable for type CategoryGesture<SwipeGesture.Value> and conformance CategoryGesture<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for CategoryGesture<SwipeGesture.Value>, (uint64_t)&type metadata for SwipeGesture.Value, MEMORY[0x1E0CE2C58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2C68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CategoryGesture<SwipeGesture.Value> and conformance CategoryGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialSwipeGesture and conformance SpatialSwipeGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialSwipeGesture and conformance SpatialSwipeGesture;
  if (!lazy protocol witness table cache variable for type SpatialSwipeGesture and conformance SpatialSwipeGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialSwipeGesture, &unk_1E1AD04A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialSwipeGesture and conformance SpatialSwipeGesture);
  }
  return result;
}

void *type metadata accessor for SpatialSwipeGesture()
{
  return &unk_1E1AD04A0;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in SpatialSwipeGesture()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for EventListener<SpatialEvent>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EventListener<SpatialEvent>)
  {
    v0 = type metadata accessor for EventListener();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventListener<SpatialEvent>);
  }
}

uint64_t sub_1876CDD74()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SpatialSwipeGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #2 in SpatialSwipeGesture.body.getter(a1, a2, (__int128 *)(v3 + 16), a3);
}

void type metadata accessor for ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>>)
  {
    type metadata accessor for StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>();
    type metadata accessor for ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value> and conformance StateContainerGesture<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, MEMORY[0x1E0CE51E0]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>, MEMORY[0x1E0CE2E88]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>>);
  }
}

void type metadata accessor for StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>)
  {
    lazy protocol witness table accessor for type SpatialSwipeGesture.StateType and conformance SpatialSwipeGesture.StateType();
    v0 = type metadata accessor for StateContainerGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>);
  }
}

unint64_t lazy protocol witness table accessor for type SpatialSwipeGesture.StateType and conformance SpatialSwipeGesture.StateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpatialSwipeGesture.StateType and conformance SpatialSwipeGesture.StateType;
  if (!lazy protocol witness table cache variable for type SpatialSwipeGesture.StateType and conformance SpatialSwipeGesture.StateType)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpatialSwipeGesture.StateType, &unk_1E1AD0418);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialSwipeGesture.StateType and conformance SpatialSwipeGesture.StateType);
  }
  return result;
}

void type metadata accessor for ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<SpatialEvent>, MEMORY[0x1E0CE1920], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    type metadata accessor for EventListener<SpatialEvent>();
    lazy protocol witness table accessor for type EventFilter<SpatialEvent> and conformance EventFilter<A>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>, (uint64_t (*)(uint64_t))type metadata accessor for EventListener<SpatialEvent>, MEMORY[0x1E0CE1EC0]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>);
  }
}

unint64_t lazy protocol witness table accessor for type EventFilter<SpatialEvent> and conformance EventFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventFilter<SpatialEvent> and conformance EventFilter<A>;
  if (!lazy protocol witness table cache variable for type EventFilter<SpatialEvent> and conformance EventFilter<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<SpatialEvent>, MEMORY[0x1E0CE1920], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1180], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventFilter<SpatialEvent> and conformance EventFilter<A>);
  }
  return result;
}

uint64_t outlined copy of GesturePhase<SpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10 == 2 || a10 == 1)
    return swift_retain();
  if (!a10)
    return outlined copy of HitTestableEvent?(result, a2, a3);
  return result;
}

uint64_t outlined consume of GesturePhase<SpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10 == 2 || a10 == 1)
    return swift_release();
  if (!a10)
    return outlined consume of HitTestableEvent?(result, a2, a3);
  return result;
}

__n128 __swift_memcpy59_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 43) = *(_OWORD *)(a2 + 43);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SpatialSwipeGesture.StateType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 59))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 57);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialSwipeGesture.StateType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 58) = 0;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 59) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 59) = 0;
    if (a2)
      *(_BYTE *)(result + 57) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for SpatialSwipeGesture.StateType()
{
  return &unk_1E1AD0418;
}

void *type metadata accessor for SwipeDetector()
{
  return &unk_1E1AB6AB8;
}

uint64_t sub_1876CE17C()
{
  type metadata accessor for ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>>, MEMORY[0x1E0CE2E88]);
  return swift_getOpaqueTypeConformance2();
}

void Picker.init(selection:content:label:)(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a3;
  v26 = a6;
  v21 = a4;
  v22 = a7;
  v23 = a2;
  v24 = a8;
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Binding();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&v21 - v18, a1, v14, v17);
  v21(v20);
  Picker.init(selection:label:content:)((uint64_t)v19, (uint64_t)v13, v23, v25, a5, v26, v24, v22, a9, a10);
}

uint64_t sub_1876CE2D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void Picker.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v21 = a3;
  v4 = a1[3];
  v5 = a1[6];
  v6 = type metadata accessor for PickerStyleConfiguration(0, v4, v5, a2);
  MEMORY[0x1E0C80A78](v6, v7);
  v19 = (char *)&v15 - v8;
  v10 = type metadata accessor for ResolvedPicker(0, v4, v5, v9);
  v20 = *(_QWORD *)(v10 - 8);
  v17 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = type metadata accessor for PickerStyleConfiguration.Label(255, v4, v5, v12);
  v16 = a1[2];
  v14 = v16;
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.Label, v13);
  v22 = a1[5];
  v23 = v13;
  v24 = v14;
  v25 = v18;
  v26 = v22;
  type metadata accessor for StaticSourceWriter();
}

void sub_1876CE408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v14 = type metadata accessor for ModifiedContent();
  v9[20] = *(_QWORD *)(v14 - 8);
  v9[7] = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v9[24] = (char *)&a9 - v16;
  v18 = type metadata accessor for PickerStyleConfiguration.Content(255, v12, v11, v17);
  v9[14] = v18;
  v19 = *(_QWORD *)(v10 + 32);
  v9[3] = v19;
  v20 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.Content, v18);
  v9[15] = v20;
  v21 = *(_QWORD *)(v10 + 56);
  v9[1] = v21;
  *(_QWORD *)(v13 - 120) = v18;
  *(_QWORD *)(v13 - 112) = v19;
  *(_QWORD *)(v13 - 104) = v20;
  *(_QWORD *)(v13 - 96) = v21;
  type metadata accessor for StaticSourceWriter();
}

void sub_1876CE4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v13 = type metadata accessor for ModifiedContent();
  v9[19] = *(_QWORD *)(v13 - 8);
  v9[5] = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v9[6] = (char *)&a9 - v15;
  v17 = type metadata accessor for PickerStyleConfiguration.CurrentValueLabel(255, v11, v10, v16);
  v9[12] = v17;
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.CurrentValueLabel, v17);
  v9[13] = v18;
  v19 = MEMORY[0x1E0CE7518];
  *(_QWORD *)(v12 - 120) = v17;
  *(_QWORD *)(v12 - 112) = v19;
  v20 = MEMORY[0x1E0CE7508];
  *(_QWORD *)(v12 - 104) = v18;
  *(_QWORD *)(v12 - 96) = v20;
  type metadata accessor for OptionalSourceWriter();
}

void sub_1876CE538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v16 = type metadata accessor for ModifiedContent();
  v9[2] = v16;
  v9[17] = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v9[4] = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v9[9] = (char *)&a9 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v9[11] = (char *)&a9 - v24;
  v25 = swift_bridgeObjectRetain();
  v26 = v9[18];
  PickerStyleConfiguration.init(selection:)(v25, v13, v12, v27, v26);
  v9[23] = v12;
  ResolvedPicker.init(configuration:)(v26, v13, v12, v28, v14);
  *(_QWORD *)(v15 - 224) = v9[8];
  *(_QWORD *)(v15 - 216) = v13;
  v29 = v9[25];
  *(_QWORD *)(v15 - 208) = v9[3];
  *(_QWORD *)(v15 - 200) = v29;
  *(_QWORD *)(v15 - 192) = v12;
  *(_QWORD *)(v15 - 184) = v9[1];
  *(_QWORD *)(v15 - 176) = v10;
  *v9 = v10;
  View.viewAlias<A, B>(_:_:)(v11, (uint64_t)partial apply for closure #1 in Picker.body.getter);
}

void sub_1876CE65C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, uint64_t))(v0[21] + 8))(v5, v2);
  v0[38] = v8;
  v0[39] = v7;
  v0[40] = v4;
  v0[41] = v6;
  v0[42] = v0[23];
  v0[43] = v3;
  v0[44] = v1;
  *(_QWORD *)(v9 - 136) = &protocol witness table for ResolvedPicker<A>;
  *(_QWORD *)(v9 - 128) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0[7], v9 - 136);
  View.viewAlias<A, B>(_:_:)(v0[14], (uint64_t)partial apply for closure #2 in Picker.body.getter);
}

void sub_1876CE6EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t))(v0[20] + 8))(v1, v6);
  v0[28] = v8;
  v0[29] = v7;
  v10 = v0[25];
  v0[30] = v5;
  v0[31] = v10;
  v0[32] = v0[23];
  v0[33] = v4;
  v0[34] = *v0;
  *(_QWORD *)(v9 - 152) = v3;
  *(_QWORD *)(v9 - 144) = v2;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0[5], v9 - 152);
  View.optionalViewAlias<A, B>(_:_:)();
}

uint64_t sub_1876CE784()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t))(v0[19] + 8))(v5, v1);
  *(_QWORD *)(v6 - 168) = v2;
  *(_QWORD *)(v6 - 160) = &protocol witness table for OptionalSourceWriter<A, B>;
  v7 = v0[2];
  v8 = MEMORY[0x18D75FFDC](v3, v7, v6 - 168);
  v9 = v0[9];
  ModifiedContent<>.accessibility()(v7, v9);
  v10 = *(void (**)(uint64_t, uint64_t))(v0[17] + 8);
  v10(v4, v7);
  v11 = v0[11];
  static ViewBuilder.buildExpression<A>(_:)(v9, v7, v8);
  v10(v9, v7);
  static ViewBuilder.buildBlock<A>(_:)(v11, v7, v0[22]);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(v11, v7);
}

void closure #1 in Picker.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for Picker();
}

uint64_t sub_1876CE8BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 68), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

uint64_t partial apply for closure #1 in Picker.body.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in Picker.body.getter);
}

void closure #2 in Picker.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for Picker();
}

uint64_t sub_1876CE988(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 72), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

uint64_t partial apply for closure #2 in Picker.body.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in Picker.body.getter);
}

void partial apply for closure #3 in Picker.body.getter()
{
  type metadata accessor for Picker();
}

uint64_t sub_1876CEA20(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = *(_QWORD *)(v2 + *(int *)(a1 + 76));
  return swift_retain();
}

void Picker.init(selection:content:label:)()
{
  type metadata accessor for Picker();
}

uint64_t sub_1876CEAA0(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(uint64_t *)((char *)v4 + a1[19]) = 0;
  v8 = type metadata accessor for Binding();
  type metadata accessor for _ContiguousArrayStorage();
  v9 = *(_QWORD *)(v8 - 8);
  swift_allocObject();
  v10 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v11, v6, v8);
  _finalizeUninitializedArray<A>(_:)();
  *v4 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))((char *)v4 + a1[18], v5, v3);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))((char *)v4 + a1[17], v2, v1);
}

void Picker.init<A>(selection:content:label:)()
{
  type metadata accessor for Picker();
}

uint64_t sub_1876CEBD0(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(uint64_t *)((char *)v3 + a1[19]) = 0;
  type metadata accessor for Binding();
  v6 = Sequence.compactMap<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v8, v4);
  *v3 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))((char *)v3 + a1[18], v9, v2);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))((char *)v3 + a1[17], v10, v1);
}

void Picker.init<A>(sources:selection:content:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v46 = a6;
  v47 = a5;
  v44 = a4;
  v45 = a3;
  v48 = a9;
  v49 = a2;
  v39 = a13;
  v40 = a1;
  v50 = a12;
  v38 = a11;
  v34 = a14;
  v35 = a7;
  MEMORY[0x1E0C80A78](a1, a2);
  v43 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v41 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8);
  v22 = type metadata accessor for LazySequence();
  v37 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v33 - v24;
  v26 = type metadata accessor for LazyMapSequence();
  MEMORY[0x1E0C80A78](v26, v27);
  Sequence.enumerated()();
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = a7;
  v28[3] = a8;
  v29 = v38;
  v30 = v39;
  v28[4] = a10;
  v28[5] = v29;
  v28[6] = v50;
  v28[7] = v30;
  v28[8] = v34;
  v28[9] = v49;
  swift_retain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC330], v22);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  v31 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v25, v22);
  v32 = v45(v31);
  v47(v32);
  v51 = v42;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC860], v26, &v51);
  Picker.init<A>(selection:content:label:)();
}

uint64_t sub_1876CEF0C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(*(_QWORD *)(v1 - 184), v0);
}

uint64_t sub_1876CEF4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Picker.init<A>(sources:selection:content:label:)()
{
  return swift_getAtKeyPath();
}

void Picker.init(selection:label:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v24 = a3;
  v25 = a6;
  v23 = a4;
  v28 = a8;
  v29 = a9;
  v30 = a7;
  v26 = a2;
  v27 = a10;
  v12 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v17 = type metadata accessor for Binding();
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v23 - v21, a1, v17, v20);
  v24(v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v26, a5);
  Picker.init(selection:content:label:)();
}

uint64_t sub_1876CF0B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
}

void Picker<>.init(_:selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v26 = a6;
  v27 = a7;
  v24 = a8;
  v25 = a9;
  v23 = a10;
  v16 = type metadata accessor for Binding();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v22 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v22 - v20, a5, v16, v19);
  v28 = a1;
  v29 = a2;
  v30 = a3;
  v31 = a4;
  Picker.init(selection:content:label:)((uint64_t)v21, v26, v27, (void (*)(uint64_t))partial apply for closure #1 in Section<>.init<A>(_:isExpanded:content:), MEMORY[0x1E0CE6CF8], v25, v24, MEMORY[0x1E0CE6C58], v23, a11);
}

uint64_t sub_1876CF1E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void Picker<>.init<A>(_:selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t)@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, __int128 a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD v22[4];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v24 = a7;
  v25 = a6;
  v22[1] = a3;
  v22[2] = a4;
  v23 = a10;
  v22[3] = a11;
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = *(_QWORD *)(a9 - 8);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v17, a9, v15);
  a5(v18);
  v26 = Text.init(_:tableName:bundle:comment:)();
  v27 = v19;
  v28 = v20 & 1;
  v29 = v21;
  Picker.init<A>(selection:content:label:)();
}

uint64_t sub_1876CF370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 176), v1);
}

void Picker<>.init<A>(_:sources:selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  char v42;
  uint64_t v43;

  v34 = a8;
  v35 = a7;
  v26 = a6;
  v32 = a5;
  v39 = a4;
  v40 = a9;
  v38 = a3;
  v36 = a1;
  v37 = a2;
  v28 = a13;
  v29 = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v30 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)(*(_QWORD *)(a14 + 8) + 8);
  v15 = type metadata accessor for LazySequence();
  v27 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - v17;
  v31 = type metadata accessor for LazyMapSequence();
  MEMORY[0x1E0C80A78](v31, v19);
  Sequence.enumerated()();
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a10;
  v20[3] = a11;
  v21 = v28;
  v20[4] = a12;
  v20[5] = v21;
  v20[6] = a14;
  v20[7] = v26;
  swift_retain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC330], v15);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  v22 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v18, v15);
  v35(v22);
  v41[1] = Text.init(_:tableName:bundle:comment:)();
  v41[2] = v23;
  v42 = v24 & 1;
  v43 = v25;
  v41[0] = v33;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC860], v31, v41);
  Picker.init<A>(selection:content:label:)();
}

uint64_t sub_1876CF618()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(*(_QWORD *)(v1 - 208), v0);
}

uint64_t sub_1876CF658()
{
  swift_release();
  return swift_deallocObject();
}

void Picker<>.init<A>(_:selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  char v31;
  uint64_t v32;

  v26 = a7;
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v25 = a8;
  v24 = a9;
  v12 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Binding();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v24 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v24 - v19, a2, v15, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a6);
  v30[0] = Text.init<A>(_:)();
  v30[1] = v21;
  v31 = v22 & 1;
  v32 = v23;
  Picker.init(selection:label:content:)((uint64_t)v20, (uint64_t)v30, v27, v28, MEMORY[0x1E0CE6CF8], v29, MEMORY[0x1E0CE6C58], v25, v26, v24);
}

uint64_t sub_1876CF7AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

void Picker<>.init<A, B>(_:selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD v29[10];
  char v30;
  uint64_t v31;

  v29[6] = a7;
  v29[7] = a4;
  v29[5] = a8;
  v29[3] = a5;
  v29[4] = a9;
  v29[2] = a10;
  v29[0] = a2;
  v29[1] = a11;
  v14 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = *(_QWORD *)(v19 - 8);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (*(uint64_t (**)(char *, double))(v20 + 16))((char *)v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v23);
  a3(v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a6);
  v29[8] = Text.init<A>(_:)();
  v29[9] = v26;
  v30 = v27 & 1;
  v31 = v28;
  Picker.init<A>(selection:content:label:)();
}

uint64_t sub_1876CF968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v5 - 176), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v3, v0);
}

void Picker<>.init<A, B>(_:sources:selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  char v54;
  uint64_t v55;

  v37 = a8;
  v47 = a5;
  v48 = a4;
  v50 = a9;
  v51 = a3;
  v43 = a2;
  v49 = a1;
  v52 = a10;
  v39 = a11;
  v40 = a13;
  v35 = a12;
  v45 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v44 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v42 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8);
  v21 = type metadata accessor for LazySequence();
  v36 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v35 - v23;
  v41 = type metadata accessor for LazyMapSequence();
  MEMORY[0x1E0C80A78](v41, v25);
  Sequence.enumerated()();
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = a6;
  v26[3] = a7;
  v27 = v37;
  v28 = v52;
  v26[4] = v37;
  v26[5] = v28;
  v29 = v40;
  v30 = v35;
  v26[6] = v39;
  v26[7] = v30;
  v26[8] = v29;
  v26[9] = v51;
  swift_retain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC330], v21);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  v31 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v24, v21);
  v48(v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v49, v27);
  v53[1] = Text.init<A>(_:)();
  v53[2] = v32;
  v54 = v33 & 1;
  v55 = v34;
  v53[0] = v46;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC860], v41, v53);
  Picker.init<A>(selection:content:label:)();
}

uint64_t sub_1876CFC80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(*(_QWORD *)(v4 - 208), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
}

void Picker<>.init(_:image:selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v31 = a7;
  v32 = a8;
  v30 = a9;
  v27 = a13;
  v28 = a12;
  v29 = a11;
  v19 = type metadata accessor for Binding();
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&v27 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v27 - v23, a6, v19, v22);
  v33 = a1;
  v34 = a2;
  v35 = a3;
  v36 = a4;
  v37 = a5;
  v25 = type metadata accessor for Label<Text, Image>();
  v26 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Picker.init(selection:content:label:)((uint64_t)v24, v31, v32, (void (*)(uint64_t))partial apply for closure #1 in Picker<>.init(_:image:selection:content:), v25, v29, v30, v26, v28, v27);
}

uint64_t sub_1876CFDC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0, v4);
}

void Picker<>.init<A>(_:image:sources:selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[16];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v27 = a8;
  v32 = a7;
  v31 = a6;
  v30 = a5;
  v28 = a4;
  v26 = a3;
  v29 = a2;
  v25 = a1;
  v33 = a9;
  v16 = *a7;
  v17 = *(_QWORD *)(a12 - 8);
  v18 = MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v21, a12, v18);
  v41 = *(_QWORD *)(*(_QWORD *)(v16 + *MEMORY[0x1E0DEE2A8]) + 16);
  v42 = a11;
  v43 = a12;
  v44 = a13;
  v45 = a14;
  v46 = a15;
  v47 = v27;
  v48 = a10;
  v35 = v25;
  v36 = a2;
  v37 = v26;
  v38 = v28;
  v39 = v30;
  v22 = type metadata accessor for Label<Text, Image>();
  v23 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Picker.init<A>(sources:selection:content:label:)((uint64_t)v20, (uint64_t)v32, (uint64_t (*)(uint64_t))partial apply for closure #1 in Picker<>.init<A>(_:image:sources:selection:content:), (uint64_t)v40, (void (*)(uint64_t))partial apply for closure #1 in Picker<>.init(_:image:selection:content:), (uint64_t)v34, v22, a11, v33, a12, v23, a13, a14, a15);
}

uint64_t sub_1876CFF84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v3 - 264), v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v1, v4);
}

uint64_t partial apply for closure #1 in Picker<>.init(_:image:selection:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in Toggle<>.init<A>(_:image:sources:isOn:)(*(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 48), a1);
}

void Picker<>.init<A>(_:image:selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[16];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v25 = a8;
  v27 = a5;
  v26 = a4;
  v30 = a3;
  v28 = a2;
  v29 = a1;
  v31 = a9;
  v16 = type metadata accessor for Binding();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v24 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v24 - v20, a3, v16, v19);
  v41 = a6;
  v42 = a7;
  v43 = v25;
  v44 = a10;
  v45 = a11;
  v46 = a12;
  v47 = v26;
  v48 = v27;
  v32 = a6;
  v33 = a7;
  v34 = v25;
  v35 = a10;
  v36 = a11;
  v37 = a12;
  v38 = v29;
  v39 = a2;
  v22 = type metadata accessor for Label<Text, Image>();
  v23 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Picker.init(selection:content:label:)((uint64_t)v21, (void (*)(uint64_t))partial apply for closure #1 in Picker<>.init<A>(_:image:sources:selection:content:), (uint64_t)v40, (void (*)(uint64_t))partial apply for closure #2 in Picker<>.init<A>(_:image:selection:content:), v22, a7, v31, v23, a10, a11);
}

uint64_t sub_1876D015C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v4 - 272), v3);
  v5 = type metadata accessor for ImageResource();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(*(_QWORD *)(v4 - 288), v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v2, v0);
}

uint64_t partial apply for closure #1 in Picker<>.init<A>(_:image:sources:selection:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in View.searchable<A, B>(text:placement:prompt:suggestions:)(v1[8], v1[9], v1[3], v1[6], a1);
}

__n128 closure #2 in Picker<>.init<A>(_:image:selection:content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  __n128 result;
  __int128 v21;
  char v22;
  __n128 v23;

  v8 = type metadata accessor for ImageResource();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, a1, a3, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v17, (uint64_t)v12, a3, (uint64_t)&v21);
  v19 = v22;
  result = v23;
  *(_OWORD *)a4 = v21;
  *(_BYTE *)(a4 + 16) = v19;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

double partial apply for closure #2 in Picker<>.init<A>(_:image:selection:content:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  double result;

  *(_QWORD *)&result = closure #2 in Picker<>.init<A>(_:image:selection:content:)(v1[8], v1[9], v1[4], a1).n128_u64[0];
  return result;
}

void Picker<>.init<A, B>(_:image:sources:selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[16];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v32 = a7;
  v27 = a6;
  v26 = a5;
  v30 = a4;
  v29 = a3;
  v28 = a1;
  v31 = a9;
  v16 = *a4;
  v17 = *(_QWORD *)(a8 - 8);
  v18 = MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v21, v22, v18);
  v45 = *(_QWORD *)(*(_QWORD *)(v16 + *MEMORY[0x1E0DEE2A8]) + 16);
  v46 = v32;
  v47 = a8;
  v48 = a10;
  v49 = a11;
  v50 = a12;
  v51 = a13;
  v52 = a14;
  v53 = v26;
  v54 = v27;
  v34 = v45;
  v35 = v32;
  v36 = a8;
  v37 = a10;
  v38 = a11;
  v39 = a12;
  v40 = a13;
  v41 = a14;
  v42 = v28;
  v43 = a2;
  v23 = type metadata accessor for Label<Text, Image>();
  v24 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Picker.init<A>(sources:selection:content:label:)((uint64_t)v20, (uint64_t)v30, (uint64_t (*)(uint64_t))partial apply for closure #1 in Picker<>.init<A, B>(_:image:sources:selection:content:), (uint64_t)v44, (void (*)(uint64_t))partial apply for closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:), (uint64_t)v33, v23, v32, v31, a8, v24, a11, a12, a13);
}

uint64_t sub_1876D0484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v5 - 320), v2);
  v6 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v3, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4, v1);
}

uint64_t closure #1 in Picker<>.init<A, B>(_:image:sources:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16(v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, a3);
}

uint64_t partial apply for closure #1 in Picker<>.init<A, B>(_:image:sources:selection:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in Picker<>.init<A, B>(_:image:sources:selection:content:)(v1[10], v1[11], v1[3], v1[7], a1);
}

__n128 closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  __n128 result;
  __int128 v21;
  char v22;
  __n128 v23;

  v8 = type metadata accessor for ImageResource();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, a1, a3, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v17, (uint64_t)v12, a3, (uint64_t)&v21);
  v19 = v22;
  result = v23;
  *(_OWORD *)a4 = v21;
  *(_BYTE *)(a4 + 16) = v19;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

uint64_t partial apply for closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:)()
{
  return partial apply for closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:));
}

void Picker.init<A>(selection:content:label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for PickerBuilder.Content();
}

void sub_1876D07CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - v14;
  v16 = type metadata accessor for Binding();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&a9 - v20, v10, v16, v19);
  (*(void (**)(uint64_t))(v12 - 160))(v21);
  v22 = PickerBuilder.Content.init(_:)(v9, v11, (uint64_t)v15);
  (*(void (**)(uint64_t))(v12 - 144))(v22);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerBuilder<A>.Content<A1>, a1);
  Picker.init(selection:content:label:)();
}

uint64_t sub_1876D08B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 192), v1);
}

void Picker.init<A, B>(selection:content:label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for PickerBuilder.Content();
}

void sub_1876D09A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&a9 - v15;
  v17 = *(_QWORD *)(v11 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v11, v20);
  (*(void (**)(uint64_t))(v13 - 176))(v22);
  v23 = PickerBuilder.Content.init(_:)(v9, v12, (uint64_t)v16);
  (*(void (**)(uint64_t))(v13 - 160))(v23);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerBuilder<A>.Content<A1>, a1);
  Picker.init<A>(selection:content:label:)();
}

uint64_t sub_1876D0A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 192), v0);
}

void Picker.init<A, B>(selection:content:label:footer:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[22];

  v25[11] = a4;
  v25[12] = a8;
  v25[8] = a7;
  v25[9] = a6;
  v25[10] = a5;
  v25[6] = a3;
  v25[7] = a2;
  v25[13] = a9;
  v25[3] = a15;
  v25[4] = a16;
  v25[0] = a1;
  v25[1] = a14;
  v25[2] = a11;
  v25[14] = a13;
  MEMORY[0x1E0C80A78](a1, a2);
  v25[5] = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  MEMORY[0x1E0C80A78](v19, v20);
  v25[15] = a10;
  v25[16] = v21;
  v25[17] = a12;
  v25[18] = v22;
  v25[19] = v24;
  v25[20] = v23;
  type metadata accessor for PickerBuilder.ContentWithFooter();
}

void sub_1876D0BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&a9 - v12;
  v14 = type metadata accessor for Binding();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&a9 - v18, v9, v14, v17);
  v20 = (*(uint64_t (**)(uint64_t))(v11 - 200))(v19);
  (*(void (**)(uint64_t))(v11 - 184))(v20);
  PickerBuilder.ContentWithFooter.init(content:footer:)(v10, *(_QWORD *)(v11 - 240), (uint64_t)v13);
}

void sub_1876D0C6C()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(void))(v1 - 168))();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerBuilder<A>.ContentWithFooter<A1, B1>, v0);
  Picker.init(selection:content:label:)();
}

uint64_t sub_1876D0CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 256), v0);
}

void Picker.init<A, B, C>(selection:content:label:footer:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[24];

  v27[14] = a8;
  v27[15] = a9;
  v27[9] = a7;
  v27[10] = a6;
  v27[11] = a5;
  v27[12] = a4;
  v27[7] = a3;
  v27[8] = a2;
  v27[13] = a18;
  v27[4] = a17;
  v27[5] = a1;
  v27[2] = a15;
  v27[3] = a16;
  v27[16] = a14;
  v27[1] = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v27[6] = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  MEMORY[0x1E0C80A78](v21, v22);
  v27[17] = v23;
  v27[18] = a11;
  v27[19] = a12;
  v27[20] = v24;
  v27[21] = v26;
  v27[22] = v25;
  type metadata accessor for PickerBuilder.ContentWithFooter();
}

void sub_1876D0DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - v14;
  v16 = *(_QWORD *)(v10 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v10, v19);
  v22 = (*(uint64_t (**)(uint64_t))(v13 - 208))(v21);
  (*(void (**)(uint64_t))(v13 - 192))(v22);
  PickerBuilder.ContentWithFooter.init(content:footer:)(v11, v12, (uint64_t)v15);
}

void sub_1876D0EA0()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(void))(v1 - 176))();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerBuilder<A>.ContentWithFooter<A1, B1>, v0);
  Picker.init<A>(selection:content:label:)();
}

uint64_t sub_1876D0EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 232), v0);
}

void Picker<>.init<A, B>(_:selection:content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for PickerBuilder.Content();
}

{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for PickerBuilder.Content();
}

void sub_1876D0FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  *(_QWORD *)(v13 - 176) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - v14;
  v16 = type metadata accessor for Binding();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&a9 - v20, v9, v16, v19);
  (*(void (**)(uint64_t))(v13 - 160))(v21);
  PickerBuilder.Content.init(_:)(v10, v12, (uint64_t)v15);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v13 - 152) + 16))(v11, *(_QWORD *)(v13 - 136), *(_QWORD *)(v13 - 144));
  *(_QWORD *)(v13 - 112) = Text.init<A>(_:)();
  *(_QWORD *)(v13 - 104) = v22;
  *(_BYTE *)(v13 - 96) = v23 & 1;
  *(_QWORD *)(v13 - 88) = v24;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerBuilder<A>.Content<A1>, *(_QWORD *)(v13 - 176));
  Picker.init(selection:content:label:)();
}

uint64_t sub_1876D110C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, uint64_t))(v3 + 8))(*(_QWORD *)(v5 - 184), v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
}

void Picker<>.init<A, B, C>(_:selection:content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for PickerBuilder.Content();
}

void sub_1876D1210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&a9 - v17;
  *(_QWORD *)(v15 - 184) = v9;
  v19 = *(_QWORD *)(v9 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (*(uint64_t (**)(char *, uint64_t, double))(v19 + 16))((char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v22);
  v11(v24);
  PickerBuilder.Content.init(_:)(v14, v13, (uint64_t)v18);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v15 - 160) + 16))(v12, *(_QWORD *)(v15 - 144), *(_QWORD *)(v15 - 152));
  *(_QWORD *)(v15 - 112) = Text.init<A>(_:)();
  *(_QWORD *)(v15 - 104) = v25;
  *(_BYTE *)(v15 - 96) = v26 & 1;
  *(_QWORD *)(v15 - 88) = v27;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerBuilder<A>.Content<A1>, a1);
  Picker.init<A>(selection:content:label:)();
}

uint64_t sub_1876D1344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v5 - 176), v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v1);
}

void Picker<>.init<A>(_:selection:content:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for PickerBuilder.Content();
}

void sub_1876D140C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - v14;
  v16 = type metadata accessor for Binding();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&a9 - v20, v9, v16, v19);
  (*(void (**)(uint64_t))(v12 - 168))(v21);
  PickerBuilder.Content.init(_:)(v11, v10, (uint64_t)v15);
  *(_QWORD *)(v12 - 112) = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)(v12 - 104) = v22;
  *(_BYTE *)(v12 - 96) = v23 & 1;
  *(_QWORD *)(v12 - 88) = v24;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerBuilder<A>.Content<A1>, a1);
  Picker.init(selection:content:label:)();
}

uint64_t sub_1876D1538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 184), v1);
}

void sub_1876D15F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&a9 - v15;
  v17 = *(_QWORD *)(v10 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v10, v20);
  (*(void (**)(uint64_t))(v13 - 192))(v22);
  PickerBuilder.Content.init(_:)(v11, v12, (uint64_t)v16);
  *(_QWORD *)(v13 - 120) = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)(v13 - 112) = v23;
  *(_BYTE *)(v13 - 104) = v24 & 1;
  *(_QWORD *)(v13 - 96) = v25;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerBuilder<A>.Content<A1>, a1);
  Picker.init<A>(selection:content:label:)();
}

uint64_t sub_1876D1728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 184), v1);
}

void Picker<>.init<A, B, C>(_:selection:content:footer:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[24];

  v24[5] = a7;
  v24[6] = a2;
  v24[11] = a6;
  v24[12] = a5;
  v24[8] = a4;
  v24[9] = a3;
  v24[16] = a8;
  v24[14] = a1;
  v24[15] = a13;
  v24[3] = a12;
  v24[4] = a14;
  v24[2] = a11;
  v24[13] = a9;
  v24[10] = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v24[7] = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  v24[17] = v19;
  v24[18] = v20;
  v24[19] = a10;
  v24[20] = v21;
  v24[21] = v23;
  v24[22] = v22;
  type metadata accessor for PickerBuilder.ContentWithFooter();
}

void sub_1876D1854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - v13;
  *(_QWORD *)(v12 - 264) = v10;
  v15 = type metadata accessor for Binding();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&a9 - v19, v9, v15, v18);
  v21 = (*(uint64_t (**)(uint64_t))(v12 - 200))(v20);
  (*(void (**)(uint64_t))(v12 - 176))(v21);
  PickerBuilder.ContentWithFooter.init(content:footer:)(v11, *(_QWORD *)(v12 - 232), (uint64_t)v14);
}

void sub_1876D1910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 - 192) + 16))(*(_QWORD *)(v1 - 216), *(_QWORD *)(v1 - 160), *(_QWORD *)(v1 - 168));
  *(_QWORD *)(v1 - 136) = Text.init<A>(_:)();
  *(_QWORD *)(v1 - 128) = v2;
  *(_BYTE *)(v1 - 120) = v3 & 1;
  *(_QWORD *)(v1 - 112) = v4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerBuilder<A>.ContentWithFooter<A1, B1>, v0);
  Picker.init(selection:content:label:)();
}

uint64_t sub_1876D1998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v5 - 224), v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void Picker<>.init<A, B, C, D>(_:selection:content:footer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for PickerBuilder.ContentWithFooter();
}

void sub_1876D1AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - v14;
  *(_QWORD *)(v13 - 232) = v10;
  v16 = *(_QWORD *)(v10 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (*(uint64_t (**)(char *, uint64_t, double))(v16 + 16))((char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v19);
  v22 = (*(uint64_t (**)(uint64_t))(v13 - 208))(v21);
  (*(void (**)(uint64_t))(v13 - 184))(v22);
  PickerBuilder.ContentWithFooter.init(content:footer:)(v11, v12, (uint64_t)v15);
}

void sub_1876D1B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v2 - 200) + 16))(v0, *(_QWORD *)(v2 - 168), *(_QWORD *)(v2 - 176));
  *(_QWORD *)(v2 - 136) = Text.init<A>(_:)();
  *(_QWORD *)(v2 - 128) = v3;
  *(_BYTE *)(v2 - 120) = v4 & 1;
  *(_QWORD *)(v2 - 112) = v5;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerBuilder<A>.ContentWithFooter<A1, B1>, v1);
  Picker.init<A>(selection:content:label:)();
}

uint64_t sub_1876D1C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v5 - 224), v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
}

void Picker<>.init<A, B>(_:selection:content:footer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for PickerBuilder.ContentWithFooter();
}

void sub_1876D1D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v12 - 216) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - v13;
  v15 = type metadata accessor for Binding();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&a9 - v19, v9, v15, v18);
  v21 = (*(uint64_t (**)(uint64_t))(v12 - 200))(v20);
  (*(void (**)(uint64_t))(v12 - 192))(v21);
  PickerBuilder.ContentWithFooter.init(content:footer:)(v11, v10, (uint64_t)v14);
}

void sub_1876D1DF4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  *(_QWORD *)(v0 - 136) = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)(v0 - 128) = v1;
  *(_BYTE *)(v0 - 120) = v2 & 1;
  *(_QWORD *)(v0 - 112) = v3;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerBuilder<A>.ContentWithFooter<A1, B1>, *(_QWORD *)(v0 - 216));
  Picker.init(selection:content:label:)();
}

uint64_t sub_1876D1E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 232), v1);
}

void Picker<>.init<A, B, C>(_:selection:content:footer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for PickerBuilder.ContentWithFooter();
}

void sub_1876D1F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - v14;
  v16 = *(_QWORD *)(v10 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v10, v19);
  v22 = (*(uint64_t (**)(uint64_t))(v13 - 208))(v21);
  (*(void (**)(uint64_t))(v13 - 200))(v22);
  PickerBuilder.ContentWithFooter.init(content:footer:)(v12, v11, (uint64_t)v15);
}

void sub_1876D2040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)(v1 - 136) = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)(v1 - 128) = v2;
  *(_BYTE *)(v1 - 120) = v3 & 1;
  *(_QWORD *)(v1 - 112) = v4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerBuilder<A>.ContentWithFooter<A1, B1>, v0);
  Picker.init<A>(selection:content:label:)();
}

uint64_t sub_1876D20DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 224), v0);
}

void Picker.init<A>(selection:content:label:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v46 = a7;
  v47 = a4;
  v40 = a2;
  v41 = a3;
  v39 = a1;
  v50 = a8;
  v44 = a10;
  v45 = a9;
  v48 = a12;
  v49 = a11;
  v43 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v42 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *(_QWORD *)(v16 - 8);
  v17 = v36;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v22 - 8);
  v35[1] = v22;
  v24 = v23;
  v37 = v23;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v35 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Binding();
  v30 = *(_QWORD *)(v29 - 8);
  v38 = v29;
  v32 = MEMORY[0x1E0C80A78](v29, v31);
  (*(void (**)(char *, uint64_t, double))(v30 + 16))((char *)v35 - v33, a1, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v28, v40, a6);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v35[0] = a5;
  v34(v21, v41, a5);
  Picker.init(selection:content:label:)();
}

void sub_1876D22C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *(_QWORD *)(v6 - 200);
  v9 = *(_QWORD *)(v6 - 176);
  v8 = *(_QWORD *)(v6 - 168);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 + 16))(*(_QWORD *)(v6 - 208), v8, v9);
  AnyView.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  v10 = *(_QWORD *)(v6 - 272);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 256) + 8))(v2, v10);
  v11 = *(_QWORD *)(v6 - 264);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 248) + 8))(v5, v11);
  (*(void (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v6 - 232), *(_QWORD *)(v6 - 240));
  *(_QWORD *)(v6 - 136) = v10;
  *(_QWORD *)(v6 - 128) = v3;
  *(_QWORD *)(v6 - 120) = v11;
  *(_QWORD *)(v6 - 112) = v4;
  v12 = *(_QWORD *)(v6 - 152);
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = v12;
  type metadata accessor for Picker();
}

uint64_t sub_1876D236C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(int *)(a1 + 76);
  v4 = *(_QWORD *)(v2 - 144);
  result = swift_release();
  *(_QWORD *)(v4 + v3) = v1;
  return result;
}

void Picker.init<A, B>(selection:content:label:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v44 = a4;
  v45 = a2;
  v36 = a1;
  v48 = a8;
  v46 = a11;
  v47 = a12;
  v42 = a6;
  v43 = a14;
  v38 = a13;
  v39 = a3;
  v40 = *(_QWORD *)(a9 - 8);
  v41 = a10;
  MEMORY[0x1E0C80A78](a1, a1);
  v34 = *(_QWORD *)(v16 - 8);
  v17 = v34;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *(_QWORD *)(v22 - 8);
  v23 = v35;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v34 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(v28 - 8);
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  (*(void (**)(char *, double))(v33 + 16))((char *)&v34 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v27, v45, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, v39, a5);
  Picker.init<A>(selection:content:label:)();
}

void sub_1876D2550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(v8 - 208);
  v10 = *(_QWORD *)(v8 - 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v4, v10, v1);
  AnyView.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 256) + 8))(v3, v2);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 248) + 8))(*(_QWORD *)(v8 - 168), v7);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 232) + 8))(*(_QWORD *)(v8 - 240), v0);
  *(_QWORD *)(v8 - 136) = v2;
  *(_QWORD *)(v8 - 128) = v5;
  *(_QWORD *)(v8 - 120) = v7;
  *(_QWORD *)(v8 - 112) = v6;
  v11 = *(_QWORD *)(v8 - 152);
  *(_QWORD *)(v8 - 104) = *(_QWORD *)(v8 - 160);
  *(_QWORD *)(v8 - 96) = v11;
  type metadata accessor for Picker();
}

uint64_t sub_1876D25EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(int *)(a1 + 76);
  v4 = *(_QWORD *)(v2 - 144);
  result = swift_release();
  *(_QWORD *)(v4 + v3) = v1;
  return result;
}

void Picker.init<A>(selection:content:label:currentValueLabel:)(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;

  v37 = a8;
  v38 = a5;
  v43 = a7;
  v44 = a6;
  v35[1] = a3;
  v36 = a2;
  v45 = a9;
  v42 = a13;
  v41 = a14;
  v39 = a4;
  v40 = a15;
  v35[0] = a11;
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Binding();
  v27 = *(_QWORD *)(v26 - 8);
  v29 = MEMORY[0x1E0C80A78](v26, v28);
  v31 = (char *)v35 - v30;
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v27 + 16))((char *)v35 - v30, a1, v26, v29);
  v33 = v36(v32);
  v34 = v39(v33);
  v44(v34);
  Picker.init<A>(selection:content:label:currentValueLabel:)((uint64_t)v31, (uint64_t)v25, (uint64_t)v21, (uint64_t)v17, v37, v35[0], a12, v45, v42, *((uint64_t *)&v42 + 1), v41, v40);
}

uint64_t sub_1876D27B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void Picker.init<A, B>(sources:selection:content:label:currentValueLabel:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  void (*v70)(uint64_t);
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;

  v69 = a8;
  v70 = a7;
  v67 = a6;
  v68 = a5;
  v65 = a4;
  v66 = a3;
  v71 = a9;
  v72 = a2;
  v61 = a18;
  v59 = a1;
  v60 = a15;
  v51 = a14;
  v73 = a16;
  v52 = a17;
  v57 = a13;
  v18 = *a2;
  MEMORY[0x1E0C80A78](a1, a2);
  v64 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v20;
  v53 = v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v63 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = a11;
  MEMORY[0x1E0C80A78](v25, v26);
  v58 = (char *)&v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = *(_QWORD *)(*(_QWORD *)(v28 + 8) + 8);
  v29 = type metadata accessor for LazySequence();
  v55 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v50 - v31;
  v33 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v18 + 8);
  v56 = type metadata accessor for LazyMapSequence();
  MEMORY[0x1E0C80A78](v56, v34);
  v36 = (char *)&v50 - v35;
  Sequence.enumerated()();
  v37 = (_QWORD *)swift_allocObject();
  v37[2] = v21;
  v37[3] = a11;
  v38 = v57;
  v37[4] = a12;
  v37[5] = v38;
  v37[6] = a14;
  v40 = v60;
  v39 = v61;
  v41 = v73;
  v37[7] = v60;
  v37[8] = v41;
  v37[9] = v52;
  v37[10] = v39;
  v37[11] = v72;
  swift_retain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC330], v29);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  v42 = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v32, v29);
  v43 = (uint64_t)v58;
  v44 = v66(v42);
  v45 = (uint64_t)v63;
  v46 = v68(v44);
  v47 = (uint64_t)v64;
  v70(v46);
  v48 = *(_QWORD *)(v33 + 16);
  v74 = v62;
  v49 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC860], v56, &v74);
  Picker.init<A, B>(selection:content:label:currentValueLabel:)((uint64_t)v36, v43, v45, v47, v53, v48, v54, v71, v38, v51, v40, v73, v49, v39);
}

uint64_t sub_1876D2AE0()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(*(_QWORD *)(v1 - 216), v0);
}

uint64_t partial apply for closure #1 in Picker.init<A, B>(sources:selection:content:label:currentValueLabel:)()
{
  return swift_getAtKeyPath();
}

void Picker<>.init<A>(_:selection:content:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, void (*a7)(void)@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  void (*v40)(void);
  uint64_t v41;
  _QWORD v42[2];
  char v43;
  uint64_t v44;

  v40 = a7;
  v41 = a8;
  v32 = a6;
  v33 = a1;
  v35 = a3;
  v34 = a2;
  v39 = a13;
  v38 = a14;
  v36 = a4;
  v37 = a9;
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Binding();
  v22 = *(_QWORD *)(v21 - 8);
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v26 = (char *)&v31 - v25;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v22 + 16))((char *)&v31 - v25, a5, v21, v24);
  v32(v27);
  v42[0] = Text.init(_:tableName:bundle:comment:)();
  v42[1] = v28;
  v43 = v29 & 1;
  v44 = v30;
  v40();
  Picker.init<A>(selection:content:label:currentValueLabel:)((uint64_t)v26, (uint64_t)v20, (uint64_t)v42, (uint64_t)v16, MEMORY[0x1E0CE6CF8], a11, a12, v41, MEMORY[0x1E0CE6C58], v39, *((uint64_t *)&v39 + 1), v38);
}

uint64_t sub_1876D2CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void Picker<>.init<A, B>(_:sources:selection:content:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(void), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  void (*v62)(void);
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  char v69;
  uint64_t v70;

  v56 = a8;
  v57 = a7;
  v64 = a9;
  v65 = a6;
  v53 = a5;
  v60 = a3;
  v58 = a1;
  v59 = a2;
  v63 = a11;
  v61 = a4;
  v62 = a10;
  v49 = a18;
  v48 = a16;
  v46 = a17;
  v66 = a15;
  v18 = *a6;
  v47 = a14;
  MEMORY[0x1E0C80A78](a1, a2);
  v55 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = a12;
  MEMORY[0x1E0C80A78](v20, v21);
  v51 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8);
  v24 = type metadata accessor for LazySequence();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v46 - v27;
  v29 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v18 + 8);
  v52 = type metadata accessor for LazyMapSequence();
  MEMORY[0x1E0C80A78](v52, v30);
  v32 = (char *)&v46 - v31;
  Sequence.enumerated()();
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = a12;
  v33[3] = a13;
  v34 = v66;
  v33[4] = a14;
  v33[5] = v34;
  v35 = v48;
  v36 = v46;
  v33[6] = v48;
  v33[7] = v36;
  v37 = v49;
  v33[8] = v49;
  v33[9] = v65;
  swift_retain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC330], v24);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  v38 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v28, v24);
  v39 = (uint64_t)v51;
  v57(v38);
  v68[0] = Text.init(_:tableName:bundle:comment:)();
  v68[1] = v40;
  v69 = v41 & 1;
  v70 = v42;
  v43 = (uint64_t)v55;
  v62();
  v44 = *(_QWORD *)(v29 + 16);
  v67 = v54;
  v45 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC860], v52, &v67);
  Picker.init<A, B>(selection:content:label:currentValueLabel:)((uint64_t)v32, v39, (uint64_t)v68, v43, MEMORY[0x1E0CE6CF8], v44, v50, v64, v47, MEMORY[0x1E0CE6C58], v66, v35, v45, v37);
}

uint64_t sub_1876D302C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(*(_QWORD *)(v1 - 248), v0);
}

void Picker<>.init<A, B>(_:selection:content:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, void (*a4)(void)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD v35[3];
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  char v47;
  uint64_t v48;

  v35[2] = a6;
  v36 = a3;
  v42 = a5;
  v43 = a4;
  v35[1] = a2;
  v45 = a8;
  v41 = a11;
  v39 = a7;
  v40 = a13;
  v37 = a1;
  v38 = a12;
  v44 = a10;
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Binding();
  v26 = *(_QWORD *)(v25 - 8);
  v28 = MEMORY[0x1E0C80A78](v25, v27);
  v30 = (char *)v35 - v29;
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v26 + 16))((char *)v35 - v29, a2, v25, v28);
  v36(v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, v37, a9);
  v46[0] = Text.init<A>(_:)();
  v46[1] = v32;
  v47 = v33 & 1;
  v48 = v34;
  v43();
  Picker.init<A>(selection:content:label:currentValueLabel:)((uint64_t)v30, (uint64_t)v24, (uint64_t)v46, (uint64_t)v15, MEMORY[0x1E0CE6CF8], v39, v44, v45, MEMORY[0x1E0CE6C58], v41, *((uint64_t *)&v41 + 1), v40);
}

uint64_t sub_1876D322C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v5 - 232), v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v1);
}

void Picker<>.init<A, B, C>(_:sources:selection:content:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, void (*a6)(void)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(void);
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[2];
  char v74;
  uint64_t v75;

  v65 = a7;
  v66 = a6;
  v61 = a5;
  v62 = a4;
  v67 = a9;
  v68 = a3;
  v58 = a2;
  v64 = a1;
  v56 = a17;
  v55 = a16;
  v69 = a14;
  v49 = a15;
  v70 = a13;
  v71 = a12;
  v18 = *a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v63 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v57 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v53 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8);
  v28 = type metadata accessor for LazySequence();
  v51 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v48 - v30;
  v32 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v18 + 8);
  v54 = type metadata accessor for LazyMapSequence();
  MEMORY[0x1E0C80A78](v54, v33);
  v50 = (uint64_t)&v48 - v34;
  Sequence.enumerated()();
  v35 = (_QWORD *)swift_allocObject();
  v35[2] = a8;
  v35[3] = a10;
  v36 = v71;
  v35[4] = a11;
  v35[5] = v36;
  v37 = v69;
  v35[6] = v70;
  v35[7] = v37;
  v38 = v55;
  v35[8] = v49;
  v35[9] = v38;
  v39 = v56;
  v35[10] = v56;
  v35[11] = v68;
  swift_retain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC330], v28);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  v40 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v31, v28);
  v41 = (uint64_t)v53;
  v62(v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v57, v64, a11);
  v73[0] = Text.init<A>(_:)();
  v73[1] = v42;
  v74 = v43 & 1;
  v75 = v44;
  v45 = (uint64_t)v63;
  v66();
  v46 = *(_QWORD *)(v32 + 16);
  v72 = v60;
  v47 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC860], v54, &v72);
  Picker.init<A, B>(selection:content:label:currentValueLabel:)(v50, v41, (uint64_t)v73, v45, MEMORY[0x1E0CE6CF8], v46, v52, v67, v71, MEMORY[0x1E0CE6C58], v70, v69, v47, v39);
}

uint64_t sub_1876D35E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(*(_QWORD *)(v4 - 240), v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v3);
}

uint64_t sub_1876D3634()
{
  swift_release();
  return swift_deallocObject();
}

void Picker<>.init<A>(_:image:selection:content:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  v39 = a7;
  v40 = a8;
  v36 = a9;
  v37 = a11;
  v38 = a10;
  v33 = a15;
  v32 = a16;
  v34 = a14;
  v35 = a13;
  v22 = type metadata accessor for Binding();
  v23 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)&v31 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)&v31 - v26, a6, v22, v25);
  v42 = a1;
  v43 = a2;
  v44 = a3;
  v45 = a4;
  v46 = a5;
  v28 = type metadata accessor for Label<Text, Image>();
  v29 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  *((_QWORD *)&v30 + 1) = v33;
  *(_QWORD *)&v30 = v29;
  Picker.init<A>(selection:content:label:currentValueLabel:)((uint64_t)v27, v39, v40, (uint64_t (*)(uint64_t))partial apply for closure #1 in Picker<>.init(_:image:selection:content:), (uint64_t)v41, v38, v37, v28, v36, a12, v35, v34, v30, *((uint64_t *)&v33 + 1), v32);
}

uint64_t sub_1876D3774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0, v4);
}

void Picker<>.init<A, B>(_:image:sources:selection:content:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, uint64_t (*a8)(uint64_t)@<X7>, uint64_t a9@<X8>, uint64_t a10, void (*a11)(uint64_t), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 a16, uint64_t a17, uint64_t a18)
{
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  _QWORD *v38;
  uint64_t (*v39)(uint64_t);
  _BYTE v40[16];
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v38 = a7;
  v39 = a8;
  v34 = a9;
  v36 = a11;
  v37 = a10;
  v35 = a12;
  v33 = a13;
  v30 = a16;
  v31 = a6;
  v32 = a15;
  v23 = *(_QWORD *)(a14 - 8);
  v24 = MEMORY[0x1E0C80A78](a1, a2);
  v26 = (char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v26, v27, a14, v24);
  v41 = a1;
  v42 = a2;
  v43 = a3;
  v44 = a4;
  v45 = a5;
  v28 = type metadata accessor for Label<Text, Image>();
  v29 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Picker.init<A, B>(sources:selection:content:label:currentValueLabel:)((uint64_t)v26, v38, v39, v37, (uint64_t (*)(uint64_t))partial apply for closure #1 in Picker<>.init(_:image:selection:content:), (uint64_t)v40, v36, v35, v34, v28, v33, a14, v32, v29, v30, *((uint64_t *)&v30 + 1), a17, a18);
}

uint64_t sub_1876D38E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v3 - 216), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0, v4);
}

void Picker<>.init<A, B>(_:image:selection:content:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  char v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v38 = a6;
  v39 = a7;
  v36 = a4;
  v37 = a5;
  v32 = a3;
  v40 = a2;
  v34 = a1;
  v35 = a9;
  v31 = a16;
  v30 = a15;
  v29 = a14;
  v33 = a11;
  v19 = type metadata accessor for Binding();
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&v29 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v29 - v23, a3, v19, v22);
  v42 = a8;
  v43 = a10;
  v44 = a11;
  v45 = a12;
  v25 = v29;
  v46 = a13;
  v47 = v29;
  v26 = v31;
  v48 = v30;
  v49 = v31;
  v50 = a1;
  v51 = v40;
  v27 = type metadata accessor for Label<Text, Image>();
  *(_QWORD *)&v28 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  *((_QWORD *)&v28 + 1) = a13;
  Picker.init<A>(selection:content:label:currentValueLabel:)((uint64_t)v24, v36, v37, (uint64_t (*)(uint64_t))partial apply for closure #1 in Picker<>.init<A, B>(_:image:selection:content:currentValueLabel:), (uint64_t)v41, v38, v39, v27, v35, a8, a10, a12, v28, v25, v26);
}

uint64_t sub_1876D3A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 264), v0);
  v3 = type metadata accessor for ImageResource();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(*(_QWORD *)(v2 - 200), v3);
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v2 - 256) - 8) + 8))(*(_QWORD *)(v2 - 248));
}

__n128 closure #1 in Picker<>.init<A, B>(_:image:selection:content:currentValueLabel:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  __n128 result;
  __int128 v21;
  char v22;
  __n128 v23;

  v8 = type metadata accessor for ImageResource();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, a1, a3, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v17, (uint64_t)v12, a3, (uint64_t)&v21);
  v19 = v22;
  result = v23;
  *(_OWORD *)a4 = v21;
  *(_BYTE *)(a4 + 16) = v19;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

uint64_t partial apply for closure #1 in Picker<>.init<A, B>(_:image:selection:content:currentValueLabel:)()
{
  return partial apply for closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in Picker<>.init<A, B>(_:image:selection:content:currentValueLabel:));
}

uint64_t partial apply for closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[10], v1[11], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

void Picker<>.init<A, B, C>(_:image:sources:selection:content:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  char v43[16];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v41 = a7;
  v42 = a8;
  v39 = a5;
  v40 = a6;
  v37 = a4;
  v36 = a3;
  v33 = a2;
  v35 = a1;
  v38 = a9;
  v31 = a18;
  v30 = a17;
  v29 = a16;
  v34 = a12;
  v32 = a10;
  v19 = *a4;
  v20 = *(_QWORD *)(a11 - 8);
  v21 = MEMORY[0x1E0C80A78](a1, a2);
  v23 = (char *)&v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, v24, a11, v21);
  v44 = *(_QWORD *)(*(_QWORD *)(v19 + *MEMORY[0x1E0DEE2A8]) + 16);
  v45 = a10;
  v46 = a11;
  v47 = a12;
  v48 = a13;
  v49 = a14;
  v50 = a15;
  v25 = v29;
  v51 = v29;
  v52 = v30;
  v26 = v31;
  v53 = v31;
  v54 = a1;
  v55 = v33;
  v27 = type metadata accessor for Label<Text, Image>();
  v28 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Picker.init<A, B>(sources:selection:content:label:currentValueLabel:)((uint64_t)v23, v37, v39, v40, (uint64_t (*)(uint64_t))partial apply for closure #1 in Picker<>.init<A, B, C>(_:image:sources:selection:content:currentValueLabel:), (uint64_t)v43, v41, v42, v38, v27, v32, a11, a13, v28, a14, a15, v25, v26);
}

uint64_t sub_1876D3DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v3 - 264), v1);
  v4 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0, v4);
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v3 - 280) - 8) + 8))(*(_QWORD *)(v3 - 272));
}

__n128 closure #1 in Picker<>.init<A, B, C>(_:image:sources:selection:content:currentValueLabel:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  __n128 result;
  __int128 v21;
  char v22;
  __n128 v23;

  v8 = type metadata accessor for ImageResource();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, a1, a3, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v17, (uint64_t)v12, a3, (uint64_t)&v21);
  v19 = v22;
  result = v23;
  *(_OWORD *)a4 = v21;
  *(_BYTE *)(a4 + 16) = v19;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

double partial apply for closure #1 in Picker<>.init<A, B, C>(_:image:sources:selection:content:currentValueLabel:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  double result;

  *(_QWORD *)&result = closure #1 in Picker<>.init<A, B, C>(_:image:sources:selection:content:currentValueLabel:)(v1[12], v1[13], v1[5], a1).n128_u64[0];
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in Picker<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Picker()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Picker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(a3 + 32);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v5 + 64) + v9;
  v11 = *(_QWORD *)(v8 + 64) + 7;
  v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000;
  v13 = *a2;
  *a1 = *a2;
  if ((v9 | v6) > 7 || v12 != 0 || ((v11 + ((v10 + ((v6 + 8) & ~v6)) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v13 + (((v9 | v6) & 0xF8 ^ 0x1F8) & ((v9 | v6) + 16)));
  }
  else
  {
    v16 = ~v9;
    v17 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v18 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v19(v17, v18, v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((v17 + v10) & v16, (v18 + v10) & v16, v7);
    *(_QWORD *)((v11 + ((v17 + v10) & v16)) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v11 + ((v18 + v10) & v16)) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for Picker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 8))((v5
                                                                                            + *(_QWORD *)(v4 + 64)
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 80));
  return swift_release();
}

_QWORD *initializeWithCopy for Picker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v8) & ~v13;
  v16 = (v14 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v15, v16);
  *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v12 + 64) + 7 + v16) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for Picker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v10 + v12;
  v14 = (v13 + v8) & ~v12;
  v15 = (v13 + v9) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v14, v15);
  *(_QWORD *)((*(_QWORD *)(v11 + 64) + 7 + v14) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v11 + 64)
                                                                                       + 7
                                                                                       + v15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for Picker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v9 + v11;
  v13 = (v12 + v7) & ~v11;
  v14 = (v12 + v8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v13, v14);
  *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v13) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v10 + 64) + 7 + v14) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for Picker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v10 + v12;
  v14 = (v13 + v8) & ~v12;
  v15 = (v13 + v9) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v14, v15);
  *(_QWORD *)((*(_QWORD *)(v11 + 64) + 7 + v14) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v11 + 64)
                                                                                       + 7
                                                                                       + v15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Picker(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3 + 32);
  v7 = *(_QWORD *)(v6 - 8);
  if (v5 <= *(_DWORD *)(v7 + 84))
    v8 = *(_DWORD *)(v7 + 84);
  else
    v8 = *(_DWORD *)(v4 + 84);
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = v8;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = *(_QWORD *)(v4 + 64);
  v12 = *(unsigned __int8 *)(v7 + 80);
  if (v9 >= a2)
  {
    if ((v8 & 0x80000000) != 0)
    {
      v18 = ((unint64_t)a1 + v10 + 8) & ~v10;
      if (v5 == v9)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
      else
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))((v18 + v11 + v12) & ~v12, *(unsigned int *)(v7 + 84), v6);
    }
    else
    {
      v17 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v17) = -1;
      return (v17 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v7 + 64) + ((v11 + v12 + ((v10 + 8) & ~v10)) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v9 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1876D4618 + 4 * byte_187C50BE0[v15]))();
  }
}

void storeEnumTagSinglePayload for Picker(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  if (v8 >= a3)
  {
    v11 = 0u;
    if (a2 <= v8)
      goto LABEL_20;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64)
         + ((*(_DWORD *)(v5 + 64)
           + *(unsigned __int8 *)(v6 + 80)
           + ((*(unsigned __int8 *)(v5 + 80) + 8) & ~*(unsigned __int8 *)(v5 + 80))) & ~*(unsigned __int8 *)(v6 + 80))
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = a3 - v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v8)
LABEL_20:
      __asm { BR              X6 }
  }
  if (((*(_DWORD *)(v6 + 64)
       + ((*(_DWORD *)(v5 + 64)
         + *(unsigned __int8 *)(v6 + 80)
         + ((*(unsigned __int8 *)(v5 + 80) + 8) & ~*(unsigned __int8 *)(v5 + 80))) & ~*(unsigned __int8 *)(v6 + 80))
       + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v8 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64)+ ((*(_QWORD *)(v5 + 64)+ *(unsigned __int8 *)(v6 + 80)+ ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_1876D4800()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1876D4860);
}

void sub_1876D4808(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1876D4810);
  JUMPOUT(0x1876D4860);
}

void sub_1876D4820()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876D4860);
}

void sub_1876D4828()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1876D4860);
}

void sub_1876D4830(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x1876D485CLL);
      JUMPOUT(0x1876D4858);
    }
    JUMPOUT(0x1876D483CLL);
  }
  JUMPOUT(0x1876D4860);
}

void type metadata accessor for Picker()
{
  JUMPOUT(0x18D75FF28);
}

void sub_1876D48B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 32);
  type metadata accessor for ResolvedPicker(255, v4, v5, a4);
  v7 = type metadata accessor for PickerStyleConfiguration.Label(255, v4, v5, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.Label, v7);
  type metadata accessor for StaticSourceWriter();
}

void sub_1876D4924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for PickerStyleConfiguration.Content(255, v0, v1, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.Content, v3);
  type metadata accessor for StaticSourceWriter();
}

void sub_1876D4970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for PickerStyleConfiguration.CurrentValueLabel(255, v0, v1, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.CurrentValueLabel, v3);
  type metadata accessor for OptionalSourceWriter();
}

uint64_t sub_1876D49CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD v7[16];

  v2 = type metadata accessor for ModifiedContent();
  v7[0] = &protocol witness table for ResolvedPicker<A>;
  v7[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v3 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v7);
  v6[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v5[0] = MEMORY[0x18D75FFDC](v3, v1, v6);
  v5[1] = &protocol witness table for OptionalSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](v3, v2, v5);
}

uint64_t partial apply for closure #1 in Picker.init<A>(selection:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Binding();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

ValueMetadata *type metadata accessor for TabItem()
{
  return &type metadata for TabItem;
}

void destroy for TabItem.RootView(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 104) & 1) != 0)
  {

  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for TabItem.RootView(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  id v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  id v10;

  v4 = *(_BYTE *)(a2 + 104);
  if ((v4 & 1) != 0)
  {
    v5 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v6 = v5;
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    v9 = *(void **)(a2 + 80);
    v8 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 88) = v8;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_retain();
    swift_bridgeObjectRetain();
    v10 = v9;
    swift_bridgeObjectRetain();
  }
  *(_BYTE *)(a1 + 104) = v4;
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  return a1;
}

uint64_t assignWithCopy for TabItem.RootView(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  if (a1 != a2)
  {
    outlined destroy of TabItem.RootView.WrappedView(a1);
    if ((*(_BYTE *)(a2 + 104) & 1) != 0)
    {
      v4 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 104) = 1;
      v5 = v4;
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v7 = *(void **)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v7;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = 0;
      swift_retain();
      swift_bridgeObjectRetain();
      v8 = v7;
      swift_bridgeObjectRetain();
    }
  }
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  return a1;
}

uint64_t outlined destroy of TabItem.RootView.WrappedView(uint64_t a1)
{
  destroy for TabItem.RootView.WrappedView(a1);
  return a1;
}

uint64_t assignWithTake for TabItem.RootView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (a1 != a2)
  {
    outlined destroy of TabItem.RootView.WrappedView(a1);
    v4 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v4;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
  }
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabItem.RootView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 106))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TabItem.RootView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 106) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 106) = 0;
    if (a2)
      *(_BYTE *)(result + 104) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabItem.RootView()
{
  return &type metadata for TabItem.RootView;
}

void destroy for TabItem.RootView.WrappedView(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 104);
  if (v2 >= 2)
    v2 = *(_DWORD *)a1 + 2;
  if (v2 == 1)
  {

  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for TabItem.RootView.WrappedView(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  void *v5;
  id v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  id v11;

  v4 = *(unsigned __int8 *)(a2 + 104);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    v5 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v6 = v5;
    v7 = 1;
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    v10 = *(void **)(a2 + 80);
    v9 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v9;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_retain();
    swift_bridgeObjectRetain();
    v11 = v10;
    swift_bridgeObjectRetain();
    v7 = 0;
  }
  *(_BYTE *)(a1 + 104) = v7;
  return a1;
}

uint64_t assignWithCopy for TabItem.RootView.WrappedView(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 104);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {

    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    v5 = *(unsigned __int8 *)(a2 + 104);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 104) = 1;
      v7 = v6;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v9 = *(void **)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v9;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = 0;
      swift_retain();
      swift_bridgeObjectRetain();
      v10 = v9;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithTake for TabItem.RootView.WrappedView(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 104);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
    {

    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    v5 = *(unsigned __int8 *)(a2 + 104);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v7 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v7;
      v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v9;
    }
    *(_BYTE *)(a1 + 104) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TabItem.RootView.WrappedView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 105))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TabItem.RootView.WrappedView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 89) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 105) = 0;
    if (a2)
      *(_BYTE *)(result + 104) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TabItem.RootView.WrappedView(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 104);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for TabItem.RootView.WrappedView(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 > 1)
  {
    v2 = a2 - 2;
    *(_QWORD *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)result = v2;
  }
  *(_BYTE *)(result + 104) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TabItem.RootView.WrappedView()
{
  return &type metadata for TabItem.RootView.WrappedView;
}

uint64_t destroy for TabEntry(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 264);
  if (v2 < 2)
  {
    if (v2 == 1)
      goto LABEL_3;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  if (*(_DWORD *)a1 != -1)
    goto LABEL_8;
LABEL_3:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = outlined consume of TabCustomizationID.Base();
  if (*(_QWORD *)(a1 + 72))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    swift_release();
    swift_bridgeObjectRelease();

    result = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 176))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 152);
    swift_release();
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TabEntry(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v4 = *(unsigned __int8 *)(a2 + 264);
  if (v4 >= 2)
  {
    if (*(_DWORD *)a2 == -1)
      goto LABEL_3;
LABEL_6:
    v16 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v16;
    (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    v18 = *(void **)(a2 + 80);
    v17 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v18;
    *(_QWORD *)(a1 + 88) = v17;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 264) = 0;
    swift_retain();
    swift_bridgeObjectRetain();
    v19 = v18;
    swift_bridgeObjectRetain();
    return a1;
  }
  if (v4 != 1)
    goto LABEL_6;
LABEL_3:
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of TabCustomizationID.Base();
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  v9 = (_OWORD *)(a1 + 48);
  v10 = (_OWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 72);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 80) = v12;
    (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v9, v10);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    v14 = *(void **)(a2 + 128);
    v13 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v14;
    *(_QWORD *)(a1 + 136) = v13;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    swift_retain();
    swift_bridgeObjectRetain();
    v15 = v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v20;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v21 = *(_OWORD *)(a2 + 64);
    *v9 = *v10;
    *(_OWORD *)(a1 + 64) = v21;
    v22 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v22;
  }
  v23 = (_OWORD *)(a1 + 152);
  v24 = (_OWORD *)(a2 + 152);
  v25 = *(_QWORD *)(a2 + 176);
  if (v25)
  {
    v26 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = v25;
    *(_QWORD *)(a1 + 184) = v26;
    (**(void (***)(_OWORD *, _OWORD *))(v25 - 8))(v23, v24);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    v28 = *(void **)(a2 + 232);
    v27 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = v28;
    *(_QWORD *)(a1 + 240) = v27;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    swift_retain();
    swift_bridgeObjectRetain();
    v29 = v28;
    swift_bridgeObjectRetain();
  }
  else
  {
    v30 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v30;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    v31 = *(_OWORD *)(a2 + 168);
    *v23 = *v24;
    *(_OWORD *)(a1 + 168) = v31;
    v32 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v32;
  }
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = 1;
  return a1;
}

uint64_t assignWithCopy for TabEntry(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _OWORD *v9;
  __int128 *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  void *v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  if (a1 == a2)
    return a1;
  v4 = *(unsigned __int8 *)(a1 + 264);
  if (v4 >= 2)
    v4 = *(_DWORD *)a1 + 2;
  if (v4 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of TabCustomizationID.Base();
    if (*(_QWORD *)(a1 + 72))
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    if (!*(_QWORD *)(a1 + 176))
      goto LABEL_11;
    __swift_destroy_boxed_opaque_existential_1(a1 + 152);
    swift_release();
    swift_bridgeObjectRelease();

  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_bridgeObjectRelease();

  }
  swift_bridgeObjectRelease();
LABEL_11:
  v5 = *(unsigned __int8 *)(a2 + 264);
  if (v5 >= 2)
    v5 = *(_DWORD *)a2 + 2;
  if (v5 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_BYTE *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of TabCustomizationID.Base();
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    *(_BYTE *)(a1 + 40) = v8;
    v9 = (_OWORD *)(a1 + 48);
    v10 = (__int128 *)(a2 + 48);
    v11 = *(_QWORD *)(a2 + 72);
    if (v11)
    {
      *(_QWORD *)(a1 + 72) = v11;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      (**(void (***)(_OWORD *, __int128 *))(v11 - 8))(v9, v10);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v12 = *(void **)(a2 + 128);
      *(_QWORD *)(a1 + 128) = v12;
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_retain();
      swift_bridgeObjectRetain();
      v13 = v12;
      swift_bridgeObjectRetain();
    }
    else
    {
      v17 = *v10;
      v18 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v18;
      *v9 = v17;
      v19 = *(_OWORD *)(a2 + 96);
      v20 = *(_OWORD *)(a2 + 112);
      v21 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v20;
      *(_OWORD *)(a1 + 128) = v21;
      *(_OWORD *)(a1 + 96) = v19;
    }
    v22 = (_OWORD *)(a1 + 152);
    v23 = (__int128 *)(a2 + 152);
    v24 = *(_QWORD *)(a2 + 176);
    if (v24)
    {
      *(_QWORD *)(a1 + 176) = v24;
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      (**(void (***)(_OWORD *, __int128 *))(v24 - 8))(v22, v23);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      v25 = *(void **)(a2 + 232);
      *(_QWORD *)(a1 + 232) = v25;
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      swift_retain();
      swift_bridgeObjectRetain();
      v26 = v25;
      swift_bridgeObjectRetain();
    }
    else
    {
      v27 = *v23;
      v28 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v28;
      *v22 = v27;
      v29 = *(_OWORD *)(a2 + 200);
      v30 = *(_OWORD *)(a2 + 216);
      v31 = *(_OWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 216) = v30;
      *(_OWORD *)(a1 + 232) = v31;
      *(_OWORD *)(a1 + 200) = v29;
    }
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 264) = 1;
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v14;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v15 = *(void **)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 264) = 0;
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = v15;
    swift_bridgeObjectRetain();
  }
  return a1;
}

