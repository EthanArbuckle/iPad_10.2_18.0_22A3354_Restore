uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  _OWORD *v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v24 = v13[7];
  a9[6] = v13[6];
  a9[7] = v24;
  a9[8] = v13[8];
  *(_OWORD *)((char *)a9 + 137) = *(_OWORD *)((char *)v13 + 137);
  v25 = v13[3];
  a9[2] = v13[2];
  a9[3] = v25;
  v26 = v13[5];
  a9[4] = v13[4];
  a9[5] = v26;
  v27 = v13[1];
  *a9 = *v13;
  a9[1] = v27;
  a9[14] = v33;
  a9[15] = v34;
  a9[16] = v35;
  a9[10] = v29;
  a9[11] = v30;
  a9[12] = v31;
  a9[13] = v32;
  return outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>((uint64_t)v13);
}

__n128 specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, void (*a16)(uint64_t, uint64_t), uint64_t (*a17)(_QWORD))
{
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v20)(_QWORD);
  void *v29;
  _OWORD *v30;
  __n128 result;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v18 = v17;
  v20 = a17;
  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v29 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  a16(v18, a9);
  v30 = (_OWORD *)(a9 + *(int *)(v20(0) + 36));
  v30[4] = v36;
  v30[5] = v37;
  v30[6] = v38;
  *v30 = v32;
  v30[1] = v33;
  result = v35;
  v30[2] = v34;
  v30[3] = v35;
  return result;
}

_QWORD *specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  uint64_t v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v24 = *(_OWORD *)(v13 + 208);
  *(_OWORD *)(a9 + 192) = *(_OWORD *)(v13 + 192);
  *(_OWORD *)(a9 + 208) = v24;
  *(_OWORD *)(a9 + 224) = *(_OWORD *)(v13 + 224);
  v25 = *(_OWORD *)(v13 + 144);
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(v13 + 128);
  *(_OWORD *)(a9 + 144) = v25;
  v26 = *(_OWORD *)(v13 + 176);
  *(_OWORD *)(a9 + 160) = *(_OWORD *)(v13 + 160);
  *(_OWORD *)(a9 + 176) = v26;
  v27 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v27;
  v28 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(a9 + 112) = v28;
  v29 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v29;
  v30 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v30;
  *(_OWORD *)(a9 + 296) = v35;
  *(_OWORD *)(a9 + 312) = v36;
  *(_OWORD *)(a9 + 328) = v37;
  *(_OWORD *)(a9 + 344) = v38;
  *(_OWORD *)(a9 + 248) = v32;
  *(_QWORD *)(a9 + 240) = *(_QWORD *)(v13 + 240);
  *(_OWORD *)(a9 + 264) = v33;
  *(_OWORD *)(a9 + 280) = v34;
  return outlined retain of HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>((_QWORD *)v13);
}

uint64_t EnvironmentValues.toolbarButtonHoverShape.getter()
{
  uint64_t v0;
  unsigned __int16 v2;
  unsigned __int8 v3;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2 | (v3 << 16);
}

uint64_t specialized View.toolbarButtonLabel(ignoreEdge:)@<X0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  char v6[8];
  uint64_t KeyPath;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  _BYTE v15[104];

  v6[0] = a1;
  KeyPath = swift_getKeyPath();
  v8 = 0;
  v9 = swift_getKeyPath();
  v10 = 0;
  v11 = swift_getKeyPath();
  v12 = 0;
  v13 = swift_getKeyPath();
  v14 = 0;
  outlined init with copy of ToolbarButtonLabelModifier(v6, (uint64_t)v15);
  outlined destroy of ToolbarButtonLabelModifier((uint64_t)v6);
  outlined init with copy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v15, (uint64_t)(a2 + 4));
  v4 = v2[1];
  *a2 = *v2;
  a2[1] = v4;
  a2[2] = v2[2];
  *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v2 + 41);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v2);
  return outlined destroy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v15);
}

uint64_t specialized View.toolbarButtonLabel(ignoreEdge:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v12[8];
  uint64_t KeyPath;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  _BYTE v21[104];

  v12[0] = a1;
  KeyPath = swift_getKeyPath();
  v14 = 0;
  v15 = swift_getKeyPath();
  v16 = 0;
  v17 = swift_getKeyPath();
  v18 = 0;
  v19 = swift_getKeyPath();
  v20 = 0;
  outlined init with copy of ToolbarButtonLabelModifier(v12, (uint64_t)v21);
  outlined destroy of ToolbarButtonLabelModifier((uint64_t)v12);
  outlined init with copy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v21, a6 + 32);
  *(_QWORD *)a6 = a2;
  *(_QWORD *)(a6 + 8) = a3;
  *(_BYTE *)(a6 + 16) = a4 & 1;
  *(_QWORD *)(a6 + 24) = a5;
  swift_retain();
  return outlined destroy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v21);
}

uint64_t View.toolbarButtonLabel(ignoreEdge:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v7[8];
  uint64_t KeyPath;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  _BYTE v16[112];

  v7[0] = a1;
  KeyPath = swift_getKeyPath();
  v9 = 0;
  v10 = swift_getKeyPath();
  v11 = 0;
  v12 = swift_getKeyPath();
  v13 = 0;
  v14 = swift_getKeyPath();
  v15 = 0;
  outlined init with copy of ToolbarButtonLabelModifier(v7, (uint64_t)v16);
  outlined destroy of ToolbarButtonLabelModifier((uint64_t)v7);
  v5 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  MEMORY[0x18D75B4AC](v16, a2, v5, a3);
  return outlined destroy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v16);
}

uint64_t closure #2 in ToolbarButtonStyle.iosBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t KeyPath;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  v36 = a3;
  v5 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ToolbarButtonStyle.ResolvedBody();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, v13, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
  v15 = v14;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v35 - v17;
  type metadata accessor for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>();
  v20 = v19;
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v8, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v24 = *(_QWORD *)(a2 + 64);
  LOBYTE(a2) = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v24, a2);
  v25 = specialized Environment.wrappedValue.getter(v24, a2);
  outlined consume of Environment<Bool>.Content(v24, a2);
  KeyPath = swift_getKeyPath();
  outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)v12, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v12[*(int *)(v9 + 20)] = v25 & 1;
  v27 = &v12[*(int *)(v9 + 24)];
  *(_QWORD *)v27 = KeyPath;
  v27[8] = 0;
  v28 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarButtonStyle.ResolvedBody);
  v29 = &v18[*(int *)(v15 + 36)];
  *v29 = 0;
  *((_QWORD *)v29 + 1) = v28;
  v29[16] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarButtonStyle.ResolvedBody);
  outlined init with copy of ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>((uint64_t)v18, (uint64_t)v23, &lazy cache variable for type metadata for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ToolbarButtonStyle.ResolvedBody, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
  *(_QWORD *)&v23[*(int *)(v20 + 36)] = 1;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>>((uint64_t)v18, &lazy cache variable for type metadata for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ToolbarButtonStyle.ResolvedBody, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
  v30 = swift_getKeyPath();
  v31 = v36;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v23, v36, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>();
  v33 = v31 + *(int *)(v32 + 36);
  *(_QWORD *)v33 = v30;
  *(_QWORD *)(v33 + 8) = 0x402E000000000000;
  *(_BYTE *)(v33 + 16) = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
}

uint64_t ToolbarButtonStyle.ResolvedBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t result;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = v1;
  v43 = a1;
  v3 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3, v6);
  v7 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>(0);
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (_WORD *)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
  v14 = v13;
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>();
  v42 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v22 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v7, v23 + v22, type metadata accessor for PrimitiveButtonStyleConfiguration);
  *v12 = 256;
  v24 = (uint64_t (**)())((char *)v12 + *(int *)(v9 + 36));
  *v24 = partial apply for closure #2 in NavigationLinkButtonStyle.makeBody(configuration:);
  v24[1] = (uint64_t (*)())v23;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v25 = (uint64_t)v12 + *(int *)(v9 + 40);
  v26 = static VerticalAlignment.center.getter();
  static AnyTransition.opacity.getter();
  static AnyTransition.identity.getter();
  v27 = static AnyTransition.asymmetric(insertion:removal:)();
  swift_release();
  swift_release();
  specialized View.toolbarButtonLabel(ignoreEdge:)(0, v26, 0, 1, v27, v25);
  swift_release();
  v28 = type metadata accessor for ToolbarButtonStyle.ResolvedBody();
  v29 = v2 + *(int *)(v28 + 24);
  v30 = *(_QWORD *)v29;
  LOBYTE(v24) = *(_BYTE *)(v29 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v29, (char)v24);
  v31 = specialized Environment.wrappedValue.getter(v30, (char)v24);
  result = outlined consume of Environment<Bool>.Content(v30, (char)v24);
  if ((v31 & 0xFF00) == 0x200)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
    v33 = &v17[*(int *)(v14 + 36)];
    *v33 = v31;
    v33[1] = BYTE1(v31) & 1;
    v33[2] = BYTE2(v31) & 1;
    v33[3] = 0;
    *((_QWORD *)v33 + 1) = 8;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
    if (*(_BYTE *)(v2 + *(int *)(v28 + 20)) == 1)
    {
      v35 = v42;
      v34 = v43;
      if (one-time initialization token for lift != -1)
        swift_once();
      v36 = &static HoverEffect.lift;
    }
    else
    {
      v35 = v42;
      v34 = v43;
      if (one-time initialization token for automatic != -1)
        swift_once();
      v36 = &static HoverEffect.automatic;
    }
    v37 = *v36;
    KeyPath = swift_getKeyPath();
    v39 = swift_getKeyPath();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>);
    v40 = &v21[*(int *)(v35 + 36)];
    *(_QWORD *)v40 = v37;
    v40[8] = 1;
    *((_QWORD *)v40 + 2) = KeyPath;
    v40[24] = 0;
    *((_QWORD *)v40 + 4) = v39;
    *((_WORD *)v40 + 20) = 0;
    *((_QWORD *)v40 + 6) = 0;
    v40[56] = 1;
    *((_QWORD *)v40 + 8) = 0;
    *((_WORD *)v40 + 36) = 513;
    *((_QWORD *)v40 + 10) = 0;
    swift_retain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>);
    return outlined init with take of TableCellFormula((uint64_t)v21, v34, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>);
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToolbarButtonStyle.ResolvedBody()
{
  type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for CustomHoverEffectModifier<HoverEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect, (uint64_t)&type metadata for HoverEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomHoverEffectModifier);
  lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance ToolbarButtonStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[2];

  v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  v8 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v10 = v9;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (_WORD *)((char *)v21 - v12);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v8, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v14 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v15 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v8, v15 + v14, type metadata accessor for PrimitiveButtonStyleConfiguration);
  *v13 = 256;
  v16 = (uint64_t (**)())((char *)v13 + *(int *)(v10 + 36));
  *v16 = partial apply for closure #3 in NavigationLinkButtonStyle.makeBody(configuration:);
  v16[1] = (uint64_t (*)())v15;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  outlined init with copy of _TraitWritingTableRowModifier<DropOntoTraitKey>((uint64_t)v13, a2, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>();
  v18 = a2 + *(int *)(v17 + 36);
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 0;
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v13);
  v19 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>>();
  return closure #2 in ToolbarButtonStyle.iosBody(configuration:)(a1, v21[1], a2 + *(int *)(v19 + 52));
}

__n128 closure #1 in ToolbarButtonLabelModifier.body(content:)@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  double v14;
  uint64_t KeyPath;
  char v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 result;
  _BYTE v25[48];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[10];
  _OWORD v37[13];
  char v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v4 = ToolbarButtonLabelModifier.padding(edge:)();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = static Edge.Set.all.getter();
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_BYTE *)(a1 + 80);
  outlined copy of Environment<Bool>.Content(v12, v13);
  specialized Environment.wrappedValue.getter(v12, v13, v37);
  outlined consume of Environment<Bool>.Content(v12, v13);
  if (LOBYTE(v37[0]) == 2 || (v37[0] & 1) != 0)
    v14 = INFINITY;
  else
    v14 = 32.0;
  v38 = v11;
  v39 = v4;
  v40 = v6;
  v41 = v8;
  v42 = v10;
  v43 = 0;
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v36, 0.0, 1, v14, 0);
  KeyPath = swift_getKeyPath();
  specialized Environment.wrappedValue.getter((uint64_t)v37);
  *(_QWORD *)v25 = 5;
  memset(&v25[8], 0, 32);
  v25[40] = 2;
  v16 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v37, (uint64_t)v25);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v25);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v37);
  v17 = static Font.body.getter();
  if ((v16 & 1) != 0)
  {
    v18 = Font.bold()();
    swift_release();
    v17 = v18;
  }
  v29 = v36[6];
  v30 = v36[7];
  v31 = v36[8];
  v32 = v36[9];
  *(_OWORD *)&v25[32] = v36[2];
  v26 = v36[3];
  v27 = v36[4];
  v28 = v36[5];
  *(_OWORD *)v25 = v36[0];
  *(_OWORD *)&v25[16] = v36[1];
  v33 = 1;
  v34 = KeyPath;
  v35 = v17;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>>(0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PartialRangeThrough<DynamicTypeSize>, (uint64_t (*)(void))lazy protocol witness table accessor for type DynamicTypeSize and conformance DynamicTypeSize, MEMORY[0x1E0CE2D18], MEMORY[0x1E0DECD78]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
  lazy protocol witness table accessor for type PartialRangeThrough<DynamicTypeSize> and conformance PartialRangeThrough<A>();
  View.dynamicTypeSize<A>(_:)();
  swift_release();
  swift_release();
  v19 = v37[11];
  *(_OWORD *)(a2 + 160) = v37[10];
  *(_OWORD *)(a2 + 176) = v19;
  *(_OWORD *)(a2 + 192) = v37[12];
  v20 = v37[7];
  *(_OWORD *)(a2 + 96) = v37[6];
  *(_OWORD *)(a2 + 112) = v20;
  v21 = v37[9];
  *(_OWORD *)(a2 + 128) = v37[8];
  *(_OWORD *)(a2 + 144) = v21;
  v22 = v37[3];
  *(_OWORD *)(a2 + 32) = v37[2];
  *(_OWORD *)(a2 + 48) = v22;
  v23 = v37[5];
  *(_OWORD *)(a2 + 64) = v37[4];
  *(_OWORD *)(a2 + 80) = v23;
  result = (__n128)v37[1];
  *(_OWORD *)a2 = v37[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

double ToolbarButtonLabelModifier.padding(edge:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  double result;

  v1 = v0;
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 88);
    v3 = *(_BYTE *)(v1 + 96);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)(v1 + 88), v3);
    v4 = specialized Environment.wrappedValue.getter(v2, v3);
    outlined consume of Environment<Bool>.Content(v2, v3);
    if ((v4 & 1) == 0)
      return 4.0;
  }
  static EdgeInsets.zero.getter();
  return result;
}

__n128 protocol witness for ViewModifier.body(content:) in conformance ToolbarButtonLabelModifier@<Q0>(double (**a1)@<D0>(uint64_t a1@<X8>)@<X8>)
{
  char *v1;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[6];
  char v8;

  outlined init with copy of ToolbarButtonLabelModifier(v1, (uint64_t)v7);
  v3 = swift_allocObject();
  v4 = v7[5];
  *(_OWORD *)(v3 + 80) = v7[4];
  *(_OWORD *)(v3 + 96) = v4;
  *(_BYTE *)(v3 + 112) = v8;
  v5 = v7[1];
  *(_OWORD *)(v3 + 16) = v7[0];
  *(_OWORD *)(v3 + 32) = v5;
  result = (__n128)v7[3];
  *(_OWORD *)(v3 + 48) = v7[2];
  *(__n128 *)(v3 + 64) = result;
  *a1 = partial apply for closure #1 in ToolbarButtonLabelModifier.body(content:);
  a1[1] = (double (*)@<D0>(uint64_t@<X8>))v3;
  return result;
}

uint64_t closure #1 in ToolbarButtonEdgeOutsetModifier.body(content:)@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  int v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t result;

  v3 = a1;
  static EdgeInsets.zero.getter();
  v7 = v6;
  v8 = v4;
  v10 = v9;
  v11 = v5;
  if (v3 != 2)
  {
    if ((v3 & 1) != 0)
      v11 = v5 + -8.0;
    else
      v8 = v4 + -8.0;
  }
  result = static Edge.Set.all.getter();
  *(_BYTE *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v10;
  *(double *)(a2 + 32) = v11;
  *(_BYTE *)(a2 + 40) = 0;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance ToolbarButtonEdgeOutsetModifier(_QWORD *a1@<X8>)
{
  *a1 = partial apply for closure #1 in ToolbarButtonEdgeOutsetModifier.body(content:);
  a1[1] = 0;
}

uint64_t closure #1 in ToolbarButtonContentModifier.body(content:)@<X0>(int a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  __int16 v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t KeyPath;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v38 = a1;
  v42 = a5;
  v8 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&KeyPath - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>();
  MEMORY[0x1E0C80A78](v40, v12);
  v14 = (char *)&KeyPath - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>(0);
  v39 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&KeyPath - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>>, v19, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  v41 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&KeyPath - v22;
  KeyPath = swift_getKeyPath();
  a4 &= 1u;
  outlined copy of Environment<Bool>.Content(a3, a4);
  v24 = specialized Environment.wrappedValue.getter(a3, a4);
  outlined consume of Environment<Bool>.Content(a3, a4);
  if ((v24 & 1) != 0)
    v25 = 256;
  else
    v25 = 0;
  v26 = v25 & 0xFF00 | v38;
  v27 = swift_getKeyPath();
  v28 = swift_getKeyPath();
  static UIButton.Configuration.borderless()();
  v29 = &v11[*(int *)(v8 + 20)];
  *(_QWORD *)v29 = swift_getKeyPath();
  v29[8] = 0;
  v30 = swift_getKeyPath();
  v31 = swift_getKeyPath();
  v32 = swift_getKeyPath();
  v33 = &v14[*(int *)(v40 + 52)];
  *((_QWORD *)v33 + 1) = 0;
  *((_QWORD *)v33 + 2) = 0;
  *(_QWORD *)v33 = v30;
  *((_WORD *)v33 + 12) = 0;
  *((_QWORD *)v33 + 4) = v31;
  v33[40] = 0;
  *((_QWORD *)v33 + 6) = v32;
  v33[56] = 0;
  outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v14, type metadata accessor for UIKitSystemButtonConfigurationModifier);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)&v18[*(int *)(v39 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>);
  *(_QWORD *)v18 = KeyPath;
  v18[10] = (a2 & 1) != 0;
  *((_WORD *)v18 + 4) = v26;
  *((_QWORD *)v18 + 2) = v27;
  v18[24] = 0;
  *((_QWORD *)v18 + 4) = v28;
  v18[40] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>);
  v34 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>);
  v35 = &v23[*(int *)(v41 + 36)];
  *(_QWORD *)v35 = v34;
  v35[8] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>);
  outlined init with copy of ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>((uint64_t)v23, v42, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>>((uint64_t)v23, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
}

uint64_t EnvironmentValues.toolbarButtonHoverShape.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ToolbarButtonContentModifier@<X0>(uint64_t (**a1)@<X0>(int a1@<W0>, uint64_t a2@<X8>)@<X8>)
{
  char *v1;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = *v1;
  v4 = *((_QWORD *)v1 + 1);
  v5 = v1[16];
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_BYTE *)(v6 + 32) = v5;
  *a1 = partial apply for closure #1 in ToolbarButtonContentModifier.body(content:);
  a1[1] = (uint64_t (*)@<X0>(int@<W0>, uint64_t@<X8>))v6;
  return outlined copy of Environment<Bool>.Content(v4, v5);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ToolbarButtonLabelModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in ToolbarButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>);
  }
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat?>, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ToolbarButtonStyle.ResolvedBody, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for ToolbarButtonStyle.ResolvedBody()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ToolbarButtonStyle.ResolvedBody;
  if (!type metadata singleton initialization cache for ToolbarButtonStyle.ResolvedBody)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ToolbarButtonHoverShape.adjustedRect(in:)(__int16 a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGRect v11;

  if (CGRectGetHeight(*(CGRect *)&a2) + 8.0 > 36.0)
  {
    v11.origin.x = a2;
    v11.origin.y = a3;
    v11.size.width = a4;
    v11.size.height = a5;
    CGRectGetHeight(v11);
  }
  if (a1 == 2)
  {
    if ((a1 & 0x100) == 0)
      return CGRect.outset(by:)();
    goto LABEL_7;
  }
  if ((a1 & 0x100) != 0)
LABEL_7:
    static EdgeInsets.zero.getter();
  return CGRect.outset(by:)();
}

double protocol witness for Shape.path(in:) in conformance ToolbarButtonHoverShape@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  unsigned __int8 *v5;
  __int16 v12;
  double result;
  __int128 v14;
  __int128 v15;
  char v16;

  __asm { FMOV            V4.2D, #8.0 }
  if (v5[1])
    v12 = 256;
  else
    v12 = 0;
  ToolbarButtonHoverShape.adjustedRect(in:)(v12 | *v5, a2, a3, a4, a5);
  RoundedRectangle.path(in:)();
  result = *(double *)&v14;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v15;
  *(_BYTE *)(a1 + 32) = v16;
  return result;
}

void protocol witness for View.body.getter in conformance ToolbarButtonHoverShape(uint64_t a1@<X8>)
{
  _BYTE *v1;
  char v2;
  char v3;

  v2 = v1[1];
  v3 = v1[2];
  *(_BYTE *)a1 = *v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_WORD *)(a1 + 3) = 256;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ToolbarButtonHoverShapeKey(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 2) = 0;
  *(_WORD *)a1 = 512;
}

uint64_t sub_18795E990@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.toolbarButtonHoverShape.getter();
  *(_BYTE *)(a1 + 2) = BYTE2(result);
  *(_WORD *)a1 = result;
  return result;
}

uint64_t sub_18795E9D0()
{
  return EnvironmentValues.toolbarButtonHoverShape.setter();
}

uint64_t key path getter for EnvironmentValues.verticalSizeClass : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.verticalSizeClass.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.verticalSizeClass : EnvironmentValues()
{
  return EnvironmentValues.verticalSizeClass.setter();
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), uint64_t *a4)
{
  uint64_t v5;

  type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_18795EB24()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 65) & 1) != 0)
  {
    if (*(_BYTE *)(v0 + 64) == 1)
      __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
  return swift_deallocObject();
}

double partial apply for closure #1 in ToolbarButtonLabelModifier.body(content:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = closure #1 in ToolbarButtonLabelModifier.body(content:)(v1 + 16, a1).n128_u64[0];
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>);
}

void type metadata accessor for ModifiedContent<_ConditionalContent<_ConditionalContent<_ConditionalContent<Text, Text>, Text>, Text>, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, MEMORY[0x1E0CE35D0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, MEMORY[0x1E0CE35F0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ToolbarButtonLabelModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type DynamicTypeSize and conformance DynamicTypeSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize;
  if (!lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2D20], MEMORY[0x1E0CE2D18]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE35C0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE35E0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<ToolbarButtonLabelModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ToolbarButtonLabelModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<ToolbarButtonLabelModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ToolbarButtonLabelModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ToolbarButtonLabelModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ToolbarButtonLabelModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PartialRangeThrough<DynamicTypeSize> and conformance PartialRangeThrough<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PartialRangeThrough<DynamicTypeSize> and conformance PartialRangeThrough<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeThrough<DynamicTypeSize> and conformance PartialRangeThrough<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PartialRangeThrough<DynamicTypeSize>, (uint64_t (*)(void))lazy protocol witness table accessor for type DynamicTypeSize and conformance DynamicTypeSize, MEMORY[0x1E0CE2D18], MEMORY[0x1E0DECD78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DECD88], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeThrough<DynamicTypeSize> and conformance PartialRangeThrough<A>);
  }
  return result;
}

uint64_t sub_18795EF4C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.verticalSizeClass.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18795EF8C()
{
  return EnvironmentValues.verticalSizeClass.setter();
}

uint64_t sub_18795EFC0()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToolbarButtonContentModifier.body(content:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ToolbarButtonContentModifier.body(content:)(a1, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), a2);
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for UIKitSystemButtonConfigurationModifier(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for UIKitButtonStyleModifier<BorderlessButtonStyleBase>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase, (uint64_t)&type metadata for BorderlessButtonStyleBase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitButtonStyleModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, UIKitSystemButtonConfigurationModifier, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ToolbarButtonContentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier, (uint64_t)&type metadata for ToolbarButtonContentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>, &lazy cache variable for type metadata for ToolbarButtonHoverShape?, (uint64_t)&type metadata for ToolbarButtonHoverShape);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ToolbarButtonContentModifier>, _EnvironmentKeyWritingModifier<ToolbarButtonHoverShape?>>);
  }
}

void type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), uint64_t *a4)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, a4);
    v6 = type metadata accessor for ModifiedContent();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t outlined init with copy of ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t), uint64_t *a5)
{
  uint64_t v7;

  type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

_QWORD *outlined retain of HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>(_QWORD *a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = a1[13];
  v5 = a1[12];
  v3 = a1[14];
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  outlined copy of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(v5, v4, v3);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 120);
  swift_retain();
  swift_retain();
  outlined copy of Transaction?(v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, MEMORY[0x1E0CE2BD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, MEMORY[0x1E0CE2BD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>, &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
}

void type metadata accessor for TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?))
  {
    type metadata accessor for ModifiedContent<Spacer, _FrameLayout>?();
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?));
  }
}

void type metadata accessor for ModifiedContent<Spacer, _FrameLayout>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Spacer, _FrameLayout>?)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Spacer, _FrameLayout>, MEMORY[0x1E0CE7430], MEMORY[0x1E0CE1A90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Spacer, _FrameLayout>?);
  }
}

void type metadata accessor for _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, TableRowForegroundStyleModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for TableRowForegroundStyleModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, TableRowForegroundStyleModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for TableRowForegroundStyleModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = MEMORY[0x1E0CE7508];
    v2[1] = &protocol witness table for TableRowForegroundStyleModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  }
}

void type metadata accessor for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for Button<RotatingDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator, (uint64_t)&type metadata for RotatingDisclosureIndicator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, MEMORY[0x1E0CE35F0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarButtonHoverShapeKey()
{
  return &type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey;
}

_QWORD *initializeBufferWithCopyOfBuffer for ToolbarButtonStyle.ResolvedBody(_WORD *a1, _WORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  char v39;
  char v40;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *a1 = *a2;
    v7 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v26 = *(_QWORD *)v9;
      v27 = *((_QWORD *)v9 + 1);
      v28 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v9, v27, v28);
      *(_QWORD *)v8 = v26;
      *((_QWORD *)v8 + 1) = v27;
      v8[16] = v28;
      v29 = *((_QWORD *)v9 + 5);
      v30 = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 24) = v30;
      *((_QWORD *)v8 + 5) = v29;
      v31 = (id)v30;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v11 = *(_QWORD *)v9;
        v12 = *((_QWORD *)v9 + 1);
        v14 = *((_QWORD *)v9 + 2);
        v13 = *((_QWORD *)v9 + 3);
        v39 = v9[34];
        v15 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v9, v12, v14, v13, v15, v39);
        *(_QWORD *)v8 = v11;
        *((_QWORD *)v8 + 1) = v12;
        *((_QWORD *)v8 + 2) = v14;
        *((_QWORD *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v15;
        v8[34] = v39;
        v16 = *((_QWORD *)v9 + 5);
        v17 = *((_QWORD *)v9 + 6);
        v18 = *((_QWORD *)v9 + 7);
        v19 = *((_QWORD *)v9 + 8);
        v40 = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v14, v40);
        *((_QWORD *)v8 + 5) = v16;
        *((_QWORD *)v8 + 6) = v17;
        *((_QWORD *)v8 + 7) = v18;
        *((_QWORD *)v8 + 8) = v19;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v40;
        v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v21 = &v8[v20];
        v22 = &v9[v20];
        v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
        v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        v33 = *(int *)(a3 + 24);
        *((_BYTE *)v4 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
        v34 = (char *)v4 + v33;
        v35 = (char *)a2 + v33;
        v36 = *(_QWORD *)((char *)a2 + v33);
        v37 = v35[8];
        outlined copy of Environment<Bool>.Content(v36, v37);
        *(_QWORD *)v34 = v36;
        v34[8] = v37;
        return v4;
      }
      v32 = *((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v32;
    }
    swift_retain();
    goto LABEL_9;
  }
  v25 = *(_QWORD *)a2;
  *v4 = *(_QWORD *)a2;
  v4 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for ToolbarButtonStyle.ResolvedBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));

LABEL_6:
      swift_release();
      return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 8));
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_WORD *)(v4 + 32), *(_BYTE *)(v4 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_WORD *)(v4 + 72), *(_BYTE *)(v4 + 74));
      v6 = v4 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 8));
    case 0:
      goto LABEL_6;
  }
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 8));
}

_WORD *initializeWithCopy for ToolbarButtonStyle.ResolvedBody(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char v35;
  char v37;
  char v38;
  uint64_t v39;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v24 = *(_QWORD *)v8;
    v25 = *((_QWORD *)v8 + 1);
    v26 = v8[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v25, v26);
    *(_QWORD *)v7 = v24;
    *((_QWORD *)v7 + 1) = v25;
    v7[16] = v26;
    v27 = *((_QWORD *)v8 + 5);
    v28 = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 24) = v28;
    *((_QWORD *)v7 + 5) = v27;
    v29 = (id)v28;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v30 = *((_QWORD *)v8 + 1);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *((_QWORD *)v7 + 1) = v30;
    goto LABEL_6;
  }
  v39 = a3;
  v10 = *(_QWORD *)v8;
  v11 = *((_QWORD *)v8 + 1);
  v13 = *((_QWORD *)v8 + 2);
  v12 = *((_QWORD *)v8 + 3);
  v37 = v8[34];
  v14 = *((_WORD *)v8 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v8, v11, v13, v12, v14, v37);
  *(_QWORD *)v7 = v10;
  *((_QWORD *)v7 + 1) = v11;
  *((_QWORD *)v7 + 2) = v13;
  *((_QWORD *)v7 + 3) = v12;
  *((_WORD *)v7 + 16) = v14;
  v7[34] = v37;
  v15 = *((_QWORD *)v8 + 5);
  v16 = *((_QWORD *)v8 + 6);
  v17 = *((_QWORD *)v8 + 7);
  v18 = *((_QWORD *)v8 + 8);
  v38 = v8[74];
  LOWORD(v13) = *((_WORD *)v8 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v13, v38);
  *((_QWORD *)v7 + 5) = v15;
  *((_QWORD *)v7 + 6) = v16;
  *((_QWORD *)v7 + 7) = v17;
  *((_QWORD *)v7 + 8) = v18;
  *((_WORD *)v7 + 36) = v13;
  a3 = v39;
  v7[74] = v38;
  v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v20 = &v7[v19];
  v21 = &v8[v19];
  v22 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = type metadata accessor for LinkDestination.Configuration();
  v20[*(int *)(v23 + 20)] = v21[*(int *)(v23 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  v31 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = v33[8];
  outlined copy of Environment<Bool>.Content(v34, v35);
  *(_QWORD *)v32 = v34;
  v32[8] = v35;
  return a1;
}

_WORD *assignWithCopy for ToolbarButtonStyle.ResolvedBody(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v41;

  *a1 = *a2;
  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v7 = *(int *)(v6 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v7, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v26 = *(_QWORD *)v9;
      v27 = *((_QWORD *)v9 + 1);
      v28 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v9, v27, v28);
      *(_QWORD *)v8 = v26;
      *((_QWORD *)v8 + 1) = v27;
      v8[16] = v28;
      v29 = (void *)*((_QWORD *)v9 + 3);
      *((_QWORD *)v8 + 3) = v29;
      v30 = *((_QWORD *)v9 + 5);
      *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
      *((_QWORD *)v8 + 5) = v30;
      v31 = v29;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v41 = a3;
        v11 = *(_QWORD *)v9;
        v12 = *((_QWORD *)v9 + 1);
        v14 = *((_QWORD *)v9 + 2);
        v13 = *((_QWORD *)v9 + 3);
        v15 = v9[34];
        v16 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v9, v12, v14, v13, v16, v15);
        *(_QWORD *)v8 = v11;
        *((_QWORD *)v8 + 1) = v12;
        *((_QWORD *)v8 + 2) = v14;
        *((_QWORD *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v16;
        v8[34] = v15;
        v17 = *((_QWORD *)v9 + 5);
        v18 = *((_QWORD *)v9 + 6);
        v19 = *((_QWORD *)v9 + 7);
        v20 = *((_QWORD *)v9 + 8);
        LOBYTE(v12) = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v17, v18, v19, v20, v14, v12);
        *((_QWORD *)v8 + 5) = v17;
        *((_QWORD *)v8 + 6) = v18;
        *((_QWORD *)v8 + 7) = v19;
        *((_QWORD *)v8 + 8) = v20;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v12;
        a3 = v41;
        v21 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v22 = &v8[v21];
        v23 = &v9[v21];
        v24 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
        v25 = type metadata accessor for LinkDestination.Configuration();
        v22[*(int *)(v25 + 20)] = v23[*(int *)(v25 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        goto LABEL_9;
      }
      v32 = *((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v32;
    }
    swift_retain();
    goto LABEL_8;
  }
LABEL_9:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v33 = *(int *)(a3 + 24);
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = *(_QWORD *)v35;
  v37 = v35[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v35, v37);
  v38 = *(_QWORD *)v34;
  v39 = v34[8];
  *(_QWORD *)v34 = v36;
  v34[8] = v37;
  outlined consume of Environment<Bool>.Content(v38, v39);
  return a1;
}

_WORD *initializeWithTake for ToolbarButtonStyle.ResolvedBody(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *((_OWORD *)v8 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *((_OWORD *)v7 + 1) = v10;
    *(_DWORD *)(v7 + 31) = *(_DWORD *)(v8 + 31);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_DWORD *)(v7 + 71) = *(_DWORD *)(v8 + 71);
    v11 = *(int *)(type metadata accessor for LinkDestination() + 24);
    v12 = &v7[v11];
    v13 = &v8[v11];
    v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    v15 = type metadata accessor for LinkDestination.Configuration();
    v12[*(int *)(v15 + 20)] = v13[*(int *)(v15 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v16 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  return a1;
}

_WORD *assignWithTake for ToolbarButtonStyle.ResolvedBody(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  *a1 = *a2;
  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v7 = *(int *)(v6 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v7, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    v10 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = *((_OWORD *)v9 + 1);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v11;
      *(_DWORD *)(v8 + 31) = *(_DWORD *)(v9 + 31);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
      *(_DWORD *)(v8 + 71) = *(_DWORD *)(v9 + 71);
      v12 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v13 = &v8[v12];
      v14 = &v9[v12];
      v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      v16 = type metadata accessor for LinkDestination.Configuration();
      v13[*(int *)(v16 + 20)] = v14[*(int *)(v16 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v17 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  v21 = *(_QWORD *)v18;
  v22 = v18[8];
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v19;
  outlined consume of Environment<Bool>.Content(v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarButtonStyle.ResolvedBody()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187960274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ToolbarButtonStyle.ResolvedBody()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18796030C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata completion function for ToolbarButtonStyle.ResolvedBody()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ToolbarButtonHoverShape(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = a1[3];
      if (a1[3])
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3))
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = a1[1];
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarButtonHoverShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 1) = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarButtonHoverShape()
{
  return &type metadata for ToolbarButtonHoverShape;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>>();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    v2[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat?>, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ToolbarButtonStyle.ResolvedBody, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ToolbarButtonStyle.ResolvedBody and conformance ToolbarButtonStyle.ResolvedBody, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarButtonStyle.ResolvedBody, (uint64_t)&protocol conformance descriptor for ToolbarButtonStyle.ResolvedBody);
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonContentModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_UNKNOWN **sub_187960718()
{
  return &protocol witness table for BarEdgeReader<A>;
}

_UNKNOWN **sub_187960724()
{
  return &protocol witness table for BarEdgeReader<A>;
}

uint64_t associated type witness table accessor for View.Body : View in ToolbarButtonHoverShape()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<ToolbarButtonHoverShape, ForegroundStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ToolbarButtonHoverShape, ForegroundStyle>, MEMORY[0x1E0CE0E50]);
}

void type metadata accessor for _ShapeView<ToolbarButtonHoverShape, ForegroundStyle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<ToolbarButtonHoverShape, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<ToolbarButtonHoverShape, ForegroundStyle>);
  }
}

unint64_t instantiation function for generic protocol witness table for ToolbarButtonHoverShape(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape();
  result = lazy protocol witness table accessor for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ToolbarButtonStyle.ResolvedBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, MEMORY[0x1E0CE35F0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>)
  {
    type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for Button(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
  }
}

void type metadata accessor for HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>)
  {
    type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>();
    lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>);
  }
}

void type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E0CE4568], MEMORY[0x1E0CE4558], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>();
    v2 = v1;
    v3[0] = &protocol witness table for PrimitiveButtonStyleConfiguration.Label;
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ToolbarButtonStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, MEMORY[0x1E0CE73D0]);
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>)
  {
    type metadata accessor for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<ToolbarButtonHoverShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape, (uint64_t)&type metadata for ToolbarButtonHoverShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CustomHoverEffectModifier<HoverEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect, (uint64_t)&type metadata for HoverEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomHoverEffectModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>> and conformance Button<A>, (uint64_t (*)(uint64_t))type metadata accessor for Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, (uint64_t)&protocol conformance descriptor for Button<A>);
    v3[1] = &protocol witness table for _ContentShapeKindModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>(uint64_t a1)
{
  outlined copy of _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), *(_BYTE *)(a1 + 81));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for ToolbarButtonEdgeOutsetModifier()
{
  return &type metadata for ToolbarButtonEdgeOutsetModifier;
}

uint64_t sub_187960D98()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ToolbarButtonEdgeOutsetModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_BYTE *)(a1 + 48);
  swift_retain();
  outlined copy of _ConditionalContent<Image, Image>?(v2, v3);
  swift_retain();
  return a1;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

_UNKNOWN **sub_187960EC8()
{
  return &protocol witness table for BarEdgeReader<A>;
}

uint64_t DeprecatedAlertBridge.isShown.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78));
}

uint64_t DeprecatedAlertBridge.isShown.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x78)) = result;
  return result;
}

void DeprecatedAlertBridge.seed.getter(_DWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *(_DWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x80));
}

_DWORD *DeprecatedAlertBridge.seed.setter(_DWORD *result)
{
  _QWORD *v1;

  *(_DWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x80)) = *result;
  return result;
}

void DeprecatedAlertBridge.alertController.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

uint64_t DeprecatedAlertBridge.lastEnvironment.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x90));
  v3 = v2[1];
  *a1 = *v2;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t DeprecatedAlertBridge.isChangingIdentity.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0));
}

uint64_t DeprecatedAlertBridge.isChangingIdentity.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xA0)) = result;
  return result;
}

uint64_t DeprecatedAlertBridge.style.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8));
}

id closure #1 in DeprecatedAlertBridge.preferencesDidChange(_:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  _QWORD *v13;
  unint64_t v15[3];

  v12 = a5 + 16;
  v15[0] = a3;
  v15[1] = a4;
  PlatformAlertController.update<A>(for:with:environmentChanged:)(a2, v15, 0, a8, a10);
  swift_beginAccess();
  v13 = (_QWORD *)MEMORY[0x18D760234](v12);
  if (v13)
  {
    *((_BYTE *)v13 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v13) + 0xA0)) = 0;

  }
  return objc_msgSend(a6, sel_presentViewController_animated_completion_, a1, 1, 0);
}

void @objc DeprecatedAlertBridge.init()()
{
  specialized DeprecatedAlertBridge.init()();
}

void DeprecatedAlertBridge.__deallocating_deinit()
{
  type metadata accessor for DeprecatedAlertBridge();
}

id sub_18796112C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 16) = v1;
  *(_QWORD *)(v2 - 8) = a1;
  return objc_msgSendSuper2((objc_super *)(v2 - 16), sel_dealloc);
}

unint64_t DeprecatedAlertBridge.descriptionName.getter()
{
  _QWORD *v0;
  unint64_t result;
  uint64_t v2;

  result = 0xD000000000000011;
  v2 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8));
  if (!v2)
    return 0xD000000000000017;
  if (v2 != 1)
    return 0xD000000000000013;
  return result;
}

uint64_t DeprecatedAlertBridge.descriptionChildren.getter()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(void **)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88));
  if (!v1
    || (type metadata accessor for PlatformAlertController(),
        type metadata accessor for CustomRecursiveStringConvertible(),
        v2 = v1,
        (swift_dynamicCast() & 1) == 0))
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    goto LABEL_6;
  }
  v3 = *((_QWORD *)&v8 + 1);
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_6:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v7, (uint64_t (*)(_QWORD))type metadata accessor for CustomRecursiveStringConvertible?);
    return MEMORY[0x1E0DEE9D8];
  }
  v4 = v9;
  __swift_project_boxed_opaque_existential_1(&v7, *((uint64_t *)&v8 + 1));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  return v5;
}

uint64_t DeprecatedAlertBridge.descriptionAttributes.getter()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v1 = *(void **)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88));
  if (!v1
    || (type metadata accessor for PlatformAlertController(),
        type metadata accessor for CustomRecursiveStringConvertible(),
        v2 = v1,
        (swift_dynamicCast() & 1) == 0))
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    goto LABEL_6;
  }
  v3 = *((_QWORD *)&v8 + 1);
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_6:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v7, (uint64_t (*)(_QWORD))type metadata accessor for CustomRecursiveStringConvertible?);
    return MEMORY[0x1E0DEE9D8];
  }
  v4 = v9;
  __swift_project_boxed_opaque_existential_1(&v7, *((uint64_t *)&v8 + 1));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  return v5;
}

unint64_t protocol witness for CustomRecursiveStringConvertible.descriptionName.getter in conformance DeprecatedAlertBridge<A, B>()
{
  return DeprecatedAlertBridge.descriptionName.getter();
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionAttributes.getter in conformance DeprecatedAlertBridge<A, B>()
{
  return DeprecatedAlertBridge.descriptionAttributes.getter();
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionChildren.getter in conformance DeprecatedAlertBridge<A, B>()
{
  return DeprecatedAlertBridge.descriptionChildren.getter();
}

uint64_t specialized DeprecatedAlertBridge.host.setter()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t specialized DeprecatedAlertBridge.addPreferences(to:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return GraphHost.addPreference<A>(_:)();
}

void type metadata accessor for CustomRecursiveStringConvertible?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CustomRecursiveStringConvertible?)
  {
    type metadata accessor for CustomRecursiveStringConvertible();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CustomRecursiveStringConvertible?);
  }
}

unint64_t type metadata accessor for CustomRecursiveStringConvertible()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CustomRecursiveStringConvertible;
  if (!lazy cache variable for type metadata for CustomRecursiveStringConvertible)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CustomRecursiveStringConvertible);
  }
  return result;
}

void specialized DeprecatedAlertBridge.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void type metadata accessor for AnyHashable?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyHashable?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?);
  }
}

uint64_t sub_1879615B8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1879615DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

id partial apply for closure #1 in DeprecatedAlertBridge.preferencesDidChange(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in DeprecatedAlertBridge.preferencesDidChange(_:)(v0[6], (uint64_t)v0 + v3, *(uint64_t *)((char *)v0 + v4), *(uint64_t *)((char *)v0 + v4 + 8), *(uint64_t *)((char *)v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void **)((char *)v0 + ((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), v0[2], v1, v0[4], v0[5]);
}

void ToolbarTitleMenu.init<>()(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t ToolbarTitleMenu.init(content:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v13;
  uint64_t v15;

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v15 - v10;
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 56);
  v13 = v12(a3, 1, 1, a2, v9);
  a1(v13);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v12)(v11, 0, 1, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 40))(a3, v11, v6);
}

void static ToolbarTitleMenu._makeToolbar(content:inputs:)(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int OffsetAttribute2;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD v46[4];
  uint64_t v47;
  ValueMetadata *v48;
  int v49;
  _UNKNOWN **v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  ValueMetadata *v56;
  uint64_t v57;
  _UNKNOWN **v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  unsigned __int8 v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 *v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;

  v43 = a4;
  v44 = a3;
  v42 = a5;
  v85 = *MEMORY[0x1E0C80C00];
  v45 = *a1;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 7);
  v10 = *((_DWORD *)a2 + 8);
  LODWORD(v37) = *((_DWORD *)a2 + 9);
  v11 = a2[5];
  v39 = (__int128 *)a2[6];
  LODWORD(v41) = *((_DWORD *)a2 + 14);
  v12 = a2[8];
  LODWORD(v38) = *((_DWORD *)a2 + 18);
  v64 = v5;
  v65 = v6;
  v66 = v7;
  *(_QWORD *)&v67 = __PAIR64__(v9, v8);
  *((_QWORD *)&v67 + 1) = __PAIR64__(v37, v10);
  *(_QWORD *)&v68 = v11;
  LODWORD(v40) = _GraphInputs.environment.getter();
  v76 = v5;
  v77 = v6;
  v78 = v7;
  *(_QWORD *)&v79 = __PAIR64__(v9, v8);
  *((_QWORD *)&v79 + 1) = __PAIR64__(v37, v10);
  v80 = v11;
  v81 = v39;
  v82 = v41;
  v41 = v12;
  v83 = v12;
  v84 = v38;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.pushStyleContext<A>(_:)();
  LODWORD(v64) = v40;
  v13 = v43;
  v15 = type metadata accessor for ToolbarTitleMenu.ChildEnvironment(0, v44, v43, v14);
  v46[2] = v15;
  v46[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarTitleMenu<A>.ChildEnvironment, v15);
  type metadata accessor for Attribute<LayoutComputer>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v64, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v46, v15, MEMORY[0x1E0DEDCE8], v16, MEMORY[0x1E0DEDD18], v17);
  v40 = 0;
  _GraphInputs.environment.setter();
  LODWORD(v64) = v45;
  type metadata accessor for ToolbarTitleMenu(255, v44, v43, v18);
  v39 = (__int128 *)type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v20 = type metadata accessor for Optional();
  if (*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64))
    closure #1 in static ToolbarTitleMenu._makeToolbar(content:inputs:)(1, v44, v43, v19);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v64 = v76;
  v65 = v77;
  v67 = v79;
  v66 = v78;
  *(_QWORD *)&v68 = v80;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewInputs.init(withoutGeometry:)();
  v47 = v13;
  v48 = v56;
  v49 = v57;
  v50 = v58;
  v51 = v59;
  v52 = v60;
  v53 = v61;
  v54 = v62;
  v55 = v63;
  v38 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v20, &v47);
  PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v48, 0, (uint64_t)&v64);
  v22 = v64;
  v23 = v65;
  v24 = v66;
  v25 = v67;
  v26 = *((_QWORD *)&v67 + 1);
  v37 = v20;
  v28 = v69;
  v27 = v70;
  v35 = v74;
  v36 = v73;
  v34 = v75;
  v32 = v68;
  v33 = v71;
  v29 = v72;
  LODWORD(v64) = v45;
  v30 = _GraphValue.value.getter();
  v45 = v30;
  v39 = &v32;
  v65 = v23;
  v64 = v22;
  v66 = v24;
  LODWORD(v67) = v25;
  v68 = v32;
  *((_QWORD *)&v67 + 1) = v26;
  v69 = v28;
  v70 = v27;
  v71 = v33;
  v72 = v29;
  v73 = v36;
  v74 = v35;
  v75 = v34;
  MEMORY[0x1E0C80A78](v30, v31);
  v56 = &type metadata for AllPlatformItemListFlags;
  v57 = v37;
  v58 = &protocol witness table for AllPlatformItemListFlags;
  *(_QWORD *)&v59 = v38;
  type metadata accessor for PlatformItemListGenerator();
}

uint64_t sub_187961BB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[112];

  *(_QWORD *)(v2 - 16) = a1;
  *(_QWORD *)(v2 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListGenerator<A, B>, a1);
  type metadata accessor for Attribute<LayoutComputer>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>);
  v8 = v7;
  v9 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 344, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1, v3, a1, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v10);
  v11 = *(void **)(v1 + 344);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  LODWORD(v8) = *(_DWORD *)(v1 + 256);
  v12 = PreferencesOutputs.init()();
  v13 = *(_DWORD *)(v1 + 264);
  *(_QWORD *)(v1 + 344) = *(_QWORD *)(v1 + 256);
  *(_DWORD *)(v1 + 352) = v13;
  *(_QWORD *)(v1 + 360) = *(_QWORD *)(v1 + 80);
  v14 = *(_DWORD *)(v5 - 144);
  *(_QWORD *)(v1 + 256) = *(_QWORD *)(v5 - 152);
  *(_DWORD *)(v1 + 264) = v14;
  MEMORY[0x1E0C80A78](v12, v15);
  v16 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)&v21[-32] = *(_QWORD *)(v1 + 104);
  *(_QWORD *)&v21[-24] = v16;
  *(_DWORD *)&v21[-16] = *(_DWORD *)(v1 + 116);
  *(_DWORD *)&v21[-12] = v8;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v18 = *(_DWORD *)(v1 + 352);
  v19 = *(_QWORD *)(v1 + 360);
  v20 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)v20 = *(_QWORD *)(v1 + 344);
  *(_DWORD *)(v20 + 8) = v18;
  *(_QWORD *)(v20 + 16) = v19;
  return result;
}

uint64_t closure #1 in static ToolbarTitleMenu._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v8[2] = type metadata accessor for ToolbarTitleMenu(0, a2, a3, a4);
  v9 = type metadata accessor for Optional();
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, v9, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v10;
}

uint64_t implicit closure #1 in static ToolbarTitleMenu._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v10 = type metadata accessor for ToolbarTitleMenu.PreferenceTransform(0, a2, a3, a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarTitleMenu<A>.PreferenceTransform, v10);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v9, v10, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7;
}

uint64_t ToolbarTitleMenu.ChildEnvironment.value.getter@<X0>(_QWORD *a1@<X8>)
{
  ScrollBehaviorModifier.ChildEnvironment.environment.getter(a1);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (a1[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarTitleMenu<A>.ChildEnvironment@<X0>(_QWORD *a1@<X8>)
{
  return ToolbarTitleMenu.ChildEnvironment.value.getter(a1);
}

uint64_t (*ToolbarTitleMenu.PreferenceTransform.value.getter(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t Value;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;

  v33[1] = a1;
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v33 - v8;
  v11 = type metadata accessor for ToolbarTitleMenu(0, a2, a3, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v33 - v14;
  v16 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  v34 = *(_QWORD *)(v16 - 8);
  v17 = *(_QWORD *)(v34 + 64);
  MEMORY[0x1E0C80A78](v16, v18);
  v35 = (uint64_t)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v33 - v21;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  v22[16] = -2;
  v24 = (char *)v33 + *(int *)(v23 + 24) - v21;
  v25 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, Value, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v15, v5);
  LODWORD(a2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 48))(v9, 1, a2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if ((_DWORD)a2 == 1)
  {
    v27 = 0;
    v28 = -1;
  }
  else
  {
    v27 = AGCreateWeakAttribute();
    v28 = 0;
  }
  outlined consume of ToolbarStorage.NavigationProperties.Actions?(*((_QWORD *)v22 + 1), v22[16]);
  *((_QWORD *)v22 + 1) = v27;
  v22[16] = v28;
  v29 = v35;
  outlined init with copy of ToolbarStorage.NavigationProperties((uint64_t)v22, v35);
  v30 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v31 = swift_allocObject();
  outlined init with take of ToolbarStorage.NavigationProperties(v29, v31 + v30);
  outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v22);
  return partial apply for closure #1 in ToolbarTitleMenu.PreferenceTransform.value.getter;
}

uint64_t closure #1 in ToolbarTitleMenu.PreferenceTransform.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE v16[16];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v16[-v10];
  outlined init with copy of ToolbarStorage.NavigationProperties?(a1, (uint64_t)&v16[-v10]);
  v12 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v11);
  if (v14 == 1)
  {
    outlined destroy of ToolbarStorage.NavigationProperties?(a1);
    outlined init with copy of ToolbarStorage.NavigationProperties(a2, a1);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
  }
  else
  {
    outlined init with copy of ToolbarStorage.NavigationProperties(a2, (uint64_t)v7);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v7, 0, 1, v12);
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI14ToolbarStorageV20NavigationPropertiesV_s5NeverOytTg503_s7c4UI23gh32KeyV6reduce5value9nextValueyAA14eF26V0cD0VSgz_AKyXEtFZyAJXEfU_AHSgTf1cn_n((uint64_t)v7, a1);
    return outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v7);
  }
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarTitleMenu<A>.PreferenceTransform@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t *v2;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = ToolbarTitleMenu.PreferenceTransform.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v6 = v5;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance ToolbarTitleMenu<A>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  static ToolbarTitleMenu._makeToolbar(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t View.toolbarTitleMenu<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];

  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a6;
  v13[6] = a1;
  v13[7] = a2;
  v8 = type metadata accessor for ToolbarTitleMenu(255, a4, a6, a4);
  v11 = type metadata accessor for TupleToolbarContent(0, v8, v9, v10);
  return View.toolbar<A>(content:)((void (*)(double))partial apply for closure #1 in View.toolbarTitleMenu<A>(content:), (uint64_t)v13, a3, v11, a5, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
}

uint64_t closure #1 in View.toolbarTitleMenu<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  _QWORD v24[10];

  v24[1] = a7;
  v13 = type metadata accessor for ToolbarTitleMenu(0, a4, a6, a4);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v24 - v20;
  v24[4] = a3;
  v24[5] = a4;
  v24[6] = a5;
  v24[7] = a6;
  v24[8] = a1;
  v24[9] = a2;
  ToolbarTitleMenu.init(content:)((void (*)(uint64_t))partial apply for closure #1 in closure #1 in View.toolbarTitleMenu<A>(content:), a4, (uint64_t)v17);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v17, v13, (uint64_t)v21);
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v21, v13, &protocol witness table for ToolbarTitleMenu<A>);
  return ((uint64_t (*)(char *, uint64_t))v22)(v21, v13);
}

uint64_t type metadata accessor for ToolbarTitleMenu.ChildEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarTitleMenu.ChildEnvironment);
}

uint64_t type metadata accessor for ToolbarTitleMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarTitleMenu);
}

uint64_t partial apply for implicit closure #1 in static ToolbarTitleMenu._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return implicit closure #1 in static ToolbarTitleMenu._makeToolbar(content:inputs:)(v4[4], v4[2], v4[3], a4);
}

uint64_t partial apply for closure #1 in View.toolbarTitleMenu<A>(content:)()
{
  return partial apply for closure #1 in View.toolbarTitleMenu<A>(content:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in View.toolbarTitleMenu<A>(content:));
}

uint64_t getEnumTagSinglePayload for ToolbarTitleMenu(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for ToolbarTitleMenu(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_187962900()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187962908()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_18796292C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v4 = a1[2];
  v5 = type metadata accessor for ToolbarTitleMenu(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for TupleToolbarContent(255, v5, v6, v7);
  type metadata accessor for ToolbarModifier(255, MEMORY[0x1E0DEE9C0] + 8, v8, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
  v9 = type metadata accessor for ModifiedContent();
  v11[0] = v4;
  v11[1] = &protocol witness table for ToolbarModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v11);
}

void base witness table accessor for _AttributeBody in ToolbarTitleMenu<A>.ChildEnvironment()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in View.toolbarTitleMenu<A>(content:)()
{
  return partial apply for closure #1 in View.toolbarTitleMenu<A>(content:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in Layout.callAsFunction<A>(_:));
}

uint64_t partial apply for closure #1 in View.toolbarTitleMenu<A>(content:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata accessor for ToolbarTitleMenu.PreferenceTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarTitleMenu.PreferenceTransform);
}

void base witness table accessor for _AttributeBody in ToolbarTitleMenu<A>.PreferenceTransform()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187962B24()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined consume of ToolbarStorage.NavigationProperties.Actions?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 254)
    return outlined consume of PlatformItemCollection?(result, a2);
  return result;
}

uint64_t outlined init with copy of ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187962BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 <= 0xFD)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)(v3 + 8), v4 & 1);
  v5 = v3 + *(int *)(v1 + 24);
  v6 = type metadata accessor for PlatformItemList.Item();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {

    swift_bridgeObjectRelease();
    swift_release();
    v7 = *(_QWORD *)(v5 + 184);
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v9 = *(unsigned __int8 *)(v5 + 72);
      if (v9 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v5 + 64), v9);
        v7 = *(_QWORD *)(v5 + 184);
        v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v8 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v5 + 168), *(_QWORD *)(v5 + 176), v7);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(v5 + 256))
    {
      swift_bridgeObjectRelease();
      v10 = *(void **)(v5 + 264);
      if ((unint64_t)v10 >= 2)

      swift_release();
      swift_release();
    }
    v11 = *(_QWORD *)(v5 + 328);
    if (v11 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v5 + 296), *(_QWORD *)(v5 + 304), *(_QWORD *)(v5 + 312), *(_QWORD *)(v5 + 320), v11, *(_QWORD *)(v5 + 336), *(_QWORD *)(v5 + 344), *(_QWORD *)(v5 + 352), *(_QWORD *)(v5 + 360), *(_QWORD *)(v5 + 368), *(_QWORD *)(v5 + 376), *(_QWORD *)(v5 + 384), *(_QWORD *)(v5 + 392));
    v12 = *(_QWORD *)(v5 + 408);
    if (v12)
    {
      if (v12 == 1)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v5 + 504))
          swift_release();
        if (*(_QWORD *)(v5 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(v5 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(v5 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = v5 + *(int *)(v6 + 112);
        v14 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
        {
          v15 = v13 + *(int *)(v14 + 20);
          outlined consume of Text.Storage(*(_QWORD *)v15, *(_QWORD *)(v15 + 8), *(_BYTE *)(v15 + 16));
          swift_bridgeObjectRelease();
          v16 = v15 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v17 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
          if (*(_QWORD *)(v13 + *(int *)(v14 + 24)))
            swift_release();
        }
        swift_release();
        return swift_deallocObject();
      }
      swift_release();
    }
    if (*(_QWORD *)(v5 + 424))
      swift_release();
    if (*(_QWORD *)(v5 + 440))
      swift_release();
    goto LABEL_23;
  }
  return swift_deallocObject();
}

uint64_t outlined init with take of ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ToolbarTitleMenu.PreferenceTransform.value.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ToolbarStorage.NavigationProperties(0) - 8) + 80);
  return closure #1 in ToolbarTitleMenu.PreferenceTransform.value.getter(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t outlined destroy of ToolbarStorage.NavigationProperties(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ToolbarStorage.NavigationProperties?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ToolbarStorage.NavigationProperties?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata completion function for UIKitBarItemHost()
{
  return swift_initClassMetadata2();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV4ItemVG_AH2IDVs5NeverOTg503_s7d18UI23UIKitBarButtonh30GroupC09didChangegF04fromyAA14fg20V0gF0VSg_tFAG2IDVAG0V52Vcfu_32d237e9c4ce9601f416b0dbfaac74f787AnLTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v17;
    v4 = *(_QWORD *)(type metadata accessor for ToolbarStorage.Item(0) - 8);
    v15 = *(_QWORD *)(v4 + 72);
    v5 = (uint64_t *)(((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                   + a1
                   + 24);
    do
    {
      v6 = *(v5 - 3);
      v7 = *(v5 - 2);
      v16 = *(v5 - 1);
      v9 = *v5;
      v8 = v5[1];
      v10 = v5[2];
      v11 = *(_QWORD *)(v17 + 16);
      v12 = *(_QWORD *)(v17 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v11 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v11 + 1, 1);
      *(_QWORD *)(v17 + 16) = v11 + 1;
      v13 = (_QWORD *)(v17 + 48 * v11);
      v13[4] = v6;
      v13[5] = v7;
      v13[6] = v16;
      v13[7] = v9;
      v13[8] = v8;
      v13[9] = v10;
      v5 = (uint64_t *)((char *)v5 + v15);
      --v1;
    }
    while (v1);
  }
  return v2;
}

void UINavigationItem.adoptNavigationItem(_:updates:forceUpdate:)(void *a1, uint64_t a2, int a3, char a4)
{
  void *v4;
  void *v5;
  char v7;
  char v10;
  char v11;
  id v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  Class isa;
  char v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  char v24;
  char v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  unsigned int v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  _BYTE aBlock[40];
  uint64_t v36;

  v5 = v4;
  v7 = BYTE2(a3);
  memset(aBlock, 0, sizeof(aBlock));
  v10 = specialized Set.contains(_:)((uint64_t)aBlock, a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)aBlock);
  if ((v10 & 1) != 0 || (a4 & 1) != 0)
    UINavigationItem.updateTitleIfNeeded(_:)(a1);
  memset(aBlock, 0, 24);
  *(_OWORD *)&aBlock[24] = xmmword_187BFE310;
  v11 = specialized Set.contains(_:)((uint64_t)aBlock, a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)aBlock);
  if ((v11 & 1) != 0 || (a4 & 1) != 0)
  {
    v12 = objc_msgSend(a1, sel_centerItemGroups);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    *(_QWORD *)aBlock = v13;
    v14 = objc_msgSend(v5, sel_centerItemGroups);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v16 = specialized _ArrayProtocol.filter(_:)(v15);
    swift_bridgeObjectRelease();
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v16);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setCenterItemGroups_, isa);

  }
  memset(aBlock, 0, 24);
  *(_OWORD *)&aBlock[24] = xmmword_187C0CDF0;
  v18 = specialized Set.contains(_:)((uint64_t)aBlock, a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)aBlock);
  if ((v18 & 1) != 0 || (a4 & 1) != 0)
  {
    v19 = objc_msgSend(v5, sel__largeTitleAccessoryView);

    if (!v19
      || (v20 = objc_msgSend(v5, sel__largeTitleAccessoryView)) != 0
      && (v21 = v20,
          type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost), v22 = swift_dynamicCastClass(), v21, v22))
    {
      v23 = objc_msgSend(a1, sel__largeTitleAccessoryView);
      objc_msgSend(v5, sel__setLargeTitleAccessoryView_alignToBaseline_, v23, 0);

    }
  }
  memset(aBlock, 0, 24);
  *(_OWORD *)&aBlock[24] = xmmword_187C39070;
  v24 = specialized Set.contains(_:)((uint64_t)aBlock, a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)aBlock);
  if ((v24 & 1) != 0 || (a4 & 1) != 0)
    UINavigationItem.updateTrailingItemsIfNeeded(_:)(a1, (SEL *)&selRef_trailingItemGroups, (SEL *)&selRef_rightBarButtonItems, (SEL *)&selRef_setTrailingItemGroups_);
  memset(aBlock, 0, 24);
  *(_OWORD *)&aBlock[24] = xmmword_187C304D0;
  v25 = specialized Set.contains(_:)((uint64_t)aBlock, a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)aBlock);
  if ((v25 & 1) != 0 || (a4 & 1) != 0)
    UINavigationItem.updateTrailingItemsIfNeeded(_:)(a1, (SEL *)&selRef_leadingItemGroups, (SEL *)&selRef_leftBarButtonItems, (SEL *)&selRef_setLeadingItemGroups_);
  memset(aBlock, 0, 24);
  *(_OWORD *)&aBlock[24] = xmmword_187C39080;
  specialized Set.contains(_:)((uint64_t)aBlock, a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)aBlock);
  UINavigationItem.updateSearchControllerIfNeeded(_:)(a1);
  if ((v7 & 2) != 0 || (a4 & 1) != 0)
  {
    v26 = objc_msgSend(a1, sel_titleMenuProvider);
    if (v26)
    {
      v27 = swift_allocObject();
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)&aBlock[32] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (@autoreleased UIMenu?);
      v36 = v27;
      *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
      *(_QWORD *)&aBlock[8] = 1107296256;
      *(_QWORD *)&aBlock[16] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
      *(_QWORD *)&aBlock[24] = &block_descriptor_74;
      v26 = _Block_copy(aBlock);
      swift_release();
    }
    objc_msgSend(v5, sel_setTitleMenuProvider_, v26);
    _Block_release(v26);
  }
  if ((v7 & 1) != 0 || (a4 & 1) != 0)
  {
    v28 = objc_msgSend(a1, sel_documentProperties);
    v29 = objc_msgSend(v5, sel_documentProperties);
    if (!v29
      || (v30 = v29,
          swift_getObjectType(),
          v31 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI),
          v30,
          v31))
    {
      objc_msgSend(a1, sel_setDocumentProperties_, 0);
      objc_msgSend(v5, sel_setDocumentProperties_, v28);
    }

  }
  if ((v7 & 4) != 0 || (a4 & 1) != 0)
  {
    v32 = UINavigationItem.renameDelegate.getter();
    swift_unknownObjectRelease();
    if (v32
      || UINavigationItem.renameDelegate.getter()
      && (type metadata accessor for ToolbarPlatformDelegate(),
          v34 = swift_dynamicCastClass(),
          swift_unknownObjectRelease(),
          v34))
    {
      UINavigationItem.renameDelegate.getter();
      UINavigationItem.renameDelegate.setter();
    }
  }
  v33 = objc_msgSend(a1, sel_customizationIdentifier);
  objc_msgSend(v5, sel_setCustomizationIdentifier_, v33);

}

void UIKitBarItemHost.__allocating_init(rootView:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  specialized UIKitBarItemHost.init(rootView:)();
}

uint64_t sub_1879636D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 2448) - 8) + 8))(v2);
  return a1;
}

uint64_t specialized CollectionChanges.Projection.init(kind:changes:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  _BYTE *i;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return result;
  v3 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = (unsigned __int8 *)(a2 + 64);
  while (1)
  {
    v7 = *v5;
    v5 += 40;
    v6 = v7;
    if (!v7)
    {
      if (!(_BYTE)result)
        goto LABEL_12;
      goto LABEL_4;
    }
    if (v6 != 1)
      break;
    if (result == 1)
      goto LABEL_12;
LABEL_4:
    if (v2 == ++v3)
      goto LABEL_12;
  }
  if (result != 2)
    goto LABEL_4;
LABEL_12:
  for (i = (_BYTE *)(a2 + 40 * v2 + 24); ; i -= 40)
  {
    v9 = v4 - 1;
    if (v4 - 1 >= v2)
      break;
    if (*i)
    {
      if (*i == 1)
      {
        if (result == 1)
          return result;
      }
      else if (result == 2)
      {
        return result;
      }
    }
    else if (!(_BYTE)result)
    {
      return result;
    }
    --v4;
    if (!v9)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized CollectionChanges.Projection.index(before:)(unint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t result;
  Swift::String v7;

  v3 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v3 < -1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)(a3 + 16) < a1)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (a1)
  {
    v4 = (_BYTE *)(a3 + 40 * a1 + 24);
    v5 = a1 - 1;
    while (v5 <= v3)
    {
      if (*v4)
      {
        if (*v4 == 1)
        {
          if (a2 == 1)
            return v5;
        }
        else if (a2 == 2)
        {
          return v5;
        }
      }
      else if (!a2)
      {
        return v5;
      }
      --v5;
      v4 -= 40;
      if (v5 == -1)
        goto LABEL_19;
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_19:
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CollectionChanges.Projection.index(after:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  Swift::String v11;

  v6 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v6 >= a5)
    return a5;
  v7 = *(_QWORD *)(a3 + 16);
  if (v7 < v6)
    goto LABEL_9;
  if (v6 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v8 = specialized Collection.firstIndex(where:)(a3 + 32, v6, (2 * v7) | 1, a2);
  if ((v9 & 1) == 0)
    return v8;
LABEL_11:
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CollectionChanges.Projection.subscript.getter(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  Swift::String v5;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(a3 + 16) <= a1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v3 = a3 + 40 * a1;
  if (*(unsigned __int8 *)(v3 + 64) >= 2u)
    return *(_QWORD *)(v3 + 32);
LABEL_7:
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  Swift::String v5;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(a3 + 16) <= a1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v3 = a3 + 40 * a1;
  if (*(unsigned __int8 *)(v3 + 64) <= 1u)
    return *(_QWORD *)(v3 + 32);
LABEL_7:
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void @objc UIKitBarItemHost.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized UIKitBarItemHost.init(coder:)();
}

Swift::Void __swiftcall UIKitBarItemHost.initializeSize()()
{
  void *v0;
  uint64_t ObjectType;
  CGSize v2;

  ObjectType = swift_getObjectType();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, ObjectType);
  v2 = ViewRendererHost.idealSize()();
  objc_msgSend(v0, sel_setBounds_, 0.0, 0.0, v2.width, v2.height);
}

void UIKitBarItemHost.modifyViewInputs(_:)(uint64_t a1)
{
  _UIHostingView.modifyViewInputs(_:)(a1);
}

uint64_t sub_187963CE4()
{
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  PropertyList.subscript.getter();
  return PropertyList.subscript.setter();
}

Swift::Void __swiftcall UIKitBarItemHost.willMove(toSuperview:)(UIView_optional *toSuperview)
{
  uint64_t *v1;
  objc_class *ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = *v1;
  v5 = *MEMORY[0x1E0DEEDD8];
  v9.receiver = v1;
  v9.super_class = ObjectType;
  -[UIView_optional willMoveToSuperview:](&v9, sel_willMoveToSuperview_, toSuperview);
  if (toSuperview)
  {
    v6 = v5 & v4;
    UIKitBarItemHost.initializeSize()();
    static _ProposedSize.unspecified.getter();
    v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = *(_QWORD *)(v6 + 2448);
    v8[3] = *(_QWORD *)(v6 + 2456);
    v8[4] = v7;
    swift_beginAccess();
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    static _ProposedSize.unspecified.getter();
    swift_beginAccess();
    ViewGraphGeometryObservers.resetObserver(for:)();
  }
  else
  {
    swift_beginAccess();
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
    ViewGraphGeometryObservers.removeAll()();
  }
  swift_endAccess();
}

void closure #1 in UIKitBarItemHost.willMove(toSuperview:)(double *a1, double *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  _QWORD v21[3];
  double v22;
  uint64_t v23;

  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = *a2;
  v13 = a3 + 16;
  swift_beginAccess();
  v14 = MEMORY[0x18D760234](a3 + 16);
  if (v14)
  {
    v15 = (void *)v14;
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E0DED500], v6);
    swift_retain();
    GraphHost.environment.getter();
    swift_release();
    v22 = *(double *)v21;
    v23 = v21[1];
    EnvironmentValues.pixelLength.getter();
    v17 = v16;
    swift_release();
    swift_release();
    v22 = v12;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, v17);
    v18 = v22;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v18 != v11)
    {
      objc_msgSend(v15, sel_frame);
      objc_msgSend(v15, sel_setFrame_);
      swift_beginAccess();
      v19 = (void *)MEMORY[0x18D760234](v13);
      if (v19)
      {
        v20 = v19;
        objc_msgSend(v19, sel_invalidateIntrinsicContentSize);

      }
    }

  }
}

void @objc UIKitBarItemHost.willMove(toSuperview:)(void *a1, uint64_t a2, UIView_optional *a3)
{
  UIView_optional *v5;
  id v6;

  v5 = a3;
  v6 = a1;
  UIKitBarItemHost.willMove(toSuperview:)(a3);

}

uint64_t UIKitBarItemHost.__ivar_destroyer()
{
  return swift_release();
}

uint64_t @objc UIKitBarItemHost.__ivar_destroyer()
{
  return swift_release();
}

uint64_t type metadata accessor for UIKitBarItemHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitBarItemHost);
}

void UIKitBarPaletteHost.item.didset()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD v8[44];
  _BYTE v9[88];

  v1 = *(_QWORD **)(v0 + OBJC_IVAR____TtC7SwiftUI19UIKitBarPaletteHost_host);
  v2 = v0 + OBJC_IVAR____TtC7SwiftUI19UIKitBarPaletteHost_item;
  swift_beginAccess();
  outlined init with copy of _ViewList_View(v2 + 104, (uint64_t)v9);
  outlined init with copy of _ViewList_View((uint64_t)v9, (uint64_t)v8);
  v3 = (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60);
  swift_beginAccess();
  v4 = v1;
  outlined assign with take of _ViewList_View((uint64_t)v8, v3);
  swift_endAccess();
  v8[0] = 1;
  type metadata accessor for _UIHostingView<_ViewList_View>(0, v5, v6, v7);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<_ViewList_View>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  outlined destroy of _ViewList_View((uint64_t)v9);

}

uint64_t ObjC metadata update function for UIKitBarPaletteHost()
{
  return type metadata accessor for UIKitBarPaletteHost(0);
}

uint64_t type metadata accessor for UIKitBarPaletteHost(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitBarPaletteHost);
}

uint64_t type metadata completion function for UIKitBarPaletteHost()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ToolbarStorage.Item(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance UIKitBarPaletteHost()
{
  swift_weakLoadStrong();
  return EnvironmentValues.preferenceBridge.setter();
}

void UIKitBarButtonItem.updatePlatformItem(_:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v16 - v5;
  if (*(_QWORD *)(a1 + 16))
  {
    PlatformItemList.mergedContentItem.getter(a1, (uint64_t)v6);
    v7 = type metadata accessor for PlatformItemList.Item();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  }
  else
  {
    v8 = type metadata accessor for PlatformItemList.Item();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  }
  v9 = (uint64_t)&v1[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem];
  swift_beginAccess();
  outlined assign with take of _ViewList_View?((uint64_t)v6, v9, (uint64_t)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t)type metadata accessor for PlatformItemList.Item, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  swift_endAccess();
  UIKitBarButtonItem.updateRepresentation()();
  v10 = UIKitBarButtonItem.updateBridging()();
  v11 = 0;
  if ((v10 & 1) != 0)
    goto LABEL_8;
  v12 = objc_msgSend(v1, sel_customView, 0);
  v13 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host;
  if (!v12
    || (v14 = v12, v15 = *(id *)&v1[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host], v12, v14 != v15))
  {
    v11 = *(_QWORD *)&v1[v13];
LABEL_8:
    objc_msgSend(v1, sel_setCustomView_, v11);
  }
}

uint64_t UIKitBarButtonItem.item.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  _BYTE v14[8];
  _OWORD v15[5];
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = &v14[-v3];
  v5 = type metadata accessor for ToolbarStorage.Item(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = v0 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item;
  swift_beginAccess();
  outlined init with copy of UTType?(v10, (uint64_t)v4, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of TaskPriority?((uint64_t)v4, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item);
  outlined init with take of TableCellFormula((uint64_t)v4, (uint64_t)v9, type metadata accessor for ToolbarStorage.Item);
  outlined init with copy of _ViewList_View((uint64_t)(v9 + 104), (uint64_t)v15);
  v12 = *(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge);
  swift_unknownObjectWeakInit();
  v13 = swift_unknownObjectWeakAssign();
  outlined init with take of TableCellFormula(v13, (uint64_t)&v21, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIBarButtonItem>);
  v17[2] = v15[2];
  v17[3] = v15[3];
  v17[4] = v15[4];
  v18 = v16;
  v17[0] = v15[0];
  v17[1] = v15[1];
  v19 = v12;
  v20 = 0;
  UIKitBarButtonItem.updateHost(rootView:)((uint64_t)v17);
  outlined destroy of BarItemView((uint64_t)v17);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for ToolbarStorage.Item);
}

uint64_t UIKitBarButtonItem.listView.didset()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  _OWORD v5[5];
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  _OWORD v16[5];
  uint64_t v17;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_listView;
  swift_beginAccess();
  outlined init with copy of SwiftUIAnySortComparator?(v1, (uint64_t)&v7, &lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E0CE0A40]);
  if (!*((_QWORD *)&v8 + 1))
    return outlined destroy of AccessibilityTableContext?((uint64_t)&v7, &lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E0CE0A40]);
  v16[2] = v9;
  v16[3] = v10;
  v16[4] = v11;
  v17 = v12;
  v16[0] = v7;
  v16[1] = v8;
  outlined init with copy of _ViewList_View((uint64_t)v16, (uint64_t)v5);
  v2 = *(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of TableCellFormula((uint64_t)&v4, (uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIBarButtonItem>);
  v9 = v5[2];
  v10 = v5[3];
  v11 = v5[4];
  v12 = v6;
  v7 = v5[0];
  v8 = v5[1];
  v13 = v2;
  v14 = 0;
  UIKitBarButtonItem.updateHost(rootView:)((uint64_t)&v7);
  outlined destroy of BarItemView((uint64_t)&v7);
  return outlined destroy of _ViewList_View((uint64_t)v16);
}

uint64_t UIKitBarButtonItem.initialize(rootView:context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  Class v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  _WORD v20[52];
  _BYTE v21[112];

  v2 = v1;
  v4 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host;
  v5 = *(_QWORD **)(v2 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host);
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x240) + 8) = &protocol witness table for UIKitBarButtonItem;
  swift_unknownObjectWeakAssign();
  outlined init with copy of BarItemView(a1, (uint64_t)v21);
  outlined init with copy of BarItemView((uint64_t)v21, (uint64_t)v20);
  v7 = (uint64_t)v5 + *(_QWORD *)((*v6 & *v5) + 0x60);
  swift_beginAccess();
  v8 = v5;
  outlined assign with take of BarItemView((uint64_t)v20, v7);
  swift_endAccess();
  v20[0] = 1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  outlined destroy of BarItemView((uint64_t)v21);

  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitInspectorV3Bridge);
  v10 = (char *)objc_msgSend(objc_allocWithZone(v9), sel_init);
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  v11 = &v10[direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections];
  *(_QWORD *)v11 = 3;
  v11[8] = 0;
  v12 = *(_QWORD **)(v2 + v4);
  v13 = *(_QWORD *)((*v6 & *v12) + 0x1B0);
  v14 = *(void **)((char *)v12 + v13);
  *(_QWORD *)((char *)v12 + v13) = v10;
  v15 = v10;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for SharingActivityPickerBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SharingActivityPickerBridge);
  swift_allocObject();
  v16 = specialized SharingActivityPickerBridge.init()();
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(v16 + 24) = 3;
  *(_BYTE *)(v16 + 32) = 0;
  *(_QWORD *)(*(_QWORD *)(v2 + v4) + *(_QWORD *)((*v6 & **(_QWORD **)(v2 + v4)) + 0x1C8)) = v16;
  swift_retain();
  swift_release();
  v17 = *(id *)(v2 + v4);
  v18 = specialized _UIHostingView.sheetBridge.getter();

  if (v18)
  {
    swift_unknownObjectWeakAssign();

  }
  return swift_release();
}

void UIKitBarButtonItem.updateHost(rootView:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  _WORD v9[52];
  _BYTE v10[104];

  v2 = v1;
  v3 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host;
  v4 = *(_QWORD **)(v1 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host);
  outlined init with copy of BarItemView(a1, (uint64_t)v10);
  outlined init with copy of BarItemView((uint64_t)v10, (uint64_t)v9);
  v5 = (uint64_t)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x60);
  swift_beginAccess();
  v6 = v4;
  outlined assign with take of BarItemView((uint64_t)v9, v5);
  swift_endAccess();
  v9[0] = 1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  outlined destroy of BarItemView((uint64_t)v10);

  v7 = objc_msgSend(*(id *)(v2 + v3), sel_window);
  if (v7)
  {

  }
  else
  {
    MEMORY[0x1E0C80A78](0, v8);
    static Update.ensure<A>(_:)();
  }
}

void closure #1 in UIKitBarButtonItem.updateHost(rootView:)(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  v2 = v1;
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();

}

uint64_t closure #1 in UIKitBarButtonItem.performAction(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v19 - v4;
  outlined init with copy of UTType?(a1, (uint64_t)&v19 - v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  v6 = type metadata accessor for PlatformItemList.Item();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6) == 1)
    return outlined destroy of TaskPriority?((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  v9 = *((_QWORD *)v5 + 50);
  v8 = (void (*)(uint64_t))*((_QWORD *)v5 + 51);
  v10 = *((_QWORD *)v5 + 52);
  v11 = *((_QWORD *)v5 + 53);
  v12 = *((_QWORD *)v5 + 54);
  v13 = *((_QWORD *)v5 + 55);
  v14 = *((_QWORD *)v5 + 56);
  v15 = *((_QWORD *)v5 + 57);
  v16 = v5[464];
  LOBYTE(v17) = v16;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v9, (uint64_t)v8, v10, v11, v12, v13, v14, v15, v17, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if (v8 != (void (*)(uint64_t))1)
  {
    outlined copy of AppIntentExecutor?((uint64_t)v8);
    LOBYTE(v18) = v16;
    result = outlined consume of PlatformItemList.Item.SelectionBehavior?(v9, (uint64_t)v8, v10, v11, v12, v13, v14, v15, v18, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    if (v8)
    {
      v8(result);
      return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
    }
  }
  return result;
}

void UIKitBarButtonItem.updateRepresentation()()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void **v15;
  unsigned int (*v16)(void **, uint64_t, uint64_t);
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  Swift::String v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  Swift::OpaquePointer v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  UIMenu *v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  UIImage_optional v63;

  v1 = v0;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (void **)((char *)&v51 - v4);
  v6 = type metadata accessor for PlatformItemList.Item();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v51 - v13;
  v15 = (void **)&v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem];
  swift_beginAccess();
  v16 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v7 + 48);
  v17 = 0;
  if (!v16(v15, 1, v6))
  {
    v18 = v15[72];
    if (v18 || (v18 = *v15) != 0)
    {
      v19 = objc_msgSend(v18, sel_string);
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)&v53 = v6;
      v21 = v14;
      v22 = v7;
      v23 = v1;
      v24 = v10;
      v26 = v25;

      v17 = (void *)MEMORY[0x18D75CC88](v20, v26);
      v10 = v24;
      v1 = v23;
      v7 = v22;
      v14 = v21;
      v6 = v53;
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = 0;
    }
  }
  objc_msgSend(v1, sel_setTitle_, v17);

  if (v16(v15, 1, v6))
  {
    v27 = 0;
  }
  else
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v27 = (void *)PlatformItemList.Item.image.getter();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  }
  objc_msgSend(v1, sel_setImage_, v27);

  if (v16(v15, 1, v6) || (unint64_t)v15[51] < 2)
  {
    objc_msgSend(v1, sel_setAction_, 0);
    objc_msgSend(v1, sel_setTarget_, 0);
  }
  else
  {
    objc_msgSend(v1, sel_setAction_, sel_performAction_);
    objc_msgSend(v1, sel_setTarget_, v1);
  }
  outlined init with copy of UTType?((uint64_t)v15, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  if (v16(v5, 1, v6) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
LABEL_31:
    v42 = 0;
    goto LABEL_32;
  }
  outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if ((PlatformItemList.Item.isValidMenuRepresentation.getter() & 1) == 0)
  {
    v46 = (uint64_t)v10;
LABEL_30:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v46, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    goto LABEL_31;
  }
  v52 = v10;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v29 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v30 = swift_allocObject();
  v53 = xmmword_187BF9830;
  *(_OWORD *)(v30 + 16) = xmmword_187BF9830;
  outlined init with take of TableCellFormula((uint64_t)v14, v30 + v29, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  v31 = MEMORY[0x1E0DEE9D8];
  v62 = MEMORY[0x1E0DEE9D8];
  v32 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  LOBYTE(v54) = 0;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, v28);
  v33 = type metadata accessor for MenuVisitor.MenuStackGroup();
  v34 = *(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80);
  v35 = (v34 + 32) & ~v34;
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = v53;
  if (one-time initialization token for empty != -1)
    swift_once();
  v37 = __swift_project_value_buffer(v33, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v37, v36 + v35, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
  v38 = (char)v54;
  v54 = 0;
  v55 = 0;
  v56 = MEMORY[0x1E0DEE9E0];
  v57 = v32;
  v58 = v31;
  v59 = MEMORY[0x1E0DEE9E0];
  v60 = v38;
  v61 = v36;
  MenuVisitor.visit(_:uniqueNames:)(v30, &v62);
  swift_bridgeObjectRelease();
  v39 = v58;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (!(v39 >> 62))
  {
    v40 = (uint64_t)v52;
    if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_18;
LABEL_28:
    swift_bridgeObjectRelease();
    if ((*((_BYTE *)v1 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_hasOwnMenuSection) & 1) == 0)
    {
      v42 = 0;
      goto LABEL_41;
    }
LABEL_29:
    v46 = v40;
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  v47 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v40 = (uint64_t)v52;
  if (!v47)
    goto LABEL_28;
LABEL_18:
  if ((v39 & 0xC000000000000001) != 0)
  {
    v41 = (id)MEMORY[0x18D75E3BC](0, v39);
    goto LABEL_21;
  }
  if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v41 = *(id *)(v39 + 32);
LABEL_21:
    v42 = v41;
    swift_bridgeObjectRelease();
    if ((*((_BYTE *)v1 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_hasOwnMenuSection) & 1) == 0)
    {
LABEL_41:
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v40, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
LABEL_32:
      v48 = objc_msgSend(v1, sel_menuRepresentation);
      if (v48)
      {
        v49 = v48;

        if (v42 && v49 == v42)
          goto LABEL_39;
      }
      else if (!v42)
      {
LABEL_38:
        v49 = v42;
LABEL_39:

        return;
      }
      objc_msgSend(v1, sel_setMenuRepresentation_, v42);
      goto LABEL_38;
    }
    if (v42)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = xmmword_187BFF9C0;
      *(_QWORD *)(v43 + 32) = v42;
      v54 = (UIMenu *)v43;
      specialized Array._endMutation()();
      v44._countAndFlagsBits = 0;
      v44._object = (void *)0xE000000000000000;
      v63.value.super.isa = 0;
      v63.is_nil = 0;
      UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v54, v44, (Swift::String_optional)0, v63, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v54, v50);
      v42 = v45;
      goto LABEL_41;
    }
    goto LABEL_29;
  }
  __break(1u);
}

uint64_t UIKitBarButtonItem.updateBridging()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  void *v16;
  id v17;
  int v18;
  id v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  BOOL v24;
  int8x16_t v26;
  id v27;
  id v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BOOL8 v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  NSDictionary v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  UIMenuElementSize v48;
  unint64_t v49;
  UIMenuOptions v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  UIMenu *v61;
  Swift::String v62;
  void *v63;
  void *v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  void *v71;
  int *v72;
  uint64_t v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  char v78;
  Swift::OpaquePointer v79;
  char *v80;
  uint64_t v81;
  int *v82;
  char *v83;
  _BYTE v84[48];
  _BYTE v85[48];
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  unint64_t v89;
  UIMenuElementSize v90;
  uint64_t v91;
  _BYTE v92[8];
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  char v98;
  _BYTE v99[40];
  char v100;
  UIImage_optional v101;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v80 - v3;
  v5 = type metadata accessor for PlatformItemList.Item();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v81 = (uint64_t)&v80 - v12;
  static Semantics.v3.getter();
  v13 = isLinkedOnOrAfter(_:)();
  v14 = (uint64_t)&v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem];
  swift_beginAccess();
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  v82 = (int *)v5;
  if (!v15(v14, 1, v5) && *(_BYTE *)(v14 + 634) != 3)
  {
    static Semantics.v3.getter();
    if ((isLinkedOnOrAfter(_:)() & 1) != 0)
    {
      static Semantics.v5.getter();
      v13 &= isLinkedOnOrAfter(_:)();
    }
  }
  v83 = v0;
  v16 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  v17 = v16;
  ViewRendererHost.preferenceValue<A>(_:)();

  v18 = v87;
  LODWORD(v16) = v86 == 1;
  static Semantics.v5.getter();
  if ((isLinkedOnOrAfter(_:)() & v18 & v16 & 1) == 0 && (v13 & 1) != 0)
    return 0;
  v19 = v83;
  v20 = &v83[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item];
  swift_beginAccess();
  v21 = type metadata accessor for ToolbarStorage.Item(0);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48);
  if (v22(v20, 1, v21))
    return 0;
  v80 = v20 + 48;
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v20 + 48), (uint64_t)&v86);
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v86, (uint64_t)v99);
  if (v100 == 2)
  {
    v24 = (unint64_t)(*(_QWORD *)v99 - 21) <= 1 || *(_QWORD *)v99 == 4;
    if (v24 || *(_QWORD *)v99 == 1)
    {
      v26 = vorrq_s8(*(int8x16_t *)&v99[8], *(int8x16_t *)&v99[24]);
      if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)))
      {
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v86);
        return 0;
      }
    }
  }
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v99);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v86);
  v27 = objc_msgSend(v19, sel_title);
  if (v27)
  {

  }
  else
  {
    v28 = objc_msgSend(v19, sel_image);

    if (!v28)
      return 0;
  }
  outlined init with copy of UTType?(v14, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  if (v15((uint64_t)v4, 1, (uint64_t)v82) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
    return 0;
  }
  v29 = v81;
  outlined init with take of TableCellFormula((uint64_t)v4, v81, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if (v22(v20, 1, v21))
  {
    memset(v99, 0, sizeof(v99));
    v100 = -1;
  }
  else
  {
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v80, (uint64_t)v99);
  }
  v95 = 5;
  v96 = 0u;
  v97 = 0u;
  v98 = 2;
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v99, (uint64_t)&v86, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v95, (uint64_t)v92, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  if (v91 == 255)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v95, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    outlined destroy of AccessibilityTableContext?((uint64_t)v99, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if (v94 == 255)
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v86, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      goto LABEL_34;
    }
  }
  else
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v86, (uint64_t)v85, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if (v94 != 255)
    {
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)v92, (uint64_t)v84);
      v30 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v85, (uint64_t)v84);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v84);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v95, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      outlined destroy of AccessibilityTableContext?((uint64_t)v99, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v85);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v86, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      if ((v30 & 1) == 0)
        goto LABEL_37;
LABEL_34:
      v31 = 2;
      goto LABEL_38;
    }
    outlined destroy of AccessibilityTableContext?((uint64_t)&v95, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    outlined destroy of AccessibilityTableContext?((uint64_t)v99, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v85);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v86, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?));
LABEL_37:
  v31 = 0;
LABEL_38:
  if ((id)v31 != objc_msgSend(v19, sel_style))
    objc_msgSend(v19, sel_setStyle_, v31);
  if (objc_msgSend(v19, sel_isEnabled) != *(unsigned __int8 *)(v29 + 56))
    objc_msgSend(v19, sel_setEnabled_);
  v32 = *(_QWORD *)(v29 + 408) != 1 && *(unsigned __int8 *)(v29 + 464) == 1;
  objc_msgSend(v19, sel_setSpringLoaded_, v32);
  v33 = *(void **)v29;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v29, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if (v33)
  {
    v34 = v33;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  }
  else
  {
    v35 = (void *)*((_QWORD *)v9 + 72);
    v34 = v35;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    if (!v35)
      goto LABEL_52;
    v19 = v83;
  }
  if ((uint64_t)objc_msgSend(v34, sel_length) >= 1)
  {
    v36 = objc_msgSend(v34, sel_attributesAtIndex_effectiveRange_, 0, 0);
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v29 = v81;
    v37.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v19, sel_setTitleTextAttributes_forState_, v37.super.isa, 0);

    goto LABEL_53;
  }

LABEL_52:
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  v37.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v19 = v83;
  objc_msgSend(v83, sel_setTitleTextAttributes_forState_, v37.super.isa, 0);
LABEL_53:

  v38 = *(unsigned __int8 *)(v29 + 634);
  if (v38 != 3)
    objc_msgSend(v19, sel_setSelected_, v38 == 0);
  v39 = *(_QWORD *)(v29 + 616);
  if (v39)
  {
    v40 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)v99 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    v41 = specialized Dictionary.init(dictionaryLiteral:)(v40);
    LOBYTE(v86) = 0;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v42 = type metadata accessor for MenuVisitor.MenuStackGroup();
    v43 = *(unsigned __int8 *)(*(_QWORD *)(v42 - 8) + 80);
    v44 = (v43 + 32) & ~v43;
    v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_187BF9830;
    if (one-time initialization token for empty != -1)
      swift_once();
    v46 = __swift_project_value_buffer(v42, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v46, v45 + v44, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
    v47 = v86;
    v86 = 0;
    v87 = 0;
    v88 = MEMORY[0x1E0DEE9E0];
    v89 = v41;
    v90 = v40;
    v91 = MEMORY[0x1E0DEE9E0];
    v92[0] = v47;
    v93 = v45;
    MenuVisitor.visit(_:uniqueNames:)(v39, (uint64_t *)v99);
    swift_bridgeObjectRelease();
    v48 = v90;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = v81;
    v49 = *(_QWORD *)(v81 + 328);
    v50 = 2;
    if (v49 >> 62 == 3)
    {
      v19 = v83;
      if ((v49 & 0xFFFFFFFFFFFFFFFCLL) != 0x3FFFFFFFCLL)
      {
        v50 = 2;
        if (v49 == 0xC000000000000000 && *(_QWORD *)(v81 + 296) == 4)
        {
          v51 = *(_QWORD *)(v81 + 304);
          v52 = *(_QWORD *)(v81 + 312);
          v53 = *(_QWORD *)(v81 + 320);
          if (!(v52 | v51 | v53))
          {
            v54 = *(_QWORD *)(v81 + 336);
            v55 = *(_QWORD *)(v81 + 344);
            v56 = *(_QWORD *)(v81 + 352);
            v57 = *(_QWORD *)(v81 + 360);
            v58 = *(_QWORD *)(v81 + 368);
            v59 = *(_QWORD *)(v81 + 376);
            v60 = *(_QWORD *)(v81 + 392);
            if (!(v55 | v54 | v56 | v57 | v58 | v59 | *(_QWORD *)(v81 + 384) | v60))
            {
              if (*(_BYTE *)(v81 + 633) == 1)
                v50 = 1;
              else
                v50 = 2 * (*(_BYTE *)(v81 + 633) != 0);
              outlined copy of PlatformItemList.Item.SystemItem((id)4, v51, v52, v53, 0xC000000000000000, v54, v55, v56, v57, v58, v59, *(_QWORD *)(v81 + 384), v60);
            }
          }
        }
      }
    }
    else
    {
      v19 = v83;
    }
    v61 = (UIMenu *)type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
    v62._countAndFlagsBits = 0;
    v62._object = (void *)0xE000000000000000;
    v101.value.super.isa = 0;
    v101.is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v61, v62, (Swift::String_optional)0, v101, 0, v50, v48, v79);
    v64 = v63;
    objc_msgSend(v19, sel_setMenu_, v63);

    v65 = *(_QWORD *)(v29 + 408);
    if (v65 >= 2 && (*(_BYTE *)(v29 + v82[31]) & 1) == 0)
    {
      v66 = *(_QWORD *)(v29 + 416);
      swift_retain();
      v67 = objc_msgSend(v19, sel_title);
      if (v67)
      {
        v68 = v67;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
        v69 = objc_msgSend(v19, sel_image);
        v70 = swift_allocObject();
        *(_QWORD *)(v70 + 16) = v65;
        *(_QWORD *)(v70 + 24) = v66;
        swift_retain();
        v29 = v81;
        v71 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
        objc_msgSend(v19, sel_setPrimaryAction_, v71);

        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v65);
LABEL_75:
        v72 = v82;
        objc_msgSend(v19, sel_setPreferredMenuElementOrder_, qword_187C723D0[*(char *)(v29 + v82[32])]);
        objc_msgSend(v19, sel_setChangesSelectionAsPrimaryAction_, *(_BYTE *)(v29 + v72[31]) & 1);
        goto LABEL_76;
      }
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v65);
    }
    objc_msgSend(v19, sel_setPrimaryAction_, 0);
    goto LABEL_75;
  }
LABEL_76:
  if (*(_QWORD *)(v29 + v82[33]))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    v73 = swift_retain();
    v74 = UIColor.init(_:)(v73);
  }
  else
  {
    v74 = 0;
  }
  v75 = objc_msgSend(v19, sel_tintColor);
  v76 = v75;
  if (v74)
  {
    if (v75)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      v77 = v74;
      v78 = static NSObject.== infix(_:_:)();

      if ((v78 & 1) != 0)
        goto LABEL_86;
    }
  }
  else
  {
    if (!v75)
    {
      v77 = 0;
      goto LABEL_86;
    }

  }
  objc_msgSend(v19, sel_setTintColor_, v74);
  v77 = v74;
LABEL_86:
  specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(v19, v29);

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v29, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  return 1;
}

uint64_t PlatformItemList.Item.isValidMenuRepresentation.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  _BOOL4 v11;
  uint64_t v12;
  _BOOL8 v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v1 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v18 - v7;
  v9 = *v0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v0, (uint64_t)&v18 - v7, v10);
  if (v9)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v11 = 1;
    v12 = v0[77];
    if (v12)
    {
LABEL_3:
      v13 = *(_QWORD *)(v12 + 16) != 0;
      goto LABEL_6;
    }
  }
  else
  {
    v14 = (void *)*((_QWORD *)v8 + 72);
    v15 = v14;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);

    v11 = v14 != 0;
    v12 = v0[77];
    if (v12)
      goto LABEL_3;
  }
  v13 = 0;
LABEL_6:
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v0, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if (v11)
  {
    v16 = *((_QWORD *)v4 + 51);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    return v16 != 1 || v13;
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  }
  return v13;
}

id @objc UIKitBarButtonItem.accessibilityIdentifier.getter(void *a1, uint64_t a2, SEL *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a1;
  v5 = UIKitBarButtonItem.accessibilityIdentifier.getter(a3);
  v7 = v6;

  if (v7)
  {
    v8 = (void *)MEMORY[0x18D75CC88](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

uint64_t UIKitBarButtonItem.accessibilityIdentifier.getter(SEL *a1)
{
  char *v1;
  objc_class *ObjectType;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v14;
  objc_super v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[2];

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host], sel_accessibilityElements);
  v5 = MEMORY[0x1E0DEE9B8];
  if (!v4)
  {
    v16 = 0u;
    v17 = 0u;
    goto LABEL_9;
  }
  v6 = v4;
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v7 + 16))
  {
    v16 = 0u;
    v17 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(v7 + 32, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v17 + 1))
  {
LABEL_9:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v16, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
    goto LABEL_10;
  }
  outlined init with take of Any(&v16, v18);
  outlined init with copy of Any((uint64_t)v18, (uint64_t)&v16);
  type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v8 = objc_msgSend(v14, *a1);
    if (v8)
    {
      v9 = v8;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      return v10;
    }

  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
LABEL_10:
  v15.receiver = v1;
  v15.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v15, *a1);
  if (!v11)
    return 0;
  v12 = v11;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v10;
}

id UIKitBarButtonItem.accessibilityTraits.getter()
{
  char *v0;
  objc_class *ObjectType;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v8;
  objc_super v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host], sel_accessibilityElements);
  v3 = MEMORY[0x1E0DEE9B8];
  if (!v2)
  {
    v10 = 0u;
    v11 = 0u;
    goto LABEL_8;
  }
  v4 = v2;
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v5 + 16))
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(v5 + 32, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_8:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v3 + 8);
LABEL_9:
    v9.receiver = v0;
    v9.super_class = ObjectType;
    return objc_msgSendSuper2(&v9, sel_accessibilityTraits);
  }
  outlined init with take of Any(&v10, v12);
  outlined init with copy of Any((uint64_t)v12, (uint64_t)&v10);
  type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    goto LABEL_9;
  }
  v6 = objc_msgSend(v8, sel_accessibilityTraits);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v6;
}

uint64_t UIKitBarButtonItem.accessibilityCustomActions.getter()
{
  char *v0;
  objc_class *ObjectType;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v12;
  objc_super v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host], sel_accessibilityElements);
  v3 = MEMORY[0x1E0DEE9B8];
  if (!v2)
  {
    v14 = 0u;
    v15 = 0u;
    goto LABEL_9;
  }
  v4 = v2;
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v5 + 16))
  {
    v14 = 0u;
    v15 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(v5 + 32, (uint64_t)&v14);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_9:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v14, (unint64_t *)&lazy cache variable for type metadata for Any?, v3 + 8);
    goto LABEL_10;
  }
  outlined init with take of Any(&v14, v16);
  outlined init with copy of Any((uint64_t)v16, (uint64_t)&v14);
  type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v6 = objc_msgSend(v12, sel_accessibilityCustomActions);
    if (v6)
    {
      v7 = v6;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
      v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      return v8;
    }

  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
LABEL_10:
  v13.receiver = v0;
  v13.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v13, sel_accessibilityCustomActions);
  if (!v9)
    return 0;
  v10 = v9;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v8;
}

uint64_t ObjC metadata update function for UIKitBarButtonItem()
{
  return type metadata accessor for UIKitBarButtonItem(0);
}

uint64_t type metadata accessor for UIKitBarButtonItem(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitBarButtonItem);
}

void type metadata completion function for UIKitBarButtonItem()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance UIKitBarButtonItem()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item;
  swift_beginAccess();
  v2 = type metadata accessor for ToolbarStorage.Item(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2))
    swift_weakLoadStrong();
  return EnvironmentValues.preferenceBridge.setter();
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePlatformItemList:) in conformance UIKitBarButtonItem(uint64_t a1, uint64_t a2)
{
  return specialized UIKitBarButtonItem.hostingView<A>(_:didChangePlatformItemList:)(a2);
}

uint64_t UIKitBarButtonItemGroup.didChangeGroupItem(from:)(char *a1)
{
  char *v1;
  char *v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  char *v50;
  uint64_t result;
  void *v52;
  uint64_t v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  id v76;
  unint64_t v77;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  Class isa;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  id v110;
  unint64_t v111;
  char *v112;
  Class v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  unint64_t v124;
  void *v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(uint64_t);
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  id v155;
  id v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  id v163;
  Swift::String v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  _WORD v198[52];
  _OWORD v199[5];
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  char v207;
  char v208;
  uint64_t v209;

  v2 = v1;
  v197 = a1;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v192 = (char *)&v165 - v6;
  v190 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  v184 = *(_QWORD *)(v190 - 8);
  MEMORY[0x1E0C80A78](v190, v7);
  v9 = (char *)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v165 - v12;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, v3);
  MEMORY[0x1E0C80A78](v14, v15);
  v185 = (char *)&v165 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v195 = (uint64_t)&v165 - v19;
  v186 = type metadata accessor for ToolbarStorage.Item(0);
  v196 = *(_QWORD *)(v186 - 8);
  MEMORY[0x1E0C80A78](v186, v20);
  v189 = (uint64_t)&v165 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v194 = (char *)&v165 - v24;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, v3);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v165 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v165 - v31;
  v33 = type metadata accessor for ToolbarStorage.GroupItem(0);
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v35);
  v188 = (char *)&v165 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v187 = (char *)&v165 - v39;
  MEMORY[0x1E0C80A78](v40, v41);
  v191 = (uint64_t)&v165 - v42;
  MEMORY[0x1E0C80A78](v43, v44);
  v193 = (uint64_t)&v165 - v45;
  v48 = MEMORY[0x1E0C80A78](v46, v47);
  v50 = (char *)&v165 - v49;
  result = MEMORY[0x18D760234](&v2[OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_viewController], v48);
  if (result)
  {
    v52 = (void *)result;
    v180 = v9;
    v183 = OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_edge;
    v182 = v2[OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_edge];
    v53 = (uint64_t)&v2[OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_groupItem];
    swift_beginAccess();
    outlined init with copy of UTType?(v53, (uint64_t)v32, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
    v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    if (v54(v32, 1, v33) == 1)
    {

      return outlined destroy of TaskPriority?((uint64_t)v32, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
    }
    v181 = v33;
    outlined init with take of TableCellFormula((uint64_t)v32, (uint64_t)v50, type metadata accessor for ToolbarStorage.GroupItem);
    outlined init with copy of UTType?((uint64_t)v197, (uint64_t)v28, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
    v55 = v54(v28, 1, v181);
    v171 = v13;
    v174 = v52;
    if (v55 == 1)
    {
      outlined destroy of TaskPriority?((uint64_t)v28, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
      v56 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      v57 = *((_QWORD *)v28 + 9);
      swift_bridgeObjectRetain();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v28, type metadata accessor for ToolbarStorage.GroupItem);
      v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV4ItemVG_AH2IDVs5NeverOTg503_s7d18UI23UIKitBarButtonh30GroupC09didChangegF04fromyAA14fg20V0gF0VSg_tFAG2IDVAG0V52Vcfu_32d237e9c4ce9601f416b0dbfaac74f787AnLTf3nnnpk_nTf1cn_nTm(v57);
      swift_bridgeObjectRelease();
    }
    v175 = v50;
    v58 = swift_bridgeObjectRetain();
    v59 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV4ItemVG_AH2IDVs5NeverOTg503_s7d18UI23UIKitBarButtonh30GroupC09didChangegF04fromyAA14fg20V0gF0VSg_tFAG2IDVAG0V52Vcfu_32d237e9c4ce9601f416b0dbfaac74f787AnLTf3nnnpk_nTf1cn_nTm(v58);
    v173 = 0;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v201 = MEMORY[0x1E0DEE9D8];
    specialized CollectionChanges.formChanges<A, B>(from:to:)(v56, v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v60 = v201;
    v61 = specialized CollectionChanges.Projection.init(kind:changes:)(0, v201);
    v63 = v62;
    v65 = v64;
    v67 = v66;
    v172 = v60;
    swift_bridgeObjectRetain();
    if (v67 == v65)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      LODWORD(v197) = specialized CollectionChanges.Projection.init(kind:changes:)(1, v172);
      v178 = (uint64_t *)v86;
      v179 = v87;
      if (v71 == v87)
      {
        swift_bridgeObjectRetain();
        v89 = v174;
        v88 = (uint64_t)v175;
        v90 = (uint64_t)v192;
LABEL_23:
        swift_bridgeObjectRelease();
        v91 = specialized CollectionChanges.Projection.init(kind:changes:)(2, v172);
        v172 = v94;
        v77 = v190;
        if (v92 == v93)
        {
LABEL_24:
          swift_bridgeObjectRelease();
          outlined init with copy of UTType?(v88 + *(int *)(v181 + 44), v90, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
          if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v184 + 48))(v90, 1, v77) == 1)
          {
            outlined destroy of TaskPriority?(v90, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
          }
          else
          {
            v149 = v90;
            v150 = (uint64_t)v171;
            outlined init with take of TableCellFormula(v149, (uint64_t)v171, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
            v151 = v150;
            v152 = (uint64_t)v180;
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v151, (uint64_t)v180, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
            if (swift_getEnumCaseMultiPayload() != 1)
            {
              v153 = *(_OWORD *)(v152 + 48);
              v203 = *(_OWORD *)(v152 + 32);
              v204 = v153;
              v205 = *(_OWORD *)(v152 + 64);
              v206 = *(_QWORD *)(v152 + 80);
              v154 = *(_OWORD *)(v152 + 16);
              v201 = *(_OWORD *)v152;
              v202 = v154;
              v90 = (uint64_t)v2;
              v155 = objc_msgSend(v2, sel_representativeItem);
              if (v155)
              {

                v156 = objc_msgSend(v2, sel_representativeItem);
                if (v156)
                {
                  v157 = v156;
                  type metadata accessor for UIKitBarButtonItem(0);
                  v158 = swift_dynamicCastClass();
                  if (v158)
                  {
                    v159 = v158;
                    outlined init with copy of _ViewList_View((uint64_t)&v201, (uint64_t)v199);
                    v160 = v159 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_listView;
                    swift_beginAccess();
                    v161 = MEMORY[0x1E0CE0A40];
                    outlined init with copy of SwiftUIAnySortComparator?(v160, (uint64_t)v198, &lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E0CE0A40]);
                    swift_beginAccess();
                    outlined assign with copy of _ViewList_View?((uint64_t)v199, v160, (uint64_t)&lazy cache variable for type metadata for _ViewList_View?, v161, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
                    swift_endAccess();
                    UIKitBarButtonItem.listView.didset();
                    outlined destroy of AccessibilityTableContext?((uint64_t)v199, &lazy cache variable for type metadata for _ViewList_View?, v161);
                    outlined destroy of AccessibilityTableContext?((uint64_t)v198, &lazy cache variable for type metadata for _ViewList_View?, v161);
                  }

                }
                goto LABEL_126;
              }
LABEL_125:
              v162 = v174;
              v163 = specialized static UIKitBarButtonItem.makeRepresentativeItem(view:context:)((uint64_t)&v201, v174, v182);
              objc_msgSend((id)v90, sel_setRepresentativeItem_, v163);

LABEL_126:
              outlined destroy of _ViewList_View((uint64_t)&v201);
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v171, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
              return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v175, type metadata accessor for ToolbarStorage.GroupItem);
            }
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v171, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v152, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
            v89 = v174;
            v88 = (uint64_t)v175;
          }
          objc_msgSend(v2, sel_setRepresentativeItem_, 0);

          return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v88, type metadata accessor for ToolbarStorage.GroupItem);
        }
LABEL_68:
        v115 = v92;
        v169 = v172 + 32;
        v178 = &v209;
        v179 = v189 + 104;
        v166 = v172 + 104;
        v177 = (char *)(MEMORY[0x1E0DEE9C0] + 8);
        v168 = v91;
        v167 = v93;
        v170 = v2;
        while (1)
        {
          if ((v115 & 0x8000000000000000) != 0)
            goto LABEL_134;
          v116 = *(_QWORD *)(v172 + 16);
          v117 = (uint64_t)v185;
          v118 = type metadata accessor for ToolbarStorage.Item;
          if (v115 >= v116)
            goto LABEL_135;
          v119 = v169 + 40 * v115;
          if (*(unsigned __int8 *)(v119 + 32) < 2u)
          {
            *(_QWORD *)&v201 = 0;
            *((_QWORD *)&v201 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(17);
            swift_bridgeObjectRelease();
            *(_QWORD *)&v201 = 0x2064696C61766E69;
            *((_QWORD *)&v201 + 1) = 0xEF203A7865646E69;
            *(_QWORD *)&v199[0] = v115;
            goto LABEL_143;
          }
          v120 = *(_QWORD *)v119;
          v121 = *(_QWORD *)(v119 + 8);
          v122 = v115 + 1;
          if ((uint64_t)(v115 + 1) < v93)
            break;
          v122 = v93;
LABEL_86:
          v176 = v122;
          if (v120 != v121)
          {
            if (v121 >= v120)
            {
              v124 = v120;
              v193 = v120;
              v191 = v121;
              if (v120 >= v121)
              {
LABEL_139:
                __break(1u);
LABEL_140:
                _fatalErrorMessage(_:_:file:line:flags:)();
                __break(1u);
LABEL_141:
                *(_QWORD *)&v201 = 0;
                *((_QWORD *)&v201 + 1) = 0xE000000000000000;
                swift_bridgeObjectRetain();
                _StringGuts.grow(_:)(23);
                swift_bridgeObjectRelease();
                *(_QWORD *)&v201 = 0xD000000000000015;
                *((_QWORD *)&v201 + 1) = 0x8000000187BDB080;
                for (*(_QWORD *)&v199[0] = v77; ; *(_QWORD *)&v199[0] = v77)
                {
LABEL_143:
                  v164._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                  String.append(_:)(v164);
                  swift_bridgeObjectRelease();
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
LABEL_144:
                  *(_QWORD *)&v201 = 0;
                  *((_QWORD *)&v201 + 1) = 0xE000000000000000;
                  _StringGuts.grow(_:)(17);
                  swift_bridgeObjectRelease();
                  *(_QWORD *)&v201 = 0x2064696C61766E69;
                  *((_QWORD *)&v201 + 1) = 0xEF203A7865646E69;
                }
              }
              while (2)
              {
                v126 = objc_msgSend(v2, sel_barButtonItems);
                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
                v127 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                if ((v127 & 0xC000000000000001) != 0)
                {
                  v77 = MEMORY[0x18D75E3BC](v124, v127);
                  v129 = (uint64_t)v187;
                  v128 = (uint64_t)v188;
                }
                else
                {
                  v129 = (uint64_t)v187;
                  v128 = (uint64_t)v188;
                  if ((v124 & 0x8000000000000000) != 0)
                    goto LABEL_128;
                  if (v124 >= *(_QWORD *)((v127 & 0xFFFFFFFFFFFFF8) + 0x10))
                    goto LABEL_130;
                  v77 = (unint64_t)*(id *)(v127 + 8 * v124 + 32);
                }
                swift_bridgeObjectRelease();
                type metadata accessor for UIKitBarButtonItem(0);
                v130 = swift_dynamicCastClassUnconditional();
                v131 = v170[v183];
                if (v131 == 2 || (v131 & 1) != 0)
                {
                  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v175, v129, type metadata accessor for ToolbarStorage.GroupItem);
                }
                else
                {
                  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v175, v129, type metadata accessor for ToolbarStorage.GroupItem);
                  if (v124)
                  {
                    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v129, type metadata accessor for ToolbarStorage.GroupItem);
                    v132 = 2;
LABEL_105:
                    v134 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge;
                    *(_BYTE *)(v130 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge) = v132;
                    if (v193 < 0)
                      goto LABEL_129;
                    v197 = (char *)v77;
                    v135 = *((_QWORD *)v175 + 9);
                    if (v124 >= *(_QWORD *)(v135 + 16))
                      goto LABEL_131;
                    v137 = v195;
                    v136 = v196;
                    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v135+ ((*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80))+ *(_QWORD *)(v196 + 72) * v124, v195, v118);
                    v138 = v118;
                    v139 = v186;
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v136 + 56))(v137, 0, 1, v186);
                    v140 = v130 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item;
                    swift_beginAccess();
                    v194 = v174;
                    outlined assign with copy of _ViewList_View?(v137, v140, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.Item?, (uint64_t)v138, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
                    swift_endAccess();
                    outlined init with copy of UTType?(v140, v117, &lazy cache variable for type metadata for ToolbarStorage.Item?, v138);
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v117, 1, v139) == 1)
                    {
                      outlined destroy of TaskPriority?(v117, &lazy cache variable for type metadata for ToolbarStorage.Item?, v138);
                      v2 = v170;
                      v77 = v190;
                      v90 = (uint64_t)v192;
                      v118 = v138;
                      v125 = v194;
                    }
                    else
                    {
                      outlined init with take of TableCellFormula(v117, v189, v138);
                      outlined init with copy of _ViewList_View(v179, (uint64_t)v199);
                      v141 = *(_BYTE *)(v130 + v134);
                      swift_unknownObjectWeakInit();
                      swift_unknownObjectWeakAssign();
                      outlined init with take of TableCellFormula((uint64_t)v198, (uint64_t)v178, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIBarButtonItem>);
                      v203 = v199[2];
                      v204 = v199[3];
                      v205 = v199[4];
                      v206 = v200;
                      v201 = v199[0];
                      v202 = v199[1];
                      v207 = v141;
                      v208 = 0;
                      v142 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host;
                      v143 = *(_QWORD **)(v130 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host);
                      outlined init with copy of BarItemView((uint64_t)&v201, (uint64_t)v199);
                      outlined init with copy of BarItemView((uint64_t)v199, (uint64_t)v198);
                      v144 = (uint64_t)v143 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v143) + 0x60);
                      swift_beginAccess();
                      v145 = v143;
                      outlined assign with take of BarItemView((uint64_t)v198, v144);
                      swift_endAccess();
                      v198[0] = 1;
                      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
                      lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
                      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
                      outlined destroy of BarItemView((uint64_t)v199);

                      v146 = objc_msgSend(*(id *)(v130 + v142), sel_window);
                      v118 = v138;
                      if (v146)
                      {

                      }
                      else
                      {
                        MEMORY[0x1E0C80A78](0, v147);
                        v148 = v173;
                        static Update.ensure<A>(_:)();
                        v173 = v148;
                      }
                      v2 = v170;
                      v90 = (uint64_t)v192;
                      v125 = v194;
                      outlined destroy of BarItemView((uint64_t)&v201);
                      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v189, v118);
                      v77 = v190;
                      v117 = (uint64_t)v185;
                    }
                    ++v124;
                    outlined destroy of TaskPriority?(v195, &lazy cache variable for type metadata for ToolbarStorage.Item?, v118);

                    if (v191 == v124)
                      goto LABEL_69;
                    continue;
                  }
                }
                break;
              }
              outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v129, v128, type metadata accessor for ToolbarStorage.GroupItem);
              if ((v131 & 1) != 0)
              {
                v133 = *(_QWORD *)(*(_QWORD *)(v128 + 72) + 16);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v129, type metadata accessor for ToolbarStorage.GroupItem);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v128, type metadata accessor for ToolbarStorage.GroupItem);
                v132 = v182;
                if (v124 != v133 - 1)
                  v132 = 2;
              }
              else
              {
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v129, type metadata accessor for ToolbarStorage.GroupItem);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v128, type metadata accessor for ToolbarStorage.GroupItem);
                v132 = v182;
              }
              goto LABEL_105;
            }
LABEL_138:
            __break(1u);
            goto LABEL_139;
          }
LABEL_69:
          v88 = (uint64_t)v175;
          v115 = v176;
          v93 = v167;
          v89 = v174;
          LOBYTE(v91) = v168;
          if (v176 == v167)
            goto LABEL_24;
        }
        if (v122 == v116)
        {
LABEL_142:
          *(_QWORD *)&v201 = 0;
          *((_QWORD *)&v201 + 1) = 0xE000000000000000;
          swift_bridgeObjectRetain();
          _StringGuts.grow(_:)(23);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v201 = 0xD000000000000015;
          *((_QWORD *)&v201 + 1) = 0x8000000187BDB080;
          *(_QWORD *)&v199[0] = v115;
          goto LABEL_143;
        }
        v123 = (_BYTE *)(v166 + 40 * v115);
        while (v122 < (uint64_t)v116)
        {
          if (*v123)
          {
            if (*v123 == 1)
            {
              if (v91 == 1)
                goto LABEL_86;
            }
            else if (v91 == 2)
            {
              goto LABEL_86;
            }
          }
          else if (!(_BYTE)v91)
          {
            goto LABEL_86;
          }
          ++v122;
          v123 += 40;
          if (v116 == v122)
            goto LABEL_142;
        }
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
        goto LABEL_136;
      }
    }
    else
    {
      v68 = (unint64_t)v67;
      v179 = v63;
      LODWORD(v178) = v61;
      v176 = (uint64_t)v67;
      v177 = v65;
      while (1)
      {
        v197 = (char *)specialized CollectionChanges.Projection.index(before:)(v68, v61, v63);
        v69 = specialized CollectionChanges.Projection.subscript.getter((unint64_t)v197, v61, v63);
        if (v70 != v69)
          break;
LABEL_20:
        v68 = (unint64_t)v197;
        v63 = v179;
        v61 = v178;
        if (v197 == v177)
          goto LABEL_21;
      }
      v72 = v69;
      v73 = v70;
      v74 = -v70;
      while (v72 < v73)
      {
        v75 = v2;
        v76 = objc_msgSend(v2, sel_barButtonItems);
        v2 = (char *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
        v77 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *(_QWORD *)&v201 = v77;
        if (!isUniquelyReferenced_nonNull_bridgeObject
          || (v77 & 0x8000000000000000) != 0
          || (v77 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v77);
        }
        v79 = v73 - 1;
        v80 = v77 & 0xFFFFFFFFFFFFFF8;
        v81 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v73 - 1 >= v81)
          goto LABEL_27;
        if ((uint64_t)(v74 + v81) < 0)
          goto LABEL_140;
        v82 = v81 - 1;
        v83 = v80 + 8 * v73;
        v84 = *(void **)(v83 + 24);
        memmove((void *)(v83 + 24), (const void *)(v83 + 32), 8 * (v74 + v81));
        *(_QWORD *)(v80 + 16) = v82;
        specialized Array._endMutation()();

        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v2 = v75;
        objc_msgSend(v75, sel_setBarButtonItems_, isa);

        ++v74;
        --v73;
        if (v72 == v79)
          goto LABEL_20;
      }
      __break(1u);
LABEL_27:
      __break(1u);
    }
    v77 = v71;
    v95 = (uint64_t)v178;
    v177 = (char *)(v178 + 4);
    swift_bridgeObjectRetain();
    v176 = v95 + 104;
    v89 = v174;
    v88 = (uint64_t)v175;
    v96 = (uint64_t)v194;
    v170 = v2;
    while (1)
    {
      if ((v77 & 0x8000000000000000) != 0)
        goto LABEL_132;
      v97 = v178[2];
      if (v77 >= v97)
        goto LABEL_133;
      v98 = &v177[40 * v77];
      if (v98[32] >= 2u)
        goto LABEL_144;
      v90 = *(_QWORD *)v98;
      v2 = (char *)*((_QWORD *)v98 + 1);
      v99 = v179;
      if ((uint64_t)(v77 + 1) < v179)
      {
        if (v77 + 1 == v97)
          goto LABEL_141;
        v100 = (_BYTE *)(v176 + 40 * v77);
        v99 = v77 + 1;
        while (v99 < (uint64_t)v97)
        {
          if (*v100)
          {
            if (*v100 == 1)
            {
              if (v197 == 1)
                goto LABEL_44;
            }
            else if (v197 == 2)
            {
              goto LABEL_44;
            }
          }
          else if (!(_BYTE)v197)
          {
            goto LABEL_44;
          }
          ++v99;
          v100 += 40;
          if (v97 == v99)
            goto LABEL_141;
        }
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
        goto LABEL_125;
      }
LABEL_44:
      if ((char *)v90 != v2)
        break;
LABEL_29:
      v77 = v99;
      v2 = v170;
      v90 = (uint64_t)v192;
      if (v99 == v179)
        goto LABEL_23;
    }
    if ((uint64_t)v2 >= v90)
    {
      if (v90 < (uint64_t)v2)
      {
        while (1)
        {
          if (v90 < 0)
            goto LABEL_123;
          v101 = *(_QWORD *)(v88 + 72);
          if ((unint64_t)v90 >= *(_QWORD *)(v101 + 16))
            goto LABEL_124;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v101+ ((*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80))+ *(_QWORD *)(v196 + 72) * v90, v96, type metadata accessor for ToolbarStorage.Item);
          v102 = v170[v183];
          v103 = v88;
          v104 = v102 != 2 && (v102 & 1) == 0;
          if (v104)
          {
            v105 = v193;
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v103, v193, type metadata accessor for ToolbarStorage.GroupItem);
            if (v90)
            {
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v105, type metadata accessor for ToolbarStorage.GroupItem);
              v106 = 2;
              goto LABEL_61;
            }
          }
          else
          {
            v105 = v193;
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v103, v193, type metadata accessor for ToolbarStorage.GroupItem);
          }
          v107 = v191;
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v105, v191, type metadata accessor for ToolbarStorage.GroupItem);
          if ((v102 & 1) != 0)
          {
            v108 = *(_QWORD *)(*(_QWORD *)(v107 + 72) + 16);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v105, type metadata accessor for ToolbarStorage.GroupItem);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v107, type metadata accessor for ToolbarStorage.GroupItem);
            if (v90 == v108 - 1)
              v106 = v182;
            else
              v106 = 2;
          }
          else
          {
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v105, type metadata accessor for ToolbarStorage.GroupItem);
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v107, type metadata accessor for ToolbarStorage.GroupItem);
            v106 = v182;
          }
LABEL_61:
          v109 = v89;
          v77 = (unint64_t)specialized static UIKitBarButtonItem.makeGroupItem(item:context:)(v96, v109, v106);
          v110 = objc_msgSend(v170, sel_barButtonItems);
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
          v111 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          *(_QWORD *)&v201 = v111;
          if (v111 >> 62)
          {
            swift_bridgeObjectRetain();
            v114 = _CocoaArrayWrapper.endIndex.getter();
            v91 = swift_bridgeObjectRelease();
            if (v114 < v90)
            {
LABEL_67:
              __break(1u);
              goto LABEL_68;
            }
          }
          else if (*(_QWORD *)((v111 & 0xFFFFFFFFFFFFF8) + 0x10) < v90)
          {
            goto LABEL_67;
          }
          v112 = (char *)(v90 + 1);
          specialized Array.replaceSubrange<A>(_:with:)(v90, v90, v77);
          v113 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v170, sel_setBarButtonItems_, v113);

          v96 = (uint64_t)v194;
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v194, type metadata accessor for ToolbarStorage.Item);
          v90 = (uint64_t)v112;
          v104 = v2 == v112;
          v89 = v174;
          v88 = (uint64_t)v175;
          if (v104)
            goto LABEL_29;
        }
      }
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  return result;
}

uint64_t ObjC metadata update function for UIKitBarButtonItemGroup()
{
  return type metadata accessor for UIKitBarButtonItemGroup(0);
}

uint64_t type metadata accessor for UIKitBarButtonItemGroup(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitBarButtonItemGroup);
}

void type metadata completion function for UIKitBarButtonItemGroup()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void UINavigationItem.updateTitleIfNeeded(_:)(void *a1)
{
  void *v1;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = objc_msgSend(v1, sel_titleView);

  if (!v3
    || (v4 = objc_msgSend(v1, sel_titleView)) != 0
    && (v5 = v4,
        type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost), v6 = swift_dynamicCastClass(), v5, v6))
  {
    v7 = objc_msgSend(v1, sel_titleView);
    v8 = objc_msgSend(a1, sel_titleView);
    v9 = v8;
    if (v7)
    {

      if (v9)
      {

        if (v7 == v9)
          return;
      }
    }
    else
    {
      if (!v8)
        return;

    }
    v10 = objc_msgSend(a1, sel_titleView);
    objc_msgSend(v1, sel_setTitleView_, v10);

  }
}

uint64_t specialized SharingActivityPickerBridge.init()()
{
  uint64_t v0;
  _BYTE v2[152];

  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  _s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOi0_((uint64_t)v2);
  outlined init with take of SwipeActions.Value?((uint64_t)v2, v0 + 56, (uint64_t)&lazy cache variable for type metadata for SharingActivityPickerPresentation?, (uint64_t)&type metadata for SharingActivityPickerPresentation, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  *(_QWORD *)(v0 + 208) = 0;
  *(_DWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 224) = 0;
  *(_BYTE *)(v0 + 232) = 0;
  return v0;
}

id specialized UIKitBarButtonItem.init(item:context:host:)(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  objc_class *ObjectType;
  uint64_t v32;
  _OWORD v33[5];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  objc_super v44;

  v5 = v4;
  v30 = a4;
  v29 = a3;
  v32 = a2;
  v28 = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v27 - v9;
  v11 = (uint64_t)&v4[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item];
  v12 = type metadata accessor for ToolbarStorage.Item(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v14 = (uint64_t)&v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_listView];
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_QWORD *)(v14 + 80) = 0;
  v15 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge;
  v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge] = 2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_menuDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v16 = &v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem];
  v17 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_hasOwnMenuSection;
  v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_hasOwnMenuSection] = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v10, type metadata accessor for ToolbarStorage.Item);
  v13((uint64_t)v10, 0, 1, v12);
  swift_beginAccess();
  v19 = v5;
  outlined assign with take of _ViewList_View?((uint64_t)v10, v11, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.Item?, (uint64_t)type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  swift_endAccess();
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v35 = 0u;
  swift_beginAccess();
  outlined assign with take of _ViewList_View?((uint64_t)&v35, v14, (uint64_t)&lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E0CE0A40], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  swift_endAccess();
  LOBYTE(v14) = v29;
  v5[v15] = v29;
  v20 = v30;
  *(_QWORD *)&v19[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host] = v30;
  v21 = v28;
  v5[v18] = *(_BYTE *)(v28 + *(int *)(v12 + 60));
  v22 = v20;

  v44.receiver = v19;
  v44.super_class = ObjectType;
  v23 = objc_msgSendSuper2(&v44, sel_init);
  outlined init with copy of _ViewList_View(v21 + 104, (uint64_t)v33);
  swift_unknownObjectWeakInit();
  v24 = swift_unknownObjectWeakAssign();
  outlined init with take of TableCellFormula(v24, (uint64_t)&v43, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIBarButtonItem>);
  v37 = v33[2];
  v38 = v33[3];
  v39 = v33[4];
  v40 = v34;
  v35 = v33[0];
  v36 = v33[1];
  v41 = v14;
  v42 = 0;
  v25 = v23;
  UIKitBarButtonItem.initialize(rootView:context:)((uint64_t)&v35);

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v21, type metadata accessor for ToolbarStorage.Item);
  outlined destroy of BarItemView((uint64_t)&v35);
  return v25;
}

id specialized static UIKitBarButtonItem.makeGroupItem(item:context:)(uint64_t a1, void *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Class v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  id v19;
  _QWORD *v20;
  id v21;
  CGSize v22;
  _WORD v24[8];
  _BYTE v25[104];
  _OWORD v26[5];
  uint64_t v27;
  _OWORD v28[5];
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;

  v6 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _ViewList_View(a1 + 104, (uint64_t)v26);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of TableCellFormula((uint64_t)v25, (uint64_t)&v32, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIBarButtonItem>);
  v28[2] = v26[2];
  v28[3] = v26[3];
  v28[4] = v26[4];
  v29 = v27;
  v28[0] = v26[0];
  v28[1] = v26[1];
  v30 = a3;
  v31 = 0;
  outlined init with copy of BarItemView((uint64_t)v28, (uint64_t)v26);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  v11 = (char *)objc_allocWithZone(v10);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = &v11[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v11) + 0x9A0)];
  *(_QWORD *)v13 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *((_QWORD *)v13 + 1) = 0;
  outlined init with copy of BarItemView((uint64_t)v26, (uint64_t)v25);
  v14 = specialized _UIHostingView.init(rootView:)((uint64_t)v25);
  v15 = (_QWORD *)((char *)v14 + *(_QWORD *)((*v12 & *v14) + 0x108));
  swift_beginAccess();
  v16 = *v15;
  *v15 = 0;
  if (v16)
  {
    v17 = asc_1E1ACC3D0[1];
    if (((unsigned __int16)asc_1E1ACC3D0[1] & ~(unsigned __int16)asc_1E1ACC3D0[0]) == 0)
      v17 = 0;
    v24[7] = v17 | asc_1E1ACC3D0[0];
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  outlined destroy of BarItemView((uint64_t)v26);
  swift_weakLoadStrong();
  swift_retain();
  ViewGraph.preferenceBridge.setter();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v9, type metadata accessor for ToolbarStorage.Item);
  v18 = objc_allocWithZone((Class)type metadata accessor for UIKitBarButtonItem(0));
  v19 = a2;
  v20 = v14;
  v21 = specialized UIKitBarButtonItem.init(item:context:host:)((uint64_t)v9, (uint64_t)v19, a3, v20);

  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  v22 = ViewRendererHost.idealSize()();
  objc_msgSend(v20, sel_setBounds_, 0.0, 0.0, v22.width, v22.height);
  ViewRendererHost.updateViewGraph<A>(body:)();
  UIKitBarButtonItem.updatePlatformItem(_:)(*(uint64_t *)&v26[0]);

  swift_bridgeObjectRelease();
  outlined destroy of BarItemView((uint64_t)v28);
  return v21;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t i;
  unint64_t v3;
  id v4;
  BOOL v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;

  v1 = a1;
  v20 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_29;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v14 = v1;
    v3 = 0;
    v17 = v1 & 0xFFFFFFFFFFFFFF8;
    v18 = v1 & 0xC000000000000001;
    v15 = i;
    v16 = v1 + 32;
    while (1)
    {
      if (v18)
      {
        v4 = (id)MEMORY[0x18D75E3BC](v3, v14);
        v5 = __OFADD__(v3++, 1);
        if (v5)
          goto LABEL_28;
      }
      else
      {
        if (v3 >= *(_QWORD *)(v17 + 16))
          goto LABEL_27;
        v4 = *(id *)(v16 + 8 * v3);
        v5 = __OFADD__(v3++, 1);
        if (v5)
          goto LABEL_28;
      }
      v19 = v4;
      v6 = objc_msgSend(v4, sel_barButtonItems);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v1 >> 62)
        break;
      v7 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v7)
        goto LABEL_11;
LABEL_4:
      swift_bridgeObjectRelease_n();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      v1 = (unint64_t)&v20;
      specialized ContiguousArray._endMutation()();
LABEL_5:
      if (v3 == v15)
        return v20;
    }
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (!v7)
      goto LABEL_4;
LABEL_11:
    v8 = 4;
    while (1)
    {
      v9 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18D75E3BC](v8 - 4, v1) : *(id *)(v1 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      swift_getObjectType();
      v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);

      if (v12)
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_5;
      }
      ++v8;
      if (v11 == v7)
        goto LABEL_4;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    ;
  }
  return MEMORY[0x1E0DEE9D8];
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)MEMORY[0x18D75E3BC](v3, a1);
LABEL_9:
        v6 = v5;
        v7 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_15;
        swift_getObjectType();
        if ((objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI) & 1) != 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v4 = a1 & 0xFFFFFFFFFFFFFF8;
        }
        ++v3;
        if (v7 == v2)
          return v9;
      }
      if (v3 < *(_QWORD *)(v4 + 16))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized UIKitBarButtonItem.hostingView<A>(_:didChangePlatformItemList:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t ObjectType;

  UIKitBarButtonItem.updatePlatformItem(_:)(a1);
  v3 = v1 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_menuDelegate;
  result = MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_menuDelegate);
  if (result)
  {
    v5 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(a1, ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_187969490()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  int64_t v4;
  _BYTE *v5;

  v4 = a3 >> 1;
  if (a3 >> 1 == a2)
  {
    return 0;
  }
  else
  {
    v5 = (_BYTE *)(result + 40 * a2 + 32);
    while (a2 < v4)
    {
      if (*v5)
      {
        if (*v5 == 1)
        {
          if (a4 == 1)
            return a2;
        }
        else if (a4 == 2)
        {
          return a2;
        }
      }
      else if (!a4)
      {
        return a2;
      }
      ++a2;
      v5 += 40;
      if (v4 == a2)
        return 0;
    }
    __break(1u);
  }
  return result;
}

id specialized static UIKitBarButtonItem.makeVended(item:context:)(uint64_t a1, void *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Class v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  id v19;
  _QWORD *v20;
  id v21;
  char **v22;
  BOOL v23;
  BOOL v24;
  int8x16_t v25;
  double v26;
  double v27;
  CGSize v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  double v43;
  double v44;
  CGSize v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  _BYTE v57[104];
  _OWORD v58[5];
  uint64_t v59;
  _OWORD v60[5];
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;

  v6 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _ViewList_View(a1 + 104, (uint64_t)v58);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of TableCellFormula((uint64_t)v57, (uint64_t)&v64, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIBarButtonItem>);
  v60[2] = v58[2];
  v60[3] = v58[3];
  v60[4] = v58[4];
  v61 = v59;
  v60[0] = v58[0];
  v60[1] = v58[1];
  LODWORD(v55) = a3;
  v62 = a3;
  v63 = 0;
  outlined init with copy of BarItemView((uint64_t)v60, (uint64_t)v58);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  v11 = (char *)objc_allocWithZone(v10);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = &v11[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v11) + 0x9A0)];
  *(_QWORD *)v13 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *((_QWORD *)v13 + 1) = 0;
  outlined init with copy of BarItemView((uint64_t)v58, (uint64_t)v57);
  v14 = specialized _UIHostingView.init(rootView:)((uint64_t)v57);
  v15 = (_QWORD *)((char *)v14 + *(_QWORD *)((*v12 & *v14) + 0x108));
  swift_beginAccess();
  v16 = *v15;
  *v15 = 0;
  if (v16)
  {
    v17 = asc_1E1ACC3F8[1];
    if (((unsigned __int16)asc_1E1ACC3F8[1] & ~(unsigned __int16)asc_1E1ACC3F8[0]) == 0)
      v17 = 0;
    v56 = v17 | asc_1E1ACC3F8[0];
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  outlined destroy of BarItemView((uint64_t)v58);
  swift_weakLoadStrong();
  swift_retain();
  ViewGraph.preferenceBridge.setter();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v9, type metadata accessor for ToolbarStorage.Item);
  v18 = objc_allocWithZone((Class)type metadata accessor for UIKitBarButtonItem(0));
  v19 = a2;
  v20 = v14;
  v21 = specialized UIKitBarButtonItem.init(item:context:host:)((uint64_t)v9, (uint64_t)v19, v55, v20);

  outlined init with copy of ToolbarItemPlacement.Role(a1 + 48, (uint64_t)v58);
  v22 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
  if (BYTE8(v58[2]) != 2
    || ((unint64_t)(*(_QWORD *)&v58[0] - 21) > 1 ? (v23 = *(_QWORD *)&v58[0] == 4) : (v23 = 1),
        !v23 ? (v24 = *(_QWORD *)&v58[0] == 1) : (v24 = 1),
        !v24
     || (v25 = vorrq_s8(*(int8x16_t *)((char *)v58 + 8), *(int8x16_t *)((char *)&v58[1] + 8)),
         *(_QWORD *)&vorr_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)))))
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v58);
    objc_msgSend(v20, sel_bounds);
    if (v27 == 0.0 && v26 == 0.0)
    {
      lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
      v28 = ViewRendererHost.idealSize()();
      objc_msgSend(v20, sel_setBounds_, 0.0, 0.0, v28.width, v28.height);
    }
    lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
    ViewRendererHost.updateViewGraph<A>(body:)();
    v29 = *(_QWORD *)&v58[0];
    if (*(_QWORD *)(*(_QWORD *)&v58[0] + 16) == 1)
    {
      v30 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlatformItemList.Item() - 8) + 80);
      v31 = (_QWORD *)(v29 + ((v30 + 32) & ~v30));
      v33 = v31[37];
      v32 = v31[38];
      v35 = v31[39];
      v34 = v31[40];
      v37 = v31[41];
      v36 = v31[42];
      v54 = v31[43];
      v55 = v36;
      v38 = v31[44];
      v39 = v31[45];
      v52 = v31[46];
      v53 = v38;
      v49 = v31[47];
      v50 = v39;
      v41 = v31[48];
      v40 = v31[49];
      v48 = v41;
      v51 = v40;
      swift_bridgeObjectRelease();
      v22 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
      if (v37 >> 2 != 0xFFFFFFFF
        && v37 >> 62 == 3
        && v37 == 0xC000000000000000
        && v33 == 1
        && !(v35 | v32 | v34)
        && !(v54 | v55 | v53 | v50 | v52 | v49 | v48 | v51))
      {
        v42 = objc_msgSend((id)objc_opt_self(), sel_flexibleSpaceItem);

        v21 = v42;
        goto LABEL_31;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v22 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
    }
  }
  objc_msgSend(v20, v22[229]);
  if (v44 == 0.0 && v43 == 0.0)
  {
    lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
    v45 = ViewRendererHost.idealSize()();
    objc_msgSend(v20, sel_setBounds_, 0.0, 0.0, v45.width, v45.height);
  }
  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  ViewRendererHost.updateViewGraph<A>(body:)();
  UIKitBarButtonItem.updatePlatformItem(_:)(*(uint64_t *)&v58[0]);

  swift_bridgeObjectRelease();
LABEL_31:
  outlined destroy of BarItemView((uint64_t)v60);
  return v21;
}

void type metadata accessor for WeakBox<UIBarButtonItem>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakBox<UIBarButtonItem>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    v0 = type metadata accessor for WeakBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>);
  }
}

uint64_t lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, a3);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of _ViewList_View?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, a3, a4, MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a2, a1, v7);
  return a2;
}

double _s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOi0_(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

id specialized UIKitBarButtonItem.init(listView:context:host:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  objc_class *ObjectType;
  uint64_t v29;
  _OWORD v30[5];
  uint64_t v31;
  _OWORD v32[5];
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  objc_super v37;

  v5 = v4;
  v29 = a2;
  v27 = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v26 - v10;
  v12 = (uint64_t)&v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item];
  v13 = type metadata accessor for ToolbarStorage.Item(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  v15 = (uint64_t)&v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_listView];
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(_QWORD *)(v15 + 80) = 0;
  v16 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge;
  v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge] = 2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_menuDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v17 = &v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem];
  v18 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_hasOwnMenuSection] = 0;
  v14((uint64_t)v11, 1, 1, v13);
  swift_beginAccess();
  v19 = v5;
  outlined assign with take of _ViewList_View?((uint64_t)v11, v12, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.Item?, (uint64_t)type metadata accessor for ToolbarStorage.Item, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  swift_endAccess();
  v20 = v27;
  outlined init with copy of _ViewList_View(v27, (uint64_t)v32);
  swift_beginAccess();
  outlined assign with take of _ViewList_View?((uint64_t)v32, v15, (uint64_t)&lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E0CE0A40], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  swift_endAccess();
  v5[v16] = a3;
  *(_QWORD *)&v19[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host] = a4;
  v21 = a4;

  v37.receiver = v19;
  v37.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v37, sel_init);
  outlined init with copy of _ViewList_View(v20, (uint64_t)v30);
  swift_unknownObjectWeakInit();
  v23 = swift_unknownObjectWeakAssign();
  outlined init with take of TableCellFormula(v23, (uint64_t)&v36, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIBarButtonItem>);
  v32[2] = v30[2];
  v32[3] = v30[3];
  v32[4] = v30[4];
  v33 = v31;
  v32[0] = v30[0];
  v32[1] = v30[1];
  v34 = a3;
  v35 = 0;
  v24 = v22;
  UIKitBarButtonItem.initialize(rootView:context:)((uint64_t)v32);

  outlined destroy of _ViewList_View(v20);
  outlined destroy of BarItemView((uint64_t)v32);
  return v24;
}

id specialized static UIKitBarButtonItem.makeRepresentativeItem(view:context:)(uint64_t a1, void *a2, char a3)
{
  Class v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  id v15;
  CGSize v16;
  _BYTE v18[104];
  _OWORD v19[5];
  uint64_t v20;
  _OWORD v21[5];
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;

  outlined init with copy of _ViewList_View(a1, (uint64_t)v19);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of TableCellFormula((uint64_t)v18, (uint64_t)&v25, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIBarButtonItem>);
  v21[2] = v19[2];
  v21[3] = v19[3];
  v21[4] = v19[4];
  v22 = v20;
  v21[0] = v19[0];
  v21[1] = v19[1];
  v23 = a3;
  v24 = 0;
  outlined init with copy of BarItemView((uint64_t)v21, (uint64_t)v19);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  v7 = (char *)objc_allocWithZone(v6);
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = &v7[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v7) + 0x9A0)];
  *(_QWORD *)v9 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *((_QWORD *)v9 + 1) = 0;
  outlined init with copy of BarItemView((uint64_t)v19, (uint64_t)v18);
  v10 = specialized _UIHostingView.init(rootView:)((uint64_t)v18);
  v11 = (_QWORD *)((char *)v10 + *(_QWORD *)((*v8 & *v10) + 0x108));
  swift_beginAccess();
  v12 = *v11;
  *v11 = 0;
  if (v12)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  outlined destroy of BarItemView((uint64_t)v19);
  outlined init with copy of _ViewList_View(a1, (uint64_t)v19);
  objc_allocWithZone((Class)type metadata accessor for UIKitBarButtonItem(0));
  v13 = a2;
  v14 = v10;
  v15 = specialized UIKitBarButtonItem.init(listView:context:host:)((uint64_t)v19, (uint64_t)v13, a3, v14);

  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  v16 = ViewRendererHost.idealSize()();
  objc_msgSend(v14, sel_setBounds_, 0.0, 0.0, v16.width, v16.height);
  ViewRendererHost.updateViewGraph<A>(body:)();
  UIKitBarButtonItem.updatePlatformItem(_:)(*(uint64_t *)&v19[0]);

  swift_bridgeObjectRelease();
  outlined destroy of BarItemView((uint64_t)v21);
  return v15;
}

void specialized UIKitBarItemHost.init(rootView:)()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9A0));
  *v1 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v1[1] = 0;
  specialized _UIHostingView.init(rootView:)();
}

id sub_18796A270(void *a1)
{
  id v1;

  v1 = a1;
  _UIHostingView.safeAreaRegions.setter(0);

  return v1;
}

void specialized static UIKitBarButtonItemGroup.makeVended(groupItem:edge:context:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE v20[24];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v20[-v10];
  if (*(_QWORD *)(a1 + 8))
  {
    if (!*(_BYTE *)(a1 + 57))
    {
      type metadata accessor for UIKitBarButtonItemGroup(0);
      v12 = (void *)static UIBarButtonItemGroup.optionalGroup(customizationIdentifier:isInDefaultCustomization:representativeItem:items:)();
      v15 = (_BYTE *)swift_dynamicCastClass();
      if (v15)
      {
        v14 = v15;
        objc_msgSend(v15, sel__dci_setAvailableWithoutCustomization_, *(_DWORD *)(a1 + 64) & 1);
        goto LABEL_10;
      }
      goto LABEL_12;
    }
    if (*(_BYTE *)(a1 + 57) == 1)
    {
      type metadata accessor for UIKitBarButtonItemGroup(0);
      v12 = (void *)static UIBarButtonItemGroup.movableGroup(customizationIdentifier:representativeItem:items:)();
      v13 = swift_dynamicCastClass();
      if (v13)
      {
LABEL_7:
        v14 = (_BYTE *)v13;
LABEL_10:
        v16 = v12;
        v14[OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_edge] = a2;
        swift_unknownObjectWeakAssign();
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v11, type metadata accessor for ToolbarStorage.GroupItem);
        v17 = type metadata accessor for ToolbarStorage.GroupItem(0);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 0, 1, v17);
        v18 = (uint64_t)&v14[OBJC_IVAR____TtC7SwiftUI23UIKitBarButtonItemGroup_groupItem];
        swift_beginAccess();
        outlined init with copy of UTType?(v18, (uint64_t)v7, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
        swift_beginAccess();
        outlined assign with copy of _ViewList_View?((uint64_t)v11, v18, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.GroupItem?, (uint64_t)type metadata accessor for ToolbarStorage.GroupItem, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
        swift_endAccess();
        UIKitBarButtonItemGroup.didChangeGroupItem(from:)(v7);
        outlined destroy of TaskPriority?((uint64_t)v11, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
        outlined destroy of TaskPriority?((uint64_t)v7, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);

        v19 = v14;
        return;
      }

      __break(1u);
    }
  }
  type metadata accessor for UIKitBarButtonItemGroup(0);
  v12 = (void *)static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)();
  v13 = swift_dynamicCastClass();
  if (v13)
    goto LABEL_7;

  __break(1u);
LABEL_12:

  __break(1u);
}

uint64_t outlined assign with copy of _ViewList_View?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, a3, a4, MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a2, a1, v7);
  return a2;
}

void partial apply for closure #1 in UIKitBarButtonItem.updateHost(rootView:)()
{
  uint64_t v0;

  closure #1 in UIKitBarButtonItem.updateHost(rootView:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_18796A5C4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_18796A5E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = type metadata accessor for PlatformItemList.Item();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4))
    return swift_deallocObject();

  swift_bridgeObjectRelease();
  swift_release();
  v5 = *(_QWORD *)(v3 + 184);
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v7 = *(unsigned __int8 *)(v3 + 72);
    if (v7 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v3 + 64), v7);
      v5 = *(_QWORD *)(v3 + 184);
      v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v6 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(v3 + 168), *(_QWORD *)(v3 + 176), v5);
    swift_unknownObjectRelease();
    swift_release();

  }
  if (*(_QWORD *)(v3 + 256))
  {
    swift_bridgeObjectRelease();
    v8 = *(void **)(v3 + 264);
    if ((unint64_t)v8 >= 2)

    swift_release();
    swift_release();
  }
  v9 = *(_QWORD *)(v3 + 328);
  if (v9 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v3 + 296), *(_QWORD *)(v3 + 304), *(_QWORD *)(v3 + 312), *(_QWORD *)(v3 + 320), v9, *(_QWORD *)(v3 + 336), *(_QWORD *)(v3 + 344), *(_QWORD *)(v3 + 352), *(_QWORD *)(v3 + 360), *(_QWORD *)(v3 + 368), *(_QWORD *)(v3 + 376), *(_QWORD *)(v3 + 384), *(_QWORD *)(v3 + 392));
  v10 = *(_QWORD *)(v3 + 408);
  if (!v10)
    goto LABEL_17;
  if (v10 != 1)
  {
    swift_release();
LABEL_17:
    if (*(_QWORD *)(v3 + 424))
      swift_release();
    if (*(_QWORD *)(v3 + 440))
      swift_release();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + 504))
    swift_release();
  if (*(_QWORD *)(v3 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(v3 + 552) != 1)
  {
    swift_release();
    if (*(_QWORD *)(v3 + 560))
      swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v3 + *(int *)(v4 + 112);
  v12 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = v11 + *(int *)(v12 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
    swift_bridgeObjectRelease();
    v14 = v13 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v15 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    if (*(_QWORD *)(v11 + *(int *)(v12 + 24)))
      swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

void specialized UIKitBarItemHost.init(coder:)()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9A0));
  *v1 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v1[1] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized UIKitBarButtonItem.init(coder:)()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v1 = &v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item];
  v2 = type metadata accessor for ToolbarStorage.Item(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = &v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_listView];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_QWORD *)v3 + 10) = 0;
  v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge] = 2;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_menuDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v4 = &v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem];
  v5 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_hasOwnMenuSection] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_18796AA60()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_18796AA84()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitBarItemHost.willMove(toSuperview:)(double *a1, double *a2)
{
  uint64_t v2;

  closure #1 in UIKitBarItemHost.willMove(toSuperview:)(a1, a2, *(_QWORD *)(v2 + 32));
}

void closure #1 in UIKitBarButtonItem.updateHost(rootView:)partial apply()
{
  partial apply for closure #1 in UIKitBarButtonItem.updateHost(rootView:)();
}

uint64_t ScrollViewReader.content.getter(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t ScrollViewReader.content.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ScrollViewReader.content.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t closure #1 in ScrollViewReader.body.getter(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v4;

  type metadata accessor for _PreferenceValue<ScrollablePreferenceKey>();
  v4 = _PreferenceValue.attribute.getter();
  return a2(&v4);
}

uint64_t sub_18796AB9C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in ScrollViewProxy.apply(to:)(uint64_t a1, uint64_t (*a2)(_BYTE *))
{
  AGGraphClearUpdate();
  closure #1 in closure #1 in ScrollViewProxy.apply(to:)(a1, a2);
  return AGGraphSetUpdate();
}

uint64_t closure #1 in closure #1 in ScrollViewProxy.apply(to:)(uint64_t a1, uint64_t (*a2)(_BYTE *))
{
  uint64_t *WeakValue;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    v4 = *WeakValue;
    swift_bridgeObjectRetain();
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v5)
    return swift_bridgeObjectRelease();
LABEL_3:
  v6 = v4 + 32;
  do
  {
    outlined init with copy of TableColumnList(v6, (uint64_t)v9);
    v7 = a2(v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    if ((v7 & 1) != 0)
      break;
    v6 += 40;
    --v5;
  }
  while (v5);
  return swift_bridgeObjectRelease();
}

uint64_t ScrollViewProxy.scrollTo<A>(_:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = static Transaction.current.getter();
  if ((a4 & 1) == 0)
    v5 = Transaction.scrollTargetAnchor.setter();
  MEMORY[0x1E0C80A78](v5, v6);
  swift_retain();
  withTransaction<A>(_:_:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in ScrollViewProxy.scrollTo<A>(_:anchor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for ViewGraph();
  v0 = static GraphHost.isUpdating.getter();
  if ((v0 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](v0, v1);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t partial apply for closure #1 in ScrollViewProxy.scrollTo<A>(_:anchor:)()
{
  return closure #1 in ScrollViewProxy.scrollTo<A>(_:anchor:)();
}

Swift::Void __swiftcall ScrollViewProxy.setContentOffset(_:)(CGPoint a1)
{
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for ViewGraph();
  v1 = static GraphHost.isUpdating.getter();
  if ((v1 & 1) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](v1, v2);
    static Update.ensure<A>(_:)();
  }
}

uint64_t closure #1 in ScrollViewProxy.setContentOffset(_:)(_QWORD *a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  v7 = swift_allocObject();
  *(double *)(v7 + 16) = a2;
  *(double *)(v7 + 24) = a3;
  LOBYTE(v5) = (*(uint64_t (**)(double (*)@<D0>(uint64_t *@<X0>, unsigned __int8 *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t))(v6 + 16))(partial apply for closure #1 in closure #1 in ScrollViewProxy.setContentOffset(_:), v7, v5, v6);
  swift_release();
  return v5 & 1;
}

uint64_t partial apply for closure #1 in ScrollViewProxy.setContentOffset(_:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in ScrollViewProxy.setContentOffset(_:)(a1, *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t partial apply for closure #1 in ScrollViewProxy.apply(to:)()
{
  return partial apply for closure #1 in ScrollViewProxy.apply(to:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_BYTE *);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(uint64_t (**)(_BYTE *))(v0 + 24);
  AGGraphClearUpdate();
  closure #1 in closure #1 in ScrollViewProxy.apply(to:)(v1, v2);
  return AGGraphSetUpdate();
}

double closure #1 in closure #1 in ScrollViewProxy.setContentOffset(_:)@<D0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  double v15;
  double result;
  CGFloat v17;
  CGFloat v18;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  CGRect v24;

  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a1[6];
  v13 = *a2;
  ScrollGeometry.containerSize.getter();
  v17 = v15;
  v18 = v14;
  *(_QWORD *)&v21 = v6;
  *((_QWORD *)&v21 + 1) = v7;
  *(_QWORD *)&v22 = v8;
  *((_QWORD *)&v22 + 1) = v9;
  *(_QWORD *)&v23 = v10;
  *((_QWORD *)&v23 + 1) = v11;
  ScrollGeometry.contentSize.getter();
  if (v13 == 1)
  {
    v24.origin.x = a4;
    v24.origin.y = a5;
    v24.size.width = v18;
    v24.size.height = v17;
    CGRectGetMaxX(v24);
  }
  static UnitPoint.topLeading.getter();
  ScrollTarget.init(rect:anchor:)();
  *(_OWORD *)a3 = v21;
  *(_OWORD *)(a3 + 16) = v22;
  result = *(double *)&v23;
  *(_OWORD *)(a3 + 32) = v23;
  *(_WORD *)(a3 + 48) = v12;
  return result;
}

uint64_t ScrollViewProxy.scrollTo(rect:anchor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for ViewGraph();
  v0 = static GraphHost.isUpdating.getter();
  if ((v0 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](v0, v1);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t closure #1 in ScrollViewProxy.scrollTo(rect:anchor:)(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6, double a7, double a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v15 = a1[3];
  v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  v17 = swift_allocObject();
  *(double *)(v17 + 16) = a5;
  *(double *)(v17 + 24) = a6;
  *(double *)(v17 + 32) = a7;
  *(double *)(v17 + 40) = a8;
  *(_QWORD *)(v17 + 48) = a2;
  *(_QWORD *)(v17 + 56) = a3;
  *(_BYTE *)(v17 + 64) = a4 & 1;
  v18 = (*(uint64_t (**)(double (*)@<D0>(__int128 *@<X0>, unsigned __int8 *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t))(v16 + 16))(partial apply for closure #1 in closure #1 in ScrollViewProxy.scrollTo(rect:anchor:), v17, v15, v16);
  swift_release();
  return v18 & 1;
}

uint64_t partial apply for closure #1 in ScrollViewProxy.scrollTo(rect:anchor:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in ScrollViewProxy.scrollTo(rect:anchor:)(a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_BYTE *)(v1 + 64), *(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40));
}

double closure #1 in closure #1 in ScrollViewProxy.scrollTo(rect:anchor:)@<D0>(__int128 *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  int v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CGRect v18;

  v12 = *a2;
  v14 = *a1;
  v15 = a1[1];
  v16 = a1[2];
  v17 = a1[3];
  ScrollGeometry.contentSize.getter();
  if (v12 == 1)
  {
    v18.origin.x = a4;
    v18.origin.y = a5;
    v18.size.width = a6;
    v18.size.height = a7;
    CGRectGetMaxX(v18);
  }
  ScrollTarget.init(rect:anchor:)();
  *(_OWORD *)a3 = v14;
  *(_OWORD *)(a3 + 16) = v15;
  result = *(double *)&v16;
  *(_OWORD *)(a3 + 32) = v16;
  *(_WORD *)(a3 + 48) = v17;
  return result;
}

uint64_t ScrollViewProxy.runScrollTest(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for ViewGraph();
  v0 = static GraphHost.isUpdating.getter();
  if ((v0 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](v0, v1);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t ScrollViewProxy.runScrollTest(_:scrollMode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for ViewGraph();
  v0 = static GraphHost.isUpdating.getter();
  if ((v0 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](v0, v1);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v9 = type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for PPTScrollable);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t (*)(), _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40))(v20, v9, closure #1 in closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:), 0, v9, v9, v7, v8);
  outlined init with copy of PPTScrollable?((uint64_t)v20, (uint64_t)&v15);
  if (v16)
  {
    outlined init with take of OptionalBinaryInteger(&v15, (uint64_t)v17);
    v10 = v18;
    v11 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    *(_QWORD *)&v15 = a3;
    *((_QWORD *)&v15 + 1) = a4;
    v12 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v11 + 8))(a2, &v15, v10, v11);
    outlined destroy of PPTScrollable?((uint64_t)v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    outlined destroy of PPTScrollable?((uint64_t)&v15);
    static os_log_type_t.fault.getter();
    v13 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    outlined destroy of PPTScrollable?((uint64_t)v20);
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t partial apply for closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t ScrollViewProxy.runScrollTest(_:scrollMode:onComplete:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for ViewGraph();
  v0 = static GraphHost.isUpdating.getter();
  if ((v0 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](v0, v1);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:onComplete:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];

  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  v13 = type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for PPTScrollable);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 40))(v24, v13, closure #1 in closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:onComplete:), 0, v13, v13, v11, v12);
  outlined init with copy of PPTScrollable?((uint64_t)v24, (uint64_t)&v19);
  if (v20)
  {
    outlined init with take of OptionalBinaryInteger(&v19, (uint64_t)v21);
    v14 = v22;
    v15 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    *(_QWORD *)&v19 = a3;
    *((_QWORD *)&v19 + 1) = a4;
    v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16))(a2, &v19, a5, a6, v14, v15);
    outlined destroy of PPTScrollable?((uint64_t)v24);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    outlined destroy of PPTScrollable?((uint64_t)&v19);
    static os_log_type_t.fault.getter();
    v17 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    outlined destroy of PPTScrollable?((uint64_t)v24);
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t partial apply for closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:onComplete:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:onComplete:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t closure #1 in closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:onComplete:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TableColumnList(a1, a2);
}

uint64_t ScrollViewProxy.runScrollSubTest(_:subTestName:onComplete:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for ViewGraph();
  v0 = static GraphHost.isUpdating.getter();
  if ((v0 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](v0, v1);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t ScrollViewProxy.runScrollSubTest(_:subTestName:scrollMode:onComplete:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for ViewGraph();
  v0 = static GraphHost.isUpdating.getter();
  if ((v0 & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](v0, v1);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t closure #1 in ScrollViewProxy.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  _QWORD v23[2];
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];

  v15 = a1[3];
  v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  v17 = type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for PPTScrollable);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t (*)(), _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 40))(v29, v17, closure #1 in closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:), 0, v17, v17, v15, v16);
  outlined init with copy of PPTScrollable?((uint64_t)v29, (uint64_t)&v24);
  if (v25)
  {
    outlined init with take of OptionalBinaryInteger(&v24, (uint64_t)v26);
    v18 = v27;
    v19 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    *(_QWORD *)&v24 = a3;
    *((_QWORD *)&v24 + 1) = a4;
    v23[0] = a5;
    v23[1] = a6;
    v20 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 24))(a2, &v24, v23, a7, a8, v18, v19);
    outlined destroy of PPTScrollable?((uint64_t)v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {
    outlined destroy of PPTScrollable?((uint64_t)&v24);
    static os_log_type_t.fault.getter();
    v21 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    outlined destroy of PPTScrollable?((uint64_t)v29);
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t partial apply for closure #1 in ScrollViewProxy.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #1 in ScrollViewProxy.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t sub_18796BE18@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_18796BE24(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_18796BE64()
{
  return 16;
}

__n128 sub_18796BE70(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18796BE7C()
{
  uint64_t v0;

  v0 = type metadata accessor for _DelayedPreferenceView();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5558], v0);
}

uint64_t outlined init with copy of PPTScrollable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for PPTScrollable?, &lazy cache variable for type metadata for PPTScrollable, (uint64_t)&protocol descriptor for PPTScrollable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PPTScrollable?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for PPTScrollable?, &lazy cache variable for type metadata for PPTScrollable, (uint64_t)&protocol descriptor for PPTScrollable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18796BF8C()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in closure #1 in ScrollViewProxy.scrollTo(rect:anchor:)@<D0>(__int128 *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  CGFloat *v3;

  return closure #1 in closure #1 in ScrollViewProxy.scrollTo(rect:anchor:)(a1, a2, a3, v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_18796BFB0()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in closure #1 in ScrollViewProxy.setContentOffset(_:)@<D0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in ScrollViewProxy.setContentOffset(_:)(a1, a2, a3, *(CGFloat *)(v3 + 16), *(CGFloat *)(v3 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in ScrollViewProxy.scrollTo<A>(_:anchor:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(v4, v2, v3, v5, v6) & 1;
}

void type metadata accessor for _PreferenceValue<ScrollablePreferenceKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceValue<ScrollablePreferenceKey>)
  {
    v0 = type metadata accessor for _PreferenceValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceValue<ScrollablePreferenceKey>);
  }
}

uint64_t type metadata accessor for WidgetGraph()
{
  uint64_t result;

  result = type metadata singleton initialization cache for WidgetGraph;
  if (!type metadata singleton initialization cache for WidgetGraph)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for WidgetGraph()
{
  return swift_initClassMetadata2();
}

uint64_t closure #1 in WidgetGraph.init<A>(rootWidget:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33[4];
  char v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;

  v31 = a4;
  v26 = a2;
  v32 = a5;
  v50 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v10;
  v12 = *((_DWORD *)v10 + 2);
  v13 = v10[2];
  v14 = v10[5];
  v15 = v10[6];
  v16 = *((_DWORD *)v10 + 14);
  static DynamicPropertyCache.fields(of:)();
  v29 = v43;
  v28 = v44;
  v27 = v45;
  v30 = HIDWORD(v45);
  v43 = v11;
  LODWORD(v44) = v12;
  v46 = *(_OWORD *)(a1 + 24);
  v45 = v13;
  v47 = v14;
  v48 = v15;
  v49 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v26, a3);
  v35 = a3;
  v17 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)closure #1 in Attribute.init(value:)partial apply, (uint64_t)v34, a3, MEMORY[0x1E0DEDCE8], v17, MEMORY[0x1E0DEDD18], v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  _GraphValue.init(_:)();
  v19 = v31;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3);
  v36 = v29;
  v37 = v28;
  LOBYTE(v38) = v27;
  HIDWORD(v38) = v30;
  v21 = type metadata accessor for WidgetBodyAccessor(0, a3, v19, v20);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetBodyAccessor<A>, v21);
  BodyAccessor.makeBody(container:inputs:fields:)();
  outlined consume of DynamicPropertyCache.Fields.Layout();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = v43;
  LODWORD(v37) = v44;
  v38 = v45;
  v39 = v46;
  v40 = v47;
  v41 = v48;
  v42 = v49;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v33, &v36, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in WidgetGraph.init<A>(rootBundle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33[4];
  char v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;

  v31 = a4;
  v26 = a2;
  v32 = a5;
  v50 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v10;
  v12 = *((_DWORD *)v10 + 2);
  v13 = v10[2];
  v14 = v10[5];
  v15 = v10[6];
  v16 = *((_DWORD *)v10 + 14);
  static DynamicPropertyCache.fields(of:)();
  v29 = v43;
  v28 = v44;
  v27 = v45;
  v30 = HIDWORD(v45);
  v43 = v11;
  LODWORD(v44) = v12;
  v46 = *(_OWORD *)(a1 + 24);
  v45 = v13;
  v47 = v14;
  v48 = v15;
  v49 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v26, a3);
  v35 = a3;
  v17 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)closure #1 in Attribute.init(value:)partial apply, (uint64_t)v34, a3, MEMORY[0x1E0DEDCE8], v17, MEMORY[0x1E0DEDD18], v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  _GraphValue.init(_:)();
  v19 = v31;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3);
  v36 = v29;
  v37 = v28;
  LOBYTE(v38) = v27;
  HIDWORD(v38) = v30;
  v21 = type metadata accessor for WidgetBundleBodyAccessor(0, a3, v19, v20);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetBundleBodyAccessor<A>, v21);
  BodyAccessor.makeBody(container:inputs:fields:)();
  outlined consume of DynamicPropertyCache.Fields.Layout();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = v43;
  LODWORD(v37) = v44;
  v38 = v45;
  v39 = v46;
  v40 = v47;
  v41 = v48;
  v42 = v49;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v33, &v36, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void WidgetGraph.__allocating_init(data:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ObjC metadata update function for WidgetGraph()
{
  return type metadata accessor for WidgetGraph();
}

uint64_t specialized WidgetGraph.__allocating_init<A>(rootWidget:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return specialized WidgetGraph.init<A>(rootWidget:)(a1, a2, a3, (uint64_t)&unk_1E1B4BB40, (uint64_t)partial apply for closure #1 in WidgetGraph.init<A>(rootWidget:), (uint64_t)closure #1 in Attribute.init(value:)partial apply);
}

uint64_t specialized WidgetGraph.init<A>(rootWidget:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  double v13;
  char *v14;
  void (*v15)(char *, double);
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v32;
  void *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char v50[16];
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;

  v48 = a1;
  v49 = a6;
  v8 = v6;
  v72 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a2 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](a1, a1);
  v14 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void (**)(char *, double))(v11 + 16);
  v15(v14, v13);
  v16 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v17 + v16, v14, a2);
  *(_QWORD *)(v8 + 176) = a5;
  *(_QWORD *)(v8 + 184) = v17;
  swift_retain();
  GraphHost.Data.init()();
  v18 = v52;
  v32 = v53;
  v33 = v54;
  v46 = v56;
  v47 = v55;
  v45 = v57;
  v44 = v58;
  v43 = v59;
  v42 = v60;
  v41 = v61;
  v40 = v62;
  v39 = v63;
  v19 = v64;
  v38 = v65;
  v20 = v66;
  v37 = v67;
  v36 = v68;
  v35 = v69;
  v34 = v70;
  v21 = v71;
  v22 = (void *)GraphHost.Data.globalSubgraph.getter();
  AGSubgraphSetCurrent();

  ((void (*)(char *, uint64_t, uint64_t))v15)(v14, v48, a2);
  v51 = a2;
  v23 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v14, v49, (uint64_t)v50, a2, MEMORY[0x1E0DEDCE8], v23, MEMORY[0x1E0DEDD18], v24);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a2);
  *(_DWORD *)(v8 + 192) = (_DWORD)v52;
  swift_release();
  v25 = v32;
  v52 = v18;
  v53 = v32;
  v26 = v33;
  v54 = v33;
  v55 = v47;
  v56 = v46;
  v57 = v45;
  v58 = v44;
  v59 = v43;
  v60 = v42;
  v61 = v41;
  v62 = v40;
  v63 = v39;
  v64 = v19;
  v65 = v38;
  v66 = v20;
  v67 = v37;
  v68 = v36;
  v69 = v35;
  v70 = v34;
  v71 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v27 = v18;
  v28 = v25;
  v29 = v26;
  v30 = GraphHost.init(data:)();
  AGSubgraphSetCurrent();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return v30;
}

uint64_t specialized WidgetGraph.__allocating_init<A>(rootBundle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return specialized WidgetGraph.init<A>(rootWidget:)(a1, a2, a3, (uint64_t)&unk_1E1B4BB18, (uint64_t)partial apply for closure #1 in WidgetGraph.init<A>(rootBundle:), (uint64_t)partial apply for closure #1 in Attribute.init(value:));
}

uint64_t partial apply for closure #1 in WidgetGraph.init<A>(rootBundle:)(uint64_t a1)
{
  return partial apply for closure #1 in WidgetGraph.init<A>(rootBundle:)(a1, (uint64_t (*)(uint64_t, uint64_t))closure #1 in WidgetGraph.init<A>(rootBundle:));
}

uint64_t partial apply for closure #1 in WidgetGraph.init<A>(rootWidget:)(uint64_t a1)
{
  return partial apply for closure #1 in WidgetGraph.init<A>(rootBundle:)(a1, (uint64_t (*)(uint64_t, uint64_t))closure #1 in WidgetGraph.init<A>(rootWidget:));
}

uint64_t partial apply for closure #1 in WidgetGraph.init<A>(rootBundle:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 80);
  return a2(a1, v2 + ((v3 + 32) & ~v3));
}

void View.accessibilityRepresentationStyle()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t View.accessibilityChildren<A>(children:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v20 = a5;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AccessibilityChildrenModifier(0, v11, v12, v11);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v20 - v17;
  a1(v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a4);
  MEMORY[0x18D75B4AC](v18, a3, v13, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
}

uint64_t type metadata accessor for AccessibilityChildrenModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityChildrenModifier);
}

uint64_t sub_18796CE04(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for AccessibilityRepresentationModifier, (uint64_t)&protocol witness table for AccessibilityRepresentationModifier<A>);
}

uint64_t sub_18796CE18(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for AccessibilityChildrenModifier, (uint64_t)&protocol witness table for AccessibilityChildrenModifier<A>);
}

ValueMetadata *type metadata accessor for AccessibilityToggleStyle()
{
  return &type metadata for AccessibilityToggleStyle;
}

ValueMetadata *type metadata accessor for AccessibilityLabeledContentStyle()
{
  return &type metadata for AccessibilityLabeledContentStyle;
}

ValueMetadata *type metadata accessor for AccessibilityDisclosureGroupStyle()
{
  return &type metadata for AccessibilityDisclosureGroupStyle;
}

ValueMetadata *type metadata accessor for AccessibilityLabelStyle()
{
  return &type metadata for AccessibilityLabelStyle;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityRepresentationModifier<A>()
{
  return &protocol witness table for AccessibilityRepresentationModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityChildrenModifier<A>()
{
  return &protocol witness table for AccessibilityChildrenModifier<A>;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AccessibilityRepresentationModifier<A>.ProxyModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessibilityProxyModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

void AccessibilityRepresentationModifier.BridgedAttachment.value.getter(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD v19[9];
  unint64_t v20;
  id v21;
  uint64_t v22;

  AccessibilityRepresentationModifier.BridgedAttachment.representedNodeList.getter(a1, &v20);
  if (!v20)
    goto LABEL_12;
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v4)
  {
LABEL_12:
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v19[0] = Dictionary.init(minimumCapacity:)();
LABEL_17:
    AccessibilityAttachment.init(properties:)();
    v16 = v20;
    v17 = v21;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(v18 + 24) = v17;
    *a2 = v18;
    goto LABEL_18;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v5 = Dictionary.init(minimumCapacity:)();
  v22 = v5;
  AccessibilityFocusStoreListModifier.ItemFilter.accessibilityNodeList.getter(a1, &v20);
  v6 = v20;
  if (!v20)
  {
LABEL_16:
    v19[0] = v5;
    goto LABEL_17;
  }
  if (!(v20 >> 62))
  {
    if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
      goto LABEL_8;
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v15 != 1)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_8:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v7 = (id)MEMORY[0x18D75E3BC](0, v6);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(id *)(v6 + 32);
LABEL_11:
    v8 = v7;
    swift_bridgeObjectRelease();
    AccessibilityNode.attachment.getter((uint64_t *)&v20);

    v9 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v9, (uint64_t)&v20);
    swift_bridgeObjectRelease_n();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v20, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v19);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v20, (uint64_t (*)(_QWORD))type metadata accessor for ScrollableCollection?);
    AccessibilityNode.attachment.getter((uint64_t *)&v20);

    v10 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v10, (uint64_t)&v20);
    swift_bridgeObjectRelease_n();
    v11 = MEMORY[0x1E0DEB940];
    outlined init with copy of TableRowList?((uint64_t)&v20, (uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v19);
    outlined destroy of TableRowList?((uint64_t)&v20, (uint64_t)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    v19[0] = v22;
    AccessibilityAttachment.init(properties:)();
    v12 = v20;
    v13 = v21;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v12;
    *(_QWORD *)(v14 + 24) = v13;

    *a2 = v14;
LABEL_18:
    a2[1] = 0;
    return;
  }
  __break(1u);
}

void protocol witness for Rule.value.getter in conformance AccessibilityRepresentationModifier<A>.BridgedAttachment(uint64_t *a1@<X8>)
{
  unint64_t *v1;

  AccessibilityRepresentationModifier.BridgedAttachment.value.getter(*v1, a1);
}

uint64_t closure #1 in AccessibilityProxyModifier.body(content:)(_QWORD *a1)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = *((_QWORD *)&static AccessibilityNodesKey.defaultValue + 1);
  *a1 = static AccessibilityNodesKey.defaultValue;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in closure #2 in AccessibilityProxyModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AccessibilityProxyModifier(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 36), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityProxyModifier<A>.GeometryTransformModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProxyModifier<A>.GeometryTransformModifier, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static AccessibilityChildrenModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 16);
  v53 = *(_OWORD *)(a2 + 32);
  v54 = v10;
  v12 = *(_OWORD *)(a2 + 48);
  v55 = *(_OWORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  v51 = *(_OWORD *)a2;
  v52 = v13;
  v47 = v53;
  v48 = v12;
  v49 = *(_OWORD *)(a2 + 64);
  v14 = *a1;
  v56 = *(_DWORD *)(a2 + 80);
  v50 = *(_DWORD *)(a2 + 80);
  v45 = v51;
  v46 = v11;
  ((void (*)(__int128 *__return_ptr))a3)(&v42);
  v43 = v54;
  v44 = DWORD2(v54);
  *(_QWORD *)&v45 = v54;
  DWORD2(v45) = DWORD2(v54);
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v16 = v42;
  v17 = DWORD2(v42);
  v18 = HIDWORD(v42);
  if ((result & 1) != 0)
  {
    v45 = v42;
    v38 = _ViewOutputs.subscript.getter();
    LODWORD(v45) = v14;
    type metadata accessor for AccessibilityChildrenModifier(255, a4, a5, v19);
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(_QWORD *)(*(_QWORD *)(type metadata accessor for AccessibilityRepresentationModifier(0, a4, a5, v20) - 8)
                   + 64))
      closure #1 in static AccessibilityChildrenModifier._makeView(modifier:inputs:body:)(1, a4, a5, v21);
    AGGraphCreateOffsetAttribute2();
    _GraphValue.init(_:)();
    v47 = v53;
    v48 = v54;
    v49 = v55;
    v50 = v56;
    v45 = v51;
    v46 = v52;
    static AccessibilityRepresentationModifier._makeView(modifier:inputs:body:)((uint64_t)&v45, a3, a4, a5, (uint64_t)&v39);
    v22 = v39;
    v23 = v40;
    v24 = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v42 = v22;
    *((_QWORD *)&v42 + 1) = __PAIR64__(v24, v23);
    if (one-time initialization token for contain != -1)
      swift_once();
    *(_QWORD *)&v45 = static AccessibilityChildBehavior.contain;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityContainerModifier>, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    lazy protocol witness table accessor for type External<AccessibilityContainerModifier> and conformance External<A>();
    swift_retain();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    _GraphValue.init(_:)();
    v25 = v39;
    *(_QWORD *)&v45 = v43;
    DWORD2(v45) = v44;
    v26 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((v26 & 1) != 0)
    {
      v27 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v25, &v51, v22, v23 | (v24 << 32), 0);
      LOBYTE(v45) = 1;
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v27, 0x100000000, (uint64_t)&v51);
    }
    swift_bridgeObjectRelease();
    LOBYTE(v45) = (v26 & 1) == 0;
    _ViewOutputs.subscript.setter();
    v28 = v42;
    v29 = DWORD2(v42);
    v30 = HIDWORD(v42);
    v45 = v42;
    v31 = _ViewOutputs.subscript.getter();
    v33 = *MEMORY[0x1E0CFED28];
    if ((v31 & 0x100000000) != 0)
      v34 = *MEMORY[0x1E0CFED28];
    else
      v34 = v31;
    if ((v38 & 0x100000000) == 0)
      v33 = v38;
    *(_QWORD *)&v45 = __PAIR64__(v33, v34);
    v35 = type metadata accessor for AccessibilityChildrenModifier.BridgedAttachment(0, a4, a5, v32);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildrenModifier<A>.BridgedAttachment, v35);
    _GraphValue.init<A>(_:)();
    v36 = v39;
    *(_QWORD *)&v45 = v43;
    DWORD2(v45) = v44;
    swift_bridgeObjectRetain();
    v37 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((v37 & 1) != 0)
      specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v36, &v51, v28, v29 | (v30 << 32), 0);
    swift_bridgeObjectRelease();
    LOBYTE(v45) = (v37 & 1) == 0;
    result = _ViewOutputs.subscript.setter();
    v16 = v42;
    v17 = DWORD2(v42);
    v18 = HIDWORD(v42);
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = v17;
  *(_DWORD *)(a6 + 12) = v18;
  return result;
}

uint64_t closure #1 in static AccessibilityChildrenModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v11[2] = type metadata accessor for AccessibilityChildrenModifier(0, a2, a3, a4);
  v12 = type metadata accessor for AccessibilityRepresentationModifier(0, a2, a3, v7);
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, v12, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v13;
}

uint64_t AccessibilityRepresentationModifier.BridgedAttachment.representedNodeList.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *Value;
  uint64_t v4;

  if (*MEMORY[0x1E0CFED28] == (_DWORD)result)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    Value = (_QWORD *)AGGraphGetValue();
    v4 = Value[1];
    *a2 = *Value;
    a2[1] = v4;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t AccessibilityChildrenModifier.BridgedAttachment.value.getter@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  void *v14;

  AccessibilityRepresentationModifier.BridgedAttachment.representedNodeList.getter(a1, &v13);
  if (!v13)
    goto LABEL_15;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_15;
  result = AccessibilityFocusStoreListModifier.ItemFilter.accessibilityNodeList.getter(a1, &v13);
  v6 = v13;
  if (!v13)
    goto LABEL_15;
  if (!(v13 >> 62))
  {
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
      goto LABEL_8;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v10 != 1)
  {
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    Dictionary.init(minimumCapacity:)();
    goto LABEL_16;
  }
LABEL_8:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v7 = (id)MEMORY[0x18D75E3BC](0, v6);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(id *)(v6 + 32);
LABEL_11:
    v8 = v7;
    swift_bridgeObjectRelease();
    AccessibilityNode.attachment.getter((uint64_t *)&v13);
    v9 = v14;

    v13 = 0;
    AccessibilityProperties.visibility.setter();
LABEL_16:
    AccessibilityAttachment.init(properties:)();
    v11 = v13;
    v12 = v14;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
    *(_QWORD *)(result + 24) = v12;
    *a2 = result;
    a2[1] = 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityChildrenModifier<A>.BridgedAttachment@<X0>(uint64_t *a1@<X8>)
{
  unint64_t *v1;

  return AccessibilityChildrenModifier.BridgedAttachment.value.getter(*v1, a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityChildrenModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static AccessibilityChildrenModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityChildrenModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildrenModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in AccessibilityToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void AccessibilityControlStyle.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[2];
  uint64_t v26;

  v23 = a2;
  v2 = *(_QWORD *)(a1 + 24);
  v18[2] = *(_QWORD *)(a1 + 16);
  v18[1] = v2;
  v18[0] = type metadata accessor for _OverlayModifier();
  v3 = type metadata accessor for ModifiedContent();
  v19 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v18 - v5;
  v7 = type metadata accessor for ModifiedContent();
  v20 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = type metadata accessor for ModifiedContent();
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v11 = type metadata accessor for ModifiedContent();
  v22 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  MEMORY[0x1E0C80A78](v13, v14);
  v18[4] = (char *)v18 - v15;
  v26 = static Color.clear.getter();
  static Alignment.center.getter();
  View.overlay<A>(_:alignment:)();
  swift_release();
  LOBYTE(v26) = 19;
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3620], v18[0]);
  v25[0] = MEMORY[0x1E0CE7140];
  v25[1] = v16;
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v25);
  View.accessibilityRemoveTraits(_:)((unsigned __int8 *)&v26, v3, v17);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v3);
  v24[0] = v17;
  v24[1] = &protocol witness table for AccessibilityAttachmentModifier;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v24);
  View.accessibilityIgnoreViewResponders()();
}

uint64_t sub_18796DE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 192) + 8))(v8, v5);
  *(_QWORD *)(v9 - 144) = v0;
  *(_QWORD *)(v9 - 136) = &protocol witness table for IgnoreViewRespondersModifier;
  v10 = MEMORY[0x18D75FFDC](v3, v2, v9 - 144);
  View.accessibilityCombinedElement(options:ignoredTraits:)(0, v2, v10, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 184) + 8))(v6, v2);
  *(_QWORD *)(v9 - 160) = v10;
  *(_QWORD *)(v9 - 152) = v7;
  v11 = MEMORY[0x18D75FFDC](v3, v1, v9 - 160);
  v12 = *(_QWORD *)(v9 - 208);
  static ViewBuilder.buildExpression<A>(_:)(v4, v1, v11);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 176) + 8);
  v13(v4, v1);
  static ViewBuilder.buildBlock<A>(_:)(v12, v1, *(_QWORD *)(v9 - 168));
  return ((uint64_t (*)(uint64_t, uint64_t))v13)(v12, v1);
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in AccessibilityLabeledContentStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance AccessibilityControlGroupStyle@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for contain != -1)
    swift_once();
  *a1 = static AccessibilityChildBehavior.contain;
  return swift_retain();
}

void static AccessibilityPickerStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PickerStyleConfiguration.Label(255, a3, a4, a4);
  type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityRadioButton();
}

void sub_18796E058(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPickerStyle.Body<A>.AccessibilityRadioButton<A1>, a1);
  v7 = type metadata accessor for ForEachSubviewCollection(255, a1, v5, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, v7);
  lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  type metadata accessor for ForEach();
  type metadata accessor for _VariadicView.Tree();
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for LabeledContent(0, v2, v8, v9);
  *(_DWORD *)(v3 - 124) = v1;
  type metadata accessor for _PickerValue();
}

uint64_t sub_18796E134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;

  type metadata accessor for _GraphValue();
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(v0 + 32);
  v16 = *(_OWORD *)(v0 + 56);
  v17 = *(_OWORD *)(v0 + 40);
  v11 = *(_QWORD *)(v0 + 72);
  _GraphValue.value.getter();
  v13 = type metadata accessor for AccessibilityPickerStyle.Body(0, v2, v1, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPickerStyle.Body<A>, v13);
  _GraphValue.init<A>(_:)();
  v24[0] = v3;
  v24[1] = v19;
  v25 = v8;
  v26 = v18;
  v27 = v9;
  v28 = v10;
  v29 = v17;
  v30 = v16;
  v31 = v11;
  v32 = v20;
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v7, v24);
  v23[0] = MEMORY[0x1E0CE2268];
  v23[1] = v14;
  v22[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v6, v23);
  v22[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v21[0] = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v21[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v22);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v4, v21);
  return static View._makeView(view:inputs:)();
}

void static AccessibilityPickerStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PickerStyleConfiguration.Label(255, a3, a4, a4);
  type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityRadioButton();
}

void sub_18796E330(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPickerStyle.Body<A>.AccessibilityRadioButton<A1>, a1);
  v7 = type metadata accessor for ForEachSubviewCollection(255, a1, v5, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, v7);
  lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  type metadata accessor for ForEach();
  type metadata accessor for _VariadicView.Tree();
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for LabeledContent(0, v2, v8, v9);
  *(_DWORD *)(v3 - 108) = v1;
  type metadata accessor for _PickerValue();
}

uint64_t sub_18796E40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;

  type metadata accessor for _GraphValue();
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(v0 + 32);
  _GraphValue.value.getter();
  v12 = type metadata accessor for AccessibilityPickerStyle.Body(0, v2, v1, v11);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPickerStyle.Body<A>, v12);
  _GraphValue.init<A>(_:)();
  v25[0] = v3;
  v25[1] = v16;
  v26 = v8;
  v27 = v15;
  v28 = v9;
  v29 = v10;
  v30 = v21;
  v31 = v20;
  v32 = v19;
  v33 = v18;
  v34 = v17;
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v7, v25);
  v24[0] = MEMORY[0x1E0CE2268];
  v24[1] = v13;
  v23[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v6, v24);
  v23[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v22[0] = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v22[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v23);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v4, v22);
  return static View._makeViewList(view:inputs:)();
}

void AccessibilityPickerStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PickerStyleConfiguration.Label(0, a2, a3, a4);
  type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityRadioButton();
}

uint64_t sub_18796E5BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[16];

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPickerStyle.Body<A>.AccessibilityRadioButton<A1>, a1);
  v7 = type metadata accessor for ForEachSubviewCollection(255, a1, v5, v6);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, v7);
  v9 = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  *(_QWORD *)(v3 - 88) = v7;
  *(_QWORD *)(v3 - 80) = &type metadata for Subview.ID;
  *(_QWORD *)(v3 - 72) = a1;
  *(_QWORD *)(v3 - 64) = v8;
  *(_QWORD *)(v3 - 56) = v9;
  v10 = type metadata accessor for ForEach();
  v11 = type metadata accessor for _VariadicView.Tree();
  v12 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 96) = v5;
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v10, v3 - 96);
  v17[0] = MEMORY[0x1E0CE2268];
  v17[1] = v13;
  v16[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v11, v17);
  v16[1] = &protocol witness table for AccessibilityAttachmentModifier;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v16);
  return LabeledContent<>.init(content:label:)((uint64_t (*)(void))partial apply for closure #1 in AccessibilityPickerStyle.Body.value.getter, (uint64_t (*)(uint64_t))partial apply for closure #2 in AccessibilityPickerStyle.Body.value.getter, (uint64_t)&v15, v2, v12, v1);
}

void closure #1 in AccessibilityPickerStyle.Body.value.getter()
{
  static VerticalAlignment.center.getter();
  type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityRadioButton();
}

uint64_t sub_18796E770(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  __int128 v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPickerStyle.Body<A>.AccessibilityRadioButton<A1>, a1);
  v7 = type metadata accessor for ForEachSubviewCollection(255, a1, v5, v6);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, v7);
  v9 = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  *(_QWORD *)(v3 - 192) = v7;
  *(_QWORD *)(v3 - 184) = &type metadata for Subview.ID;
  *(_QWORD *)(v3 - 176) = a1;
  *(_QWORD *)(v3 - 168) = v8;
  *(_QWORD *)(v3 - 160) = v9;
  v10 = type metadata accessor for ForEach();
  _VariadicView.Tree.init(_:content:)();
  v28 = v39;
  v29 = v40;
  v30 = *(_OWORD *)(v2 + 24);
  v31 = v41;
  v32 = v42;
  v33 = *(_OWORD *)(v2 + 56);
  if (one-time initialization token for contain != -1)
    swift_once();
  v38 = static AccessibilityChildBehavior.contain;
  v11 = type metadata accessor for _VariadicView.Tree();
  v37 = v5;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v10, &v37);
  v36[0] = MEMORY[0x1E0CE2268];
  v36[1] = v12;
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v11, v36);
  View._accessibilityElement(children:)(&v38, v11, v13);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v14 = *(_BYTE *)(v3 - 176);
  v15 = *(_QWORD *)(v3 - 152);
  v16 = *(_QWORD *)(v3 - 144);
  v17 = *(_QWORD *)(v3 - 120);
  v18 = *(_QWORD *)(v3 - 112);
  v28 = *(_OWORD *)(v3 - 192);
  v29 = v14;
  v30 = *(_OWORD *)(v2 + 120);
  v31 = v15;
  v32 = v16;
  v33 = *(_OWORD *)(v2 + 152);
  v34 = v17;
  v35 = v18;
  LOBYTE(v38) = 18;
  v19 = type metadata accessor for ModifiedContent();
  ModifiedContent<>.accessibilityAddTraits(_:)((unsigned __int8 *)&v38, v19, (uint64_t)&v39);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v28 = v39;
  v29 = v40;
  v30 = *(_OWORD *)(v2 + 24);
  v31 = v41;
  v32 = v42;
  v33 = *(_OWORD *)(v2 + 56);
  v34 = v43;
  v35 = v44;
  v27[0] = v13;
  v27[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v19, v27);
  static ViewBuilder.buildExpression<A>(_:)(&v28, v19, v20);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v21 = *(_BYTE *)(v3 - 176);
  v22 = *(_QWORD *)(v3 - 152);
  v23 = *(_QWORD *)(v3 - 144);
  v24 = *(_QWORD *)(v3 - 120);
  v25 = *(_QWORD *)(v3 - 112);
  v39 = *(_OWORD *)(v3 - 192);
  v40 = v21;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(v2 + 120);
  v41 = v22;
  v42 = v23;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(v2 + 152);
  v43 = v24;
  v44 = v25;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v39, v19, v1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter()
{
  type metadata accessor for _PickerValue();
}

void sub_18796EB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD, _QWORD *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&a9 - v15;
  AccessibilityPickerStyle.Body.base.getter(v10, v9, v12, v13, v17, (uint64_t)&a9 - v15);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v10);
  v19 = type metadata accessor for PickerStyleConfiguration(0, v10, v9, v18);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v16, v19);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v10;
  *(_QWORD *)(v20 + 24) = v9;
  *(_DWORD *)(v20 + 32) = v11;
  *(_QWORD *)(v14 - 112) = v10;
  *(_QWORD *)(v14 - 104) = &type metadata for Subview;
  *(_QWORD *)(v14 - 96) = v9;
  *(_QWORD *)(v14 - 88) = &protocol witness table for Subview;
  type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityRadioButton();
}

void sub_18796EC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v8 = type metadata accessor for PickerStyleConfiguration.Content(0, v5, v4, a4);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPickerStyle.Body<A>.AccessibilityRadioButton<A1>, a1);
  ForEach.init<A>(subviews:content:)(v9, partial apply for closure #1 in closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter, v6, a1, v8, v9, &protocol witness table for PickerStyleConfiguration<A>.Content);
}

uint64_t sub_18796EC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v9 = *(_QWORD *)(v7 - 144);
  v8 = *(_QWORD *)(v7 - 136);
  v10 = *(_OWORD *)(v7 - 160);
  *(_OWORD *)(v7 - 256) = v10;
  *(_OWORD *)(v7 - 208) = v10;
  *(_QWORD *)(v7 - 192) = v9;
  *(_QWORD *)(v7 - 184) = v8;
  v11 = *(_OWORD *)(v7 - 128);
  *(_OWORD *)(v7 - 240) = v11;
  *(_OWORD *)(v7 - 176) = v11;
  v12 = type metadata accessor for ForEachSubviewCollection(255, v5, v6, a4);
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSubviewCollection<A>, v12);
  v14 = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  *(_QWORD *)(v7 - 112) = v12;
  *(_QWORD *)(v7 - 104) = &type metadata for Subview.ID;
  *(_QWORD *)(v7 - 96) = v5;
  *(_QWORD *)(v7 - 88) = v13;
  *(_QWORD *)(v7 - 80) = v14;
  v15 = type metadata accessor for ForEach();
  *(_QWORD *)(v7 - 216) = v6;
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v15, v7 - 216);
  static ViewBuilder.buildExpression<A>(_:)(v7 - 208, v15, v16);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v17 = *(_QWORD *)(v7 - 96);
  v18 = *(_QWORD *)(v7 - 88);
  v19 = *(_OWORD *)(v7 - 112);
  *(_OWORD *)(v7 - 256) = v19;
  *(_OWORD *)(v7 - 160) = v19;
  *(_QWORD *)(v7 - 144) = v17;
  *(_QWORD *)(v7 - 136) = v18;
  v20 = *(_OWORD *)(v7 - 80);
  *(_OWORD *)(v7 - 240) = v20;
  *(_OWORD *)(v7 - 128) = v20;
  static ViewBuilder.buildBlock<A>(_:)(v7 - 160, v15, v4);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void closure #1 in closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter()
{
  type metadata accessor for _PickerValue();
}

void sub_18796EDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);

  v16 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&a9 - v17;
  outlined init with copy of Subview(v12, (uint64_t)(v9 + 17));
  AccessibilityPickerStyle.Body.base.getter(v11, v10, v13, v14, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for _PickerValue, (uint64_t)v18);
  v20 = *(_QWORD *)&v18[*(int *)(type metadata accessor for PickerStyleConfiguration(0, v11, v10, v19) + 36)];
  v21 = *(void (**)(char *, uint64_t))(v16 + 8);
  swift_bridgeObjectRetain();
  v21(v18, a1);
  AccessibilityPickerStyle.Body.AccessibilityRadioButton.init<>(_:selection:)((uint64_t)(v9 + 17), v20, v11, v10, (uint64_t)(v9 + 1));
  v9[17] = v11;
  v9[18] = &type metadata for Subview;
  v9[19] = v10;
  v9[20] = &protocol witness table for Subview;
  type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityRadioButton();
}

uint64_t sub_18796EEBC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  void (*v4)(uint64_t *, uint64_t);

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityPickerStyle.Body<A>.AccessibilityRadioButton<A1>, a1);
  static ViewBuilder.buildExpression<A>(_:)(v1 + 1, a1, v3);
  v4 = *(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(a1 - 8) + 8);
  v4(v1 + 1, a1);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)(v1 + 17), a1, *v1);
  return ((uint64_t (*)(uint64_t *, uint64_t))v4)(v1 + 17, a1);
}

uint64_t AccessibilityPickerStyle.Body.AccessibilityRadioButton.init<>(_:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t (*v24)();
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;

  v36 = a2;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v31 - v12;
  v14 = *(_QWORD *)(a3 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v16, v17);
  v33 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v31 - v20;
  outlined init with copy of Subview(a1, a5);
  v34 = a4;
  v35 = a1;
  v32 = *(_QWORD *)(a1 + 88);
  v39 = v32;
  ContainerValues.tag<A>(for:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a3) == 1)
  {
    outlined destroy of Subview(v35);
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v23 = 0;
    *(_BYTE *)(a5 + 96) = 1;
    *(_BYTE *)(a5 + 120) = 0;
    v24 = (uint64_t (*)())destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v25(v21, v13, a3);
    v39 = v36;
    type metadata accessor for Binding();
    v26 = type metadata accessor for Array();
    v27 = v34;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v26);
    static ToggleState.stateFor<A, B>(item:in:)();
    *(_BYTE *)(a5 + 96) = v38;
    v39 = v32;
    v37 = 1;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    v28 = v38;
    outlined destroy of Subview(v35);
    *(_BYTE *)(a5 + 120) = v28;
    v29 = v33;
    v25(v33, v21, a3);
    v30 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v23 = (_QWORD *)swift_allocObject();
    v23[2] = a3;
    v23[3] = v27;
    v23[4] = v36;
    result = ((uint64_t (*)(char *, char *, uint64_t))v25)((char *)v23 + v30, v29, a3);
    v24 = partial apply for closure #1 in AccessibilityPickerStyle.Body.AccessibilityRadioButton.init<>(_:selection:);
  }
  *(_QWORD *)(a5 + 104) = v24;
  *(_QWORD *)(a5 + 112) = v23;
  return result;
}

void closure #2 in AccessibilityPickerStyle.Body.value.getter()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_18796F20C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t (*v9)(_QWORD, _QWORD *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[80];

  MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v16[-v7];
  AccessibilityPickerStyle.Body.base.getter(v4, v3, v5, v6, v9, (uint64_t)&v16[-v7]);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v4);
  v11 = type metadata accessor for PickerStyleConfiguration(0, v4, v3, v10);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  v13 = type metadata accessor for PickerStyleConfiguration.Label(0, v4, v3, v12);
  v14 = static ViewBuilder.buildExpression<A>(_:)(v13, v13, &protocol witness table for PickerStyleConfiguration<A>.Label);
  return static ViewBuilder.buildBlock<A>(_:)(v14, v13, v2);
}

uint64_t closure #1 in AccessibilityPickerStyle.Body.AccessibilityRadioButton.init<>(_:selection:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  Swift::Bool IsNativeType;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v2 = type metadata accessor for Binding();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v13 - v6;
  v8 = swift_bridgeObjectRetain();
  if (!MEMORY[0x18D75D06C](v8, v2))
    return swift_bridgeObjectRelease();
  for (i = 0; ; ++i)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v7, a1+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * i, v2);
      v11 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_10;
      goto LABEL_5;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v4 != 8)
      break;
    v14 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 16))(v7, &v14, v2);
    swift_unknownObjectRelease();
    v11 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_10:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_5:
    specialized Binding.wrappedValue.setter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
    if (v11 == MEMORY[0x18D75D06C](a1, v2))
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityPickerStyle.Body.AccessibilityRadioButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  _QWORD v67[2];
  __int128 v68;
  __int128 v69;

  v4 = v3;
  v65 = a3;
  v63 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v57 = v6;
  v59 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 24);
  v9 = type metadata accessor for ModifiedContent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v54 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v54 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v56 = (uint64_t)&v54 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v62 = (char *)&v54 - v27;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v64 = type metadata accessor for ModifiedContent();
  v61 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64, v28);
  v58 = (char *)&v54 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v60 = (char *)&v54 - v32;
  if (one-time initialization token for combine != -1)
    swift_once();
  *(_QWORD *)&v68 = static AccessibilityChildBehavior.combine;
  v55 = *(_QWORD *)(a1 + 40);
  View._accessibilityElement(children:)((uint64_t *)&v68, v8, v55);
  v54 = v8;
  v33 = *(int *)(a1 + 52);
  if (*(_BYTE *)(v3 + v33))
    v34 = 2 * (*(_BYTE *)(v3 + v33) != 1);
  else
    v34 = 1;
  LOBYTE(v68) = v34;
  v35 = lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  ModifiedContent<>.accessibilityValue<A>(_:description:)((uint64_t)&v68, 0, 0, 0, 0, v9, MEMORY[0x1E0CE5C00], v35, (uint64_t)v17);
  v36 = *(void (**)(char *, uint64_t))(v10 + 8);
  v36(v13, v9);
  *(_QWORD *)&v68 = 4 * (*(_BYTE *)(v4 + v33) == 0);
  ModifiedContent<>.accessibilityAddTraits(_:)(&v68, v9, (uint64_t)v21);
  v36(v17, v9);
  v37 = v56;
  ModifiedContent<>.accessibilityAddTraits(_:)(v9, v56);
  v36(v21, v9);
  v68 = 0u;
  v69 = 0u;
  v38 = v63;
  v39 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v59, v4, a1);
  v40 = (*(unsigned __int8 *)(v38 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  v41 = (char *)swift_allocObject();
  v42 = v54;
  v43 = v55;
  *((_QWORD *)v41 + 2) = *(_QWORD *)(a1 + 16);
  *((_QWORD *)v41 + 3) = v42;
  *((_QWORD *)v41 + 4) = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v41 + 5) = v43;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v41[v40], v39, a1);
  v44 = v62;
  ModifiedContent<>.accessibilityAction(kind:_:)((uint64_t *)&v68, (uint64_t)partial apply for closure #1 in AccessibilityPickerStyle.Body.AccessibilityRadioButton.body.getter, (uint64_t)v41, v9);
  swift_release();
  outlined consume of AccessibilityActionKind.ActionKind(v68, *((uint64_t *)&v68 + 1), v69, *((unint64_t *)&v69 + 1));
  v36((char *)v37, v9);
  v67[0] = v43;
  v67[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v45 = MEMORY[0x1E0CE2E70];
  v46 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v67);
  v47 = v58;
  View._disabled(_:)();
  v36(v44, v9);
  v48 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  v66[0] = v46;
  v66[1] = v48;
  v49 = v64;
  v50 = MEMORY[0x18D75FFDC](v45, v64, v66);
  v51 = (uint64_t)v60;
  static ViewBuilder.buildExpression<A>(_:)(v47, v49, v50);
  v52 = *(void (**)(char *, uint64_t))(v61 + 8);
  v52(v47, v49);
  static ViewBuilder.buildBlock<A>(_:)(v51, v49, v65);
  return ((uint64_t (*)(uint64_t, uint64_t))v52)(v51, v49);
}

double protocol witness for static Rule.initialValue.getter in conformance AccessibilityPickerStyle.Body<A>@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 73) = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void protocol witness for Rule.value.getter in conformance AccessibilityPickerStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;

  AccessibilityPickerStyle.Body.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

uint64_t closure #1 in AccessibilityMenuStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  _BYTE v23[80];
  _BYTE v24[64];
  uint64_t (*v25)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v26;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for Button<MenuStyleConfiguration.Label>, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v23[-v9];
  type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x1E0CE4BC0]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v23[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v23[-v17];
  if (a1)
  {
    *v10 = 256;
    v19 = (_QWORD *)((char *)v10 + *(int *)(v7 + 36));
    *v19 = a1;
    v19[1] = a2;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    outlined init with copy of Button<MenuStyleConfiguration.Label>((uint64_t)v10, (uint64_t)v18);
    type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    outlined destroy of Button<MenuStyleConfiguration.Label>((uint64_t)v10);
  }
  else
  {
    type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
  }
  v24[56] = 1;
  v25 = closure #2 in closure #1 in AccessibilityMenuStyle.makeBody(configuration:);
  v26 = 0;
  outlined init with copy of _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>((uint64_t)v18, (uint64_t)v14);
  v20 = MEMORY[0x1E0CE71A8];
  outlined init with copy of TableRowList?((uint64_t)v24, (uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>, (uint64_t)type metadata accessor for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>, (uint64_t)MEMORY[0x1E0CE71A8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with copy of _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>((uint64_t)v14, a3);
  type metadata accessor for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)();
  outlined init with copy of TableRowList?((uint64_t)v23, a3 + *(int *)(v21 + 48), (uint64_t)&lazy cache variable for type metadata for Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>, (uint64_t)type metadata accessor for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>, (uint64_t)v20, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined destroy of TableRowList?((uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>, (uint64_t)type metadata accessor for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined destroy of _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>((uint64_t)v18);
  outlined destroy of TableRowList?((uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>, (uint64_t)type metadata accessor for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  return outlined destroy of _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>((uint64_t)v14);
}

uint64_t closure #2 in closure #1 in AccessibilityMenuStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    swift_getKeyPath();
    outlined init with copy of SubviewsCollection(a1, (uint64_t)&v10);
    v5 = swift_allocObject();
    v6 = v11;
    *(_OWORD *)(v5 + 16) = v10;
    *(_OWORD *)(v5 + 32) = v6;
    *(_OWORD *)(v5 + 48) = v12;
    *(_QWORD *)(v5 + 64) = v13;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<Subview, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for Subview, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    result = ForEach.init(_:idGenerator:content:)();
    v7 = v13;
    v8 = v11;
    v9 = v12;
    *(_OWORD *)a2 = v10;
    *(_OWORD *)(a2 + 16) = v8;
    *(_OWORD *)(a2 + 32) = v9;
    *(_QWORD *)(a2 + 48) = v7;
  }
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in AccessibilityMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  result = _VariadicView_Children.subscript.getter();
  v5 = -v3;
  if (__OFSUB__(0, v3))
  {
    __break(1u);
  }
  else
  {
    v6 = __OFSUB__(v5, 1);
    v7 = v5 - 1;
    if (!v6)
    {
      specialized View.accessibility<A>(_:_:isEnabled:)(COERCE__INT64((double)v7), 0, 1, a2);
      return outlined destroy of Subview((uint64_t)&v8);
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance AccessibilityMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *a1;
  v9 = a1[1];
  *v7 = static Alignment.center.getter();
  v7[1] = v10;
  type metadata accessor for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>();
  closure #1 in AccessibilityMenuStyle.makeBody(configuration:)(v8, v9, (uint64_t)v7 + *(int *)(v11 + 44));
  if (one-time initialization token for automatic != -1)
    swift_once();
  v12 = static AccessibilityChildBehavior.automatic;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, a2, (uint64_t (*)(_QWORD))type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, AccessibilityContainerModifier>, (void (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
  *(_QWORD *)(a2 + *(int *)(v13 + 36)) = v12;
  swift_retain();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
}

uint64_t AccessibilityProgressViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  char v7;

  v4 = static VerticalAlignment.center.getter();
  result = type metadata accessor for ProgressViewStyleConfiguration(0);
  v6 = *(_BYTE *)(a1 + *(int *)(result + 28));
  v7 = *(_BYTE *)(a1 + *(int *)(result + 32));
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_BYTE *)(a2 + 17) = v6;
  *(_BYTE *)(a2 + 18) = v7;
  return result;
}

_QWORD *closure #1 in AccessibilityDisclosureGroupStyle.makeBody(configuration:)@<X0>(BOOL *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  result = MEMORY[0x18D75B9C8](&v3);
  *a1 = (v3 & 1) == 0;
  return result;
}

uint64_t protocol witness for DisclosureGroupStyle.makeBody(configuration:) in conformance AccessibilityDisclosureGroupStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  BOOL v6;

  v2 = static HorizontalAlignment.center.getter();
  closure #1 in AccessibilityDisclosureGroupStyle.makeBody(configuration:)(&v6);
  v3 = v6;
  if (one-time initialization token for contain != -1)
    swift_once();
  v4 = static AccessibilityChildBehavior.contain;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 17) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  return swift_retain();
}

void closure #1 in AccessibilityLabelStyle.makeBody(configuration:)(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)a1;
  v3 = *(void **)(a1 + 8);
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 16) == 1)
      outlined consume of AccessibilityAttachment.Tree(*(_QWORD *)a1, v3, 1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 2;
  }
  else
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    Dictionary.init(minimumCapacity:)();
    v4 = swift_bridgeObjectRetain();
    v5 = specialized AccessibilityProperties.subscript.getter(v4);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v5);
    static AccessibilityAttachment.properties(_:)();
    outlined consume of AccessibilityAttachment.Tree(v2, v3, 0);
    swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = 0;
  }
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance AccessibilityLabelStyle@<X0>(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  void (*v4)(uint64_t);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = static Alignment.center.getter();
  v4 = v3;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  Dictionary.init(minimumCapacity:)();
  AccessibilityAttachment.init(properties:)();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v7;
  *a1 = closure #1 in AccessibilityLabelStyle.makeBody(configuration:);
  a1[1] = 0;
  a1[2] = (void (*)(uint64_t))v2;
  a1[3] = v4;
  a1[4] = (void (*)(uint64_t))result;
  a1[5] = 0;
  return result;
}

uint64_t associated type witness table accessor for DisclosureGroupStyle.Body : View in AccessibilityDisclosureGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in AccessibilityLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityRepresentableStyleModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in AccessibilityButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void static AccessibilityListStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

void sub_187970250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  *(_DWORD *)(v2 - 124) = _GraphValue.value.getter();
  v4 = type metadata accessor for SelectionManagerBox(255, v1, v0, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v4);
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList();
}

uint64_t sub_1879702B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for _VariadicView.Tree();
  v5 = type metadata accessor for AccessibilityListStyle.Body(0, v2, v1, v4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>, v5);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>.AccessibilityList<A1>, a1);
  return static _VariadicView.Tree<>._makeView(view:inputs:)();
}

void static AccessibilityListStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

void sub_187970424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  *(_DWORD *)(v2 - 108) = _GraphValue.value.getter();
  v4 = type metadata accessor for SelectionManagerBox(255, v1, v0, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v4);
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList();
}

uint64_t sub_187970478(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for _VariadicView.Tree();
  v5 = type metadata accessor for AccessibilityListStyle.Body(0, v2, v1, v4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>, v5);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>.AccessibilityList<A1>, a1);
  return static _VariadicView.Tree<>._makeViewList(view:inputs:)();
}

uint64_t AccessibilityPickerStyle.Body.base.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(_QWORD, _QWORD *)@<X5>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t Value;
  _QWORD v10[4];

  v10[0] = a3;
  v10[1] = a1;
  v10[2] = a4;
  v10[3] = a2;
  v7 = a5(0, v10);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a6, Value, v7);
}

void AccessibilityListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for SelectionManagerBox(255, a2, a3, a4);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for _ListValue();
}

void sub_187970678(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v4, v6);
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 104) = v4;
  *(_QWORD *)(v5 - 96) = v2;
  *(_QWORD *)(v5 - 88) = v7;
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList();
}

uint64_t sub_1879706C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v15 - v11;
  AccessibilityPickerStyle.Body.base.getter(v5, v3, (uint64_t)&type metadata for AccessibilityListStyle, v9, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for _ListValue, v2);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v13(v7, v2, v6);
  v13((uint64_t)v12, v7, v6);
  *(_QWORD *)(v10 - 144) = v5;
  *(_QWORD *)(v10 - 136) = v3;
  *(_DWORD *)(v10 - 128) = v4;
  return _VariadicView.Tree.init(_:content:)();
}

void closure #1 in AccessibilityListStyle.Body.value.getter()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_1879707DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t (*v10)(_QWORD, _QWORD *);
  _BYTE v12[80];

  v7 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = &v12[-v8];
  AccessibilityPickerStyle.Body.base.getter(v3, v2, v4, v5, v10, (uint64_t)&v12[-v8]);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, a1);
}

void AccessibilityListStyle.Body.AccessibilityList.body(children:)()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Binding();
  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
}

void sub_1879708E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v12 - 168) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  outlined init with copy of _VariadicView_Children(*(_QWORD *)(v12 - 160), v12 - 136);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v11, *(_QWORD *)(v12 - 152), v10);
  AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.init(children:selection:)(v12 - 136, (uint64_t)v14);
}

uint64_t sub_187970978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListBody, v2);
  static ViewBuilder.buildExpression<A>(_:)(v0, v2, v4);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 168) + 8);
  v5(v0, v2);
  static ViewBuilder.buildBlock<A>(_:)(v1, v2, *(_QWORD *)(v3 - 144));
  return v5(v1, v2);
}

void AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.init(children:selection:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
}

uint64_t sub_187970A40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *(int *)(a1 + 52);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v1, v4);
}

void AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter()
{
  static HorizontalAlignment.center.getter();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier();
}

uint64_t sub_187970B14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  __int128 v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  v7 = type metadata accessor for ModifiedContent();
  v8 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  *(_QWORD *)(v5 - 176) = v3;
  *(_QWORD *)(v5 - 168) = v2;
  *(_QWORD *)(v5 - 160) = v7;
  *(_QWORD *)(v5 - 152) = v8;
  *(_QWORD *)(v5 - 144) = MEMORY[0x1E0DEB428];
  v9 = type metadata accessor for ForEach();
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListCellModifier, a1);
  v36[0] = MEMORY[0x1E0CE55C8];
  v36[1] = v10;
  v35 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v36);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v9, &v35);
  VStack.init(alignment:spacing:content:)();
  v11 = *(_BYTE *)(v5 - 160);
  v12 = *(_QWORD *)(v5 - 136);
  v13 = *(_QWORD *)(v5 - 128);
  v14 = *(_QWORD *)(v5 - 120);
  v26 = *(_OWORD *)(v5 - 176);
  v27 = v11;
  v28 = *(_OWORD *)(v4 + 120);
  v29 = v12;
  v30 = v13;
  v31 = v14;
  v32 = *(_OWORD *)(v5 - 112);
  if (one-time initialization token for contain != -1)
    swift_once();
  v34 = static AccessibilityChildBehavior.contain;
  v15 = type metadata accessor for VStack();
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v15);
  View.accessibilityElement(children:)(&v34, v15, v16);
  swift_release();
  swift_release();
  swift_release();
  v26 = v37;
  v27 = v38;
  v28 = *(_OWORD *)(v4 + 24);
  v29 = v39;
  v30 = v40;
  v31 = v41;
  v32 = v42;
  v33 = v43;
  v17 = type metadata accessor for ModifiedContent();
  v25[0] = v16;
  v25[1] = &protocol witness table for AccessibilityContainerModifier;
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v25);
  static ViewBuilder.buildExpression<A>(_:)(&v26, v17, v18);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v19 = *(_BYTE *)(v5 - 160);
  v20 = *(_QWORD *)(v5 - 136);
  v21 = *(_QWORD *)(v5 - 128);
  v22 = *(_QWORD *)(v5 - 120);
  v23 = *(_QWORD *)(v5 - 96);
  v37 = *(_OWORD *)(v5 - 176);
  v38 = v19;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(v4 + 120);
  v39 = v20;
  v40 = v21;
  v41 = v22;
  v42 = *(_OWORD *)(v5 - 112);
  v43 = v23;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v37, v17, v1);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter()
{
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
}

uint64_t sub_187970E24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  unint64_t v13;
  char *v14;
  uint64_t v15;

  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v15 - v10;
  result = _VariadicView_Children.endIndex.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    *(_QWORD *)(v7 - 304) = 0;
    *(_QWORD *)(v7 - 296) = result;
    *(_QWORD *)(v7 - 336) = swift_getKeyPath();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v6, a1);
    v13 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v14 = (char *)swift_allocObject();
    *((_QWORD *)v14 + 2) = v5;
    *((_QWORD *)v14 + 3) = v4;
    *((_QWORD *)v14 + 4) = v3;
    *((_QWORD *)v14 + 5) = v2;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v14[v13], v11, a1);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    *(_QWORD *)(v7 - 160) = v5;
    *(_QWORD *)(v7 - 152) = v4;
    *(_QWORD *)(v7 - 144) = v3;
    *(_QWORD *)(v7 - 136) = v2;
    type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier();
  }
  __break(1u);
  return result;
}

void closure #1 in closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter()
{
  _VariadicView_Children.subscript.getter();
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
}

void sub_18797114C(_QWORD *a1)
{
  uint64_t v1;

  AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)(v1, a1);
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier();
}

uint64_t sub_187971180(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_BYTE *, uint64_t);
  _QWORD v8[2];
  uint64_t v9;
  _QWORD v10[15];
  _BYTE v11[216];

  v3 = MEMORY[0x1E0CE55C8];
  MEMORY[0x18D75B4AC](v10, &v9, MEMORY[0x1E0CE55D8], a1, MEMORY[0x1E0CE55C8]);
  swift_release();
  swift_release();
  outlined destroy of _VariadicView_Children.Element((uint64_t)v11);
  v4 = type metadata accessor for ModifiedContent();
  v8[0] = v3;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListCellModifier, a1);
  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v8);
  static ViewBuilder.buildExpression<A>(_:)(v10, v4, v5);
  v6 = *(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(v10, v4);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v11, v4, v1);
  return v6(v11, v4);
}

uint64_t AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  double v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, _QWORD *);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, _QWORD *, double);
  uint64_t v30;
  uint64_t v31;

  v5 = *(a2 - 1);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(void (**)(char *, uint64_t, _QWORD *, double))(v5 + 16);
  v29(v8, v2, a2, v7);
  type metadata accessor for MainActor();
  v9 = static MainActor.shared.getter();
  v10 = *(unsigned __int8 *)(v5 + 80);
  v11 = (v10 + 64) & ~v10;
  v24 = v11;
  v12 = (v6 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = v12 + 8;
  v28 = v10 | 7;
  v13 = (_QWORD *)swift_allocObject();
  v14 = MEMORY[0x1E0DF06E8];
  v13[2] = v9;
  v13[3] = v14;
  v15 = a2[3];
  v25 = a2[2];
  v13[4] = v25;
  v13[5] = v15;
  v16 = a2[5];
  v26 = a2[4];
  v13[6] = v26;
  v13[7] = v16;
  v17 = (char *)v13 + v11;
  v18 = *(void (**)(char *, char *, _QWORD *))(v5 + 32);
  v18(v17, v8, a2);
  *(_QWORD *)((char *)v13 + v12) = a1;
  ((void (*)(char *, uint64_t, _QWORD *))v29)(v8, v30, a2);
  v19 = static MainActor.shared.getter();
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v19;
  v21 = v25;
  v20[3] = MEMORY[0x1E0DF06E8];
  v20[4] = v21;
  v20[5] = v15;
  v22 = (char *)v20 + v24;
  v20[6] = v26;
  v20[7] = v16;
  v18(v22, v8, a2);
  *(_QWORD *)((char *)v20 + v12) = a1;
  Binding.init(get:set:)();
  return v31;
}

uint64_t closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD v26[2];
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _QWORD v36[13];

  v28 = a4;
  v29 = a6;
  v35 = a8;
  v26[1] = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v26[0] = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for Binding();
  v12 = type metadata accessor for Optional();
  v31 = *(_QWORD *)(v12 - 8);
  v32 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)v26 - v18;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v27 = (char *)v26 - v23;
  v30 = a3;
  _VariadicView_Children.subscript.getter();
  v24 = v36[11];
  swift_bridgeObjectRetain();
  outlined destroy of _VariadicView_Children.Element((uint64_t)v36);
  v36[0] = v24;
  v34 = a7;
  swift_getAssociatedConformanceWitness();
  ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)(1, AssociatedTypeWitness, (uint64_t)v19);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, AssociatedTypeWitness) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v27, v19, AssociatedTypeWitness);
    v36[0] = v28;
    v36[1] = a5;
    v36[2] = v29;
    v36[3] = v34;
    type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  *v35 = 0;
  return result;
}

uint64_t closure #2 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD v32[5];
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v34 = a6;
  v35 = a8;
  v40 = a5;
  v32[4] = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v32[3] = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Binding();
  v13 = type metadata accessor for Optional();
  v37 = *(_QWORD *)(v13 - 8);
  v38 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v32[2] = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v32[1] = (char *)v32 - v18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = type metadata accessor for Optional();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)v32 - v23;
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)v32 - v28;
  v33 = *a1;
  v36 = a4;
  _VariadicView_Children.subscript.getter();
  v30 = v45;
  swift_bridgeObjectRetain();
  outlined destroy of _VariadicView_Children.Element((uint64_t)&v41);
  v41 = v30;
  v40 = a9;
  swift_getAssociatedConformanceWitness();
  ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)(1, AssociatedTypeWitness, (uint64_t)v24);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, AssociatedTypeWitness) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v29, v24, AssociatedTypeWitness);
    if (v33)
    {
      v41 = v34;
      v42 = a7;
      v43 = v35;
      v44 = v40;
      type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
    }
    v41 = v34;
    v42 = a7;
    v43 = v35;
    v44 = v40;
    type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
}

void AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v12[4];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v13 = a2;
  v14 = a3;
  LOBYTE(v15) = a4;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v12);
  v13 = a5;
  v14 = a6;
  v15 = a7;
  v16 = a8;
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier();
}

uint64_t sub_187971BC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListCellModifier, a1);
  v4 = type metadata accessor for _ViewModifier_Content();
  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v4);
  View.accessibilityAddTraits(_:)(&v15, v4, v5);
  v15 = v21;
  v16 = v22;
  if (one-time initialization token for automatic != -1)
    swift_once();
  v20 = static AccessibilityChildBehavior.automatic;
  v6 = type metadata accessor for ModifiedContent();
  v19[0] = v5;
  v19[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v19);
  View._accessibilityElement(children:)(&v20, v6, v7);
  swift_release();
  swift_release();
  v15 = v25;
  v16 = v26;
  v17 = v27;
  v18 = v28;
  v21 = v2;
  v22 = v1;
  LOBYTE(v23) = v12;
  MEMORY[0x18D75B9C8](&v20, v3);
  v8 = 4;
  if (!(_BYTE)v20)
    v8 = 0;
  v20 = v8;
  v9 = type metadata accessor for ModifiedContent();
  ModifiedContent<>.accessibilityAddTraits(_:)(&v20, v9, (uint64_t)&v21);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v15 = v21;
  v16 = v22;
  v17 = v23;
  v18 = v24;
  v14[0] = v7;
  v14[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v14);
  static ViewBuilder.buildExpression<A>(_:)(&v15, v9, v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v21 = v25;
  v22 = v26;
  v23 = v27;
  v24 = v28;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v21, v9, v13);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListCellModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier.body(content:)(a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16), a2[2], a2[3], a2[4], a2[5]);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance AccessibilityListStyle.Body<A>.AccessibilityList<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>.AccessibilityList<A1>, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void protocol witness for static Rule.initialValue.getter in conformance AccessibilityListStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v4);
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList();
}

uint64_t sub_187971EF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for _VariadicView.Tree();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

void protocol witness for Rule.value.getter in conformance AccessibilityListStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;

  AccessibilityListStyle.Body.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

uint64_t sub_187971F58()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static AccessibilityRepresentationModifier._makeView(modifier:inputs:body:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = *(_QWORD *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for AccessibilityChildrenModifier.BridgedAttachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityChildrenModifier.BridgedAttachment);
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityProxyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 9) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v12);
    *(_QWORD *)a1 = v11;
    *(_BYTE *)(a1 + 8) = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))((a1 + v7 + 9) & ~v7, (a2 + v7 + 9) & ~v7, v5);
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityProxyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))((*(unsigned __int8 *)(v10 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t assignWithTake for AccessibilityProxyModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v10 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityProxyModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 9) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 9) & ~v7);
      v15 = *(unsigned __int8 *)(a1 + 8);
      if (v15 > 1)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18797227C + 4 * byte_187C72480[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityProxyModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for AccessibilityMenuStyle()
{
  return &type metadata for AccessibilityMenuStyle;
}

ValueMetadata *type metadata accessor for AccessibilityControlGroupStyle()
{
  return &type metadata for AccessibilityControlGroupStyle;
}

ValueMetadata *type metadata accessor for AccessibilityGroupBoxStyle()
{
  return &type metadata for AccessibilityGroupBoxStyle;
}

ValueMetadata *type metadata accessor for AccessibilityStepperStyle()
{
  return &type metadata for AccessibilityStepperStyle;
}

ValueMetadata *type metadata accessor for AccessibilitySliderStyle()
{
  return &type metadata for AccessibilitySliderStyle;
}

ValueMetadata *type metadata accessor for AccessibilityListStyle()
{
  return &type metadata for AccessibilityListStyle;
}

ValueMetadata *type metadata accessor for AccessibilityPickerStyle()
{
  return &type metadata for AccessibilityPickerStyle;
}

ValueMetadata *type metadata accessor for AccessibilityProgressViewStyle()
{
  return &type metadata for AccessibilityProgressViewStyle;
}

uint64_t getEnumTagSinglePayload for AccessibilityChildrenModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187972620 + 4 * byte_187C7248E[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityChildrenModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for AccessibilityControlStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityControlStyle);
}

unint64_t lazy protocol witness table accessor for type AccessibilityControlStyle<ButtonStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityControlStyle<ButtonStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityControlStyle<ButtonStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for AccessibilityControlStyle<ButtonStyleConfiguration.Label>, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for ButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityControlStyle);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityControlStyle<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityControlStyle<ButtonStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>);
  }
  return result;
}

uint64_t sub_187972898()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for MenuStyleModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<AccessibilityMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityMenuStyle and conformance AccessibilityMenuStyle, (uint64_t)&type metadata for AccessibilityMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<AccessibilityControlGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityControlGroupStyle and conformance AccessibilityControlGroupStyle, (uint64_t)&type metadata for AccessibilityControlGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ControlGroupStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for GroupBoxStyleModifier<AccessibilityGroupBoxStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityGroupBoxStyle and conformance AccessibilityGroupBoxStyle, (uint64_t)&type metadata for AccessibilityGroupBoxStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GroupBoxStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StepperStyleModifier<AccessibilityStepperStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityStepperStyle and conformance AccessibilityStepperStyle, (uint64_t)&type metadata for AccessibilityStepperStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StepperStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for SliderStyleModifier<AccessibilitySliderStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilitySliderStyle and conformance AccessibilitySliderStyle, (uint64_t)&type metadata for AccessibilitySliderStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SliderStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ListStyleWriter<AccessibilityListStyle>, (uint64_t)&type metadata for AccessibilityListStyle, (uint64_t)&protocol witness table for AccessibilityListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PickerStyleWriter<AccessibilityPickerStyle>, (uint64_t)&type metadata for AccessibilityPickerStyle, (uint64_t)&protocol witness table for AccessibilityPickerStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PickerStyleWriter);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ProgressViewStyleModifier<AccessibilityProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityProgressViewStyle and conformance AccessibilityProgressViewStyle, (uint64_t)&type metadata for AccessibilityProgressViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ProgressViewStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier, (uint64_t)&type metadata for AccessibilityRepresentableStyleModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<AccessibilityRepresentableStyleContext>, MEMORY[0x1E0CE6840], MEMORY[0x1E0CE6830], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityProgressViewStyle and conformance AccessibilityProgressViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProgressViewStyle and conformance AccessibilityProgressViewStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressViewStyle and conformance AccessibilityProgressViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProgressViewStyle, &type metadata for AccessibilityProgressViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressViewStyle and conformance AccessibilityProgressViewStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilitySliderStyle and conformance AccessibilitySliderStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySliderStyle and conformance AccessibilitySliderStyle;
  if (!lazy protocol witness table cache variable for type AccessibilitySliderStyle and conformance AccessibilitySliderStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilitySliderStyle, &type metadata for AccessibilitySliderStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySliderStyle and conformance AccessibilitySliderStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityStepperStyle and conformance AccessibilityStepperStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityStepperStyle and conformance AccessibilityStepperStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperStyle and conformance AccessibilityStepperStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityStepperStyle, &type metadata for AccessibilityStepperStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperStyle and conformance AccessibilityStepperStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityGroupBoxStyle and conformance AccessibilityGroupBoxStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityGroupBoxStyle and conformance AccessibilityGroupBoxStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityGroupBoxStyle and conformance AccessibilityGroupBoxStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityGroupBoxStyle, &type metadata for AccessibilityGroupBoxStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityGroupBoxStyle and conformance AccessibilityGroupBoxStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityControlGroupStyle and conformance AccessibilityControlGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityControlGroupStyle and conformance AccessibilityControlGroupStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityControlGroupStyle and conformance AccessibilityControlGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityControlGroupStyle, &type metadata for AccessibilityControlGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityControlGroupStyle and conformance AccessibilityControlGroupStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityMenuStyle and conformance AccessibilityMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityMenuStyle and conformance AccessibilityMenuStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityMenuStyle and conformance AccessibilityMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityMenuStyle, &type metadata for AccessibilityMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityMenuStyle and conformance AccessibilityMenuStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for ControlGroupStyleModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for GroupBoxStyleModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for StepperStyleModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for SliderStyleModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for ListStyleWriter<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for PickerStyleWriter<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityRepresentableStyleModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type StyleContextWriter<AccessibilityRepresentableStyleContext> and conformance StyleContextWriter<A>);
    v3[1] = &protocol witness table for ProgressViewStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityRepresentableStyleModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityRepresentableStyleModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityRepresentableStyleModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityRepresentableStyleModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier, (uint64_t)&type metadata for AccessibilityRepresentableStyleModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityRepresentableStyleModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<AccessibilityRepresentableStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<AccessibilityRepresentableStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<AccessibilityRepresentableStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<AccessibilityRepresentableStyleContext>, MEMORY[0x1E0CE6840], MEMORY[0x1E0CE6830], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<AccessibilityRepresentableStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for DetachDeferredAccessibilityAttachmentModifier);
    v3[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for DisableDeferredAccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>);
  }
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>);
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&type metadata for DetachedGeometryModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for _HiddenModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier);
    v3[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&type metadata for DetachedGeometryModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for LabelStyleConfiguration.Icon;
    v2[1] = &protocol witness table for DetachedGeometryModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>, MEMORY[0x1E0CE4B88]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for DisableDeferredAccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for LabelStyleConfiguration.Title;
    v2[1] = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>, AccessibilityContainerModifier>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>, MEMORY[0x1E0CE74B8]);
    v3[1] = &protocol witness table for AccessibilityContainerModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>, (uint64_t (*)(uint64_t))type metadata accessor for (DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>, (uint64_t (*)(uint64_t))type metadata accessor for (DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?));
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>);
  }
}

void type metadata accessor for (DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for DisclosureGroupStyleConfiguration.Content?, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?));
  }
}

uint64_t sub_1879738C8()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>>, MEMORY[0x1E0CE73D0]);
}

void type metadata accessor for HStack<TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>, &lazy cache variable for type metadata for (LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content));
    lazy protocol witness table accessor for type TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)> and conformance TupleView<A>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>>);
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>, &lazy cache variable for type metadata for (LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content));
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)> and conformance TupleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityControlStyle<ToggleStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityControlStyle<ToggleStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityControlStyle<ToggleStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for AccessibilityControlStyle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityControlStyle);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityControlStyle<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityControlStyle<ToggleStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityControlStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ProgressViewStyle.Body : View in AccessibilityProgressViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for SliderStyle.Body : View in AccessibilitySliderStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StepperStyle.Body : View in AccessibilityStepperStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GroupBoxStyle.Body : View in AccessibilityGroupBoxStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in AccessibilityControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in AccessibilityMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in AccessibilityChildrenModifier<A>.BridgedAttachment()
{
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityNodesKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityNodesKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityNodesKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityNodesKey>, (uint64_t)&type metadata for AccessibilityNodesKey, (uint64_t)&protocol witness table for AccessibilityNodesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityNodesKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in AccessibilityProxyModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in closure #2 in AccessibilityProxyModifier.body(content:)(v1[4], v1[2], v1[3], a1);
}

void type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>));
    v0 = type metadata accessor for ZStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
  }
}

void type metadata accessor for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>))
  {
    type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x1E0CE4BC0]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>));
  }
}

void type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, ValueMetadata *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for Button<MenuStyleConfiguration.Label>, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    v7 = a3(a1, v6, &type metadata for MenuStyleConfiguration.Label);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t type metadata accessor for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>;
  if (!lazy cache variable for type metadata for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>();
    lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>> and conformance <> ForEach<A, B, C>();
    type metadata accessor for GroupElementsOfContent();
  }
  return result;
}

void type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Subview, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for Subview, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<Subview, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Subview, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Subview, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Subview, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Subview, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for Subview, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for Subview;
    v2[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Subview, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
  }
}

uint64_t outlined init with copy of _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x1E0CE4BC0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *))MEMORY[0x1E0CE4BC0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Button<MenuStyleConfiguration.Label>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for Button<MenuStyleConfiguration.Label>, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Button<MenuStyleConfiguration.Label>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for Button<MenuStyleConfiguration.Label>, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18797411C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in AccessibilityMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #2 in closure #1 in AccessibilityMenuStyle.makeBody(configuration:)(a1, a2);
}

void type metadata accessor for AccessibilityListStyle.Body.AccessibilityList()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for AccessibilityListStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityListStyle.Body);
}

void type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityRadioButton()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for AccessibilityPickerStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityPickerStyle.Body);
}

uint64_t type metadata completion function for AccessibilityPickerStyle.Body.AccessibilityRadioButton()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AccessibilityPickerStyle.Body.AccessibilityRadioButton(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7 && (v7 & 0x1000F8) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
    v10 = ((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v10 + 16) = v12;
    *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
  }
  else
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AccessibilityPickerStyle.Body.AccessibilityRadioButton(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityPickerStyle.Body.AccessibilityRadioButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = v9;
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityPickerStyle.Body.AccessibilityRadioButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(v9 + 16) = v11;
  swift_retain();
  swift_release();
  *(_BYTE *)(v9 + 24) = *(_BYTE *)(v10 + 24);
  return a1;
}

uint64_t initializeWithTake for AccessibilityPickerStyle.Body.AccessibilityRadioButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  return a1;
}

uint64_t assignWithTake for AccessibilityPickerStyle.Body.AccessibilityRadioButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  *(_BYTE *)(v9 + 24) = *(_BYTE *)(v10 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityPickerStyle.Body.AccessibilityRadioButton(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)(((v7 + a1) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = (v7 & 0xFFFFFFF8) + 25;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187974540 + 4 * byte_187C7249C[v12]))();
  }
}

void storeEnumTagSinglePayload for AccessibilityPickerStyle.Body.AccessibilityRadioButton(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = (*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFFFF8) + 25;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_1879746E8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18797475CLL);
}

void sub_1879746F0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1879746F8);
  JUMPOUT(0x18797475CLL);
}

void sub_187974734()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18797475CLL);
}

void sub_18797473C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18797475CLL);
}

uint64_t sub_187974744(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18797475CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187974758);
    JUMPOUT(0x187974750);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for AccessibilityListStyle.Body.AccessibilityList()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AccessibilityListStyle.Body.AccessibilityList(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  if (v7 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0 && v8 <= 0x18)
  {
    v12 = ~v7;
    v13 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v13 + v7 + 8) & v12))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
        return __dst;
      }
    }
    else
    {
      v14 = *v13;
      if ((unint64_t)*v13 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((_DWORD)v14 != -1)
        goto LABEL_14;
    }
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v13;
    v16 = ((unint64_t)v15 + v7 + 8) & v12;
    v17 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v17(v16, ((unint64_t)v13 + v7 + 8) & v12, v5);
    return __dst;
  }
  v11 = *__src;
  *__dst = *__src;
  __dst = (_QWORD *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  swift_retain();
  return __dst;
}

uint64_t destroy for AccessibilityListStyle.Body.AccessibilityList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = ~v4;
  v6 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v6 + v4 + 8) & v5);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(((unint64_t)v6 + v4 + 8) & v5, v2);
  }
  v7 = *v6;
  if ((unint64_t)*v6 >= 0xFFFFFFFF)
    LODWORD(v7) = -1;
  result = (v7 + 1);
  if ((_DWORD)v7 == -1)
    goto LABEL_7;
  return result;
}

_QWORD *initializeWithCopy for AccessibilityListStyle.Body.AccessibilityList(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(uint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF)
      LODWORD(v11) = -1;
    if ((_DWORD)v11 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v12 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v13 = ((unint64_t)v12 + v7 + 8) & v8;
    v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v14(v13, ((unint64_t)v10 + v7 + 8) & v8, v5);
    return __dst;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v8))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, ((v7 + 16) & ~v7) + v9);
  return __dst;
}

_QWORD *assignWithCopy for AccessibilityListStyle.Body.AccessibilityList(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(unint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ~v8;
  v10 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    v20 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
    v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    v19 = v15(((unint64_t)v11 + v8 + 8) & v9, v7, v5);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v4 = a1;
    v14 = v15(((unint64_t)v12 + v8 + 8) & v9, v7, v5);
    v10 = v20;
    if (!v19)
    {
LABEL_5:
      if (!v14)
      {
        *v4 = *a2;
        swift_retain();
        swift_release();
        *v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
        return v4;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v8 + 8) & v9, v5);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *v4 = *a2;
    *v11 = *v12;
    v16 = ((unint64_t)v12 + v8 + 8) & v9;
    v17 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v17(((unint64_t)v11 + v8 + 8) & v9, v16, v5);
    return v4;
  }
LABEL_9:
  memcpy(v4, a2, v10);
  return v4;
}

_QWORD *initializeWithTake for AccessibilityListStyle.Body.AccessibilityList(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF)
      LODWORD(v11) = -1;
    if ((_DWORD)v11 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v12 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v12 + v7 + 8) & v8, ((unint64_t)v10 + v7 + 8) & v8, v5);
    return __dst;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v8))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, ((v7 + 16) & ~v7) + v9);
  return __dst;
}

_QWORD *assignWithTake for AccessibilityListStyle.Body.AccessibilityList(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v16)(unint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;

  v3 = a2;
  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ~v8;
  v10 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    v19 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
    v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    v18 = v16(((unint64_t)v11 + v8 + 8) & v9, v7, v5);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v3 = a2;
    v4 = a1;
    v14 = v16(((unint64_t)v12 + v8 + 8) & v9, v7, v5);
    v10 = v19;
    if (!v18)
    {
LABEL_5:
      if (!v14)
      {
        *v4 = *v3;
        swift_release();
        *v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
        return v4;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v8 + 8) & v9, v5);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *v4 = *v3;
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
    return v4;
  }
LABEL_9:
  memcpy(v4, v3, v10);
  return v4;
}

uint64_t getEnumTagSinglePayload for AccessibilityListStyle.Body.AccessibilityList(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 - 1 >= a2)
    goto LABEL_24;
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 > 3)
    goto LABEL_7;
  v12 = (((1 << v9) + a2 - v6) >> v9) + 1;
  if (HIWORD(v12))
  {
    v10 = *(_DWORD *)(a1 + v8);
    if (v10)
      goto LABEL_15;
LABEL_24:
    v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      v17 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
    }
    else
    {
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      v17 = v16 + 1;
    }
    if (v17 >= 2)
      return v17 - 1;
    else
      return 0;
  }
  if (v12 > 0xFF)
  {
    v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_15;
    goto LABEL_24;
  }
  if (v12 < 2)
    goto LABEL_24;
LABEL_7:
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_24;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v14 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v4 + 64);
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  return (v13 + v6);
}

void storeEnumTagSinglePayload for AccessibilityListStyle.Body.AccessibilityList(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64);
  if (v6 - 1 >= a3)
  {
    v10 = 0u;
  }
  else
  {
    v10 = 1u;
    if (v9 <= 3)
    {
      v11 = (((v10 << (8 * v9)) + a3 - v6) >> (8 * v9)) + 1;
      if (HIWORD(v11))
      {
        v10 = 4u;
        if (v7 >= a2)
          goto LABEL_21;
      }
      else
      {
        if (v11 >= 0x100)
          v10 = 2;
        else
          v10 = v11 > 1;
        if (v7 >= a2)
LABEL_21:
          __asm { BR              X14 }
      }
LABEL_14:
      v12 = a2 - v6;
      if (v9 < 4)
      {
        if ((_DWORD)v9)
        {
          v13 = v12 & ~(-1 << (8 * v9));
          bzero(a1, v9);
          if ((_DWORD)v9 == 3)
          {
            *a1 = v13;
            *((_BYTE *)a1 + 2) = BYTE2(v13);
          }
          else if ((_DWORD)v9 == 2)
          {
            *a1 = v13;
          }
          else
          {
            *(_BYTE *)a1 = v13;
          }
        }
      }
      else
      {
        bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64));
        *(_DWORD *)a1 = v12;
      }
      __asm { BR              X10 }
    }
  }
  if (v7 >= a2)
    goto LABEL_21;
  goto LABEL_14;
}

void sub_187975308()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187975374);
}

void sub_187975310()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187975374);
}

void sub_187975318()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187975374);
}

void sub_187975348()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187975374);
}

void sub_187975358()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187975374);
}

void sub_187975360()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187975374);
}

uint64_t sub_18797538C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for AccessibilityProxyModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProxyModifier<A>, v6);
  v7 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityNodesKey>, (uint64_t)&type metadata for AccessibilityNodesKey, (uint64_t)&protocol witness table for AccessibilityNodesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v8 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for VStack();
  v10 = type metadata accessor for ModifiedContent();
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for Optional();
  v24[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v9);
  v24[1] = &protocol witness table for HiddenModifierAllowingAccessibility;
  v13 = MEMORY[0x1E0CE2E70];
  v23[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v24);
  v23[1] = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v22 = MEMORY[0x18D75FFDC](v13, v11, v23);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v12, &v22);
  v14 = type metadata accessor for _BackgroundModifier();
  v15 = type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityProxyModifier.GeometryTransformModifier(255, v4, v5, v16);
  v17 = type metadata accessor for ModifiedContent();
  v21[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v7);
  v21[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityNodesKey> and conformance _PreferenceTransformModifier<A>();
  v20[0] = MEMORY[0x18D75FFDC](v13, v8, v21);
  v20[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v14);
  v19[0] = MEMORY[0x18D75FFDC](v13, v15, v20);
  v19[1] = &protocol witness table for AccessibilityProxyModifier<A>.GeometryTransformModifier;
  return MEMORY[0x18D75FFDC](v13, v17, v19);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, AccessibilityContainerModifier>, (void (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, MEMORY[0x1E0CE74D8]);
    v3[1] = &protocol witness table for AccessibilityContainerModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ControlGroupStyleConfiguration.Content, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ControlGroupStyleConfiguration.Content, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ControlGroupStyleConfiguration.Content, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<ControlGroupStyleConfiguration.Content, AccessibilityContainerModifier>, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for ControlGroupStyleConfiguration.Content;
    v2[1] = &protocol witness table for AccessibilityContainerModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ControlGroupStyleConfiguration.Content, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1879756D4()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>>, MEMORY[0x1E0CE73D0]);
}

void type metadata accessor for HStack<TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>, &lazy cache variable for type metadata for (GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content));
    lazy protocol witness table accessor for type TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>>);
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>, &lazy cache variable for type metadata for (GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content));
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityControlStyle<StepperStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityControlStyle<StepperStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityControlStyle<StepperStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for AccessibilityControlStyle<StepperStyleConfiguration.Label>, (uint64_t)&type metadata for StepperStyleConfiguration.Label, (uint64_t)&protocol witness table for StepperStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityControlStyle);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityControlStyle<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityControlStyle<StepperStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityControlStyle<SliderStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityControlStyle<SliderStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityControlStyle<SliderStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for AccessibilityControlStyle<SliderStyleConfiguration.Label>, (uint64_t)&type metadata for SliderStyleConfiguration.Label, (uint64_t)&protocol witness table for SliderStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityControlStyle);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityControlStyle<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityControlStyle<SliderStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>);
  }
  return result;
}

uint64_t sub_1879758C0()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>>, MEMORY[0x1E0CE73D0]);
}

void type metadata accessor for HStack<TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?));
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>>);
  }
}

void type metadata accessor for (ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)()
{
  uint64_t (*v0)(void);
  unint64_t TupleTypeMetadata2;
  uint64_t v2;

  if (!lazy cache variable for type metadata for (ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?))
  {
    v0 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.Label?, (uint64_t)&type metadata for ProgressViewStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.CurrentValueLabel?, (uint64_t)&type metadata for ProgressViewStyleConfiguration.CurrentValueLabel, (uint64_t (*)(_QWORD, uint64_t))v0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?));
  }
}

uint64_t sub_187975A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];

  v0 = type metadata accessor for _OverlayModifier();
  v1 = type metadata accessor for ModifiedContent();
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3620], v0);
  v11[0] = MEMORY[0x1E0CE7140];
  v11[1] = v5;
  v6 = MEMORY[0x1E0CE2E70];
  v10[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v11);
  v10[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v9[0] = MEMORY[0x18D75FFDC](v6, v2, v10);
  v9[1] = &protocol witness table for IgnoreViewRespondersModifier;
  v8[0] = MEMORY[0x18D75FFDC](v6, v3, v9);
  v8[1] = &protocol witness table for AccessibilityAttachmentModifier;
  return MEMORY[0x18D75FFDC](v6, v4, v8);
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityProxyModifier<A>.GeometryTransformModifier()
{
  return &protocol witness table for AccessibilityProxyModifier<A>.GeometryTransformModifier;
}

uint64_t instantiation function for generic protocol witness table for AccessibilityListStyle.Body<A>.AccessibilityList<A1>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>.AccessibilityList<A1>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in AccessibilityPickerStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityPickerStyle.Body<A>.AccessibilityRadioButton<A1>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in AccessibilityListStyle.Body<A>.AccessibilityList<A1>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void base witness table accessor for _AttributeBody in AccessibilityListStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void partial apply for closure #1 in AccessibilityListStyle.Body.value.getter()
{
  closure #1 in AccessibilityListStyle.Body.value.getter();
}

void type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody()
{
  JUMPOUT(0x18D75FF28);
}

void sub_187975BD0()
{
  type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityRadioButton();
}

uint64_t sub_187975C10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v1 + ((v2 + 48) & ~v2));
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in AccessibilityPickerStyle.Body.AccessibilityRadioButton.body.getter()
{
  type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityRadioButton();
}

void sub_187975CC0()
{
  type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityRadioButton();
}

uint64_t sub_187975CE4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v2 + *(int *)(a1 + 56) + v3))();
  *v1 = 3;
  return result;
}

void partial apply for closure #1 in AccessibilityPickerStyle.Body.value.getter()
{
  closure #1 in AccessibilityPickerStyle.Body.value.getter();
}

void partial apply for closure #2 in AccessibilityPickerStyle.Body.value.getter()
{
  closure #2 in AccessibilityPickerStyle.Body.value.getter();
}

void partial apply for closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter()
{
  closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter();
}

uint64_t sub_187975D40()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter()
{
  closure #1 in closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter();
}

uint64_t sub_187975D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityPickerStyle.Body.AccessibilityRadioButton.init<>(_:selection:)()
{
  uint64_t v0;

  return closure #1 in AccessibilityPickerStyle.Body.AccessibilityRadioButton.init<>(_:selection:)(*(_QWORD *)(v0 + 32));
}

uint64_t type metadata completion function for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);

  v4 = (_QWORD *)a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = v7 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v10 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  v11 = v7 & 0x100000;
  if (v8 <= 7 && v11 == 0 && (v9 & (v8 + 56)) + v10 <= 0x18)
  {
    v15 = *(unsigned int *)(v6 + 84);
    v16 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v16;
    (**(void (***)(uint64_t, uint64_t *))(v16 - 8))(a1, a2);
    v17 = (void *)a2[5];
    v18 = a2[6];
    v4[5] = v17;
    v4[6] = v18;
    v19 = (_QWORD *)(v9 & ((unint64_t)v4 + 63));
    v20 = (_QWORD *)(v9 & ((unint64_t)a2 + 63));
    v21 = (uint64_t *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = v17;
    swift_bridgeObjectRetain();
    if ((v15 & 0x80000000) != 0)
    {
      v25 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v21 + v8 + 8) & ~v8, v15, v5);
      v24 = ~v8;
      if (v25)
      {
LABEL_14:
        memcpy(v19, v20, v10);
        return v4;
      }
    }
    else
    {
      v23 = *v21;
      if ((unint64_t)*v21 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      v24 = ~v8;
      if ((_DWORD)v23 != -1)
        goto LABEL_14;
    }
    *v19 = *v20;
    v26 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v21;
    v27 = ((unint64_t)v26 + v8 + 8) & v24;
    v28 = ((unint64_t)v21 + v8 + 8) & v24;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v29(v27, v28, v5);
    return v4;
  }
  v14 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v14 + (v9 & (v8 + 16)));
  swift_retain();
  return v4;
}

uint64_t destroy for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;

  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (a1 + (v6 | 7) + 56) & ~(v6 | 7);
  v8 = ~v6;
  v9 = (uint64_t *)((v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v9 + v6 + 8) & v8);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v9 + v6 + 8) & v8, v4);
  }
  v10 = *v9;
  if ((unint64_t)*v9 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  result = (v10 + 1);
  if ((_DWORD)v10 == -1)
    goto LABEL_7;
  return result;
}

uint64_t initializeWithCopy for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(uint64_t, unint64_t, uint64_t);
  uint64_t v24;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(void **)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = *(_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 56;
  v13 = (_QWORD *)((v12 + a1) & ~(v11 | 7));
  v14 = (_QWORD *)((v12 + a2) & ~(v11 | 7));
  v15 = *(unsigned int *)(v10 + 84);
  v16 = ~v11;
  v24 = *(_QWORD *)(v10 + 64);
  v17 = (uint64_t *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  v18 = v7;
  swift_bridgeObjectRetain();
  if ((v15 & 0x80000000) == 0)
  {
    v19 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF)
      LODWORD(v19) = -1;
    if ((_DWORD)v19 != -1)
      goto LABEL_5;
LABEL_7:
    *v13 = *v14;
    v20 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v17;
    v21 = ((unint64_t)v20 + v11 + 8) & v16;
    v22 = *(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16);
    swift_retain();
    swift_retain();
    v22(v21, ((unint64_t)v17 + v11 + 8) & v16, v9);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(((unint64_t)v17 + v11 + 8) & v16, v15, v9))goto LABEL_7;
LABEL_5:
  memcpy(v13, v14, ((v11 + 16) & ~v11) + v24);
  return a1;
}

uint64_t *assignWithCopy for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t (*v21)(unint64_t, uint64_t, uint64_t);
  int v22;
  uint64_t (*v23)(unint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  int v30;
  uint64_t __n;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v6 = (void *)a2[5];
  v7 = (void *)a1[5];
  a1[5] = (uint64_t)v6;
  v8 = v6;

  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 56;
  v13 = (_QWORD *)(((unint64_t)a1 + v12) & ~(v11 | 7));
  v14 = (_QWORD *)(((unint64_t)a2 + v12) & ~(v11 | 7));
  v15 = *(unsigned int *)(v10 + 84);
  v16 = ~v11;
  __n = ((v11 + 16) & ~v11) + *(_QWORD *)(v10 + 64);
  v17 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 0x80000000) != 0)
  {
    v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
    v22 = v21(((unint64_t)v17 + v11 + 8) & ~v11, v15, v9);
    v23 = v21;
    v30 = v22;
    v18 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    v16 = ~v11;
    v20 = v23(((unint64_t)v18 + v11 + 8) & ~v11, v15, v9);
    if (!v30)
    {
LABEL_5:
      if (!v20)
      {
        *v13 = *v14;
        swift_retain();
        swift_release();
        *v17 = *v18;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24))(((unint64_t)v17 + v11 + 8) & v16, ((unint64_t)v18 + v11 + 8) & v16, v9);
        return a1;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v10 + 8))(((unint64_t)v17 + v11 + 8) & v16, v9);
      goto LABEL_9;
    }
  }
  else
  {
    v18 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = *v18;
    if (*v18 >= 0xFFFFFFFFuLL)
      LODWORD(v19) = -1;
    v20 = v19 + 1;
    if (*v17 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v20)
  {
    *v13 = *v14;
    *v17 = *v18;
    v24 = v16;
    v25 = ((unint64_t)v17 + v11 + 8) & v16;
    v26 = ((unint64_t)v18 + v11 + 8) & v24;
    v27 = v9;
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    swift_retain();
    swift_retain();
    v28(v25, v26, v27);
    return a1;
  }
LABEL_9:
  memcpy(v13, v14, __n);
  return a1;
}

uint64_t initializeWithTake for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 56;
  v9 = (char *)((v8 + a1) & ~(v7 | 7));
  v10 = (_QWORD *)((v8 + a2) & ~(v7 | 7));
  v11 = ~v7;
  v12 = *(_QWORD *)(v6 + 64);
  v13 = (uint64_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    v14 = *v13;
    if ((unint64_t)*v13 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    if ((_DWORD)v14 != -1)
      goto LABEL_5;
LABEL_7:
    *(_QWORD *)v9 = *v10;
    v15 = (unint64_t)(v9 + 15);
    *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8) = *v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((v7 + 8 + (v15 & 0xFFFFFFFFFFFFFFF8)) & v11, ((unint64_t)v13 + v7 + 8) & v11, v5);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v13 + v7 + 8) & v11))
    goto LABEL_7;
LABEL_5:
  memcpy(v9, v10, ((v7 + 16) & ~v7) + v12);
  return a1;
}

uint64_t assignWithTake for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  size_t v23;
  void *v24;
  const void *v25;
  uint64_t (*v26)(unint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t (*v28)(unint64_t, uint64_t, uint64_t);
  int v30;
  size_t __n;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 | 7) + 56;
  v13 = (_QWORD *)((v12 + a1) & ~(v11 | 7));
  v14 = (_QWORD *)((v12 + a2) & ~(v11 | 7));
  v15 = *(unsigned int *)(v10 + 84);
  v16 = ~v11;
  v17 = *(_QWORD *)(v10 + 64);
  v18 = ((v11 + 16) & ~v11) + v17;
  v19 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 0x80000000) != 0)
  {
    __n = ((v11 + 16) & ~v11) + v17;
    v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
    v27 = v26(((unint64_t)v19 + v11 + 8) & ~v11, v15, v9);
    v28 = v26;
    v30 = v27;
    v20 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    v16 = ~v11;
    v22 = v28(((unint64_t)v20 + v11 + 8) & ~v11, v15, v9);
    v18 = __n;
    if (!v30)
    {
LABEL_5:
      if (!v22)
      {
        *v13 = *v14;
        swift_release();
        *v19 = *v20;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 40))(((unint64_t)v19 + v11 + 8) & v16, ((unint64_t)v20 + v11 + 8) & v16, v9);
        return a1;
      }
      v23 = v18;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v10 + 8))(((unint64_t)v19 + v11 + 8) & v16, v9);
      v24 = v13;
      v25 = v14;
      v18 = v23;
      goto LABEL_10;
    }
  }
  else
  {
    v20 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    v21 = *v20;
    if (*v20 >= 0xFFFFFFFFuLL)
      LODWORD(v21) = -1;
    v22 = v21 + 1;
    if (*v19 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v22)
  {
    *v13 = *v14;
    *v19 = *v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(((unint64_t)v19 + v11 + 8) & v16, ((unint64_t)v20 + v11 + 8) & v16, v9);
    return a1;
  }
  v24 = v13;
  v25 = v14;
LABEL_10:
  memcpy(v24, v25, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v16;
  int v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  v7 = v6 - 1;
  if ((v6 - 1) <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = v6 - 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v9 | 7;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v12 = ((v9 + 16) & ~v9) + *(_QWORD *)(v4 + 64) + ((v9 + 56) & ~v10);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v16 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v16 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v16 < 2)
    {
LABEL_25:
      if (v7 < 0)
      {
        v19 = (unint64_t *)((((a1 + v10 + 56) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          v21 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v19 + v9 + 8) & ~v9);
        }
        else
        {
          v20 = *v19;
          if (v20 >= 0xFFFFFFFF)
            LODWORD(v20) = -1;
          v21 = v20 + 1;
        }
        if (v21 >= 2)
          return v21 - 1;
        else
          return 0;
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 24);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_25;
LABEL_18:
  v17 = (v14 - 1) << v13;
  if (v12 > 3)
    v17 = 0;
  if ((_DWORD)v12)
  {
    if (v12 > 3)
      LODWORD(v12) = 4;
    __asm { BR              X12 }
  }
  return v8 + v17 + 1;
}

void storeEnumTagSinglePayload for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if ((v6 - 1) <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64) + ((v8 + 56) & ~(v8 | 7));
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64) + ((v8 + 56) & ~(v8 | 7)));
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64) + ((v8 + 56) & ~(v8 | 7)));
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

void sub_187976CD0()
{
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
}

uint64_t sub_187976CF0(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListBody, a1);
}

uint64_t sub_187976D0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListBody()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void partial apply for closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter()
{
  closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter();
}

void type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier()
{
  JUMPOUT(0x18D75FF28);
}

void sub_187976DEC()
{
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
}

uint64_t sub_187976E30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v4 = v1 + ((v3 + 48) & ~v3);
  __swift_destroy_boxed_opaque_existential_1(v4);

  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(a1 + 52);
  v6 = type metadata accessor for Binding();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_release();
    swift_release();
    (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5 + *(int *)(v6 + 32));
  }
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter()
{
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
}

void sub_187976F34()
{
  closure #1 in closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter();
}

void partial apply for closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)()
{
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
}

uint64_t sub_187976FB8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v7 + 64) & ~v7), v3, v4, v5, v6, v1);
}

void partial apply for closure #2 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)()
{
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
}

uint64_t sub_18797704C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(a1 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return closure #2 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)(v1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v8, *(_QWORD *)(v2 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)), v3, v4, v5, v6);
}

void sub_1879770A8()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier();
}

uint64_t sub_187977104(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v13 = v2;
  v14 = v1;
  v15 = type metadata accessor for ModifiedContent();
  v16 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  v17 = MEMORY[0x1E0DEB428];
  v4 = type metadata accessor for ForEach();
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListCellModifier, a1);
  v12[0] = MEMORY[0x1E0CE55C8];
  v12[1] = v5;
  v6 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v12);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v4, &v11);
  v7 = type metadata accessor for VStack();
  v8 = type metadata accessor for ModifiedContent();
  v10[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v7);
  v10[1] = &protocol witness table for AccessibilityContainerModifier;
  return MEMORY[0x18D75FFDC](v6, v8, v10);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListCellModifier()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void sub_18797720C()
{
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier();
}

uint64_t sub_187977234(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[12];

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListCellModifier, a1);
  v1 = type metadata accessor for _ViewModifier_Content();
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
  v7[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = &protocol witness table for AccessibilityAttachmentModifier;
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

void NavigationLinkPickerStyle.init()(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t NavigationLinkPickerStyle.init(labelAxis:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result & 1;
  return result;
}

void static NavigationLinkPickerStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for PickerStyleConfiguration.Content(255, a3, a4, a4);
  type metadata accessor for PickerStyleConfiguration.Label(255, a3, a4, v6);
  type metadata accessor for PickerCurrentValueLabel();
}

void sub_187977398(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>, a1);
  type metadata accessor for NavigationPickerButton();
}

void sub_1879773CC(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPickerButton<A, B, C>, a1);
  type metadata accessor for GroupElementsOfContent();
}

void sub_1879773F4()
{
  int v0;
  uint64_t v1;

  type metadata accessor for Group();
  *(_DWORD *)(v1 - 124) = v0;
  type metadata accessor for _PickerValue();
}

uint64_t sub_187977430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  type metadata accessor for _GraphValue();
  v7 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 32);
  v13 = *(_OWORD *)(v0 + 56);
  v14 = *(_OWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 72);
  _GraphValue.value.getter();
  v11 = type metadata accessor for NavigationLinkPickerStyle.Body(0, v2, v1, v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLinkPickerStyle.Body<A>, v11);
  _GraphValue.init<A>(_:)();
  v18 = v5;
  v19 = v6;
  v20 = v15;
  v21 = v7;
  v22 = v8;
  v23 = v14;
  v24 = v13;
  v25 = v9;
  v26 = v16;
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupElementsOfContent<A, B>, v4);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71C0], v3, &v17);
  return static MultiView._makeView(view:inputs:)();
}

void type metadata accessor for NavigationPickerButton()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for NavigationLinkPickerStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationLinkPickerStyle.Body);
}

void static NavigationLinkPickerStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _PickerValue();
}

void sub_1879775DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  *(_DWORD *)(v2 - 108) = _GraphValue.value.getter();
  type metadata accessor for PickerStyleConfiguration.Content(255, v1, v0, v3);
  type metadata accessor for PickerStyleConfiguration.Label(255, v1, v0, v4);
  type metadata accessor for PickerCurrentValueLabel();
}

void sub_18797763C(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>, a1);
  type metadata accessor for NavigationPickerButton();
}

void sub_187977670(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPickerButton<A, B, C>, a1);
  type metadata accessor for GroupElementsOfContent();
}

uint64_t sub_187977698(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for Group();
  v5 = type metadata accessor for NavigationLinkPickerStyle.Body(0, v2, v1, v4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLinkPickerStyle.Body<A>, v5);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupElementsOfContent<A, B>, a1);
  return static Group<A>._makeViewList(view:inputs:)();
}

void NavigationLinkPickerStyle.Body.base.getter()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_1879777A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void NavigationLinkPickerStyle.Body.value.getter()
{
  type metadata accessor for _PickerValue();
}

void sub_187977838(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  NavigationLinkPickerStyle.Body.base.getter();
}

void sub_187977878()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = v4 + *(int *)(v3 + 52);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v1);
  v8 = type metadata accessor for PickerStyleConfiguration(0, v1, v0, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v1;
  *(_QWORD *)(v9 + 24) = v0;
  *(_DWORD *)(v9 + 32) = v2;
  v11 = type metadata accessor for PickerStyleConfiguration.Content(0, v1, v0, v10);
  type metadata accessor for PickerStyleConfiguration.Label(255, v1, v0, v12);
  *(_QWORD *)(v5 - 112) = v11;
  *(_QWORD *)(v5 - 104) = v1;
  *(_QWORD *)(v5 - 96) = &protocol witness table for PickerStyleConfiguration<A>.Content;
  *(_QWORD *)(v5 - 88) = v0;
  type metadata accessor for PickerCurrentValueLabel();
}

void sub_187977914(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>, a1);
  *(_QWORD *)(v4 - 112) = v3;
  *(_QWORD *)(v4 - 104) = a1;
  *(_QWORD *)(v4 - 96) = v2;
  *(_QWORD *)(v4 - 88) = &protocol witness table for PickerStyleConfiguration<A>.Label;
  *(_QWORD *)(v4 - 80) = v6;
  *(_QWORD *)(v4 - 72) = v1;
  type metadata accessor for NavigationPickerButton();
}

void sub_187977948(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPickerButton<A, B, C>, a1);
  Group.init<A, B>(subviews:transform:)();
}

void closure #1 in NavigationLinkPickerStyle.Body.value.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _UNKNOWN **v16;
  uint64_t v17;

  v12 = a1;
  v13 = a4;
  v6 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v6, v7);
  v10[4] = (char *)v10 - v8;
  v11 = type metadata accessor for PickerStyleConfiguration.Content(255, a2, a3, v9);
  v14 = v11;
  v15 = a2;
  v16 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  v17 = a3;
  type metadata accessor for PickerCurrentValueLabel();
}

void sub_187977A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v11 - 160) = a1;
  *(_QWORD *)(v11 - 184) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v11 - 192) = (char *)&a9 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)(v11 - 136) = &type metadata for NavigationLinkPickerStyle;
  *(_QWORD *)(v11 - 128) = v9;
  *(_QWORD *)(v11 - 120) = &protocol witness table for NavigationLinkPickerStyle;
  *(_QWORD *)(v11 - 112) = v10;
  type metadata accessor for _PickerValue();
}

void sub_187977AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x1E0C80A78](a1, a2);
  v5 = type metadata accessor for PickerStyleConfiguration(0, v2, v3, v4);
  MEMORY[0x1E0C80A78](v5, v6);
  NavigationLinkPickerStyle.Body.base.getter();
}

void sub_187977B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v4 + *(int *)(v1 + 52), v2);
  NavigationLinkPickerStyle.Body.base.getter();
}

void sub_187977B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  void (*v7)(unsigned __int8 *, uint64_t);

  v7 = *(void (**)(unsigned __int8 *, uint64_t))(v3 + 8);
  *(_DWORD *)(v6 - 196) = *v5;
  v7(v5, v1);
  PickerStyleConfiguration.$selection.getter();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v0);
  PickerCurrentValueLabel.init(selection:options:)(v0, v2, v4);
}

void sub_187977BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v0);
  v7 = *(_QWORD *)(v6 - 184);
  v8 = *(_QWORD *)(v6 - 160);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 + 16))(*(_QWORD *)(v6 - 192), v5, v8);
  outlined init with copy of SubviewsCollection(*(_QWORD *)(v6 - 152), v6 - 136);
  PickerStyleConfiguration.$selection.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  v10 = type metadata accessor for PickerStyleConfiguration.Label(0, v0, v2, v9);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>, v8);
  NavigationPickerButton.init(label:detailLabel:options:selection:labelAxis:)(v11, v10, *(_QWORD *)(v6 - 144));
}

void NavigationPickerButton.init(label:detailLabel:options:selection:labelAxis:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for NavigationPickerButton();
}

uint64_t sub_187977D0C(int *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v2 + a1[17], v6, v4);
  v8 = v2 + a1[18];
  v9 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v5;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v5 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v5 + 48);
  v10 = v2 + a1[19];
  v11 = type metadata accessor for Binding();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, v3, v11);
  *(_BYTE *)(v2 + a1[20]) = v1;
  return result;
}

void protocol witness for Rule.value.getter in conformance NavigationLinkPickerStyle.Body<A>()
{
  NavigationLinkPickerStyle.Body.value.getter();
}

uint64_t storeEnumTagSinglePayload for NavigationLinkPickerStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187977E04 + 4 * byte_187C73055[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187977E38 + 4 * byte_187C73050[v4]))();
}

uint64_t sub_187977E38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187977E40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187977E48);
  return result;
}

uint64_t sub_187977E54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187977E5CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187977E60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187977E68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationLinkPickerStyle()
{
  return &type metadata for NavigationLinkPickerStyle;
}

uint64_t type metadata completion function for NavigationPickerButton()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Binding();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationPickerButton(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, unint64_t, uint64_t);
  id v33;
  uint64_t *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;

  v5 = a3[3];
  v6 = *(_QWORD *)(a3[2] - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64) + 7;
  v11 = *(_QWORD *)(a3[4] - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 | 7;
  v14 = v12 | *(_DWORD *)(v6 + 80) & 0xF8 | v8;
  if (v14 > 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || ((v12 + 16) & ~v12)
     + *(_QWORD *)(v11 + 64)
     + ((v12 + ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 56) & ~(v12 | 7))
     + 1 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    v34 = (uint64_t *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
    swift_retain();
  }
  else
  {
    v18 = ~v8;
    v36 = ~v12;
    v37 = a3[4];
    v38 = ((v12 + 16) & ~v12) + *(_QWORD *)(v11 + 64);
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v39 = a1;
    v19 = ((unint64_t)a1 + v9) & v18;
    v20 = ((unint64_t)a2 + v9) & v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v19, v20, v5);
    v21 = (_QWORD *)((v10 + v19) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)((v10 + v20) & 0xFFFFFFFFFFFFFFF8);
    v23 = v22[3];
    v21[3] = v23;
    v21[4] = v22[4];
    (**(void (***)(_QWORD *, _QWORD *))(v23 - 8))(v21, v22);
    v24 = (void *)v22[5];
    v21[5] = v24;
    v21[6] = v22[6];
    v25 = (_QWORD *)(((unint64_t)v21 + v13 + 56) & ~v13);
    v26 = (_QWORD *)(((unint64_t)v22 + v13 + 56) & ~v13);
    *v25 = *v26;
    v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
    v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v27 = *v28;
    v29 = v12 + 8;
    v30 = ((unint64_t)v27 + v12 + 8) & ~v12;
    v31 = ((unint64_t)v28 + v29) & v36;
    v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16);
    v33 = v24;
    v34 = v39;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v32(v30, v31, v37);
    *((_BYTE *)v25 + v38) = *((_BYTE *)v26 + v38);
  }
  return v34;
}

uint64_t destroy for NavigationPickerButton(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v8);

  swift_bridgeObjectRelease();
  v9 = a2[4];
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t, uint64_t))(v10 + 8))((v11 + ((((v8 + (v11 | 7) + 56) & ~(v11 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11, v9);
}

uint64_t initializeWithCopy for NavigationPickerButton(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  id v27;
  uint64_t v28;
  uint64_t v30;

  v5 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v5 + 16))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v5 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64) + 7;
  v13 = (_QWORD *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[3];
  v13[3] = v15;
  v13[4] = v14[4];
  (**(void (***)(_QWORD *, _QWORD *))(v15 - 8))(v13, v14);
  v16 = (void *)v14[5];
  v13[5] = v16;
  v13[6] = v14[6];
  v30 = a3[4];
  v17 = *(_QWORD *)(v30 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v19 = *(_DWORD *)(v17 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v20 = (_QWORD *)(((unint64_t)v13 + v18 + 56) & v19);
  v21 = (_QWORD *)(((unint64_t)v14 + v18 + 56) & v19);
  *v20 = *v21;
  v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = ((unint64_t)v22 + v18 + 8) & ~v18;
  v25 = ((unint64_t)v23 + v18 + 8) & ~v18;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v27 = v16;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v26(v24, v25, v30);
  v28 = *(_QWORD *)(v17 + 64) + ((v18 + 16) & ~v18);
  *((_BYTE *)v20 + v28) = *((_BYTE *)v21 + v28);
  return a1;
}

uint64_t assignWithCopy for NavigationPickerButton(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64) + 7;
  v13 = (uint64_t *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = (uint64_t *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v13, v14);
  v15 = (void *)v14[5];
  v16 = (void *)v13[5];
  v13[5] = (uint64_t)v15;
  v17 = v15;

  v13[6] = v14[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[4];
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_DWORD *)(v19 + 80);
  v21 = *(_DWORD *)(v19 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v22 = (_QWORD *)(((unint64_t)v13 + v20 + 56) & v21);
  v23 = (_QWORD *)(((unint64_t)v14 + v20 + 56) & v21);
  *v22 = *v23;
  swift_retain();
  swift_release();
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 24))(((unint64_t)v24 + v20 + 8) & ~v20, ((unint64_t)v25 + v20 + 8) & ~v20, v18);
  v26 = *(_QWORD *)(v19 + 64) + ((v20 + 16) & ~v20);
  *((_BYTE *)v22 + v26) = *((_BYTE *)v23 + v26);
  return a1;
}

uint64_t initializeWithTake for NavigationPickerButton(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64) + 7;
  v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)(v14 + 16);
  v15 = *(_OWORD *)(v14 + 32);
  v17 = *(_OWORD *)v14;
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(v14 + 48);
  *(_OWORD *)(v13 + 16) = v16;
  *(_OWORD *)(v13 + 32) = v15;
  *(_OWORD *)v13 = v17;
  v18 = *(_QWORD *)(a3[4] - 8);
  v19 = *(_DWORD *)(v18 + 80);
  v20 = *(_DWORD *)(v18 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v21 = (_QWORD *)((v19 + 56 + v13) & v20);
  v22 = (_QWORD *)((v19 + 56 + v14) & v20);
  *v21 = *v22;
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  (*(void (**)(unint64_t, unint64_t))(v18 + 32))(((unint64_t)v23 + v19 + 8) & ~v19, ((unint64_t)v24 + v19 + 8) & ~v19);
  v25 = *(_QWORD *)(v18 + 64) + ((v19 + 16) & ~v19);
  *((_BYTE *)v21 + v25) = *((_BYTE *)v22 + v25);
  return a1;
}

uint64_t assignWithTake for NavigationPickerButton(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a1) & ~v8;
  v11 = (v9 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  v12 = *(_QWORD *)(v7 + 64) + 7;
  v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v13);
  v15 = *(_OWORD *)v14;
  v16 = *(_OWORD *)(v14 + 16);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_OWORD *)v13 = v15;
  *(_OWORD *)(v13 + 16) = v16;
  v17 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v14 + 40);

  *(_QWORD *)(v13 + 48) = *(_QWORD *)(v14 + 48);
  swift_bridgeObjectRelease();
  v18 = a3[4];
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_DWORD *)(v19 + 80);
  v21 = *(_DWORD *)(v19 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v22 = (_QWORD *)((v20 + 56 + v13) & v21);
  v23 = (_QWORD *)((v20 + 56 + v14) & v21);
  *v22 = *v23;
  swift_release();
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 40))(((unint64_t)v24 + v20 + 8) & ~v20, ((unint64_t)v25 + v20 + 8) & ~v20, v18);
  v26 = *(_QWORD *)(v19 + 64) + ((v20 + 16) & ~v20);
  *((_BYTE *)v22 + v26) = *((_BYTE *)v23 + v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationPickerButton(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  int v18;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v3 = a3[3];
  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(v3 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(a3[4] - 8);
  if (*(_DWORD *)(v9 + 84) <= 0x7FFFFFFFu)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v8 <= v10)
    v8 = v10;
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = *(_QWORD *)(v6 + 64) + 7;
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = v14 | 7;
  if (a2 <= v8)
    goto LABEL_29;
  v16 = *(_QWORD *)(v9 + 64)
      + ((v14 + 16) & ~v14)
      + ((v14 + ((v13 + (v12 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 56) & ~v15)
      + 1;
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v20 = ((a2 - v8 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v20 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v20 < 2)
    {
LABEL_29:
      if (v5 == v8)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v23 = (v12 + a1) & ~v11;
      if (v7 == v8)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 48))(v23, *(unsigned int *)(v6 + 84), v3);
      v24 = (v13 + v23) & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v9 + 48))((v14
                                                                      + ((((v24 + v15 + 56) & ~v15) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 8) & ~v14);
      v25 = *(_QWORD *)(v24 + 24);
      if (v25 >= 0xFFFFFFFF)
        LODWORD(v25) = -1;
      return (v25 + 1);
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_29;
LABEL_20:
  v21 = (v18 - 1) << v17;
  if (v16 > 3)
    v21 = 0;
  if (*(_DWORD *)(v9 + 64)
     + (((_DWORD)v14 + 16) & ~(_DWORD)v14)
     + (((_DWORD)v14 + (((_DWORD)v13 + (v12 & ~(_DWORD)v11)) & 0xFFFFFFF8) + 56) & ~(_DWORD)v15) != -1)
  {
    if (v16 <= 3)
      v22 = *(_DWORD *)(v9 + 64)
          + ((v14 + 16) & ~(_DWORD)v14)
          + ((v14 + ((v13 + (v12 & ~(_DWORD)v11)) & 0xFFFFFFF8) + 56) & ~(_DWORD)v15)
          + 1;
    else
      v22 = 4;
    __asm { BR              X11 }
  }
  return v8 + v21 + 1;
}

void storeEnumTagSinglePayload for NavigationPickerButton(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) <= 0x7FFFFFFFu)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v8 + 84);
  if (v7 <= v9)
    v10 = v9;
  else
    v10 = v7;
  v11 = *(unsigned __int8 *)(v8 + 80);
  v12 = ((v11 + 16) & ~v11)
      + *(_QWORD *)(v8 + 64)
      + ((v11
        + ((*(_QWORD *)(v6 + 64)
          + 7
          + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFFFFFFFFFF8)
        + 56) & ~(v11 | 7))
      + 1;
  if (a3 > v10)
  {
    if (v12 <= 3)
    {
      v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
      if (HIWORD(v15))
      {
        v13 = 4u;
      }
      else
      {
        v13 = v15 > 1;
        if (v15 >= 0x100)
          v13 = 2;
      }
    }
    else
    {
      v13 = 1u;
    }
  }
  else
  {
    v13 = 0u;
  }
  if (v10 < a2)
  {
    v14 = ~v10 + a2;
    if (v12 < 4)
    {
      if ((((_DWORD)v11 + 16) & ~(_DWORD)v11)
         + *(_DWORD *)(v8 + 64)
         + (((_DWORD)v11
           + ((*(_DWORD *)(v6 + 64)
             + 7
             + ((*(_DWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~*(unsigned __int8 *)(v6 + 80))) & 0xFFFFFFF8)
           + 56) & ~(v11 | 7)) != -1)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *a1 = v16;
          *((_BYTE *)a1 + 2) = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *a1 = v16;
        }
        else
        {
          *(_BYTE *)a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X25 }
}

void sub_187978D2C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187978C68);
}

void sub_187978D34()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187978C68);
}

void sub_187978D44()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187978C68);
}

void base witness table accessor for _AttributeBody in NavigationLinkPickerStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in NavigationPickerButton<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t NavigationPickerButton.DetailView.dismiss.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v4 = v2 + *(int *)(a1 + 88);
  v5 = *(_QWORD *)v4;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = *(unsigned __int8 *)(v4 + 16);
  v8 = *(unsigned __int8 *)(v4 + 17);
  outlined copy of Environment<DismissAction>.Content(*(_QWORD *)v4, v6, v7, *(_BYTE *)(v4 + 17));
  specialized Environment.wrappedValue.getter(v5, v6, v7 | (v8 << 8), a2);
  return outlined consume of Environment<DismissAction>.Content(v5, v6, v7, v8);
}

uint64_t NavigationPickerButton.DetailView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];

  v49 = a3;
  v44 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v44 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 32);
  v8 = type metadata accessor for Binding();
  v48 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v37 = (char *)&v36 - v10;
  v11 = *(_QWORD *)(a1 + 40);
  v40 = *(_QWORD *)(v11 - 8);
  v12 = v40;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(_QWORD *)(a1 + 64);
  v43 = *(_QWORD *)(v41 + 8);
  v46 = type metadata accessor for _BindingActionModifier();
  v17 = type metadata accessor for ModifiedContent();
  v47 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v39 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v45 = (char *)&v36 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v16, v3 + *(int *)(a1 + 84), v11, v22);
  Binding.projectedValue.getter();
  v24 = v44;
  v25 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v42, v3, a1);
  v26 = (*(unsigned __int8 *)(v24 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v27 + 32) = v7;
  *(_QWORD *)(v27 + 40) = v11;
  *(_OWORD *)(v27 + 48) = *(_OWORD *)(a1 + 48);
  v28 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v27 + 64) = v41;
  *(_QWORD *)(v27 + 72) = v28;
  (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v27 + v26, v25, a1);
  v29 = v39;
  v30 = v37;
  View._onBindingChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v30, v38);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v11);
  v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5540], v46);
  v50[0] = v28;
  v50[1] = v31;
  v32 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v50);
  v33 = (uint64_t)v45;
  static ViewBuilder.buildExpression<A>(_:)(v29, v17, v32);
  v34 = *(void (**)(char *, uint64_t))(v47 + 8);
  v34(v29, v17);
  static ViewBuilder.buildBlock<A>(_:)(v33, v17, v49);
  return ((uint64_t (*)(uint64_t, uint64_t))v34)(v33, v17);
}

void closure #1 in NavigationPickerButton.DetailView.body.getter()
{
  type metadata accessor for NavigationPickerButton.DetailView();
}

uint64_t sub_18797914C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[14];

  NavigationPickerButton.DetailView.dismiss.getter(a1, (uint64_t)v4 + 1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v2 = v1;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](v4, v2);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release_n();
  return swift_release_n();
}

void NavigationPickerButton.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[14];
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v19 = a3;
  v4 = *(_QWORD *)(*(a1 - 1) + 64);
  v17 = *(a1 - 1);
  v18 = v4;
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 32);
  v15 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v15, v8);
  v9 = a1[2];
  v14[12] = *(_QWORD *)(v9 - 8);
  v14[13] = (char *)v14 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v14[9] = v7;
  v14[10] = (char *)v14 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[5];
  v21 = a1[7];
  v22 = v9;
  v23 = v7;
  v24 = v20;
  v25 = v21;
  type metadata accessor for ListPicker();
}

void sub_1879792EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9[23] = a1;
  v9[17] = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9[11] = (char *)&a9 - v14;
  v15 = *(_QWORD *)(v12 + 24);
  v9[8] = v12;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyTransformModifier<Font?>();
  v16 = type metadata accessor for ModifiedContent();
  v9[24] = v10;
  type metadata accessor for LabeledContent(255, v10, v16, v17);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<AdaptiveLeadingTrailingLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle, (uint64_t)&type metadata for AdaptiveLeadingTrailingLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
  type metadata accessor for ModifiedContent();
  v18 = *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v13 - 152) = v10;
  *(_QWORD *)(v13 - 144) = v15;
  v9[7] = v15;
  *(_QWORD *)(v13 - 136) = v11;
  *(_QWORD *)(v13 - 128) = &type metadata for BoundInputsView;
  *(_QWORD *)(v13 - 120) = v9[22];
  *(_QWORD *)(v13 - 112) = v18;
  v9[26] = v18;
  *(_QWORD *)(v13 - 104) = v9[25];
  *(_QWORD *)(v13 - 96) = &protocol witness table for BoundInputsView;
  type metadata accessor for NavigationPickerButton.DetailView();
}

void sub_187979428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v8 - 168) = v3;
  *(_QWORD *)(v8 - 160) = &protocol witness table for DisableAccessibilityNodesModifier;
  v10 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v8 - 168);
  v12 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  *(_QWORD *)(v8 - 184) = v11;
  *(_QWORD *)(v8 - 176) = v12;
  v13 = MEMORY[0x18D75FFDC](v10, v6, v8 - 184);
  v14 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>();
  *(_QWORD *)(v8 - 200) = v13;
  *(_QWORD *)(v8 - 192) = v14;
  v15 = MEMORY[0x18D75FFDC](v10, v5, v8 - 200);
  *(_QWORD *)(v8 - 216) = v7;
  *(_QWORD *)(v8 - 208) = v15;
  *(_QWORD *)(v8 - 232) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v1, v8 - 216);
  *(_QWORD *)(v8 - 224) = &protocol witness table for _LabeledContentStyleModifier<A>;
  v16 = MEMORY[0x18D75FFDC](v10, v2, v8 - 232);
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPickerButton<A, B, C>.DetailView<A1>, a1);
  *(_QWORD *)(v8 - 152) = v2;
  *(_QWORD *)(v8 - 144) = a1;
  *(_QWORD *)(v8 - 136) = v16;
  *(_QWORD *)(v8 - 128) = v17;
  type metadata accessor for NavigationLink();
}

void sub_1879794E8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1[6] = a1;
  v1[5] = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v8 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 248) = v1[26];
  *(_QWORD *)(v3 - 240) = &protocol witness table for DetachedGeometryModifier;
  v9 = MEMORY[0x18D75FFDC](v2, v4, v3 - 248);
  v10 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v1[43] = v9;
  v1[44] = v10;
  v1[41] = MEMORY[0x18D75FFDC](v2, v5, v1 + 43);
  v1[42] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v1[39] = MEMORY[0x18D75FFDC](v2, v6, v1 + 41);
  v1[40] = &protocol witness table for _HiddenModifier;
  v11 = MEMORY[0x18D75FFDC](v2, v7, v1 + 39);
  v12 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key);
  v1[37] = v11;
  v1[38] = v12;
  v13 = v2;
  MEMORY[0x18D75FFDC](v2, v8, v1 + 37);
  v14 = type metadata accessor for _BackgroundModifier();
  v15 = v1[5];
  v16 = type metadata accessor for ModifiedContent();
  v17 = type metadata accessor for ModifiedContent();
  v18 = type metadata accessor for ModifiedContent();
  v1[21] = type metadata accessor for ModifiedContent();
  v19 = v1[23];
  v20 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListPicker<A, B>, v19);
  v1[4] = v20;
  v1[35] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLink<A, B>, v1[6]);
  v1[36] = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  v21 = v13;
  v22 = MEMORY[0x18D75FFDC](v13, v15, v1 + 35);
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v14);
  v1[33] = v22;
  v1[34] = v23;
  v1[31] = MEMORY[0x18D75FFDC](v21, v16, v1 + 33);
  v1[32] = &protocol witness table for AccessibilityAttachmentModifier;
  v1[29] = MEMORY[0x18D75FFDC](v21, v17, v1 + 31);
  v1[30] = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  v1[27] = MEMORY[0x18D75FFDC](v21, v18, v1 + 29);
  v1[28] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v24 = v21;
  v25 = v1[21];
  v26 = MEMORY[0x18D75FFDC](v24, v25, v1 + 27);
  v1[3] = v26;
  *(_QWORD *)(v3 - 152) = v19;
  *(_QWORD *)(v3 - 144) = v25;
  *(_QWORD *)(v3 - 136) = v20;
  *(_QWORD *)(v3 - 128) = v26;
  type metadata accessor for ViewInputsBinding();
}

void sub_1879797AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = *(_QWORD *)(a1 - 8);
  v9[5] = a1;
  v9[6] = v11;
  MEMORY[0x1E0C80A78](a1, a2);
  v9[1] = (char *)&a9 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v9[2] = (char *)&a9 - v16;
  v17 = v9[10];
  v18 = v9[15];
  v19 = v9[24];
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v9[12] + 16))(v17, v18, v19, v15);
  outlined init with copy of SubviewsCollection(v18 + *(int *)(v9[8] + 72), v10 - 152);
  Binding.projectedValue.getter();
  ListPicker.init(label:options:selection:)(v17, v19, v9[11]);
}

void sub_187979880()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;

  v6 = v0[18];
  v7 = v0[16];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v1, v4);
  v8 = v6;
  v9 = (*(unsigned __int8 *)(v6 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = (char *)swift_allocObject();
  v11 = v0[7];
  *((_QWORD *)v10 + 2) = v0[24];
  *((_QWORD *)v10 + 3) = v11;
  *((_QWORD *)v10 + 4) = v5;
  *((_QWORD *)v10 + 5) = v3;
  *((_QWORD *)v10 + 6) = v0[26];
  *((_QWORD *)v10 + 7) = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(&v10[v9], v7, v4);
  View.bindInputs<A>(transform:)((uint64_t)partial apply for closure #1 in NavigationPickerButton.body.getter, (uint64_t)v10, v0[23], v0[21], v0[4], v0[3], v0[1]);
}

uint64_t sub_187979920()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v0[17] + 8))(v3, v1);
  v4 = v0[2];
  v5 = v0[5];
  static ViewBuilder.buildExpression<A>(_:)(v2, v5, &protocol witness table for ViewInputsBinding<A, B>);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0[6] + 8);
  v6(v2, v5);
  static ViewBuilder.buildBlock<A>(_:)(v4, v5, v0[20]);
  return v6(v4, v5);
}

void ListPicker.init(label:options:selection:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ListPicker();
}

uint64_t sub_187979A18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v4 = v3 + *(int *)(a1 + 52);
  v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(v2 + 48);
  v6 = v3 + *(int *)(a1 + 56);
  v7 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v1, v7);
}

void closure #1 in NavigationPickerButton.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyTransformModifier<Font?>();
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for LabeledContent(255, a3, v4, v5);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<AdaptiveLeadingTrailingLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle, (uint64_t)&type metadata for AdaptiveLeadingTrailingLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for NavigationPickerButton.DetailView();
}

void sub_187979BBC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v8 - 256) = v7;
  *(_QWORD *)(v8 - 248) = &protocol witness table for DisableAccessibilityNodesModifier;
  v10 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v8 - 256);
  v12 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v1[76] = v11;
  v1[77] = v12;
  v13 = MEMORY[0x18D75FFDC](v10, v6, v1 + 76);
  v14 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>();
  v1[74] = v13;
  v1[75] = v14;
  v15 = MEMORY[0x18D75FFDC](v10, v5, v1 + 74);
  v1[72] = v2;
  v1[73] = v15;
  v1[70] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v3, v1 + 72);
  v1[71] = &protocol witness table for _LabeledContentStyleModifier<A>;
  v16 = v1[27];
  v17 = MEMORY[0x18D75FFDC](v10, v16, v1 + 70);
  v1[18] = v17;
  v1[23] = a1;
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPickerButton<A, B, C>.DetailView<A1>, a1);
  v1[17] = v18;
  *(_QWORD *)(v8 - 240) = v16;
  *(_QWORD *)(v8 - 232) = a1;
  *(_QWORD *)(v8 - 224) = v17;
  *(_QWORD *)(v8 - 216) = v18;
  type metadata accessor for NavigationLink();
}

void sub_187979C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v9[19] = *(_QWORD *)(a1 - 8);
  v9[16] = a1;
  MEMORY[0x1E0C80A78](a1, a1);
  v9[13] = (char *)&a9 - v12;
  v9[5] = type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for ModifiedContent();
  v15 = type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v17 = type metadata accessor for ModifiedContent();
  v9[68] = v10;
  v9[69] = &protocol witness table for DetachedGeometryModifier;
  v18 = MEMORY[0x1E0CE2E70];
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v9 + 68);
  v20 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v9[66] = v19;
  v9[67] = v20;
  v9[64] = MEMORY[0x18D75FFDC](v18, v14, v9 + 66);
  v9[65] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v9[62] = MEMORY[0x18D75FFDC](v18, v15, v9 + 64);
  v9[63] = &protocol witness table for _HiddenModifier;
  v21 = MEMORY[0x18D75FFDC](v18, v16, v9 + 62);
  v22 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key);
  v9[60] = v21;
  v9[61] = v22;
  MEMORY[0x18D75FFDC](v18, v17, v9 + 60);
  v9[6] = type metadata accessor for _BackgroundModifier();
  v9[7] = type metadata accessor for ModifiedContent();
  v9[9] = type metadata accessor for ModifiedContent();
  v9[10] = type metadata accessor for ModifiedContent();
  v23 = type metadata accessor for ModifiedContent();
  v24 = *(_QWORD *)(v23 - 8);
  v9[11] = v23;
  v9[12] = v24;
  MEMORY[0x1E0C80A78](v23, v25);
  v9[4] = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v9[8] = (char *)&a9 - v29;
  v30 = v9[25];
  v31 = type metadata accessor for Binding();
  v9[1] = *(_QWORD *)(v31 - 8);
  v9[2] = v31;
  MEMORY[0x1E0C80A78](v31, v32);
  v9[22] = *(_QWORD *)(v9[23] - 8);
  MEMORY[0x1E0C80A78](v33, v34);
  v9[3] = (char *)&a9 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v38 = v9[20];
  v39 = *(_OWORD *)(v38 + 48);
  *(_OWORD *)(v11 - 208) = *(_OWORD *)(v38 + 32);
  *(_OWORD *)(v11 - 192) = v39;
  *(_OWORD *)(v11 - 176) = *(_OWORD *)(v38 + 64);
  v40 = *(_QWORD *)(v38 + 80);
  v41 = *(_OWORD *)(v38 + 16);
  *(_OWORD *)(v11 - 240) = *(_OWORD *)v38;
  *(_OWORD *)(v11 - 224) = v41;
  v42 = v9[14];
  v43 = v9[15];
  *(_QWORD *)(v11 - 160) = v40;
  *(_QWORD *)(v11 - 152) = v43;
  *(_QWORD *)(v11 - 144) = v9[26];
  *(_QWORD *)(v11 - 136) = v30;
  v44 = v9[29];
  *(_QWORD *)(v11 - 128) = v9[24];
  *(_QWORD *)(v11 - 120) = v44;
  *(_QWORD *)(v11 - 112) = v42;
  type metadata accessor for NavigationPickerButton();
}

void sub_187979FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for Binding();
  Binding.projectedValue.getter();
  swift_getKeyPath();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 8) + 32))(v8, v2, *(_QWORD *)(v0 + 16));
  *(_QWORD *)(v9 - 152) = v5;
  *(_QWORD *)(v9 - 144) = v4;
  *(_QWORD *)(v9 - 136) = v3;
  *(_QWORD *)(v9 - 128) = &type metadata for BoundInputsView;
  *(_QWORD *)(v9 - 120) = v7;
  *(_QWORD *)(v9 - 112) = v6;
  *(_QWORD *)(v9 - 104) = v1;
  *(_QWORD *)(v9 - 96) = &protocol witness table for BoundInputsView;
  type metadata accessor for NavigationPickerButton.DetailView();
}

void sub_18797A058(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = v7 + *(int *)(a1 + 84);
  v11 = *(_OWORD *)(v8 - 192);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v8 - 208);
  *(_OWORD *)(v10 + 48) = v11;
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(v8 - 176);
  *(_QWORD *)(v10 + 80) = *(_QWORD *)(v8 - 160);
  v12 = *(_OWORD *)(v8 - 224);
  *(_OWORD *)v10 = *(_OWORD *)(v8 - 240);
  *(_OWORD *)(v10 + 16) = v12;
  outlined retain of BoundInputsView(v8 - 240);
  v13 = *(int *)(a1 + 88);
  *v1 = v7;
  v14 = v7 + v13;
  *(_QWORD *)v14 = v2;
  *(_QWORD *)(v14 + 8) = 0;
  *(_WORD *)(v14 + 16) = 0;
  v15 = v1[3];
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1[22] + 16))(v15, v7, v1[23]);
  v1[42] = v6;
  v1[43] = v5;
  v16 = v1[24];
  v1[44] = v4;
  v1[45] = v16;
  v1[46] = v1[29];
  v1[47] = v3;
  v1[48] = v1[28];
  NavigationLink.init(destination:label:)(v15, (void (*)(uint64_t))partial apply for closure #2 in closure #1 in NavigationPickerButton.body.getter, v1[17], v1[13]);
}

uint64_t sub_18797A100()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);

  v0[32] = v6;
  v0[33] = v5;
  v0[34] = v0[25];
  v0[35] = v8;
  v0[36] = v1;
  v0[37] = v3;
  v0[38] = v2;
  v9 = v0[16];
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationLink<A, B>, v9);
  v11 = v0[4];
  View.accessibilityValue<A>(value:)((uint64_t)partial apply for closure #3 in closure #1 in NavigationPickerButton.body.getter, (uint64_t)(v0 + 30), v9, v5, v10, v1, v11);
  (*(void (**)(uint64_t, uint64_t))(v0[19] + 8))(v4, v9);
  (*(void (**)(_QWORD, uint64_t))(v0[22] + 8))(*v0, v7);
  v0[58] = v10;
  v0[59] = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  v12 = MEMORY[0x1E0CE2E70];
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0[5], v0 + 58);
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v0[6]);
  v0[56] = v13;
  v0[57] = v14;
  v0[54] = MEMORY[0x18D75FFDC](v12, v0[7], v0 + 56);
  v0[55] = &protocol witness table for AccessibilityAttachmentModifier;
  v0[52] = MEMORY[0x18D75FFDC](v12, v0[9], v0 + 54);
  v0[53] = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  v0[50] = MEMORY[0x18D75FFDC](v12, v0[10], v0 + 52);
  v0[51] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v15 = v12;
  v16 = v0[11];
  v17 = MEMORY[0x18D75FFDC](v15, v16, v0 + 50);
  v18 = v0[8];
  static ViewBuilder.buildExpression<A>(_:)(v11, v16, v17);
  v19 = *(void (**)(uint64_t, uint64_t))(v0[12] + 8);
  v19(v11, v16);
  static ViewBuilder.buildBlock<A>(_:)(v18, v16, v0[21]);
  return ((uint64_t (*)(uint64_t, uint64_t))v19)(v18, v16);
}

void closure #2 in closure #1 in NavigationPickerButton.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[29];
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[3];

  v38 = a6;
  v39 = a7;
  v36 = a4;
  v37 = a1;
  v35 = a8;
  v30 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v31 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyTransformModifier<Font?>();
  v32 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for LabeledContent(0, a2, v32, v11);
  v34 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v28 - v14;
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<AdaptiveLeadingTrailingLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle, (uint64_t)&type metadata for AdaptiveLeadingTrailingLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
  v16 = type metadata accessor for ModifiedContent();
  v33 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v40[12] = a2;
  v40[13] = a3;
  v29 = a3;
  v40[14] = v36;
  v40[15] = a5;
  v40[16] = v38;
  v40[17] = v39;
  v40[18] = v37;
  v40[2] = a2;
  v40[3] = a3;
  v40[4] = v36;
  v40[5] = a5;
  v40[6] = v38;
  v40[7] = v39;
  v40[8] = v37;
  v43[0] = v38;
  v43[1] = &protocol witness table for DisableAccessibilityNodesModifier;
  v21 = MEMORY[0x1E0CE2E70];
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v30, v43, v20);
  v23 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v42[0] = v22;
  v42[1] = v23;
  v24 = MEMORY[0x18D75FFDC](v21, v31, v42);
  v25 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>();
  v41[0] = v24;
  v41[1] = v25;
  v26 = v21;
  v27 = v32;
  MEMORY[0x18D75FFDC](v26, v32, v41);
  LabeledContent<>.init(content:label:)(partial apply for closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter, (uint64_t (*)(uint64_t))partial apply for closure #2 in closure #2 in closure #1 in NavigationPickerButton.body.getter, (uint64_t)v40, a2, v27, (uint64_t)v15);
  v40[23] = a2;
  v40[24] = v29;
  v40[25] = v36;
  v40[26] = a5;
  v40[27] = v38;
  v40[28] = v39;
  type metadata accessor for NavigationPickerButton();
}

uint64_t sub_18797A4F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  *(_BYTE *)(v9 - 184) = *(_BYTE *)(v1[9] + *(int *)(a1 + 80));
  *(_QWORD *)(v9 - 200) = v2;
  *(_QWORD *)(v9 - 192) = v7;
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v3, v9 - 200);
  lazy protocol witness table accessor for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle();
  View.labeledContentStyle<A>(_:)(v9 - 184, v3, (uint64_t)&type metadata for AdaptiveLeadingTrailingLabeledContentStyle, v10);
  (*(void (**)(uint64_t, uint64_t))(v1[6] + 8))(v4, v3);
  *(_QWORD *)(v9 - 216) = v10;
  *(_QWORD *)(v9 - 208) = &protocol witness table for _LabeledContentStyleModifier<A>;
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9 - 216);
  static ViewBuilder.buildExpression<A>(_:)(v6, v8, v11);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v1[5] + 8);
  v12(v6, v8);
  static ViewBuilder.buildBlock<A>(_:)(v5, v8, v1[7]);
  return v12(v5, v8);
}

void closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter()
{
  type metadata accessor for NavigationPickerButton();
}

uint64_t sub_18797A634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  _BYTE v37[96];

  v7 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v5 - 264) = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v5 - 272) = &v37[-v8];
  *(_QWORD *)(v5 - 256) = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v9 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v5 - 208) = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v37[-v11];
  type metadata accessor for _EnvironmentKeyTransformModifier<Font?>();
  v13 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v5 - 200) = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)(v5 - 280) = &v37[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v5 - 248) = &v37[-v18];
  v19 = v3;
  v20 = v3;
  v21 = v4;
  View.accessibilityDisabled()(v19, v4);
  *(_QWORD *)(v5 - 288) = swift_getKeyPath();
  v22 = *(_QWORD *)(v5 - 272);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v22, v2, a1);
  v23 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v24 = (char *)swift_allocObject();
  *((_QWORD *)v24 + 2) = *(_QWORD *)(v5 - 240);
  *((_QWORD *)v24 + 3) = v20;
  v25 = *(_QWORD *)(v5 - 224);
  *((_QWORD *)v24 + 4) = *(_QWORD *)(v5 - 232);
  *((_QWORD *)v24 + 5) = v25;
  v26 = *(_QWORD *)(v5 - 216);
  *((_QWORD *)v24 + 6) = v21;
  *((_QWORD *)v24 + 7) = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(&v24[v23], v22, a1);
  *(_QWORD *)(v5 - 152) = v21;
  *(_QWORD *)(v5 - 144) = &protocol witness table for DisableAccessibilityNodesModifier;
  v27 = MEMORY[0x1E0CE2E70];
  v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v5 - 256), v5 - 152);
  v29 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  *(_QWORD *)(v5 - 168) = v28;
  *(_QWORD *)(v5 - 160) = v29;
  v30 = MEMORY[0x18D75FFDC](v27, v9, v5 - 168);
  v31 = *(_QWORD *)(v5 - 280);
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 208) + 8))(v12, v9);
  v32 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>();
  *(_QWORD *)(v5 - 184) = v30;
  *(_QWORD *)(v5 - 176) = v32;
  v33 = MEMORY[0x18D75FFDC](v27, v13, v5 - 184);
  v34 = *(_QWORD *)(v5 - 248);
  static ViewBuilder.buildExpression<A>(_:)(v31, v13, v33);
  v35 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 200) + 8);
  v35(v31, v13);
  static ViewBuilder.buildBlock<A>(_:)(v34, v13, *(_QWORD *)(v5 - 192));
  return ((uint64_t (*)(uint64_t, uint64_t))v35)(v34, v13);
}

void closure #1 in closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter()
{
  type metadata accessor for NavigationPickerButton();
}

uint64_t sub_18797A960(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*(_BYTE *)(v2 + *(int *)(result + 80)) & 1) != 0)
  {
    swift_release();
    result = static Font.subheadline.getter();
    *v1 = result;
  }
  return result;
}

void closure #3 in closure #1 in NavigationPickerButton.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for NavigationPickerButton();
}

uint64_t sub_18797A9F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 68), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

void type metadata accessor for ListPicker()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<Font?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Font?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Font?>);
  }
}

unint64_t lazy protocol witness table accessor for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptiveLeadingTrailingLabeledContentStyle, &type metadata for AdaptiveLeadingTrailingLabeledContentStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle);
  }
  return result;
}

void type metadata accessor for NavigationPickerButton.DetailView()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<Font?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v6);
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in NavigationPickerButton.body.getter()
{
  type metadata accessor for NavigationPickerButton();
}

void sub_18797ABF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #1 in NavigationPickerButton.body.getter(v1, v2 + ((v4 + 64) & ~v4), v3);
}

uint64_t partial apply for closure #2 in closure #1 in NavigationPickerButton.body.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in closure #1 in NavigationPickerButton.body.getter);
}

uint64_t partial apply for closure #3 in closure #1 in NavigationPickerButton.body.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #3 in closure #1 in NavigationPickerButton.body.getter);
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter);
}

uint64_t partial apply for closure #2 in closure #2 in ListPicker.resolvedList<A>(list:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in View.staticIf<A, B>(_:trueModifier:)(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), a1);
}

void partial apply for closure #1 in closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter()
{
  type metadata accessor for NavigationPickerButton();
}

void sub_18797ACE8()
{
  closure #1 in closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter();
}

void ListPicker.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for PickerContentView(255, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 40), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v4);
  type metadata accessor for List();
}

void sub_18797ADC4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1[12] = type metadata accessor for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>();
  v1[8] = a1;
  v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>();
  v1[9] = v5;
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  v1[11] = v6;
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v9 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for ModifiedContent();
  v11 = type metadata accessor for ModifiedContent();
  v1[18] = *(_QWORD *)(v2 + 16);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for List<A, B>, a1);
  v1[5] = v12;
  v13 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>);
  *(_QWORD *)(v3 - 104) = v12;
  *(_QWORD *)(v3 - 96) = v13;
  v14 = MEMORY[0x1E0CE2E70];
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v3 - 104);
  v1[7] = v15;
  v16 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>);
  *(_QWORD *)(v3 - 120) = v15;
  *(_QWORD *)(v3 - 112) = v16;
  *(_QWORD *)(v3 - 136) = MEMORY[0x18D75FFDC](v14, v6, v3 - 120);
  *(_QWORD *)(v3 - 128) = &protocol witness table for ToggleStyleModifier<A>;
  v1[3] = v7;
  v17 = MEMORY[0x18D75FFDC](v14, v7, v3 - 136);
  v1[6] = v17;
  *(_QWORD *)(v3 - 152) = v17;
  *(_QWORD *)(v3 - 144) = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v18 = MEMORY[0x18D75FFDC](v14, v8, v3 - 152);
  v19 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey);
  *(_QWORD *)(v3 - 168) = v18;
  *(_QWORD *)(v3 - 160) = v19;
  *(_QWORD *)(v3 - 184) = MEMORY[0x18D75FFDC](v14, v9, v3 - 168);
  *(_QWORD *)(v3 - 176) = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  *(_QWORD *)(v3 - 200) = MEMORY[0x18D75FFDC](v14, v10, v3 - 184);
  *(_QWORD *)(v3 - 192) = v19;
  v20 = MEMORY[0x18D75FFDC](v14, v11, v3 - 200);
  v21 = v1[18];
  v22 = *(_QWORD *)(v1[17] + 32);
  v1[1] = v22;
  v1[66] = &type metadata for TextPlatformItemListFlags;
  v1[67] = v11;
  v1[68] = v21;
  v1[69] = &protocol witness table for TextPlatformItemListFlags;
  v1[70] = v20;
  v1[71] = v22;
  type metadata accessor for PlatformItemListReader();
}

void sub_18797B05C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t IsGroupedPredicate;

  IsGroupedPredicate = lazy protocol witness table accessor for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate();
  v1[66] = &unk_1E1B02F80;
  v1[67] = v2;
  v1[68] = a1;
  v1[69] = IsGroupedPredicate;
  type metadata accessor for StaticIf();
}

void sub_18797B088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9[4] = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v11, v12);
  v9[2] = (char *)&a9 - v13;
  v14 = v9[10];
  type metadata accessor for Binding();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  v15 = static Array._adoptStorage(_:count:)();
  v16 = v9[19];
  type metadata accessor for Binding();
  Binding.projectedValue.getter();
  _finalizeUninitializedArray<A>(_:)();
  outlined init with copy of SubviewsCollection(v16 + *(int *)(v10 + 52), (uint64_t)(v9 + 66));
  v17 = v9[13];
  PickerContentView.init(selection:items:)(v15, (uint64_t)(v9 + 66), (uint64_t)(v9 + 89));
  v9[30] = v9[18];
  v9[31] = v14;
  v9[32] = v9[1];
  v9[33] = v17;
  v9[34] = v9 + 89;
  List<>.init(content:)();
}

void sub_18797B1C8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(_BYTE *)(v0 + 336) = 1;
  v1 = *(_QWORD *)(v0 + 64);
  MEMORY[0x18D75B4AC](v0 + 304, v1, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + 528, v1);
  v2 = lazy protocol witness table accessor for type AnyFormStyleContext and conformance AnyFormStyleContext();
  View.listStyle<A, B>(_:in:)(v2, v3);
}

void sub_18797B244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + 344, v2);
  *(_QWORD *)(v0 + 176) = v1;
  *(_QWORD *)(v0 + 184) = v5;
  *(_QWORD *)(v0 + 192) = v4;
  *(_QWORD *)(v0 + 200) = v6;
  *(_QWORD *)(v0 + 208) = v0 + 528;
  ListPicker.resolvedList<A>(list:)((uint64_t)partial apply for closure #2 in ListPicker.body.getter, v0 + 160, *(_QWORD **)(v0 + 136), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 48), v3);
}

uint64_t sub_18797B290()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v0[36] = v1;
  v0[37] = &protocol witness table for PlatformItemListReader<A, B, C>;
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v3, v0 + 36);
  v6 = v0[2];
  static ViewBuilder.buildExpression<A>(_:)(v2, v3, v5);
  v7 = *(void (**)(uint64_t, uint64_t))(v0[4] + 8);
  v7(v2, v3);
  static ViewBuilder.buildBlock<A>(_:)(v6, v3, v0[16]);
  v7(v6, v3);
  (*(void (**)(_QWORD *))(*(_QWORD *)(v0[11] - 8) + 8))(v0 + 66);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0 + 89, v4);
}

uint64_t closure #1 in ListPicker.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[80];

  v7 = type metadata accessor for PickerContentView(0, a2, a4, a3);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v7);
  static ViewBuilder.buildExpression<A>(_:)(a1, v7, v8);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, v7, a5);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v10, v7);
}

void closure #2 in ListPicker.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  v8 = type metadata accessor for PickerContentView(255, a3, a5, v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v8);
  type metadata accessor for List();
}

uint64_t sub_18797B4F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[6];
  uint64_t v16;

  type metadata accessor for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>();
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>();
  v8 = type metadata accessor for ModifiedContent();
  v15[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for List<A, B>, a1);
  v15[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>);
  v9 = MEMORY[0x1E0CE2E70];
  v14[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v15);
  v14[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>);
  v10 = MEMORY[0x18D75FFDC](v9, v8, v14);
  lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle();
  View.toggleStyle<A>(_:)((uint64_t)&v16, v8, (uint64_t)&type metadata for CheckmarkToggleStyle, v10);
  outlined consume of Environment<Bool>.Content(v12, 0);
  outlined consume of Environment<Bool>.Content(v13, 0);
  outlined consume of Environment<EdgeInsets>.Content(v1, 0, 0, 0, 0);
  outlined consume of Environment<Bool>.Content(v4, v5);
  return outlined consume of Environment<Bool>.Content(v2, v3);
}

void ListPicker.resolvedList<A>(list:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  double v10;
  uint64_t v11;
  char *v12;
  void (*v13)(double);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  ValueMetadata *v46;
  uint64_t v47;
  uint64_t v48;
  _UNKNOWN **v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[3];

  v29 = a6;
  v30 = *(_QWORD *)(a4 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13(v10);
  v15 = a3[2];
  v14 = a3[3];
  v27 = a5;
  v28 = v15;
  v39 = v15;
  v40 = v14;
  v17 = a3[4];
  v16 = a3[5];
  v41 = a4;
  v42 = v17;
  v43 = v16;
  v44 = a5;
  v45 = v12;
  v31 = v15;
  v32 = v14;
  v33 = a4;
  v34 = v17;
  v35 = v16;
  v36 = a5;
  v18 = a5;
  v37 = v12;
  v38 = v6;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v19 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v20 = type metadata accessor for ModifiedContent();
  v21 = type metadata accessor for ModifiedContent();
  v22 = type metadata accessor for ModifiedContent();
  v55[0] = v18;
  v55[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v23 = MEMORY[0x1E0CE2E70];
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v19, v55);
  v25 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey);
  v54[0] = v24;
  v54[1] = v25;
  v53[0] = MEMORY[0x18D75FFDC](v23, v20, v54);
  v53[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v52[0] = MEMORY[0x18D75FFDC](v23, v21, v53);
  v52[1] = v25;
  v26 = MEMORY[0x18D75FFDC](v23, v22, v52);
  v46 = &type metadata for TextPlatformItemListFlags;
  v47 = v22;
  v48 = v28;
  v49 = &protocol witness table for TextPlatformItemListFlags;
  v50 = v26;
  v51 = v17;
  type metadata accessor for PlatformItemListReader();
}

void sub_18797B84C()
{
  lazy protocol witness table accessor for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate();
  StaticIf<>.init(_:then:else:)((uint64_t)&unk_1E1B02F80, (void (*)(void))partial apply for closure #1 in ListPicker.resolvedList<A>(list:));
}

uint64_t sub_18797B8A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 24) + 8))(v2, v1);
}

uint64_t closure #1 in ListPicker.resolvedList<A>(list:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v9, v10, v11);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v8, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a3);
}

void closure #2 in ListPicker.resolvedList<A>(list:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  ValueMetadata *v32;
  uint64_t v33;
  uint64_t v34;
  _UNKNOWN **v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];

  v29 = a7;
  v24 = a6;
  v28 = a4;
  v22 = a3;
  v30 = a2;
  v26 = a1;
  v31 = a9;
  v10 = *(_QWORD *)(a5 - 8);
  v23 = a5;
  v27 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v25 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v13 = type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for ModifiedContent();
  v15 = type metadata accessor for ModifiedContent();
  v41[0] = a8;
  v41[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v16 = MEMORY[0x1E0CE2E70];
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v41);
  v18 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey);
  v40[0] = v17;
  v40[1] = v18;
  v39[0] = MEMORY[0x18D75FFDC](v16, v13, v40);
  v39[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v38[0] = MEMORY[0x18D75FFDC](v16, v14, v39);
  v38[1] = v18;
  v21 = v15;
  v20 = MEMORY[0x18D75FFDC](v16, v15, v38);
  v32 = &type metadata for TextPlatformItemListFlags;
  v33 = v15;
  v34 = v22;
  v35 = &protocol witness table for TextPlatformItemListFlags;
  v36 = v20;
  v37 = v24;
  type metadata accessor for PlatformItemListReader();
}

void sub_18797BB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  *(_QWORD *)(v13 - 368) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (uint64_t *)((char *)&a9 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v13 - 384) = (char *)&a9 - v19;
  *(_QWORD *)(v13 - 392) = v10;
  v20 = *(_QWORD *)(v13 - 328);
  v21 = *(_QWORD *)(v13 - 344);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v10 + 16))(v20, *(_QWORD *)(v13 - 320), v21, v18);
  v22 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v23 = (_QWORD *)swift_allocObject();
  v24 = *(_QWORD *)(v13 - 304);
  v23[2] = v12;
  v23[3] = v24;
  v25 = v21;
  v23[4] = v21;
  v23[5] = v9;
  v26 = v9;
  v27 = *(_QWORD *)(v13 - 296);
  v23[6] = v27;
  v23[7] = v11;
  v28 = (char *)v23 + v22;
  v29 = v25;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 392) + 32))(v28, v20);
  *(_QWORD *)(v13 - 256) = v12;
  *(_QWORD *)(v13 - 248) = v24;
  *(_QWORD *)(v13 - 240) = v29;
  *(_QWORD *)(v13 - 232) = v26;
  *(_QWORD *)(v13 - 224) = v27;
  *(_QWORD *)(v13 - 216) = v11;
  *(_QWORD *)(v13 - 208) = *(_QWORD *)(v13 - 288);
  PlatformItemListReader.init(flags:content:source:)((uint64_t)partial apply for closure #1 in closure #2 in ListPicker.resolvedList<A>(list:), (uint64_t)v23, v15);
}

uint64_t sub_18797BCFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(v2 - 384);
  static ViewBuilder.buildExpression<A>(_:)(v1, v0, &protocol witness table for PlatformItemListReader<A, B, C>);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 368) + 8);
  v4(v1, v0);
  static ViewBuilder.buildBlock<A>(_:)(v3, v0, *(_QWORD *)(v2 - 280));
  return v4(v3, v0);
}

uint64_t closure #1 in closure #2 in ListPicker.resolvedList<A>(list:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];
  _QWORD v48[2];

  v42 = a2;
  v43 = a5;
  v8 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (id *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v41 = a3;
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v13 = type metadata accessor for ModifiedContent();
  v39 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v38 - v15;
  v38 = type metadata accessor for ModifiedContent();
  v17 = type metadata accessor for ModifiedContent();
  v40 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v38 - v23;
  PlatformItemList.mergedContentItem.getter(a1, (uint64_t)v11);
  v25 = *v11;
  v26 = *v11;
  outlined destroy of PlatformItemList.Item((uint64_t)v11);
  if (v25)
  {
    v27 = objc_msgSend(v26, sel_string);

    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v29;

  }
  else
  {
    v28 = 0;
    v30 = 0xE000000000000000;
  }
  v48[0] = v28;
  v48[1] = v30;
  lazy protocol witness table accessor for type String and conformance String();
  View.navigationTitle<A>(_:)((uint64_t)v48, v41, a4, (uint64_t)v16);
  swift_bridgeObjectRelease();
  LOBYTE(v48[0]) = 1;
  v47[0] = a4;
  v47[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v31 = MEMORY[0x1E0CE2E70];
  v32 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v47);
  v33 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey);
  v46[0] = v32;
  v46[1] = v33;
  v34 = MEMORY[0x18D75FFDC](v31, v13, v46);
  View.navigationBarTitleDisplayMode(_:)(v48, v13, v34, (uint64_t)v20);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v13);
  v45[0] = v34;
  v45[1] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v44[0] = MEMORY[0x18D75FFDC](v31, v38, v45);
  v44[1] = v33;
  v35 = MEMORY[0x18D75FFDC](v31, v17, v44);
  static ViewBuilder.buildExpression<A>(_:)(v20, v17, v35);
  v36 = *(void (**)(char *, uint64_t))(v40 + 8);
  v36(v20, v17);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v24, v17, v43);
  return ((uint64_t (*)(char *, uint64_t))v36)(v24, v17);
}

uint64_t sub_18797C0D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  _QWORD v5[2];
  char v6;

  result = EnvironmentValues.dismiss.getter((uint64_t)v5);
  v3 = v5[1];
  v4 = v6;
  *(_QWORD *)a1 = v5[0];
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return result;
}

uint64_t specialized static ListPickerStyleIsGroupedPredicate.evaluate(inputs:)()
{
  char v0;

  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0
    && (static Semantics.v4_4.getter(), (isLinkedOnOrAfter(_:)() & 1) == 0))
  {
    v0 = 1;
  }
  else
  {
    static Semantics.v4.getter();
    v0 = isLinkedOnOrAfter(_:)() ^ 1;
  }
  return v0 & 1;
}

uint64_t sub_18797C1A8()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in NavigationLinkPickerStyle.Body.value.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  closure #1 in NavigationLinkPickerStyle.Body.value.getter(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t type metadata completion function for NavigationPickerButton.DetailView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationPickerButton.DetailView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned __int8 v27;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;

  v5 = *(_QWORD *)(a3 + 32);
  v4 = *(_QWORD *)(a3 + 40);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64) + v9;
  v11 = *(_QWORD *)(v8 + 64) + 7;
  v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  v13 = *a2;
  *a1 = *a2;
  if ((v9 | v7) > 7 || v12 != 0 || ((v11 + (v10 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    a1 = (uint64_t *)(v13 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16)));
    swift_retain();
  }
  else
  {
    v17 = ~v9;
    v18 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = ((unint64_t)v19 + v7 + 8) & ~v7;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v30 = ((unint64_t)v18 + v7 + 8) & ~v7;
    swift_retain();
    swift_retain();
    v29(v30, v20, v5);
    v21 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v17, v21, v4);
    v22 = (v11 + (((unint64_t)a1 + v10) & v17)) & 0xFFFFFFFFFFFFFFF8;
    v23 = (v11 + v21) & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_QWORD *)v23;
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(_BYTE *)(v23 + 17);
    v27 = *(_BYTE *)(v23 + 16);
    outlined copy of Environment<DismissAction>.Content(*(_QWORD *)v23, v25, v27, v26);
    *(_QWORD *)v22 = v24;
    *(_QWORD *)(v22 + 8) = v25;
    *(_BYTE *)(v22 + 16) = v27;
    *(_BYTE *)(v22 + 17) = v26;
  }
  return a1;
}

uint64_t destroy for NavigationPickerButton.DetailView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = a1 + 15;
  swift_release();
  swift_release();
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 32) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(((v4 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 40) - 8);
  v8 = (*(_QWORD *)(v5 + 64) + a1 + *(unsigned __int8 *)(v7 + 80) + ((v6 + 16) & ~v6)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v8);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return outlined consume of Environment<DismissAction>.Content(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(unsigned __int8 *)(v9 + 16), *(_BYTE *)(v9 + 17));
}

_QWORD *initializeWithCopy for NavigationPickerButton.DetailView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(a3 + 32);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v6 + v10 + 8) & ~v10;
  v12 = ((unint64_t)v7 + v10 + 8) & ~v10;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  swift_retain();
  swift_retain();
  v13(v11, v12, v8);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64) + v15;
  v17 = ((unint64_t)a1 + v16) & ~v15;
  v18 = ((unint64_t)a2 + v16) & ~v15;
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))(v17, v18);
  v19 = *(_QWORD *)(v14 + 64) + 7;
  v20 = (v19 + v17) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v19 + v18) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  LOBYTE(v14) = *(_BYTE *)(v21 + 17);
  LOBYTE(v8) = *(_BYTE *)(v21 + 16);
  outlined copy of Environment<DismissAction>.Content(*(_QWORD *)v21, v23, v8, v14);
  *(_QWORD *)v20 = v22;
  *(_QWORD *)(v20 + 8) = v23;
  *(_BYTE *)(v20 + 16) = v8;
  *(_BYTE *)(v20 + 17) = v14;
  return a1;
}

_QWORD *assignWithCopy for NavigationPickerButton.DetailView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((v9 + 16) & ~v9) + v10 + v12;
  v14 = ((unint64_t)a1 + v13) & ~v12;
  v15 = ((unint64_t)a2 + v13) & ~v12;
  (*(void (**)(unint64_t, unint64_t))(v11 + 24))(v14, v15);
  v16 = *(_QWORD *)(v11 + 64) + 7;
  v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v20 = *(_QWORD *)(v18 + 8);
  LOBYTE(v11) = *(_BYTE *)(v18 + 17);
  LOBYTE(v6) = *(_BYTE *)(v18 + 16);
  outlined copy of Environment<DismissAction>.Content(*(_QWORD *)v18, v20, v6, v11);
  v21 = *(_QWORD *)v17;
  v22 = *(_QWORD *)(v17 + 8);
  v23 = *(_BYTE *)(v17 + 17);
  *(_QWORD *)v17 = v19;
  *(_QWORD *)(v17 + 8) = v20;
  v24 = *(unsigned __int8 *)(v17 + 16);
  *(_BYTE *)(v17 + 16) = v6;
  *(_BYTE *)(v17 + 17) = v11;
  outlined consume of Environment<DismissAction>.Content(v21, v22, v24, v23);
  return a1;
}

_QWORD *initializeWithTake for NavigationPickerButton.DetailView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int16 v19;

  *a1 = *a2;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + v9 + 8) & ~v9, ((unint64_t)v7 + v9 + 8) & ~v9);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((v9 + 16) & ~v9) + v10 + v12;
  v14 = ((unint64_t)a1 + v13) & ~v12;
  v15 = ((unint64_t)a2 + v13) & ~v12;
  (*(void (**)(unint64_t, unint64_t))(v11 + 32))(v14, v15);
  v16 = *(_QWORD *)(v11 + 64) + 7;
  v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_WORD *)(v18 + 16);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_WORD *)(v17 + 16) = v19;
  return a1;
}

_QWORD *assignWithTake for NavigationPickerButton.DetailView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 40) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + v11;
  v13 = ((unint64_t)a1 + v12) & ~v11;
  v14 = ((unint64_t)a2 + v12) & ~v11;
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))(v13, v14);
  v15 = *(_QWORD *)(v10 + 64) + 7;
  v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 16);
  v19 = *(_BYTE *)(v17 + 17);
  v20 = *(_QWORD *)v16;
  v21 = *(_QWORD *)(v16 + 8);
  v22 = *(_BYTE *)(v16 + 17);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  v23 = *(unsigned __int8 *)(v16 + 16);
  *(_BYTE *)(v16 + 16) = v18;
  *(_BYTE *)(v16 + 17) = v19;
  outlined consume of Environment<DismissAction>.Content(v20, v21, v23, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationPickerButton.DetailView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t *v20;
  unint64_t v21;

  v4 = *(_QWORD *)(a3 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7)
    v10 = v7;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = ((v11 + 16) & ~v11) + *(_QWORD *)(v5 + 64) + v12;
  if (v10 >= a2)
  {
    if (v7 >= v9)
    {
      v20 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        return (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v20 + v11 + 8) & ~v11);
      }
      else
      {
        v21 = *v20;
        if (v21 >= 0xFFFFFFFF)
          LODWORD(v21) = -1;
        return (v21 + 1);
      }
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v8 + 48))((v13 + a1) & ~v12, *(unsigned int *)(v8 + 84), v4);
    }
  }
  else
  {
    v14 = ((*(_QWORD *)(v8 + 64) + (v13 & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 18;
    v15 = (a2 - v10 + 0xFFFF) >> (8 * v14);
    if (v14 <= 3)
      v16 = v15 + 1;
    else
      v16 = 2;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18797C9D0 + 4 * byte_187C7306C[v18]))();
  }
}

void storeEnumTagSinglePayload for NavigationPickerButton.DetailView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 40) - 8);
  if (*(_DWORD *)(v7 + 84) <= v6)
    v8 = v6;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = ((*(_QWORD *)(v7 + 64)
       + ((((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + *(_QWORD *)(v5 + 64)
         + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 18;
  if (v8 >= a3)
  {
    v12 = 0u;
    if (v8 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (v9 <= 3)
      v10 = ((a3 - v8 + 0xFFFF) >> (8 * v9)) + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v8 >= a2)
LABEL_20:
      __asm { BR              X5 }
  }
  v13 = ~v8 + a2;
  bzero(a1, v9);
  if (v9 > 3)
    *a1 = v13;
  else
    *(_WORD *)a1 = v13;
  __asm { BR              X11 }
}

void sub_18797CBE0(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
}

void sub_18797CBE8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18797CBF0);
}

void sub_18797CC80()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_18797CC88(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
}

void sub_18797CC90(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
}

void sub_18797CC98(unsigned int a1@<W1>, size_t a2@<X8>)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  *(_WORD *)&v8[v9] = 0;
  if (a1)
  {
    if (v4 >= v3)
    {
      if (v4 >= a1)
        JUMPOUT(0x18797CCA4);
      if ((_DWORD)a2)
      {
        if (a2 <= 3)
          v2 = a2;
        else
          v2 = 4;
        bzero(v8, a2);
        __asm { BR              X10 }
      }
    }
    else
    {
      (*(void (**)(unint64_t))(v5 + 56))((unint64_t)&v8[v6] & v7);
    }
  }
}

void sub_18797CCDC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_18797CCEC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

uint64_t type metadata completion function for ListPicker()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Binding();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListPicker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, unint64_t, uint64_t);
  id v28;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9 | 7;
  v11 = v9 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + ((v9 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 56) & ~(v9 | 7)) > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    v15 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = (_QWORD *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v17 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v18 = v17[3];
    v16[3] = v18;
    v16[4] = v17[4];
    (**(void (***)(_QWORD *, _QWORD *))(v18 - 8))(v16, v17);
    v19 = (void *)v17[5];
    v16[5] = v19;
    v16[6] = v17[6];
    v20 = (_QWORD *)(((unint64_t)v16 + v10 + 56) & ~v10);
    v21 = (_QWORD *)(((unint64_t)v17 + v10 + 56) & ~v10);
    *v20 = *v21;
    v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v22 = *v23;
    v24 = v9 + 8;
    v25 = ((unint64_t)v22 + v9 + 8) & ~v9;
    v26 = ((unint64_t)v23 + v24) & v15;
    v27 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
    v28 = v19;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v27(v25, v26, v5);
  }
  return v4;
}

uint64_t destroy for ListPicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = (a1 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v5);

  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))((v8 + ((((v5 + (v8 | 7) + 56) & ~(v8 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8, v6);
}

uint64_t initializeWithCopy for ListPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  id v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  v10 = v9[3];
  v8[3] = v10;
  v8[4] = v9[4];
  (**(void (***)(_QWORD *, _QWORD *))(v10 - 8))(v8, v9);
  v11 = (void *)v9[5];
  v8[5] = v11;
  v8[6] = v9[6];
  v12 = *(_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = *(_DWORD *)(v13 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v16 = (_QWORD *)(((unint64_t)v8 + v14 + 56) & v15);
  v17 = (_QWORD *)(((unint64_t)v9 + v14 + 56) & v15);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + v14 + 8) & ~v14;
  v21 = ((unint64_t)v19 + v14 + 8) & ~v14;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v23 = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v22(v20, v21, v12);
  return a1;
}

uint64_t assignWithCopy for ListPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (uint64_t *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (uint64_t *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v8, v9);
  v10 = (void *)v9[5];
  v11 = (void *)v8[5];
  v8[5] = (uint64_t)v10;
  v12 = v10;

  v8[6] = v9[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = (unint64_t)v8 + v15 + 56;
  v17 = *(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v18 = (unint64_t)v9 + v15 + 56;
  v19 = (v18 & v17) + 15;
  *(_QWORD *)(v16 & v17) = *(_QWORD *)(v18 & v17);
  v20 = (v16 & v17) + 15;
  swift_retain();
  swift_release();
  v20 &= 0xFFFFFFFFFFFFFFF8;
  v19 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v20 = *(_QWORD *)v19;
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24))((v15 + 8 + v20) & ~v15, (v15 + 8 + v19) & ~v15, v13);
  return a1;
}

uint64_t initializeWithTake for ListPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_OWORD *)(v9 + 16);
  v10 = *(_OWORD *)(v9 + 32);
  v12 = *(_OWORD *)v9;
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 16) = v11;
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)v8 = v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = *(_DWORD *)(v13 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v16 = (_QWORD *)((v14 + 56 + v8) & v15);
  v17 = (_QWORD *)((v14 + 56 + v9) & v15);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))(((unint64_t)v18 + v14 + 8) & ~v14, ((unint64_t)v19 + v14 + 8) & ~v14);
  return a1;
}

uint64_t assignWithTake for ListPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v8);
  v10 = *(_OWORD *)v9;
  v11 = *(_OWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  *(_OWORD *)v8 = v10;
  *(_OWORD *)(v8 + 16) = v11;
  v12 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);

  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = *(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v17 = (_QWORD *)((v15 + 56 + v8) & v16);
  v18 = v15 + 56 + v9;
  v19 = (v18 & v16) + 15;
  *v17 = *(_QWORD *)(v18 & v16);
  swift_release();
  v20 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 &= 0xFFFFFFFFFFFFFFF8;
  *v20 = *(_QWORD *)v19;
  swift_release();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 40))(((unint64_t)v20 + v15 + 8) & ~v15, (v15 + 8 + v19) & ~v15, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListPicker(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v4 <= v6)
    v7 = v6;
  else
    v7 = *(_DWORD *)(v3 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v3 + 64);
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = v9 | 7;
  if (a2 <= v7)
    goto LABEL_27;
  v11 = ((v9 + 16) & ~v9) + *(_QWORD *)(v5 + 64) + ((v9 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 56) & ~v10);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((a2 - v7 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_27:
      if (v4 >= v6)
        return (*(uint64_t (**)(void))(v3 + 48))();
      v18 = (a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v5 + 48))((v9
                                                                      + ((((v18 + v10 + 56) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 8) & ~v9);
      v19 = *(_QWORD *)(v18 + 24);
      if (v19 >= 0xFFFFFFFF)
        LODWORD(v19) = -1;
      return (v19 + 1);
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_27;
LABEL_18:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v7 + v16 + 1;
  if (v11 <= 3)
    v17 = ((v9 + 16) & ~(_DWORD)v9) + *(_DWORD *)(v5 + 64) + ((v9 + ((v8 + 7) & 0xFFFFFFF8) + 56) & ~(_DWORD)v10);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18797D51C + 4 * byte_187C7307F[v17 - 1]))();
}

void storeEnumTagSinglePayload for ListPicker(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (*(_DWORD *)(v5 + 84) <= v7)
    v8 = v7;
  else
    v8 = *(_DWORD *)(v5 + 84);
  v9 = ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64)
     + ((*(unsigned __int8 *)(v6 + 80) + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 56) & ~(*(unsigned __int8 *)(v6 + 80) | 7));
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X7 }
}

void sub_18797D8AC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x18797D87CLL);
}

void sub_18797D8B4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x18797D87CLL);
}

void sub_18797D8C4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x18797D87CLL);
}

_UNKNOWN **sub_18797D8D0()
{
  return &protocol witness table for ViewInputsBinding<A, B>;
}

uint64_t associated type witness table accessor for View.Body : View in ListPicker<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationPickerButton<A, B, C>.DetailView<A1>()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_18797D94C()
{
  type metadata accessor for NavigationPickerButton.DetailView();
}

uint64_t sub_18797D998(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = v2 + ((v4 + 80) & ~v4);
  swift_release();
  swift_release();
  v6 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v5 + *(int *)(v6 + 32), v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5 + *(int *)(a1 + 84));
  outlined consume of Environment<DismissAction>.Content(*(_QWORD *)(v5 + *(int *)(a1 + 88)), *(_QWORD *)(v5 + *(int *)(a1 + 88) + 8), *(unsigned __int8 *)(v5 + *(int *)(a1 + 88) + 16), *(_BYTE *)(v5 + *(int *)(a1 + 88) + 17));
  return swift_deallocObject();
}

void partial apply for closure #1 in NavigationPickerButton.DetailView.body.getter()
{
  type metadata accessor for NavigationPickerButton.DetailView();
}

void sub_18797DA9C()
{
  closure #1 in NavigationPickerButton.DetailView.body.getter();
}

uint64_t type metadata accessor for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ListStyleWriter<GroupedListStyle>, (uint64_t)&type metadata for GroupedListStyle, (uint64_t)&protocol witness table for GroupedListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    lazy protocol witness table accessor for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate;
  if (!lazy protocol witness table cache variable for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListPickerStyleIsGroupedPredicate, &unk_1E1B02F80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyFormStyleContext>, (uint64_t)&type metadata for AnyFormStyleContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ListStyleWriter<InsetGroupedListStyle>, (uint64_t)&type metadata for InsetGroupedListStyle, (uint64_t)&protocol witness table for InsetGroupedListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyFormStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyFormStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyFormStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyFormStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyFormStyleContext>, (uint64_t)&type metadata for AnyFormStyleContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in ListPicker.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in ListPicker.body.getter(v1[6], v1[3], v1[4], v1[5], a1);
}

void partial apply for closure #2 in ListPicker.body.getter()
{
  uint64_t *v0;

  closure #2 in ListPicker.body.getter(v0[6], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in ListPicker.resolvedList<A>(list:)()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in ListPicker.resolvedList<A>(list:));
}

void partial apply for closure #2 in ListPicker.resolvedList<A>(list:)(uint64_t a1@<X8>)
{
  uint64_t *v1;

  closure #2 in ListPicker.resolvedList<A>(list:)(v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1);
}

uint64_t sub_18797DD34()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in ListPicker.resolvedList<A>(list:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return closure #1 in closure #2 in ListPicker.resolvedList<A>(list:)(a1, v2 + ((v4 + 64) & ~v4), v3, *(_QWORD *)(v2 + 56), a2);
}

void *type metadata accessor for ListPickerStyleIsGroupedPredicate()
{
  return &unk_1E1B02F80;
}

uint64_t sub_18797DDD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 56);
  v2 = type metadata accessor for _BindingActionModifier();
  v3 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5540], v2);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

void sub_18797DE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for PickerContentView(255, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v4);
  type metadata accessor for List();
}

void sub_18797DEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_UNKNOWN **a23,uint64_t a24,uint64_t a25,uint64_t a26,_UNKNOWN **a27)
{
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  type metadata accessor for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>();
  v29 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>();
  v30 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  v31 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  v32 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v33 = type metadata accessor for ModifiedContent();
  v34 = type metadata accessor for ModifiedContent();
  v35 = type metadata accessor for ModifiedContent();
  v36 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for List<A, B>, a1);
  v37 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>);
  *(_QWORD *)(v27 - 104) = v36;
  *(_QWORD *)(v27 - 96) = v37;
  v38 = MEMORY[0x1E0CE2E70];
  v39 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v29, v27 - 104);
  v40 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ListStyleWriter<MultimodalListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>);
  *(_QWORD *)(v27 - 120) = v39;
  *(_QWORD *)(v27 - 112) = v40;
  *(_QWORD *)(v27 - 136) = MEMORY[0x18D75FFDC](v38, v30, v27 - 120);
  *(_QWORD *)(v27 - 128) = &protocol witness table for ToggleStyleModifier<A>;
  a26 = MEMORY[0x18D75FFDC](v38, v31, v27 - 136);
  a27 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v41 = MEMORY[0x18D75FFDC](v38, v32, &a26);
  v42 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey);
  a24 = v41;
  a25 = v42;
  a22 = MEMORY[0x18D75FFDC](v38, v33, &a24);
  a23 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  a20 = MEMORY[0x18D75FFDC](v38, v34, &a22);
  a21 = v42;
  MEMORY[0x18D75FFDC](v38, v35, &a20);
  type metadata accessor for PlatformItemListReader();
}

void sub_18797E128()
{
  lazy protocol witness table accessor for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate();
  type metadata accessor for StaticIf();
}

uint64_t sub_18797E14C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[35];

  v3[0] = v1;
  v3[1] = &protocol witness table for PlatformItemListReader<A, B, C>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v3);
}

uint64_t destroy for TableRowView(uint64_t a1)
{
  int v2;
  uint64_t v3;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  v2 = *(unsigned __int8 *)(a1 + 123);
  if (v2 == 2)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 64))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v3 = a1 + 80;
    if ((*(_BYTE *)(a1 + 120) & 1) == 0)
      goto LABEL_11;
    swift_bridgeObjectRelease();
  }
  else if (v2 == 1)
  {
    swift_release();
    if (!*(_BYTE *)(a1 + 96))
    {
      v3 = a1 + 56;
      goto LABEL_11;
    }
  }
  else if (!*(_BYTE *)(a1 + 123))
  {
    swift_bridgeObjectRelease();
    v3 = a1 + 72;
LABEL_11:
    __swift_destroy_boxed_opaque_existential_1(v3);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableRowView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  __int128 v21;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  v10 = *(unsigned __int8 *)(a2 + 123);
  if (v10 == 2)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v13 = *(_QWORD *)(a2 + 64);
    swift_retain();
    if (v13)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v13;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    }
    v18 = (_QWORD *)(a1 + 80);
    v19 = (_QWORD *)(a2 + 80);
    v20 = *(_BYTE *)(a2 + 120);
    if ((v20 & 1) != 0)
    {
      *v18 = *v19;
      swift_bridgeObjectRetain();
    }
    else
    {
      v21 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 104) = v21;
      (**(void (***)(_QWORD *, _QWORD *))(v21 - 8))(v18, v19);
    }
    *(_BYTE *)(a1 + 120) = v20;
    *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
  }
  else if (v10 == 1)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v11 = *(unsigned __int8 *)(a2 + 96);
    swift_retain();
    if (v11)
    {
      v17 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v17;
      *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    }
    else
    {
      v12 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 80) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 56, a2 + 56);
      *(_BYTE *)(a1 + 96) = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v14;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    v15 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v15;
    v16 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
    swift_bridgeObjectRetain();
    v16(a1 + 72, a2 + 72, v15);
  }
  *(_BYTE *)(a1 + 123) = v10;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TableRowView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v12, v13);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 40) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  if (a1 != a2)
  {
    outlined destroy of TableRowView.Storage(a1 + 48);
    v16 = *(unsigned __int8 *)(a2 + 123);
    if (v16 == 2)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v19 = *(_QWORD *)(a2 + 64);
      swift_retain();
      if (v19)
      {
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v25 = *(_OWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 56) = v25;
      }
      v26 = (_QWORD *)(a1 + 80);
      v27 = (_QWORD *)(a2 + 80);
      v28 = *(_BYTE *)(a2 + 120);
      if ((v28 & 1) != 0)
      {
        *v26 = *v27;
        swift_bridgeObjectRetain();
      }
      else
      {
        v29 = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 104) = v29;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        (**(void (***)(_QWORD *, _QWORD *))(v29 - 8))(v26, v27);
      }
      *(_BYTE *)(a1 + 120) = v28;
      *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
      *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
    }
    else if (v16 == 1)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v17 = *(unsigned __int8 *)(a2 + 96);
      swift_retain();
      if (v17)
      {
        v23 = *(_OWORD *)(a2 + 56);
        v24 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
        *(_OWORD *)(a1 + 56) = v23;
        *(_OWORD *)(a1 + 72) = v24;
      }
      else
      {
        v18 = *(_QWORD *)(a2 + 80);
        *(_QWORD *)(a1 + 80) = v18;
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 56, a2 + 56);
        *(_BYTE *)(a1 + 96) = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v20 = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v20;
      v21 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 96) = v21;
      v22 = **(void (***)(uint64_t, uint64_t, uint64_t))(v21 - 8);
      swift_bridgeObjectRetain();
      v22(a1 + 72, a2 + 72, v21);
    }
    *(_BYTE *)(a1 + 123) = v16;
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of TableRowView.Storage(uint64_t a1)
{
  destroy for TableRowView.Storage(a1);
  return a1;
}

uint64_t assignWithTake for TableRowView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *((_BYTE *)a2 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of TableRowView.Storage(a1 + 48);
    v14 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v14;
    *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    v15 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 64) = v15;
  }
  *(_QWORD *)(a1 + 128) = a2[16];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableRowView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 128);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TableRowView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 128) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for TableRowView.Storage(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(a1 + 75);
  if (v2 >= 3)
    v2 = *(_DWORD *)a1 + 3;
  if (v2 == 2)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 16))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v4 = a1 + 32;
    if ((*(_BYTE *)(a1 + 72) & 1) != 0)
      return swift_bridgeObjectRelease();
  }
  else if (v2 == 1)
  {
    result = swift_release();
    if (*(_BYTE *)(a1 + 48))
      return result;
    v4 = a1 + 8;
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = a1 + 24;
  }
  return __swift_destroy_boxed_opaque_existential_1(v4);
}

uint64_t initializeWithCopy for TableRowView.Storage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _OWORD *v5;
  int v6;
  __int128 v7;
  char v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  __int128 v19;

  v4 = *(unsigned __int8 *)(a2 + 75);
  if (v4 >= 3)
    v4 = *(_DWORD *)a2 + 3;
  if (v4 == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v9 = (_OWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a2 + 16);
    swift_retain();
    if (v10)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = v10;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *v9 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    }
    v16 = (_QWORD *)(a1 + 32);
    v17 = (_QWORD *)(a2 + 32);
    v18 = *(_BYTE *)(a2 + 72);
    if ((v18 & 1) != 0)
    {
      *v16 = *v17;
      swift_bridgeObjectRetain();
    }
    else
    {
      v19 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 56) = v19;
      (**(void (***)(_QWORD *, _QWORD *))(v19 - 8))(v16, v17);
    }
    *(_BYTE *)(a1 + 72) = v18;
    *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
    v8 = 2;
  }
  else if (v4 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v5 = (_OWORD *)(a2 + 8);
    v6 = *(unsigned __int8 *)(a2 + 48);
    swift_retain();
    if (v6)
    {
      v15 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *v5;
      *(_OWORD *)(a1 + 24) = v15;
      *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 32) = v7;
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, a2 + 8);
      *(_BYTE *)(a1 + 48) = 0;
    }
    v8 = 1;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v12 = a2 + 24;
    v13 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
    swift_bridgeObjectRetain();
    v14(a1 + 24, v12, v13);
    v8 = 0;
  }
  *(_BYTE *)(a1 + 75) = v8;
  return a1;
}

uint64_t assignWithCopy for TableRowView.Storage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;

  if (a1 == a2)
    return a1;
  v4 = *(unsigned __int8 *)(a1 + 75);
  if (v4 >= 3)
    v4 = *(_DWORD *)a1 + 3;
  if (v4 == 2)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 16))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v5 = a1 + 32;
    if ((*(_BYTE *)(a1 + 72) & 1) == 0)
      goto LABEL_13;
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v4 != 1)
    {
      swift_bridgeObjectRelease();
      v5 = a1 + 24;
      goto LABEL_13;
    }
    swift_release();
    if (!*(_BYTE *)(a1 + 48))
    {
      v5 = a1 + 8;
LABEL_13:
      __swift_destroy_boxed_opaque_existential_1(v5);
    }
  }
  v6 = *(unsigned __int8 *)(a2 + 75);
  if (v6 >= 3)
    v6 = *(_DWORD *)a2 + 3;
  if (v6 == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v10 = *(_QWORD *)(a2 + 16);
    swift_retain();
    if (v10)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v17 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v17;
    }
    v18 = (_QWORD *)(a1 + 32);
    v19 = (_QWORD *)(a2 + 32);
    v20 = *(_BYTE *)(a2 + 72);
    if ((v20 & 1) != 0)
    {
      *v18 = *v19;
      swift_bridgeObjectRetain();
    }
    else
    {
      v21 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v21;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      (**(void (***)(_QWORD *, _QWORD *))(v21 - 8))(v18, v19);
    }
    *(_BYTE *)(a1 + 72) = v20;
    *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
    *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
    v9 = 2;
  }
  else if (v6 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v7 = *(unsigned __int8 *)(a2 + 48);
    swift_retain();
    if (v7)
    {
      v15 = *(_OWORD *)(a2 + 8);
      v16 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
      *(_OWORD *)(a1 + 8) = v15;
      *(_OWORD *)(a1 + 24) = v16;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v8;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 8, a2 + 8);
      *(_BYTE *)(a1 + 48) = 0;
    }
    v9 = 1;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v11;
    v12 = a2 + 24;
    v13 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
    swift_bridgeObjectRetain();
    v14(a1 + 24, v12, v13);
    v9 = 0;
  }
  *(_BYTE *)(a1 + 75) = v9;
  return a1;
}

uint64_t assignWithTake for TableRowView.Storage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1 == a2)
    return a1;
  v4 = *(unsigned __int8 *)(a1 + 75);
  if (v4 >= 3)
    v4 = *(_DWORD *)a1 + 3;
  if (v4 == 2)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 16))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v5 = a1 + 32;
    if ((*(_BYTE *)(a1 + 72) & 1) == 0)
      goto LABEL_13;
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v4 != 1)
    {
      swift_bridgeObjectRelease();
      v5 = a1 + 24;
      goto LABEL_13;
    }
    swift_release();
    if (!*(_BYTE *)(a1 + 48))
    {
      v5 = a1 + 8;
LABEL_13:
      __swift_destroy_boxed_opaque_existential_1(v5);
    }
  }
  v6 = *(unsigned __int8 *)(a2 + 75);
  if (v6 >= 3)
    v6 = *(_DWORD *)a2 + 3;
  if (v6 == 2)
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 59) = *(_OWORD *)(a2 + 59);
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
  }
  else if (v6 == 1)
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    LOBYTE(v6) = 1;
  }
  else
  {
    LOBYTE(v6) = 0;
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  *(_BYTE *)(a1 + 75) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for TableRowView.Storage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 76))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 75);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TableRowView.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 60) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 76) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 76) = 0;
    if (a2)
      *(_BYTE *)(result + 75) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TableRowView.Storage(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 75);
  if (result >= 3)
    return (*(_DWORD *)a1 + 3);
  return result;
}

uint64_t destructiveInjectEnumTag for TableRowView.Storage(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_OWORD *)(result + 59) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 75) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TableRowView.Storage()
{
  return &type metadata for TableRowView.Storage;
}

uint64_t associated type witness table accessor for View.Body : View in TableRowView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized View.onDrop(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  _QWORD v11[6];

  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for DropOntoConfiguration?, (uint64_t)&type metadata for DropOntoConfiguration);
  if (v11[0])
  {
    swift_bridgeObjectRetain();
    outlined destroy of DropOntoConfiguration((uint64_t)v11);
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for DropOntoConfiguration?, (uint64_t)&type metadata for DropOntoConfiguration);
  }
  v11[3] = &type metadata for DropConfigurationDelegate;
  v11[4] = &protocol witness table for DropConfigurationDelegate;
  v11[0] = swift_allocObject();
  outlined init with copy of SwiftUIAnySortComparator?(a1, v11[0] + 16, (unint64_t *)&lazy cache variable for type metadata for DropOntoConfiguration?, (uint64_t)&type metadata for DropOntoConfiguration);
  outlined init with copy of TableColumnList((uint64_t)v11, (uint64_t)v10);
  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v7, (uint64_t (*)(_QWORD))type metadata accessor for DropDelegate?);
  outlined init with take of OptionalBinaryInteger(v10, (uint64_t)&v7);
  v5 = v8;
  *(_OWORD *)(a2 + 544) = v7;
  *(_OWORD *)(a2 + 560) = v5;
  *(_QWORD *)(a2 + 576) = v9;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<T);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t TableRowView.expandButton(expanded:tinted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (**v20)();
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE *v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[3];
  char v31;
  uint64_t v32;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Button<RotatingDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator, (uint64_t)&type metadata for RotatingDisclosureIndicator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Button);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (_WORD *)((char *)v30 - v13);
  type metadata accessor for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>();
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  *(_BYTE *)(v19 + 32) = a3;
  *v14 = 256;
  v20 = (uint64_t (**)())((char *)v14 + *(int *)(v11 + 36));
  *v20 = partial apply for closure #1 in TableRowView.expandButton(expanded:tinted:);
  v20[1] = (uint64_t (*)())v19;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  if (a2)
  {
    v30[1] = a1;
    v30[2] = a2;
    v31 = a3 & 1;
    swift_retain();
    outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v22 = v21;
    swift_retain();
    swift_retain();
    MEMORY[0x18D75B9C8](&v32, v22);
    swift_release();
    swift_release();
    swift_release();
    v23 = v32;
  }
  else
  {
    v23 = 0;
  }
  v24 = (char *)v14 + *(int *)(v11 + 40);
  *v24 = a4 & 1;
  v24[1] = v23;
  outlined init with copy of Button<RotatingDisclosureIndicator>((uint64_t)v14, (uint64_t)v18);
  outlined destroy of Button<RotatingDisclosureIndicator>((uint64_t)v14);
  KeyPath = swift_getKeyPath();
  v26 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, a5, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  v28 = a5 + *(int *)(v27 + 36);
  *(_QWORD *)v28 = KeyPath;
  *(_BYTE *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = v26;
  *(_BYTE *)(v28 + 24) = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
}

uint64_t closure #1 in TableRowView.expandButton(expanded:tinted:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    swift_retain();
    swift_retain();
    specialized static RotatingDisclosureIndicator.toggle(_:)();
    return outlined consume of Binding<NavigationSplitViewColumn>?(v3, a2);
  }
  return result;
}

void *TableRowView.body.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t KeyPath;
  double v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v30;
  char v31;
  double v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  _QWORD v40[2];
  char v41;
  uint64_t v42;
  _BYTE v43[192];
  uint64_t v44;
  _BOOL8 v45;
  char v46;
  _QWORD v47[27];
  int v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  double v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  double __src[75];

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 128);
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v4 = __src[0];
  v5 = __src[1];
  v61 = 0u;
  v62 = 0u;
  v60 = 0u;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v31 = LOBYTE(__src[0]);
  v32 = __src[1];
  v30 = LOWORD(__src[2]);
  v6 = __src[3];
  v7 = __src[5];
  v33 = LOWORD(__src[6]);
  v34 = LOBYTE(__src[4]);
  v37 = __src[7];
  v59[1] = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v59[0] = v3;
  v47[0] = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v40[0] = static HorizontalAlignment.center.getter();
  v40[1] = 0;
  v41 = 1;
  v35 = *(_QWORD *)&__src[1];
  v36 = *(_QWORD *)&__src[0];
  closure #1 in TableRowView.body.getter(v1, *(uint64_t *)&__src[0], *(uint64_t *)&__src[1], SLOBYTE(__src[2]), (uint64_t)&v42, __src[0]);
  v8 = *(_QWORD *)v1;
  v9 = *(_BYTE *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v2, *(_BYTE *)(v2 + 8));
  v10 = specialized Environment.wrappedValue.getter(v8, v9);
  outlined consume of Environment<Bool>.Content(v8, v9);
  KeyPath = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v40, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo);
  v44 = KeyPath;
  v45 = (v10 & 1) == 0;
  v46 = v10 & 1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo);
  if (v4 == 0.0)
  {
    v12 = v6;
    v13 = 1;
    v14 = static Alignment.center.getter();
    v16 = v18;
    v17 = 0.0;
  }
  else
  {
    v12 = v6;
    v13 = *(_QWORD *)&v5 == 0;
    swift_retain();
    if (v5 != 0.0)
      swift_release();
    v14 = static Alignment.center.getter();
    v16 = v15;
    swift_retain();
    swift_retain();
    v17 = v5;
  }
  v19 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v43, (uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Lab);
  v48 = 0;
  v49 = v19;
  v50 = 0;
  v51 = v14;
  v52 = v16;
  v38 = *(_QWORD *)&v4;
  v53 = v4;
  v54 = v17;
  v55 = v13;
  v57 = 0;
  v56 = 0;
  v58 = -2;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Lab);
  v20 = v12;
  if (v12 == 0.0)
  {
    v21 = 0.0;
    v22 = 0.0;
    v23 = 0.0;
  }
  else
  {
    v12 = v32;
    *(_QWORD *)&v21 = v31 & 1;
    *(_QWORD *)&v22 = v30 & 0x1FF;
    v23 = MEMORY[0x1E0DEE9D8];
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v47, (uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingM);
  __src[38] = v20;
  __src[39] = v21;
  __src[40] = v12;
  __src[41] = v22;
  __src[42] = v23;
  memset(&__src[43], 0, 80);
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingM);
  if (v37 == 0.0)
  {
    v25 = 0;
    v24 = 0.0;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v24 = v7;
    v25 = v34 & 1 | 0x100;
    v26 = v33 & 0x1FF;
    v27 = MEMORY[0x1E0DEE9D8];
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)__src, (uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _A);
  v63 = v37;
  v64 = v25;
  v65 = v24;
  v66 = v26;
  v67 = v27;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _A);
  __src[0] = *(double *)(v2 + 128);
  v28 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v28 != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  specialized View.onDrop(_:)((uint64_t)v47, (uint64_t)__src);
  outlined consume of Binding<NavigationSplitViewColumn>?(v36, v35);
  swift_release();
  swift_release();
  outlined consume of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(v38);
  outlined destroy of AccessibilityTableContext?((uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for DropOntoConfiguration?, (uint64_t)&type metadata for DropOntoConfiguration);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<T);
  return memcpy(a1, __src, 0x248uLL);
}

uint64_t closure #1 in TableRowView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[48];
  _BYTE v58[41];
  __int128 v59;
  _BYTE v60[32];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int16 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int16 v79;
  _BYTE v80[41];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  _BYTE v86[25];
  char v87;
  unsigned __int8 v88;
  char v89;

  outlined init with copy of TableRowView.Storage(a1 + 48, (uint64_t)&v81);
  if (v89)
  {
    if (v89 != 1)
    {
      v41 = v81;
      v42 = v82;
      v43 = v83;
      v44 = v84;
      v45 = v87;
      v46 = v88;
      *(_OWORD *)v80 = v85;
      *(_OWORD *)&v80[16] = *(_OWORD *)v86;
      *(_OWORD *)&v80[25] = *(_OWORD *)&v86[9];
      v69 = (unint64_t)static HorizontalAlignment.center.getter();
      LOBYTE(v70) = 1;
      closure #2 in closure #1 in TableRowView.body.getter(a1, v46, v42, v43, v44, (uint64_t)v80, v45, v41, (uint64_t)&v70 + 8);
      outlined consume of Binding<[SwiftUIAnySortComparator]>?(v42, v43);
      swift_release();
      KeyPath = swift_getKeyPath();
      v48 = swift_getKeyPath();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v69, (uint64_t)&v59, (uint64_t (*)(_QWORD))type metadata accessor for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>);
      *((_QWORD *)&v66 + 1) = KeyPath;
      LOBYTE(v67) = 0;
      *((_QWORD *)&v67 + 1) = v48;
      v68 = 0;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v69, (uint64_t (*)(_QWORD))type metadata accessor for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>);
      v77 = v66;
      v78 = v67;
      v73 = v62;
      v74 = v63;
      v75 = v64;
      v76 = v65;
      v69 = v59;
      v70 = *(_OWORD *)v60;
      v79 = v68;
      v71 = *(_OWORD *)&v60[16];
      v72 = v61;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v69, a5, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>);
      *(_BYTE *)(a5 + 162) = 1;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v69, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>);
      return outlined destroy of TableColumnCollection((uint64_t)v80);
    }
    v12 = v81;
    outlined init with take of Binding<SearchFieldState>((uint64_t)&v82, (uint64_t)&v69, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    v13 = *(_QWORD *)a1;
    v14 = *(_BYTE *)(a1 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a1, v14);
    v15 = specialized Environment.wrappedValue.getter(v13, v14);
    outlined consume of Environment<Bool>.Content(v13, v14);
    if ((v15 & 1) != 0)
    {
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v69, (uint64_t)&v59, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
      if (v60[24] == 255)
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v59, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
        memset(v80, 0, 40);
        v80[40] = -1;
      }
      else
      {
        outlined init with copy of AccessibilityTableContext((uint64_t)&v59, (uint64_t)v58);
        if (v58[40] == 2)
        {
          *(_QWORD *)v80 = *(_QWORD *)v58;
          *(_QWORD *)&v80[8] = 1;
          v80[40] = 2;
        }
        else
        {
          outlined init with copy of AccessibilityTableContext((uint64_t)&v59, (uint64_t)v80);
          outlined destroy of AccessibilityTableContext((uint64_t)v58);
        }
        outlined destroy of AccessibilityTableContext((uint64_t)&v59);
      }
    }
    else
    {
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v69, (uint64_t)v80, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    }
    memset(v58, 0, 40);
    v58[40] = -1;
    if (v80[40] == 255)
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v80, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    }
    else
    {
      outlined init with take of AccessibilityTableContext((uint64_t)v80, (uint64_t)&v59);
      outlined destroy of AccessibilityTableContext?((uint64_t)v58, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
      outlined init with take of AccessibilityTableContext((uint64_t)&v59, (uint64_t)v58);
    }
    v59 = *(_OWORD *)v58;
    *(_OWORD *)v60 = *(_OWORD *)&v58[16];
    *(_OWORD *)&v60[9] = *(_OWORD *)&v58[25];
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
    v49 = swift_allocObject();
    *(_BYTE *)(v49 + 16) = 0;
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    swift_retain();
    *(_QWORD *)v58 = Dictionary.init(minimumCapacity:)();
    static AccessibilityAttachment.properties(_:)();
    swift_bridgeObjectRelease();
    v50 = *(_OWORD *)v80;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v50;
    swift_retain();
    swift_release();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityTraitSet>, MEMORY[0x1E0CE4FF0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v52 = swift_allocObject();
    AccessibilityTraitSet.init(traits:)();
    v53 = *(_QWORD *)(v52 + 32);
    swift_setDeallocating();
    swift_deallocClassInstance();
    swift_beginAccess();
    swift_retain();
    swift_retain();
    specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v51 + 16, 0, v53);
    swift_endAccess();
    swift_release();
    swift_release();
    swift_beginAccess();
    swift_retain();
    swift_retain();
    specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v51 + 16, 0x4000000040);
    swift_endAccess();
    swift_release();
    swift_release();
    if (v60[24] == 255)
      goto LABEL_22;
    result = outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v59, (uint64_t)v58, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    if (v58[40] != 255)
    {
      outlined init with take of AccessibilityTableContext((uint64_t)v58, (uint64_t)v80);
      swift_beginAccess();
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v80, (uint64_t)v57, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
      swift_retain();
      swift_retain();
      specialized AccessibilityProperties.subscript.setter((uint64_t)v57);
      swift_endAccess();
      swift_release();
      swift_release();
      outlined destroy of AccessibilityTableContext?((uint64_t)v80, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
LABEL_22:
      outlined destroy of AccessibilityTableCellModifier<AnyView>((uint64_t)&v59);
      swift_release();
      *(_QWORD *)a5 = v12;
      *(_QWORD *)(a5 + 8) = v51;
      *(_QWORD *)(a5 + 16) = v49;
      *(_OWORD *)(a5 + 24) = 0u;
      *(_OWORD *)(a5 + 40) = 0u;
      *(_OWORD *)(a5 + 56) = 0u;
      *(_OWORD *)(a5 + 72) = 0u;
      *(_QWORD *)(a5 + 88) = 0;
      *(_BYTE *)(a5 + 96) = 1;
      *(_BYTE *)(a5 + 162) = 0;
      return outlined destroy of AccessibilityTableContext?((uint64_t)&v69, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    }
    __break(1u);
  }
  else
  {
    v16 = v81;
    v55 = v82;
    v54 = v83;
    outlined init with take of Any(&v84, &v59);
    v56 = static VerticalAlignment.center.getter();
    v17 = *(_QWORD *)a1;
    v18 = *(_BYTE *)(a1 + 8);
    v19 = v16;
    swift_bridgeObjectRetain();
    outlined copy of Environment<Bool>.Content(v17, v18);
    v20 = a5;
    v21 = specialized Environment.wrappedValue.getter(v17, v18);
    outlined consume of Environment<Bool>.Content(v17, v18);
    if ((v21 & 1) != 0)
      v22 = 1;
    else
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    v23 = specialized Collection.prefix(_:)(v22, v19);
    v25 = v24;
    v27 = v26;
    v29 = v28;
    *(_QWORD *)v80 = v23;
    *(_QWORD *)&v80[8] = v24;
    *(_QWORD *)&v80[16] = v26;
    *(_QWORD *)&v80[24] = v28;
    outlined init with copy of Any((uint64_t)&v59, (uint64_t)v58);
    outlined init with copy of TableRowView(a1, (uint64_t)&v69);
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = v23;
    *(_QWORD *)(v30 + 24) = v25;
    *(_QWORD *)(v30 + 32) = v27;
    *(_QWORD *)(v30 + 40) = v29;
    outlined init with take of Any(v58, (_OWORD *)(v30 + 48));
    *(double *)(v30 + 80) = a6;
    *(_QWORD *)(v30 + 88) = v55;
    *(_BYTE *)(v30 + 96) = v54;
    *(_QWORD *)(v30 + 104) = a2;
    *(_QWORD *)(v30 + 112) = a3;
    *(_BYTE *)(v30 + 120) = a4;
    v31 = v76;
    *(_OWORD *)(v30 + 224) = v75;
    *(_OWORD *)(v30 + 240) = v31;
    *(_QWORD *)(v30 + 256) = v77;
    v32 = v72;
    *(_OWORD *)(v30 + 160) = v71;
    *(_OWORD *)(v30 + 176) = v32;
    v33 = v74;
    *(_OWORD *)(v30 + 192) = v73;
    *(_OWORD *)(v30 + 208) = v33;
    v34 = v70;
    *(_OWORD *)(v30 + 128) = v69;
    *(_OWORD *)(v30 + 144) = v34;
    swift_unknownObjectRetain();
    outlined copy of Binding<NavigationSplitViewColumn>?(a2, a3);
    type metadata accessor for ArraySlice<TableCellFormula>(0);
    type metadata accessor for UUID();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArraySlice<TableCellFormula> and conformance ArraySlice<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArraySlice<TableCellFormula>, MEMORY[0x1E0DEBF80]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TableCellFormula and conformance TableCellFormula, (uint64_t (*)(uint64_t))type metadata accessor for TableCellFormula, (uint64_t)&protocol conformance descriptor for TableCellFormula);
    ForEach<>.init(_:content:)();
    swift_bridgeObjectRelease();
    v35 = v73;
    v37 = v69;
    v36 = v70;
    v39 = v71;
    v38 = v72;
    *(_QWORD *)v20 = v56;
    *(_OWORD *)(v20 + 8) = xmmword_187BF9840;
    *(_OWORD *)(v20 + 24) = v37;
    *(_OWORD *)(v20 + 40) = v36;
    *(_OWORD *)(v20 + 56) = v39;
    *(_OWORD *)(v20 + 72) = v38;
    *(_QWORD *)(v20 + 88) = v35;
    *(_BYTE *)(v20 + 96) = 0;
    *(_BYTE *)(v20 + 162) = 0;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
  }
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v3 >= result)
      v4 = result;
    else
      v4 = *(_QWORD *)(a2 + 16);
    if (result)
      v5 = v4;
    else
      v5 = 0;
    if (v3 >= v5)
    {
      type metadata accessor for TableCellFormula();
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in TableRowView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, unsigned __int8 a11, char *a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  char *v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  int v67;
  uint64_t (*v68)(_QWORD);
  char v69;
  _QWORD *v70;
  char *v71;
  char v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t (*v85)(_QWORD);
  char v86;
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  char v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  double v124;
  double v125;
  char v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  unint64_t v152;
  void (*v153)(char *, uint64_t, uint64_t, double);
  uint64_t v154;
  uint64_t v155;

  LODWORD(v139) = a7;
  v140 = a5;
  v141 = a6;
  v152 = (unint64_t)a4;
  v155 = a3;
  v137 = a2;
  v147 = a8;
  type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v144 = (uint64_t *)((char *)&v133 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>(0);
  v142 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v145 = (uint64_t)&v133 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>(0);
  v143 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v133 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, v23);
  MEMORY[0x1E0C80A78](v24, v25);
  v146 = (uint64_t)&v133 - v26;
  v27 = type metadata accessor for UUID();
  v28 = *(_QWORD **)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v135 = (char *)&v133 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (UUID?, UUID?)();
  v32 = v31;
  MEMORY[0x1E0C80A78](v31, v33);
  v151 = (char *)&v133 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v133 - v37;
  type metadata accessor for UUID?(0);
  MEMORY[0x1E0C80A78](v39, v40);
  v134 = (uint64_t)&v133 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v43);
  v149 = (char *)&v133 - v44;
  MEMORY[0x1E0C80A78](v45, v46);
  v150 = (char *)&v133 - v47;
  MEMORY[0x1E0C80A78](v48, v49);
  v51 = (char *)&v133 - v50;
  MEMORY[0x1E0C80A78](v52, v53);
  v55 = (char *)&v133 - v54;
  v58 = MEMORY[0x1E0C80A78](v56, v57);
  v60 = (char *)&v133 - v59;
  v153 = (void (*)(char *, uint64_t, uint64_t, double))v28[2];
  v154 = a1;
  v153((char *)&v133 - v59, a1, v27, v58);
  v61 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v28[7];
  v62 = 1;
  result = v61(v60, 0, 1, v27);
  v148 = v152 >> 1;
  if (v152 >> 1 != v155)
  {
    if ((uint64_t)(v152 >> 1) <= v155)
    {
      __break(1u);
      goto LABEL_39;
    }
    v64 = type metadata accessor for TableCellFormula();
    ((void (*)(char *, uint64_t, uint64_t))v153)(v55, v137 + *(_QWORD *)(*(_QWORD *)(v64 - 8) + 72) * v155, v27);
    v62 = 0;
  }
  v136 = v22;
  v61(v55, v62, 1, v27);
  v138 = v32;
  v65 = (uint64_t)&v38[*(int *)(v32 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v60, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v55, v65, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
  v152 = (unint64_t)v28;
  v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v28[6];
  if (v66((uint64_t)v38, 1, v27) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
    v67 = v66(v65, 1, v27);
    if (v67 == 1)
      v68 = (uint64_t (*)(_QWORD))type metadata accessor for UUID?;
    else
      v68 = (uint64_t (*)(_QWORD))type metadata accessor for (UUID?, UUID?);
    if (v67 == 1)
      v69 = -1;
    else
      v69 = 0;
  }
  else
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v38, (uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
    if (v66(v65, 1, v27) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
      (*(void (**)(char *, uint64_t))(v152 + 8))(v51, v27);
      v69 = 0;
      v68 = (uint64_t (*)(_QWORD))type metadata accessor for (UUID?, UUID?);
    }
    else
    {
      v70 = (_QWORD *)v152;
      v71 = v135;
      (*(void (**)(char *, uint64_t, uint64_t))(v152 + 32))(v135, v65, v27);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v72 = dispatch thunk of static Equatable.== infix(_:_:)();
      v73 = (void (*)(char *, uint64_t))v70[1];
      v74 = v71;
      v69 = v72;
      v73(v74, v27);
      v68 = (uint64_t (*)(_QWORD))type metadata accessor for UUID?;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
      v73(v51, v27);
    }
  }
  v75 = (uint64_t)v151;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v38, v68);
  v76 = (uint64_t)v150;
  ((void (*)(void))v153)();
  v77 = 1;
  result = v61((char *)v76, 0, 1, v27);
  v78 = (uint64_t)v149;
  v79 = (_QWORD *)v152;
  v80 = v138;
  if (v148 == v155)
  {
LABEL_17:
    LODWORD(v153) = v139 & 1;
    v151 = a12;
    LODWORD(v148) = a11;
    v155 = a9;
    v139 = a10;
    v61((char *)v78, v77, 1, v27);
    v83 = v75 + *(int *)(v80 + 48);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v76, v75, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v78, v83, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
    if (v66(v75, 1, v27) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v78, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v76, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
      v84 = v66(v83, 1, v27);
      if (v84 == 1)
        v85 = (uint64_t (*)(_QWORD))type metadata accessor for UUID?;
      else
        v85 = (uint64_t (*)(_QWORD))type metadata accessor for (UUID?, UUID?);
      if (v84 == 1)
        v86 = -1;
      else
        v86 = 0;
    }
    else
    {
      v87 = v134;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v75, v134, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
      if (v66(v83, 1, v27) == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v78, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v76, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
        ((void (*)(uint64_t, uint64_t))v79[1])(v87, v27);
        v86 = 0;
        v85 = (uint64_t (*)(_QWORD))type metadata accessor for (UUID?, UUID?);
      }
      else
      {
        v88 = v135;
        ((void (*)(char *, uint64_t, uint64_t))v79[4])(v135, v83, v27);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
        v86 = dispatch thunk of static Equatable.== infix(_:_:)();
        v89 = v79;
        v90 = v69;
        v91 = v87;
        v92 = (void (*)(char *, uint64_t))v89[1];
        v92(v88, v27);
        v85 = (uint64_t (*)(_QWORD))type metadata accessor for UUID?;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v78, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v76, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
        v93 = v91;
        v69 = v90;
        v92((char *)v93, v27);
      }
    }
    v94 = (uint64_t)v136;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v75, v85);
    v95 = (int *)type metadata accessor for TableCellFormula();
    v96 = v154;
    v97 = (*(uint64_t (**)(uint64_t))(v154 + v95[9]))(v140);
    v98 = static VerticalAlignment.center.getter();
    v99 = (uint64_t)v144;
    *v144 = v98;
    *(_QWORD *)(v99 + 8) = 0;
    *(_BYTE *)(v99 + 16) = 1;
    type metadata accessor for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>();
    closure #1 in closure #1 in closure #1 in closure #1 in TableRowView.body.getter(v69 & 1, v97, v69 & 1, v141, (char)v153, v96, v86 & 1, v155, v99 + *(int *)(v100 + 44), v139, v148);
    if (one-time initialization token for tableColumnContentPadding != -1)
      swift_once();
    EdgeInsets.init(_all:)();
    v102 = v101;
    v104 = v103;
    v106 = v105;
    v108 = v107;
    v109 = v145;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v99, v145, (uint64_t (*)(_QWORD))type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>);
    v110 = v109 + *(int *)(v142 + 36);
    *(_BYTE *)v110 = 2;
    *(_QWORD *)(v110 + 8) = v102;
    *(_QWORD *)(v110 + 16) = v104;
    *(_QWORD *)(v110 + 24) = v106;
    *(_QWORD *)(v110 + 32) = v108;
    *(_BYTE *)(v110 + 40) = 0;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v99, (uint64_t (*)(_QWORD))type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>);
    EdgeInsets.init(_all:)();
    v112 = v111;
    v114 = v113;
    v116 = v115;
    v118 = v117;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v109, v94, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>);
    v119 = v94 + *(int *)(v143 + 36);
    *(_BYTE *)v119 = 8;
    *(_QWORD *)(v119 + 8) = v112;
    *(_QWORD *)(v119 + 16) = v114;
    *(_QWORD *)(v119 + 24) = v116;
    *(_QWORD *)(v119 + 32) = v118;
    *(_BYTE *)(v119 + 40) = 0;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v109, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>);
    v120 = v95[8];
    v121 = v96 + v95[7];
    v122 = *(double *)v121;
    v123 = *(_QWORD *)(v121 + 8);
    v125 = *(double *)(v121 + 16);
    v124 = *(double *)(v121 + 24);
    v126 = *(_BYTE *)(v121 + 32);
    v127 = *(unsigned __int8 *)(v96 + v120);
    v128 = v147;
    if (v127)
    {
      if (v127 == 1)
      {
        v129 = static Alignment.center.getter();
        if ((v126 & 1) != 0)
          goto LABEL_36;
LABEL_34:
        v131 = v123 & 1;
LABEL_37:
        v132 = v146;
        specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v125, v126, v122, v131, v124, v126, 0.0, 1, v146, 0.0, 1, 0.0, 1, v129, v130);
        swift_release();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v94, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>);
        return outlined init with take of Binding<SearchFieldState>(v132, v128, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, (uint64_t)type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, MEMORY[0x1E0CE35F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>);
      }
      v129 = static Alignment.trailing.getter();
      if ((v126 & 1) == 0)
        goto LABEL_34;
    }
    else
    {
      v129 = static Alignment.leading.getter();
      if ((v126 & 1) == 0)
        goto LABEL_34;
    }
LABEL_36:
    v124 = 0.0;
    v122 = 0.0;
    v125 = 0.0;
    v131 = 1;
    goto LABEL_37;
  }
  if (v148 > v155)
  {
    v81 = v148 - 1;
    v82 = type metadata accessor for TableCellFormula();
    ((void (*)(uint64_t, uint64_t, uint64_t))v153)(v78, v137 + *(_QWORD *)(*(_QWORD *)(v82 - 8) + 72) * v81, v27);
    v77 = 0;
    goto LABEL_17;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in TableRowView.body.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  _BYTE v74[72];
  _QWORD v75[5];
  unsigned __int8 v76;
  uint64_t v77;
  _BYTE v78[41];
  __int128 v79;
  _BYTE v80[25];
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;

  v61 = a8;
  v64 = a7;
  v72 = a3;
  type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  MEMORY[0x1E0C80A78](v17, v18);
  v60 = (uint64_t)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v59 = (uint64_t)&v58 - v22;
  type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?(0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v73 = (uint64_t)&v58 - v29;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  if ((a1 & 1) != 0)
  {
    static Alignment.center.getter();
    v30 = 1;
    _FrameLayout.init(width:height:alignment:)();
    v31 = v81;
    v32 = v82;
    v33 = v83;
    v34 = v84;
    v35 = v85;
    v36 = v86;
  }
  v65 = v36;
  v66 = v35;
  v67 = v34;
  v68 = v33;
  v69 = v32;
  v70 = v31;
  v71 = v30;
  v37 = (uint64_t *)(a6 + *(int *)(type metadata accessor for TableCellFormula() + 40));
  v38 = *v37;
  v39 = *((_BYTE *)v37 + 8);
  memset(v78, 0, 40);
  v78[40] = -1;
  if ((a5 & 1) == 0 && (v39 & 1) == 0)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v78, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    *(_QWORD *)v78 = a4;
    *(_QWORD *)&v78[8] = v38;
    v78[40] = 1;
  }
  v79 = *(_OWORD *)v78;
  *(_OWORD *)v80 = *(_OWORD *)&v78[16];
  *(_OWORD *)&v80[9] = *(_OWORD *)&v78[25];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  v40 = swift_allocObject();
  *(_BYTE *)(v40 + 16) = 0;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  swift_retain();
  v75[0] = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  v41 = *(_OWORD *)v78;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = v41;
  swift_retain();
  swift_release();
  AccessibilityTraitSet.init(traits:)();
  v43 = v77;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v42 + 16, 0, v43);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v42 + 16, 0x4000000040);
  swift_endAccess();
  swift_release();
  swift_release();
  if (v80[24] != 255)
  {
    result = outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v79, (uint64_t)v75, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    if (v76 == 255)
    {
      __break(1u);
      return result;
    }
    outlined init with take of AccessibilityTableContext((uint64_t)v75, (uint64_t)v78);
    swift_beginAccess();
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v78, (uint64_t)v74, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    swift_retain();
    swift_retain();
    specialized AccessibilityProperties.subscript.setter((uint64_t)v74);
    swift_endAccess();
    swift_release();
    swift_release();
    outlined destroy of AccessibilityTableContext?((uint64_t)v78, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  }
  v62 = a1;
  v63 = a2;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v79, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityTableCellModifier<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>>);
  if ((v64 & 1) != 0 && a10)
  {
    v45 = v61;
    outlined copy of Binding<NavigationSplitViewColumn>?(v61, a10);
    swift_retain();
    swift_retain();
    v46 = v59;
    TableRowView.expandButton(expanded:tinted:)(v45, a10, a11, 1, v59);
    outlined consume of Binding<NavigationSplitViewColumn>?(v45, a10);
    v47 = v60;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v46, v60, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    *(_QWORD *)v26 = 0;
    v26[8] = 1;
    type metadata accessor for (Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v47, (uint64_t)&v26[*(int *)(v48 + 48)], (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    swift_release();
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v46, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v26, 0, 1, v49);
    v50 = v73;
    outlined init with take of TableCellFormula((uint64_t)v26, v73, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?);
  }
  else
  {
    type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>(0);
    v50 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v73, 1, 1, v51);
  }
  v52 = v71;
  v53 = v72 & 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v50, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = v52;
  v54 = v69;
  *(_QWORD *)(a9 + 16) = v70;
  *(_QWORD *)(a9 + 24) = v54;
  v55 = v67;
  *(_QWORD *)(a9 + 32) = v68;
  *(_QWORD *)(a9 + 40) = v55;
  v56 = v65;
  *(_QWORD *)(a9 + 48) = v66;
  *(_QWORD *)(a9 + 56) = v56;
  *(_BYTE *)(a9 + 64) = (v62 & 1) == 0;
  *(_QWORD *)(a9 + 72) = v63;
  *(_BYTE *)(a9 + 80) = v53;
  *(_QWORD *)(a9 + 88) = v42;
  *(_QWORD *)(a9 + 96) = v40;
  type metadata accessor for (ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v26, a9 + *(int *)(v57 + 64), (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v50, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?);
  swift_release();
  swift_release();
  return swift_release();
}

__n128 closure #2 in closure #1 in TableRowView.body.getter@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  char v17;
  int v18;
  __n128 result;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  __n128 v51;
  __int128 v52;
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[8];
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  __int16 v75;
  char v76;

  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_BYTE *)(a1 + 24);
  outlined copy of Environment<Bool>.Content(v16, v17);
  v18 = specialized Environment.wrappedValue.getter(v16, v17);
  outlined consume of Environment<Bool>.Content(v16, v17);
  outlined init with copy of TableRowView(a1, (uint64_t)&v68);
  if (v18 == 2)
  {
    outlined destroy of TableRowView((uint64_t)&v68);
  }
  else
  {
    v20 = v68;
    v21 = v69;
    outlined copy of Environment<Bool>.Content(v68, v69);
    v22 = specialized Environment.wrappedValue.getter(v20, v21);
    outlined consume of Environment<Bool>.Content(v20, v21);
    outlined destroy of TableRowView((uint64_t)&v68);
    if ((v22 & 1) == 0 && (a2 & 1) != 0)
    {
      outlined init with copy of TableColumnCollection(a6, (uint64_t)v57);
      v54 = a3;
      v55 = a4;
      v56 = a5;
      *(_WORD *)((char *)&v63 + 1) = *(_WORD *)(&a7 - 1) & 0x100;
      outlined init with copy of TableHeaderView((uint64_t)&v54, (uint64_t)&v68);
      v76 = 0;
      outlined copy of Binding<[SwiftUIAnySortComparator]>?(a3, a4);
      outlined destroy of TableHeaderView((uint64_t)&v54);
      outlined init with take of TableCellFormula((uint64_t)&v68, a9, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?);
      return result;
    }
  }
  if (a8)
  {
    KeyPath = swift_getKeyPath();
    v24 = swift_getKeyPath();
    v25 = swift_getKeyPath();
    v68 = KeyPath;
    v69 = 0;
    v70 = v24;
    v71 = 0;
    v72 = v25;
    v73 = 0;
    v74 = a8;
    v75 = a7 & 1;
    outlined init with copy of TableColumnCollection(a6, (uint64_t)&v52);
    v26 = swift_allocObject();
    v27 = v53[0];
    *(_OWORD *)(v26 + 16) = v52;
    *(_OWORD *)(v26 + 32) = v27;
    *(_OWORD *)(v26 + 41) = *(_OWORD *)((char *)v53 + 9);
    *(_QWORD *)(v26 + 64) = a3;
    *(_QWORD *)(v26 + 72) = a4;
    *(_QWORD *)(v26 + 80) = a5;
    swift_retain();
    outlined copy of Binding<[SwiftUIAnySortComparator]>?(a3, a4);
    type metadata accessor for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableSectionHeaderView and conformance TableSectionHeaderView, (uint64_t)&protocol witness table for _ContentShapeModifier<A>);
    swift_retain();
    View.onTapGesture(count:perform:)();
    swift_release();
    v28 = v70;
    LOBYTE(KeyPath) = v71;
    v29 = v72;
    v30 = v73;
    outlined consume of Environment<Bool>.Content(v68, v69);
    outlined consume of Environment<Bool>.Content(v28, KeyPath);
    outlined consume of Environment<Bool>.Content(v29, v30);
    swift_release();
    v31 = v54;
    v32 = v55;
    v33 = v56;
    v34 = v57[0];
    v48 = v58;
    v47 = v59;
    v46 = v60;
    v44 = v62;
    v45 = v61;
    v51 = v64;
    v42 = v65;
    v43 = v63;
    v41 = v66;
    v40 = v67;
    v35 = *(_QWORD *)a1;
    LOBYTE(KeyPath) = *(_BYTE *)(a1 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a1, KeyPath);
    LOBYTE(v29) = specialized Environment.wrappedValue.getter(v35, KeyPath);
    outlined consume of Environment<Bool>.Content(v35, KeyPath);
    outlined init with copy of TableRowView(a1, (uint64_t)&v68);
    if ((v29 & 1) != 0)
    {
      swift_release();
      outlined destroy of TableRowView((uint64_t)&v68);
      LOBYTE(v36) = 0;
    }
    else
    {
      v37 = v72;
      v38 = v73;
      outlined copy of Environment<Bool>.Content(v72, v73);
      v39 = specialized Environment.wrappedValue.getter(v37, v38);
      swift_release();
      outlined consume of Environment<Bool>.Content(v37, v38);
      outlined destroy of TableRowView((uint64_t)&v68);
      v36 = a2 | ((v39 & 0x10000u) >> 16);
    }
    *(_QWORD *)a9 = v31;
    *(_BYTE *)(a9 + 8) = v32;
    *(_QWORD *)(a9 + 16) = v33;
    *(_BYTE *)(a9 + 24) = v34;
    *(_QWORD *)(a9 + 32) = v48;
    *(_BYTE *)(a9 + 40) = v47;
    *(_QWORD *)(a9 + 48) = v46;
    *(_BYTE *)(a9 + 56) = v45;
    *(_BYTE *)(a9 + 57) = v44;
    *(_QWORD *)(a9 + 64) = v43;
    result = v51;
    *(__n128 *)(a9 + 72) = v51;
    *(_QWORD *)(a9 + 88) = v42;
    *(_QWORD *)(a9 + 96) = v41;
    *(_DWORD *)(a9 + 104) = v40;
    *(_BYTE *)(a9 + 108) = v36 & 1;
    *(_BYTE *)(a9 + 109) = 1;
  }
  else
  {
    *(_QWORD *)(a9 + 96) = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a9 + 64) = 0u;
    *(_OWORD *)(a9 + 80) = 0u;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(_DWORD *)(a9 + 104) = 0;
    *(_WORD *)(a9 + 108) = -256;
  }
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in TableRowView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[7];
  uint64_t v22;

  type metadata accessor for TableColumnCollection.Entry?(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Collection.first.getter((uint64_t)v10);
  v11 = type metadata accessor for TableColumnCollection.Entry(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TableColumnCollection.Entry?);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0;
  }
  else
  {
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v10[*(int *)(v11 + 44)], (uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for TableColumnCollection.Entry);
    if (*((_QWORD *)&v14 + 1))
    {
      v21[4] = v17;
      v21[5] = v18;
      v21[6] = v19;
      v22 = v20;
      v21[0] = v13;
      v21[1] = v14;
      v21[2] = v15;
      v21[3] = v16;
      sort(_:comparator:)(a2, a3, a4, (uint64_t)v21);
      return outlined destroy of SwiftUIAnySortComparator((uint64_t)v21);
    }
  }
  return outlined destroy of AccessibilityTableContext?((uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
}

uint64_t TableRowView.reuseIdentifier.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3[2];
  uint64_t v4;
  uint64_t v5;
  char v6;

  outlined init with copy of TableRowView.Storage(v0 + 48, (uint64_t)&v2);
  if (v6)
  {
    if (v6 == 1)
    {
      swift_release();
      outlined destroy of AccessibilityTableContext?((uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
      return 1;
    }
    else
    {
      swift_release();
      outlined consume of Binding<[SwiftUIAnySortComparator]>?(v3[0], v3[1]);
      outlined destroy of TableColumnCollection((uint64_t)&v5);
      return 2;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v4);
    return 0;
  }
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TableRowView()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<T(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestur, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<T, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGestur, (uint64_t)&protocol witness table for SwipeActionsModifier<A>);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t outlined init with copy of TableRowView.Storage(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TableRowView.Storage(a2, a1);
  return a2;
}

uint64_t TableRowForegroundStyleModifier.ChildEnvironment.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  v6 = *Value;
  if ((*(_BYTE *)AGGraphGetValue() & 1) != 0)
  {
    swift_retain();
    result = swift_retain();
  }
  else
  {
    swift_retain_n();
    swift_retain_n();
    ShapeStyle.copyStyle(name:in:foregroundStyle:)();
    swift_release();
    swift_release();
    result = EnvironmentValues.defaultForegroundStyle.setter();
    v3 = v6;
  }
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TableRowForegroundStyleModifier.ChildEnvironment@<X0>(_QWORD *a1@<X8>)
{
  return TableRowForegroundStyleModifier.ChildEnvironment.value.getter(a1);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance TableRowForegroundStyleModifier()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<TableRowForegroundStyleModifier>, (uint64_t)&type metadata for TableRowForegroundStyleModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TableRowForegroundStyleModifier.ChildEnvironment and conformance TableRowForegroundStyleModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _ViewInputs.environment.setter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TableRowForegroundStyleModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  int v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TableRowForegroundStyleModifier()
{
  lazy protocol witness table accessor for type TableRowForegroundStyleModifier and conformance TableRowForegroundStyleModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance TableRowForegroundStyleModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t key path setter for EnvironmentValues.activeContextMenu : EnvironmentValues()
{
  return EnvironmentValues.activeContextMenu.setter();
}

void type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Labe)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleW, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelSt();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Labe);
  }
}

void type metadata accessor for _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>)
  {
    type metadata accessor for HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, AccessibilityAttachmentModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>);
  }
}

void type metadata accessor for HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>)
  {
    type metadata accessor for ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>();
    lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>> and conformance <> ForEach<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE7698]);
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>);
  }
}

void type metadata accessor for ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>)
  {
    type metadata accessor for ArraySlice<TableCellFormula>(255);
    type metadata accessor for UUID();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArraySlice<TableCellFormula> and conformance ArraySlice<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArraySlice<TableCellFormula>, MEMORY[0x1E0DEBF80]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v0, MEMORY[0x1E0CB09C8]);
    v1 = type metadata accessor for ForEach();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>);
  }
}

void type metadata accessor for ArraySlice<TableCellFormula>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ArraySlice<TableCellFormula>, (uint64_t (*)(uint64_t))type metadata accessor for TableCellFormula, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEBF30]);
}

void type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2BC0]);
    v3[1] = MEMORY[0x1E0CE35E0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, MEMORY[0x1E0CE73D0]);
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>)
  {
    type metadata accessor for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<TableHeaderLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableHeaderLabelStyle and conformance TableHeaderLabelStyle, (uint64_t)&type metadata for TableHeaderLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>);
  }
}

void type metadata accessor for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>)
  {
    type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?(255);
    lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>? and conformance <A> A?, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?, (uint64_t (*)(void))lazy protocol witness table accessor for type _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>> and conformance <> _ConditionalContent<A, B>, MEMORY[0x1E0CE83F8]);
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>);
  }
}

void type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>();
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>);
  }
}

void type metadata accessor for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type TableHeaderView and conformance TableHeaderView();
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for _AllowsHitTestingModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableSectionHeaderView and conformance TableSectionHeaderView, (uint64_t)&protocol witness table for _ContentShapeModifier<A>);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<TapGesture>> and conformance AddGestureModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>, MEMORY[0x1E0CE41B8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableSectionHeaderView and conformance TableSectionHeaderView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableSectionHeaderView and conformance TableSectionHeaderView;
  if (!lazy protocol witness table cache variable for type TableSectionHeaderView and conformance TableSectionHeaderView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableSectionHeaderView, &type metadata for TableSectionHeaderView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableSectionHeaderView and conformance TableSectionHeaderView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableHeaderLabelStyle and conformance TableHeaderLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableHeaderLabelStyle and conformance TableHeaderLabelStyle;
  if (!lazy protocol witness table cache variable for type TableHeaderLabelStyle and conformance TableHeaderLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableHeaderLabelStyle, &type metadata for TableHeaderLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableHeaderLabelStyle and conformance TableHeaderLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelSt()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, L;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, L)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleW, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>> and conformance <> _ConditionalContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, L);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, MEMORY[0x1E0CE73D0]);
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, MEMORY[0x1E0CE7518], a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v8[0] = MEMORY[0x1E0CE7508];
    v8[1] = a4;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, MEMORY[0x1E0CE74B8]);
    v3[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<TableHeaderLabelStyle> and conformance LabelStyleWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<TableHeaderLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<TableHeaderLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<TableHeaderLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<TableHeaderLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableHeaderLabelStyle and conformance TableHeaderLabelStyle, (uint64_t)&type metadata for TableHeaderLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TableHeaderLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

uint64_t sub_18798266C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.activeContextMenu.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1879826AC()
{
  return EnvironmentValues.activeContextMenu.setter();
}

void type metadata accessor for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Lab(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingMo, (uint64_t (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Int?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Int?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingM(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _Al, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Lab, (uint64_t (*)(uint64_t))type metadata accessor for ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

uint64_t type metadata accessor for ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?>;
  if (!lazy cache variable for type metadata for ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?>)
  {
    type metadata accessor for ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E0CE7518], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>> and conformance ZStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, MEMORY[0x1E0CE74D8]);
    lazy protocol witness table accessor for type AnyView? and conformance <A> A?();
    type metadata accessor for ContextMenuPreviewModifier();
  }
  return result;
}

void type metadata accessor for ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>)
  {
    type metadata accessor for ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>();
    lazy protocol witness table accessor for type ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for ZStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>);
  }
}

void type metadata accessor for ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E0CE7518], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE3238], MEMORY[0x1E0CE3228], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type AnyView? and conformance <A> A?();
    v3[1] = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _A(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<Ta, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingM, (uint64_t (*)(uint64_t))type metadata accessor for SwipeActionsModifier<AnyView?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for SwipeActionsModifier<AnyView?>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for SwipeActionsModifier<AnyView?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E0CE7518], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type AnyView? and conformance <A> A?();
    v6 = type metadata accessor for SwipeActionsModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for SwipeActionsModifier<AnyView?>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<T(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _A, (uint64_t (*)(uint64_t))type metadata accessor for SwipeActionsModifier<AnyView?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

uint64_t sub_187982A78()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  }
  return swift_deallocObject();
}

uint64_t outlined destroy of AccessibilityTableCellModifier<AnyView>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for AccessibilityTableCellModifier<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityTableCellModifier);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_187982B14()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  if (*(_QWORD *)(v0 + 112))
  {
    swift_release();
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 128), *(_BYTE *)(v0 + 136));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 144), *(_BYTE *)(v0 + 152));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 160), *(_BYTE *)(v0 + 168));
  v1 = *(unsigned __int8 *)(v0 + 251);
  if (v1 == 2)
  {
    swift_release();
    if (*(_QWORD *)(v0 + 192))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    v2 = v0 + 208;
    if ((*(_BYTE *)(v0 + 248) & 1) == 0)
      goto LABEL_13;
    swift_bridgeObjectRelease();
  }
  else if (v1 == 1)
  {
    swift_release();
    if (!*(_BYTE *)(v0 + 224))
    {
      v2 = v0 + 184;
      goto LABEL_13;
    }
  }
  else if (!*(_BYTE *)(v0 + 251))
  {
    swift_bridgeObjectRelease();
    v2 = v0 + 200;
LABEL_13:
    __swift_destroy_boxed_opaque_existential_1(v2);
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in TableRowView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in TableRowView.body.getter(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD **)(v2 + 40), v2 + 48, *(_QWORD *)(v2 + 88), *(unsigned __int8 *)(v2 + 96), a2, *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112), *(_BYTE *)(v2 + 120), (char *)(v2 + 128));
}

void type metadata accessor for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>(255);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>);
  }
}

void type metadata accessor for AccessibilityTableCellModifier<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityTableCellModifier<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>>)
  {
    type metadata accessor for _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, MEMORY[0x1E0CE4108]);
    v6 = type metadata accessor for AccessibilityTableCellModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTableCellModifier<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>>);
  }
}

uint64_t sub_187982D2C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
  {
    swift_release();
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableRowView.expandButton(expanded:tinted:)()
{
  uint64_t v0;

  return closure #1 in TableRowView.expandButton(expanded:tinted:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t outlined init with copy of Button<RotatingDisclosureIndicator>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Button<RotatingDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator, (uint64_t)&type metadata for RotatingDisclosureIndicator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Button<RotatingDisclosureIndicator>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for Button<RotatingDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator, (uint64_t)&type metadata for RotatingDisclosureIndicator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of TableRowView(uint64_t a1)
{
  destroy for TableRowView(a1);
  return a1;
}

uint64_t sub_187982E78()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v0 + 72))
      return swift_deallocObject();
    goto LABEL_5;
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (*(_QWORD *)(v0 + 72))
  {
LABEL_5:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in TableRowView.body.getter()
{
  uint64_t *v0;

  return closure #1 in closure #2 in closure #1 in TableRowView.body.getter((uint64_t)(v0 + 2), v0[8], v0[9], v0[10]);
}

uint64_t outlined init with copy of TableHeaderView(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TableHeaderView(a2, a1);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGestur()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_Ended, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _A, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>,, (uint64_t)&protocol witness table for SwipeActionsModifier<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>,()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGestu;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGestu)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingM(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTesti();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?>, (uint64_t)&protocol conformance descriptor for ContextMenuPreviewModifier<A, B>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGestu);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTesti()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHi;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHi)
  {
    type metadata accessor for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Lab(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier, (uint64_t (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo, MEMORY[0x1E0CE74B8]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Int?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHi);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TableRowForegroundStyleModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1879830AC + 4 * byte_187C733C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1879830E0 + 4 * byte_187C733C0[v4]))();
}

uint64_t sub_1879830E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879830E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1879830F0);
  return result;
}

uint64_t sub_1879830FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187983104);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187983108(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187983110(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TableRowForegroundStyleModifier()
{
  return &type metadata for TableRowForegroundStyleModifier;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>,()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectan;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectan)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, Add, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<T);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestur, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<T, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGestur, (uint64_t)&protocol witness table for SwipeActionsModifier<A>);
    v3[1] = &protocol witness table for DropModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectan);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in TableRowForegroundStyleModifier()
{
  return &protocol witness table for TableRowForegroundStyleModifier;
}

unint64_t lazy protocol witness table accessor for type TableRowForegroundStyleModifier and conformance TableRowForegroundStyleModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableRowForegroundStyleModifier and conformance TableRowForegroundStyleModifier;
  if (!lazy protocol witness table cache variable for type TableRowForegroundStyleModifier and conformance TableRowForegroundStyleModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowForegroundStyleModifier, &type metadata for TableRowForegroundStyleModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowForegroundStyleModifier and conformance TableRowForegroundStyleModifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for TableRowForegroundStyleModifier.ChildEnvironment()
{
  return &type metadata for TableRowForegroundStyleModifier.ChildEnvironment;
}

uint64_t View.badgedViewStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BadgedViewStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for BadgedViewStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BadgedViewStyleModifier);
}

uint64_t BadgeViewStyleConfiguration.badgeText.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Locale();
  MEMORY[0x1E0C80A78](v1, v2);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CAF4C0]);
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = 0;
  v6 = v0[2];
  if (v6 >> 1 != 0xFFFFFFFF)
  {
    v5 = *v0;
    if ((v6 & 0x8000000000000000) != 0)
    {
      outlined copy of Text.Storage(v5, v0[1], v6 & 1);
      swift_bridgeObjectRetain();
    }
    else
    {
      static Locale.autoupdatingCurrent.getter();
      lazy protocol witness table accessor for type Int and conformance Int();
      IntegerFormatStyle.init(locale:)();
      lazy protocol witness table accessor for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>();
      return Text.init<A>(_:format:)();
    }
  }
  return v5;
}

unint64_t instantiation function for generic protocol witness table for BadgeViewStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BadgeViewStyleConfiguration.Content, &type metadata for BadgeViewStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BadgeViewStyleConfiguration.Content, &type metadata for BadgeViewStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in BadgeViewStyleConfiguration.Content()
{
  return &protocol witness table for BadgeViewStyleConfiguration.Content;
}

uint64_t dispatch thunk of BadgedViewStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for BadgeViewStyleConfiguration()
{
  return &type metadata for BadgeViewStyleConfiguration;
}

ValueMetadata *type metadata accessor for BadgeViewStyleConfiguration.Content()
{
  return &type metadata for BadgeViewStyleConfiguration.Content;
}

uint64_t sub_18798356C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for BadgedViewStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for BadgedViewStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t getEnumTagSinglePayload for BadgedViewStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18798367C + 4 * byte_187C736B0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for BadgedViewStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in BadgedViewStyleModifier<A>()
{
  return &protocol witness table for BadgedViewStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in BadgedViewStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t BadgedViewStyleModifier.styleBody(configuration:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(char *, uint64_t);
  _OWORD v20[2];

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v20 - v14;
  v16 = a1[1];
  v20[0] = *a1;
  v20[1] = v16;
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(v5 + 24))(v20, v6, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for BadgedViewStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BadgedViewStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BadgedViewStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for ResolvedBadgedView()
{
  return &type metadata for ResolvedBadgedView;
}

uint64_t sub_187983A54()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

unint64_t lazy protocol witness table accessor for type BadgedViewStyleModifier<AutomaticBadgedViewStyle> and conformance BadgedViewStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type BadgedViewStyleModifier<AutomaticBadgedViewStyle> and conformance BadgedViewStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type BadgedViewStyleModifier<AutomaticBadgedViewStyle> and conformance BadgedViewStyleModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<AutomaticBadgedViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle, (uint64_t)&type metadata for AutomaticBadgedViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for BadgedViewStyleModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BadgedViewStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgedViewStyleModifier<AutomaticBadgedViewStyle> and conformance BadgedViewStyleModifier<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedBadgedView(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedBadgedView()
{
  lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView();
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PlatformItemCollection()
{
  return &type metadata for PlatformItemCollection;
}

uint64_t assignWithCopy for PlatformItemListGenerator(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

uint64_t assignWithTake for PlatformItemListGenerator(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemListGenerator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 108))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItemListGenerator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 108) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 108) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

BOOL specialized Collection.isEmpty.getter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) != 0 || AGGraphGetWeakValue())
    v2 = swift_bridgeObjectRetain();
  else
    v2 = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease();
  return v3 == 0;
}

BOOL specialized Collection.isEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  __int128 v8[2];
  char v9;

  outlined init with copy of TableColumnCollection.Backing(v0, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v1 = *(_QWORD *)(*(_QWORD *)&v8[0] + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v8, (uint64_t)v5);
    v2 = v6;
    v3 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return v1 == 0;
}

BOOL specialized Collection.isEmpty.getter(_BOOL8 result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
  {
    v6 = 0;
    return v6 == v1;
  }
  v2 = result + 48 * v1;
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  v5 = __OFADD__(v3, v4);
  v1 = v3 + v4;
  if (!v5)
  {
    v6 = *(_QWORD *)(result + 72);
    return v6 == v1;
  }
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.indices.getter(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0 || AGGraphGetWeakValue())
    swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized RandomAccessCollection<>.indices.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  __int128 v8[2];
  char v9;

  outlined init with copy of TableColumnCollection.Backing(v0, (uint64_t)v8);
  if (v9 == 1)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  outlined init with take of OptionalBinaryInteger(v8, (uint64_t)v5);
  v1 = v6;
  v2 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if ((v3 & 0x8000000000000000) == 0)
    return 0;
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.indices.getter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result + 48 * v1;
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (__OFADD__(v3, v4))
    goto LABEL_7;
  result = *(_QWORD *)(result + 72);
  if (v3 + v4 < result)
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  char v16;
  __int128 v17;
  char v18;
  _BYTE v19[24];
  __int128 v20;
  char v21;
  __int128 v22;
  char v23;
  _BYTE v24[24];
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  int v29;
  char v30;

  result = specialized Dictionary.startIndex.getter(a2);
  if ((v8 & 1) != 0)
    goto LABEL_17;
  v9 = v7;
  v10 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v10 != (_DWORD)v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  v11 = result;
  v12 = 1 << *(_BYTE *)(a2 + 32);
  if (v12 < result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v20 = *(_OWORD *)a1;
  v21 = *(_BYTE *)(a1 + 16);
  v22 = v20;
  v23 = v21;
  outlined init with take of TableCellFormula((uint64_t)&v22, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant);
  result = outlined init with take of TableCellFormula((uint64_t)v24, (uint64_t)&v25, (uint64_t (*)(_QWORD))type metadata accessor for [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant);
  if ((v27 & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v26 != (_DWORD)v10)
    goto LABEL_13;
  if (v25 < v11)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v15 = *(_OWORD *)(a1 + 24);
  v16 = *(_BYTE *)(a1 + 40);
  v17 = v15;
  v18 = v16;
  outlined init with take of TableCellFormula((uint64_t)&v17, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant);
  result = outlined init with take of TableCellFormula((uint64_t)v19, (uint64_t)&v28, (uint64_t (*)(_QWORD))type metadata accessor for [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant);
  if ((v30 & 1) == 0)
  {
    v13 = v28;
    v14 = v29;
    outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v11, v9, 0);
    result = outlined consume of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant(v12, v10, 0);
    if ((_DWORD)v10 == v14)
    {
      if (v12 >= v13)
      {
        *(_QWORD *)(a3 + 48) = a2;
        *(_OWORD *)a3 = v20;
        *(_BYTE *)(a3 + 16) = v21;
        *(_OWORD *)(a3 + 24) = v15;
        *(_BYTE *)(a3 + 40) = v16;
        swift_bridgeObjectRetain();
        return outlined retain of Range<SpatialEventCollection.Index>(a1);
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  __int128 v15[2];
  char v16;

  v4 = v3;
  outlined init with copy of TableColumnCollection.Backing(v3, (uint64_t)v15);
  if (v16 == 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)&v15[0] + 16);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v15, (uint64_t)v12);
    v10 = v13;
    v11 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    if (v8 < 0)
    {
      __break(1u);
      goto LABEL_8;
    }
  }
  if (a1 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v8 >= a2)
  {
    result = outlined init with copy of TableColumnCollection(v4, (uint64_t)(a3 + 2));
    *a3 = a1;
    a3[1] = a2;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  v6 = result;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v8 < 0)
    {
      __break(1u);
      goto LABEL_8;
    }
  }
  else
  {
    v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v6 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v8 >= a2)
  {
    a4[1] = a2;
    a4[2] = a3;
    *a4 = v6;
    return swift_bridgeObjectRetain();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  const void *v2;
  uint64_t result;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[25];
  _BYTE v13[16];
  _BYTE v14[16];
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  *(_OWORD *)v12 = *a1;
  *(_OWORD *)&v12[9] = *(_OWORD *)((char *)a1 + 9);
  result = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(a1);
  if ((v8 & 1) != 0)
    goto LABEL_10;
  v9 = result;
  v10 = v6;
  v11 = v7;
  outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Int?);
  result = outlined init with take of TableCellFormula((uint64_t)v13, (uint64_t)&v17, (uint64_t (*)(_QWORD))type metadata accessor for Int?);
  if ((v18 & 1) != 0)
    goto LABEL_11;
  if (v17 >= v9)
  {
    if (v9 >= v17)
    {
      outlined init with take of TableCellFormula((uint64_t)&v12[16], (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>.Index.Kind);
      result = outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>.Index.Kind);
      if (v16)
      {
        if (v16 == 1)
        {
          if (v11 != 1 || v15 >= v10)
            goto LABEL_11;
          __break(1u);
LABEL_10:
          if ((v12[8] & 1) != 0)
            goto LABEL_11;
          goto LABEL_20;
        }
      }
      else
      {
        if (!v11)
        {
LABEL_18:
          if (v15 >= v10)
            goto LABEL_11;
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        if (v11 == 2)
          goto LABEL_11;
        __break(1u);
      }
      if (v11 == 2 && !v10)
        goto LABEL_11;
      __break(1u);
      goto LABEL_18;
    }
LABEL_11:
    memcpy(a2 + 4, v2, 0x1A0uLL);
    *a2 = *(_OWORD *)v12;
    *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v12[9];
    a2[2] = a1[2];
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)a1 + 41);
    return outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v2);
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t *PlatformItemCollection.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *result;
  uint64_t v8;

  if ((a3 & 1) != 0)
  {
LABEL_4:
    result = (uint64_t *)swift_bridgeObjectRetain();
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  result = (uint64_t *)AGGraphGetWeakValue();
  if (result)
  {
    a2 = *result;
    goto LABEL_4;
  }
  a2 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_8;
LABEL_5:
  if (*(_QWORD *)(a2 + 16) > a1)
  {
    v8 = type metadata accessor for PlatformItemList.Item();
    outlined init with copy of PlatformItemList.Item(a2+ ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a4);
    return (uint64_t *)swift_bridgeObjectRelease();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4;
  uint64_t *WeakValue;
  unint64_t v7;

  v4 = result + a2;
  if (__OFADD__(result, a2))
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((a4 & 1) != 0)
    goto LABEL_5;
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    a3 = *WeakValue;
LABEL_5:
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  a3 = MEMORY[0x1E0DEE9D8];
LABEL_6:
  v7 = *(_QWORD *)(a3 + 16);
  result = swift_bridgeObjectRelease();
  if (v4 <= v7)
    return v4;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  __int128 v10[2];
  char v11;

  v3 = result + a2;
  if (__OFADD__(result, a2))
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of TableColumnCollection.Backing(v2, (uint64_t)v10);
    if ((v11 & 1) != 0)
    {
      v4 = *(_QWORD *)(*(_QWORD *)&v10[0] + 16);
      result = swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(v10, (uint64_t)v7);
      v5 = v8;
      v6 = v9;
      __swift_project_boxed_opaque_existential_1(v7, v8);
      v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    }
    if ((v3 & 0x8000000000000000) == 0 && v4 >= v3)
      return v3;
  }
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v6 = a3 + 48 * v5;
    v8 = *(_QWORD *)(v6 + 16);
    v7 = *(_QWORD *)(v6 + 24);
    v3 = __OFADD__(v7, v8);
    v9 = v7 + v8;
    if (v3)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    v10 = *(_QWORD *)(a3 + 72);
    if (v9 < result)
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    v10 = 0;
    if (result > 0)
      goto LABEL_10;
  }
  if (result < v10)
    goto LABEL_10;
  return result;
}

uint64_t PlatformItemListGenerator.itemList.getter()
{
  uint64_t v0;

  if (*(_DWORD *)(v0 + 104) == *MEMORY[0x1E0CFED28])
    return 0;
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall PlatformItemListGenerator.updateValue()()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[76];
  uint64_t v43;

  v2 = v1;
  v3 = v0;
  v43 = *MEMORY[0x1E0C80C00];
  if (!AGGraphGetOutputValue())
  {
    v24 = *v1;
    v38 = *((_DWORD *)v1 + 2);
    v37 = v1[2];
    v5 = *((_DWORD *)v1 + 6);
    v6 = v1[4];
    v7 = *((_DWORD *)v1 + 10);
    v8 = *((_DWORD *)v1 + 11);
    v9 = *((_DWORD *)v1 + 12);
    v36 = *((_DWORD *)v1 + 13);
    v34 = v1[8];
    v35 = v1[7];
    v32 = *((_DWORD *)v1 + 19);
    v33 = *((_DWORD *)v1 + 18);
    v30 = *((_DWORD *)v1 + 21);
    v31 = *((_DWORD *)v1 + 20);
    v28 = *((_DWORD *)v1 + 23);
    v29 = *((_DWORD *)v1 + 22);
    v26 = *((_BYTE *)v1 + 100);
    v27 = *((_DWORD *)v1 + 24);
    v25 = *((_DWORD *)v1 + 26);
    v10 = v3[2];
    v11 = v3[4];
    v12 = v3[5];
    v39 = v3[3];
    *(_QWORD *)&v40 = v24;
    DWORD2(v40) = v38;
    *(_QWORD *)&v41 = v37;
    DWORD2(v41) = v5;
    *(_QWORD *)v42 = v6;
    *(_DWORD *)&v42[8] = v7;
    *(_DWORD *)&v42[12] = v8;
    *(_DWORD *)&v42[16] = v9;
    *(_DWORD *)&v42[20] = v36;
    *(_QWORD *)&v42[24] = v35;
    *(_QWORD *)&v42[32] = v34;
    *(_DWORD *)&v42[40] = v33;
    *(_DWORD *)&v42[44] = v32;
    *(_DWORD *)&v42[48] = v31;
    *(_DWORD *)&v42[52] = v30;
    *(_DWORD *)&v42[56] = v29;
    *(_DWORD *)&v42[60] = v28;
    *(_DWORD *)&v42[64] = v27;
    v42[68] = v26;
    *(_DWORD *)&v42[72] = v25;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v10;
    *(_QWORD *)(v13 + 24) = v39;
    *(_QWORD *)(v13 + 32) = v11;
    *(_QWORD *)(v13 + 40) = v12;
    *(_QWORD *)(v13 + 48) = v24;
    *(_DWORD *)(v13 + 56) = v38;
    *(_QWORD *)(v13 + 64) = v37;
    *(_DWORD *)(v13 + 72) = v5;
    *(_QWORD *)(v13 + 80) = v6;
    *(_DWORD *)(v13 + 88) = v7;
    *(_DWORD *)(v13 + 92) = v8;
    *(_DWORD *)(v13 + 96) = v9;
    *(_DWORD *)(v13 + 100) = v36;
    *(_QWORD *)(v13 + 104) = v35;
    *(_QWORD *)(v13 + 112) = v34;
    *(_DWORD *)(v13 + 120) = v33;
    *(_DWORD *)(v13 + 124) = v32;
    *(_DWORD *)(v13 + 128) = v31;
    *(_DWORD *)(v13 + 132) = v30;
    *(_DWORD *)(v13 + 136) = v29;
    *(_DWORD *)(v13 + 140) = v28;
    *(_DWORD *)(v13 + 144) = v27;
    *(_BYTE *)(v13 + 148) = v26;
    *(_DWORD *)(v13 + 152) = v25;
    outlined retain of SelectionEditMenuModifier<A>.Child((void **)&v40);
    AGGraphClearUpdate();
    v14 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    v15 = *(_OWORD *)(v13 + 128);
    *(_OWORD *)&v42[32] = *(_OWORD *)(v13 + 112);
    *(_OWORD *)&v42[48] = v15;
    *(_OWORD *)&v42[60] = *(_OWORD *)(v13 + 140);
    v16 = *(_OWORD *)(v13 + 64);
    v40 = *(_OWORD *)(v13 + 48);
    v41 = v16;
    v17 = *(_OWORD *)(v13 + 96);
    *(_OWORD *)v42 = *(_OWORD *)(v13 + 80);
    *(_OWORD *)&v42[16] = v17;
    type metadata accessor for PlatformItemListGenerator();
  }
  v4 = *((_DWORD *)v1 + 26);
  v18 = *((_DWORD *)v2 + 2);
  v19 = v2[2];
  v20 = *((_DWORD *)v2 + 6);
  v21 = v2[4];
  v22 = *((_DWORD *)v2 + 24);
  v23 = *((_BYTE *)v2 + 100);
  *(_QWORD *)&v40 = *v2;
  DWORD2(v40) = v18;
  *(_QWORD *)&v41 = v19;
  DWORD2(v41) = v20;
  *(_QWORD *)v42 = v21;
  *(_OWORD *)&v42[8] = *(_OWORD *)(v2 + 5);
  *(_OWORD *)&v42[24] = *(_OWORD *)(v2 + 7);
  *(_OWORD *)&v42[40] = *(_OWORD *)(v2 + 9);
  *(_QWORD *)&v42[56] = v2[11];
  *(_DWORD *)&v42[64] = v22;
  v42[68] = v23;
  *(_DWORD *)&v42[72] = v4;
  PlatformItemListGenerator.itemList.getter();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
}

uint64_t PlatformItemListGenerator.makeItemList()(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[2];

  v24 = *(_QWORD *)(v1 + 16);
  v32 = *(_DWORD *)(v1 + 24);
  v33 = *(_QWORD *)(v1 + 32);
  v2 = *(_DWORD *)(v1 + 48);
  v21 = *(_DWORD *)(v1 + 44);
  v22 = *(_DWORD *)(v1 + 40);
  v3 = *(_DWORD *)(v1 + 52);
  v30 = *(_QWORD *)(v1 + 64);
  v31 = *(_QWORD *)(v1 + 56);
  v4 = *(_DWORD *)(v1 + 76);
  v29 = *(_DWORD *)(v1 + 72);
  v6 = *(_DWORD *)(v1 + 80);
  v5 = *(_DWORD *)(v1 + 84);
  v8 = *(_DWORD *)(v1 + 88);
  v7 = *(_DWORD *)(v1 + 92);
  v9 = *(_DWORD *)(v1 + 96);
  v23 = *(unsigned __int8 *)(v1 + 100);
  v25 = a1[4];
  v26 = a1[2];
  v27 = (*(uint64_t (**)(uint64_t))(v25 + 8))(v26);
  v58 = v24;
  v59 = v32;
  v60 = v33;
  *(_QWORD *)&v61 = __PAIR64__(v21, v22);
  *((_QWORD *)&v61 + 1) = __PAIR64__(v3, v2);
  v10 = v3;
  v62 = v31;
  v63 = v30;
  v11 = v30;
  *(_QWORD *)&v64[0] = __PAIR64__(v4, v29);
  *((_QWORD *)&v64[0] + 1) = __PAIR64__(v5, v6);
  *(_QWORD *)&v64[1] = __PAIR64__(v7, v8);
  DWORD2(v64[1]) = v9;
  if (v23 == 1)
  {
    v12 = v4;
    v13 = v6;
    v35 = v24;
    v36 = v32;
    v37 = v33;
    v38 = v22;
    v39 = v21;
    v14 = v2;
    v40 = v2;
    v41 = v10;
    v15 = v10;
    v42 = v31;
    v43 = v30;
    v44 = v29;
    v45 = v12;
    v16 = v12;
    v17 = v13;
    v46 = v13;
    v47 = v5;
    v48 = v8;
    v49 = v7;
    v50 = v9;
    _ViewInputs.withoutGeometryDependencies.getter();
    v58 = v51;
    v59 = v52;
    v60 = v53;
    v61 = v54;
    v62 = v55;
    *(_OWORD *)((char *)v64 + 4) = *(_OWORD *)((char *)v57 + 4);
    *(_QWORD *)((char *)&v64[1] + 4) = *(_QWORD *)((char *)&v57[1] + 4);
    v51 = v24;
    v52 = v32;
    v53 = v33;
    *(_QWORD *)&v54 = __PAIR64__(v21, v22);
    *((_QWORD *)&v54 + 1) = __PAIR64__(v15, v14);
    v55 = v31;
    v56 = v30;
    *(_QWORD *)&v57[0] = __PAIR64__(v16, v29);
    *((_QWORD *)&v57[0] + 1) = __PAIR64__(v5, v17);
    *(_QWORD *)&v57[1] = __PAIR64__(v7, v8);
    DWORD2(v57[1]) = v9;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v11 = v30;
    swift_bridgeObjectRetain();
    PreferenceKeys.init()();
    v34 = v24;
    _ViewInputs.intern<A>(_:id:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    PreferencesInputs.init(hostKeys:)();
    swift_bridgeObjectRelease();
    v63 = v24;
    LODWORD(v64[0]) = v32;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(v26, 0, v26, v25);
  LOBYTE(v51) = 1;
  lazy protocol witness table accessor for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput();
  PropertyList.subscript.setter();
  if ((v27 & 0x10) != 0)
  {
    v51 = v11;
    v52 = v29;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
      lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>();
      PreferenceKeys.add(_:)();
    }
  }
  v18 = a1[3];
  _GraphValue.init(_:)();
  v51 = v58;
  v52 = v59;
  v53 = v60;
  v54 = v61;
  v55 = v62;
  v56 = v63;
  v57[0] = v64[0];
  *(_QWORD *)&v57[1] = *(_QWORD *)&v64[1];
  DWORD2(v57[1]) = DWORD2(v64[1]);
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t))(a1[5] + 24))(&v35, &v34, &v51, v18);
  v51 = v35;
  v52 = v36;
  v19 = PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v19 & 0x100000000) != 0)
    v19 = *MEMORY[0x1E0CFED28];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v19;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PlatformItemCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<PlatformItemCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<PlatformItemCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<PlatformItemCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEC8F8], MEMORY[0x1E0DEC908]);
}

unint64_t lazy protocol witness table accessor for type PlatformItemCollection and conformance PlatformItemCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection;
  if (!lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemCollection, &type metadata for PlatformItemCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection;
  if (!lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemCollection, &type metadata for PlatformItemCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection;
  if (!lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemCollection, &type metadata for PlatformItemCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection;
  if (!lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemCollection, &type metadata for PlatformItemCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection);
  }
  return result;
}

uint64_t PlatformItemCollection.endIndex.getter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) != 0 || AGGraphGetWeakValue())
    v2 = swift_bridgeObjectRetain();
  else
    v2 = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance PlatformItemCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *(_QWORD *)v3, *(_BYTE *)(v3 + 8));
  *a3 = result;
  return result;
}

unint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance PlatformItemCollection(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;

  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *(_QWORD *)v2, *(_BYTE *)(v2 + 8));
}

uint64_t protocol witness for Collection.endIndex.getter in conformance PlatformItemCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = PlatformItemCollection.endIndex.getter(*(_QWORD *)v1, *(_BYTE *)(v1 + 8));
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance PlatformItemCollection(_QWORD *a1, unint64_t *a2))(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[4] = PlatformItemCollection.subscript.read(v5, *a2, *(_QWORD *)v2, *(_BYTE *)(v2 + 8));
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

void (*PlatformItemCollection.subscript.read(_QWORD *a1, unint64_t a2, uint64_t a3, char a4))(uint64_t *a1)
{
  uint64_t v8;
  void *v9;
  void (*result)(uint64_t *);

  v8 = *(_QWORD *)(type metadata accessor for PlatformItemList.Item() - 8);
  v9 = malloc(*(_QWORD *)(v8 + 64));
  *a1 = v9;
  if ((a4 & 1) != 0)
  {
LABEL_4:
    result = (void (*)(uint64_t *))swift_bridgeObjectRetain();
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  result = (void (*)(uint64_t *))AGGraphGetWeakValue();
  if (result)
  {
    a3 = *(_QWORD *)result;
    goto LABEL_4;
  }
  a3 = MEMORY[0x1E0DEE9D8];
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_8;
LABEL_5:
  if (*(_QWORD *)(a3 + 16) > a2)
  {
    outlined init with copy of PlatformItemList.Item(a3+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * a2, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return PlatformItemCollection.subscript.read;
  }
LABEL_9:
  __break(1u);
  return result;
}

void PlatformItemCollection.subscript.read(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  outlined destroy of PlatformItemList.Item(*a1);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance PlatformItemCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  *(_QWORD *)a2 = specialized Collection<>.subscript.getter(*a1, a1[1], *(_QWORD *)v2, *(_BYTE *)(v2 + 8));
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = v5 & 1;
  return outlined copy of PlatformItemCollection.Storage(v6, v5 & 1);
}

uint64_t protocol witness for Collection.indices.getter in conformance PlatformItemCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = specialized RandomAccessCollection<>.indices.getter(*(_QWORD *)v1, *(_BYTE *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance PlatformItemCollection()
{
  uint64_t v0;

  return specialized Collection.isEmpty.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

unint64_t protocol witness for Collection.count.getter in conformance PlatformItemCollection()
{
  uint64_t v0;

  return specialized Collection.count.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance PlatformItemCollection@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int64_t v10;
  uint64_t result;
  char v12;

  v7 = *a1;
  v8 = *(_QWORD *)v4;
  v9 = *(_BYTE *)(v4 + 8);
  v10 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3, *(_QWORD *)v4, v9);
  if (a2 < 1)
  {
    if (v10 <= 0 && v10 > a2)
      goto LABEL_4;
LABEL_10:
    result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v7, a2, v8, v9);
    v12 = 0;
    goto LABEL_11;
  }
  if (v10 < 0 || v10 >= (unint64_t)a2)
    goto LABEL_10;
LABEL_4:
  result = 0;
  v12 = 1;
LABEL_11:
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v12;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance PlatformItemCollection(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 0;
}

size_t protocol witness for Sequence._copyToContiguousArray() in conformance PlatformItemCollection()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  size_t v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v1, v2);
  outlined consume of PlatformItemCollection.Storage(v1, v2);
  return v3;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance PlatformItemCollection(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(_QWORD *)v3, *(unsigned __int8 *)(v3 + 8));
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in PlatformItemCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<PlatformItemCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<PlatformItemCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<PlatformItemCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEDE10], MEMORY[0x1E0DEDE48]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<PlatformItemCollection> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<PlatformItemCollection>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for IndexingIterator<PlatformItemCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type PlatformItemCollection and conformance PlatformItemCollection();
    v7 = a3(a1, &type metadata for PlatformItemCollection, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in PlatformItemCollection()
{
  return lazy protocol witness table accessor for type Slice<PlatformItemCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PlatformItemCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemCollection and conformance PlatformItemCollection, MEMORY[0x1E0DEDE28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in PlatformItemCollection()
{
  return lazy protocol witness table accessor for type Slice<PlatformItemCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PlatformItemCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemCollection and conformance PlatformItemCollection, MEMORY[0x1E0DEDE40]);
}

uint64_t lazy protocol witness table accessor for type Slice<PlatformItemCollection> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<PlatformItemCollection>(255, &lazy cache variable for type metadata for Slice<PlatformItemCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEDE10]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187985560()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t specialized Collection<>.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    v4 = a3 + 48 * v3;
    v6 = *(_QWORD *)(v4 + 16);
    v5 = *(_QWORD *)(v4 + 24);
    v7 = __OFADD__(v5, v6);
    v3 = v5 + v6;
    if (v7)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    v8 = *(_QWORD *)(a3 + 72);
    if (v3 < v8)
      goto LABEL_9;
    if (v8 <= result)
      goto LABEL_5;
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (result < 0)
    goto LABEL_8;
LABEL_5:
  if (v3 < a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

uint64_t specialized Collection<>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if ((a4 & 1) != 0 || AGGraphGetWeakValue())
    v6 = swift_bridgeObjectRetain();
  else
    v6 = MEMORY[0x1E0DEE9D8];
  v7 = *(_QWORD *)(v6 + 16);
  result = swift_bridgeObjectRelease();
  if ((a1 & 0x8000000000000000) == 0 && v7 >= a2)
    return a1;
  __break(1u);
  return result;
}

uint64_t outlined retain of Range<SpatialEventCollection.Index>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  outlined copy of [A : B].Index._Variant<A, B>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined copy of [A : B].Index._Variant<A, B>(v2, v3, v4);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformItemCollection.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of PlatformItemCollection.Storage(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for PlatformItemCollection.Storage(uint64_t a1)
{
  return outlined consume of PlatformItemCollection.Storage(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for PlatformItemCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of PlatformItemCollection.Storage(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of PlatformItemCollection.Storage(v5, v6);
  return a1;
}

uint64_t assignWithTake for PlatformItemCollection.Storage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of PlatformItemCollection.Storage(v5, v6);
  return a1;
}

void *type metadata accessor for PlatformItemCollection.Storage()
{
  return &unk_1E1ADCC50;
}

uint64_t type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>.Index.Kind()
{
  uint64_t result;

  result = lazy cache variable for type metadata for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>.Index.Kind;
  if (!lazy cache variable for type metadata for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>.Index.Kind)
  {
    type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for NavigationState.StackContent.Views.ViewsSequence.Index.Kind();
  }
  return result;
}

uint64_t Scene.onChange<A>(of:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a5;
  v18 = a6;
  v19 = a3;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for _ValueActionModifier();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a4, v14);
  swift_retain();
  _ValueActionModifier.init(value:action:)();
  Scene.modifier<A>(_:)(v16, v19, v11, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v11);
}

uint64_t static _ValueActionModifier._makeScene(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _ValueActionModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4FA0], MEMORY[0x1E0CE4FB0], a7, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9);
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance _ValueActionModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t Scene.onChange<A>(of:initial:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t, double);
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  _QWORD v56[5];

  v48 = a7;
  v47 = a5;
  v53 = a8;
  v54 = a3;
  v50 = a2;
  v11 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v44 = v13;
  v45 = v12;
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for _ValueActionModifier2();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v41 - v18;
  v20 = type metadata accessor for ModifiedContent();
  v21 = *(_QWORD *)(v20 - 8);
  v51 = v20;
  v52 = v21;
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v41 - v24;
  v26 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v43 = a1;
  v26(v14, a1, a6, v23);
  v27 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  swift_retain();
  v42 = v27;
  v27(v19, v14, a6);
  v28 = &v19[*(int *)(v15 + 36)];
  *(_QWORD *)v28 = v54;
  *((_QWORD *)v28 + 1) = a4;
  v46 = a4;
  v29 = v47;
  v49 = v25;
  v30 = v48;
  Scene.modifier<A>(_:)(v19, v47, v15, v48);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  v31 = 0;
  v32 = 0;
  if ((v50 & 1) != 0)
  {
    ((void (*)(char *, uint64_t, uint64_t))v26)(v14, v43, a6);
    v33 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v32 = (_QWORD *)swift_allocObject();
    v32[2] = v29;
    v32[3] = a6;
    v34 = v45;
    v32[4] = v30;
    v32[5] = v34;
    v35 = (char *)v32 + v33;
    v36 = v46;
    v32[6] = v54;
    v32[7] = v36;
    v42(v35, v14, a6);
    swift_retain();
    v31 = partial apply for closure #1 in Scene.onChange<A>(of:initial:_:);
  }
  v56[0] = v31;
  v56[1] = v32;
  v56[2] = 0;
  v56[3] = 0;
  v55[0] = v30;
  v55[1] = &protocol witness table for _ValueActionModifier2<A>;
  v37 = v51;
  v38 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v51, v55);
  v39 = v49;
  Scene.modifier<A>(_:)(v56, v37, MEMORY[0x1E0CE5F08], v38);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v31);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v39, v37);
}

uint64_t Scene.onChange<A>(of:initial:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)();
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD v41[4];

  v33 = a4;
  v38 = a9;
  v39 = a3;
  v36 = a2;
  v14 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for _ValueActionModifier2();
  v34 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v33 - v19;
  v35 = type metadata accessor for ModifiedContent();
  v37 = *(_QWORD *)(v35 - 8);
  v22 = MEMORY[0x1E0C80A78](v35, v21);
  v24 = (char *)&v33 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, a1, a6, v22);
  v25 = (uint64_t (*)())swift_allocObject();
  *((_QWORD *)v25 + 2) = a5;
  *((_QWORD *)v25 + 3) = a6;
  *((_QWORD *)v25 + 4) = a7;
  *((_QWORD *)v25 + 5) = a8;
  v26 = v33;
  *((_QWORD *)v25 + 6) = v39;
  *((_QWORD *)v25 + 7) = v26;
  swift_retain();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v16, a6);
  v27 = (uint64_t (**)())&v20[*(int *)(v17 + 36)];
  *v27 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Publisher.Output) -> (@out ());
  v27[1] = v25;
  Scene.modifier<A>(_:)(v20, a5, v17, a7);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v17);
  v28 = 0;
  v29 = 0;
  if ((v36 & 1) != 0)
  {
    swift_retain();
    v28 = v39;
    v29 = v26;
  }
  v41[0] = v28;
  v41[1] = v29;
  v41[2] = 0;
  v41[3] = 0;
  v40[0] = a7;
  v40[1] = &protocol witness table for _ValueActionModifier2<A>;
  v30 = v35;
  v31 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v35, v40);
  Scene.modifier<A>(_:)(v41, v30, MEMORY[0x1E0CE5F08], v31);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v24, v30);
}

uint64_t static _ValueActionModifier2._makeScene(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _ValueActionModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE52E8], MEMORY[0x1E0CE52F8], a7, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t static _ValueActionModifier._makeScene(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t *);
  __int128 v39;
  _BYTE v40[16];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  __int128 v50;
  int v51;
  uint64_t v52;

  v37 = a4;
  v38 = a3;
  v36 = a9;
  v34 = a10;
  v52 = *MEMORY[0x1E0C80C00];
  v13 = a7(255, a5, a6);
  v28 = MEMORY[0x18D75FFDC](a8, v13);
  v14 = type metadata accessor for ValueActionDispatcher();
  v33 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v26 - v16;
  LODWORD(v16) = *a1;
  v30 = *a2;
  v18 = v30;
  v32 = *((_DWORD *)a2 + 2);
  v19 = v32;
  v31 = a2[2];
  v20 = v31;
  v27 = *((_DWORD *)a2 + 6);
  v21 = *((_DWORD *)a2 + 8);
  v26 = *((_DWORD *)a2 + 7);
  v29 = *((_DWORD *)a2 + 9);
  LODWORD(a1) = v29;
  v35 = *((_DWORD *)a2 + 14);
  LODWORD(v43) = v16;
  type metadata accessor for _GraphValue();
  v39 = *(_OWORD *)(a2 + 5);
  _GraphValue.value.getter();
  v43 = v18;
  v44 = v19;
  v45 = v20;
  LODWORD(v18) = v27;
  LODWORD(v20) = v26;
  v46 = v27;
  v47 = v26;
  v48 = v21;
  v49 = (int)a1;
  *(_QWORD *)&v50 = v39;
  _GraphInputs.phase.getter();
  ValueActionDispatcher.init(modifier:phase:)();
  v41 = v14;
  v42 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5238], v14);
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, v34, (uint64_t)v40, v14, MEMORY[0x1E0DEDCE8], v22, MEMORY[0x1E0DEDD18], v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v14);
  static AGAttributeFlags.transactional.getter();
  v24 = AGGraphSetFlags();
  v43 = v30;
  v44 = v32;
  v45 = v31;
  v46 = v18;
  v47 = v20;
  v48 = v21;
  v49 = v29;
  v50 = v39;
  v51 = v35;
  return v38(v24, &v43);
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance _ValueActionModifier2<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier2._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t sub_187986208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Scene.onChange<A>(of:initial:_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 48))(v0 + ((v1 + 64) & ~v1), v0 + ((v1 + 64) & ~v1));
}

uint64_t sub_1879862B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1879862D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _ValueActionModifier();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _ValueActionModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

uint64_t sub_187986338(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _ValueActionModifier2();
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  v6[0] = v1;
  v6[1] = &protocol witness table for _ValueActionModifier2<A>;
  v5[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v6);
  v5[1] = &protocol witness table for _AppearanceActionModifier;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v3, v5);
}

void View._navigationDestination<A>(isPresented:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View._navigationDestination<A, B>(item:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View._navigationDestination(isPresented:storyboardName:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View._navigationDestination<A>(item:storyboardName:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_18798641C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for NavigationLinkModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for NavigationLinkModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

void sub_18798647C()
{
  type metadata accessor for ItemNavigationLinkModifier();
}

uint64_t sub_1879864B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[12];

  v3 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemNavigationLinkModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

uint64_t sub_187986504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 8);
  type metadata accessor for NavigationLinkModifier<EmptyView>(255, a2, a3, a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for NavigationLinkModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

void type metadata accessor for NavigationLinkModifier<EmptyView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for NavigationLinkModifier<EmptyView>)
  {
    v4 = type metadata accessor for NavigationLinkModifier(0, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for NavigationLinkModifier<EmptyView>);
  }
}

void sub_1879865BC()
{
  type metadata accessor for ItemNavigationLinkModifier();
}

uint64_t sub_1879865FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[12];

  v3 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemNavigationLinkModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

uint64_t AccessibilityQuickActionProxy.state.getter()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t AccessibilityQuickActionProxy.isActive.didset()
{
  uint64_t v0;
  int v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive
                 + 8))
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v4);
    v1 = v4;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    result = swift_release();
    if ((_BYTE)v3)
    {
      if ((v1 & 1) != 0)
        return result;
      goto LABEL_10;
    }
    if (!v1)
    {
LABEL_10:
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      result = swift_release();
      if (!(_BYTE)v3)
        return result;
      goto LABEL_11;
    }
    if ((*(_QWORD *)(v0
                    + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_label
                    + 8)
       || *(_BYTE *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_style) == 1)
      && *(_QWORD *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action))
    {
LABEL_11:
      swift_retain();
      static Update.enqueueAction(_:)();
      return swift_release();
    }
  }
  return result;
}

uint64_t AccessibilityQuickActionProxy.isEnabled.setter(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1
                + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isEnabled);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isEnabled) = result;
  if (*(_QWORD *)(v1
                 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive
                 + 8))
    return result;
  if ((result & 1) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    result = swift_release();
    if (!v3)
      return result;
LABEL_11:
    swift_retain();
    static Update.enqueueAction(_:)();
    return swift_release();
  }
  if ((v2 & 1) == 0
    && (*(_QWORD *)(v1
                  + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_label
                  + 8)
     || *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_style) == 1)
    && *(_QWORD *)(v1
                 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action))
  {
    goto LABEL_11;
  }
  return result;
}

uint64_t AccessibilityQuickActionProxy.init(style:)(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE v14[16];

  v2 = a1 & 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Published<AccessibilityQuickActionState>, (uint64_t)&type metadata for AccessibilityQuickActionState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v14[-v7];
  v9 = v1 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy__state;
  v14[15] = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(v9, v8, v4);
  v10 = (_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_label);
  *v10 = 0;
  v10[1] = 0;
  v11 = v1 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive;
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_BYTE *)(v11 + 16) = 0;
  v12 = (_QWORD *)(v1
                 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action);
  *v12 = 0;
  v12[1] = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isEnabled) = 1;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_style) = v2;
  return v1;
}

void AccessibilityQuickActionProxy.viewDidAppear()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive
                 + 8))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v2 = v1;
    swift_retain();
    swift_retain();
    MEMORY[0x18D75B9C8](&v3, v2);
    if (v3 == 1
      && (*(_QWORD *)(v0
                    + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_label
                    + 8)
       || *(_BYTE *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_style) == 1)
      && *(_QWORD *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action))
    {
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
    }
    swift_release();
  }
  else if (*(_BYTE *)(v0
                     + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isEnabled) == 1
         && (*(_QWORD *)(v0
                       + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_label
                       + 8)
          || *(_BYTE *)(v0
                      + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_style) == 1)
         && *(_QWORD *)(v0
                      + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action))
  {
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
  }
}

uint64_t closure #1 in AccessibilityQuickActionProxy.start()(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result
                 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive
                 + 8);
  if (v1)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)(result+ OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive), v1);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in AccessibilityQuickActionProxy.stop()(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  result = static Published.subscript.setter();
  v3 = *(_QWORD *)(a1
                 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive
                 + 8);
  if (v3)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)(a1+ OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive), v3);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t AccessibilityQuickActionProxy.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy__state;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Published<AccessibilityQuickActionState>, (uint64_t)&type metadata for AccessibilityQuickActionState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive), *(_QWORD *)(v0+ OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive+ 8));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action));
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance AccessibilityQuickActionProxy@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for AccessibilityQuickActionProxy();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v9;
  ValueMetadata *v10;
  int v11;
  _UNKNOWN **v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int OffsetAttribute2;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[10];
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  _UNKNOWN **v54;
  int v55;
  ValueMetadata *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  ValueMetadata *v60;
  uint64_t v61;
  _UNKNOWN **v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  unint64_t v67;
  int v68;
  _DWORD v69[4];
  _UNKNOWN **v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  ValueMetadata *v81;
  int v82;
  _UNKNOWN **v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  unint64_t v88;
  int v89;
  uint64_t v90;

  v37 = a3;
  v38 = a4;
  v36 = a7;
  v90 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = *(ValueMetadata **)a2;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_UNKNOWN ***)(a2 + 16);
  v13 = *(_DWORD *)(a2 + 24);
  v14 = *(_DWORD *)(a2 + 28);
  v15 = *(_DWORD *)(a2 + 32);
  v16 = *(_DWORD *)(a2 + 36);
  v17 = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_DWORD *)(a2 + 56);
  v20 = *(_DWORD *)(a2 + 60);
  v21 = *(_DWORD *)(a2 + 64);
  v22 = *(_DWORD *)(a2 + 68);
  v24 = *(_DWORD *)(a2 + 72);
  v23 = *(_DWORD *)(a2 + 76);
  v25 = *(_DWORD *)(a2 + 80);
  v81 = v10;
  v82 = v11;
  v83 = v12;
  *(_QWORD *)&v84 = __PAIR64__(v14, v13);
  *((_QWORD *)&v84 + 1) = __PAIR64__(v16, v15);
  v85 = v17;
  v86 = v18;
  *(_QWORD *)&v87 = __PAIR64__(v20, v19);
  *((_QWORD *)&v87 + 1) = __PAIR64__(v22, v21);
  v88 = __PAIR64__(v23, v24);
  v89 = v25;
  v69[1] = HIDWORD(v10);
  v55 = v11;
  v69[2] = v11;
  v70 = v12;
  v48 = v15;
  v49 = v13;
  v71 = v13;
  v52 = v21;
  v53 = v14;
  v72 = v14;
  v73 = __PAIR64__(v16, v15);
  v47 = v16;
  v74 = v17;
  v75 = v18;
  v43 = v20;
  v44 = v19;
  v76 = __PAIR64__(v20, v19);
  v77 = __PAIR64__(v22, v21);
  v50 = v23;
  v51 = v22;
  v41 = v25;
  v42 = v24;
  v78 = v24;
  v79 = v23;
  v80 = v25;
  v56 = v10;
  swift_retain();
  v54 = v12;
  swift_retain();
  v46 = v17;
  swift_bridgeObjectRetain();
  v45 = v18;
  swift_bridgeObjectRetain();
  v69[0] = _ViewInputs.environment.getter();
  v58 = type metadata accessor for AccessibilityQuickActionModifier.ChildEnvironment(0, a5, a6, v26);
  v59 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionModifier<A>.ChildEnvironment, v58);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E0CE3E78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v69, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_11, (uint64_t)&v57, v58, MEMORY[0x1E0DEDCE8], v27, MEMORY[0x1E0DEDD18], v28);
  v34[3] = 0;
  _ViewInputs.environment.setter();
  v35 = v9;
  v69[0] = v9;
  type metadata accessor for AccessibilityQuickActionModifier(255, a5, a6, v29);
  v34[4] = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(a5 - 8) + 64))
    closure #1 in static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(1, a5, a6, v30);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v34[0] = v83;
  v34[1] = v85;
  v34[9] = v86;
  v60 = v81;
  LODWORD(v61) = v82;
  v62 = v83;
  v63 = v84;
  v64 = v85;
  v65 = v86;
  v66 = v87;
  v67 = v88;
  v68 = v89;
  PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v60, 1, (uint64_t)v69);
  v34[2] = v34;
  v39 = a6;
  v34[7] = v73;
  v34[8] = v70;
  v34[5] = v77;
  v34[6] = v76;
  MEMORY[0x1E0C80A78](a6, v32);
  v40 = a5;
  v60 = &type metadata for ActionPlatformItemListFlags;
  v61 = a5;
  v62 = &protocol witness table for ActionPlatformItemListFlags;
  *(_QWORD *)&v63 = v33;
  type metadata accessor for PlatformItemListGenerator();
}

uint64_t sub_1879871A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v37[96];

  *(_QWORD *)(v4 - 16) = a1;
  *(_QWORD *)(v4 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListGenerator<A, B>, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v7 = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v1 + 72) = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = *(_QWORD *)(v1 + 24);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 352, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1, v2, a1, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v9);
  *(_QWORD *)(v1 + 24) = v8;
  v10 = *(void **)(v1 + 352);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  *(_DWORD *)(v1 + 16) = *(_DWORD *)(v1 + 264);
  v11 = *(_DWORD *)(v1 + 84);
  *(_DWORD *)(v1 + 352) = v11;
  _GraphValue.value.getter();
  v12 = *(_QWORD *)(v1 + 112);
  v13 = *(_QWORD *)(v1 + 120);
  closure #2 in static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(1, v13, v12, v14);
  *(_DWORD *)(v1 + 8) = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v1 + 352) = v11;
  _GraphValue.value.getter();
  closure #3 in static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(1, v13, v12, v15);
  *(_DWORD *)(v1 + 84) = AGGraphCreateOffsetAttribute2();
  *(_QWORD *)(v1 + 352) = *(_QWORD *)(v1 + 208);
  *(_DWORD *)(v1 + 360) = *(_DWORD *)(v1 + 204);
  *(_QWORD *)(v1 + 368) = *(_QWORD *)(v1 + 192);
  v17 = *(_DWORD *)(v1 + 168);
  v16 = *(_DWORD *)(v1 + 172);
  *(_DWORD *)(v1 + 376) = v16;
  LODWORD(v13) = v16;
  *(_DWORD *)(v1 + 380) = *(_DWORD *)(v1 + 188);
  *(_DWORD *)(v1 + 384) = v17;
  v18 = *(_DWORD *)(v1 + 164);
  *(_DWORD *)(v1 + 388) = v18;
  v20 = *(_QWORD *)(v1 + 144);
  v19 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 392) = v19;
  *(_QWORD *)(v1 + 400) = v20;
  v21 = *(_DWORD *)(v1 + 136);
  v22 = *(_DWORD *)(v1 + 140);
  *(_DWORD *)(v1 + 408) = v22;
  *(_DWORD *)(v1 + 412) = v21;
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v1 + 184);
  *(_DWORD *)(v1 + 420) = *(_DWORD *)(v1 + 180);
  LODWORD(v12) = *(_DWORD *)(v1 + 128);
  *(_DWORD *)(v1 + 424) = *(_DWORD *)(v1 + 132);
  *(_DWORD *)(v1 + 428) = *(_DWORD *)(v1 + 176);
  *(_DWORD *)(v1 + 432) = v12;
  swift_getKeyPath();
  *(_DWORD *)(v1 + 32) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_QWORD *)(v1 + 352) = *(_QWORD *)(v1 + 208);
  *(_DWORD *)(v1 + 360) = *(_DWORD *)(v1 + 204);
  *(_QWORD *)(v1 + 368) = *(_QWORD *)(v1 + 192);
  *(_DWORD *)(v1 + 376) = v13;
  *(_DWORD *)(v1 + 380) = *(_DWORD *)(v1 + 188);
  *(_DWORD *)(v1 + 384) = v17;
  *(_DWORD *)(v1 + 388) = v18;
  *(_QWORD *)(v1 + 392) = v19;
  *(_QWORD *)(v1 + 400) = v20;
  *(_DWORD *)(v1 + 408) = v22;
  LODWORD(v20) = *(_DWORD *)(v1 + 132);
  v23 = *(_DWORD *)(v1 + 136);
  *(_DWORD *)(v1 + 412) = v23;
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v1 + 184);
  *(_DWORD *)(v1 + 420) = *(_DWORD *)(v1 + 180);
  *(_DWORD *)(v1 + 424) = v20;
  *(_DWORD *)(v1 + 428) = *(_DWORD *)(v1 + 176);
  *(_DWORD *)(v1 + 432) = v12;
  swift_getKeyPath();
  v24 = _ViewInputs.mapEnvironment<A>(_:)();
  v25 = swift_release();
  *(_DWORD *)(v1 + 352) = *(_DWORD *)(v1 + 16);
  *(_DWORD *)(v1 + 356) = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 360) = *(_DWORD *)(v1 + 84);
  *(_DWORD *)(v1 + 364) = *(_DWORD *)(v1 + 32);
  *(_DWORD *)(v1 + 368) = v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v27 = *(_QWORD *)(v1 + 112);
  v28 = *(_QWORD *)(v1 + 120);
  v30 = type metadata accessor for AccessibilityQuickActionModifier.ProxyTransform(0, v28, v27, v29);
  *(_QWORD *)&v37[-16] = v30;
  *(_QWORD *)&v37[-8] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionModifier<A>.ProxyTransform, v30);
  type metadata accessor for Attribute<AccessibilityQuickActionProxy>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 352, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v37[-32], v30, MEMORY[0x1E0DEDCE8], v31, MEMORY[0x1E0DEDD18], v32);
  *(_DWORD *)(v1 + 352) = *(_DWORD *)(v1 + 264);
  v34 = type metadata accessor for AccessibilityQuickActionModifier.ProxyModifier(0, v28, v27, v33);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionModifier<A>.ProxyModifier, v34);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v1 + 352) = *(_QWORD *)(v1 + 208);
  *(_DWORD *)(v1 + 360) = *(_DWORD *)(v1 + 204);
  *(_QWORD *)(v1 + 368) = *(_QWORD *)(v1 + 192);
  *(_DWORD *)(v1 + 376) = *(_DWORD *)(v1 + 172);
  *(_DWORD *)(v1 + 380) = *(_DWORD *)(v1 + 188);
  *(_DWORD *)(v1 + 384) = *(_DWORD *)(v1 + 168);
  *(_DWORD *)(v1 + 388) = *(_DWORD *)(v1 + 164);
  v35 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 392) = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 400) = v35;
  *(_DWORD *)(v1 + 408) = *(_DWORD *)(v1 + 140);
  *(_DWORD *)(v1 + 412) = v23;
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v1 + 184);
  *(_DWORD *)(v1 + 420) = *(_DWORD *)(v1 + 180);
  *(_DWORD *)(v1 + 424) = v20;
  *(_DWORD *)(v1 + 428) = *(_DWORD *)(v1 + 176);
  *(_DWORD *)(v1 + 432) = *(_DWORD *)(v1 + 128);
  lazy protocol witness table accessor for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier();
  static ViewModifier.makeView(modifier:inputs:body:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for AccessibilityQuickActionModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t closure #2 in static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v5 = type metadata accessor for AccessibilityQuickActionModifier(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 36);
  v12[2] = v5;
  type metadata accessor for Binding<Bool>?();
  v8 = v7;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, v8, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[5];
}

uint64_t closure #3 in static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v5 = type metadata accessor for AccessibilityQuickActionModifier(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 40);
  v10[2] = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_22, (uint64_t)v10, (uint64_t)&type metadata for _AccessibilityQuickActionStyle.RawValue, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t EnvironmentValues.accessibilityQuickActionsEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.accessibilityQuickActionsEnabled : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityQuickActionsEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.accessibilityQuickActionsEnabled : EnvironmentValues()
{
  return EnvironmentValues.accessibilityQuickActionsEnabled.setter();
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityQuickActionModifier<A>.ProxyModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = specialized AccessibilityQuickActionModifier.ProxyModifier.value.getter();
  a1[1] = v2;
  return swift_retain();
}

uint64_t AccessibilityQuickActionModifier.ChildEnvironment.updateValue()()
{
  uint64_t result;
  char v1;

  result = *(_QWORD *)(AGGraphGetValue() + 8);
  if ((v1 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    EnvironmentValues.isEnabled.setter();
    AGGraphSetOutputValue();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t *AccessibilityQuickActionModifier.ProxyTransform.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  char v4;
  uint64_t *result;
  uint64_t Value;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v0 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (void **)((char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AccessibilityQuickActionProxy();
  if (!AGGraphGetOutputValue())
  {
    v4 = *(_BYTE *)AGGraphGetValue();
    swift_allocObject();
    v32 = AccessibilityQuickActionProxy.init(style:)(v4);
    AGGraphSetOutputValue();
    swift_release();
  }
  result = (uint64_t *)AGGraphGetValue();
  if (*(_BYTE *)result == 1)
  {
    type metadata accessor for Binding<Bool>?();
    Value = AGGraphGetValue();
    v8 = *(_QWORD *)Value;
    v7 = *(_QWORD *)(Value + 8);
    v9 = *(_BYTE *)(Value + 16);
    if ((v10 & 1) != 0)
    {
      v31 = v3;
      result = (uint64_t *)AGGraphGetOutputValue();
      if (!result)
      {
        __break(1u);
        goto LABEL_27;
      }
      v11 = *result
          + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive;
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v11 = v8;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 + 16) = v9;
      outlined copy of Binding<NavigationSplitViewColumn>?(v8, v7);
      outlined copy of Binding<NavigationSplitViewColumn>?(v8, v7);
      outlined copy of Binding<NavigationSplitViewColumn>?(v8, v7);
      swift_retain();
      outlined consume of Binding<NavigationSplitViewColumn>?(v12, v13);
      AccessibilityQuickActionProxy.isActive.didset();
      outlined consume of Binding<NavigationSplitViewColumn>?(v8, v7);
      swift_release();
      v3 = v31;
    }
    else
    {
      outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)Value, v7);
    }
    v14 = (unsigned __int8 *)AGGraphGetValue();
    if ((v15 & 1) == 0)
      goto LABEL_11;
    v16 = *v14;
    result = (uint64_t *)AGGraphGetOutputValue();
    if (result)
    {
      swift_retain();
      AccessibilityQuickActionProxy.isEnabled.setter(v16);
      swift_release();
LABEL_11:
      AGGraphGetValue();
      if ((v17 & 1) == 0)
        return (uint64_t *)outlined consume of Binding<NavigationSplitViewColumn>?(v8, v7);
      v18 = swift_bridgeObjectRetain();
      PlatformItemList.mergedContentItem.getter(v18, (uint64_t)v3);
      swift_bridgeObjectRelease();
      result = (uint64_t *)AGGraphGetOutputValue();
      if (result)
      {
        v19 = *result;
        v20 = *v3;
        if (*v3)
        {
          swift_retain();
          v21 = objc_msgSend(v20, sel_string);
          v20 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          v23 = v22;

        }
        else
        {
          swift_retain();
          v23 = 0;
        }
        v24 = (_QWORD *)(v19
                       + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_label);
        *v24 = v20;
        v24[1] = v23;
        swift_release();
        swift_bridgeObjectRelease();
        result = (uint64_t *)AGGraphGetOutputValue();
        if (result)
        {
          v25 = *result;
          v26 = (uint64_t)v3[51];
          if (v26 == 1)
          {
            v26 = 0;
            v27 = 0;
          }
          else
          {
            v27 = v3[52];
            outlined copy of AppIntentExecutor?((uint64_t)v3[51]);
          }
          v28 = (uint64_t *)(v25
                          + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action);
          v29 = *(_QWORD *)(v25
                          + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action);
          *v28 = v26;
          v28[1] = (uint64_t)v27;
          swift_retain();
          outlined copy of AppIntentExecutor?(v26);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
          if (!*v28)
          {
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            if ((_BYTE)v32)
            {
              swift_retain();
              static Update.enqueueAction(_:)();
              swift_release();
            }
          }
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v26);
          outlined consume of Binding<NavigationSplitViewColumn>?(v8, v7);
          swift_release();
          return (uint64_t *)outlined destroy of PlatformItemList.Item((uint64_t)v3);
        }
LABEL_29:
        __break(1u);
        return result;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  return result;
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityQuickActionModifier<A>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityQuickActionModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

double AccessibilityQuickActionProxyModifier.body(content:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double result;
  char v9;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain_n();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)a3 = partial apply for closure #1 in AccessibilityQuickActionProxyModifier.body(content:);
  *(_QWORD *)(a3 + 8) = v6;
  result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)(a3 + 48) = partial apply for closure #2 in AccessibilityQuickActionProxyModifier.body(content:);
  *(_QWORD *)(a3 + 56) = v7;
  *(_BYTE *)(a3 + 64) = v9;
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  return result;
}

uint64_t closure #2 in AccessibilityQuickActionProxyModifier.body(content:)()
{
  char v1;

  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v1)
  {
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
  }
  return swift_release();
}

double protocol witness for ViewModifier.body(content:) in conformance AccessibilityQuickActionProxyModifier@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return AccessibilityQuickActionProxyModifier.body(content:)(*v1, v1[1], a1);
}

uint64_t one-time initialization function for pulse()
{
  uint64_t result;

  result = static Animation.easeInOut(duration:)();
  static AnimationCurve.pulse = result;
  return result;
}

uint64_t one-time initialization function for press()
{
  uint64_t result;

  result = static Animation.easeInOut(duration:)();
  static AnimationCurve.press = result;
  return result;
}

uint64_t AccessibilityQuickActionAnimationModifier.FocusRing.Outline.path(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  uint64_t *v5;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t result;
  _OWORD v22[2];
  char v23;
  _QWORD v24[4];
  char v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  v11 = *((_OWORD *)v5 + 1);
  v22[0] = *(_OWORD *)v5;
  v22[1] = v11;
  v12 = *((_BYTE *)v5 + 32);
  v23 = v12;
  v13 = *v5;
  v14 = v5[1];
  v15 = v5[2];
  v16 = v5[3];
  if ((Path.isEmpty.getter() & 1) != 0)
  {
    v26.origin.x = a2;
    v26.origin.y = a3;
    v26.size.width = a4;
    v26.size.height = a5;
    v27 = CGRectInset(v26, *((double *)v5 + 5) * -0.5, *((double *)v5 + 5) * -0.5);
    x = v27.origin.x;
    y = v27.origin.y;
    width = v27.size.width;
    height = v27.size.height;
    CGRectGetHeight(v27);
    v28.origin.x = x;
    v28.origin.y = y;
    v28.size.width = width;
    v28.size.height = height;
    CGRectGetWidth(v28);
    result = Path.init(roundedRect:cornerRadius:style:)();
    v13 = v24[0];
    v14 = v24[1];
    v15 = v24[2];
    v16 = v24[3];
    v12 = v25;
  }
  else
  {
    outlined init with take of Path.Storage((uint64_t)v22, (uint64_t)v24);
    result = outlined retain of Path.Storage((uint64_t)v24);
  }
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = v16;
  *(_BYTE *)(a1 + 32) = v12;
  return result;
}

double protocol witness for Shape.path(in:) in conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  __int128 *v5;
  __int128 v7;
  double result;
  __int128 v9;
  _OWORD v10[2];
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v7 = v5[1];
  v12 = *v5;
  v13 = v7;
  v14 = v5[2];
  AccessibilityQuickActionAnimationModifier.FocusRing.Outline.path(in:)((uint64_t)v10, a2, a3, a4, a5);
  result = *(double *)v10;
  v9 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v11;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = 256;
  return outlined copy of Path.Storage(v2, v3, v4, v5, v7);
}

double protocol witness for View.body.getter in conformance AccessibilityQuickActionAnimationModifier.FocusRing@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_BYTE *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 40);
  v9 = *(unsigned __int8 *)(v1 + 48);
  outlined copy of Path.Storage(v4, v3, v5, v6, v7);
  outlined copy of Environment<Color?>.Content(v8, v9);
  v10 = specialized Environment.wrappedValue.getter(v8, v9);
  outlined consume of Environment<Color?>.Content(v8, v9);
  if (!v10)
    v10 = static Color.accentColor.getter();
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  v11 = static Alignment.center.getter();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = 0x4008000000000000;
  result = v15;
  *(_QWORD *)(a1 + 48) = v14;
  *(double *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v17;
  *(_QWORD *)(a1 + 80) = v18;
  *(_QWORD *)(a1 + 88) = v10;
  *(_WORD *)(a1 + 96) = 256;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v13;
  return result;
}

uint64_t AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier.body(content:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  if (v12)
    v8 = 1.0;
  else
    v8 = 0.0;
  v9 = Animation.repeatForever(autoreverses:)();
  State.wrappedValue.getter();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_BYTE *)(v10 + 24) = a2;
  *(_QWORD *)(v10 + 32) = a3;
  *(double *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v9;
  *(_BYTE *)(a4 + 16) = v12;
  *(_QWORD *)(a4 + 24) = partial apply for closure #1 in AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier.body(content:);
  *(_QWORD *)(a4 + 32) = v10;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  swift_retain();
  result = State.wrappedValue.getter();
  if (a3)
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier.body(content:)(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16), a1);
}

uint64_t AccessibilityQuickActionAnimationModifier.ActivateModifier.body(content:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  if (v16)
    v8 = 1.0;
  else
    v8 = 0.0;
  State.wrappedValue.getter();
  if (v16)
    v9 = 1.0;
  else
    v9 = 1.2;
  static UnitPoint.center.getter();
  v11 = v10;
  v13 = v12;
  State.wrappedValue.getter();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_BYTE *)(v14 + 24) = a2;
  *(_QWORD *)(v14 + 32) = a3;
  *(double *)a4 = v8;
  *(double *)(a4 + 8) = v9;
  *(double *)(a4 + 16) = v9;
  *(_QWORD *)(a4 + 24) = v11;
  *(_QWORD *)(a4 + 32) = v13;
  *(_QWORD *)(a4 + 40) = a1;
  *(_BYTE *)(a4 + 48) = v16;
  *(_QWORD *)(a4 + 56) = partial apply for closure #1 in AccessibilityQuickActionAnimationModifier.ActivateModifier.body(content:);
  *(_QWORD *)(a4 + 64) = v14;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = 0;
  swift_retain();
  return swift_retain_n();
}

uint64_t closure #1 in AccessibilityQuickActionAnimationModifier.ActivateModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance AccessibilityQuickActionAnimationModifier.ActivateModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return AccessibilityQuickActionAnimationModifier.ActivateModifier.body(content:)(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16), a1);
}

__n128 AccessibilityQuickActionAnimationModifier.body(content:)@<Q0>(char a1@<W1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __n128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 16) = a1;
  *(_BYTE *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  swift_retain();
  static Alignment.center.getter();
  LOBYTE(v11) = a2;
  *((_QWORD *)&v11 + 1) = a3;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  static UnitPoint.center.getter();
  v9 = swift_allocObject();
  *(_BYTE *)(v9 + 16) = a1;
  *(_BYTE *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = a3;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState();
  swift_retain();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_release();
  result = v13;
  *(_OWORD *)a4 = v11;
  *(_OWORD *)(a4 + 16) = v12;
  *(__n128 *)(a4 + 32) = v13;
  *(_OWORD *)(a4 + 48) = v14;
  *(_BYTE *)(a4 + 64) = v15;
  *(_OWORD *)(a4 + 72) = v16;
  *(_OWORD *)(a4 + 88) = v17;
  *(_OWORD *)(a4 + 104) = v18;
  return result;
}

uint64_t closure #1 in AccessibilityQuickActionAnimationModifier.body(content:)@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t result;
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;

  v5 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain_n();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      v7 = v5 & 0xC000000000000001;
      if ((v5 & 0xC000000000000001) != 0)
      {
LABEL_35:
        swift_bridgeObjectRetain();
        MEMORY[0x18D75E3BC](0, v5);
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      v8 = Path.isEmpty.getter();
      swift_bridgeObjectRelease();
      result = swift_release();
      if ((v8 & 1) != 0)
      {
        v21 = v7;
        if (v6 == 1)
          goto LABEL_21;
        if (v7)
        {
          v10 = 1;
          while (1)
          {
            swift_bridgeObjectRetain();
            MEMORY[0x18D75E3BC](v10, v5);
            v11 = Path.isEmpty.getter();
            swift_bridgeObjectRelease();
            result = swift_unknownObjectRelease();
            if ((v11 & 1) == 0)
              break;
            v12 = v10 + 1;
            if (__OFADD__(v10, 1))
            {
              __break(1u);
              goto LABEL_32;
            }
            ++v10;
            if (v12 == v6)
              goto LABEL_21;
          }
        }
        else
        {
          v13 = 5;
          while (1)
          {
            v10 = v13 - 4;
            v7 = *(_QWORD *)(v5 + 8 * v13);
            swift_bridgeObjectRetain();
            swift_retain();
            v14 = Path.isEmpty.getter();
            swift_bridgeObjectRelease();
            result = swift_release();
            if ((v14 & 1) == 0)
              break;
            v15 = v13 - 3;
            if (__OFADD__(v10, 1))
            {
              __break(1u);
              goto LABEL_35;
            }
            ++v13;
            if (v15 == v6)
              goto LABEL_21;
          }
        }
        if (v10 == v6)
          goto LABEL_21;
        if (!v21)
        {
          if ((v10 & 0x8000000000000000) != 0)
          {
LABEL_38:
            __break(1u);
            return result;
          }
          goto LABEL_24;
        }
      }
      else
      {
        v10 = 0;
        if (!v7)
        {
LABEL_24:
          if (v10 >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_37:
            __break(1u);
            goto LABEL_38;
          }
          swift_retain();
LABEL_26:
          v16 = Path.isEmpty.getter();
          swift_bridgeObjectRelease();
          result = swift_release();
          if ((v16 & 1) == 0)
            goto LABEL_27;
          __break(1u);
          goto LABEL_37;
        }
      }
      MEMORY[0x18D75E3BC](v10, v5);
      goto LABEL_26;
    }
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
  }
LABEL_21:
  swift_bridgeObjectRelease();
LABEL_27:
  v17 = static HorizontalAlignment.center.getter();
  closure #2 in closure #1 in AccessibilityQuickActionAnimationModifier.body(content:)(a2);
  v18 = a2 == 0;
  if (a2)
    v19 = 1.0;
  else
    v19 = 0.0;
  v20 = static Animation.default.getter();
  result = outlined consume of Path.Storage(0, 0, 0, 0, 6u);
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(_OWORD *)(a3 + 24) = v22;
  *(_OWORD *)(a3 + 40) = v23;
  *(_OWORD *)(a3 + 56) = v24;
  *(_OWORD *)(a3 + 72) = v25;
  *(_QWORD *)(a3 + 88) = v26;
  *(_QWORD *)(a3 + 96) = v27;
  *(_BYTE *)(a3 + 104) = v28;
  *(_BYTE *)(a3 + 105) = v29;
  *(double *)(a3 + 112) = v19;
  *(_QWORD *)(a3 + 120) = v20;
  *(_BYTE *)(a3 + 128) = v18;
  *(_BYTE *)(a3 + 129) = 0;
  return result;
}

void closure #2 in closure #1 in AccessibilityQuickActionAnimationModifier.body(content:)(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_187988CAC(double a1, double a2, double a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  int64x2_t v9;
  uint64_t result;
  _BYTE v13[88];

  KeyPath = swift_getKeyPath();
  outlined init with take of Path.Storage(v6, (uint64_t)v13);
  outlined retain of Path.Storage((uint64_t)v13);
  v9 = vdupq_n_s64(0x100uLL);
  v9.i64[0] = KeyPath;
  result = v7;
  *(__n128 *)v5 = a5;
  *(__n128 *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 32) = v7;
  *(int64x2_t *)(v5 + 40) = v9;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_QWORD *)(v5 + 72) = 0;
  *(_BYTE *)(v5 + 80) = 0;
  *(_BYTE *)(v5 + 81) = 0;
  return result;
}

void closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_187988E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  *(_BYTE *)(v1 - 73) = 0;
  if (v0)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

double protocol witness for ViewModifier.body(content:) in conformance AccessibilityQuickActionAnimationModifier@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = AccessibilityQuickActionAnimationModifier.body(content:)(*(_BYTE *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

void static AccessibilityQuickActionPromptStyle._style.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void __swiftcall AccessibilityQuickActionPromptStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void __swiftcall AccessibilityQuickActionOutlineStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.accessibilityQuickAction<A, B>(style:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.accessibilityQuickAction<A, B>(style:isActive:content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t EnvironmentValues._accessibilityQuickActionsEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues._accessibilityQuickActionsEnabled.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues._accessibilityQuickActionsEnabled.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;

  v2 = a1 + 1;
  *a1 = v1;
  v3 = (char *)a1 + 9;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *v2 = *v3;
  return EnvironmentValues._accessibilityQuickActionsEnabled.modify;
}

uint64_t EnvironmentValues._accessibilityQuickActionsEnabled.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1879895F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.accessibilityQuickActionsEnabled.getter, a3);
}

uint64_t sub_187989604()
{
  return EnvironmentValues.accessibilityQuickActionsEnabled.setter();
}

uint64_t sub_187989628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues._accessibilityQuickActionsEnabled.getter, a3);
}

uint64_t sub_187989634()
{
  return EnvironmentValues._accessibilityQuickActionsEnabled.setter();
}

uint64_t ObjC metadata update function for AccessibilityQuickActionProxy()
{
  return type metadata accessor for AccessibilityQuickActionProxy();
}

uint64_t type metadata accessor for AccessibilityQuickActionProxy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AccessibilityQuickActionProxy;
  if (!type metadata singleton initialization cache for AccessibilityQuickActionProxy)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for AccessibilityQuickActionProxy()
{
  unint64_t v0;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(319, &lazy cache variable for type metadata for Published<AccessibilityQuickActionState>, (uint64_t)&type metadata for AccessibilityQuickActionState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

ValueMetadata *type metadata accessor for _AccessibilityQuickActionStyle()
{
  return &type metadata for _AccessibilityQuickActionStyle;
}

uint64_t dispatch thunk of static AccessibilityQuickActionStyle._style.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for AccessibilityQuickActionPromptStyle()
{
  return &type metadata for AccessibilityQuickActionPromptStyle;
}

ValueMetadata *type metadata accessor for AccessibilityQuickActionOutlineStyle()
{
  return &type metadata for AccessibilityQuickActionOutlineStyle;
}

uint64_t sub_18798977C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 40);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<AccessibilityQuickActionStyleContext>, MEMORY[0x1E0CE6818], MEMORY[0x1E0CE6808], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v3 = type metadata accessor for ModifiedContent();
  v10[0] = v2;
  v10[1] = lazy protocol witness table accessor for type StyleContextWriter<AccessibilityQuickActionStyleContext> and conformance StyleContextWriter<A>();
  v4 = MEMORY[0x1E0CE2E70];
  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v10);
  type metadata accessor for AccessibilityQuickActionModifier(255, v3, v5, v6);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = v1;
  v9[1] = &protocol witness table for AccessibilityQuickActionModifier<A>;
  return MEMORY[0x18D75FFDC](v4, v7, v9);
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<AccessibilityQuickActionStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<AccessibilityQuickActionStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<AccessibilityQuickActionStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<AccessibilityQuickActionStyleContext>, MEMORY[0x1E0CE6818], MEMORY[0x1E0CE6808], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<AccessibilityQuickActionStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityQuickActionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityQuickActionModifier);
}

uint64_t type metadata completion function for AccessibilityQuickActionModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityQuickActionModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v11 + 8) < 0xFFFFFFFFuLL)
    {
      v12 = *(_OWORD *)v11;
      *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
      *(_OWORD *)v10 = v12;
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v11 + 8);
      *(_BYTE *)(v10 + 16) = *(_BYTE *)(v11 + 16);
      swift_retain();
      swift_retain();
    }
    *(_BYTE *)(v10 + 17) = *(_BYTE *)(v11 + 17);
  }
  return v4;
}

uint64_t destroy for AccessibilityQuickActionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  result = (*(uint64_t (**)(void))(v3 + 8))();
  if (*(_QWORD *)(((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityQuickActionModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v8 + 8) < 0xFFFFFFFFuLL)
  {
    v9 = *(_OWORD *)v8;
    *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
    *(_OWORD *)v7 = v9;
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
    *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
    swift_retain();
    swift_retain();
  }
  *(_BYTE *)(v7 + 17) = *(_BYTE *)(v8 + 17);
  return a1;
}

uint64_t assignWithCopy for AccessibilityQuickActionModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 8);
  if (*(_QWORD *)(v7 + 8) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
      *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    v10 = *(_OWORD *)v8;
    *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
    *(_OWORD *)v7 = v10;
    goto LABEL_8;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_retain();
  swift_release();
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
LABEL_8:
  *(_BYTE *)(v7 + 17) = *(_BYTE *)(v8 + 17);
  return a1;
}

uint64_t initializeWithTake for AccessibilityQuickActionModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = v9;
  *(_BYTE *)(v7 + 17) = *(_BYTE *)(v8 + 17);
  return a1;
}

uint64_t assignWithTake for AccessibilityQuickActionModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)(v8 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
LABEL_5:
    v9 = *(_OWORD *)v8;
    *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
    *(_OWORD *)v7 = v9;
    goto LABEL_6;
  }
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_release();
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  swift_release();
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
LABEL_6:
  *(_BYTE *)(v7 + 17) = *(_BYTE *)(v8 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityQuickActionModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v14 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((v14 + 1) >= 2)
        return v14;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 18;
    v9 = (a2 - v6 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187989E04 + 4 * byte_187C73BA8[v12]))();
  }
}

void storeEnumTagSinglePayload for AccessibilityQuickActionModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 18;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 0xFFFF) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  v11 = ~v6 + a2;
  bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 18);
  if (v7 > 3)
    *a1 = v11;
  else
    *(_WORD *)a1 = v11;
  __asm { BR              X11 }
}

void sub_187989FB0(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x18798A038);
}

void sub_187989FB8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187989FC0);
  JUMPOUT(0x18798A038);
}

void sub_18798A008(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x18798A038);
}

void sub_18798A010(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x18798A038);
}

uint64_t sub_18798A018(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x18798A024);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = a2;
LABEL_6:
    JUMPOUT(0x18798A038);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t storeEnumTagSinglePayload for _AccessibilityQuickActionStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18798A09C + 4 * byte_187C73BBC[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18798A0D0 + 4 * byte_187C73BB7[v4]))();
}

uint64_t sub_18798A0D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18798A0D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18798A0E0);
  return result;
}

uint64_t sub_18798A0EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18798A0F4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18798A0F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18798A100(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _AccessibilityQuickActionStyle.RawValue()
{
  return &type metadata for _AccessibilityQuickActionStyle.RawValue;
}

uint64_t storeEnumTagSinglePayload for AccessibilityQuickActionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_18798A168 + 4 * byte_187C73BC6[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18798A19C + 4 * byte_187C73BC1[v4]))();
}

uint64_t sub_18798A19C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18798A1A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18798A1ACLL);
  return result;
}

uint64_t sub_18798A1B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18798A1C0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_18798A1C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18798A1CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityQuickActionState()
{
  return &type metadata for AccessibilityQuickActionState;
}

ValueMetadata *type metadata accessor for AccessibilityQuickActionsKey()
{
  return &type metadata for AccessibilityQuickActionsKey;
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionState, &type metadata for AccessibilityQuickActionState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AccessibilityQuickActionStyle.RawValue and conformance _AccessibilityQuickActionStyle.RawValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AccessibilityQuickActionStyle.RawValue and conformance _AccessibilityQuickActionStyle.RawValue;
  if (!lazy protocol witness table cache variable for type _AccessibilityQuickActionStyle.RawValue and conformance _AccessibilityQuickActionStyle.RawValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AccessibilityQuickActionStyle.RawValue, &type metadata for _AccessibilityQuickActionStyle.RawValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AccessibilityQuickActionStyle.RawValue and conformance _AccessibilityQuickActionStyle.RawValue);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityQuickActionModifier<A>()
{
  return &protocol witness table for AccessibilityQuickActionModifier<A>;
}

uint64_t key path getter for AccessibilityQuickActionProxy.state : AccessibilityQuickActionProxy@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for AccessibilityQuickActionProxy.state : AccessibilityQuickActionProxy()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for AccessibilityQuickActionModifier.ChildEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityQuickActionModifier.ChildEnvironment);
}

uint64_t type metadata accessor for AccessibilityQuickActionModifier.ProxyTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityQuickActionModifier.ProxyTransform);
}

void type metadata accessor for Attribute<AccessibilityQuickActionProxy>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<AccessibilityQuickActionProxy>)
  {
    type metadata accessor for AccessibilityQuickActionProxy();
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<AccessibilityQuickActionProxy>);
  }
}

uint64_t type metadata accessor for AccessibilityQuickActionModifier.ProxyModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityQuickActionModifier.ProxyModifier);
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionProxyModifier, &unk_1E1B06DF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier);
  }
  return result;
}

uint64_t partial apply for closure #1 in AccessibilityQuickActionProxy.start()()
{
  uint64_t v0;

  return closure #1 in AccessibilityQuickActionProxy.start()(v0);
}

uint64_t partial apply for closure #1 in AccessibilityQuickActionProxy.stop()()
{
  uint64_t v0;

  return closure #1 in AccessibilityQuickActionProxy.stop()(v0);
}

_QWORD *assignWithCopy for AccessibilityQuickActionProxyModifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for AccessibilityQuickActionProxyModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

void *type metadata accessor for AccessibilityQuickActionProxyModifier()
{
  return &unk_1E1B06DF0;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityQuickActionProxyModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in AccessibilityQuickActionModifier<A>.ProxyModifier()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in AccessibilityQuickActionModifier<A>.ProxyTransform()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in AccessibilityQuickActionModifier<A>.ChildEnvironment()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized AccessibilityQuickActionModifier.ProxyModifier.value.getter()
{
  type metadata accessor for AccessibilityQuickActionProxy();
  AGGraphGetValue();
  return 0;
}

uint64_t sub_18798A5BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityQuickActionProxyModifier.body(content:)()
{
  swift_retain();
  AccessibilityQuickActionProxy.viewDidAppear()();
  return swift_release();
}

uint64_t partial apply for closure #2 in AccessibilityQuickActionProxyModifier.body(content:)()
{
  return closure #2 in AccessibilityQuickActionProxyModifier.body(content:)();
}

void *type metadata accessor for AccessibilityQuickActionAnimationModifier()
{
  return &unk_1E1B092C0;
}

uint64_t sub_18798A624()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier, (uint64_t)&unk_1E1B06DF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE5EF8]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionProxyModifier> and conformance _ViewModifier_Content<A>, MEMORY[0x1E0CE5EF8]);
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionProxyModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionProxyModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionProxyModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier, (uint64_t)&unk_1E1B06DF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionProxyModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionAnimationModifier, &unk_1E1B092C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityQuickActionAnimationModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18798A810()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityQuickActionAnimationModifier.body(content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in AccessibilityQuickActionAnimationModifier.body(content:)(a1, *(_BYTE *)(v2 + 16), a2);
}

void partial apply for closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)(a1, a2);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier, (uint64_t)&unk_1E1B092C0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>);
  }
}

void type metadata accessor for _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for _OverlayPreferenceModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, (void (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>);
  }
}

void type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>();
    lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>> and conformance <> _ConditionalContent<A, B>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>);
  }
}

void type metadata accessor for _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, MEMORY[0x1E0CE7C38], (uint64_t)&unk_1E1B09240, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    type metadata accessor for _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>();
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>);
  }
}

void type metadata accessor for _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>)
  {
    v0 = MEMORY[0x1E0CE2E48];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, (uint64_t)&unk_1E1B09240, (uint64_t)&unk_1E1B09088, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>, (uint64_t)&unk_1E1B09240, (uint64_t)&unk_1E1B09108, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v0);
    v1 = type metadata accessor for _ConditionalContent();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing> and conformance <> _ConditionalContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>> and conformance <> _ConditionalContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, MEMORY[0x1E0CE7C38], (uint64_t)&unk_1E1B09240, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing and conformance AccessibilityQuickActionAnimationModifier.FocusRing();
    v4[0] = MEMORY[0x1E0CE7C28];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing and conformance AccessibilityQuickActionAnimationModifier.FocusRing()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing and conformance AccessibilityQuickActionAnimationModifier.FocusRing;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing and conformance AccessibilityQuickActionAnimationModifier.FocusRing)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionAnimationModifier.FocusRing, &unk_1E1B09240);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing and conformance AccessibilityQuickActionAnimationModifier.FocusRing);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, (uint64_t)&unk_1E1B09088, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier);
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>, (uint64_t)&unk_1E1B09108, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, (uint64_t)&unk_1E1B09240, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v8 = v7;
    v9[0] = lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing and conformance AccessibilityQuickActionAnimationModifier.FocusRing();
    v9[1] = a4();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier, &unk_1E1B09088);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionAnimationModifier.ActivateModifier, &unk_1E1B09108);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>);
    v3[1] = &protocol witness table for _AllowsHitTestingModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, (void (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, MEMORY[0x1E0CE74B8]);
    v3[1] = MEMORY[0x1E0CE2BA8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE1BD0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>> and conformance _OverlayPreferenceModifier<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>, MEMORY[0x1E0CE60D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier, (uint64_t)&unk_1E1B092C0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t partial apply for closure #3 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)()
{
  uint64_t v0;

  return closure #1 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)(*(unsigned __int8 *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t partial apply for closure #2 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)()
{
  uint64_t v0;

  return closure #1 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)(*(unsigned __int8 *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t outlined retain of Path.Storage(uint64_t a1)
{
  outlined copy of Path.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

void *type metadata accessor for AccessibilityQuickActionAnimationModifier.ActivateModifier()
{
  return &unk_1E1B09108;
}

void *type metadata accessor for AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier()
{
  return &unk_1E1B09088;
}

uint64_t destroy for AccessibilityQuickActionAnimationModifier.FocusRing(uint64_t a1)
{
  outlined consume of Path.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return outlined consume of Environment<Color?>.Content(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t initializeWithCopy for AccessibilityQuickActionAnimationModifier.FocusRing(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of Path.Storage(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of Environment<Color?>.Content(v9, v10);
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = v10;
  return a1;
}

uint64_t assignWithCopy for AccessibilityQuickActionAnimationModifier.FocusRing(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of Path.Storage(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v13 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of Path.Storage(v9, v10, v11, v12, v13);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of Environment<Color?>.Content(v14, v15);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v14;
  *(_BYTE *)(a1 + 48) = v15;
  outlined consume of Environment<Color?>.Content(v16, v17);
  return a1;
}

uint64_t assignWithTake for AccessibilityQuickActionAnimationModifier.FocusRing(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of Path.Storage(v5, v6, v7, v8, v10);
  v11 = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = v11;
  outlined consume of Environment<Color?>.Content(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityQuickActionAnimationModifier.FocusRing(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityQuickActionAnimationModifier.FocusRing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for AccessibilityQuickActionAnimationModifier.FocusRing()
{
  return &unk_1E1B09240;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>, _AppearanceActionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ValueActionModifier2<AccessibilityQuickActionState> and conformance _ValueActionModifier2<A>);
    v3[1] = MEMORY[0x1E0CE5EF8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ValueActionModifier2<AccessibilityQuickActionState>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState, (uint64_t)&type metadata for AccessibilityQuickActionState, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ValueActionModifier2<AccessibilityQuickActionState> and conformance _ValueActionModifier2<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ValueActionModifier2<AccessibilityQuickActionState> and conformance _ValueActionModifier2<A>;
  if (!lazy protocol witness table cache variable for type _ValueActionModifier2<AccessibilityQuickActionState> and conformance _ValueActionModifier2<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ValueActionModifier2<AccessibilityQuickActionState>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState, (uint64_t)&type metadata for AccessibilityQuickActionState, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE52E8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ValueActionModifier2<AccessibilityQuickActionState> and conformance _ValueActionModifier2<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityQuickActionAnimationModifier.ActivateModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityQuickActionAnimationModifier.FocusRing()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier.body(content:)()
{
  uint64_t v0;

  return closure #1 in AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier.body(content:)(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t partial apply for closure #1 in AccessibilityQuickActionAnimationModifier.ActivateModifier.body(content:)()
{
  uint64_t v0;

  return closure #1 in AccessibilityQuickActionAnimationModifier.ActivateModifier.body(content:)(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t destroy for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t a1)
{
  return outlined consume of Path.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of Path.Storage(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of Path.Storage(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v13 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of Path.Storage(v9, v10, v11, v12, v13);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 v10;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of Path.Storage(v5, v6, v7, v8, v10);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for AccessibilityQuickActionAnimationModifier.FocusRing.Outline()
{
  return &unk_1E1B091C0;
}

uint64_t sub_18798B840()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StrokeShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, Color, EmptyView> and conformance StrokeShapeView<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StrokeShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, Color, EmptyView>, MEMORY[0x1E0CE2F40]);
}

void type metadata accessor for StrokeShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, Color, EmptyView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StrokeShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, Color, EmptyView>)
  {
    lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline();
    v0 = type metadata accessor for StrokeShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StrokeShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, Color, EmptyView>);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionAnimationModifier.FocusRing.Outline, &unk_1E1B091C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionAnimationModifier.FocusRing.Outline, &unk_1E1B091C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityQuickActionAnimationModifier.FocusRing.Outline, &unk_1E1B091C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>);
    v3[1] = MEMORY[0x1E0CE5EF8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier, (uint64_t)&unk_1E1B09088);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v6 = type metadata accessor for ModifiedContent();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier, (uint64_t)&unk_1E1B09088);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = MEMORY[0x1E0CE2BA8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier, (uint64_t)&unk_1E1B09088, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>);
    v3[1] = MEMORY[0x1E0CE5EF8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE45D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier, (uint64_t)&unk_1E1B09108);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE1BD0]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier, (uint64_t)&unk_1E1B09108);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = MEMORY[0x1E0CE2BA8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier, (uint64_t)&unk_1E1B09108, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityQuickActionAnimationModifier.FocusRing.Outline()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle>, MEMORY[0x1E0CE0E50]);
}

void type metadata accessor for _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle>);
  }
}

unint64_t instantiation function for generic protocol witness table for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline();
  result = lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void static AccessibilityQuickActionOutlineStyle._style.getter()
{
  static AccessibilityQuickActionPromptStyle._style.getter();
}

uint64_t partial apply for closure #1 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)()
{
  return partial apply for closure #3 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)();
}

uint64_t partial apply for closure #4 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)()
{
  return partial apply for closure #2 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityNodeList(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[1];
  v3 = a2[1];
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2) & (v2 == v3);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AccessibilityNodesKey(uint64_t a1, void (*a2)(unint64_t *__return_ptr))
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;

  a2(&v6);
  v3 = v6;
  v4 = v7;
  if (v7 <= *(_QWORD *)(a1 + 8))
    v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  return specialized Array.append<A>(contentsOf:)(v3);
}

Swift::Void __swiftcall _ViewInputs.enableAccessibility()()
{
  type metadata accessor for _AnyPreferenceKey<AccessibilityNodesKey>();
  lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityNodesKey> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
}

_QWORD *assignWithCopy for AccessibilityNodeList(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for AccessibilityNodeList(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *specialized UIView.firstAncestorWhere(_:)(void *a1)
{
  id v2;
  id v4;
  uint64_t v5;

  objc_opt_self();
  if (swift_dynamicCastObjCClass() || (objc_opt_self(), swift_dynamicCastObjCClass()))
  {
    v2 = a1;
    return a1;
  }
  v4 = objc_msgSend(a1, sel_superview);
  a1 = v4;
  if (!v4)
    return a1;
  v5 = specialized UIView.firstAncestorWhere(_:)(v4);

  return (void *)v5;
}

{
  return specialized UIView.firstAncestorWhere(_:)(a1, (uint64_t (*)(id))specialized UIView.firstAncestorWhere(_:));
}

void *specialized UIView.firstAncestorWhere(_:)(void *a1, uint64_t (*a2)(id))
{
  void *v4;
  id v5;
  id v7;
  uint64_t v8;

  swift_getObjectType();
  if (swift_conformsToProtocol2())
    v4 = a1;
  else
    v4 = 0;
  if (v4)
  {
    v5 = a1;
    return a1;
  }
  v7 = objc_msgSend(a1, sel_superview);
  a1 = v7;
  if (!v7)
    return a1;
  v8 = a2(v7);

  return (void *)v8;
}

uint64_t UIView.constrainToView(_:exceptEdges:identifier:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  void *v5;
  id v9;
  id v10;
  id v11;
  Swift::String v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  Swift::String v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  Swift::String v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  Swift::String v30;
  id v31;
  uint64_t v33;

  v5 = v4;
  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v33 = MEMORY[0x1E0DEE9D8];
  if ((Edge.Set.contains(_:)() & 1) == 0)
  {
    v9 = objc_msgSend(v4, sel_topAnchor);
    v10 = objc_msgSend(a1, sel_topAnchor);
    v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

    objc_msgSend(v11, sel_setActive_, 1);
    if (a4)
    {
      v12._countAndFlagsBits = a3;
      v12._object = a4;
      String.append(_:)(v12);
      v13 = (void *)MEMORY[0x18D75CC88](762343284, 0xE400000000000000);
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = 0;
    }
    objc_msgSend(v11, sel_setIdentifier_, v13);

    v14 = v11;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

  }
  if ((Edge.Set.contains(_:)() & 1) == 0)
  {
    v15 = objc_msgSend(v5, sel_leadingAnchor);
    v16 = objc_msgSend(a1, sel_leadingAnchor);
    v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

    objc_msgSend(v17, sel_setActive_, 1);
    if (a4)
    {
      v18._countAndFlagsBits = a3;
      v18._object = a4;
      String.append(_:)(v18);
      v19 = (void *)MEMORY[0x18D75CC88](0x2D676E696461656CLL, 0xE800000000000000);
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = 0;
    }
    objc_msgSend(v17, sel_setIdentifier_, v19);

    v20 = v17;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

  }
  if ((Edge.Set.contains(_:)() & 1) == 0)
  {
    v21 = objc_msgSend(v5, sel_bottomAnchor);
    v22 = objc_msgSend(a1, sel_bottomAnchor);
    v23 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v22);

    objc_msgSend(v23, sel_setActive_, 1);
    if (a4)
    {
      v24._countAndFlagsBits = a3;
      v24._object = a4;
      String.append(_:)(v24);
      v25 = (void *)MEMORY[0x18D75CC88](0x2D6D6F74746F62, 0xE700000000000000);
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = 0;
    }
    objc_msgSend(v23, sel_setIdentifier_, v25);

    v26 = v23;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

  }
  if ((Edge.Set.contains(_:)() & 1) == 0)
  {
    v27 = objc_msgSend(v5, sel_trailingAnchor);
    v28 = objc_msgSend(a1, sel_trailingAnchor);
    v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);

    objc_msgSend(v29, sel_setActive_, 1);
    if (a4)
    {
      v30._countAndFlagsBits = a3;
      v30._object = a4;
      String.append(_:)(v30);
      a4 = (void *)MEMORY[0x18D75CC88](0x676E696C69617274, 0xE90000000000002DLL);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v29, sel_setIdentifier_, a4);

    v31 = v29;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

  }
  return v33;
}

uint64_t UIViewController.firstDescendantWhere(_:)(uint64_t (*a1)(void *), uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;

  v3 = (uint64_t)v2;
  if ((a1(v2) & 1) != 0)
  {
    v6 = v2;
  }
  else
  {
    v7 = objc_msgSend(v2, sel_childViewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
      goto LABEL_16;
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v9)
    {
      v10 = 4;
      while (1)
      {
        v11 = (v8 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x18D75E3BC](v10 - 4, v8)
            : *(id *)(v8 + 8 * v10);
        v12 = v11;
        v13 = v10 - 3;
        if (__OFADD__(v10 - 4, 1))
          break;
        v3 = UIViewController.firstDescendantWhere(_:)(a1, a2);

        if (v3)
        {
          swift_bridgeObjectRelease();
          return v3;
        }
        ++v10;
        if (v13 == v9)
          goto LABEL_12;
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

void *specialized UIView.firstDescendantWhere(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;

  type metadata accessor for LiftPreviewLabelMarkingView();
  v6 = swift_dynamicCastClass();
  if (v6
    && *(_DWORD *)(v6 + OBJC_IVAR____TtC7SwiftUI27LiftPreviewLabelMarkingView_viewIdentity) == (_DWORD)a2
    && (a3 & ~*(_QWORD *)(v6 + OBJC_IVAR____TtC7SwiftUI27LiftPreviewLabelMarkingView_kind)) == 0)
  {
    v7 = a1;
  }
  else
  {
    v8 = objc_msgSend(a1, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v9 >> 62)
      goto LABEL_18;
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v10)
    {
      v11 = 4;
      while (1)
      {
        v12 = (v9 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x18D75E3BC](v11 - 4, v9)
            : *(id *)(v9 + 8 * v11);
        v13 = v12;
        v14 = v11 - 3;
        if (__OFADD__(v11 - 4, 1))
          break;
        a1 = (void *)specialized UIView.firstDescendantWhere(_:)(v12, a2, a3);

        if (a1)
        {
          swift_bridgeObjectRelease();
          return a1;
        }
        ++v11;
        if (v14 == v10)
          goto LABEL_14;
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  return a1;
}

id specialized implicit closure #1 in UIView.ancestors.getter@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_superview);
  *a2 = result;
  return result;
}

id _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(void *a1, uint64_t (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v6;
  id v7;
  char v8;
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;

  type metadata accessor for MatchedTransitionSourceMarkingView();
  v6 = swift_dynamicCastClass();
  if (v6 && (v18 = v6, v7 = a1, v8 = a2(&v18), v7, (v8 & 1) != 0))
  {
    v9 = v7;
  }
  else
  {
    v10 = objc_msgSend(a1, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v11 >> 62)
      goto LABEL_17;
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v12)
    {
      v13 = 4;
      while (1)
      {
        v14 = (v11 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x18D75E3BC](v13 - 4, v11)
            : *(id *)(v11 + 8 * v13);
        v15 = v14;
        v16 = v13 - 3;
        if (__OFADD__(v13 - 4, 1))
          break;
        v7 = (id)_sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(v14, a2, a3);

        if (v7)
        {
          swift_bridgeObjectRelease();
          return v7;
        }
        ++v13;
        if (v16 == v12)
          goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
      v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v7;
}

void specialized UIView.forEachDescendant(_:)(void *a1, void (*a2)(void *, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  void *v15;

  swift_getObjectType();
  v6 = swift_conformsToProtocol2();
  if (v6)
    v7 = v6;
  else
    v7 = 0;
  if (v6)
    v8 = a1;
  else
    v8 = 0;
  if (v8)
  {
    v9 = a1;
    a2(v8, v7);

  }
  v10 = objc_msgSend(a1, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v11 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_11;
LABEL_18:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_18;
LABEL_11:
  if (v12 >= 1)
  {
    for (i = 0; i != v12; ++i)
    {
      if ((v11 & 0xC000000000000001) != 0)
        v14 = (id)MEMORY[0x18D75E3BC](i, v11);
      else
        v14 = *(id *)(v11 + 8 * i + 32);
      v15 = v14;
      specialized UIView.forEachDescendant(_:)(v14, a2, a3);

    }
    goto LABEL_18;
  }
  __break(1u);
}

BOOL static KeyPress.Result.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t View.onKeyPress(_:action:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a5;
  v18 = a4;
  v8 = type metadata accessor for KeyPress.Handler.Subject(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (uint64_t *)((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *a1;
  v13 = a1[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<KeyEquivalent>, (uint64_t)&type metadata for KeyEquivalent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_QWORD *)(inited + 32) = v12;
  *(_QWORD *)(inited + 40) = v13;
  v15 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_bridgeObjectRetain();
  swift_arrayDestroy();
  *v11 = v15;
  swift_storeEnumTagMultiPayload();
  v20 = 3;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  swift_retain();
  View.onKeyPress(subject:phases:action:)((uint64_t)v11, &v20, (uint64_t)partial apply for implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:), v16, v18, v19);
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for KeyPress.Handler.Subject);
}

uint64_t View.onKeyPress(subject:phases:action:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v12 = type metadata accessor for KeyPressModifier(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a2;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v15, type metadata accessor for KeyPress.Handler.Subject);
  v17 = type metadata accessor for KeyPress.Handler(0);
  *(_QWORD *)&v15[*(int *)(v17 + 20)] = v16;
  v18 = &v15[*(int *)(v17 + 24)];
  *(_QWORD *)v18 = a3;
  *((_QWORD *)v18 + 1) = a4;
  swift_retain();
  MEMORY[0x18D75B4AC](v15, a5, v12, a6);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for KeyPressModifier);
}

uint64_t View.onKeyPress(_:phases:action:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  Swift::Int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a6;
  v20 = a4;
  v21 = a5;
  v9 = type metadata accessor for KeyPress.Handler.Subject(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *a1;
  v14 = a1[1];
  v15 = *a2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<KeyEquivalent>, (uint64_t)&type metadata for KeyEquivalent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_QWORD *)(inited + 32) = v13;
  *(_QWORD *)(inited + 40) = v14;
  v17 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_bridgeObjectRetain();
  swift_arrayDestroy();
  *v12 = v17;
  swift_storeEnumTagMultiPayload();
  v23 = v15;
  View.onKeyPress(subject:phases:action:)((uint64_t)v12, &v23, a3, v20, v21, v22);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for KeyPress.Handler.Subject);
}

void static KeyPress.Phases.down.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static KeyPress.Phases.repeat.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t View.onKeyPress(phases:action:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v10 = type metadata accessor for KeyPress.Handler.Subject(0);
  MEMORY[0x1E0C80A78](v10, v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  swift_storeEnumTagMultiPayload();
  v16 = v13;
  View.onKeyPress(subject:phases:action:)((uint64_t)v12, &v16, a2, a3, a4, a5);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for KeyPress.Handler.Subject);
}

void KeyPress.phase.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t KeyPress.key.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t KeyPress.characters.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t KeyPress.modifiers.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

SwiftUI::KeyPress::Phases __swiftcall KeyPress.Phases.init(rawValue:)(SwiftUI::KeyPress::Phases rawValue)
{
  SwiftUI::KeyPress::Phases *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static KeyPress.Phases.up.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static KeyPress.Phases.all.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t KeyPress.Phases.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;

  v1 = *v0;
  if (*v0 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v4 = *((_QWORD *)v2 + 2);
    v3 = *((_QWORD *)v2 + 3);
    v5 = v4 + 1;
    if (v4 >= v3 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v5;
    v6 = &v2[16 * v4];
    v7 = 1819042094;
    v8 = 0xE400000000000000;
    goto LABEL_23;
  }
  if ((v1 & 1) != 0)
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v16 = *((_QWORD *)v2 + 2);
    v15 = *((_QWORD *)v2 + 3);
    if (v16 >= v15 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v16 + 1;
    v17 = &v2[16 * v16];
    *((_QWORD *)v17 + 4) = 0x6E776F642ELL;
    *((_QWORD *)v17 + 5) = 0xE500000000000000;
    if ((v1 & 2) == 0)
    {
LABEL_7:
      if ((v1 & 4) == 0)
        goto LABEL_8;
LABEL_18:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
      v22 = *((_QWORD *)v2 + 2);
      v21 = *((_QWORD *)v2 + 3);
      v5 = v22 + 1;
      if (v22 >= v21 >> 1)
        v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v2);
      *((_QWORD *)v2 + 2) = v5;
      v6 = &v2[16 * v22];
      v7 = 7370030;
      v8 = 0xE300000000000000;
LABEL_23:
      *((_QWORD *)v6 + 4) = v7;
      *((_QWORD *)v6 + 5) = v8;
      if (v5 == 1)
        goto LABEL_24;
      goto LABEL_9;
    }
  }
  else
  {
    v2 = (char *)MEMORY[0x1E0DEE9D8];
    if ((v1 & 2) == 0)
      goto LABEL_7;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v19 = *((_QWORD *)v2 + 2);
  v18 = *((_QWORD *)v2 + 3);
  if (v19 >= v18 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v19 + 1;
  v20 = &v2[16 * v19];
  *((_QWORD *)v20 + 4) = 0x7461657065722ELL;
  *((_QWORD *)v20 + 5) = 0xE700000000000000;
  if ((v1 & 4) != 0)
    goto LABEL_18;
LABEL_8:
  if (*((_QWORD *)v2 + 2) == 1)
  {
LABEL_24:
    v14 = *((_QWORD *)v2 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v14;
  }
LABEL_9:
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  swift_bridgeObjectRetain();
  v9 = BidirectionalCollection<>.joined(separator:)();
  v11 = v10;
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 93;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  return 91;
}

uint64_t KeyPress.Phases.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void KeyPress.Result.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int KeyPress.Result.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t KeyPress.debugDescription.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(void **)(v0 + 32);
  _StringGuts.grow(_:)(18);
  v3._countAndFlagsBits = 0x737365725079654BLL;
  v3._object = (void *)0xE900000000000028;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 2236460;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v2;
  v5._object = v1;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 10530;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance KeyPressModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance KeyPressModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance KeyPressModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance KeyPressModifier()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type KeyPressModifier and conformance KeyPressModifier, type metadata accessor for KeyPressModifier, (uint64_t)&protocol conformance descriptor for KeyPressModifier);
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t View.onKeyPress(keys:phases:action:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v12 = type metadata accessor for KeyPress.Handler.Subject(0);
  MEMORY[0x1E0C80A78](v12, v12);
  v14 = (uint64_t *)((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *a2;
  *v14 = a1;
  swift_storeEnumTagMultiPayload();
  v18 = v15;
  swift_bridgeObjectRetain();
  View.onKeyPress(subject:phases:action:)((uint64_t)v14, &v18, a3, a4, a5, a6);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, type metadata accessor for KeyPress.Handler.Subject);
}

uint64_t View.onKeyPress(characters:phases:action:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v12 = type metadata accessor for KeyPress.Handler.Subject(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a2;
  v17 = type metadata accessor for CharacterSet();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, a1, v17);
  swift_storeEnumTagMultiPayload();
  v20 = v16;
  View.onKeyPress(subject:phases:action:)((uint64_t)v15, &v20, a3, a4, a5, a6);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for KeyPress.Handler.Subject);
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _SetStorage<NSURLResourceKey>(0, &lazy cache variable for type metadata for _SetStorage<NSURLResourceKey>, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, &lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v31 = v1;
    v32 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      v7 = v6;
      String.hash(into:)();
      v8 = Hasher._finalize()();
      result = swift_bridgeObjectRelease();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v8 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_4;
        v21 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v21;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
            goto LABEL_3;
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v7;
      v28 = *(_QWORD *)(v3 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  _BYTE v23[24];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[48];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E8];
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<ToolbarPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v3 = static _SetStorage.allocate(capacity:)();
  v4 = 0;
  v5 = v3 + 56;
  v18 = v1;
  do
  {
    outlined init with copy of ToolbarPlacement.Role(a1 + 32 + 40 * v4, (uint64_t)v31);
    Hasher.init(_seed:)();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v31, (uint64_t)&v28);
    switch(*((_QWORD *)&v29 + 1))
    {
      case 0:
        v6 = 0;
        goto LABEL_14;
      case 1:
        v6 = 1;
        goto LABEL_14;
      case 2:
        v6 = 2;
        goto LABEL_14;
      case 3:
        v6 = 3;
        goto LABEL_14;
      case 4:
        v6 = 4;
        goto LABEL_14;
      case 5:
        v6 = 5;
        goto LABEL_14;
      case 6:
        v6 = 7;
LABEL_14:
        Hasher._combine(_:)(v6);
        break;
      default:
        v21[0] = v28;
        v21[1] = v29;
        v22 = v30;
        Hasher._combine(_:)(6uLL);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v21);
        break;
    }
    v7 = Hasher._finalize()();
    v8 = ~(-1 << *(_BYTE *)(v3 + 32));
    v9 = v7 & v8;
    v10 = (v7 & (unint64_t)v8) >> 6;
    v11 = *(_QWORD *)(v5 + 8 * v10);
    v12 = 1 << (v7 & v8);
    if ((v12 & v11) != 0)
    {
      while (1)
      {
        outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v3 + 48) + 40 * v9, (uint64_t)&v28);
        outlined init with copy of ToolbarPlacement.Role((uint64_t)&v28, (uint64_t)v23);
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v31, (uint64_t)&v25);
        switch(v24)
        {
          case 0:
            if (*((_QWORD *)&v26 + 1))
              goto LABEL_32;
            goto LABEL_3;
          case 1:
            if (*((_QWORD *)&v26 + 1) == 1)
              goto LABEL_3;
            goto LABEL_32;
          case 2:
            if (*((_QWORD *)&v26 + 1) == 2)
              goto LABEL_3;
            goto LABEL_32;
          case 3:
            if (*((_QWORD *)&v26 + 1) == 3)
              goto LABEL_3;
            goto LABEL_32;
          case 4:
            if (*((_QWORD *)&v26 + 1) == 4)
              goto LABEL_3;
            goto LABEL_32;
          case 5:
            if (*((_QWORD *)&v26 + 1) == 5)
              goto LABEL_3;
            goto LABEL_32;
          case 6:
            if (*((_QWORD *)&v26 + 1) != 6)
              goto LABEL_32;
            goto LABEL_3;
          default:
            outlined init with copy of ToolbarPlacement.Role((uint64_t)v23, (uint64_t)v21);
            if (*((_QWORD *)&v26 + 1) >= 7uLL)
            {
              v19[0] = v25;
              v19[1] = v26;
              v20 = v27;
              v13 = MEMORY[0x18D75E284](v21, v19);
              outlined destroy of AnyHashable((uint64_t)v19);
              outlined destroy of AnyHashable((uint64_t)v21);
              if ((v13 & 1) != 0)
              {
LABEL_3:
                outlined destroy of ToolbarPlacement.Role((uint64_t)v23);
                outlined destroy of ToolbarPlacement.Role((uint64_t)&v28);
                outlined destroy of ToolbarPlacement.Role((uint64_t)v31);
                goto LABEL_4;
              }
              outlined destroy of ToolbarPlacement.Role((uint64_t)v23);
            }
            else
            {
              outlined destroy of AnyHashable((uint64_t)v21);
LABEL_32:
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role));
            }
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v28);
            v9 = (v9 + 1) & v8;
            v10 = v9 >> 6;
            v11 = *(_QWORD *)(v5 + 8 * (v9 >> 6));
            v12 = 1 << v9;
            if ((v11 & (1 << v9)) == 0)
              goto LABEL_37;
            break;
        }
      }
    }
LABEL_37:
    *(_QWORD *)(v5 + 8 * v10) = v12 | v11;
    outlined init with take of ToolbarPlacement.Role((uint64_t)v31, *(_QWORD *)(v3 + 48) + 40 * v9);
    v14 = *(_QWORD *)(v3 + 16);
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
    {
      __break(1u);
      JUMPOUT(0x18798E080);
    }
    *(_QWORD *)(v3 + 16) = v16;
LABEL_4:
    ++v4;
  }
  while (v4 != v18);
  return v3;
}

{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16))
  {
    type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<PresentationDetent>, (void (*)(void))lazy protocol witness table accessor for type PresentationDetent and conformance PresentationDetent);
    static _SetStorage.allocate(capacity:)();
    v2 = *(_QWORD *)(a1 + 40);
    Hasher.init(_seed:)();
    __asm { BR              X8 }
  }
  return MEMORY[0x1E0DEE9E8];
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<Namespace.ID>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(_QWORD *)(v14 + 8 * v10) == v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(_QWORD *)(v14 + 8 * v10) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_QWORD *)(v14 + 8 * v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<String>, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<KeyEquivalent>, (void (*)(void))lazy protocol witness table accessor for type KeyEquivalent and conformance KeyEquivalent);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        if (*v16 == v8 && v16[1] == v7)
          goto LABEL_3;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) != 0)
          goto LABEL_3;
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
      swift_bridgeObjectRetain();
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  id v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char v34;
  uint64_t v35;
  id v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      type metadata accessor for _SetStorage<NSURLResourceKey>(0, &lazy cache variable for type metadata for _SetStorage<UIGestureRecognizer>, (uint64_t (*)(uint64_t))type metadata accessor for UIGestureRecognizer, &lazy protocol witness table cache variable for type UIGestureRecognizer and conformance NSObject, MEMORY[0x1E0DEFCF8]);
      v3 = static _SetStorage.allocate(capacity:)();
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v4)
        return;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x1E0DEE9E8];
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return;
LABEL_9:
  v6 = v3 + 56;
  v42 = v4;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v7 = 0;
    v40 = v1;
    while (1)
    {
      v8 = MEMORY[0x18D75E3BC](v7, v1);
      v9 = __OFADD__(v7++, 1);
      if (v9)
      {
        __break(1u);
        goto LABEL_37;
      }
      v10 = v8;
      v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v3 + 40));
      v12 = -1 << *(_BYTE *)(v3 + 32);
      v13 = v11 & ~v12;
      v14 = v13 >> 6;
      v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
      v16 = 1 << v13;
      if (((1 << v13) & v15) != 0)
      {
        type metadata accessor for UIGestureRecognizer();
        v17 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
        v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0)
        {
LABEL_11:
          swift_unknownObjectRelease();
          v1 = v40;
          goto LABEL_12;
        }
        v19 = ~v12;
        while (1)
        {
          v13 = (v13 + 1) & v19;
          v14 = v13 >> 6;
          v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
          v16 = 1 << v13;
          if ((v15 & (1 << v13)) == 0)
            break;
          v20 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
          v21 = static NSObject.== infix(_:_:)();

          if ((v21 & 1) != 0)
            goto LABEL_11;
        }
        v1 = v40;
      }
      *(_QWORD *)(v6 + 8 * v14) = v16 | v15;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v13) = v10;
      v22 = *(_QWORD *)(v3 + 16);
      v9 = __OFADD__(v22, 1);
      v23 = v22 + 1;
      if (v9)
        goto LABEL_38;
      *(_QWORD *)(v3 + 16) = v23;
LABEL_12:
      if (v7 == v42)
        return;
    }
  }
  v24 = 0;
  v41 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v24 != v41)
  {
    v25 = *(_QWORD *)(v3 + 40);
    v26 = *(id *)(v1 + 32 + 8 * v24);
    v27 = NSObject._rawHashValue(seed:)(v25);
    v28 = -1 << *(_BYTE *)(v3 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    v31 = *(_QWORD *)(v6 + 8 * (v29 >> 6));
    v32 = 1 << v29;
    if (((1 << v29) & v31) != 0)
    {
      type metadata accessor for UIGestureRecognizer();
      v33 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v29);
      v34 = static NSObject.== infix(_:_:)();

      if ((v34 & 1) != 0)
        goto LABEL_24;
      v35 = ~v28;
      v29 = (v29 + 1) & v35;
      v30 = v29 >> 6;
      v31 = *(_QWORD *)(v6 + 8 * (v29 >> 6));
      v32 = 1 << v29;
      if ((v31 & (1 << v29)) != 0)
      {
        while (1)
        {
          v36 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v29);
          v37 = static NSObject.== infix(_:_:)();

          if ((v37 & 1) != 0)
            break;
          v29 = (v29 + 1) & v35;
          v30 = v29 >> 6;
          v31 = *(_QWORD *)(v6 + 8 * (v29 >> 6));
          v32 = 1 << v29;
          if ((v31 & (1 << v29)) == 0)
            goto LABEL_32;
        }
LABEL_24:

        v4 = v42;
        goto LABEL_25;
      }
LABEL_32:
      v4 = v42;
    }
    *(_QWORD *)(v6 + 8 * v30) = v32 | v31;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v29) = v26;
    v38 = *(_QWORD *)(v3 + 16);
    v9 = __OFADD__(v38, 1);
    v39 = v38 + 1;
    if (v9)
      goto LABEL_39;
    *(_QWORD *)(v3 + 16) = v39;
LABEL_25:
    if (++v24 == v4)
      return;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t sub_18798EBB0()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type KeyPress.Phases and conformance KeyPress.Phases()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases;
  if (!lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyPress.Phases, &type metadata for KeyPress.Phases);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases;
  if (!lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyPress.Phases, &type metadata for KeyPress.Phases);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases;
  if (!lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyPress.Phases, &type metadata for KeyPress.Phases);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases;
  if (!lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyPress.Phases, &type metadata for KeyPress.Phases);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type KeyPress.Result and conformance KeyPress.Result()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyPress.Result and conformance KeyPress.Result;
  if (!lazy protocol witness table cache variable for type KeyPress.Result and conformance KeyPress.Result)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyPress.Result, &type metadata for KeyPress.Result);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyPress.Result and conformance KeyPress.Result);
  }
  return result;
}

uint64_t destroy for KeyPress()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KeyPress(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for KeyPress(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for KeyPress(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for KeyPress()
{
  return &type metadata for KeyPress;
}

ValueMetadata *type metadata accessor for KeyPress.Phases()
{
  return &type metadata for KeyPress.Phases;
}

uint64_t storeEnumTagSinglePayload for KeyPress.Result(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18798EEE4 + 4 * byte_187C74425[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18798EF18 + 4 * byte_187C74420[v4]))();
}

uint64_t sub_18798EF18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18798EF20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18798EF28);
  return result;
}

uint64_t sub_18798EF34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18798EF3CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18798EF40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18798EF48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyPress.Result()
{
  return &type metadata for KeyPress.Result;
}

uint64_t sub_18798EF64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for KeyPressModifier(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for KeyPressModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t type metadata accessor for KeyPressModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for KeyPressModifier);
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyPressModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = type metadata accessor for KeyPress.Handler(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for KeyPress.Handler.Subject(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for CharacterSet();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 20));
    v11 = *(int *)(v6 + 24);
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for KeyPressModifier(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;

  type metadata accessor for KeyPress.Handler.Subject(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v3 = type metadata accessor for CharacterSet();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
  }
  type metadata accessor for KeyPress.Handler(0);
  return swift_release();
}

_QWORD *initializeWithCopy for KeyPressModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v4 = type metadata accessor for KeyPress.Handler.Subject(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v6 = type metadata accessor for CharacterSet();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  v7 = type metadata accessor for KeyPress.Handler(0);
  *(_QWORD *)((char *)a1 + *(int *)(v7 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 20));
  v8 = *(int *)(v7 + 24);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for KeyPressModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for KeyPress.Handler.Subject);
    v4 = type metadata accessor for KeyPress.Handler.Subject(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v6 = type metadata accessor for CharacterSet();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  v7 = type metadata accessor for KeyPress.Handler(0);
  *(_QWORD *)((char *)a1 + *(int *)(v7 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 20));
  v8 = *(int *)(v7 + 24);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for KeyPressModifier(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for KeyPress.Handler.Subject(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = type metadata accessor for CharacterSet();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  v6 = type metadata accessor for KeyPress.Handler(0);
  *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
  *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
  return a1;
}

char *assignWithTake for KeyPressModifier(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for KeyPress.Handler.Subject);
    v4 = type metadata accessor for KeyPress.Handler.Subject(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = type metadata accessor for CharacterSet();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  v6 = type metadata accessor for KeyPress.Handler(0);
  *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
  *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyPressModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18798F4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyPress.Handler(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for KeyPressModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18798F528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyPress.Handler(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for KeyPressModifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for KeyPress.Handler(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyPress.Handler(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for KeyPress.Handler.Subject(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for CharacterSet();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    v11 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for KeyPress.Handler(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;

  type metadata accessor for KeyPress.Handler.Subject(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v3 = type metadata accessor for CharacterSet();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

_QWORD *initializeWithCopy for KeyPress.Handler(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = type metadata accessor for KeyPress.Handler.Subject(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for CharacterSet();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for KeyPress.Handler(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for KeyPress.Handler.Subject);
    v6 = type metadata accessor for KeyPress.Handler.Subject(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for CharacterSet();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  v9 = *(int *)(a3 + 24);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for KeyPress.Handler(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for KeyPress.Handler.Subject(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for CharacterSet();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  return a1;
}

char *assignWithTake for KeyPress.Handler(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for KeyPress.Handler.Subject);
    v6 = type metadata accessor for KeyPress.Handler.Subject(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for CharacterSet();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyPress.Handler()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18798FAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for KeyPress.Handler.Subject(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyPress.Handler()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18798FB38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for KeyPress.Handler.Subject(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyPress.Handler.Subject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v9 = type metadata accessor for CharacterSet();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for KeyPress.Handler.Subject(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for CharacterSet();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else if (!(_DWORD)result)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for KeyPress.Handler.Subject(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for CharacterSet();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *assignWithCopy for KeyPress.Handler.Subject(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for KeyPress.Handler.Subject);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for CharacterSet();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for KeyPress.Handler.Subject(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for CharacterSet();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for KeyPress.Handler.Subject(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for KeyPress.Handler.Subject);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for CharacterSet();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in KeyPressModifier()
{
  return &protocol witness table for KeyPressModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in KeyPressModifier()
{
  return &protocol witness table for KeyPressModifier;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>, (uint64_t)&type metadata for EnvironmentValues.KeyPressHandlersKey, (uint64_t)&protocol witness table for EnvironmentValues.KeyPressHandlersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t specialized static KeyPressModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Value;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v3 = type metadata accessor for KeyPress.Handler(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyPressModifier(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v7, type metadata accessor for KeyPress.Handler);
  v9 = *(_QWORD *)(a2 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>, (uint64_t)&type metadata for EnvironmentValues.KeyPressHandlersKey, (uint64_t)&protocol witness table for EnvironmentValues.KeyPressHandlersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v9)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v10 = v15;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1, v10);
  v10[2] = v12 + 1;
  outlined init with take of KeyPress.Handler((uint64_t)v7, (uint64_t)v10+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v12);
  v15 = v10;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>, (uint64_t)&type metadata for EnvironmentValues.KeyPressHandlersKey, (uint64_t)&protocol witness table for EnvironmentValues.KeyPressHandlersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  if (v9)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t outlined init with take of KeyPress.Handler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyPress.Handler(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _SetStorage<NSURLResourceKey>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, a5);
    v9 = type metadata accessor for _SetStorage();
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t type metadata accessor for UIGestureRecognizer()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIGestureRecognizer;
  if (!lazy cache variable for type metadata for UIGestureRecognizer)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type KeyEquivalent and conformance KeyEquivalent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent;
  if (!lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyEquivalent, &type metadata for KeyEquivalent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent;
  if (!lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyEquivalent, &type metadata for KeyEquivalent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent;
  if (!lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for KeyEquivalent, &type metadata for KeyEquivalent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyEquivalent and conformance KeyEquivalent);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.KeyPressHandlersKey()
{
  return &type metadata for EnvironmentValues.KeyPressHandlersKey;
}

unint64_t lazy protocol witness table accessor for type PresentationDetent and conformance PresentationDetent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent;
  if (!lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationDetent, &type metadata for PresentationDetent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent;
  if (!lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationDetent, &type metadata for PresentationDetent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent);
  }
  return result;
}

void Gauge.init<A>(value:in:label:)(char *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, double a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, double *a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t AssociatedConformanceWitness;
  char v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char *v40;
  double v41;
  double v42;
  uint64_t v43;
  char *v44;
  double v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  char *v56;
  double v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double *v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v60 = a7;
  v54 = a4;
  v55 = a3;
  v62 = a9;
  v57 = a5;
  v61 = type metadata accessor for Optional();
  v59 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61, v13);
  v58 = (char *)&v46 - v14;
  v49 = a8;
  v15 = *(_QWORD *)(a8 + 16);
  v51 = *(_QWORD *)(*(_QWORD *)(v15 + 16) + 8);
  v52 = *(_QWORD *)(v51 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v17);
  v19 = (char *)&v46 - v18;
  v53 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v47 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v46 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v46 - v29;
  v48 = v15;
  v50 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8);
  v31 = type metadata accessor for ClosedRange();
  v56 = a1;
  v32 = a2;
  if ((ClosedRange.contains(_:)() & 1) == 0)
  {
    static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v34 = v52;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x18D75ECC8](&unk_187C14760, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  MEMORY[0x18D75EAB8](v19, a6, v34);
  v36 = dispatch thunk of static Comparable.> infix(_:_:)();
  v37 = v53;
  v38 = *(void (**)(char *, uint64_t))(v53 + 8);
  v38(v26, a6);
  if ((v36 & 1) != 0)
  {
    v39 = v56;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v40 = v47;
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v38(v26, a6);
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v26, v40, a6);
    lazy protocol witness table accessor for type Double and conformance Double();
    BinaryFloatingPoint.init<A>(_:)();
    v41 = v63;
    if (v63 < 0.0)
      v41 = 0.0;
    if (v41 <= 1.0)
      v42 = v41;
    else
      v42 = 1.0;
    v38(v40, a6);
    v43 = ((uint64_t (*)(char *, uint64_t))v38)(v30, a6);
  }
  else
  {
    v43 = ((uint64_t (*)(char *, uint64_t))v38)(v30, a6);
    v42 = 1.0;
    v39 = v56;
  }
  *v62 = v42;
  v44 = v58;
  v55(v43);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v32, v31);
  v38(v39, a6);
  v45 = v57;
  (*(void (**)(char *, _QWORD, uint64_t, double))(*(_QWORD *)(*(_QWORD *)&v57 - 8) + 56))(v44, 0, 1, COERCE_DOUBLE(*(_QWORD *)&v57));
  v63 = v45;
  v64 = MEMORY[0x1E0CE7C38];
  v65 = MEMORY[0x1E0CE7C38];
  v66 = MEMORY[0x1E0CE7C38];
  v67 = v60;
  v68 = MEMORY[0x1E0CE7C28];
  v69 = MEMORY[0x1E0CE7C28];
  v70 = MEMORY[0x1E0CE7C28];
  type metadata accessor for Gauge();
}

uint64_t sub_187990874(int *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v4 - 200) + 32))(v2 + a1[21], v3, *(_QWORD *)(v4 - 184));
  *(_BYTE *)(v2 + a1[22]) = v1;
  *(_BYTE *)(v2 + a1[23]) = v1;
  *(_BYTE *)(v2 + a1[24]) = v1;
  *(_BYTE *)(v2 + a1[25]) = v1;
  return result;
}

void type metadata accessor for Gauge()
{
  JUMPOUT(0x18D75FF28);
}

void Gauge.init<A>(value:in:label:currentValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double a7@<X6>, uint64_t a8@<X7>, double *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t AssociatedConformanceWitness;
  char v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  double v43;
  double v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double *v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v53 = a7;
  v54 = a6;
  v55 = a5;
  v51 = a4;
  v52 = a3;
  v59 = a8;
  v60 = a9;
  v15 = type metadata accessor for Optional();
  v57 = *(_QWORD *)(v15 - 8);
  v58 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v56 = (char *)v46 - v17;
  v46[2] = a13;
  v18 = *(_QWORD *)(a13 + 16);
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8);
  v47 = *(_QWORD *)(v19 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v21);
  v23 = (char *)v46 - v22;
  v50 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v46[0] = (char *)v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)v46 - v29;
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)v46 - v33;
  v46[1] = v18;
  type metadata accessor for ClosedRange();
  v62 = a1;
  if ((ClosedRange.contains(_:)() & 1) == 0)
  {
    static os_log_type_t.fault.getter();
    v35 = static Log.runtimeIssuesLog.getter();
    v61 = v19;
    v36 = (void *)v35;
    os_log(_:dso:log:_:_:)();

  }
  v49 = a12;
  v48 = a11;
  v61 = a2;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v37 = v47;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x18D75ECC8](&unk_187C14760, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  MEMORY[0x18D75EAB8](v23, a10, v37);
  v39 = dispatch thunk of static Comparable.> infix(_:_:)();
  v40 = v50;
  v41 = *(void (**)(char *, uint64_t))(v50 + 8);
  v41(v30, a10);
  if ((v39 & 1) != 0)
  {
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v42 = (char *)v46[0];
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v41(v30, a10);
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v30, v42, a10);
    lazy protocol witness table accessor for type Double and conformance Double();
    BinaryFloatingPoint.init<A>(_:)();
    v43 = v63;
    if (v63 < 0.0)
      v43 = 0.0;
    if (v43 <= 1.0)
      v44 = v43;
    else
      v44 = 1.0;
    v41(v42, a10);
    v41(v34, a10);
  }
  else
  {
    v41(v34, a10);
    v44 = 1.0;
  }
  v45 = v59;
  *v60 = v44;
  v63 = v53;
  v64 = v45;
  v65 = MEMORY[0x1E0CE7C38];
  v66 = MEMORY[0x1E0CE7C38];
  v67 = v48;
  v68 = v49;
  v69 = MEMORY[0x1E0CE7C28];
  v70 = MEMORY[0x1E0CE7C28];
  type metadata accessor for Gauge();
}

uint64_t sub_187990CB4(int *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v9 = v4 + a1[21];
  (*(void (**)(void))(v7 - 256))();
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v9, 0, 1, v6);
  v11 = *(_QWORD *)(v7 - 224);
  (*(void (**)(uint64_t))(v7 - 232))(v10);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(*(_QWORD *)(v7 - 184), v1);
  v2(*(_QWORD *)(v7 - 176), v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v11, 0, 1, v5);
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 - 216) + 32))(v4 + a1[22], v11, *(_QWORD *)(v7 - 208));
  *(_BYTE *)(v4 + a1[23]) = 1;
  *(_BYTE *)(v4 + a1[24]) = 1;
  *(_BYTE *)(v4 + a1[25]) = 1;
  return result;
}

void Gauge.init<A>(value:in:label:currentValueLabel:minimumValueLabel:maximumValueLabel:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, double *a8@<X8>, uint64_t a9, uint64_t a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void *v40;
  uint64_t AssociatedConformanceWitness;
  char v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  double v46;
  double v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v63 = a7;
  v64 = a6;
  v60 = a5;
  v61 = a4;
  v56 = a3;
  v57 = a2;
  v69 = a8;
  v59 = a12;
  v58 = a11;
  v62 = a10;
  v68 = a13;
  v19 = type metadata accessor for Optional();
  v66 = *(_QWORD *)(v19 - 8);
  v67 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v65 = (char *)v49 - v21;
  v49[2] = a18;
  v22 = *(_QWORD *)(a18 + 16);
  v50 = *(_QWORD *)(*(_QWORD *)(v22 + 16) + 8);
  v23 = *(_QWORD *)(v50 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v25);
  v27 = (char *)v49 - v26;
  v54 = *(_QWORD *)(a14 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v49[0] = (char *)v49 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)v49 - v33;
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)v49 - v37;
  v49[1] = v22;
  v39 = type metadata accessor for ClosedRange();
  v70 = a1;
  v71 = v39;
  if ((ClosedRange.contains(_:)() & 1) == 0)
  {
    static os_log_type_t.fault.getter();
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  v53 = a17;
  v52 = a16;
  v51 = a15;
  v55 = a9;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x18D75ECC8](&unk_187C14760, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  MEMORY[0x18D75EAB8](v27, a14, v23);
  v42 = dispatch thunk of static Comparable.> infix(_:_:)();
  v43 = v54;
  v44 = *(void (**)(char *, uint64_t))(v54 + 8);
  v44(v34, a14);
  if ((v42 & 1) != 0)
  {
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v45 = (char *)v49[0];
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v44(v34, a14);
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v34, v45, a14);
    lazy protocol witness table accessor for type Double and conformance Double();
    BinaryFloatingPoint.init<A>(_:)();
    v46 = v72;
    if (v72 < 0.0)
      v46 = 0.0;
    if (v46 <= 1.0)
      v47 = v46;
    else
      v47 = 1.0;
    v44(v45, a14);
    v44(v38, a14);
  }
  else
  {
    v44(v38, a14);
    v47 = 1.0;
  }
  v48 = v68;
  *v69 = v47;
  v72 = v58;
  v73 = v59;
  v74 = v48;
  v75 = MEMORY[0x1E0CE7C38];
  v76 = v51;
  v77 = v52;
  v78 = v53;
  v79 = MEMORY[0x1E0CE7C28];
  type metadata accessor for Gauge();
}

uint64_t sub_1879911BC(int *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v10 = v5 + a1[21];
  (*(void (**)(void))(v8 - 288))();
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v10, 0, 1, v7);
  v12 = v5 + a1[22];
  (*(void (**)(uint64_t))(v8 - 256))(v11);
  v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v12, 0, 1, v4);
  v14 = v5 + a1[23];
  (*(void (**)(uint64_t))(v8 - 232))(v13);
  v15 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v16 = v15(v14, 0, 1, v6);
  v17 = *(_QWORD *)(v8 - 224);
  (*(void (**)(uint64_t))(v8 - 304))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 - 176) - 8) + 8))(v1);
  v2(*(_QWORD *)(v8 - 184), v3);
  v15(v17, 0, 1, v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8 - 216) + 32))(v5 + a1[24], v17, *(_QWORD *)(v8 - 208));
  *(_BYTE *)(v5 + a1[25]) = 1;
  return result;
}

void Gauge.init<A>(value:in:label:currentValueLabel:markedValueLabels:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, double *a9@<X8>, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t AssociatedConformanceWitness;
  char v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  double v46;
  double v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v62 = a8;
  v63 = a7;
  v59 = a6;
  v60 = a5;
  v55 = a4;
  v56 = a3;
  v67 = a9;
  v58 = a11;
  v57 = a10;
  v65 = a12;
  v66 = type metadata accessor for Optional();
  v64 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66, v19);
  v61 = (char *)&v48 - v20;
  v21 = *(_QWORD *)(a17 + 16);
  v68 = *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8);
  v22 = *(_QWORD *)(v68 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v24);
  v26 = (char *)&v48 - v25;
  v54 = *(_QWORD *)(a13 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v49 = (char *)&v48 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v48 - v32;
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v48 - v36;
  v50 = v21;
  v38 = type metadata accessor for ClosedRange();
  v69 = a1;
  v70 = v38;
  if ((ClosedRange.contains(_:)() & 1) == 0)
  {
    static os_log_type_t.fault.getter();
    v39 = static Log.runtimeIssuesLog.getter();
    v53 = a17;
    v40 = (void *)v39;
    os_log(_:dso:log:_:_:)();

  }
  v53 = a16;
  v52 = a15;
  v51 = a14;
  v68 = a2;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x18D75ECC8](&unk_187C14760, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  MEMORY[0x18D75EAB8](v26, a13, v22);
  v42 = dispatch thunk of static Comparable.> infix(_:_:)();
  v43 = v54;
  v44 = *(void (**)(char *, uint64_t))(v54 + 8);
  v44(v33, a13);
  if ((v42 & 1) != 0)
  {
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v45 = v49;
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v44(v33, a13);
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v33, v45, a13);
    lazy protocol witness table accessor for type Double and conformance Double();
    BinaryFloatingPoint.init<A>(_:)();
    v46 = v71;
    if (v71 < 0.0)
      v46 = 0.0;
    if (v46 <= 1.0)
      v47 = v46;
    else
      v47 = 1.0;
    v44(v45, a13);
    v44(v37, a13);
  }
  else
  {
    v44(v37, a13);
    v47 = 1.0;
  }
  *v67 = v47;
  v71 = v57;
  v72 = v58;
  v73 = MEMORY[0x1E0CE7C38];
  v74 = v65;
  v75 = v51;
  v76 = v52;
  v77 = MEMORY[0x1E0CE7C28];
  v78 = v53;
  type metadata accessor for Gauge();
}

uint64_t sub_18799170C(int *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = v4 + a1[21];
  (*(void (**)(void))(v7 - 288))();
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v9, 0, 1, v6);
  v11 = v4 + a1[22];
  (*(void (**)(uint64_t))(v7 - 256))(v10);
  v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v11, 0, 1, v1);
  *(_BYTE *)(v4 + a1[23]) = 1;
  *(_BYTE *)(v4 + a1[24]) = 1;
  v13 = *(_QWORD *)(v7 - 248);
  (*(void (**)(uint64_t))(v7 - 232))(v12);
  (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v7 - 176) - 8) + 8))(*(_QWORD *)(v7 - 192));
  v2(*(_QWORD *)(v7 - 184), v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v13, 0, 1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 - 224) + 32))(v4 + a1[25], v13, *(_QWORD *)(v7 - 208));
}

void Gauge.init<A>(value:in:label:currentValueLabel:minimumValueLabel:maximumValueLabel:markedValueLabels:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, double *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, double a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t AssociatedTypeWitness;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t AssociatedConformanceWitness;
  char v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v76 = a8;
  v77 = a7;
  v73 = a6;
  v74 = a5;
  v70 = a4;
  v71 = a3;
  v84 = a9;
  v78 = a16;
  v72 = a15;
  v69 = a14;
  v79 = a13;
  v75 = a11;
  v83 = a17;
  v25 = type metadata accessor for Optional();
  v81 = *(_QWORD *)(v25 - 8);
  v82 = v25;
  MEMORY[0x1E0C80A78](v25, v26);
  v80 = (char *)&v56 - v27;
  v59 = a23;
  v28 = *(_QWORD *)(a23 + 16);
  v61 = *(_QWORD *)(*(_QWORD *)(v28 + 16) + 8);
  v29 = *(_QWORD *)(v61 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v31);
  v33 = (char *)&v56 - v32;
  v66 = *(_QWORD *)(a18 - 8);
  MEMORY[0x1E0C80A78](v34, v35);
  v57 = (char *)&v56 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v56 - v39;
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v56 - v43;
  v58 = v28;
  v45 = type metadata accessor for ClosedRange();
  v85 = a1;
  v86 = v45;
  v46 = a2;
  if ((ClosedRange.contains(_:)() & 1) == 0)
  {
    static os_log_type_t.fault.getter();
    v47 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  v65 = a22;
  v64 = a21;
  v63 = a20;
  v62 = a19;
  v68 = a12;
  v67 = a10;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x18D75ECC8](&unk_187C14760, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  MEMORY[0x18D75EAB8](v33, a18, v29);
  v49 = dispatch thunk of static Comparable.> infix(_:_:)();
  v50 = v66;
  v51 = *(void (**)(char *, uint64_t))(v66 + 8);
  v51(v40, a18);
  v60 = v46;
  if ((v49 & 1) != 0)
  {
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v52 = v57;
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v51(v40, a18);
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v40, v52, a18);
    lazy protocol witness table accessor for type Double and conformance Double();
    BinaryFloatingPoint.init<A>(_:)();
    v53 = v87;
    if (v87 < 0.0)
      v53 = 0.0;
    if (v53 <= 1.0)
      v54 = v53;
    else
      v54 = 1.0;
    v51(v52, a18);
    v51(v44, a18);
  }
  else
  {
    v51(v44, a18);
    v54 = 1.0;
  }
  v55 = v83;
  *v84 = v54;
  v87 = v69;
  v88 = v72;
  v89 = v78;
  v90 = v55;
  v91 = v62;
  v92 = v63;
  v93 = v64;
  v94 = v65;
  type metadata accessor for Gauge();
}

uint64_t sub_187991C80(int *a1)
{
  void (*v1)(_QWORD, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = v4 + a1[21];
  (*(void (**)(void))(v8 - 296))();
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v10, 0, 1, v7);
  v12 = v4 + a1[22];
  (*(void (**)(uint64_t))(v8 - 272))(v11);
  v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v12, 0, 1, v2);
  v14 = v4 + a1[23];
  (*(void (**)(uint64_t))(v8 - 248))(v13);
  v15 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v16 = v15(v14, 0, 1, v6);
  v17 = v4 + a1[24];
  (*(void (**)(uint64_t))(v8 - 328))(v16);
  v18 = v15(v17, 0, 1, v6);
  v19 = *(_QWORD *)(v8 - 224);
  (*(void (**)(uint64_t))(v8 - 320))(v18);
  (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v8 - 176) - 8) + 8))(*(_QWORD *)(v8 - 384));
  v1(*(_QWORD *)(v8 - 184), v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v19, 0, 1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8 - 216) + 32))(v4 + a1[25], v19, *(_QWORD *)(v8 - 208));
}

void Gauge.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v25 = a2;
  v20 = a1[4];
  v3 = v20;
  v24 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v24, v4);
  v23 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v22 = (char *)v16 - v8;
  v19 = a1[3];
  v9 = v19;
  v21 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v21, v10);
  v16[2] = (char *)v16 - v11;
  v18 = a1[2];
  v12 = v18;
  v13 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v13, v14);
  v15 = a1[7];
  v17 = a1[6];
  v16[0] = a1[8];
  v16[1] = v15;
  v26 = v12;
  v27 = v9;
  v28 = v3;
  v29 = v17;
  v30 = v15;
  v31 = v16[0];
  type metadata accessor for BaseGauge();
}

void sub_187991F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  void (*v23)(_QWORD, char *, uint64_t);
  uint64_t v24;

  *(_QWORD *)(v16 - 232) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (double *)((char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v22 = *v9;
  (*(void (**)(uint64_t, char *, uint64_t, double))(v11 + 16))(v12, (char *)v9 + v10[21], v13, v21);
  (*(void (**)(_QWORD, char *, _QWORD))(v15 + 16))(*(_QWORD *)(v16 - 240), (char *)v9 + v10[22], *(_QWORD *)(v16 - 192));
  v23 = *(void (**)(_QWORD, char *, uint64_t))(v14 + 16);
  v24 = *(_QWORD *)(v16 - 168);
  v23(*(_QWORD *)(v16 - 184), (char *)v9 + v10[23], v24);
  v23(*(_QWORD *)(v16 - 176), (char *)v9 + v10[24], v24);
  BaseGauge.init(value:label:currentValueLabel:minimumValueLabel:maximumValueLabel:)(v18, v22);
}

uint64_t sub_18799202C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  static ViewBuilder.buildExpression<A>(_:)(v2, v0, &protocol witness table for BaseGauge<A, B, C>);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 232) + 8);
  v4(v2, v0);
  static ViewBuilder.buildBlock<A>(_:)(v1, v0, *(_QWORD *)(v3 - 160));
  return v4(v1, v0);
}

void type metadata accessor for BaseGauge()
{
  JUMPOUT(0x18D75FF28);
}

void BaseGauge.init(value:label:currentValueLabel:minimumValueLabel:maximumValueLabel:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
  type metadata accessor for BaseGauge();
}

uint64_t sub_187992110(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v7 = v2 + a1[17];
  v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v5, v8);
  v9 = v2 + a1[18];
  v10 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v4, v10);
  v11 = v2 + a1[19];
  v12 = type metadata accessor for Optional();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v11, v3, v12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(v2 + a1[20], v1, v12);
}

uint64_t associated type witness table accessor for View.Body : View in Gauge<A, B, C, D>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Gauge()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for Optional();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Gauge(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  const void *v29;
  size_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t);
  uint64_t v35;
  void *v36;
  const void *v37;
  size_t v38;
  void *v39;
  const void *v40;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  size_t __n;
  uint64_t v49;
  uint64_t v50;
  size_t v51;

  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (*(_DWORD *)(v5 + 84))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v5 + 64) + 1;
  v8 = *(_QWORD *)(a3[3] - 8);
  v9 = *(_DWORD *)(v8 + 80);
  if (*(_DWORD *)(v8 + 84))
    v10 = *(_QWORD *)(v8 + 64);
  else
    v10 = *(_QWORD *)(v8 + 64) + 1;
  __n = v10;
  v49 = a3[4];
  v11 = *(_QWORD *)(v49 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  if (*(_DWORD *)(v11 + 84))
    v13 = *(_QWORD *)(v11 + 64);
  else
    v13 = *(_QWORD *)(v11 + 64) + 1;
  v14 = *(_QWORD *)(a3[5] - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = v15;
  v50 = v14;
  v51 = v13;
  if (*(_DWORD *)(v14 + 84))
    v17 = *(_QWORD *)(v14 + 64);
  else
    v17 = *(_QWORD *)(v14 + 64) + 1;
  v18 = ((v13 + v15 + ((v13 + v12 + ((v10 + v12 + ((v7 + v9 + ((v6 + 8) & ~v6)) & ~v9)) & ~v12)) & ~v12)) & ~(unint64_t)v15)
      + v17;
  v19 = v9 | v6 | v12 | v15;
  if (v19 > 7
    || ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v11 + 80) | v15) & 0x100000) != 0
    || v18 > 0x18)
  {
    v22 = *a2;
    *a1 = *a2;
    v23 = v22 + ((v19 & 0xF8 ^ 0x1F8) & (v19 + 16));
    swift_retain();
  }
  else
  {
    v44 = a3[3];
    v45 = v13 + v12;
    v46 = a3[5];
    v47 = a1;
    v42 = v17;
    v43 = ~v9;
    *a1 = *a2;
    v24 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
    v25 = (char *)(((unint64_t)a2 + v6 + 8) & ~v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v25, 1, v4))
    {
      memcpy(v24, v25, v7);
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v5 + 16))(v24, v25, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v24, 0, 1, v4);
    }
    v26 = ~v12;
    v27 = &v25[v7];
    v28 = (void *)(((unint64_t)v24 + v7 + v9) & v43);
    v29 = (const void *)((unint64_t)&v27[v9] & v43);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v29, 1, v44))
    {
      v30 = __n;
      memcpy(v28, v29, __n);
      v31 = v46;
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v28, v29, v44);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, v44);
      v31 = v46;
      v30 = __n;
    }
    v32 = (void *)(((unint64_t)v28 + v30 + v12) & v26);
    v33 = (const void *)(((unint64_t)v29 + v30 + v12) & v26);
    v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    if (v34(v33, 1, v49))
    {
      memcpy(v32, v33, v51);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v32, v33, v49);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v32, 0, 1, v49);
    }
    v35 = ~v16;
    v36 = (void *)(((unint64_t)v32 + v45) & v26);
    v37 = (const void *)(((unint64_t)v33 + v45) & v26);
    if (v34(v37, 1, v49))
    {
      v38 = v51;
      memcpy(v36, v37, v51);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v36, v37, v49);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v36, 0, 1, v49);
      v38 = v51;
    }
    v39 = (void *)(((unint64_t)v36 + v38 + v16) & v35);
    v40 = (const void *)(((unint64_t)v37 + v38 + v16) & v35);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48))(v40, 1, v31))
    {
      memcpy(v39, v40, v42);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v50 + 16))(v39, v40, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v39, 0, 1, v31);
    }
    return v47;
  }
  return (uint64_t *)v23;
}

uint64_t destroy for Gauge(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int (*v18)(unint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v3 = a2[2];
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3))
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v5, v3);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_DWORD *)(v4 + 84) == 0;
  v8 = a2[3];
  v9 = *(_QWORD *)(v8 - 8);
  v10 = v6 + v5;
  if (v7)
    ++v10;
  v11 = (v10 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v9 + 48))(v11, 1, a2[3]))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v11, v8);
  v12 = a2[4];
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v9 + 64) + v11;
  if (!*(_DWORD *)(v9 + 84))
    ++v15;
  v16 = v15 + v14;
  v17 = (v15 + v14) & ~v14;
  v18 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v18(v17, 1, a2[4]))
    (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v17, v12);
  if (*(_DWORD *)(v13 + 84))
    v19 = *(_QWORD *)(v13 + 64);
  else
    v19 = *(_QWORD *)(v13 + 64) + 1;
  v20 = ((v16 | v14) + v19) & ~v14;
  if (!v18(v20, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v20, v12);
  v21 = v20 + v19;
  v22 = a2[5];
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (v21 + *(unsigned __int8 *)(v23 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v22);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v23 + 8))(v24, v22);
  return result;
}

_QWORD *initializeWithCopy for Gauge(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  const void *v31;
  int v32;
  size_t v33;
  size_t v34;
  size_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  size_t v43;
  unsigned int (*v45)(const void *, uint64_t, uint64_t);
  _QWORD *v46;

  *a1 = *a2;
  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = a3[3];
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v12 + v15;
  v17 = (char *)(((unint64_t)v7 + v16) & ~v15);
  v18 = (char *)(((unint64_t)v8 + v16) & ~v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13))
  {
    v19 = *(_DWORD *)(v14 + 84);
    v20 = *(_QWORD *)(v14 + 64);
    if (v19)
      v21 = v20;
    else
      v21 = v20 + 1;
    memcpy(v17, v18, v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v18, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
    v19 = *(_DWORD *)(v14 + 84);
    v20 = *(_QWORD *)(v14 + 64);
  }
  if (v19)
    v22 = v20;
  else
    v22 = v20 + 1;
  v23 = a3[4];
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = v22 + v25;
  v27 = (unint64_t)&v17[v26];
  v28 = ~v25;
  v29 = (void *)((unint64_t)&v17[v26] & ~v25);
  v30 = (unint64_t)&v18[v26];
  v31 = (const void *)((unint64_t)&v18[v26] & ~v25);
  v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48);
  v46 = a3;
  if (v45(v31, 1, v23))
  {
    v32 = *(_DWORD *)(v24 + 84);
    v33 = *(_QWORD *)(v24 + 64);
    if (v32)
      v34 = *(_QWORD *)(v24 + 64);
    else
      v34 = v33 + 1;
    memcpy(v29, v31, v34);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v29, v31, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v29, 0, 1, v23);
    v32 = *(_DWORD *)(v24 + 84);
    v33 = *(_QWORD *)(v24 + 64);
  }
  if (v32)
    v35 = v33;
  else
    v35 = v33 + 1;
  v36 = (void *)(((v27 | v25) + v35) & v28);
  v37 = (const void *)(((v30 | v25) + v35) & v28);
  if (v45(v37, 1, v23))
  {
    memcpy(v36, v37, v35);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v36, v37, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v36, 0, 1, v23);
  }
  v38 = v46[5];
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned __int8 *)(v39 + 80);
  v41 = (void *)(((unint64_t)v36 + v35 + v40) & ~v40);
  v42 = (const void *)(((unint64_t)v37 + v35 + v40) & ~v40);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48))(v42, 1, v38))
  {
    if (*(_DWORD *)(v39 + 84))
      v43 = *(_QWORD *)(v39 + 64);
    else
      v43 = *(_QWORD *)(v39 + 64) + 1;
    memcpy(v41, v42, v43);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v41, v42, v38);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v38);
  }
  return a1;
}

_QWORD *assignWithCopy for Gauge(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  void *v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  int v36;
  size_t v37;
  size_t v38;
  void *v39;
  void *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t (*v48)(void *, uint64_t, uint64_t);
  int v49;
  int v50;
  size_t v51;
  _QWORD *v53;

  *a1 = *a2;
  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  v14 = a3[3];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = (char *)(((unint64_t)v7 + v17) & ~v16);
  v19 = (char *)(((unint64_t)v8 + v17) & ~v16);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v21 = v20(v18, 1, v14);
  v22 = v20(v19, 1, v14);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v19, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      goto LABEL_22;
    }
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v18, v19, v14);
      goto LABEL_22;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  if (*(_DWORD *)(v15 + 84))
    v23 = *(_QWORD *)(v15 + 64);
  else
    v23 = *(_QWORD *)(v15 + 64) + 1;
  memcpy(v18, v19, v23);
LABEL_22:
  if (*(_DWORD *)(v15 + 84))
    v24 = *(_QWORD *)(v15 + 64);
  else
    v24 = *(_QWORD *)(v15 + 64) + 1;
  v53 = a3;
  v25 = a3[4];
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = v24 + v27;
  v29 = (unint64_t)&v18[v28];
  v30 = ~v27;
  v31 = (void *)((unint64_t)&v18[v28] & ~v27);
  v32 = (unint64_t)&v19[v28];
  v33 = (void *)((unint64_t)&v19[v28] & ~v27);
  v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  v35 = v34(v31, 1, v25);
  v36 = v34(v33, 1, v25);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v31, v33, v25);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v31, 0, 1, v25);
      goto LABEL_34;
    }
  }
  else
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 24))(v31, v33, v25);
      goto LABEL_34;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v31, v25);
  }
  if (*(_DWORD *)(v26 + 84))
    v37 = *(_QWORD *)(v26 + 64);
  else
    v37 = *(_QWORD *)(v26 + 64) + 1;
  memcpy(v31, v33, v37);
LABEL_34:
  if (*(_DWORD *)(v26 + 84))
    v38 = *(_QWORD *)(v26 + 64);
  else
    v38 = *(_QWORD *)(v26 + 64) + 1;
  v39 = (void *)(((v29 | v27) + v38) & v30);
  v40 = (void *)(((v32 | v27) + v38) & v30);
  v41 = v34(v39, 1, v25);
  v42 = v34(v40, 1, v25);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v39, v40, v25);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v39, 0, 1, v25);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v39, v25);
LABEL_42:
    memcpy(v39, v40, v38);
    goto LABEL_43;
  }
  (*(void (**)(void *, void *, uint64_t))(v26 + 24))(v39, v40, v25);
LABEL_43:
  v43 = v53[5];
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(unsigned __int8 *)(v44 + 80);
  v46 = (void *)(((unint64_t)v39 + v38 + v45) & ~v45);
  v47 = (void *)(((unint64_t)v40 + v38 + v45) & ~v45);
  v48 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 48);
  v49 = v48(v46, 1, v43);
  v50 = v48(v47, 1, v43);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(void *, void *, uint64_t))(v44 + 16))(v46, v47, v43);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v46, 0, 1, v43);
      return a1;
    }
  }
  else
  {
    if (!v50)
    {
      (*(void (**)(void *, void *, uint64_t))(v44 + 24))(v46, v47, v43);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v44 + 8))(v46, v43);
  }
  if (*(_DWORD *)(v44 + 84))
    v51 = *(_QWORD *)(v44 + 64);
  else
    v51 = *(_QWORD *)(v44 + 64) + 1;
  memcpy(v46, v47, v51);
  return a1;
}

_QWORD *initializeWithTake for Gauge(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  const void *v31;
  int v32;
  size_t v33;
  size_t v34;
  size_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  size_t v43;
  unsigned int (*v45)(const void *, uint64_t, uint64_t);
  _QWORD *v46;

  *a1 = *a2;
  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = a3[3];
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v12 + v15;
  v17 = (char *)(((unint64_t)v7 + v16) & ~v15);
  v18 = (char *)(((unint64_t)v8 + v16) & ~v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13))
  {
    v19 = *(_DWORD *)(v14 + 84);
    v20 = *(_QWORD *)(v14 + 64);
    if (v19)
      v21 = v20;
    else
      v21 = v20 + 1;
    memcpy(v17, v18, v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v18, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
    v19 = *(_DWORD *)(v14 + 84);
    v20 = *(_QWORD *)(v14 + 64);
  }
  if (v19)
    v22 = v20;
  else
    v22 = v20 + 1;
  v23 = a3[4];
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = v22 + v25;
  v27 = (unint64_t)&v17[v26];
  v28 = ~v25;
  v29 = (void *)((unint64_t)&v17[v26] & ~v25);
  v30 = (unint64_t)&v18[v26];
  v31 = (const void *)((unint64_t)&v18[v26] & ~v25);
  v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48);
  v46 = a3;
  if (v45(v31, 1, v23))
  {
    v32 = *(_DWORD *)(v24 + 84);
    v33 = *(_QWORD *)(v24 + 64);
    if (v32)
      v34 = *(_QWORD *)(v24 + 64);
    else
      v34 = v33 + 1;
    memcpy(v29, v31, v34);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v29, v31, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v29, 0, 1, v23);
    v32 = *(_DWORD *)(v24 + 84);
    v33 = *(_QWORD *)(v24 + 64);
  }
  if (v32)
    v35 = v33;
  else
    v35 = v33 + 1;
  v36 = (void *)(((v27 | v25) + v35) & v28);
  v37 = (const void *)(((v30 | v25) + v35) & v28);
  if (v45(v37, 1, v23))
  {
    memcpy(v36, v37, v35);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v36, v37, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v36, 0, 1, v23);
  }
  v38 = v46[5];
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned __int8 *)(v39 + 80);
  v41 = (void *)(((unint64_t)v36 + v35 + v40) & ~v40);
  v42 = (const void *)(((unint64_t)v37 + v35 + v40) & ~v40);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48))(v42, 1, v38))
  {
    if (*(_DWORD *)(v39 + 84))
      v43 = *(_QWORD *)(v39 + 64);
    else
      v43 = *(_QWORD *)(v39 + 64) + 1;
    memcpy(v41, v42, v43);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v39 + 32))(v41, v42, v38);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v38);
  }
  return a1;
}

_QWORD *assignWithTake for Gauge(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  void *v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  int v36;
  size_t v37;
  size_t v38;
  void *v39;
  void *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t (*v48)(void *, uint64_t, uint64_t);
  int v49;
  int v50;
  size_t v51;
  _QWORD *v53;

  *a1 = *a2;
  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  v14 = a3[3];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = (char *)(((unint64_t)v7 + v17) & ~v16);
  v19 = (char *)(((unint64_t)v8 + v17) & ~v16);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v21 = v20(v18, 1, v14);
  v22 = v20(v19, 1, v14);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v19, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      goto LABEL_22;
    }
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v18, v19, v14);
      goto LABEL_22;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  if (*(_DWORD *)(v15 + 84))
    v23 = *(_QWORD *)(v15 + 64);
  else
    v23 = *(_QWORD *)(v15 + 64) + 1;
  memcpy(v18, v19, v23);
LABEL_22:
  if (*(_DWORD *)(v15 + 84))
    v24 = *(_QWORD *)(v15 + 64);
  else
    v24 = *(_QWORD *)(v15 + 64) + 1;
  v53 = a3;
  v25 = a3[4];
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = v24 + v27;
  v29 = (unint64_t)&v18[v28];
  v30 = ~v27;
  v31 = (void *)((unint64_t)&v18[v28] & ~v27);
  v32 = (unint64_t)&v19[v28];
  v33 = (void *)((unint64_t)&v19[v28] & ~v27);
  v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  v35 = v34(v31, 1, v25);
  v36 = v34(v33, 1, v25);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 32))(v31, v33, v25);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v31, 0, 1, v25);
      goto LABEL_34;
    }
  }
  else
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 40))(v31, v33, v25);
      goto LABEL_34;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v31, v25);
  }
  if (*(_DWORD *)(v26 + 84))
    v37 = *(_QWORD *)(v26 + 64);
  else
    v37 = *(_QWORD *)(v26 + 64) + 1;
  memcpy(v31, v33, v37);
LABEL_34:
  if (*(_DWORD *)(v26 + 84))
    v38 = *(_QWORD *)(v26 + 64);
  else
    v38 = *(_QWORD *)(v26 + 64) + 1;
  v39 = (void *)(((v29 | v27) + v38) & v30);
  v40 = (void *)(((v32 | v27) + v38) & v30);
  v41 = v34(v39, 1, v25);
  v42 = v34(v40, 1, v25);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 32))(v39, v40, v25);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v39, 0, 1, v25);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v26 + 8))(v39, v25);
LABEL_42:
    memcpy(v39, v40, v38);
    goto LABEL_43;
  }
  (*(void (**)(void *, void *, uint64_t))(v26 + 40))(v39, v40, v25);
LABEL_43:
  v43 = v53[5];
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(unsigned __int8 *)(v44 + 80);
  v46 = (void *)(((unint64_t)v39 + v38 + v45) & ~v45);
  v47 = (void *)(((unint64_t)v40 + v38 + v45) & ~v45);
  v48 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 48);
  v49 = v48(v46, 1, v43);
  v50 = v48(v47, 1, v43);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(void *, void *, uint64_t))(v44 + 32))(v46, v47, v43);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v46, 0, 1, v43);
      return a1;
    }
  }
  else
  {
    if (!v50)
    {
      (*(void (**)(void *, void *, uint64_t))(v44 + 40))(v46, v47, v43);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v44 + 8))(v46, v43);
  }
  if (*(_DWORD *)(v44 + 84))
    v51 = *(_QWORD *)(v44 + 64);
  else
    v51 = *(_QWORD *)(v44 + 64) + 1;
  memcpy(v46, v47, v51);
  return a1;
}

uint64_t getEnumTagSinglePayload for Gauge(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;

  v6 = a3[2];
  v5 = a3[3];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v5 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if ((_DWORD)v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v9)
    v13 = v9;
  else
    v13 = v12;
  v14 = a3[4];
  v15 = a3[5];
  v16 = *(_QWORD *)(v14 - 8);
  v17 = *(_DWORD *)(v16 + 84);
  if (v17)
    v18 = v17 - 1;
  else
    v18 = 0;
  if (v18 <= v13)
    v19 = v13;
  else
    v19 = v18;
  v20 = *(_QWORD *)(v15 - 8);
  v21 = *(_DWORD *)(v20 + 84);
  v22 = v21 - 1;
  if (!v21)
    v22 = 0;
  if (v22 > v19)
    v19 = v22;
  v23 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v23;
  v24 = *(_QWORD *)(v10 + 64);
  if (!(_DWORD)v11)
    ++v24;
  v25 = *(_QWORD *)(v16 + 64);
  if (!v17)
    ++v25;
  if (v21)
    v26 = *(_QWORD *)(v20 + 64);
  else
    v26 = *(_QWORD *)(v20 + 64) + 1;
  if (!a2)
    return 0;
  v27 = *(unsigned __int8 *)(v7 + 80);
  v28 = *(unsigned __int8 *)(v10 + 80);
  v29 = *(unsigned __int8 *)(v16 + 80);
  v30 = v24 + v29;
  v31 = v25 + v29;
  v32 = *(unsigned __int8 *)(v20 + 80);
  v33 = v25 + v32;
  v34 = a2 - v19;
  if (a2 <= v19)
    goto LABEL_48;
  v35 = v26 + ((v33 + ((v31 + ((v30 + ((v23 + v28 + ((v27 + 8) & ~v27)) & ~v28)) & ~v29)) & ~v29)) & ~v32);
  v36 = 8 * v35;
  if (v35 <= 3)
  {
    v38 = ((v34 + ~(-1 << v36)) >> v36) + 1;
    if (HIWORD(v38))
    {
      v37 = *(_DWORD *)(a1 + v35);
      if (!v37)
        goto LABEL_48;
      goto LABEL_39;
    }
    if (v38 > 0xFF)
    {
      v37 = *(unsigned __int16 *)(a1 + v35);
      if (!*(_WORD *)(a1 + v35))
        goto LABEL_48;
      goto LABEL_39;
    }
    if (v38 < 2)
    {
LABEL_48:
      if (v19)
      {
        v41 = (a1 + v27 + 8) & ~v27;
        if (v9 == v19)
        {
          v42 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(v41, *(unsigned int *)(v7 + 84), v6);
        }
        else
        {
          v43 = (v41 + v23 + v28) & ~v28;
          if (v12 == v19)
          {
            v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v43, v11, v5);
          }
          else
          {
            v44 = (v30 + v43) & ~v29;
            if (v18 == v19)
              v42 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v16 + 48))(v44, *(unsigned int *)(v16 + 84), v14);
            else
              v42 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v20 + 48))((v33 + ((v31 + v44) & ~v29)) & ~v32, *(unsigned int *)(v20 + 84), v15);
          }
        }
        if (v42 >= 2)
          return v42 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v37 = *(unsigned __int8 *)(a1 + v35);
  if (!*(_BYTE *)(a1 + v35))
    goto LABEL_48;
LABEL_39:
  v39 = (v37 - 1) << v36;
  if (v35 > 3)
    v39 = 0;
  if ((_DWORD)v35)
  {
    if (v35 <= 3)
      v40 = v35;
    else
      v40 = 4;
    __asm { BR              X11 }
  }
  return v19 + v39 + 1;
}

void storeEnumTagSinglePayload for Gauge(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;

  v6 = 0u;
  v7 = *(_QWORD *)(a4[2] - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(a4[3] - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v9)
    v13 = v9;
  else
    v13 = v12;
  v14 = *(_QWORD *)(a4[4] - 8);
  v15 = *(_DWORD *)(v14 + 84);
  if (v15)
    v16 = v15 - 1;
  else
    v16 = 0;
  if (v16 <= v13)
    v17 = v13;
  else
    v17 = v16;
  v18 = *(_QWORD *)(a4[5] - 8);
  v19 = *(_DWORD *)(v18 + 84);
  if (v19)
    v20 = v19 - 1;
  else
    v20 = 0;
  if (v20 <= v17)
    v21 = v17;
  else
    v21 = v20;
  if (v8)
    v22 = *(_QWORD *)(v7 + 64);
  else
    v22 = *(_QWORD *)(v7 + 64) + 1;
  if (v11)
    v23 = *(_QWORD *)(v10 + 64);
  else
    v23 = *(_QWORD *)(v10 + 64) + 1;
  if (v15)
    v24 = *(_QWORD *)(v14 + 64);
  else
    v24 = *(_QWORD *)(v14 + 64) + 1;
  v25 = *(unsigned __int8 *)(v14 + 80);
  v26 = (v24
       + *(unsigned __int8 *)(v18 + 80)
       + ((v24
         + v25
         + ((v23
           + v25
           + ((v22
             + *(unsigned __int8 *)(v10 + 80)
             + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))) & ~v25)) & ~v25)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v27 = *(_QWORD *)(v18 + 64);
  if (!v19)
    ++v27;
  v28 = v26 + v27;
  v29 = a3 >= v21;
  v30 = a3 - v21;
  if (v30 != 0 && v29)
  {
    if (v28 <= 3)
    {
      v32 = ((v30 + ~(-1 << (8 * v28))) >> (8 * v28)) + 1;
      if (HIWORD(v32))
      {
        v6 = 4u;
      }
      else if (v32 >= 0x100)
      {
        v6 = 2;
      }
      else
      {
        v6 = v32 > 1;
      }
      if (v21 < a2)
        goto LABEL_38;
      goto LABEL_50;
    }
    v6 = 1u;
  }
  if (v21 < a2)
  {
LABEL_38:
    v31 = ~v21 + a2;
    if (v28 < 4)
    {
      if ((_DWORD)v28)
      {
        v33 = v31 & ~(-1 << (8 * v28));
        bzero(a1, v28);
        if ((_DWORD)v28 == 3)
        {
          *a1 = v33;
          *((_BYTE *)a1 + 2) = BYTE2(v33);
        }
        else if ((_DWORD)v28 == 2)
        {
          *a1 = v33;
        }
        else
        {
          *(_BYTE *)a1 = v33;
        }
      }
    }
    else
    {
      bzero(a1, v28);
      *(_DWORD *)a1 = v31;
    }
    __asm { BR              X10 }
  }
LABEL_50:
  __asm { BR              X10 }
}

void sub_187993CDC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187993CE4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_187993D84()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_187993DC0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_187993DC8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_187993DD8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

_UNKNOWN **sub_187993DE4()
{
  return &protocol witness table for BaseGauge<A, B, C>;
}

uint64_t type metadata completion function for BaseGauge()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BaseGauge(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  char *v24;
  char *v25;
  void *v26;
  const void *v27;
  unsigned int (*v28)(const void *, uint64_t, uint64_t);
  void *v29;
  const void *v30;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  uint64_t v36;

  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (*(_DWORD *)(v5 + 84))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v5 + 64) + 1;
  v8 = *(_QWORD *)(a3[3] - 8);
  v9 = *(_DWORD *)(v8 + 80);
  if (*(_DWORD *)(v8 + 84))
    v10 = *(_QWORD *)(v8 + 64);
  else
    v10 = *(_QWORD *)(v8 + 64) + 1;
  v11 = *(_QWORD *)(a3[4] - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  if (!*(_DWORD *)(v11 + 84))
    ++v13;
  v14 = v9 | v6 | v12;
  if (v14 > 7
    || ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v11 + 80)) & 0x100000) != 0
    || ((v13 + v12 + ((v10 + v12 + ((v7 + v9 + ((v6 + 8) & ~v6)) & ~v9)) & ~v12)) & ~v12) + v13 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    v18 = (uint64_t *)(v17 + ((v14 & 0xF8 ^ 0x1F8) & (v14 + 16)));
    swift_retain();
  }
  else
  {
    v33 = a3[3];
    v34 = v13 + v12;
    v35 = v13;
    v36 = a3[4];
    v32 = ~v9;
    *a1 = *a2;
    v19 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
    v20 = (char *)(((unint64_t)a2 + v6 + 8) & ~v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v20, 1, v4))
    {
      memcpy(v19, v20, v7);
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v5 + 16))(v19, v20, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
    }
    v21 = ~v12;
    v22 = &v20[v7];
    v23 = (void *)(((unint64_t)v19 + v7 + v9) & v32);
    v24 = (char *)((unint64_t)&v22[v9] & v32);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v24, 1, v33))
    {
      memcpy(v23, v24, v10);
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v8 + 16))(v23, v24, v33);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v23, 0, 1, v33);
    }
    v18 = a1;
    v25 = &v24[v10];
    v26 = (void *)(((unint64_t)v23 + v10 + v12) & v21);
    v27 = (const void *)((unint64_t)&v25[v12] & v21);
    v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    if (v28(v27, 1, v36))
    {
      memcpy(v26, v27, v35);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v26, v27, v36);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v26, 0, 1, v36);
    }
    v29 = (void *)(((unint64_t)v26 + v34) & v21);
    v30 = (const void *)(((unint64_t)v27 + v34) & v21);
    if (v28(v30, 1, v36))
    {
      memcpy(v29, v30, v35);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v29, v30, v36);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v29, 0, 1, v36);
    }
  }
  return v18;
}

uint64_t destroy for BaseGauge(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int (*v19)(unint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v3 = a2[2];
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3))
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v5, v3);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_DWORD *)(v4 + 84) == 0;
  v8 = a2[3];
  v9 = *(_QWORD *)(v8 - 8);
  v10 = v6 + v5;
  if (v7)
    ++v10;
  v11 = (v10 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, _QWORD))(v9 + 48))(v11, 1, a2[3]))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v11, v8);
  v12 = a2[4];
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v9 + 64) + v11;
  if (!*(_DWORD *)(v9 + 84))
    ++v15;
  v16 = v15 + v14;
  v17 = ~v14;
  v18 = (v15 + v14) & ~v14;
  v19 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v19(v18, 1, v12))
    (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v18, v12);
  v20 = (v16 | v14) + *(_QWORD *)(v13 + 64);
  if (!*(_DWORD *)(v13 + 84))
    ++v20;
  v21 = v20 & v17;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v19)(v20 & v17, 1, v12);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v21, v12);
  return result;
}

_QWORD *initializeWithCopy for BaseGauge(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  const void *v31;
  int v32;
  size_t v33;
  size_t v34;
  size_t v35;
  void *v36;
  const void *v37;
  unsigned int (*v39)(const void *, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = *(_QWORD *)(v5 + 64);
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = a3[3];
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v12 + v15;
  v17 = (char *)(((unint64_t)v7 + v16) & ~v15);
  v18 = (char *)(((unint64_t)v8 + v16) & ~v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13))
  {
    v19 = *(_DWORD *)(v14 + 84);
    v20 = *(_QWORD *)(v14 + 64);
    if (v19)
      v21 = *(_QWORD *)(v14 + 64);
    else
      v21 = v20 + 1;
    memcpy(v17, v18, v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v18, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
    v19 = *(_DWORD *)(v14 + 84);
    v20 = *(_QWORD *)(v14 + 64);
  }
  if (v19)
    v22 = v20;
  else
    v22 = v20 + 1;
  v23 = a3[4];
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = v22 + v25;
  v27 = (unint64_t)&v17[v26];
  v28 = ~v25;
  v29 = (void *)((unint64_t)&v17[v26] & ~v25);
  v30 = (unint64_t)&v18[v26];
  v31 = (const void *)((unint64_t)&v18[v26] & ~v25);
  v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48);
  if (v39(v31, 1, v23))
  {
    v32 = *(_DWORD *)(v24 + 84);
    v33 = *(_QWORD *)(v24 + 64);
    if (v32)
      v34 = *(_QWORD *)(v24 + 64);
    else
      v34 = v33 + 1;
    memcpy(v29, v31, v34);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v29, v31, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v29, 0, 1, v23);
    v32 = *(_DWORD *)(v24 + 84);
    v33 = *(_QWORD *)(v24 + 64);
  }
  if (v32)
    v35 = v33;
  else
    v35 = v33 + 1;
  v36 = (void *)(((v27 | v25) + v35) & v28);
  v37 = (const void *)(((v30 | v25) + v35) & v28);
  if (v39(v37, 1, v23))
  {
    memcpy(v36, v37, v35);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v36, v37, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v36, 0, 1, v23);
  }
  return a1;
}

_QWORD *assignWithCopy for BaseGauge(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  void *v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  int v36;
  size_t v37;
  size_t v38;
  void *v39;
  void *v40;
  int v41;
  int v42;

  *a1 = *a2;
  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  v14 = a3[3];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = (char *)(((unint64_t)v7 + v17) & ~v16);
  v19 = (char *)(((unint64_t)v8 + v17) & ~v16);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v21 = v20(v18, 1, v14);
  v22 = v20(v19, 1, v14);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v19, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      goto LABEL_22;
    }
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v18, v19, v14);
      goto LABEL_22;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  if (*(_DWORD *)(v15 + 84))
    v23 = *(_QWORD *)(v15 + 64);
  else
    v23 = *(_QWORD *)(v15 + 64) + 1;
  memcpy(v18, v19, v23);
LABEL_22:
  if (*(_DWORD *)(v15 + 84))
    v24 = *(_QWORD *)(v15 + 64);
  else
    v24 = *(_QWORD *)(v15 + 64) + 1;
  v25 = a3[4];
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = v24 + v27;
  v29 = (unint64_t)&v18[v28];
  v30 = ~v27;
  v31 = (void *)((unint64_t)&v18[v28] & ~v27);
  v32 = (unint64_t)&v19[v28];
  v33 = (void *)((unint64_t)&v19[v28] & ~v27);
  v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  v35 = v34(v31, 1, v25);
  v36 = v34(v33, 1, v25);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v31, v33, v25);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v31, 0, 1, v25);
      goto LABEL_34;
    }
  }
  else
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 24))(v31, v33, v25);
      goto LABEL_34;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v31, v25);
  }
  if (*(_DWORD *)(v26 + 84))
    v37 = *(_QWORD *)(v26 + 64);
  else
    v37 = *(_QWORD *)(v26 + 64) + 1;
  memcpy(v31, v33, v37);
LABEL_34:
  if (*(_DWORD *)(v26 + 84))
    v38 = *(_QWORD *)(v26 + 64);
  else
    v38 = *(_QWORD *)(v26 + 64) + 1;
  v39 = (void *)(((v29 | v27) + v38) & v30);
  v40 = (void *)(((v32 | v27) + v38) & v30);
  v41 = v34(v39, 1, v25);
  v42 = v34(v40, 1, v25);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 24))(v39, v40, v25);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v39, v25);
    goto LABEL_42;
  }
  if (v42)
  {
LABEL_42:
    memcpy(v39, v40, v38);
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v39, v40, v25);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v39, 0, 1, v25);
  return a1;
}

_QWORD *initializeWithTake for BaseGauge(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  const void *v31;
  int v32;
  size_t v33;
  size_t v34;
  size_t v35;
  void *v36;
  const void *v37;
  unsigned int (*v39)(const void *, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = *(_QWORD *)(v5 + 64);
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = a3[3];
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v12 + v15;
  v17 = (char *)(((unint64_t)v7 + v16) & ~v15);
  v18 = (char *)(((unint64_t)v8 + v16) & ~v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13))
  {
    v19 = *(_DWORD *)(v14 + 84);
    v20 = *(_QWORD *)(v14 + 64);
    if (v19)
      v21 = *(_QWORD *)(v14 + 64);
    else
      v21 = v20 + 1;
    memcpy(v17, v18, v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v18, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
    v19 = *(_DWORD *)(v14 + 84);
    v20 = *(_QWORD *)(v14 + 64);
  }
  if (v19)
    v22 = v20;
  else
    v22 = v20 + 1;
  v23 = a3[4];
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = v22 + v25;
  v27 = (unint64_t)&v17[v26];
  v28 = ~v25;
  v29 = (void *)((unint64_t)&v17[v26] & ~v25);
  v30 = (unint64_t)&v18[v26];
  v31 = (const void *)((unint64_t)&v18[v26] & ~v25);
  v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48);
  if (v39(v31, 1, v23))
  {
    v32 = *(_DWORD *)(v24 + 84);
    v33 = *(_QWORD *)(v24 + 64);
    if (v32)
      v34 = *(_QWORD *)(v24 + 64);
    else
      v34 = v33 + 1;
    memcpy(v29, v31, v34);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v29, v31, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v29, 0, 1, v23);
    v32 = *(_DWORD *)(v24 + 84);
    v33 = *(_QWORD *)(v24 + 64);
  }
  if (v32)
    v35 = v33;
  else
    v35 = v33 + 1;
  v36 = (void *)(((v27 | v25) + v35) & v28);
  v37 = (const void *)(((v30 | v25) + v35) & v28);
  if (v39(v37, 1, v23))
  {
    memcpy(v36, v37, v35);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v36, v37, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v36, 0, 1, v23);
  }
  return a1;
}

_QWORD *assignWithTake for BaseGauge(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  void *v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  int v36;
  size_t v37;
  size_t v38;
  void *v39;
  void *v40;
  int v41;
  int v42;

  *a1 = *a2;
  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  v14 = a3[3];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v13 + v16;
  v18 = (char *)(((unint64_t)v7 + v17) & ~v16);
  v19 = (char *)(((unint64_t)v8 + v17) & ~v16);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v21 = v20(v18, 1, v14);
  v22 = v20(v19, 1, v14);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v19, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      goto LABEL_22;
    }
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v18, v19, v14);
      goto LABEL_22;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  if (*(_DWORD *)(v15 + 84))
    v23 = *(_QWORD *)(v15 + 64);
  else
    v23 = *(_QWORD *)(v15 + 64) + 1;
  memcpy(v18, v19, v23);
LABEL_22:
  if (*(_DWORD *)(v15 + 84))
    v24 = *(_QWORD *)(v15 + 64);
  else
    v24 = *(_QWORD *)(v15 + 64) + 1;
  v25 = a3[4];
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = v24 + v27;
  v29 = (unint64_t)&v18[v28];
  v30 = ~v27;
  v31 = (void *)((unint64_t)&v18[v28] & ~v27);
  v32 = (unint64_t)&v19[v28];
  v33 = (void *)((unint64_t)&v19[v28] & ~v27);
  v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  v35 = v34(v31, 1, v25);
  v36 = v34(v33, 1, v25);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 32))(v31, v33, v25);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v31, 0, 1, v25);
      goto LABEL_34;
    }
  }
  else
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 40))(v31, v33, v25);
      goto LABEL_34;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v31, v25);
  }
  if (*(_DWORD *)(v26 + 84))
    v37 = *(_QWORD *)(v26 + 64);
  else
    v37 = *(_QWORD *)(v26 + 64) + 1;
  memcpy(v31, v33, v37);
LABEL_34:
  if (*(_DWORD *)(v26 + 84))
    v38 = *(_QWORD *)(v26 + 64);
  else
    v38 = *(_QWORD *)(v26 + 64) + 1;
  v39 = (void *)(((v29 | v27) + v38) & v30);
  v40 = (void *)(((v32 | v27) + v38) & v30);
  v41 = v34(v39, 1, v25);
  v42 = v34(v40, 1, v25);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 40))(v39, v40, v25);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v39, v25);
    goto LABEL_42;
  }
  if (v42)
  {
LABEL_42:
    memcpy(v39, v40, v38);
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v26 + 32))(v39, v40, v25);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v39, 0, 1, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseGauge(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;

  v6 = a3[2];
  v5 = a3[3];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v5 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if ((_DWORD)v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v9)
    v13 = v9;
  else
    v13 = v12;
  v14 = a3[4];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_DWORD *)(v15 + 84);
  v17 = v16 - 1;
  if (!v16)
    v17 = 0;
  if (v17 > v13)
    v13 = v17;
  v18 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v18;
  if ((_DWORD)v11)
    v19 = *(_QWORD *)(v10 + 64);
  else
    v19 = *(_QWORD *)(v10 + 64) + 1;
  if (v16)
    v20 = *(_QWORD *)(v15 + 64);
  else
    v20 = *(_QWORD *)(v15 + 64) + 1;
  if (!a2)
    return 0;
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = *(unsigned __int8 *)(v10 + 80);
  v23 = *(unsigned __int8 *)(v15 + 80);
  v24 = v19 + v23;
  v25 = a2 - v13;
  if (a2 <= v13)
    goto LABEL_41;
  v26 = ((v20 + v23 + ((v24 + ((v18 + v22 + ((v21 + 8) & ~v21)) & ~v22)) & ~v23)) & ~v23) + v20;
  v27 = 8 * v26;
  if (v26 <= 3)
  {
    v29 = ((v25 + ~(-1 << v27)) >> v27) + 1;
    if (HIWORD(v29))
    {
      v28 = *(_DWORD *)(a1 + v26);
      if (!v28)
        goto LABEL_41;
      goto LABEL_32;
    }
    if (v29 > 0xFF)
    {
      v28 = *(unsigned __int16 *)(a1 + v26);
      if (!*(_WORD *)(a1 + v26))
        goto LABEL_41;
      goto LABEL_32;
    }
    if (v29 < 2)
    {
LABEL_41:
      if (v13)
      {
        v32 = (a1 + v21 + 8) & ~v21;
        if (v9 == v13)
        {
          v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(v32, *(unsigned int *)(v7 + 84), v6);
        }
        else
        {
          v34 = (v32 + v18 + v22) & ~v22;
          if (v12 == v13)
            v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v34, v11, v5);
          else
            v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v15 + 48))((v24 + v34) & ~v23, *(unsigned int *)(v15 + 84), v14);
        }
        if (v33 >= 2)
          return v33 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v28 = *(unsigned __int8 *)(a1 + v26);
  if (!*(_BYTE *)(a1 + v26))
    goto LABEL_41;
LABEL_32:
  v30 = (v28 - 1) << v27;
  if (v26 > 3)
    v30 = 0;
  if ((_DWORD)v26)
  {
    if (v26 <= 3)
      v31 = v26;
    else
      v31 = 4;
    __asm { BR              X11 }
  }
  return v13 + v30 + 1;
}

void storeEnumTagSinglePayload for BaseGauge(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;

  v7 = 0u;
  v9 = a4[2];
  v8 = a4[3];
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  v13 = *(_QWORD *)(v8 - 8);
  v14 = *(_DWORD *)(v13 + 84);
  if (v14)
    v15 = v14 - 1;
  else
    v15 = 0;
  if (v15 <= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = *(_QWORD *)(a4[4] - 8);
  v18 = *(_DWORD *)(v17 + 84);
  v19 = v18 - 1;
  if (!v18)
    v19 = 0;
  if (v19 <= v16)
    v20 = v16;
  else
    v20 = v19;
  if (v11)
    v21 = *(_QWORD *)(v10 + 64);
  else
    v21 = *(_QWORD *)(v10 + 64) + 1;
  v22 = *(_QWORD *)(v13 + 64);
  if (!v14)
    ++v22;
  v23 = *(unsigned __int8 *)(v17 + 80);
  v24 = (v22
       + v23
       + ((v21
         + *(unsigned __int8 *)(v13 + 80)
         + ((*(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))) & ~v23;
  v25 = *(_QWORD *)(v17 + 64);
  if (!v18)
    ++v25;
  v26 = ((v25 + v23 + v24) & ~v23) + v25;
  v27 = a3 >= v20;
  v28 = a3 - v20;
  if (v28 != 0 && v27)
  {
    if (v26 > 3)
    {
      v7 = 1u;
      if (v20 < a2)
        goto LABEL_31;
      goto LABEL_38;
    }
    v29 = ((v28 + ~(-1 << (8 * v26))) >> (8 * v26)) + 1;
    if (HIWORD(v29))
    {
      v7 = 4u;
      if (v20 < a2)
      {
LABEL_31:
        v30 = ~v20 + a2;
        if (v26 < 4)
        {
          if ((_DWORD)v26)
          {
            v31 = v30 & ~(-1 << (8 * v26));
            bzero(a1, v26);
            if ((_DWORD)v26 == 3)
            {
              *a1 = v31;
              *((_BYTE *)a1 + 2) = BYTE2(v31);
            }
            else if ((_DWORD)v26 == 2)
            {
              *a1 = v31;
            }
            else
            {
              *(_BYTE *)a1 = v31;
            }
          }
        }
        else
        {
          bzero(a1, v26);
          *(_DWORD *)a1 = v30;
        }
        __asm { BR              X10 }
      }
LABEL_38:
      __asm { BR              X27 }
    }
    v7 = v29 > 1;
    if (v29 >= 0x100)
      v7 = 2;
  }
  if (v20 < a2)
    goto LABEL_31;
  goto LABEL_38;
}

void sub_18799544C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187995454()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1879954AC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1879954BC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1879954C4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

_UNKNOWN **base witness table accessor for View in BaseGauge<A, B, C>()
{
  return &protocol witness table for BaseGauge<A, B, C>;
}

void static BaseGauge._makeView(view:inputs:)()
{
  type metadata accessor for BaseGauge();
}

void sub_18799555C()
{
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #1 in static BaseGauge._makeView(view:inputs:)();
}

void sub_187995598()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int OffsetAttribute2;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;

  *(_DWORD *)(v0 + 52) = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v0 + 88) = v2;
  *(_DWORD *)(v0 + 192) = v2;
  _GraphValue.value.getter();
  v8 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 64);
  *(_QWORD *)(v0 + 64) = v3;
  *(_QWORD *)(v0 + 72) = v5;
  *(_QWORD *)(v0 + 56) = v1;
  if (v8)
    closure #2 in static BaseGauge._makeView(view:inputs:)();
  *(_QWORD *)(v0 + 80) = v6;
  *(_DWORD *)(v0 + 48) = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v0 + 192) = *(_DWORD *)(v0 + 88);
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 64))
    closure #3 in static BaseGauge._makeView(view:inputs:)();
  *(_DWORD *)(v0 + 44) = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v0 + 192) = *(_DWORD *)(v0 + 88);
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 64))
    closure #4 in static BaseGauge._makeView(view:inputs:)();
  v9 = *(_QWORD *)(v0 + 64);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v0 + 192) = *(_DWORD *)(v0 + 88);
  _GraphValue.value.getter();
  *(_QWORD *)(v0 + 32) = v4;
  v11 = *(_DWORD *)(v0 + 52);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = AGGraphCreateOffsetAttribute2();
  v14 = *(_DWORD *)(v0 + 48);
  *(_DWORD *)(v7 - 200) = v11;
  *(_DWORD *)(v7 - 196) = v14;
  *(_DWORD *)(v7 - 192) = *(_DWORD *)(v0 + 44);
  *(_DWORD *)(v7 - 188) = OffsetAttribute2;
  *(_DWORD *)(v0 + 12) = v13;
  *(_DWORD *)(v7 - 184) = v13;
  v15 = lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label();
  *(_QWORD *)(v0 + 192) = &type metadata for GaugeStyleConfiguration.Label;
  *(_QWORD *)(v0 + 200) = v9;
  *(_QWORD *)(v0 + 208) = v15;
  *(_QWORD *)(v0 + 216) = v12;
  type metadata accessor for OptionalSourceWriter();
}

void sub_1879957D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0[11] = type metadata accessor for ModifiedContent();
  v3 = lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel();
  v0[24] = &type metadata for GaugeStyleConfiguration.CurrentValueLabel;
  v0[25] = v1;
  v0[26] = v3;
  v0[27] = v2;
  type metadata accessor for OptionalSourceWriter();
}

void sub_187995814()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = type metadata accessor for ModifiedContent();
  *(_DWORD *)(v0 + 8) = v2;
  *(_QWORD *)(v0 + 56) = v3;
  v4 = lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel();
  v5 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 192) = &type metadata for GaugeStyleConfiguration.MinimumValueLabel;
  *(_QWORD *)(v0 + 200) = v5;
  *(_QWORD *)(v0 + 208) = v4;
  *(_QWORD *)(v0 + 216) = v1;
  type metadata accessor for OptionalSourceWriter();
}

void sub_187995858()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v0[2] = type metadata accessor for ModifiedContent();
  v3 = lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel();
  v0[24] = &type metadata for GaugeStyleConfiguration.MaximumValueLabel;
  v0[25] = v1;
  v0[26] = v3;
  v0[27] = v2;
  type metadata accessor for OptionalSourceWriter();
}

void sub_187995890()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  v0[24] = v3;
  v0[25] = v2;
  v0[26] = v5;
  v0[27] = v1;
  v0[28] = v4;
  v0[29] = v6;
  type metadata accessor for BaseGauge.Child();
}

double sub_1879958F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseGauge<A, B, C>.Child, a1);
  _GraphValue.init<A>(_:)();
  v5 = *(_OWORD *)(v4 - 128);
  *(_OWORD *)(v1 + 224) = *(_OWORD *)(v4 - 144);
  *(_OWORD *)(v1 + 240) = v5;
  *(_OWORD *)(v1 + 256) = *(_OWORD *)(v4 - 112);
  *(_DWORD *)(v1 + 272) = *(_DWORD *)(v4 - 96);
  v6 = *(_OWORD *)(v4 - 160);
  *(_OWORD *)(v1 + 192) = *(_OWORD *)(v4 - 176);
  *(_OWORD *)(v1 + 208) = v6;
  *(_QWORD *)(v1 + 176) = lazy protocol witness table accessor for type ResolvedGauge and conformance ResolvedGauge();
  *(_QWORD *)(v1 + 184) = &protocol witness table for OptionalSourceWriter<A, B>;
  v7 = MEMORY[0x1E0CE2E70];
  *(_QWORD *)(v1 + 160) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v1 + 88), v1 + 176);
  *(_QWORD *)(v1 + 168) = &protocol witness table for OptionalSourceWriter<A, B>;
  *(_QWORD *)(v1 + 144) = MEMORY[0x18D75FFDC](v7, *(_QWORD *)(v1 + 56), v1 + 160);
  *(_QWORD *)(v1 + 152) = &protocol witness table for OptionalSourceWriter<A, B>;
  *(_QWORD *)(v1 + 128) = MEMORY[0x18D75FFDC](v7, *(_QWORD *)(v1 + 16), v1 + 144);
  *(_QWORD *)(v1 + 136) = &protocol witness table for OptionalSourceWriter<A, B>;
  *(_QWORD *)(v1 + 112) = MEMORY[0x18D75FFDC](v7, v3, v1 + 128);
  *(_QWORD *)(v1 + 120) = &protocol witness table for IgnoreViewRespondersModifier;
  MEMORY[0x18D75FFDC](v7, v2, v1 + 112);
  static ModifiedContent<>._makeView(view:inputs:)();
  v8 = *(_QWORD *)(v4 - 128);
  *(_QWORD *)(v1 + 192) = v8;
  v9 = *(_DWORD *)(v4 - 120);
  *(_DWORD *)(v1 + 200) = v9;
  *(_QWORD *)(v1 + 96) = v8;
  *(_DWORD *)(v1 + 104) = v9;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    *(_BYTE *)(v1 + 96) = 1;
    v10 = PreferencesOutputs.subscript.setter();
    *(_QWORD *)(v1 + 96) = *(_QWORD *)(v1 + 192);
    *(_DWORD *)(v1 + 104) = *(_DWORD *)(v1 + 200);
    MEMORY[0x1E0C80A78](v10, v11);
    outlined retain of [Text.Modifier](v1 + 192);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
  }
  v12 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)v12 = *(_QWORD *)(v4 - 200);
  result = *(double *)(v4 - 192);
  *(double *)(v12 + 8) = result;
  return result;
}

void closure #1 in static BaseGauge._makeView(view:inputs:)()
{
  type metadata accessor for BaseGauge();
}

uint64_t sub_187995B60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[16];

  v6[2] = a1;
  v2 = MEMORY[0x1E0DEB070];
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v2, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v6[4];
}

void closure #2 in static BaseGauge._makeView(view:inputs:)()
{
  type metadata accessor for BaseGauge();
}

uint64_t sub_187995BFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v2 = v1 + *(int *)(a1 + 68);
  v6[2] = a1;
  v7 = type metadata accessor for Optional();
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v7, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void closure #3 in static BaseGauge._makeView(view:inputs:)()
{
  type metadata accessor for BaseGauge();
}

uint64_t sub_187995CB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v2 = v1 + *(int *)(a1 + 72);
  v6[2] = a1;
  v7 = type metadata accessor for Optional();
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v7, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void closure #4 in static BaseGauge._makeView(view:inputs:)()
{
  type metadata accessor for BaseGauge();
}

uint64_t sub_187995D64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v2 = v1 + *(int *)(a1 + 76);
  v6[2] = a1;
  v7 = type metadata accessor for Optional();
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v7, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void closure #5 in static BaseGauge._makeView(view:inputs:)()
{
  type metadata accessor for BaseGauge();
}

uint64_t sub_187995E18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v2 = v1 + *(int *)(a1 + 80);
  v6[2] = a1;
  v7 = type metadata accessor for Optional();
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v7, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

void implicit closure #1 in static BaseGauge._makeView(view:inputs:)(unsigned int a1, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, uint64_t a11)
{
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v48;
  __int128 v53;
  uint64_t v54;
  unsigned int v55;
  _BYTE v56[16];
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[16];
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[16];
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[16];
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[56];
  __int128 v71;
  __int128 v72;
  _BYTE v73[72];
  __int128 v74;
  uint64_t v75;

  v54 = a11;
  v53 = a10;
  v75 = *MEMORY[0x1E0C80C00];
  v14 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)v70 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v70[16] = v14;
  *(_OWORD *)&v70[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v70[48] = *(_DWORD *)(a3 + 80);
  v15 = *(_OWORD *)(a3 + 16);
  v68 = *(_OWORD *)a3;
  v69 = v15;
  v16 = type metadata accessor for Optional();
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v16, &a10);
  LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)(a2, (uint64_t *)&v68, (uint64_t)&v72);
  *(_QWORD *)&v68 = v72;
  DWORD2(v68) = DWORD2(v72);
  *(_QWORD *)&v69 = *(_QWORD *)v73;
  DWORD2(v69) = *(_DWORD *)&v73[8];
  *(_QWORD *)v70 = *(_QWORD *)&v73[16];
  *(_OWORD *)&v70[8] = *(_OWORD *)&v73[24];
  *(_OWORD *)&v70[24] = *(_OWORD *)&v73[40];
  *(_OWORD *)&v70[40] = *(_OWORD *)&v73[56];
  v71 = v74;
  v66 = type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage(0, v16, v17, v18);
  v67 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyWidgetAuxiliaryMetadataTextImage<A>, v66);
  outlined retain of _ViewInputs(a3);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<WidgetAuxiliaryTextImagePreference?>, (uint64_t (*)(uint64_t))type metadata accessor for WidgetAuxiliaryTextImagePreference?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  v20 = v19;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v68, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_12, (uint64_t)v65, v66, MEMORY[0x1E0DEDCE8], v19, MEMORY[0x1E0DEDD18], v21);
  v22 = (void *)v68;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  v23 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)v70 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v70[16] = v23;
  *(_OWORD *)&v70[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v70[48] = *(_DWORD *)(a3 + 80);
  v24 = *(_OWORD *)(a3 + 16);
  v68 = *(_OWORD *)a3;
  v69 = v24;
  v25 = type metadata accessor for Optional();
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v25, (char *)&a10 + 8);
  LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)(a4, (uint64_t *)&v68, (uint64_t)&v72);
  *(_QWORD *)&v68 = v72;
  DWORD2(v68) = DWORD2(v72);
  *(_QWORD *)&v69 = *(_QWORD *)v73;
  DWORD2(v69) = *(_DWORD *)&v73[8];
  *(_QWORD *)v70 = *(_QWORD *)&v73[16];
  *(_OWORD *)&v70[8] = *(_OWORD *)&v73[24];
  *(_OWORD *)&v70[24] = *(_OWORD *)&v73[40];
  *(_OWORD *)&v70[40] = *(_OWORD *)&v73[56];
  v71 = v74;
  v63 = type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage(0, v25, v26, v27);
  v64 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyWidgetAuxiliaryMetadataTextImage<A>, v63);
  outlined retain of _ViewInputs(a3);
  v46 = v20;
  v28 = MEMORY[0x1E0DEDD18];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v68, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_12, (uint64_t)v62, v63, MEMORY[0x1E0DEDCE8], v20, MEMORY[0x1E0DEDD18], v29);
  v30 = (void *)v68;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  v31 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)v70 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v70[16] = v31;
  *(_OWORD *)&v70[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v70[48] = *(_DWORD *)(a3 + 80);
  v32 = *(_OWORD *)(a3 + 16);
  v68 = *(_OWORD *)a3;
  v69 = v32;
  v33 = type metadata accessor for Optional();
  v34 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v33, &a11);
  LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)(a5, (uint64_t *)&v68, (uint64_t)&v72);
  *(_QWORD *)&v68 = v72;
  DWORD2(v68) = DWORD2(v72);
  *(_QWORD *)&v69 = *(_QWORD *)v73;
  DWORD2(v69) = *(_DWORD *)&v73[8];
  *(_QWORD *)v70 = *(_QWORD *)&v73[16];
  *(_OWORD *)&v70[8] = *(_OWORD *)&v73[24];
  *(_OWORD *)&v70[24] = *(_OWORD *)&v73[40];
  *(_OWORD *)&v70[40] = *(_OWORD *)&v73[56];
  v71 = v74;
  v36 = type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage(0, v33, v34, v35);
  v60 = v36;
  v48 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyWidgetAuxiliaryMetadataTextImage<A>, v36);
  v61 = v48;
  outlined retain of _ViewInputs(a3);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v68, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_12, (uint64_t)v59, v36, MEMORY[0x1E0DEDCE8], v20, v28, v37);
  v38 = (void *)v68;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  v39 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)v70 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v70[16] = v39;
  *(_OWORD *)&v70[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v70[48] = *(_DWORD *)(a3 + 80);
  v40 = *(_OWORD *)(a3 + 16);
  v68 = *(_OWORD *)a3;
  v69 = v40;
  LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)(a6, (uint64_t *)&v68, (uint64_t)&v72);
  *(_QWORD *)&v68 = v72;
  DWORD2(v68) = DWORD2(v72);
  *(_QWORD *)&v69 = *(_QWORD *)v73;
  DWORD2(v69) = *(_DWORD *)&v73[8];
  *(_QWORD *)v70 = *(_QWORD *)&v73[16];
  *(_OWORD *)&v70[8] = *(_OWORD *)&v73[24];
  *(_OWORD *)&v70[24] = *(_OWORD *)&v73[40];
  *(_OWORD *)&v70[40] = *(_OWORD *)&v73[56];
  v71 = v74;
  v57 = v36;
  v58 = v48;
  outlined retain of _ViewInputs(a3);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v68, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_12, (uint64_t)v56, v36, MEMORY[0x1E0DEDCE8], v46, MEMORY[0x1E0DEDD18], v41);
  v42 = (void *)v68;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  v43 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v73[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v73[32] = v43;
  *(_OWORD *)&v73[48] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v73[64] = *(_DWORD *)(a3 + 80);
  v44 = *(_OWORD *)(a3 + 16);
  v72 = *(_OWORD *)a3;
  *(_OWORD *)v73 = v44;
  v45 = _ViewInputs.environment.getter();
  *(_QWORD *)&v68 = __PAIR64__(v55, a1);
  DWORD2(v68) = v55;
  HIDWORD(v68) = v55;
  *(_QWORD *)&v69 = __PAIR64__(v45, v55);
  *(_QWORD *)&v72 = a7;
  *((_QWORD *)&v72 + 1) = a8;
  *(_OWORD *)&v73[8] = v53;
  *(_QWORD *)v73 = a9;
  *(_QWORD *)&v73[24] = v54;
  type metadata accessor for BaseGauge.WidgetMetadataWriter();
}

uint64_t sub_187996478(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[20];
  uint64_t v9;

  v8[2] = a1;
  v8[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseGauge<A, B, C>.WidgetMetadataWriter, a1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<WidgetAuxiliaryViewMetadata?>, (uint64_t (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v9, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_10, (uint64_t)v8, a1, v1, v5, v2, v6);
  return *(unsigned int *)(v3 - 208);
}

void BaseGauge.Child.value.getter()
{
  lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label();
  type metadata accessor for OptionalSourceWriter();
}

void sub_18799659C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v13 = type metadata accessor for ModifiedContent();
  v9[9] = *(_QWORD *)(v13 - 8);
  *v9 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v9[22] = (uint64_t)&a9 - v15;
  v16 = lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel();
  v9[5] = v16;
  *(_QWORD *)(v12 - 136) = &type metadata for GaugeStyleConfiguration.CurrentValueLabel;
  *(_QWORD *)(v12 - 128) = v11;
  v9[15] = v11;
  v9[16] = v10;
  *(_QWORD *)(v12 - 120) = v16;
  *(_QWORD *)(v12 - 112) = v10;
  type metadata accessor for OptionalSourceWriter();
}

void sub_187996610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v13 = type metadata accessor for ModifiedContent();
  v9[11] = *(_QWORD *)(v13 - 8);
  v9[2] = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v9[21] = (char *)&a9 - v15;
  v16 = lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel();
  v9[7] = v16;
  *(_QWORD *)(v12 - 136) = &type metadata for GaugeStyleConfiguration.MinimumValueLabel;
  *(_QWORD *)(v12 - 128) = v10;
  *(_QWORD *)(v12 - 120) = v16;
  *(_QWORD *)(v12 - 112) = v11;
  type metadata accessor for OptionalSourceWriter();
}

void sub_18799667C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v13 = type metadata accessor for ModifiedContent();
  v9[12] = *(_QWORD *)(v13 - 8);
  v9[4] = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v9[1] = (char *)&a9 - v15;
  v16 = lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel();
  v9[8] = v16;
  *(_QWORD *)(v12 - 136) = &type metadata for GaugeStyleConfiguration.MaximumValueLabel;
  *(_QWORD *)(v12 - 128) = v10;
  v9[18] = v10;
  *(_QWORD *)(v12 - 120) = v16;
  *(_QWORD *)(v12 - 112) = v11;
  type metadata accessor for OptionalSourceWriter();
}

void sub_1879966EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v19 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 + 80) = v19;
  *(_QWORD *)(v9 + 104) = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v9 + 24) = (char *)&a9 - v21;
  *(_QWORD *)(v9 + 136) = v13;
  *(_QWORD *)(v18 - 136) = *(_QWORD *)AGGraphGetValue();
  *(_WORD *)(v18 - 128) = 0;
  *(_BYTE *)(v18 - 126) = 0;
  *(_QWORD *)(v9 + 512) = v12;
  *(_QWORD *)(v9 + 520) = v15;
  *(_QWORD *)(v9 + 528) = v11;
  *(_QWORD *)(v9 + 536) = v14;
  *(_QWORD *)(v9 + 544) = v10;
  *(_QWORD *)(v9 + 552) = v16;
  *(_DWORD *)(v9 + 560) = v13;
  *(_DWORD *)(v9 + 564) = *(_QWORD *)(v9 + 200);
  *(_DWORD *)(v9 + 568) = *(_QWORD *)(v9 + 184);
  *(_DWORD *)(v9 + 572) = v17;
  *(_DWORD *)(v9 + 576) = *(_DWORD *)(v9 + 196);
  lazy protocol witness table accessor for type ResolvedGauge and conformance ResolvedGauge();
  *(_QWORD *)(v9 + 152) = v14;
  *(_QWORD *)(v9 + 160) = v12;
  View.optionalViewAlias<A, B>(_:_:)();
}

void sub_1879967E0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v0 + 416) = v3;
  v10 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 424) = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 432) = v10;
  *(_QWORD *)(v0 + 440) = v5;
  v11 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 448) = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 456) = v2;
  *(_DWORD *)(v0 + 464) = v11;
  *(_DWORD *)(v0 + 468) = v4;
  *(_DWORD *)(v0 + 472) = v6;
  *(_DWORD *)(v0 + 476) = v8;
  *(_DWORD *)(v0 + 480) = v1;
  *(_QWORD *)(v9 - 152) = v7;
  *(_QWORD *)(v9 - 144) = &protocol witness table for OptionalSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)v0, v9 - 152);
  View.optionalViewAlias<A, B>(_:_:)();
}

void sub_18799687C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 8))(v1, v7);
  *(_QWORD *)(v0 + 320) = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 328) = v4;
  v11 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 336) = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 344) = v11;
  *(_QWORD *)(v0 + 352) = v6;
  *(_QWORD *)(v0 + 360) = v3;
  *(_DWORD *)(v0 + 368) = *(_QWORD *)(v0 + 136);
  *(_DWORD *)(v0 + 372) = *(_QWORD *)(v0 + 200);
  *(_DWORD *)(v0 + 376) = *(_QWORD *)(v0 + 184);
  *(_DWORD *)(v0 + 380) = v5;
  *(_DWORD *)(v0 + 384) = v9;
  *(_QWORD *)(v10 - 168) = v2;
  *(_QWORD *)(v10 - 160) = v8;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v0 + 16), v10 - 168);
  View.optionalViewAlias<A, B>(_:_:)();
}

void sub_187996924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 88) + 8))(v1, v8);
  v10 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 224) = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 232) = v10;
  v11 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 240) = v7;
  *(_QWORD *)(v0 + 248) = v11;
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 264) = v3;
  *(_DWORD *)(v0 + 272) = v4;
  *(_DWORD *)(v0 + 276) = *(_QWORD *)(v0 + 200);
  *(_DWORD *)(v0 + 280) = v6;
  *(_DWORD *)(v0 + 284) = v5;
  *(_DWORD *)(v0 + 288) = *(_DWORD *)(v0 + 196);
  *(_QWORD *)(v9 - 184) = v2;
  *(_QWORD *)(v9 - 176) = &protocol witness table for OptionalSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v0 + 32), v9 - 184);
  View.optionalViewAlias<A, B>(_:_:)();
}

uint64_t sub_1879969E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t, uint64_t))(v0[12] + 8))(v6, v2);
  AGGraphGetValue();
  *(_QWORD *)(v7 - 200) = v1;
  *(_QWORD *)(v7 - 192) = v4;
  v8 = v3;
  v9 = v3;
  v10 = v0[10];
  v11 = MEMORY[0x18D75FFDC](v9, v10, v7 - 200);
  *(double *)(v7 - 136) = ((double (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation)(v10);
  v13 = type metadata accessor for AccessibilityGaugeModifier(0, v10, v11, v12);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityGaugeModifier<A>, v13);
  v15 = type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v7 - 216) = v11;
  *(_QWORD *)(v7 - 208) = &protocol witness table for IgnoreViewRespondersModifier;
  *(_QWORD *)(v7 - 232) = MEMORY[0x18D75FFDC](v8, v15, v7 - 216);
  *(_QWORD *)(v7 - 224) = &protocol witness table for AccessibilityAttachmentModifier;
  MEMORY[0x18D75FFDC](v8, v16, v7 - 232);
  View.accessibilityConfiguration<A>(_:)(v7 - 136, v10, v13, v11, v14);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[13] + 8))(v5, v10);
}

void protocol witness for static Rule.initialValue.getter in conformance BaseGauge<A, B, C>.Child()
{
  lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label();
  type metadata accessor for OptionalSourceWriter();
}

void sub_187996B78()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel();
  type metadata accessor for OptionalSourceWriter();
}

void sub_187996BB8()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel();
  type metadata accessor for OptionalSourceWriter();
}

void sub_187996BF4()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel();
  type metadata accessor for OptionalSourceWriter();
}

uint64_t sub_187996C28()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  v1 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

void protocol witness for Rule.value.getter in conformance BaseGauge<A, B, C>.Child()
{
  BaseGauge.Child.value.getter();
}

uint64_t BaseGauge.WidgetMetadataWriter.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *Value;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  void (*v58)(char *, uint64_t, uint64_t, int *);
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id *v75;
  double v76;
  uint64_t v77;
  id *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  __int128 *v91;
  __int128 v92;
  uint64_t v94;
  void (*v95)(char *, uint64_t, uint64_t, uint64_t);
  char *v96;
  id *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;

  v105 = a3;
  v103 = a2;
  v98 = a4;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v102 = (uint64_t)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v101 = (uint64_t)&v94 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v100 = (uint64_t)&v94 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v94 - v16;
  v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v94 - v21;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, v18);
  MEMORY[0x1E0C80A78](v23, v24);
  v96 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v94 - v28;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v94 - v32;
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v94 - v36;
  v38 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  v39 = *((_QWORD *)v38 - 1);
  MEMORY[0x1E0C80A78](v38, v40);
  v97 = (id *)((char *)&v94 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v42, v43);
  v104 = (id *)((char *)&v94 - v44);
  MEMORY[0x1E0C80A78](v45, v46);
  *(_QWORD *)&v107 = (char *)&v94 - v47;
  MEMORY[0x1E0C80A78](v48, v49);
  *(_QWORD *)&v106 = (char *)&v94 - v50;
  v99 = a1;
  type metadata accessor for WidgetAuxiliaryTextImagePreference?();
  Value = (uint64_t *)AGGraphGetValue();
  v52 = *Value;
  if (*Value)
  {
    if (v52 != 1)
    {
      outlined copy of WidgetAuxiliaryTextImagePreference?(*Value);
      v53 = swift_bridgeObjectRetain();
      outlined consume of WidgetAuxiliaryTextImagePreference?(v53);
      PlatformItemList.mergedContentItem.getter(v52, (uint64_t)v37);
      swift_bridgeObjectRelease();
      v54 = type metadata accessor for PlatformItemList.Item();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v37, 0, 1, v54);
      goto LABEL_6;
    }
  }
  else
  {
    outlined copy of WidgetAuxiliaryTextImagePreference?(0);
    outlined consume of WidgetAuxiliaryTextImagePreference?(0);
  }
  v55 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v37, 1, 1, v55);
LABEL_6:
  v56 = type metadata accessor for URL();
  v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56);
  v57(v22, 1, 1, v56);
  v108 = xmmword_187BF9840;
  v113 = xmmword_187BF9840;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v58 = *(void (**)(char *, uint64_t, uint64_t, int *))(v39 + 56);
  v58(v17, 1, 1, v38);
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)((uint64_t)v37, (uint64_t)v22, (uint64_t *)&v113, (uint64_t)v17, (id *)v106);
  v59 = (uint64_t *)AGGraphGetValue();
  v60 = *v59;
  if (*v59)
  {
    if (v60 != 1)
    {
      outlined copy of WidgetAuxiliaryTextImagePreference?(*v59);
      v61 = swift_bridgeObjectRetain();
      outlined consume of WidgetAuxiliaryTextImagePreference?(v61);
      PlatformItemList.mergedContentItem.getter(v60, (uint64_t)v33);
      swift_bridgeObjectRelease();
      v62 = type metadata accessor for PlatformItemList.Item();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v33, 0, 1, v62);
      goto LABEL_11;
    }
  }
  else
  {
    outlined copy of WidgetAuxiliaryTextImagePreference?(0);
    outlined consume of WidgetAuxiliaryTextImagePreference?(0);
  }
  v63 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v33, 1, 1, v63);
LABEL_11:
  v57(v22, 1, 1, v56);
  v113 = v108;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v58(v17, 1, 1, v38);
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)((uint64_t)v33, (uint64_t)v22, (uint64_t *)&v113, (uint64_t)v17, (id *)v107);
  v64 = (uint64_t *)AGGraphGetValue();
  v65 = *v64;
  if (*v64)
  {
    if (v65 != 1)
    {
      outlined copy of WidgetAuxiliaryTextImagePreference?(*v64);
      v66 = swift_bridgeObjectRetain();
      outlined consume of WidgetAuxiliaryTextImagePreference?(v66);
      PlatformItemList.mergedContentItem.getter(v65, (uint64_t)v29);
      swift_bridgeObjectRelease();
      v67 = type metadata accessor for PlatformItemList.Item();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v29, 0, 1, v67);
      goto LABEL_16;
    }
  }
  else
  {
    outlined copy of WidgetAuxiliaryTextImagePreference?(0);
    outlined consume of WidgetAuxiliaryTextImagePreference?(0);
  }
  v68 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v29, 1, 1, v68);
LABEL_16:
  v69 = (uint64_t)v96;
  v57(v22, 1, 1, v56);
  v113 = v108;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v58(v17, 1, 1, v38);
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)((uint64_t)v29, (uint64_t)v22, (uint64_t *)&v113, (uint64_t)v17, v104);
  v70 = (uint64_t *)AGGraphGetValue();
  v71 = *v70;
  if (!*v70)
  {
    outlined copy of WidgetAuxiliaryTextImagePreference?(0);
    outlined consume of WidgetAuxiliaryTextImagePreference?(0);
    goto LABEL_20;
  }
  if (v71 == 1)
  {
LABEL_20:
    v74 = type metadata accessor for PlatformItemList.Item();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v69, 1, 1, v74);
    goto LABEL_21;
  }
  outlined copy of WidgetAuxiliaryTextImagePreference?(*v70);
  v72 = swift_bridgeObjectRetain();
  outlined consume of WidgetAuxiliaryTextImagePreference?(v72);
  PlatformItemList.mergedContentItem.getter(v71, v69);
  swift_bridgeObjectRelease();
  v73 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v69, 0, 1, v73);
LABEL_21:
  v95 = v57;
  v57(v22, 1, 1, v56);
  v113 = v108;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v58(v17, 1, 1, v38);
  v75 = v97;
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)(v69, (uint64_t)v22, (uint64_t *)&v113, (uint64_t)v17, v97);
  v76 = *(double *)AGGraphGetValue();
  outlined init with copy of WidgetAuxiliaryViewMetadata(v106, (uint64_t)v17);
  v58(v17, 0, 1, v38);
  v77 = v100;
  outlined init with copy of WidgetAuxiliaryViewMetadata(v107, v100);
  v58((char *)v77, 0, 1, v38);
  v103 = v56;
  v78 = v104;
  v79 = v101;
  outlined init with copy of WidgetAuxiliaryViewMetadata((uint64_t)v104, v101);
  v58((char *)v79, 0, 1, v38);
  v80 = v102;
  outlined init with copy of WidgetAuxiliaryViewMetadata((uint64_t)v75, v102);
  v58((char *)v80, 0, 1, v38);
  v81 = (uint64_t *)AGGraphGetValue();
  v82 = *v81;
  v83 = v81[1];
  swift_retain();
  swift_retain();
  *(_QWORD *)&v113 = v82;
  *((_QWORD *)&v113 + 1) = v83;
  static WidgetAuxiliaryViewMetadata.tint(from:)((uint64_t)&v111);
  swift_release();
  swift_release();
  v109 = v111;
  v110 = v112;
  WidgetAuxiliaryViewMetadata.Gauge.init(value:label:currentValueLabel:minimumValueLabel:maximumValueLabel:tint:)((uint64_t)v17, v77, v79, v80, &v109, (double *)&v113, v76);
  outlined destroy of WidgetAuxiliaryViewMetadata((uint64_t)v75);
  outlined destroy of WidgetAuxiliaryViewMetadata((uint64_t)v78);
  outlined destroy of WidgetAuxiliaryViewMetadata(v107);
  outlined destroy of WidgetAuxiliaryViewMetadata(v106);
  v106 = v114;
  v107 = v113;
  v84 = v115;
  LOBYTE(v80) = v116;
  v85 = v98;
  *(_QWORD *)v98 = 0;
  *((_QWORD *)v85 + 1) = 0;
  v86 = &v85[v38[6]];
  v87 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v86, 1, 1, v87);
  *(_QWORD *)&v85[v38[7]] = 0;
  v88 = &v85[v38[8]];
  v89 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v88, 1, 1, v89);
  v90 = &v85[v38[9]];
  v95(&v85[v38[10]], 1, 1, v103);
  v91 = (__int128 *)&v85[v38[11]];
  *v91 = v108;
  v91[1] = 0u;
  v91[2] = 0u;
  v91[3] = 0u;
  v92 = v106;
  *(_OWORD *)v90 = v107;
  *((_OWORD *)v90 + 1) = v92;
  *((_OWORD *)v90 + 2) = v84;
  v90[48] = v80;
  return ((uint64_t (*)(char *, _QWORD, uint64_t, int *))v58)(v85, 0, 1, v38);
}

uint64_t protocol witness for Rule.value.getter in conformance BaseGauge<A, B, C>.WidgetMetadataWriter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return BaseGauge.WidgetMetadataWriter.value.getter(*v1, v1[1], v1[2], a1);
}

void protocol witness for static View._makeView(view:inputs:) in conformance BaseGauge<A, B, C>()
{
  static BaseGauge._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance BaseGauge<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseGauge<A, B, C>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BaseGauge<A, B, C>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseGauge<A, B, C>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance BaseGauge<A, B, C>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BaseGauge<A, B, C>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedGauge(uint64_t a1)
{
  return specialized static StyleableView._viewListCount(inputs:)(*(ValueMetadata **)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

double protocol witness for View.body.getter in conformance ResolvedGauge@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  char v3;
  char v4;
  char v5;

  result = *(double *)v1;
  v3 = *(_BYTE *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 9);
  v5 = *(_BYTE *)(v1 + 10);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = (v3 & 1) == 0;
  *(_BYTE *)(a1 + 9) = (v4 & 1) == 0;
  *(_BYTE *)(a1 + 10) = (v5 & 1) == 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleConfiguration.Label, &type metadata for GaugeStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleConfiguration.Label, &type metadata for GaugeStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleConfiguration.CurrentValueLabel, &type metadata for GaugeStyleConfiguration.CurrentValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleConfiguration.CurrentValueLabel, &type metadata for GaugeStyleConfiguration.CurrentValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleConfiguration.MinimumValueLabel, &type metadata for GaugeStyleConfiguration.MinimumValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleConfiguration.MinimumValueLabel, &type metadata for GaugeStyleConfiguration.MinimumValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleConfiguration.MaximumValueLabel, &type metadata for GaugeStyleConfiguration.MaximumValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GaugeStyleConfiguration.MaximumValueLabel, &type metadata for GaugeStyleConfiguration.MaximumValueLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel);
  }
  return result;
}

void type metadata accessor for BaseGauge.Child()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type ResolvedGauge and conformance ResolvedGauge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGauge and conformance ResolvedGauge;
  if (!lazy protocol witness table cache variable for type ResolvedGauge and conformance ResolvedGauge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedGauge, &unk_1E1AB64C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGauge and conformance ResolvedGauge);
  }
  return result;
}

void partial apply for implicit closure #1 in static BaseGauge._makeView(view:inputs:)()
{
  uint64_t v0;
  _BYTE v1[24];

  *(_QWORD *)&v1[16] = *(_QWORD *)(v0 + 48);
  *(_OWORD *)v1 = *(_OWORD *)(v0 + 32);
  implicit closure #1 in static BaseGauge._makeView(view:inputs:)(*(_DWORD *)(v0 + 64), *(_DWORD *)(v0 + 68), *(_QWORD *)(v0 + 72), *(_DWORD *)(v0 + 80), *(_DWORD *)(v0 + 84), *(_DWORD *)(v0 + 88), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(__int128 *)&v1[8], *(_QWORD *)(v0 + 56));
}

void type metadata accessor for BaseGauge.WidgetMetadataWriter()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t getEnumTagSinglePayload for ResolvedGauge(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 11))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedGauge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 11) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 11) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for ResolvedGauge()
{
  return &unk_1E1AB64C8;
}

void base witness table accessor for _AttributeBody in BaseGauge<A, B, C>.WidgetMetadataWriter()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedGauge()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in BaseGauge<A, B, C>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in BaseGauge.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  v2 = type metadata accessor for Optional();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t partial apply for closure #2 in BaseGauge.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  v2 = type metadata accessor for Optional();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t partial apply for closure #3 in BaseGauge.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  v2 = type metadata accessor for Optional();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t partial apply for closure #4 in BaseGauge.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  v2 = type metadata accessor for Optional();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t outlined init with copy of WidgetAuxiliaryViewMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WidgetAuxiliaryViewMetadata(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for SystemTabViewStyle()
{
  return &type metadata for SystemTabViewStyle;
}

void static SystemTabViewStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_187997C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  type metadata accessor for _GraphValue();
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v17 = *(_OWORD *)(v1 + 56);
  v18 = *(_OWORD *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 72);
  _GraphValue.value.getter();
  v11 = type metadata accessor for AdaptableTabView(255, v3, v2, v10);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v3, v2, v12);
  v13 = type metadata accessor for _VariadicView.Tree();
  type metadata accessor for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>(255);
  type metadata accessor for ModifiedContent();
  v15 = type metadata accessor for SystemTabViewStyle.Body(0, v3, v2, v14);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemTabViewStyle.Body<A>, v15);
  _GraphValue.init<A>(_:)();
  v20 = v5;
  v21 = v6;
  v22 = v0;
  v23 = v7;
  v24 = v8;
  v25 = v18;
  v26 = v17;
  v27 = v9;
  v28 = v4;
  v19[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>, v11);
  v19[1] = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v13, v19);
  return static ModifiedContent<>._makeView(view:inputs:)();
}

void static SystemTabViewStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_187997E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;

  type metadata accessor for _GraphValue();
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  _GraphValue.value.getter();
  v10 = type metadata accessor for AdaptableTabView(255, v3, v2, v9);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v3, v2, v11);
  v12 = type metadata accessor for _VariadicView.Tree();
  type metadata accessor for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>(255);
  type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for SystemTabViewStyle.Body(0, v3, v2, v13);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemTabViewStyle.Body<A>, v14);
  _GraphValue.init<A>(_:)();
  v21 = v0;
  v22 = v4;
  v23 = v5;
  v24 = v7;
  v25 = v8;
  v26 = v19;
  v27 = v18;
  v28 = v17;
  v29 = v6;
  v30 = v16;
  v20[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>, v10);
  v20[1] = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v12, v20);
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

void SystemTabViewStyle.Body.base.getter()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_187998004(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void SystemTabViewStyle.Body.value.getter(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata *v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t v13;

  v9 = a3;
  type metadata accessor for Binding();
  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8, v5);
  v7 = (char *)&v7 - v6;
  v10 = &type metadata for SystemTabViewStyle;
  v11 = a1;
  v12 = &protocol witness table for SystemTabViewStyle;
  v13 = a2;
  type metadata accessor for _TabViewValue();
}

void sub_1879980E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = type metadata accessor for AdaptableTabView(0, v10, v9, v14);
  *(_QWORD *)(v11 - 272) = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v11 - 288) = (char *)&a9 - v17;
  *(_QWORD *)(v11 - 280) = type metadata accessor for TabViewStyleConfiguration.Content(255, v10, v9, v18);
  v19 = type metadata accessor for _VariadicView.Tree();
  *(_QWORD *)(v11 - 264) = v19;
  *(_QWORD *)(v11 - 256) = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  SystemTabViewStyle.Body.base.getter();
}

void sub_1879981F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v3 + 16))(v2, v1, *(_QWORD *)(v5 - 296));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  SystemTabViewStyle.Body.base.getter();
}

uint64_t sub_187998230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v12 = v6 + *(int *)(type metadata accessor for TabViewStyleConfiguration(0, v7, v5, a4) + 36);
  v14 = *(_QWORD *)v12;
  v13 = *(_QWORD *)(v12 + 8);
  v15 = *(_BYTE *)(v12 + 16);
  outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)v12, v13);
  v9(v6, v4);
  default argument 0 of AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)(v11 - 120);
  v16 = *(_BYTE *)(v11 - 112);
  *(_QWORD *)(v11 - 136) = *(_QWORD *)(v11 - 120);
  *(_BYTE *)(v11 - 128) = v16;
  default argument 1 of AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)(v11 - 152);
  v17 = *(_BYTE *)(v11 - 144);
  *(_QWORD *)(v11 - 168) = *(_QWORD *)(v11 - 152);
  *(_BYTE *)(v11 - 160) = v17;
  KeyPath = swift_getKeyPath();
  v19 = swift_getKeyPath();
  AdaptableTabView.init(defaultPlacement:contentMode:accessoryViewConfiguration:clientSidebarVisibility:selection:legacySidebarVisibilitySPI:adaptationMode:)(v11 - 136, (uint64_t *)(v11 - 168), KeyPath, 0, 0, 0, v19, 0, *(_QWORD *)(v11 - 288), 0, 0, *(_QWORD *)(v11 - 304), v14, v13, v15, 2, v7, v5);
  *(_QWORD *)(v11 - 224) = v7;
  *(_QWORD *)(v11 - 216) = v5;
  *(_DWORD *)(v11 - 208) = v8;
  v20 = *(_QWORD *)(v11 - 272);
  _VariadicView.Tree.init(_:content:)();
  *(_QWORD *)(v11 - 192) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptableTabView<A>, v20);
  *(_QWORD *)(v11 - 184) = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  v21 = *(_QWORD *)(v11 - 264);
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v21, v11 - 192);
  v23 = lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
  View.input<A>(_:)((uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v21, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v22, v23);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 256) + 8))(v10, v21);
}

void closure #1 in SystemTabViewStyle.Body.value.getter()
{
  type metadata accessor for _TabViewValue();
}

void sub_187998448(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  SystemTabViewStyle.Body.base.getter();
}

uint64_t sub_187998488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  v7 = type metadata accessor for TabViewStyleConfiguration.Content(0, v1, v0, v6);
  v8 = static ViewBuilder.buildExpression<A>(_:)(v7, v7, &protocol witness table for TabViewStyleConfiguration<A>.Content);
  return static ViewBuilder.buildBlock<A>(_:)(v8, v7, v2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SystemTabViewStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  type metadata accessor for AdaptableTabView(255, v4, v5, a2);
  type metadata accessor for TabViewStyleConfiguration.Content(255, v4, v5, v6);
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>(255);
  v7 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

void protocol witness for Rule.value.getter in conformance SystemTabViewStyle.Body<A>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  SystemTabViewStyle.Body.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void type metadata accessor for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>)
  {
    v2 = lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>);
  }
}

uint64_t type metadata accessor for SystemTabViewStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SystemTabViewStyle.Body);
}

void base witness table accessor for _AttributeBody in SystemTabViewStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void partial apply for closure #1 in SystemTabViewStyle.Body.value.getter()
{
  closure #1 in SystemTabViewStyle.Body.value.getter();
}

ValueMetadata *type metadata accessor for TraitBasedBadgedViewStyle()
{
  return &type metadata for TraitBasedBadgedViewStyle;
}

uint64_t associated type witness table accessor for BadgedViewStyle.Body : View in TraitBasedBadgedViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for BadgeTraitKey()
{
  return &type metadata for BadgeTraitKey;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>>();
    v2 = v1;
    v3[0] = &protocol witness table for BadgeViewStyleConfiguration.Content;
    v3[1] = lazy protocol witness table accessor for type _TraitWritingModifier<BadgeTraitKey> and conformance _TraitWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>>)
  {
    type metadata accessor for _TraitWritingModifier<BadgeTraitKey>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>>);
  }
}

void type metadata accessor for _TraitWritingModifier<BadgeTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<BadgeTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<BadgeTraitKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<BadgeTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<BadgeTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<BadgeTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<BadgeTraitKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<BadgeTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

SwiftUI::UnifiedWindowToolbarStyle __swiftcall UnifiedWindowToolbarStyle.init()()
{
  SwiftUI::UnifiedWindowToolbarStyle result;

  result.showsTitle = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::UnifiedWindowToolbarStyle __swiftcall UnifiedWindowToolbarStyle.init(showsTitle:)(Swift::Bool showsTitle)
{
  SwiftUI::UnifiedWindowToolbarStyle result;

  result.showsTitle = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void UnifiedWindowToolbarStyle.configureWindowToolbar(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static UnifiedWindowToolbarStyle._makeInputs(style:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t storeEnumTagSinglePayload for UnifiedWindowToolbarStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187998854 + 4 * byte_187C74BB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187998888 + 4 * byte_187C74BB0[v4]))();
}

uint64_t sub_187998888(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187998890(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187998898);
  return result;
}

uint64_t sub_1879988A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1879988ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1879988B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879988B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnifiedWindowToolbarStyle()
{
  return &type metadata for UnifiedWindowToolbarStyle;
}

void static BackgroundTask.intentDidRun.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SnapshotResponse.init(restoredDefaultState:estimatedSnapshotExpiration:identifier:)()
{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SnapshotData.reason.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SnapshotData.identifier.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static SnapshotData.SnapshotReason.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SnapshotData.SnapshotReason.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SnapshotData.SnapshotReason.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type SnapshotData.SnapshotReason and conformance SnapshotData.SnapshotReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SnapshotData.SnapshotReason and conformance SnapshotData.SnapshotReason;
  if (!lazy protocol witness table cache variable for type SnapshotData.SnapshotReason and conformance SnapshotData.SnapshotReason)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SnapshotData.SnapshotReason, &type metadata for SnapshotData.SnapshotReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SnapshotData.SnapshotReason and conformance SnapshotData.SnapshotReason);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SnapshotResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      type metadata accessor for Date?();
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = *(int *)(a3 + 24);
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for SnapshotResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for SnapshotResponse(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for Date?();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for SnapshotResponse(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for Date?();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *initializeWithTake for SnapshotResponse(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for Date?();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *assignWithTake for SnapshotResponse(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for Date?();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SnapshotResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187998F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  type metadata accessor for Date?();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for SnapshotResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_187998FE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for Date?();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
}

uint64_t type metadata accessor for SnapshotResponse()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SnapshotResponse;
  if (!type metadata singleton initialization cache for SnapshotResponse)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for SnapshotResponse()
{
  unint64_t v0;

  type metadata accessor for Date?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for SnapshotData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SnapshotData(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SnapshotData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SnapshotData()
{
  return &type metadata for SnapshotData;
}

uint64_t storeEnumTagSinglePayload for SnapshotData.SnapshotReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_187999234 + 4 * byte_187C74BF5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_187999268 + 4 * asc_187C74BF0[v4]))();
}

uint64_t sub_187999268(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187999270(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187999278);
  return result;
}

uint64_t sub_187999284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18799928CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_187999290(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187999298(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SnapshotData.SnapshotReason()
{
  return &type metadata for SnapshotData.SnapshotReason;
}

void static BackgroundTask.snapshot.getter()
{
  static BackgroundTask.intentDidRun.getter();
}

void static BackgroundTask.relevantShortcut.getter()
{
  static BackgroundTask.intentDidRun.getter();
}

void static BackgroundTask.watchConnectivity.getter()
{
  static BackgroundTask.intentDidRun.getter();
}

void static BackgroundTask.bluetoothAlert.getter()
{
  static BackgroundTask.intentDidRun.getter();
}

uint64_t ListRowSeparatorVisitor.visit(view:traits:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;

  if (*(_BYTE *)(v0 + 96))
  {
    if (*(_BYTE *)(v0 + 96) == 1)
    {
      v1 = *(_QWORD *)(v0 + 104);
      if ((v1 & 1) != 0)
      {
        ViewTraitCollection.value<A>(for:defaultValue:)();
        outlined consume of ListRowSeparatorVisitor.Neighbor?(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
        *(_QWORD *)v0 = v3;
        *(_QWORD *)(v0 + 8) = v4;
        *(_QWORD *)(v0 + 16) = v5;
        *(_QWORD *)(v0 + 24) = v6;
      }
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_release();
      swift_release();
      *(_BYTE *)(v0 + 32) = v3;
      *(_QWORD *)(v0 + 40) = v4;
      *(_BYTE *)(v0 + 48) = v5;
      *(_QWORD *)(v0 + 56) = v6;
      *(_BYTE *)(v0 + 96) = 2;
      if ((v1 & 2) != 0)
      {
        ViewTraitCollection.value<A>(for:defaultValue:)();
        outlined consume of ListRowSeparatorVisitor.Neighbor?(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
        result = 0;
        *(_QWORD *)(v0 + 64) = v3;
        *(_QWORD *)(v0 + 72) = v4;
        *(_QWORD *)(v0 + 80) = v5;
        *(_QWORD *)(v0 + 88) = v6;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      ViewTraitCollection.value<A>(for:defaultValue:)();
      outlined consume of ListRowSeparatorVisitor.Neighbor?(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
      result = 0;
      *(_QWORD *)(v0 + 64) = v3;
      *(_QWORD *)(v0 + 72) = v4;
      *(_QWORD *)(v0 + 80) = v5 | 0x8000000000000000;
      *(_QWORD *)(v0 + 88) = v6;
    }
  }
  else
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    outlined consume of ListRowSeparatorVisitor.Neighbor?(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
    *(_QWORD *)v0 = v3;
    *(_QWORD *)(v0 + 8) = v4;
    *(_QWORD *)(v0 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)(v0 + 24) = v6;
    result = 1;
    *(_BYTE *)(v0 + 96) = 1;
  }
  return result;
}

uint64_t outlined copy of ListRowSeparatorVisitor.Neighbor()
{
  swift_retain();
  return swift_retain();
}

unint64_t destroy for ListRowSeparatorVisitor(_QWORD *a1)
{
  unint64_t result;

  if (*a1 >> 2 != 0xFFFFFFFFLL || a1[2] >= 4uLL)
    outlined consume of ListRowSeparatorVisitor.Neighbor();
  swift_release();
  swift_release();
  result = a1[8];
  if (result >> 2 != 0xFFFFFFFF || a1[10] >= 4uLL)
    return outlined consume of ListRowSeparatorVisitor.Neighbor();
  return result;
}

uint64_t initializeWithCopy for ListRowSeparatorVisitor(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[2];
  if ((unint64_t)*a2 >> 2 != 0xFFFFFFFF || v5 >= 4)
  {
    v7 = a2[1];
    v8 = a2[3];
    outlined copy of ListRowSeparatorVisitor.Neighbor();
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v8;
  }
  else
  {
    v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
  }
  v10 = a2[8];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 56) = a2[7];
  v11 = a2[10];
  swift_retain();
  swift_retain();
  if (v10 >> 2 == 0xFFFFFFFF && v11 < 4)
  {
    v12 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v12;
  }
  else
  {
    v13 = a2[9];
    v14 = a2[11];
    outlined copy of ListRowSeparatorVisitor.Neighbor();
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v14;
  }
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 104) = a2[13];
  return a1;
}

uint64_t assignWithCopy for ListRowSeparatorVisitor(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  BOOL v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a2;
  v5 = a2[2];
  v7 = (unint64_t)*a2 >> 2 == 0xFFFFFFFF && v5 < 4;
  if (*(_QWORD *)a1 >> 2 != 0xFFFFFFFFLL || *(_QWORD *)(a1 + 16) >= 4uLL)
  {
    if (v7)
    {
      outlined destroy of ListRowSeparatorVisitor.Neighbor(a1);
      v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      v11 = a2[1];
      v12 = a2[3];
      outlined copy of ListRowSeparatorVisitor.Neighbor();
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v12;
      outlined consume of ListRowSeparatorVisitor.Neighbor();
    }
  }
  else if (v7)
  {
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    v13 = a2[1];
    v14 = a2[3];
    outlined copy of ListRowSeparatorVisitor.Neighbor();
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v14;
  }
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_retain();
  swift_release();
  v15 = (_OWORD *)(a1 + 64);
  v17 = a2 + 8;
  v16 = a2[8];
  v18 = a2[10];
  v20 = v16 >> 2 == 0xFFFFFFFF && v18 < 4;
  if (*(_QWORD *)(a1 + 64) >> 2 == 0xFFFFFFFFLL && *(_QWORD *)(a1 + 80) < 4uLL)
  {
    if (v20)
    {
      v21 = *((_OWORD *)a2 + 5);
      *v15 = *v17;
      *(_OWORD *)(a1 + 80) = v21;
    }
    else
    {
      v25 = a2[9];
      v26 = a2[11];
      outlined copy of ListRowSeparatorVisitor.Neighbor();
      *(_QWORD *)(a1 + 64) = v16;
      *(_QWORD *)(a1 + 72) = v25;
      *(_QWORD *)(a1 + 80) = v18;
      *(_QWORD *)(a1 + 88) = v26;
    }
  }
  else if (v20)
  {
    outlined destroy of ListRowSeparatorVisitor.Neighbor(a1 + 64);
    v22 = *((_OWORD *)a2 + 5);
    *v15 = *v17;
    *(_OWORD *)(a1 + 80) = v22;
  }
  else
  {
    v23 = a2[9];
    v24 = a2[11];
    outlined copy of ListRowSeparatorVisitor.Neighbor();
    *(_QWORD *)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 72) = v23;
    *(_QWORD *)(a1 + 80) = v18;
    *(_QWORD *)(a1 + 88) = v24;
    outlined consume of ListRowSeparatorVisitor.Neighbor();
  }
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 104) = a2[13];
  return a1;
}

uint64_t outlined destroy of ListRowSeparatorVisitor.Neighbor(uint64_t a1)
{
  outlined consume of ListRowSeparatorVisitor.Neighbor();
  return a1;
}

uint64_t assignWithTake for ListRowSeparatorVisitor(uint64_t a1, uint64_t a2)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)a1 >> 2 == 0xFFFFFFFFLL && *(_QWORD *)(a1 + 16) < 4uLL)
    goto LABEL_12;
  v5 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)a2 >> 2 == 0xFFFFFFFFLL && v5 < 4)
  {
    outlined destroy of ListRowSeparatorVisitor.Neighbor(a1);
LABEL_12:
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v8;
  outlined consume of ListRowSeparatorVisitor.Neighbor();
LABEL_13:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 64) >> 2 != 0xFFFFFFFFLL || *(_QWORD *)(a1 + 80) >= 4uLL)
  {
    if (v10 >> 2 != 0xFFFFFFFF || v11 >= 4)
    {
      v13 = *(_QWORD *)(a2 + 72);
      v14 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 64) = v10;
      *(_QWORD *)(a1 + 72) = v13;
      *(_QWORD *)(a1 + 80) = v11;
      *(_QWORD *)(a1 + 88) = v14;
      outlined consume of ListRowSeparatorVisitor.Neighbor();
      goto LABEL_20;
    }
    outlined destroy of ListRowSeparatorVisitor.Neighbor(a1 + 64);
  }
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_20:
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListRowSeparatorVisitor(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)a1 >> 2;
  v4 = -2 - v3;
  if (-2 - (int)v3 < 0)
    v4 = -1;
  if (v3 <= 0x80000000)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ListRowSeparatorVisitor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
    {
      *(_QWORD *)result = 4 * ~a2;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ListRowSeparatorVisitor()
{
  return &type metadata for ListRowSeparatorVisitor;
}

uint64_t destroy for ListRowSeparatorVisitor.Neighbor()
{
  return outlined consume of ListRowSeparatorVisitor.Neighbor();
}

_QWORD *initializeWithCopy for ListRowSeparatorVisitor.Neighbor(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of ListRowSeparatorVisitor.Neighbor();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

_QWORD *assignWithCopy for ListRowSeparatorVisitor.Neighbor(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of ListRowSeparatorVisitor.Neighbor();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of ListRowSeparatorVisitor.Neighbor();
  return a1;
}

_OWORD *assignWithTake for ListRowSeparatorVisitor.Neighbor(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  outlined consume of ListRowSeparatorVisitor.Neighbor();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListRowSeparatorVisitor.Neighbor(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)a1 >> 2;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ListRowSeparatorVisitor.Neighbor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 4 * -a2;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for ListRowSeparatorVisitor.Neighbor(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[2] & 3 | (a2 << 63);
  *result &= 3uLL;
  result[2] = v2;
  return result;
}

void *type metadata accessor for ListRowSeparatorVisitor.Neighbor()
{
  return &unk_1E1AE1DE0;
}

ValueMetadata *type metadata accessor for ListRowSeparatorVisitor.Options()
{
  return &type metadata for ListRowSeparatorVisitor.Options;
}

uint64_t storeEnumTagSinglePayload for ListRowSeparatorVisitor.Steps(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187999D4C + 4 * byte_187C74CF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187999D80 + 4 * byte_187C74CF0[v4]))();
}

uint64_t sub_187999D80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187999D88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187999D90);
  return result;
}

uint64_t sub_187999D9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187999DA4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187999DA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187999DB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ListRowSeparatorVisitor.Steps()
{
  return &unk_1E1AE1D28;
}

unint64_t lazy protocol witness table accessor for type ListRowSeparatorVisitor.Steps and conformance ListRowSeparatorVisitor.Steps()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Steps and conformance ListRowSeparatorVisitor.Steps;
  if (!lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Steps and conformance ListRowSeparatorVisitor.Steps)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListRowSeparatorVisitor.Steps, &unk_1E1AE1D28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Steps and conformance ListRowSeparatorVisitor.Steps);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options;
  if (!lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListRowSeparatorVisitor.Options, &type metadata for ListRowSeparatorVisitor.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options;
  if (!lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListRowSeparatorVisitor.Options, &type metadata for ListRowSeparatorVisitor.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options;
  if (!lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListRowSeparatorVisitor.Options, &type metadata for ListRowSeparatorVisitor.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options;
  if (!lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListRowSeparatorVisitor.Options, &type metadata for ListRowSeparatorVisitor.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options);
  }
  return result;
}

uint64_t static Animation.timingCurve(_:duration:)()
{
  UnitCurve.CubicSolver.init(startControlPoint:endControlPoint:)();
  lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation();
  return Animation.init<A>(_:)();
}

double BezierTimingCurve.startControlPoint.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void BezierTimingCurve.startControlPoint.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*BezierTimingCurve.startControlPoint.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double BezierTimingCurve.endControlPoint.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void BezierTimingCurve.endControlPoint.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*BezierTimingCurve.endControlPoint.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void BezierTimingCurve.init(startControlPoint:endControlPoint:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

Swift::Double __swiftcall BezierTimingCurve.value(at:)(Swift::Double at)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Double result;

  BezierTimingCurve.value(at:)((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE7ED8], v1, v2, v3, v4);
  return result;
}

Swift::Double __swiftcall BezierTimingCurve.velocity(at:)(Swift::Double at)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Double result;

  BezierTimingCurve.value(at:)(MEMORY[0x1E0CE7EE0], v1, v2, v3, v4);
  return result;
}

uint64_t BezierTimingCurve.value(at:)(uint64_t (*a1)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a1(a1, a2, a3, a4, a5);
}

int8x16_t BezierTimingCurve.inverse.getter@<Q0>(int8x16_t *a1@<X8>)
{
  int8x16_t *v1;
  int8x16_t result;
  int8x16_t v3;

  result = vextq_s8(*v1, *v1, 8uLL);
  v3 = vextq_s8(v1[1], v1[1], 8uLL);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t BezierTimingCurve.hash(into:)()
{
  UnitPoint.hash(into:)();
  return UnitPoint.hash(into:)();
}

uint64_t static BezierTimingCurve.== infix(_:_:)()
{
  if ((static UnitPoint.== infix(_:_:)() & 1) != 0)
    return static UnitPoint.== infix(_:_:)();
  else
    return 0;
}

Swift::Int BezierTimingCurve.hashValue.getter()
{
  Hasher.init(_seed:)();
  UnitPoint.hash(into:)();
  UnitPoint.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BezierTimingCurve()
{
  Hasher.init(_seed:)();
  UnitPoint.hash(into:)();
  UnitPoint.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance BezierTimingCurve()
{
  UnitPoint.hash(into:)();
  return UnitPoint.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BezierTimingCurve()
{
  Hasher.init(_seed:)();
  UnitPoint.hash(into:)();
  UnitPoint.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BezierTimingCurve()
{
  if ((static UnitPoint.== infix(_:_:)() & 1) != 0)
    return static UnitPoint.== infix(_:_:)();
  else
    return 0;
}

double one-time initialization function for easeInEaseOut()
{
  double result;

  result = 0.42;
  static BezierTimingCurve.easeInEaseOut = xmmword_187C74F60;
  *(_OWORD *)algn_1EDE3A030 = xmmword_187C74F70;
  return result;
}

double static BezierTimingCurve.easeInEaseOut.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static BezierTimingCurve.easeInEaseOut.getter(&one-time initialization token for easeInEaseOut, (__n128 *)&static BezierTimingCurve.easeInEaseOut, (__n128 *)algn_1EDE3A030, a1).n128_u64[0];
  return result;
}

double one-time initialization function for easeIn()
{
  double result;

  result = 0.42;
  __asm { FMOV            V1.2D, #1.0 }
  static BezierTimingCurve.easeIn = xmmword_187C74F60;
  *(_OWORD *)algn_1EDE3A050 = _Q1;
  return result;
}

double static BezierTimingCurve.easeIn.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static BezierTimingCurve.easeInEaseOut.getter(&one-time initialization token for easeIn, (__n128 *)&static BezierTimingCurve.easeIn, (__n128 *)algn_1EDE3A050, a1).n128_u64[0];
  return result;
}

double one-time initialization function for easeOut()
{
  double result;

  static BezierTimingCurve.easeOut = 0;
  *(_QWORD *)algn_1EDE3A068 = 0;
  result = 0.58;
  xmmword_1EDE3A070 = xmmword_187C74F70;
  return result;
}

double static BezierTimingCurve.easeOut.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static BezierTimingCurve.easeInEaseOut.getter(&one-time initialization token for easeOut, (__n128 *)&static BezierTimingCurve.easeOut, (__n128 *)&xmmword_1EDE3A070, a1).n128_u64[0];
  return result;
}

__n128 one-time initialization function for linear()
{
  __n128 result;

  static BezierTimingCurve.linear = 0;
  *(_QWORD *)algn_1EDE3A088 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  xmmword_1EDE3A090 = (__int128)result;
  return result;
}

double static BezierTimingCurve.linear.getter@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = static BezierTimingCurve.easeInEaseOut.getter(&one-time initialization token for linear, (__n128 *)&static BezierTimingCurve.linear, (__n128 *)&xmmword_1EDE3A090, a1).n128_u64[0];
  return result;
}

__n128 static BezierTimingCurve.easeInEaseOut.getter@<Q0>(_QWORD *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result;
  __n128 v8;

  if (*a1 != -1)
    swift_once();
  result = *a2;
  v8 = *a3;
  *a4 = *a2;
  a4[1] = v8;
  return result;
}

unint64_t lazy protocol witness table accessor for type BezierTimingCurve and conformance BezierTimingCurve()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BezierTimingCurve and conformance BezierTimingCurve;
  if (!lazy protocol witness table cache variable for type BezierTimingCurve and conformance BezierTimingCurve)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BezierTimingCurve, &type metadata for BezierTimingCurve);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierTimingCurve and conformance BezierTimingCurve);
  }
  return result;
}

ValueMetadata *type metadata accessor for BezierTimingCurve()
{
  return &type metadata for BezierTimingCurve;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool)@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD)@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(*a1, a1[1]);
  *a3 = result & 1;
  return result;
}

uint64_t EnvironmentValues.textInputValidation.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance TextInputValidationKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of TextInputValidation?((uint64_t)&static TextInputValidationKey.defaultValue, a1);
}

uint64_t EnvironmentValues.textInputValidation.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[40];

  outlined init with copy of TextInputValidation?(a1, (uint64_t)v4);
  type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of TextInputValidation?(a1);
}

uint64_t View.textInputValidation(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)@<X0>(_QWORD *@<X0>, _BYTE *@<X8>);
  __int128 v8;
  __int128 v9;
  _UNKNOWN **v10;

  swift_getKeyPath();
  if (a1)
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = a1;
    *(_QWORD *)(v4 + 24) = a2;
    v5 = swift_allocObject();
    v6 = _sSSSbIeggd_SSSbIegnr_TRTA_0;
    *(_QWORD *)(v5 + 16) = _sSSSbIeggd_SSSbIegnr_TRTA_0;
    *(_QWORD *)(v5 + 24) = v4;
    *((_QWORD *)&v9 + 1) = &unk_1E1AE9070;
    v10 = &protocol witness table for CustomTextInputValidation;
    *(_QWORD *)&v8 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool);
    *((_QWORD *)&v8 + 1) = v5;
    swift_retain();
  }
  else
  {
    v6 = 0;
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
  }
  outlined copy of AppIntentExecutor?(a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
  View.environment<A>(_:_:)();
  swift_release();
  return outlined destroy of TextInputValidation?((uint64_t)&v8);
}

uint64_t key path getter for EnvironmentValues.textInputValidation : EnvironmentValues(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_18799A8FC(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with copy of TextInputValidation?(a1, (uint64_t)v2);
  return EnvironmentValues.textInputValidation.setter((uint64_t)v2);
}

uint64_t outlined destroy of TextInputValidation?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TextInputValidation?(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18799A96C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sSSSbIeggd_SSSbIegnr_TRTA_0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, a1[1]);
  *a2 = result & 1;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(unsigned __int8 *__return_ptr, _QWORD *);
  unsigned __int8 v5;
  _QWORD v6[2];

  v3 = *(void (**)(unsigned __int8 *__return_ptr, _QWORD *))(v2 + 16);
  v6[0] = a1;
  v6[1] = a2;
  v3(&v5, v6);
  return v5;
}

uint64_t sub_18799A9FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<TextInputValidation?>(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextInputValidation?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TextInputValidation?>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TextInputValidation?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextInputValidation?>, (uint64_t (*)(uint64_t))type metadata accessor for TextInputValidation?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
}

void *type metadata accessor for CustomTextInputValidation()
{
  return &unk_1E1AE9070;
}

uint64_t outlined init with copy of TextInputValidation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TextInputValidation?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>);
  }
}

ValueMetadata *type metadata accessor for TextInputValidationKey()
{
  return &type metadata for TextInputValidationKey;
}

void View.hiddenAllowingViewResponders()()
{
  JUMPOUT(0x18D75B4ACLL);
}

void View.hiddenAllowingPlatformItemList()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t _ViewInputs.requestedHiddenRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedHiddenRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
}

uint64_t _ViewInputs.requestedDynamicHiddenRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedHiddenRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
}

uint64_t _ViewInputs.requestedHiddenRepresentation.setter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  a3(a1, a2);
  return PropertyList.subscript.setter();
}

void View.hidden()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t View.hidden(_:allowingDisplayList:)(char a1, char a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE v5[8];
  uint64_t v6;

  v3 = 16;
  if ((a2 & 1) == 0)
    v3 = 0;
  v5[0] = a1;
  v6 = v3;
  return MEMORY[0x18D75B4AC](v5, a3, &type metadata for DynamicHiddenModifier);
}

void View.hiddenAllowingAccessibility()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t makeHiddenView(allowedKeys:inputs:body:)(uint64_t *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = a2[5];
  v7 = a2[6];
  v8 = *((_DWORD *)a2 + 20);
  v21 = *a2;
  v22 = v4;
  v23 = v5;
  v24 = *(_OWORD *)(a2 + 3);
  v25 = v6;
  v26 = v7;
  v27 = *(_OWORD *)(a2 + 7);
  v28 = a2[9];
  v29 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v3 & 0x10) != 0)
  {
    if ((v3 & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    PreferenceKeys.remove<A>(_:)();
    if ((v3 & 4) != 0)
    {
LABEL_3:
      if ((v3 & 1) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  PreferenceKeys.remove<A>(_:)();
  if ((v3 & 1) != 0)
  {
LABEL_4:
    if ((v3 & 8) != 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_11:
  PreferenceKeys.remove<A>(_:)();
  if ((v3 & 8) == 0)
LABEL_5:
    PreferenceKeys.remove<A>(_:)();
LABEL_6:
  HIDWORD(v12) = HIDWORD(v26);
  LODWORD(v12) = PreferencesInputs.hostKeys.getter();
  v13 = v3;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:) and conformance HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:)();
  Attribute.init<A>(body:value:flags:update:)();
  PreferencesInputs.hostKeys.setter();
  lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (v12)
  {
    v12 = v3;
    (*(void (**)(uint64_t *, uint64_t *))(v13 + 8))(&v21, &v12);
  }
  v12 = v21;
  LODWORD(v13) = v22;
  v14 = v23;
  v15 = v24;
  v16 = v25;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  v20 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  a3(v9, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance _HiddenModifier()
{
  specialized ViewModifier.bodyError()(0x4D6E65646469485FLL, (void *)0xEF7265696669646FLL);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HiddenModifierAllowingPlatformItemList(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  return static HiddenModifierAllowingPlatformItemList._makeView(modifier:inputs:body:)(a1, a2, a3, a4, qword_1E1B08118, &qword_1E1B08118[1]);
}

void protocol witness for ViewModifier.body(content:) in conformance HiddenModifierAllowingPlatformItemList()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

uint64_t static HiddenModifierAllowingPlatformItemList._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 80);
  v10 = *a6;
  if ((*a6 & ~*a5) == 0)
    v10 = 0;
  v20 = v10 | *a5;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  v15 = *(_OWORD *)(a2 + 24);
  v16 = *(_OWORD *)(a2 + 40);
  v17 = *(_OWORD *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 72);
  v19 = v9;
  return makeHiddenView(allowedKeys:inputs:body:)(&v20, &v12, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HiddenModifierAllowingAccessibility(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  return static HiddenModifierAllowingPlatformItemList._makeView(modifier:inputs:body:)(a1, a2, a3, a4, qword_1E1B05720, &qword_1E1B05720[1]);
}

void protocol witness for ViewModifier.body(content:) in conformance HiddenModifierAllowingAccessibility()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HiddenModifierAllowingViewResponders(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _HiddenModifier(a1, a2, a3, a4, a5, a6, &qword_1E1B06178);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _HiddenModifier(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 80);
  v20 = *a7;
  v12 = v7;
  v13 = v8;
  v14 = v9;
  v15 = *(_OWORD *)(a2 + 24);
  v16 = *(_OWORD *)(a2 + 40);
  v17 = *(_OWORD *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 72);
  v19 = v10;
  return makeHiddenView(allowedKeys:inputs:body:)(&v20, &v12, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance HiddenModifierAllowingViewResponders()
{
  protocol witness for ViewModifier.body(content:) in conformance IgnoreViewRespondersModifier();
}

uint64_t AllowedPreferenceKeysWhileHidden.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::AllowedPreferenceKeysWhileHidden __swiftcall AllowedPreferenceKeysWhileHidden.init(rawValue:)(SwiftUI::AllowedPreferenceKeysWhileHidden rawValue)
{
  SwiftUI::AllowedPreferenceKeysWhileHidden *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static AllowedPreferenceKeysWhileHidden.accessibility.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static AllowedPreferenceKeysWhileHidden.platformItemList.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static AllowedPreferenceKeysWhileHidden.viewResponders.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static AllowedPreferenceKeysWhileHidden.hostPreferences.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static AllowedPreferenceKeysWhileHidden.displayList.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

uint64_t *PreferenceKeys.removeHiddenKeys(allowing:)(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  if ((*result & 0x10) != 0)
  {
    if ((v1 & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    result = (uint64_t *)PreferenceKeys.remove<A>(_:)();
    if ((v1 & 4) != 0)
    {
LABEL_3:
      if ((v1 & 1) != 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  result = (uint64_t *)PreferenceKeys.remove<A>(_:)();
  if ((v1 & 1) != 0)
  {
LABEL_4:
    if ((v1 & 8) != 0)
      return result;
    return (uint64_t *)PreferenceKeys.remove<A>(_:)();
  }
LABEL_8:
  result = (uint64_t *)PreferenceKeys.remove<A>(_:)();
  if ((v1 & 8) == 0)
    return (uint64_t *)PreferenceKeys.remove<A>(_:)();
  return result;
}

double static DynamicHiddenModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  double v54;

  v4 = *a1;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 7);
  v10 = *((_DWORD *)a2 + 8);
  v11 = *((_DWORD *)a2 + 9);
  v12 = a2[5];
  v13 = a2[6];
  v15 = *((_DWORD *)a2 + 14);
  v14 = *((_DWORD *)a2 + 15);
  v16 = *((_DWORD *)a2 + 16);
  v17 = *((_DWORD *)a2 + 17);
  v18 = *((_DWORD *)a2 + 18);
  v19 = *((_DWORD *)a2 + 19);
  v20 = *((_DWORD *)a2 + 20);
  v37 = *a2;
  v34 = v8;
  v35 = v6;
  LODWORD(v38) = v6;
  v39 = v7;
  v40 = v8;
  v41 = v9;
  v32 = v10;
  v33 = v9;
  v42 = v10;
  v43 = v11;
  v30 = v14;
  v31 = v11;
  v44 = v12;
  v45 = v13;
  v46 = v15;
  v47 = v14;
  v28 = v17;
  v29 = v16;
  v48 = v16;
  v49 = v17;
  v26 = v19;
  v27 = v18;
  v50 = v18;
  v51 = v19;
  v25 = v20;
  v52 = v20;
  a3(&v53);
  type metadata accessor for _GraphValue<DynamicHiddenModifier>();
  _GraphValue.value.getter();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  _GraphValue.value.getter();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  _GraphValue.value.getter();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  LODWORD(v37) = v4;
  _GraphValue.value.getter();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v21 = v37;
  if (v37)
  {
    v22 = v38;
    v37 = v5;
    LODWORD(v38) = v35;
    v39 = v7;
    v40 = v34;
    v41 = v33;
    v42 = v32;
    v43 = v31;
    v44 = v12;
    v45 = v13;
    v46 = v15;
    v47 = v30;
    v48 = v29;
    v49 = v28;
    v50 = v27;
    v51 = v26;
    v52 = v25;
    if (((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v22 + 8))(&v37, v21, v22) & 1) != 0)
    {
      v37 = v5;
      LODWORD(v38) = v35;
      v39 = v7;
      v40 = v34;
      v41 = v33;
      v42 = v32;
      v43 = v31;
      v44 = v12;
      v45 = v13;
      v46 = v15;
      v47 = v30;
      v48 = v29;
      v49 = v28;
      v50 = v27;
      v51 = v26;
      v52 = v25;
      v23 = _GraphValue.value.getter();
      swift_beginAccess();
      (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(v22 + 16))(&v37, v23, &v53, v21, v22);
      swift_endAccess();
    }
  }
  *(_QWORD *)a4 = v53;
  result = v54;
  a4[1] = v54;
  return result;
}

uint64_t specialized implicit closure #1 in transformPreference #1 <A>(_:) in static DynamicHiddenModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;
  uint64_t v1;

  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  v0 = MEMORY[0x1E0CE4268];
  v1 = MEMORY[0x1E0CE4258];
  type metadata accessor for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>(0, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>, MEMORY[0x1E0CE4268], MEMORY[0x1E0CE4258]);
  lazy protocol witness table accessor for type DynamicHiddenModifier.DynamicTransform<HostPreferencesKey> and conformance DynamicHiddenModifier.DynamicTransform<A>(&lazy protocol witness table cache variable for type DynamicHiddenModifier.DynamicTransform<HostPreferencesKey> and conformance DynamicHiddenModifier.DynamicTransform<A>, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>, v0, v1);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  type metadata accessor for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>(0, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<AccessibilityNodesKey>, (uint64_t)&type metadata for AccessibilityNodesKey, (uint64_t)&protocol witness table for AccessibilityNodesKey);
  lazy protocol witness table accessor for type DynamicHiddenModifier.DynamicTransform<HostPreferencesKey> and conformance DynamicHiddenModifier.DynamicTransform<A>(&lazy protocol witness table cache variable for type DynamicHiddenModifier.DynamicTransform<AccessibilityNodesKey> and conformance DynamicHiddenModifier.DynamicTransform<A>, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<AccessibilityNodesKey>, (uint64_t)&type metadata for AccessibilityNodesKey, (uint64_t)&protocol witness table for AccessibilityNodesKey);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  uint64_t v0;
  uint64_t v1;

  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  v0 = MEMORY[0x1E0CE4068];
  v1 = MEMORY[0x1E0CE4058];
  type metadata accessor for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>(0, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<ViewRespondersKey>, MEMORY[0x1E0CE4068], MEMORY[0x1E0CE4058]);
  lazy protocol witness table accessor for type DynamicHiddenModifier.DynamicTransform<HostPreferencesKey> and conformance DynamicHiddenModifier.DynamicTransform<A>(&lazy protocol witness table cache variable for type DynamicHiddenModifier.DynamicTransform<ViewRespondersKey> and conformance DynamicHiddenModifier.DynamicTransform<A>, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<ViewRespondersKey>, v0, v1);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  uint64_t v0;
  uint64_t v1;

  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  v0 = MEMORY[0x1E0CE1000];
  v1 = MEMORY[0x1E0CE0FF0];
  type metadata accessor for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>(0, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<DisplayList.Key>, MEMORY[0x1E0CE1000], MEMORY[0x1E0CE0FF0]);
  lazy protocol witness table accessor for type DynamicHiddenModifier.DynamicTransform<HostPreferencesKey> and conformance DynamicHiddenModifier.DynamicTransform<A>(&lazy protocol witness table cache variable for type DynamicHiddenModifier.DynamicTransform<DisplayList.Key> and conformance DynamicHiddenModifier.DynamicTransform<A>, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<DisplayList.Key>, v0, v1);
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t _ViewInputs.requestedDynamicHiddenRepresentation.getter()
{
  return _ViewInputs.requestedDynamicHiddenRepresentation.getter((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
}

uint64_t (*DynamicHiddenModifier.DynamicTransform.value.getter(int a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  *(_DWORD *)(v6 + 32) = a1;
  return partial apply for closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter;
}

uint64_t closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t AssociatedTypeWitness;

  result = AGGraphGetValue();
  if (*(_BYTE *)result == 1)
  {
    result = DynamicHiddenModifier.DynamicTransform.includeKey.getter(a2, a3);
    if ((result & 1) == 0)
    {
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
      return (*(uint64_t (**)(ValueMetadata *, uint64_t))(a4 + 16))(a3, a4);
    }
  }
  return result;
}

uint64_t DynamicHiddenModifier.DynamicTransform.includeKey.getter(uint64_t a1, ValueMetadata *a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v3 = *(_QWORD *)(AGGraphGetValue() + 8);
  v4 = (v3 >> 3) & 1;
  if (a2 != (ValueMetadata *)MEMORY[0x1E0CE4268])
    LODWORD(v4) = 0;
  if (a2 == &type metadata for AccessibilityNodesKey)
    v5 = v3 & 1;
  else
    v5 = v4;
  if (a2 == (ValueMetadata *)MEMORY[0x1E0CE4068])
    v6 = (v3 >> 2) & 1;
  else
    v6 = v5;
  v7 = (v3 >> 4) & 1;
  if (a2 == (ValueMetadata *)MEMORY[0x1E0CE1000])
    return v7;
  else
    return v6;
}

uint64_t (*protocol witness for Rule.value.getter in conformance DynamicHiddenModifier.DynamicTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>))(uint64_t a1)
{
  int *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*result)(uint64_t);

  v4 = *v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  DynamicHiddenModifier.DynamicTransform.value.getter(v4, v5, v6);
  v8 = v7;
  result = (uint64_t (*)(uint64_t))swift_allocObject();
  *((_QWORD *)result + 2) = v5;
  *((_QWORD *)result + 3) = v6;
  *((_QWORD *)result + 4) = partial apply for closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter;
  *((_QWORD *)result + 5) = v8;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  a2[1] = result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance DynamicHiddenModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t View.hiddenAllowingHostPreferences(_:allowingDisplayList:)(char a1, char a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE v5[8];
  uint64_t v6;

  if ((a2 & 1) != 0)
    v3 = 24;
  else
    v3 = 8;
  v5[0] = a1 & 1;
  v6 = v3;
  return MEMORY[0x18D75B4AC](v5, a3, &type metadata for DynamicHiddenModifier);
}

uint64_t _ViewInputs.requestedHiddenRepresentation.getter()
{
  return _ViewInputs.requestedDynamicHiddenRepresentation.getter((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
}

uint64_t _ViewInputs.requestedDynamicHiddenRepresentation.getter(void (*a1)(void))
{
  uint64_t v2;

  a1();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v2;
}

uint64_t _GraphInputs.requestedHiddenRepresentation.getter()
{
  return _ViewInputs.requestedDynamicHiddenRepresentation.getter((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
}

uint64_t _GraphInputs.requestedHiddenRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedHiddenRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
}

void (*_ViewInputs.requestedHiddenRepresentation.modify(_QWORD *a1))(_OWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedHiddenRepresentation.modify;
}

void _ViewInputs.requestedHiddenRepresentation.modify(_OWORD **a1)
{
  _ViewInputs.requestedHiddenRepresentation.modify(a1);
}

{
  _OWORD *v1;

  v1 = *a1;
  (*a1)[1] = **a1;
  PropertyList.subscript.setter();
  free(v1);
}

void (*_GraphInputs.requestedHiddenRepresentation.modify(_QWORD *a1))(_OWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedHiddenRepresentation.modify;
}

double key path getter for _ViewInputs.requestedHiddenRepresentation : _ViewInputs@<D0>(void (*a1)(void)@<X3>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  a1();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t _GraphInputs.requestedDynamicHiddenRepresentation.getter()
{
  return _ViewInputs.requestedDynamicHiddenRepresentation.getter((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
}

uint64_t _GraphInputs.requestedDynamicHiddenRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedHiddenRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
}

void type metadata accessor for _GraphValue<DynamicHiddenModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<DynamicHiddenModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<DynamicHiddenModifier>);
  }
}

uint64_t partial apply for specialized implicit closure #1 in transformPreference #1 <A>(_:) in static DynamicHiddenModifier._makeView(modifier:inputs:body:)()
{
  return specialized implicit closure #1 in transformPreference #1 <A>(_:) in static DynamicHiddenModifier._makeView(modifier:inputs:body:)();
}

{
  return specialized implicit closure #1 in transformPreference #1 <A>(_:) in static DynamicHiddenModifier._makeView(modifier:inputs:body:)();
}

{
  return specialized implicit closure #1 in transformPreference #1 <A>(_:) in static DynamicHiddenModifier._makeView(modifier:inputs:body:)();
}

{
  return specialized implicit closure #1 in transformPreference #1 <A>(_:) in static DynamicHiddenModifier._makeView(modifier:inputs:body:)();
}

void (*_ViewInputs.requestedDynamicHiddenRepresentation.modify(_QWORD *a1))(_OWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedDynamicHiddenRepresentation.modify;
}

void _ViewInputs.requestedDynamicHiddenRepresentation.modify(_OWORD **a1)
{
  _ViewInputs.requestedHiddenRepresentation.modify(a1);
}

double key path getter for _GraphInputs.requestedHiddenRepresentation : _GraphInputs@<D0>(void (*a1)(void)@<X3>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  a1();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void (*_GraphInputs.requestedDynamicHiddenRepresentation.modify(_QWORD *a1))(_OWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedDynamicHiddenRepresentation.modify;
}

_UNKNOWN **base witness table accessor for ViewModifier in _HiddenModifier()
{
  return &protocol witness table for _HiddenModifier;
}

unint64_t lazy protocol witness table accessor for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden;
  if (!lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowedPreferenceKeysWhileHidden, &type metadata for AllowedPreferenceKeysWhileHidden);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden;
  if (!lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowedPreferenceKeysWhileHidden, &type metadata for AllowedPreferenceKeysWhileHidden);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden;
  if (!lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowedPreferenceKeysWhileHidden, &type metadata for AllowedPreferenceKeysWhileHidden);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden;
  if (!lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowedPreferenceKeysWhileHidden, &type metadata for AllowedPreferenceKeysWhileHidden);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in DynamicHiddenModifier()
{
  return &protocol witness table for DynamicHiddenModifier;
}

double sub_18799C46C@<D0>(_OWORD *a1@<X8>)
{
  return key path getter for _ViewInputs.requestedHiddenRepresentation : _ViewInputs((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey, a1);
}

uint64_t sub_18799C490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
}

double sub_18799C4A4@<D0>(_OWORD *a1@<X8>)
{
  return key path getter for _GraphInputs.requestedHiddenRepresentation : _GraphInputs((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey, a1);
}

uint64_t sub_18799C4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
}

double sub_18799C4DC@<D0>(_OWORD *a1@<X8>)
{
  return key path getter for _ViewInputs.requestedHiddenRepresentation : _ViewInputs((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey, a1);
}

uint64_t sub_18799C500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
}

uint64_t keypath_setTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  a5(a1, a2);
  return PropertyList.subscript.setter();
}

double sub_18799C55C@<D0>(_OWORD *a1@<X8>)
{
  return key path getter for _GraphInputs.requestedHiddenRepresentation : _GraphInputs((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey, a1);
}

uint64_t sub_18799C580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
}

ValueMetadata *type metadata accessor for AllowedPreferenceKeysWhileHidden()
{
  return &type metadata for AllowedPreferenceKeysWhileHidden;
}

ValueMetadata *type metadata accessor for DynamicHiddenModifier()
{
  return &type metadata for DynamicHiddenModifier;
}

uint64_t dispatch thunk of static PlatformHiddenRepresentable.makeRepresentation(inputs:allowedKeys:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static PlatformDynamicHiddenRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformDynamicHiddenRepresentable.makeRepresentation(inputs:modifier:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t sub_18799C5CC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for _HiddenModifier, (uint64_t)&protocol witness table for _HiddenModifier);
}

uint64_t sub_18799C5E0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for HiddenModifierAllowingPlatformItemList, (uint64_t)&protocol witness table for HiddenModifierAllowingPlatformItemList);
}

uint64_t sub_18799C5F4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for HiddenModifierAllowingAccessibility, (uint64_t)&protocol witness table for HiddenModifierAllowingAccessibility);
}

uint64_t sub_18799C608(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for HiddenModifierAllowingViewResponders, (uint64_t)&protocol witness table for HiddenModifierAllowingViewResponders);
}

uint64_t sub_18799C61C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for DynamicHiddenModifier, (uint64_t)&protocol witness table for DynamicHiddenModifier);
}

ValueMetadata *type metadata accessor for _GraphInputs.DynamicHiddenRepresentationKey()
{
  return &type metadata for _GraphInputs.DynamicHiddenRepresentationKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.HiddenRepresentationKey()
{
  return &type metadata for _GraphInputs.HiddenRepresentationKey;
}

ValueMetadata *type metadata accessor for HiddenModifierAllowingPlatformItemList()
{
  return &type metadata for HiddenModifierAllowingPlatformItemList;
}

ValueMetadata *type metadata accessor for HiddenModifierAllowingViewResponders()
{
  return &type metadata for HiddenModifierAllowingViewResponders;
}

_UNKNOWN **base witness table accessor for ViewModifier in HiddenModifierAllowingViewResponders()
{
  return &protocol witness table for HiddenModifierAllowingViewResponders;
}

_UNKNOWN **base witness table accessor for ViewModifier in HiddenModifierAllowingPlatformItemList()
{
  return &protocol witness table for HiddenModifierAllowingPlatformItemList;
}

_UNKNOWN **base witness table accessor for ViewModifier in HiddenModifierAllowingAccessibility()
{
  return &protocol witness table for HiddenModifierAllowingAccessibility;
}

uint64_t *protocol witness for Rule.value.getter in conformance HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 8);
  *a1 = *(_QWORD *)AGGraphGetValue();
  v4 = v2;
  swift_bridgeObjectRetain();
  return PreferenceKeys.removeHiddenKeys(allowing:)(&v4);
}

void specialized ViewModifier.bodyError()(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for DynamicHiddenModifier.DynamicTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DynamicHiddenModifier.DynamicTransform);
}

uint64_t sub_18799CA40()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(a1, *(unsigned int *)(v1 + 32), *(ValueMetadata **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type DynamicHiddenModifier.DynamicTransform<HostPreferencesKey> and conformance DynamicHiddenModifier.DynamicTransform<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DynamicHiddenModifier.DynamicTransform<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for DynamicHiddenModifier.DynamicTransform(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t lazy protocol witness table accessor for type HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:) and conformance HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:)()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:) and conformance HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:);
  if (!lazy protocol witness table cache variable for type HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:) and conformance HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:))
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:), &unk_1E1ABA160);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:) and conformance HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:));
  }
  return result;
}

void *type metadata accessor for HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:)()
{
  return &unk_1E1ABA160;
}

void base witness table accessor for _AttributeBody in DynamicHiddenModifier.DynamicTransform<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_18799CB4C()
{
  swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for TableViewListHeaderFooterContent()
{
  return &type metadata for TableViewListHeaderFooterContent;
}

double TableViewListDataSource.init(_:style:minRowHeight:minHeaderHeight:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  _QWORD v13[7];
  _OWORD v14[6];

  *(_QWORD *)(a5 + 96) = a2;
  *(_QWORD *)(a5 + 104) = a3;
  *(_BYTE *)(a5 + 112) = a4 & 1;
  *(double *)(a5 + 120) = a6;
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v13);
  Sections.init(from:useFooters:)(v13, a2 != 0, (uint64_t)v14);
  outlined destroy of _VariadicView_Children(a1);
  v9 = v14[3];
  *(_OWORD *)(a5 + 32) = v14[2];
  *(_OWORD *)(a5 + 48) = v9;
  v10 = v14[5];
  *(_OWORD *)(a5 + 64) = v14[4];
  *(_OWORD *)(a5 + 80) = v10;
  result = *(double *)v14;
  v12 = v14[1];
  *(_OWORD *)a5 = v14[0];
  *(_OWORD *)(a5 + 16) = v12;
  return result;
}

uint64_t TableViewListDataSource.sectionIDs.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  if (*(_BYTE *)(v0 + 64) == 1)
  {
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

BOOL TableViewListDataSource.spacing(forSectionAt:)@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BOOL8 result;

  result = specialized Set.contains(_:)(a1, *(_QWORD *)(v2 + 80));
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result;
  *(_BYTE *)(a2 + 9) = !result;
  return result;
}

uint64_t TableViewListDataSource.configureHeader(_:transaction:forSectionAt:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _OWORD v10[3];
  uint64_t v11;
  _OWORD v12[3];
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v19;

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(v3[7] + 16) > a3)
  {
    v6 = (void *)result;
    v7 = v3[15];
    v8 = v3[12];
    TableViewListDataSource.sectionIDs.getter();
    v9 = v6;
    outlined copy of Transaction?(a2);
    swift_release();
    swift_bridgeObjectRelease();
    v14 = v9;
    v15 = a2;
    v16 = v7;
    v17 = v8;
    v18 = 1;
    v19 = a3 == 0;
    outlined init with copy of _VariadicView_Children((uint64_t)v3, (uint64_t)v12);
    v10[0] = v12[0];
    v10[1] = v12[1];
    v10[2] = v12[2];
    v11 = v13;
    lazy protocol witness table accessor for type HeaderFooterVisitor and conformance HeaderFooterVisitor();
    _ViewList_Backing.visitViews<A>(applying:from:)();
    outlined destroy of _ViewList_Backing((uint64_t)v10);

    return outlined consume of Transaction?(v15);
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall TableViewListDataSource.hasFooter(forSectionAt:)(Swift::Int forSectionAt)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 72);
  return v2 && specialized Set.contains(_:)(forSectionAt, v2);
}

uint64_t TableViewListDataSource.configureFooter(_:transaction:forSectionAt:)(void *a1, uint64_t a2, Swift::Int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _OWORD v11[3];
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;

  v7 = *(_QWORD *)(v3 + 120);
  v8 = *(_QWORD *)(v3 + 96);
  v15 = a1;
  v16 = a2;
  v17 = v7;
  v18 = v8;
  v19 = 0;
  outlined init with copy of _VariadicView_Children(v3, (uint64_t)v13);
  v11[0] = v13[0];
  v11[1] = v13[1];
  v11[2] = v13[2];
  v12 = v14;
  v9 = a1;
  outlined copy of Transaction?(a2);
  Sections.footerOffset(forSectionAt:)(a3);
  lazy protocol witness table accessor for type HeaderFooterVisitor and conformance HeaderFooterVisitor();
  _ViewList_Backing.visitViews<A>(applying:from:)();
  outlined destroy of _ViewList_Backing((uint64_t)v11);

  return outlined consume of Transaction?(v16);
}

double TableViewListDataSource.rowIDs(forSectionAt:)@<D0>(Swift::Int a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  Sections.rowIDs(forSectionAt:)(a1, (Swift::Int *)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t TableViewListDataSource.configureCell(_:transaction:context:)(char *a1, unint64_t a2, Swift::Int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  char *v21;
  uint64_t v22;
  unsigned __int8 v23;
  void *v24;
  id v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  _OWORD v41[2];
  char v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  _QWORD v52[10];
  char v53;
  _OWORD v54[4];
  char v55;
  _BYTE v56[48];
  __int128 v57;

  v4 = v3;
  outlined init with copy of _ViewList_View((uint64_t)(a3 + 2), (uint64_t)v56);
  v33 = DWORD1(v57);
  v34 = v57;
  v44 = v57;
  v35 = *((_QWORD *)&v57 + 1);
  swift_bridgeObjectRetain();
  _ViewList_ID.canonicalID.getter();
  v54[0] = v41[0];
  v55 = 1;
  *(_QWORD *)&v44 = a3[13];
  v6 = v44;
  v40 = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v7 = TableViewListDataSource.separatorConfiguration(forRowAt:)(*a3, a3[1]);
  v30 = v8;
  v31 = v7;
  v36 = v9;
  v38 = v10;
  v44 = 0u;
  v45 = 0u;
  v46 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v40 = v6;
  *(_QWORD *)&v44 = 1;
  BYTE8(v44) = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v11 = *(_BYTE *)(v3 + 112);
  if ((v11 & 1) != 0)
  {
    v12 = a1;
    objc_msgSend(a1, sel_swiftui_defaultRowHeight);
    v14 = v13;
  }
  else
  {
    v14 = *(_QWORD *)(v4 + 104);
    v12 = a1;
  }
  outlined init with copy of AccessibilityScrollableContext((uint64_t)v54, (uint64_t)v52);
  v44 = v41[0];
  v45 = v41[1];
  v46 = v42;
  v47 = *(_QWORD *)&v41[0];
  v48 = *(_QWORD *)&v41[0];
  v49 = BYTE8(v41[0]);
  v50 = v14;
  v51 = v11;
  v52[9] = swift_getKeyPath();
  v53 = 0;
  v15 = &v12[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_disclosureIndent];
  *(_QWORD *)v15 = *(_QWORD *)&v41[0];
  v15[8] = 0;
  v16 = &v12[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_separatorConfiguration];
  v17 = v12;
  v18 = *(_QWORD *)&v12[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_separatorConfiguration];
  v19 = *(_QWORD *)&v12[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_separatorConfiguration + 8];
  *(_QWORD *)v16 = v31;
  *((_QWORD *)v16 + 1) = v36;
  *((_QWORD *)v16 + 2) = v30;
  *((_QWORD *)v16 + 3) = v38;
  swift_retain();
  swift_retain();
  outlined consume of ListSeparatorConfiguration?(v18, v19);
  v20 = a3[13];
  *(_QWORD *)&v41[0] = v20;
  LOBYTE(v39[0]) = 2;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  LOBYTE(v18) = v40;
  v21 = &v17[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_cellConfiguration];
  swift_beginAccess();
  v22 = *(int *)(type metadata accessor for CellConfiguration() + 28);
  v23 = v21[v22];
  v21[v22] = v40;
  specialized CellConfiguration.updateValues<A>(pre:post:)(v23, v18);
  swift_endAccess();
  v24 = *(void **)&v17[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host];
  if (v24)
  {
    LOWORD(v41[0]) = 2;
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    v25 = v24;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  v26 = (uint64_t *)&v17[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_viewListID];
  *v26 = v34 | (v33 << 32);
  v26[1] = v35;
  swift_bridgeObjectRelease();
  outlined init with copy of _ViewList_View((uint64_t)v56, (uint64_t)v41);
  outlined init with copy of ListTableCellModifier((uint64_t)&v44, (uint64_t)&v43);
  specialized PlatformListCell<>.defaultConfigureContent(_:transaction:)((uint64_t)v41, a2);
  v40 = v20;
  LOBYTE(v39[0]) = 0;
  v27 = ViewTraitCollection.listItemBackground(kind:)((unsigned __int8 *)v39);
  swift_bridgeObjectRetain();
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(v27, a2);
  swift_bridgeObjectRelease();
  v39[1] = 0;
  v39[2] = v20;
  v39[0] = 0;
  swift_bridgeObjectRetain();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v28 = v40;
  _s7SwiftUI15ModifiedContentVyAA010_ViewList_E0VAA0F17TableCellModifierVGWOhTm_0((uint64_t)v41, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  outlined destroy of ListTableCellModifier((uint64_t)&v44);
  outlined destroy of AccessibilityScrollableContext((uint64_t)v54);
  result = outlined destroy of _ViewList_View((uint64_t)v56);
  if (v28)
    result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
  v17[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_hasItemProviderTrait] = v28 != 0;
  return result;
}

Swift::Int TableViewListDataSource.separatorConfiguration(forRowAt:)(Swift::Int a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _OWORD v25[3];
  uint64_t v26;
  _OWORD v27[3];
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  unsigned __int8 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  result = Sections.startOffset(forSectionAt:)(a1);
  if (result == a2)
  {
    v6 = 1;
    v7 = *(_QWORD *)(v2 + 72);
    if (!v7)
      goto LABEL_8;
  }
  else
  {
    if (__OFSUB__(a2, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v6 = 0;
    v7 = *(_QWORD *)(v2 + 72);
    if (!v7)
      goto LABEL_8;
  }
  result = specialized Set.contains(_:)(a1, v7);
  if ((result & 1) != 0)
  {
    v8 = 2;
    goto LABEL_9;
  }
LABEL_8:
  v8 = 1;
LABEL_9:
  v9 = __OFADD__(a2, v8);
  v10 = a2 + v8;
  if (v9)
  {
    __break(1u);
    goto LABEL_36;
  }
  v11 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v12 = *(_QWORD *)(v2 + 56);
  if (v11 < *(_QWORD *)(v12 + 16))
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      v13 = *(_QWORD *)(v12 + 16 * v11 + 32);
      goto LABEL_15;
    }
LABEL_38:
    __break(1u);
    return result;
  }
  v13 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
LABEL_15:
  v14 = v6 | 2;
  v34 = 0;
  if (v13 != v10)
    v14 = v6;
  v35 = 0;
  v29 = 0x3FFFFFFFCLL;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v36 = xmmword_187C02050;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40 = v14 & 1;
  v41 = v14;
  outlined init with copy of _VariadicView_Children(v2, (uint64_t)v27);
  v25[0] = v27[0];
  v25[1] = v27[1];
  v25[2] = v27[2];
  v26 = v28;
  lazy protocol witness table accessor for type ListRowSeparatorVisitor and conformance ListRowSeparatorVisitor();
  _ViewList_Backing.visitViews<A>(applying:from:)();
  outlined destroy of _ViewList_Backing((uint64_t)v25);
  v15 = v29;
  v16 = v30;
  v17 = v31;
  v24 = v33;
  v18 = v35;
  v19 = v36;
  v20 = v38;
  v23 = v37;
  if (v29 >> 2 != 0xFFFFFFFF || v31 >= 4)
  {
    if ((v31 & 0x8000000000000000) != 0)
    {
      if (v31 | v32)
      {
        swift_retain();
        v24 = v17;
        goto LABEL_26;
      }
    }
    else if ((_BYTE)v29 || v30)
    {
      swift_retain();
      v24 = v15;
      goto LABEL_26;
    }
  }
  swift_retain();
LABEL_26:
  if (*((_QWORD *)&v19 + 1) >> 2 == 0xFFFFFFFFLL && v20 < 4 || (v20 & 0x8000000000000000) == 0 || v18 || (_QWORD)v19)
  {
    swift_retain();
    outlined consume of ListRowSeparatorVisitor.Neighbor?(v15, v16, v17);
    swift_release();
    v22 = v23;
  }
  else
  {
    swift_retain();
    v21 = v17;
    v22 = v23;
    outlined consume of ListRowSeparatorVisitor.Neighbor?(v15, v16, v21);
  }
  swift_release();
  outlined consume of ListRowSeparatorVisitor.Neighbor?(*((unint64_t *)&v19 + 1), v22, v20);
  return v24;
}

uint64_t TableViewListDataSource.firstIndexPath<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return Sections.firstIndexPath<A>(for:)(a1, a2, a3, a4);
}

uint64_t TableViewListDataSource.firstIndexPath(viewListID:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v7[3];
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v3 = v2;
  v5 = a1[1];
  v12 = 0;
  memset(&v11[1], 0, 32);
  *(_QWORD *)&v11[0] = *a1;
  *((_QWORD *)&v11[0] + 1) = v5;
  outlined init with copy of _VariadicView_Children(v3, (uint64_t)v9);
  v7[0] = v9[0];
  v7[1] = v9[1];
  v7[2] = v9[2];
  v8 = v10;
  lazy protocol witness table accessor for type ExplicitIDFromViewListIDVisitor and conformance ExplicitIDFromViewListIDVisitor();
  swift_retain();
  _ViewList_Backing.visitViews<A>(applying:from:)();
  outlined destroy of _ViewList_Backing((uint64_t)v7);
  v9[0] = v11[0];
  Sections.firstIndexPath(of:)(v9, a2);
  return outlined destroy of ExplicitIDFromViewListIDVisitor((uint64_t)v11);
}

uint64_t TableViewListDataSource.firstCollectionViewIndex(of:)(unsigned int *a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _OWORD v18[3];
  uint64_t v19;

  v3 = *a1;
  v2 = a1[1];
  v4 = *((_QWORD *)a1 + 1);
  outlined init with copy of _VariadicView_Children(v1, (uint64_t)v18);
  outlined init with copy of TableColumnList((uint64_t)v18, (uint64_t)&v10);
  outlined destroy of _VariadicView_Children((uint64_t)v18);
  v5 = *((_QWORD *)&v11 + 1);
  v6 = v12;
  __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6))
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
    *(_QWORD *)&v18[0] = __PAIR64__(v2, v3);
    *((_QWORD *)&v18[0] + 1) = v4;
    swift_retain();
    v7 = 0;
    if (dispatch thunk of _ViewList_ID_Views.endIndex.getter())
    {
      while (1)
      {
        dispatch thunk of _ViewList_ID_Views.subscript.getter();
        _ViewList_ID.canonicalID.getter();
        swift_bridgeObjectRelease();
        v10 = v14;
        v8 = MEMORY[0x18D756E68](&v10, v18);
        swift_release();
        if ((v8 & 1) != 0)
          break;
        result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
        if (v7 >= result)
        {
          __break(1u);
          return result;
        }
        if (++v7 == dispatch thunk of _ViewList_ID_Views.endIndex.getter())
        {
          v7 = 0;
          break;
        }
      }
    }
    swift_release_n();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
    *(_QWORD *)&v14 = 0;
    *((_QWORD *)&v14 + 1) = __PAIR64__(v2, v3);
    v15 = v4;
    v16 = 0;
    v17 = 1;
    outlined init with copy of _VariadicView_Children(v1, (uint64_t)v18);
    v10 = v18[0];
    v11 = v18[1];
    v12 = v18[2];
    v13 = v19;
    lazy protocol witness table accessor for type ExplicitIDOffsetVisitor and conformance ExplicitIDOffsetVisitor();
    swift_retain();
    _ViewList_Backing.visitViews<A>(applying:from:)();
    outlined destroy of _ViewList_Backing((uint64_t)&v10);
    v7 = v16;
    swift_release();
  }
  return v7;
}

uint64_t TableViewListDataSource.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char isEscapingClosureAtFileLocation;
  uint64_t result;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = closure #1 in TableViewListDataSource.applyCollectionViewIDs(from:to:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed AVKitPressableCaptureButton, @in_guaranteed AVKitPressableCaptureButton.Phase) -> (@out ()), v6, v3);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
    return v7;
  __break(1u);
  return result;
}

BOOL closure #1 in TableViewListDataSource.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v9 = a1;
  v10 = a2;
  v11 = 0;
  outlined init with copy of _VariadicView_Children(a3, (uint64_t)v7);
  v5[0] = v7[0];
  v5[1] = v7[1];
  v5[2] = v7[2];
  v6 = v8;
  lazy protocol witness table accessor for type ApplyCollectionViewIDsVisitor and conformance ApplyCollectionViewIDsVisitor();
  swift_retain();
  _ViewList_Backing.visitViews<A>(applying:from:)();
  outlined destroy of _ViewList_Backing((uint64_t)v5);
  v3 = v11;
  swift_release();
  return (v3 & 1) == 0;
}

uint64_t TableViewListDataSource.contextForItem(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[3];
  uint64_t v20;
  _OWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v5 = v4;
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListDataSource<A>, a3);
  v12 = type metadata accessor for ListContentVisitor(0, a3, v10, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v19 - v14;
  *(_QWORD *)&v21[0] = a1;
  *(_QWORD *)&v19[0] = a2;
  ListContentVisitor.init(index:)((uint64_t)v21, (uint64_t)v19, a3, v10, (uint64_t)v19 - v14);
  outlined init with copy of _VariadicView_Children(v5, (uint64_t)v21);
  v19[0] = v21[0];
  v19[1] = v21[1];
  v19[2] = v21[2];
  v20 = v22;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListContentVisitor<A>, v12);
  v23 = a2;
  _ViewList_Backing.visitViews<A>(applying:from:)();
  outlined destroy of _ViewList_Backing((uint64_t)v19);
  type metadata accessor for _RowVisitationContext(255, a3, v10, v16);
  v17 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a4, v15, v17);
}

uint64_t protocol witness for ListCoreDataSource.configureHeader(_:transaction:forSectionAt:) in conformance TableViewListDataSource<A>(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  return TableViewListDataSource.configureHeader(_:transaction:forSectionAt:)(a1, a2, *a3);
}

uint64_t protocol witness for ListCoreDataSource.configureFooter(_:transaction:forSectionAt:) in conformance TableViewListDataSource<A>(void *a1, uint64_t a2, Swift::Int *a3)
{
  return TableViewListDataSource.configureFooter(_:transaction:forSectionAt:)(a1, a2, *a3);
}

BOOL protocol witness for ListCoreDataSource.spacing(forSectionAt:) in conformance TableViewListDataSource<A>@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return TableViewListDataSource.spacing(forSectionAt:)(*a1, a2);
}

uint64_t protocol witness for ListCoreDataSource.firstIndexPath<A>(for:) in conformance TableViewListDataSource<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return TableViewListDataSource.firstIndexPath<A>(for:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ListCoreDataSource.firstCollectionViewIndex(of:) in conformance TableViewListDataSource<A>(unsigned int *a1)
{
  return TableViewListDataSource.firstCollectionViewIndex(of:)(a1);
}

uint64_t protocol witness for ListCoreDataSource.contextForItem(index:) in conformance TableViewListDataSource<A>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return TableViewListDataSource.contextForItem(index:)(*a1, *a2, a3, a4);
}

Swift::Int protocol witness for ListCoreDataSource.separatorConfiguration(forRowAt:) in conformance TableViewListDataSource<A>(Swift::Int *a1, uint64_t *a2)
{
  return TableViewListDataSource.separatorConfiguration(forRowAt:)(*a1, *a2);
}

uint64_t protocol witness for ListDiffable.sectionIDs.getter in conformance TableViewListDataSource<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = TableViewListDataSource.sectionIDs.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

BOOL protocol witness for ListDiffable.hasHeader(forSectionAt:) in conformance TableViewListDataSource<A>(Swift::Int *a1)
{
  return TableViewListDataSource.hasHeader(forSectionAt:)(*a1);
}

BOOL protocol witness for ListDiffable.hasFooter(forSectionAt:) in conformance TableViewListDataSource<A>(Swift::Int *a1)
{
  return TableViewListDataSource.hasFooter(forSectionAt:)(*a1);
}

double protocol witness for ListDiffable.rowIDs(forSectionAt:) in conformance TableViewListDataSource<A>@<D0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  TableViewListDataSource.rowIDs(forSectionAt:)(*a1, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t HeaderFooterVisitor.HeaderContent.prominence.getter@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, v3);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(unsigned __int8 *)(v10 + 105);
  (*(void (**)(char *, double))(v6 + 16))(v9, v7);
  if (v11 == 2)
  {
    v12 = *((_QWORD *)v9 + 12);
    v13 = v9[104];
    outlined copy of Environment<Bool>.Content(v12, v13);
    specialized Environment.wrappedValue.getter(v12, v13, a2);
    outlined consume of Environment<Bool>.Content(v12, v13);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, a1);
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, a1);
    *a2 = v11 & 1;
  }
  return result;
}

BOOL HeaderFooterVisitor.HeaderContent.isHeader.getter(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  char v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v15[8];
  uint64_t v16;
  _OWORD v17[3];
  _OWORD v18[2];
  _OWORD v19[3];
  _OWORD v20[2];

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = v2[4];
  v19[2] = v2[3];
  v20[0] = v7;
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)v2 + 73);
  v8 = v2[2];
  v19[0] = v2[1];
  v19[1] = v8;
  outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v17);
  outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
  v9 = v17[0];
  swift_release();
  swift_release();
  (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v4 + 16))(v6, v2, a1);
  if ((v9 & 1) != 0)
  {
    (*(void (**)(_OWORD *, uint64_t))(v4 + 8))(v6, a1);
    return 0;
  }
  else
  {
    v11 = v6[4];
    v17[2] = v6[3];
    v18[0] = v11;
    *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)v6 + 73);
    v12 = v6[2];
    v17[0] = v6[1];
    v17[1] = v12;
    outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
    specialized Environment.wrappedValue.getter((uint64_t)v15);
    outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
    (*(void (**)(_OWORD *, uint64_t))(v4 + 8))(v6, a1);
    v13 = v16;
    swift_release();
    swift_release();
    return v13 != 0;
  }
}

double HeaderFooterVisitor.HeaderContent.legacyInsets.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x1E0C80A78](a1, v1);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(double *)(v7 + 120);
  v9 = *(unsigned __int8 *)(v7 + 152);
  (*(void (**)(char *, double))(v3 + 16))(v6, v4);
  if (v9 == 1)
  {
    v8 = *((double *)v6 + 14);
    v10 = *(_QWORD *)v6;
    v11 = v6[8];
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v6, v11);
    specialized Environment.wrappedValue.getter(v10, v11);
    specialized Environment.wrappedValue.getter(v10, v11);
    outlined consume of Environment<Bool>.Content(v10, v11);
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a1);
  return v8;
}

uint64_t HeaderFooterVisitor.HeaderContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  __int128 v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _QWORD v97[2];
  _QWORD v98[2];
  _QWORD v99[2];
  _QWORD v100[2];
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  _QWORD v108[2];
  __int128 v109;
  __int128 v110;
  _OWORD v111[8];
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD v117[5];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _OWORD v122[2];

  v4 = v3;
  v94 = a3;
  *(_QWORD *)&v77 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v77 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v76 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 + 16);
  v75 = *(_QWORD *)(v8 - 8);
  v9 = v75;
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Case?>, &lazy cache variable for type metadata for Text.Case?, MEMORY[0x1E0CE6B70], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE66C0]);
  v13 = type metadata accessor for ModifiedContent();
  v14 = *(_QWORD *)(v13 - 8);
  v79 = v13;
  v82 = v14;
  MEMORY[0x1E0C80A78](v13, v15);
  v96 = (char *)&v73 - v16;
  v80 = type metadata accessor for StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier>();
  v17 = type metadata accessor for ModifiedContent();
  v88 = *(_QWORD *)(v17 - 8);
  v83 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v78 = (char *)&v73 - v19;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<HeaderFooterConfiguration>, (uint64_t)&type metadata for HeaderFooterConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v20 = type metadata accessor for ModifiedContent();
  v21 = *(_QWORD *)(v20 - 8);
  v85 = v20;
  v89 = v21;
  MEMORY[0x1E0C80A78](v20, v20);
  v81 = (char *)&v73 - v22;
  v23 = type metadata accessor for ModifiedContent();
  v24 = *(_QWORD *)(v23 - 8);
  v87 = v23;
  v92 = v24;
  MEMORY[0x1E0C80A78](v23, v23);
  v84 = (char *)&v73 - v25;
  v91 = type metadata accessor for ModifiedContent();
  v93 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91, v26);
  v86 = (char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28, v29);
  v90 = (char *)&v73 - v31;
  v32 = *(int *)(a1 + 64);
  v74 = v3;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v3 + v32, v8, v30);
  swift_getKeyPath();
  v33 = v76;
  v34 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, v4, a1);
  v35 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v36 = swift_allocObject();
  v95 = a1;
  v37 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v36 + 16) = v8;
  *(_QWORD *)(v36 + 24) = v37;
  (*(void (**)(unint64_t, char *, uint64_t))(v34 + 32))(v36 + v35, v33, a1);
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v12, v8);
  v38 = v74;
  v77 = *(_OWORD *)(v74 + 120);
  v39 = *(_QWORD *)(v74 + 136);
  v40 = *(_QWORD *)(v74 + 144);
  v41 = *(_BYTE *)(v74 + 152);
  LOBYTE(v12) = *(_BYTE *)(v74 + 168);
  KeyPath = swift_getKeyPath();
  v43 = swift_getKeyPath();
  v44 = swift_getKeyPath();
  *(_QWORD *)&v117[0] = KeyPath;
  *(_OWORD *)((char *)v117 + 8) = 0u;
  *(_OWORD *)((char *)&v117[1] + 8) = 0u;
  *(_OWORD *)((char *)&v117[2] + 8) = 0u;
  *(_OWORD *)((char *)&v117[3] + 8) = 0u;
  BYTE8(v117[4]) = 0;
  *(_QWORD *)&v118 = v43;
  BYTE8(v118) = 0;
  *(_QWORD *)&v119 = v44;
  BYTE8(v119) = 0;
  v120 = v77;
  *(_QWORD *)&v121 = v39;
  *((_QWORD *)&v121 + 1) = v40;
  LOBYTE(v122[0]) = v41;
  BYTE1(v122[0]) = (_BYTE)v12;
  *(_OWORD *)((char *)v122 + 8) = xmmword_187C75820;
  v45 = v95;
  v46 = HeaderFooterVisitor.HeaderContent.legacyInsets.getter(v95);
  v111[6] = v121;
  v111[7] = v122[0];
  v112 = *(_QWORD *)&v122[1];
  v111[2] = v117[4];
  v111[3] = v118;
  v111[4] = v119;
  v111[5] = v120;
  v109 = v117[0];
  v110 = v117[1];
  v111[0] = v117[2];
  v111[1] = v117[3];
  v113 = v46;
  v114 = v47;
  v115 = v48;
  v116 = v49;
  v50 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Text.Case?> and conformance _EnvironmentKeyTransformModifier<A>();
  v108[0] = v37;
  v108[1] = v50;
  v51 = MEMORY[0x1E0CE2E70];
  v52 = v79;
  v53 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v79, v108);
  v54 = v78;
  v55 = v96;
  MEMORY[0x18D75B4AC](&v109, v52, v80, v53);
  outlined release of HeaderFooterVisitor.IOSMultiColumnModifier((uint64_t)v117, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v55, v52);
  swift_getKeyPath();
  HeaderFooterVisitor.HeaderContent.resolvedConfiguration.getter(v45, (uint64_t)&v109);
  v101 = v109;
  v102 = *((_QWORD *)&v109 + 1);
  v103 = v110;
  v104 = *((_QWORD *)&v110 + 1);
  v105 = *(_QWORD *)&v111[0];
  v106 = *(_OWORD *)((char *)v111 + 8);
  v107 = *(_OWORD *)((char *)&v111[1] + 8);
  v56 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier> and conformance <> StaticIf<A, B, C>();
  v100[0] = v53;
  v100[1] = v56;
  v57 = v83;
  v58 = MEMORY[0x18D75FFDC](v51, v83, v100);
  v59 = v81;
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v54, v57);
  outlined init with copy of AccessibilityScrollableContext(v38 + *(int *)(v95 + 68), (uint64_t)&v109);
  v60 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<HeaderFooterConfiguration> and conformance _EnvironmentKeyWritingModifier<A>();
  v99[0] = v58;
  v99[1] = v60;
  v61 = MEMORY[0x1E0CE2E70];
  v62 = v85;
  v63 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v85, v99);
  v64 = v84;
  MEMORY[0x18D75B4AC](&v109, v62, &type metadata for AccessibilityScrollableContextModifier, v63);
  outlined destroy of AccessibilityScrollableContextModifier((uint64_t)&v109);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v59, v62);
  static Alignment.top.getter();
  v98[0] = v63;
  v98[1] = &protocol witness table for AccessibilityScrollableContextModifier;
  v71 = v87;
  v72 = MEMORY[0x18D75FFDC](v61, v87, v98);
  v65 = v86;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v64, v71);
  v97[0] = v72;
  v97[1] = MEMORY[0x1E0CE35E0];
  v66 = v91;
  v67 = MEMORY[0x18D75FFDC](v61, v91, v97);
  v68 = (uint64_t)v90;
  static ViewBuilder.buildExpression<A>(_:)(v65, v66, v67);
  v69 = *(void (**)(char *, uint64_t))(v93 + 8);
  v69(v65, v66);
  static ViewBuilder.buildBlock<A>(_:)(v68, v66, v94);
  return ((uint64_t (*)(uint64_t, uint64_t))v69)(v68, v66);
}

uint64_t closure #1 in HeaderFooterVisitor.HeaderContent.body.getter(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  char v17;

  v6 = type metadata accessor for HeaderFooterVisitor.HeaderContent(0, a3, a4, a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v16 - v9;
  v13 = HeaderFooterVisitor.HeaderContent.isHeader.getter(v11, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  if (!v13)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  HeaderFooterVisitor.HeaderContent.prominence.getter(v6, &v17);
  v14 = v17;
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if ((v14 & 1) == 0)
  {
    result = static SemanticFeature.isEnabled.getter();
    if ((result & 1) != 0)
      *a1 = 0;
  }
  return result;
}

double key path getter for EnvironmentValues.headerFooterConfiguration : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>, (uint64_t)&type metadata for HeaderFooterConfigurationKey, (uint64_t)&protocol witness table for HeaderFooterConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>, (uint64_t)&type metadata for HeaderFooterConfigurationKey, (uint64_t)&protocol witness table for HeaderFooterConfigurationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(_BYTE *)a2 = v4;
  *(_BYTE *)(a2 + 1) = v5;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 17) = v8;
  *(_OWORD *)(a2 + 24) = v9;
  *(_OWORD *)(a2 + 40) = v10;
  result = *(double *)&v11;
  *(_OWORD *)(a2 + 56) = v11;
  return result;
}

double HeaderFooterVisitor.HeaderContent.resolvedConfiguration.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v5;
  __int128 v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  double result;
  char v12;
  _BYTE v13[8];
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[3];
  _OWORD v20[2];

  v5 = v2[4];
  v19[2] = v2[3];
  v20[0] = v5;
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)v2 + 73);
  v6 = v2[2];
  v19[0] = v2[1];
  v19[1] = v6;
  outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v13);
  outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
  HeaderFooterVisitor.HeaderContent.prominence.getter(a1, &v12);
  v7 = v12;
  v8 = v13[1];
  v9 = v14;
  v10 = v15;
  *(_BYTE *)a2 = v13[0];
  *(_BYTE *)(a2 + 1) = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 17) = v10;
  *(_OWORD *)(a2 + 24) = v16;
  *(_OWORD *)(a2 + 40) = v17;
  result = *(double *)&v18;
  *(_OWORD *)(a2 + 56) = v18;
  return result;
}

uint64_t HeaderFooterVisitor.DefaultForegroundColorModifier.body(content:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id v3;
  char v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend((id)objc_opt_self(), sel__defaultTextColorForTableViewStyle_isSectionHeader_, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8));
  Color.Resolved.init(platformColor:)();
  if ((v4 & 1) == 0)
    Color.init(_:)();

  type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(0, &lazy cache variable for type metadata for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, (void (*)(void))lazy protocol witness table accessor for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier);
  lazy protocol witness table accessor for type _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier> and conformance _ViewModifier_Content<A>();
  View.defaultForegroundColor(_:)();
  result = swift_release();
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance HeaderFooterVisitor.LegacyModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t result;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  KeyPath = swift_getKeyPath();
  result = static Edge.Set.all.getter();
  *(_QWORD *)a1 = KeyPath;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v6;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

uint64_t HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[8];
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[23];
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[32];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[32];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[2];
  __n128 v105;
  char v106;
  uint64_t v107;
  char v108;
  _OWORD v109[3];
  _OWORD v110[2];
  char v111;
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _BYTE v119[32];
  _BYTE v120[135];
  char v121;

  v3 = v1[9];
  v98 = v1[8];
  v99 = v3;
  v100 = *((_QWORD *)v1 + 20);
  v4 = v1[5];
  *(_OWORD *)&v94[16] = v1[4];
  v95 = v4;
  v5 = v1[7];
  v96 = v1[6];
  v97 = v5;
  v6 = v1[1];
  v91 = *v1;
  v92 = v6;
  v7 = v1[3];
  v93 = v1[2];
  *(_OWORD *)v94 = v7;
  v8 = static VerticalAlignment.firstTextBaseline.getter();
  v105 = (__n128)(unint64_t)v8;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v9 = static HorizontalAlignment.center.getter();
  closure #1 in closure #2 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)((uint64_t)&v91, &v105, (uint64_t)&v79);
  v117 = v83;
  v118 = v84;
  *(_OWORD *)v119 = *(_OWORD *)v85;
  *(_OWORD *)&v119[10] = *(_OWORD *)&v85[10];
  v113 = v79;
  v114 = v80;
  v115 = v81;
  v116 = v82;
  *(_OWORD *)&v120[71] = v83;
  *(_OWORD *)&v120[87] = v84;
  *(_OWORD *)&v120[103] = *(_OWORD *)v119;
  *(_OWORD *)&v120[119] = *(_OWORD *)&v119[16];
  *(_OWORD *)&v120[7] = v79;
  *(_OWORD *)&v120[23] = v80;
  *(_OWORD *)&v120[39] = v81;
  *(_OWORD *)&v120[55] = v82;
  v71 = *(_OWORD *)&v120[80];
  v72 = *(_OWORD *)&v120[96];
  *(_OWORD *)v73 = *(_OWORD *)&v120[112];
  v67 = *(_OWORD *)&v120[16];
  v68 = *(_OWORD *)&v120[32];
  v69 = *(_OWORD *)&v120[48];
  v70 = *(_OWORD *)&v120[64];
  v66 = *(_OWORD *)v120;
  v109[2] = v93;
  v110[0] = *(_OWORD *)v94;
  *(_OWORD *)((char *)v110 + 9) = *(_OWORD *)&v94[9];
  v109[1] = v92;
  v109[0] = v91;
  *(_OWORD *)((char *)v104 + 9) = *(_OWORD *)&v94[9];
  v112 = 0;
  v111 = 0;
  v121 = 1;
  v63 = v9;
  v64 = 0;
  v65 = 1;
  *(_QWORD *)&v73[15] = *(_QWORD *)&v119[24];
  v74 = v8;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v104[0] = *(_OWORD *)v94;
  v103 = v93;
  v101 = v91;
  v102 = v92;
  outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v59);
  outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
  if (v59[0] != 1 && v61 && (v60 == 2 || v62))
  {
    static Color.primary.getter();
    swift_release();
  }
  swift_release();
  type metadata accessor for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, MEMORY[0x1E0CE74B8]);
  View.defaultForegroundColor(_:)();
  swift_release();
  v56 = v88;
  v57 = v89;
  v58 = v90;
  v52 = *(_OWORD *)v85;
  v53 = *(_OWORD *)&v85[16];
  v54 = v86;
  v55 = v87;
  v48 = v81;
  v49 = v82;
  v50 = v83;
  v51 = v84;
  v46 = v79;
  v47 = v80;
  KeyPath = swift_getKeyPath();
  if ((v99 & 1) != 0)
  {
    v11 = v95;
    v12 = BYTE8(v95);
    outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier((uint64_t)&v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
    specialized Environment.wrappedValue.getter((uint64_t)&v45);
    outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
    outlined copy of Environment<Bool>.Content(v11, v12);
    specialized Environment.wrappedValue.getter(v11, v12);
    outlined consume of Environment<Bool>.Content(v11, v12);
    HeaderFooterConfiguration.defaultEdgeInsets(for:)();
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;
    swift_release();
    swift_release();
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier((uint64_t)&v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier((uint64_t)&v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
    specialized Environment.wrappedValue.getter((uint64_t)&v45);
    outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v109, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
    outlined copy of Environment<Bool>.Content(v11, v12);
    specialized Environment.wrappedValue.getter(v11, v12);
    outlined consume of Environment<Bool>.Content(v11, v12);
    HeaderFooterConfiguration.defaultEdgeInsets(for:)();
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v28 = v27;
    swift_release();
    swift_release();
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier((uint64_t)&v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  }
  else
  {
    v28 = *((_QWORD *)&v98 + 1);
    v26 = v98;
    v24 = *((_QWORD *)&v97 + 1);
    v16 = *((_QWORD *)&v97 + 1);
    v22 = v97;
    v14 = v97;
    v20 = *((_QWORD *)&v98 + 1);
    v18 = v98;
  }
  v29 = static Edge.Set.all.getter();
  v45 = 0;
  v30 = swift_getKeyPath();
  v31 = swift_allocObject();
  v32 = v99;
  *(_OWORD *)(v31 + 144) = v98;
  *(_OWORD *)(v31 + 160) = v32;
  *(_QWORD *)(v31 + 176) = v100;
  v33 = v95;
  *(_OWORD *)(v31 + 80) = *(_OWORD *)&v94[16];
  *(_OWORD *)(v31 + 96) = v33;
  v34 = v97;
  *(_OWORD *)(v31 + 112) = v96;
  *(_OWORD *)(v31 + 128) = v34;
  v35 = v92;
  *(_OWORD *)(v31 + 16) = v91;
  *(_OWORD *)(v31 + 32) = v35;
  v36 = *(_OWORD *)v94;
  *(_OWORD *)(v31 + 48) = v93;
  *(_OWORD *)(v31 + 64) = v36;
  v37 = v45;
  v38 = v57;
  *(_OWORD *)(a1 + 160) = v56;
  *(_OWORD *)(a1 + 176) = v38;
  *(_OWORD *)(a1 + 192) = v58;
  v39 = v53;
  *(_OWORD *)(a1 + 96) = v52;
  *(_OWORD *)(a1 + 112) = v39;
  v40 = v55;
  *(_OWORD *)(a1 + 128) = v54;
  *(_OWORD *)(a1 + 144) = v40;
  v41 = v49;
  *(_OWORD *)(a1 + 32) = v48;
  *(_OWORD *)(a1 + 48) = v41;
  v42 = v51;
  *(_OWORD *)(a1 + 64) = v50;
  *(_OWORD *)(a1 + 80) = v42;
  v43 = v47;
  *(_OWORD *)a1 = v46;
  *(_OWORD *)(a1 + 16) = v43;
  *(_QWORD *)(a1 + 208) = KeyPath;
  *(_QWORD *)(a1 + 216) = v14;
  *(_QWORD *)(a1 + 224) = v16;
  *(_QWORD *)(a1 + 232) = v18;
  *(_QWORD *)(a1 + 240) = v20;
  *(_BYTE *)(a1 + 248) = v29;
  *(_QWORD *)(a1 + 256) = v22;
  *(_QWORD *)(a1 + 264) = v24;
  *(_QWORD *)(a1 + 272) = v26;
  *(_QWORD *)(a1 + 280) = v28;
  *(_BYTE *)(a1 + 288) = v37;
  *(_QWORD *)(a1 + 296) = v30;
  *(_QWORD *)(a1 + 304) = partial apply for closure #3 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:);
  *(_QWORD *)(a1 + 312) = v31;
  return outlined release of HeaderFooterVisitor.IOSMultiColumnModifier((uint64_t)&v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
}

double closure #1 in closure #2 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)@<D0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  int v12;
  __int128 v13;
  __int128 v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  double result;
  __int128 v26;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  double v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[3];
  _OWORD v47[2];
  _BYTE v48[40];
  _BYTE v49[40];
  __n128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[2];

  v6 = a2->n128_u64[0];
  v5 = a2->n128_u64[1];
  v7 = a2[1].n128_u64[1];
  v8 = a2[1].n128_u8[0] & 1;
  v9 = a2[2].n128_u8[0] & 1;
  v10 = MEMORY[0x1E0CE0B90];
  v11 = MEMORY[0x1E0DEB940];
  outlined init with take of WeakBox<Swift.AnyObject>(a1 + 112, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for EdgeInsets?, MEMORY[0x1E0CE0B90], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v48, (uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for EdgeInsets?, v10, (uint64_t (*)(_QWORD, uint64_t))v11);
  if ((v49[32] & 1) != 0)
  {
    v12 = v9;
    v13 = *(_OWORD *)(a1 + 48);
    v46[2] = *(_OWORD *)(a1 + 32);
    v47[0] = v13;
    *(_OWORD *)((char *)v47 + 9) = *(_OWORD *)(a1 + 57);
    v14 = *(_OWORD *)(a1 + 16);
    v46[0] = *(_OWORD *)a1;
    v46[1] = v14;
    outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v46, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
    specialized Environment.wrappedValue.getter((uint64_t)&v50);
    outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v46, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
    v15 = v50.n128_u8[0];
    swift_release();
    swift_release();
    v16 = a3;
    if ((v15 & 1) != 0)
    {
      v17 = *(_QWORD *)(a1 + 160);
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      v18 = *(_QWORD *)(a1 + 96);
      v19 = *(_BYTE *)(a1 + 104);
      outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
      outlined copy of Environment<Bool>.Content(v18, v19);
      v20 = specialized Environment.wrappedValue.getter(v18, v19);
      outlined consume of Environment<Bool>.Content(v18, v19);
      outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
      v28 = v17;
      LOBYTE(v29) = 0;
      *((_QWORD *)&v29 + 1) = v40;
      LOBYTE(v30) = v41;
      v31 = v42;
      LOBYTE(v32) = v43;
      *((_QWORD *)&v32 + 1) = v44;
      *(_QWORD *)&v33 = v45;
      *((_QWORD *)&v33 + 1) = v6;
      *(_QWORD *)&v34 = v5;
      BYTE8(v34) = (_DWORD)v8 != 0;
      v35 = v7;
      v36 = v12 != 0;
      v37 = 0x3FF0000000000000;
      v38 = 18.0 - v20;
      v39 = 0;
      _s7SwiftUI19_ConditionalContentV7StorageOyACyAA6HStackVyAA9TupleViewVyAA01_h9Modifier_D0VyAA19HeaderFooterVisitor33_09EFF545269A5D039E3623E2F99BCD02LLV014IOSMultiColumnI0VG_AA6SpacerVtGGAIyAA6VStackVyAIyAA021_TextBaselineRelativeV0V_AUtGG_AYtGGAIyAA08ModifiedD0VyAyA12_FrameLayoutVG_A3_yAuA013_TraitWritingI0VyAA22LayoutPriorityTraitKeyVGGAYtG_GWOi0_((uint64_t)&v28);
    }
    else
    {
      v21 = static HorizontalAlignment.center.getter();
      closure #1 in closure #1 in closure #2 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)(a1, a2, &v50);
      v22 = *(_QWORD *)(a1 + 152);
      v28 = v21;
      v29 = xmmword_187BF9840;
      v30 = v50.n128_u64[0];
      v31 = v50.n128_u8[8];
      v32 = v51;
      *(_QWORD *)&v33 = v52;
      *((_QWORD *)&v33 + 1) = *((_QWORD *)&v52 + 1);
      *(_QWORD *)&v34 = v53;
      *((_QWORD *)&v34 + 1) = v22;
      LOWORD(v35) = 256;
      _s7SwiftUI19_ConditionalContentV7StorageOyACyAA6HStackVyAA9TupleViewVyAA01_h9Modifier_D0VyAA19HeaderFooterVisitor33_09EFF545269A5D039E3623E2F99BCD02LLV014IOSMultiColumnI0VG_AA6SpacerVtGGAIyAA6VStackVyAIyAA021_TextBaselineRelativeV0V_AUtGG_AYtGGAIyAA08ModifiedD0VyAyA12_FrameLayoutVG_A3_yAuA013_TraitWritingI0VyAA22LayoutPriorityTraitKeyVGGAYtG_GWOi_((uint64_t)&v28);
    }
    outlined init with take of _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>.Storage((uint64_t)&v28, (uint64_t)&v50);
  }
  else
  {
    v28 = v6;
    *(_QWORD *)&v29 = v5;
    *((_QWORD *)&v29 + 1) = v8;
    v30 = v7;
    v31 = v9;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    LOWORD(v35) = 0;
    _s7SwiftUI19_ConditionalContentV7StorageOyACyAA6HStackVyAA9TupleViewVyAA01_h9Modifier_D0VyAA19HeaderFooterVisitor33_09EFF545269A5D039E3623E2F99BCD02LLV014IOSMultiColumnI0VG_AA6SpacerVtGGAIyAA6VStackVyAIyAA021_TextBaselineRelativeV0V_AUtGG_AYtGGAIyAA08ModifiedD0VyAyA12_FrameLayoutVG_A3_yAuA013_TraitWritingI0VyAA22LayoutPriorityTraitKeyVGGAYtG_GWOi_((uint64_t)&v28);
    outlined init with take of _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>.Storage((uint64_t)&v28, (uint64_t)&v50);
    v16 = a3;
  }
  v23 = v55;
  *(_OWORD *)(v16 + 64) = v54;
  *(_OWORD *)(v16 + 80) = v23;
  *(_OWORD *)(v16 + 96) = v56[0];
  *(_OWORD *)(v16 + 106) = *(_OWORD *)((char *)v56 + 10);
  v24 = v51;
  *(__n128 *)v16 = v50;
  *(_OWORD *)(v16 + 16) = v24;
  result = *(double *)&v52;
  v26 = v53;
  *(_OWORD *)(v16 + 32) = v52;
  *(_OWORD *)(v16 + 48) = v26;
  return result;
}

__n128 closure #1 in closure #1 in closure #2 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  int v8;
  double v9;
  uint64_t v10;
  char v11;
  double v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  __n128 result;
  _BYTE v17[24];
  _OWORD v18[3];
  _OWORD v19[2];

  if ((*(_BYTE *)(a1 + 145) & 1) != 0)
  {
    v10 = *(_QWORD *)(a1 + 96);
    v11 = *(_BYTE *)(a1 + 104);
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
    outlined copy of Environment<Bool>.Content(v10, v11);
    v12 = specialized Environment.wrappedValue.getter(v10, v11);
    outlined consume of Environment<Bool>.Content(v10, v11);
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    v9 = v12 + 45.0;
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 48);
    v18[2] = *(_OWORD *)(a1 + 32);
    v19[0] = v6;
    *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(a1 + 57);
    v7 = *(_OWORD *)(a1 + 16);
    v18[0] = *(_OWORD *)a1;
    v18[1] = v7;
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
    outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
    specialized Environment.wrappedValue.getter((uint64_t)v17);
    outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
    v8 = v17[0];
    swift_release();
    swift_release();
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    v9 = 28.0;
    if (v8)
      v9 = 20.0;
  }
  v13 = a2[1].n128_u8[0];
  v14 = a2[1].n128_u64[1];
  v15 = a2[2].n128_u8[0];
  a3->n128_f64[0] = v9;
  a3->n128_u8[8] = 0;
  result = *a2;
  a3[1] = *a2;
  a3[2].n128_u8[0] = v13 & 1;
  a3[2].n128_u64[1] = v14;
  a3[3].n128_u8[0] = v15 & 1;
  return result;
}

uint64_t closure #3 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)(uint64_t *a1, _OWORD *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t result;
  char v7;
  _OWORD v8[3];
  _OWORD v9[2];
  _BYTE v10[80];

  v3 = a2[3];
  v8[2] = a2[2];
  v9[0] = v3;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)a2 + 57);
  v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v8, (uint64_t)v10, &lazy cache variable for type metadata for Environment<HeaderFooterConfiguration>.Content, (uint64_t)&type metadata for HeaderFooterConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1158]);
  outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)&v7);
  outlined retain of Environment<HeaderFooterConfiguration>((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
  v5 = HeaderFooterConfiguration.font.getter();
  swift_release();
  result = swift_release();
  if (v5)
  {
    result = swift_release();
    *a1 = v5;
  }
  return result;
}

uint64_t HeaderFooterVisitor.visit(view:traits:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *v2;
  v7 = *(unsigned int *)(a1 + 48);
  v8 = *(unsigned int *)(a1 + 52);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_ID.canonicalID.getter();
  specialized HeaderFooterVisitor.configure<A>(view:traits:id:)(a1, v4, v11, v12);
  swift_bridgeObjectRelease();
  swift_release();
  v9 = (uint64_t *)(v6 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID);
  *v9 = v7 | (v8 << 32);
  v9[1] = v5;
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized HeaderFooterVisitor.configure<A>(view:traits:id:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t *v26;
  Class v27;
  id v28;
  _QWORD *v29;
  _QWORD *v30;
  _BYTE *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  id v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  id v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v51;
  uint64_t v52;
  char v53[424];
  _QWORD v54[2];
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v5 = v4;
  v54[0] = static VerticalAlignment.center.getter();
  v54[1] = 0;
  v55 = 1;
  specialized closure #1 in HeaderFooterVisitor.configure<A>(view:traits:id:)(a2, v5, a1, a3, a4, (uint64_t)&v56);
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>((uint64_t)v54, (uint64_t)v53);
  type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(0, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>);
  lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>> and conformance HStack<A>();
  v10 = AnyView.init<A>(_:)();
  v11 = *(char **)v5;
  v12 = OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host;
  v13 = *(void **)(*(_QWORD *)v5 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v11, sel_contentView);
    objc_msgSend(v15, sel_bounds);
    v17 = v16;
    v19 = v18;
    v21 = v20;
    v23 = v22;

    objc_msgSend(v14, sel_setFrame_, v17, v19, v21, v23);
    v24 = MEMORY[0x1E0CE13D0];
    v25 = MEMORY[0x1E0DEB940];
    outlined init with take of WeakBox<Swift.AnyObject>(v5 + 8, (uint64_t)&v57, (unint64_t *)&lazy cache variable for type metadata for Transaction?, MEMORY[0x1E0CE13D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)&v57, (uint64_t)&v58, (unint64_t *)&lazy cache variable for type metadata for Transaction?, v24, (uint64_t (*)(_QWORD, uint64_t))v25);
    v26 = (_QWORD *)((char *)v14 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v14) + 0x60));
    if (v58 == 1)
    {
      swift_beginAccess();
      *v26 = v10;
      swift_retain_n();
      swift_release();
      LOWORD(v52) = 1;
      type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

      swift_release();
      if (!a2)
        goto LABEL_8;
    }
    else
    {
      swift_beginAccess();
      *v26 = v10;
      swift_retain();
      outlined retain of Transaction?(&v57);
      swift_release();
      swift_allocObject();
      swift_unknownObjectWeakInit();
      swift_retain();
      default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
      GraphHost.asyncTransaction(_:id:_:)();

      swift_release_n();
      outlined release of Transaction?(&v57);
      if (!a2)
      {
LABEL_8:
        ViewTraitCollection.init()();
        goto LABEL_14;
      }
    }
  }
  else
  {
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(0, &lazy cache variable for type metadata for CellHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for CellHostingView);
    v28 = objc_allocWithZone(v27);
    v29 = specialized _UIHostingView.init(rootView:)(v10);
    v30 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v31 = (char *)v29 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v29) + 0xF8);
    swift_beginAccess();
    *v31 = 1;
    v32 = v29;
    specialized _UIHostingView.updateRemovedState()();

    v33 = *(void **)&v11[v12];
    *(_QWORD *)&v11[v12] = v32;
    v34 = v32;

    v35 = *(_QWORD **)&v11[v12];
    if (v35)
    {
      *(_QWORD *)((char *)v35 + *(_QWORD *)((*v30 & *v35) + 0x240) + 8) = &protocol witness table for ListTableViewHeaderFooter;
      swift_unknownObjectWeakAssign();
    }
    v36 = v34;
    v37 = objc_msgSend(v11, sel_contentView);
    objc_msgSend(v37, sel_bounds);
    v39 = v38;
    v41 = v40;
    v43 = v42;
    v45 = v44;

    objc_msgSend(v36, sel_setFrame_, v39, v41, v43, v45);
    objc_msgSend(v36, sel_setAutoresizingMask_, 18);
    v46 = objc_msgSend(v11, sel_contentView);
    objc_msgSend(v46, sel_addSubview_, v36);

    if (!a2)
      goto LABEL_8;
  }
  if ((*(_BYTE *)(v5 + 32) & 1) != 0)
    v47 = 1;
  else
    v47 = 2;
  v52 = a2;
  v51 = v47;
  ViewTraitCollection.listItemBackground(kind:)(&v51);
LABEL_14:
  v48 = *(_QWORD *)(v5 + 8);
  swift_bridgeObjectRetain();
  v49 = swift_retain();
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(v49, v48);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return outlined destroy of HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>((uint64_t)v54);
}

uint64_t specialized closure #1 in HeaderFooterVisitor.configure<A>(view:traits:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  char v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v26;
  _BOOL4 v27;
  _QWORD v29[8];
  char v30;
  _OWORD __src[24];
  _OWORD __dst[25];

  v6 = a4;
  v8 = a1;
  v26 = HIDWORD(a4);
  if (a1)
  {
    *(_QWORD *)&__dst[0] = a1;
    LOBYTE(v29[0]) = 0;
    v9 = a3;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    v10 = __src[0];
    v24 = *(_QWORD *)(a2 + 24);
    v27 = v24 == 0;
    if (v24)
      v11 = 6.0;
    else
      v11 = 0.0;
    v29[0] = v8;
    memset(__src, 0, 32);
    LOBYTE(__src[2]) = 1;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    a3 = v9;
    v8 = *((_QWORD *)&__dst[0] + 1);
    v12 = *(_QWORD *)&__dst[0];
    v14 = *((_QWORD *)&__dst[1] + 1);
    v13 = *(_QWORD *)&__dst[1];
    v15 = __dst[2];
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v24 = *(_QWORD *)(a2 + 24);
    v27 = v24 == 0;
    if (v24)
      v11 = 6.0;
    else
      v11 = 0.0;
    v15 = 1;
    v10 = 2;
  }
  v16 = *(_QWORD *)(a2 + 16);
  v17 = *(_BYTE *)(a2 + 33);
  outlined init with copy of _ViewList_View(a3, (uint64_t)__dst);
  v29[0] = __PAIR64__(v26, v6);
  v29[1] = a5;
  v30 = 1;
  *(_QWORD *)&__src[0] = swift_getKeyPath();
  BYTE8(__src[0]) = 0;
  *(_QWORD *)&__src[1] = swift_getKeyPath();
  *(_OWORD *)((char *)&__src[1] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2] + 8) = 0u;
  *(_OWORD *)((char *)&__src[3] + 8) = 0u;
  *(_OWORD *)((char *)&__src[4] + 8) = 0u;
  BYTE8(__src[5]) = 0;
  *(_QWORD *)&__src[6] = swift_getKeyPath();
  BYTE8(__src[6]) = 0;
  BYTE9(__src[6]) = v10;
  *(double *)&__src[7] = v11;
  *((_QWORD *)&__src[7] + 1) = v12;
  *(_QWORD *)&__src[8] = v8;
  *((_QWORD *)&__src[8] + 1) = v13;
  *(_QWORD *)&__src[9] = v14;
  BYTE8(__src[9]) = v15;
  *(_QWORD *)&__src[10] = v16;
  BYTE8(__src[10]) = v17;
  __src[13] = __dst[2];
  __src[14] = __dst[3];
  __src[15] = __dst[4];
  *(_QWORD *)&__src[16] = *(_QWORD *)&__dst[5];
  __src[11] = __dst[0];
  __src[12] = __dst[1];
  outlined init with take of AccessibilityScrollableContext((uint64_t)v29, (uint64_t)&__src[16] + 8);
  swift_retain();
  if (v27)
    v18 = static Font.headline.getter();
  else
    v18 = static Font.footnote.getter();
  v19 = v18;
  KeyPath = swift_getKeyPath();
  outlined init with copy of HeaderFooterVisitor.HeaderContent<_ViewList_View>((uint64_t)__src, (uint64_t)__dst);
  *(_QWORD *)&__dst[21] = KeyPath;
  *((_QWORD *)&__dst[21] + 1) = v19;
  _s7SwiftUI15ModifiedContentVyAA010_ViewList_E0VAA0F17TableCellModifierVGWOhTm_0((uint64_t)__src, &lazy cache variable for type metadata for HeaderFooterVisitor.HeaderContent<_ViewList_View>, MEMORY[0x1E0CE0A30], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for HeaderFooterVisitor.HeaderContent);
  v21 = *(_BYTE *)(a2 + 32);
  v22 = swift_getKeyPath();
  outlined init with copy of ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>((uint64_t)__dst, (uint64_t)__src);
  *(_QWORD *)&__src[22] = v24;
  BYTE8(__src[22]) = v21 & 1;
  *(_QWORD *)&__src[23] = v22;
  BYTE8(__src[23]) = 0;
  outlined destroy of ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>((uint64_t)__dst);
  memcpy(__dst, __src, 0x179uLL);
  outlined init with copy of ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>((uint64_t)__dst, (uint64_t)__src);
  outlined init with copy of ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>((uint64_t)__src, a6);
  *(_QWORD *)(a6 + 384) = 0;
  *(_BYTE *)(a6 + 392) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>((uint64_t)__dst);
  return outlined destroy of ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>((uint64_t)__src);
}

void protocol witness for ListCellContent.reuseIdentifier.getter in conformance TableViewListHeaderFooterContent()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance PreferBaselineAlignedHeaders()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance PreferBaselineAlignedHeaders()
{
  lazy protocol witness table accessor for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders();
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders;
  if (!lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreferBaselineAlignedHeaders, &type metadata for PreferBaselineAlignedHeaders);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders;
  if (!lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreferBaselineAlignedHeaders, &type metadata for PreferBaselineAlignedHeaders);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders;
  if (!lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreferBaselineAlignedHeaders, &type metadata for PreferBaselineAlignedHeaders);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders;
  if (!lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreferBaselineAlignedHeaders, &type metadata for PreferBaselineAlignedHeaders);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders;
  if (!lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PreferBaselineAlignedHeaders, &type metadata for PreferBaselineAlignedHeaders);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in PreferBaselineAlignedHeaders()
{
  return &protocol witness table for PreferBaselineAlignedHeaders;
}

uint64_t initializeWithCopy for TableViewListDataSource(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v10 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableViewListDataSource(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v7 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v7;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t assignWithTake for TableViewListDataSource(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t type metadata accessor for TableViewListDataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableViewListDataSource);
}

uint64_t associated type witness table accessor for ListDiffable.RowIDs : BidirectionalCollection in TableViewListDataSource<A>(uint64_t a1)
{
  unint64_t v3;

  v3 = lazy protocol witness table accessor for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC850], a1, &v3);
}

unint64_t lazy protocol witness table accessor for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>)
  {
    type metadata accessor for Slice<_ViewList_ID_Views>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE4690], MEMORY[0x1E0CE46A0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>);
  }
  return result;
}

void type metadata accessor for Slice<_ViewList_ID_Views>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Slice<_ViewList_ID_Views>)
  {
    type metadata accessor for _ViewList_ID_Views();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE4690], MEMORY[0x1E0CE46A8]);
    v0 = type metadata accessor for Slice();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<_ViewList_ID_Views>);
  }
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs : BidirectionalCollection in TableViewListDataSource<A>(uint64_t a1)
{
  unint64_t v3;

  v3 = lazy protocol witness table accessor for type [Sections.Item] and conformance [A]();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC850], a1, &v3);
}

unint64_t lazy protocol witness table accessor for type [Sections.Item] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Sections.Item] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Sections.Item] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [Sections.Item], (uint64_t)&type metadata for Sections.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Sections.Item] and conformance [A]);
  }
  return result;
}

uint64_t associated type witness table accessor for ListCoreDataSource.Cell : PlatformListCell in TableViewListDataSource<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ListTableViewCell and conformance ListTableViewCell, (uint64_t (*)(uint64_t))type metadata accessor for ListTableViewCell, (uint64_t)&protocol conformance descriptor for ListTableViewCell);
}

_UNKNOWN **associated type witness table accessor for ListCoreDataSource.Cell : UIHostingViewDelegate in TableViewListDataSource<A>()
{
  return &protocol witness table for ListTableViewCell;
}

_UNKNOWN **associated type witness table accessor for ListCoreDataSource.HeaderFooter : PlatformListHeaderFooter in TableViewListDataSource<A>()
{
  return &protocol witness table for ListTableViewHeaderFooter;
}

uint64_t instantiation function for generic protocol witness table for TableViewListDataSource<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListDataSource<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ListRowSeparatorVisitor and conformance ListRowSeparatorVisitor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListRowSeparatorVisitor and conformance ListRowSeparatorVisitor;
  if (!lazy protocol witness table cache variable for type ListRowSeparatorVisitor and conformance ListRowSeparatorVisitor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListRowSeparatorVisitor, &type metadata for ListRowSeparatorVisitor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowSeparatorVisitor and conformance ListRowSeparatorVisitor);
  }
  return result;
}

uint64_t sub_1879A07A0()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ApplyCollectionViewIDsVisitor and conformance ApplyCollectionViewIDsVisitor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ApplyCollectionViewIDsVisitor and conformance ApplyCollectionViewIDsVisitor;
  if (!lazy protocol witness table cache variable for type ApplyCollectionViewIDsVisitor and conformance ApplyCollectionViewIDsVisitor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ApplyCollectionViewIDsVisitor, &type metadata for ApplyCollectionViewIDsVisitor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ApplyCollectionViewIDsVisitor and conformance ApplyCollectionViewIDsVisitor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExplicitIDOffsetVisitor and conformance ExplicitIDOffsetVisitor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExplicitIDOffsetVisitor and conformance ExplicitIDOffsetVisitor;
  if (!lazy protocol witness table cache variable for type ExplicitIDOffsetVisitor and conformance ExplicitIDOffsetVisitor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ExplicitIDOffsetVisitor, &type metadata for ExplicitIDOffsetVisitor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExplicitIDOffsetVisitor and conformance ExplicitIDOffsetVisitor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExplicitIDFromViewListIDVisitor and conformance ExplicitIDFromViewListIDVisitor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExplicitIDFromViewListIDVisitor and conformance ExplicitIDFromViewListIDVisitor;
  if (!lazy protocol witness table cache variable for type ExplicitIDFromViewListIDVisitor and conformance ExplicitIDFromViewListIDVisitor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ExplicitIDFromViewListIDVisitor, &type metadata for ExplicitIDFromViewListIDVisitor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExplicitIDFromViewListIDVisitor and conformance ExplicitIDFromViewListIDVisitor);
  }
  return result;
}

uint64_t outlined destroy of ExplicitIDFromViewListIDVisitor(uint64_t a1)
{
  destroy for ExplicitIDFromViewListIDVisitor(a1);
  return a1;
}

uint64_t outlined consume of ListSeparatorConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized static ListUsesBaselineAlignedHeadersPredicate.evaluate(inputs:)()
{
  unsigned __int8 v1;
  unsigned __int8 v2;

  static Semantics.v3.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0)
    return 0;
  _GraphInputs.interfaceIdiom.getter();
  v1 = v2;
  if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) == 0)
  {
    _GraphInputs.interfaceIdiom.getter();
    v1 = v2;
    if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) == 0)
      return 0;
  }
  lazy protocol witness table accessor for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders();
  PropertyList.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type HeaderFooterVisitor and conformance HeaderFooterVisitor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HeaderFooterVisitor and conformance HeaderFooterVisitor;
  if (!lazy protocol witness table cache variable for type HeaderFooterVisitor and conformance HeaderFooterVisitor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HeaderFooterVisitor, &unk_1E1ACE1C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeaderFooterVisitor and conformance HeaderFooterVisitor);
  }
  return result;
}

uint64_t partial apply for closure #2 in Sections.sectionIDs.getter()
{
  return closure #2 in Sections.sectionIDs.getter();
}

uint64_t destroy for HeaderFooterVisitor(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for HeaderFooterVisitor(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;
  if (v5 != 1)
    swift_retain();
  *(_QWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for HeaderFooterVisitor(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = (uint64_t *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) == 1)
  {
    if (v8 != 1)
    {
      *v7 = v8;
      swift_retain();
      goto LABEL_9;
    }
    v9 = 1;
  }
  else
  {
    if (v8 != 1)
    {
      *v7 = v8;
      swift_retain();
      swift_release();
      goto LABEL_9;
    }
    outlined destroy of Transaction(a1 + 8);
    v9 = *(_QWORD *)(a2 + 8);
  }
  *v7 = v9;
LABEL_9:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t assignWithTake for HeaderFooterVisitor(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = (uint64_t *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) != 1)
  {
    if (v6 != 1)
    {
      *v5 = v6;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of Transaction(a1 + 8);
    v6 = 1;
  }
  *v5 = v6;
LABEL_6:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeaderFooterVisitor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 34))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HeaderFooterVisitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 34) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for HeaderFooterVisitor()
{
  return &unk_1E1ACE1C8;
}

uint64_t outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(0, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer));
  }
}

void type metadata accessor for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HeaderFooterVisitor.HeaderContent<_ViewList_View>, MEMORY[0x1E0CE0A40], MEMORY[0x1E0CE0A30], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for HeaderFooterVisitor.HeaderContent);
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

uint64_t type metadata accessor for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HeaderFooterVisitor.HeaderContent);
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer));
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>> and conformance HStack<A>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v7 = v6;
    v8 = lazy protocol witness table accessor for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>();
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E0CE1E98], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for TableViewListHeaderFooterContent;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined destroy of HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(0, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *outlined retain of Transaction?(uint64_t *a1)
{
  outlined copy of Transaction?(*a1);
  return a1;
}

uint64_t sub_1879A10CC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t *outlined release of Transaction?(uint64_t *a1)
{
  outlined consume of Transaction?(*a1);
  return a1;
}

uint64_t sub_1879A1124(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  _OWORD v4[4];
  uint64_t v5;

  v1 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v1;
  v5 = *(_QWORD *)(a1 + 64);
  v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  outlined retain of HeaderFooterConfiguration((uint64_t)v4);
  specialized EnvironmentValues.subscript.setter((uint64_t)v4);
  return outlined release of HeaderFooterConfiguration((uint64_t)v4);
}

uint64_t outlined init with take of AccessibilityScrollableContext(uint64_t a1, uint64_t a2)
{
  __swift_memcpy71_8(a2, a1);
  return a2;
}

uint64_t outlined init with copy of HeaderFooterVisitor.HeaderContent<_ViewList_View>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for HeaderFooterVisitor.HeaderContent<_ViewList_View>, MEMORY[0x1E0CE0A40], MEMORY[0x1E0CE0A30], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for HeaderFooterVisitor.HeaderContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined release of HeaderFooterConfiguration(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t destroy for HeaderFooterVisitor.DefaultForegroundColorModifier(uint64_t a1)
{
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for HeaderFooterVisitor.DefaultForegroundColorModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v3, v4);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithCopy for HeaderFooterVisitor.DefaultForegroundColorModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v3, v4);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

uint64_t assignWithTake for HeaderFooterVisitor.DefaultForegroundColorModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

void *type metadata accessor for HeaderFooterVisitor.DefaultForegroundColorModifier()
{
  return &unk_1E1B4CE48;
}

uint64_t type metadata completion function for HeaderFooterVisitor.HeaderContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((*(_QWORD *)(v6 + 64) + 7 + ((v7 + 169) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 71 > 0x18)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v11 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
  }
  else
  {
    v45 = *(_QWORD *)(a3 + 16);
    v12 = *(_QWORD *)a2;
    v13 = *(_BYTE *)(a2 + 8);
    v44 = *(_QWORD *)(v5 - 8);
    v46 = *(_QWORD *)(v6 + 64) + 7;
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v13);
    *(_QWORD *)a1 = v12;
    *(_BYTE *)(a1 + 8) = v13;
    v47 = a1;
    v14 = a1 & 0xFFFFFFFFFFFFFFF8;
    v15 = a2 & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    v17 = *(_QWORD *)(v15 + 24);
    v18 = *(_QWORD *)(v15 + 40);
    v19 = *(_QWORD *)(v15 + 48);
    v20 = *(_QWORD *)(v15 + 56);
    v21 = *(_QWORD *)(v15 + 64);
    v22 = *(_QWORD *)(v15 + 72);
    v41 = *(_QWORD *)(v15 + 32);
    v42 = *(_QWORD *)(v15 + 80);
    v43 = *(_BYTE *)(v15 + 88);
    outlined copy of Environment<HeaderFooterConfiguration>.Content(v16, v17, v41, v18, v19, v20, v21, v22, v42, v43);
    *(_QWORD *)(v14 + 16) = v16;
    *(_QWORD *)(v14 + 24) = v17;
    *(_QWORD *)(v14 + 32) = v41;
    *(_QWORD *)(v14 + 40) = v18;
    *(_QWORD *)(v14 + 48) = v19;
    *(_QWORD *)(v14 + 56) = v20;
    *(_QWORD *)(v14 + 64) = v21;
    *(_QWORD *)(v14 + 72) = v22;
    *(_QWORD *)(v14 + 80) = v42;
    *(_BYTE *)(v14 + 88) = v43;
    v23 = *(_QWORD *)(v15 + 96);
    LOBYTE(v17) = *(_BYTE *)(v15 + 104);
    outlined copy of Environment<Bool>.Content(v23, v17);
    *(_QWORD *)(v14 + 96) = v23;
    *(_BYTE *)(v14 + 104) = v17;
    *(_BYTE *)(v14 + 105) = *(_BYTE *)(v15 + 105);
    v24 = (_QWORD *)((v14 + 113) & 0xFFFFFFFFFFFFFFF8);
    v25 = (_QWORD *)((v15 + 113) & 0xFFFFFFFFFFFFFFF8);
    *v24 = *v25;
    v26 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    v27 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
    v28 = *(_OWORD *)v27;
    v29 = *(_OWORD *)(v27 + 16);
    *(_BYTE *)(v26 + 32) = *(_BYTE *)(v27 + 32);
    *(_OWORD *)v26 = v28;
    *(_OWORD *)(v26 + 16) = v29;
    v30 = ((unint64_t)v24 + 55) & 0xFFFFFFFFFFFFFFF8;
    v31 = ((unint64_t)v25 + 55) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
    v32 = (v30 + v7 + 9) & ~v7;
    v33 = (v31 + v7 + 9) & ~v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v32, v33, v45);
    v34 = (v46 + v33) & 0xFFFFFFFFFFFFFFF8;
    v35 = *(unsigned __int8 *)(v34 + 70);
    if (v35 >= 3)
      v35 = *(_DWORD *)v34 + 3;
    v36 = (v46 + v32) & 0xFFFFFFFFFFFFFFF8;
    if (v35 == 2)
    {
      v37 = *(_QWORD *)(v34 + 24);
      *(_QWORD *)(v36 + 24) = v37;
      *(_QWORD *)(v36 + 32) = *(_QWORD *)(v34 + 32);
      (**(void (***)(unint64_t, unint64_t))(v37 - 8))(v36, v34);
      *(_DWORD *)(v36 + 40) = *(_DWORD *)(v34 + 40);
      *(_DWORD *)(v36 + 44) = *(_DWORD *)(v34 + 44);
      *(_QWORD *)(v36 + 48) = *(_QWORD *)(v34 + 48);
      *(_BYTE *)(v36 + 70) = 2;
      v11 = v47;
    }
    else
    {
      v11 = v47;
      if (v35 == 1)
      {
        *(_DWORD *)v36 = *(_DWORD *)v34;
        *(_DWORD *)(v36 + 4) = *(_DWORD *)(v34 + 4);
        *(_QWORD *)(v36 + 8) = *(_QWORD *)(v34 + 8);
        *(_BYTE *)(v36 + 70) = 1;
      }
      else
      {
        v38 = *(_QWORD *)(v34 + 24);
        *(_QWORD *)(v36 + 24) = v38;
        *(_QWORD *)(v36 + 32) = *(_QWORD *)(v34 + 32);
        (**(void (***)(unint64_t, unint64_t))(v38 - 8))(v36, v34);
        *(_BYTE *)(v36 + 40) = *(_BYTE *)(v34 + 40);
        *(_DWORD *)(v36 + 48) = *(_DWORD *)(v34 + 48);
        *(_DWORD *)(v36 + 52) = *(_DWORD *)(v34 + 52);
        *(_QWORD *)(v36 + 56) = *(_QWORD *)(v34 + 56);
        v39 = *(_DWORD *)(v34 + 64);
        *(_WORD *)(v36 + 68) = *(_WORD *)(v34 + 68);
        *(_DWORD *)(v36 + 64) = v39;
        *(_BYTE *)(v36 + 70) = 0;
      }
    }
  }
  swift_retain();
  return v11;
}

uint64_t destroy for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;

  v3 = a1;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v3 &= 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<HeaderFooterConfiguration>.Content(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(_QWORD *)(v3 + 80), *(_BYTE *)(v3 + 88));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v3 + 96), *(_BYTE *)(v3 + 104));
  v4 = (((v3 + 113) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v6);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(v7 + 70);
  if (v8 >= 3)
    v8 = *(_DWORD *)v7 + 3;
  if (v8 != 1)
    __swift_destroy_boxed_opaque_existential_1(v7);
  return swift_release();
}

uint64_t initializeWithCopy for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v40;
  char v41;
  uint64_t v43;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v6);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  v43 = a1;
  v7 = a1 & 0xFFFFFFFFFFFFFFF8;
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v10 = *(_QWORD *)(v8 + 24);
  v11 = *(_QWORD *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 40);
  v13 = *(_QWORD *)(v8 + 48);
  v14 = *(_QWORD *)(v8 + 56);
  v15 = *(_QWORD *)(v8 + 64);
  v16 = *(_QWORD *)(v8 + 72);
  v40 = *(_QWORD *)(v8 + 80);
  v41 = *(_BYTE *)(v8 + 88);
  outlined copy of Environment<HeaderFooterConfiguration>.Content(v9, v10, v11, v12, v13, v14, v15, v16, v40, v41);
  *(_QWORD *)(v7 + 16) = v9;
  *(_QWORD *)(v7 + 24) = v10;
  *(_QWORD *)(v7 + 32) = v11;
  *(_QWORD *)(v7 + 40) = v12;
  *(_QWORD *)(v7 + 48) = v13;
  *(_QWORD *)(v7 + 56) = v14;
  *(_QWORD *)(v7 + 64) = v15;
  *(_QWORD *)(v7 + 72) = v16;
  *(_QWORD *)(v7 + 80) = v40;
  *(_BYTE *)(v7 + 88) = v41;
  v17 = *(_QWORD *)(v8 + 96);
  LOBYTE(v10) = *(_BYTE *)(v8 + 104);
  outlined copy of Environment<Bool>.Content(v17, v10);
  *(_QWORD *)(v7 + 96) = v17;
  *(_BYTE *)(v7 + 104) = v10;
  *(_BYTE *)(v7 + 105) = *(_BYTE *)(v8 + 105);
  v18 = (_QWORD *)((v7 + 113) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v8 + 113) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_OWORD *)v21;
  v23 = *(_OWORD *)(v21 + 16);
  *(_BYTE *)(v20 + 32) = *(_BYTE *)(v21 + 32);
  *(_OWORD *)v20 = v22;
  *(_OWORD *)(v20 + 16) = v23;
  v24 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  v26 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (v27 + 9 + v24) & ~v27;
  v29 = (v27 + 9 + v25) & ~v27;
  (*(void (**)(uint64_t, uint64_t))(v26 + 16))(v28, v29);
  v30 = *(_QWORD *)(v26 + 64) + 7;
  v31 = v30 + v28;
  v32 = (v30 + v29) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(unsigned __int8 *)(v32 + 70);
  if (v33 >= 3)
    v33 = *(_DWORD *)v32 + 3;
  v34 = v31 & 0xFFFFFFFFFFFFFFF8;
  if (v33 == 2)
  {
    v36 = *(_QWORD *)(v32 + 24);
    *(_QWORD *)(v34 + 24) = v36;
    *(_QWORD *)(v34 + 32) = *(_QWORD *)(v32 + 32);
    (**(void (***)(unint64_t, unint64_t))(v36 - 8))(v34, v32);
    *(_DWORD *)(v34 + 40) = *(_DWORD *)(v32 + 40);
    *(_DWORD *)(v34 + 44) = *(_DWORD *)(v32 + 44);
    *(_QWORD *)(v34 + 48) = *(_QWORD *)(v32 + 48);
    v35 = 2;
  }
  else if (v33 == 1)
  {
    *(_DWORD *)v34 = *(_DWORD *)v32;
    *(_DWORD *)(v34 + 4) = *(_DWORD *)(v32 + 4);
    *(_QWORD *)(v34 + 8) = *(_QWORD *)(v32 + 8);
    v35 = 1;
  }
  else
  {
    v37 = *(_QWORD *)(v32 + 24);
    *(_QWORD *)(v34 + 24) = v37;
    *(_QWORD *)(v34 + 32) = *(_QWORD *)(v32 + 32);
    (**(void (***)(unint64_t, unint64_t))(v37 - 8))(v34, v32);
    v35 = 0;
    *(_BYTE *)(v34 + 40) = *(_BYTE *)(v32 + 40);
    *(_DWORD *)(v34 + 48) = *(_DWORD *)(v32 + 48);
    *(_DWORD *)(v34 + 52) = *(_DWORD *)(v32 + 52);
    *(_QWORD *)(v34 + 56) = *(_QWORD *)(v32 + 56);
    v38 = *(_DWORD *)(v32 + 64);
    *(_WORD *)(v34 + 68) = *(_WORD *)(v32 + 68);
    *(_DWORD *)(v34 + 64) = v38;
  }
  *(_BYTE *)(v34 + 70) = v35;
  swift_retain();
  return v43;
}

uint64_t assignWithCopy for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v53;
  char v54;
  uint64_t v56;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  outlined consume of Environment<Bool>.Content(v7, v8);
  v56 = a1;
  a1 &= 0xFFFFFFFFFFFFFFF8;
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v11 = *(_QWORD *)(v9 + 24);
  v12 = *(_QWORD *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 40);
  v14 = *(_QWORD *)(v9 + 48);
  v15 = *(_QWORD *)(v9 + 56);
  v16 = *(_QWORD *)(v9 + 64);
  v17 = *(_QWORD *)(v9 + 72);
  v53 = *(_QWORD *)(v9 + 80);
  v54 = *(_BYTE *)(v9 + 88);
  outlined copy of Environment<HeaderFooterConfiguration>.Content(v10, v11, v12, v13, v14, v15, v16, v17, v53, v54);
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 56);
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 72);
  v26 = *(_QWORD *)(a1 + 80);
  v27 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v17;
  *(_QWORD *)(a1 + 80) = v53;
  *(_BYTE *)(a1 + 88) = v54;
  outlined consume of Environment<HeaderFooterConfiguration>.Content(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
  v28 = *(_QWORD *)(v9 + 96);
  LOBYTE(v11) = *(_BYTE *)(v9 + 104);
  outlined copy of Environment<Bool>.Content(v28, v11);
  v29 = *(_QWORD *)(a1 + 96);
  v30 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v28;
  *(_BYTE *)(a1 + 104) = v11;
  outlined consume of Environment<Bool>.Content(v29, v30);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(v9 + 105);
  v31 = (_QWORD *)((a1 + 113) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)((v9 + 113) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = *(_OWORD *)v34;
  v36 = *(_OWORD *)(v34 + 16);
  *(_BYTE *)(v33 + 32) = *(_BYTE *)(v34 + 32);
  *(_OWORD *)v33 = v35;
  *(_OWORD *)(v33 + 16) = v36;
  v37 = ((unint64_t)v31 + 55) & 0xFFFFFFFFFFFFFFF8;
  v38 = ((unint64_t)v32 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v40 = *(unsigned __int8 *)(v39 + 80);
  v41 = (v40 + 9 + v37) & ~v40;
  v42 = (v40 + 9 + v38) & ~v40;
  (*(void (**)(uint64_t, uint64_t))(v39 + 24))(v41, v42);
  v43 = *(_QWORD *)(v39 + 64) + 7;
  v44 = (v43 + v41) & 0xFFFFFFFFFFFFFFF8;
  v45 = (v43 + v42) & 0xFFFFFFFFFFFFFFF8;
  if (v44 != v45)
  {
    v46 = *(unsigned __int8 *)(v44 + 70);
    if (v46 >= 3)
      v46 = *(_DWORD *)v44 + 3;
    if (v46 != 1)
      __swift_destroy_boxed_opaque_existential_1(v44);
    swift_release();
    v47 = *(unsigned __int8 *)(v45 + 70);
    if (v47 >= 3)
      v47 = *(_DWORD *)v45 + 3;
    if (v47 == 2)
    {
      v49 = *(_QWORD *)(v45 + 24);
      *(_QWORD *)(v44 + 24) = v49;
      *(_QWORD *)(v44 + 32) = *(_QWORD *)(v45 + 32);
      (**(void (***)(unint64_t, unint64_t))(v49 - 8))(v44, v45);
      *(_DWORD *)(v44 + 40) = *(_DWORD *)(v45 + 40);
      *(_DWORD *)(v44 + 44) = *(_DWORD *)(v45 + 44);
      *(_QWORD *)(v44 + 48) = *(_QWORD *)(v45 + 48);
      v48 = 2;
    }
    else if (v47 == 1)
    {
      *(_DWORD *)v44 = *(_DWORD *)v45;
      *(_DWORD *)(v44 + 4) = *(_DWORD *)(v45 + 4);
      *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 8);
      v48 = 1;
    }
    else
    {
      v50 = *(_QWORD *)(v45 + 24);
      *(_QWORD *)(v44 + 24) = v50;
      *(_QWORD *)(v44 + 32) = *(_QWORD *)(v45 + 32);
      (**(void (***)(unint64_t, unint64_t))(v50 - 8))(v44, v45);
      v48 = 0;
      *(_BYTE *)(v44 + 40) = *(_BYTE *)(v45 + 40);
      *(_DWORD *)(v44 + 48) = *(_DWORD *)(v45 + 48);
      *(_DWORD *)(v44 + 52) = *(_DWORD *)(v45 + 52);
      *(_QWORD *)(v44 + 56) = *(_QWORD *)(v45 + 56);
      v51 = *(_DWORD *)(v45 + 64);
      *(_WORD *)(v44 + 68) = *(_WORD *)(v45 + 68);
      *(_DWORD *)(v44 + 64) = v51;
    }
    *(_BYTE *)(v44 + 70) = v48;
    swift_retain();
  }
  return v56;
}

uint64_t initializeWithTake for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_OWORD *)(v4 + 73) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 73);
  *(_OWORD *)(v4 + 48) = v6;
  *(_OWORD *)(v4 + 64) = v5;
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 96);
  *(_BYTE *)(v4 + 104) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 104);
  *(_QWORD *)(v4 + 96) = v8;
  *(_BYTE *)(v4 + 105) = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 105);
  v9 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 113) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 113) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
  *(_OWORD *)v11 = v13;
  *(_OWORD *)(v11 + 16) = v14;
  v15 = ((unint64_t)v9 + 55) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v18 + 9 + v15) & ~v18;
  v20 = (v18 + 9 + v16) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v19, v20);
  v21 = *(_QWORD *)(v17 + 64) + 7;
  v22 = v21 + v19;
  v23 = (v21 + v20) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(unsigned __int8 *)(v23 + 70);
  if (v24 >= 3)
    v24 = *(_DWORD *)v23 + 3;
  v25 = v22 & 0xFFFFFFFFFFFFFFF8;
  if (v24 == 2)
  {
    v26 = *(_OWORD *)v23;
    v27 = *(_OWORD *)(v23 + 16);
    v28 = *(_OWORD *)(v23 + 32);
    *(_QWORD *)(v25 + 48) = *(_QWORD *)(v23 + 48);
    *(_OWORD *)(v25 + 16) = v27;
    *(_OWORD *)(v25 + 32) = v28;
  }
  else
  {
    if (v24 != 1)
    {
      LOBYTE(v24) = 0;
      *(_OWORD *)v25 = *(_OWORD *)v23;
      v29 = *(_OWORD *)(v23 + 16);
      v30 = *(_OWORD *)(v23 + 32);
      v31 = *(_OWORD *)(v23 + 48);
      *(_QWORD *)(v25 + 62) = *(_QWORD *)(v23 + 62);
      *(_OWORD *)(v25 + 32) = v30;
      *(_OWORD *)(v25 + 48) = v31;
      *(_OWORD *)(v25 + 16) = v29;
      goto LABEL_9;
    }
    v26 = *(_OWORD *)v23;
  }
  *(_OWORD *)v25 = v26;
LABEL_9:
  *(_BYTE *)(v25 + 70) = v24;
  return a1;
}

uint64_t assignWithTake for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v4 = a2;
  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v4 = (uint64_t *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
  v10 = v4[10];
  v11 = a1 & 0xFFFFFFFFFFFFFFF8;
  v12 = *((_BYTE *)v4 + 88);
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 40);
  v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 48);
  v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 56);
  v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 64);
  v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 72);
  v21 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 80);
  v22 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 88);
  v23 = *((_OWORD *)v4 + 2);
  v24 = *((_OWORD *)v4 + 3);
  v25 = *((_OWORD *)v4 + 4);
  *(_OWORD *)(v11 + 16) = *((_OWORD *)v4 + 1);
  *(_OWORD *)(v11 + 32) = v23;
  *(_OWORD *)(v11 + 48) = v24;
  *(_OWORD *)(v11 + 64) = v25;
  *(_QWORD *)(v11 + 80) = v10;
  *(_BYTE *)(v11 + 88) = v12;
  outlined consume of Environment<HeaderFooterConfiguration>.Content(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  v26 = *((_BYTE *)v4 + 104);
  v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 96);
  v28 = *(_BYTE *)((a1 & 0xFFFFFFFFFFFFFFF8) + 104);
  *(_QWORD *)(v11 + 96) = v4[12];
  *(_BYTE *)(v11 + 104) = v26;
  outlined consume of Environment<Bool>.Content(v27, v28);
  *(_BYTE *)(v11 + 105) = *((_BYTE *)v4 + 105);
  v29 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 113) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v4 + 113) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(_OWORD *)v32;
  v34 = *(_OWORD *)(v32 + 16);
  *(_BYTE *)(v31 + 32) = *(_BYTE *)(v32 + 32);
  *(_OWORD *)v31 = v33;
  *(_OWORD *)(v31 + 16) = v34;
  v35 = ((unint64_t)v29 + 55) & 0xFFFFFFFFFFFFFFF8;
  v36 = ((unint64_t)v30 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
  v37 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v38 = *(unsigned __int8 *)(v37 + 80);
  v39 = (v38 + 9 + v35) & ~v38;
  v40 = (v38 + 9 + v36) & ~v38;
  (*(void (**)(uint64_t, uint64_t))(v37 + 40))(v39, v40);
  v41 = *(_QWORD *)(v37 + 64) + 7;
  v42 = (v41 + v39) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v41 + v40) & 0xFFFFFFFFFFFFFFF8;
  if (v42 != v43)
  {
    v44 = *(unsigned __int8 *)(v42 + 70);
    if (v44 >= 3)
      v44 = *(_DWORD *)v42 + 3;
    if (v44 != 1)
      __swift_destroy_boxed_opaque_existential_1(v42);
    swift_release();
    v45 = *(unsigned __int8 *)(v43 + 70);
    if (v45 >= 3)
      v45 = *(_DWORD *)v43 + 3;
    if (v45 == 2)
    {
      v46 = *(_OWORD *)v43;
      v47 = *(_OWORD *)(v43 + 16);
      v48 = *(_OWORD *)(v43 + 32);
      *(_QWORD *)(v42 + 48) = *(_QWORD *)(v43 + 48);
      *(_OWORD *)(v42 + 16) = v47;
      *(_OWORD *)(v42 + 32) = v48;
      *(_OWORD *)v42 = v46;
      LOBYTE(v45) = 2;
    }
    else if (v45 == 1)
    {
      *(_OWORD *)v42 = *(_OWORD *)v43;
    }
    else
    {
      LOBYTE(v45) = 0;
      *(_OWORD *)v42 = *(_OWORD *)v43;
      v49 = *(_OWORD *)(v43 + 16);
      v50 = *(_OWORD *)(v43 + 32);
      v51 = *(_OWORD *)(v43 + 48);
      *(_QWORD *)(v42 + 62) = *(_QWORD *)(v43 + 62);
      *(_OWORD *)(v42 + 32) = v50;
      *(_OWORD *)(v42 + 48) = v51;
      *(_OWORD *)(v42 + 16) = v49;
    }
    *(_BYTE *)(v42 + 70) = v45;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HeaderFooterVisitor.HeaderContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 < a2 && *(_BYTE *)(a1 + ((*(_QWORD *)(v4 + 64) + ((v7 + 169) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 71))
    return v6 + *(_DWORD *)a1 + 1;
  if (v5 > 0xFE)
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((a1 & 0xFFFFFFFFFFFFFFF8) + 113) & 0xFFFFFFFFFFFFFFF8)
                                                                    + 55) & 0xFFFFFFFFFFFFFFF8)
                                                                  + v7
                                                                  + 9) & ~v7);
  v9 = *(unsigned __int8 *)(a1 + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for HeaderFooterVisitor.HeaderContent(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ((*(_QWORD *)(v6 + 64) + ((v9 + 169) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 71;
  if (v8 >= a2)
  {
    if (v8 < a3)
      *(_BYTE *)(a1 + v10) = 0;
    if (a2)
    {
      if (v7 > 0xFE)
      {
        (*(void (**)(unint64_t))(v6 + 56))(((((((a1 & 0xFFFFFFFFFFFFFFF8) + 113) & 0xFFFFFFFFFFFFFFF8)
                                                              + 55) & 0xFFFFFFFFFFFFFFF8)
                                                            + v9
                                                            + 9) & ~v9);
      }
      else if (a2 > 0xFE)
      {
        *(_BYTE *)(a1 + 8) = 0;
        *(_QWORD *)a1 = a2 - 255;
      }
      else
      {
        *(_BYTE *)(a1 + 8) = -(char)a2;
      }
    }
  }
  else
  {
    v11 = ~v8 + a2;
    bzero((void *)a1, v10);
    *(_DWORD *)a1 = v11;
    if (v8 < a3)
      *(_BYTE *)(a1 + v10) = 1;
  }
}

uint64_t associated type witness table accessor for View.Body : View in HeaderFooterVisitor.HeaderContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HeaderFooterVisitor.DefaultForegroundColorModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier;
  if (!lazy protocol witness table cache variable for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HeaderFooterVisitor.DefaultForegroundColorModifier, &unk_1E1B4CE48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, (void (*)(void))lazy protocol witness table accessor for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier>)
    type metadata accessor for StaticIf();
  return result;
}

uint64_t sub_1879A25D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.textCase.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1879A2610()
{
  return EnvironmentValues.textCase.setter();
}

uint64_t sub_1879A2644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for HeaderFooterVisitor.HeaderContent(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)v8, *(_BYTE *)(v8 + 8));
  outlined consume of Environment<HeaderFooterConfiguration>.Content(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 56), *(_QWORD *)(v8 + 64), *(_QWORD *)(v8 + 72), *(_QWORD *)(v8 + 80), *(_BYTE *)(v8 + 88));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v8 + 96), *(_BYTE *)(v8 + 104));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 64), v5);
  v9 = *(unsigned __int8 *)(v8 + *(int *)(v6 + 68) + 70);
  if (v9 == 2)
    goto LABEL_4;
  if (v9 == 1)
  {
LABEL_5:
    swift_release();
    return swift_deallocObject();
  }
  if (!*(_BYTE *)(v8 + *(int *)(v6 + 68) + 70))
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1(v8 + *(int *)(v6 + 68));
    goto LABEL_5;
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HeaderFooterVisitor.HeaderContent.body.getter(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeaderFooterVisitor.HeaderContent(0, v6, v7, a4) - 8)
                          + 80);
  return closure #1 in HeaderFooterVisitor.HeaderContent.body.getter(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Text.Case?> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Text.Case?> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Text.Case?> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Case?>, &lazy cache variable for type metadata for Text.Case?, MEMORY[0x1E0CE6B70], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Text.Case?> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier>();
    v2[0] = lazy protocol witness table accessor for type HeaderFooterVisitor.IOSMultiColumnModifier and conformance HeaderFooterVisitor.IOSMultiColumnModifier();
    v2[1] = lazy protocol witness table accessor for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HeaderFooterVisitor.IOSMultiColumnModifier and conformance HeaderFooterVisitor.IOSMultiColumnModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HeaderFooterVisitor.IOSMultiColumnModifier and conformance HeaderFooterVisitor.IOSMultiColumnModifier;
  if (!lazy protocol witness table cache variable for type HeaderFooterVisitor.IOSMultiColumnModifier and conformance HeaderFooterVisitor.IOSMultiColumnModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HeaderFooterVisitor.IOSMultiColumnModifier, &unk_1E1ACE130);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeaderFooterVisitor.IOSMultiColumnModifier and conformance HeaderFooterVisitor.IOSMultiColumnModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier;
  if (!lazy protocol witness table cache variable for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HeaderFooterVisitor.LegacyModifier, &unk_1E1ACE0B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<HeaderFooterConfiguration> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<HeaderFooterConfiguration> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<HeaderFooterConfiguration> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<HeaderFooterConfiguration>, (uint64_t)&type metadata for HeaderFooterConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<HeaderFooterConfiguration> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void *type metadata accessor for HeaderFooterVisitor.LegacyModifier()
{
  return &unk_1E1ACE0B0;
}

uint64_t destroy for HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t a1)
{
  outlined consume of Environment<HeaderFooterConfiguration>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
}

uint64_t initializeWithCopy for HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v16;
  char v17;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  v17 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<HeaderFooterConfiguration>.Content(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v16, v17);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v16;
  *(_BYTE *)(a1 + 72) = v17;
  v12 = *(_QWORD *)(a2 + 80);
  LOBYTE(v5) = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v12, v5);
  *(_QWORD *)(a1 + 80) = v12;
  *(_BYTE *)(a1 + 88) = v5;
  v13 = *(_QWORD *)(a2 + 96);
  LOBYTE(v5) = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v13, v5);
  *(_QWORD *)(a1 + 96) = v13;
  *(_BYTE *)(a1 + 104) = v5;
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

uint64_t assignWithCopy for HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v31;
  char v32;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<HeaderFooterConfiguration>.Content(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v31, v32);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v31;
  *(_BYTE *)(a1 + 72) = v32;
  outlined consume of Environment<HeaderFooterConfiguration>.Content(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 80);
  LOBYTE(v5) = *(_BYTE *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v22, v5);
  v23 = *(_QWORD *)(a1 + 80);
  v24 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v22;
  *(_BYTE *)(a1 + 88) = v5;
  outlined consume of Environment<Bool>.Content(v23, v24);
  v25 = *(_QWORD *)(a2 + 96);
  LOBYTE(v5) = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v25, v5);
  v26 = *(_QWORD *)(a1 + 96);
  v27 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v25;
  *(_BYTE *)(a1 + 104) = v5;
  outlined consume of Environment<Bool>.Content(v26, v27);
  v28 = *(_OWORD *)(a2 + 112);
  v29 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v28;
  *(_OWORD *)(a1 + 128) = v29;
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

uint64_t assignWithTake for HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;

  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_BYTE *)(a2 + 72);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_BYTE *)(a1 + 72);
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 72) = v5;
  outlined consume of Environment<HeaderFooterConfiguration>.Content(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  v18 = *(_BYTE *)(a2 + 88);
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = v18;
  outlined consume of Environment<Bool>.Content(v19, v20);
  v21 = *(_BYTE *)(a2 + 104);
  v22 = *(_QWORD *)(a1 + 96);
  v23 = *(_BYTE *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = v21;
  outlined consume of Environment<Bool>.Content(v22, v23);
  v24 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v24;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 168))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 168) = 0;
    if (a2)
      *(_BYTE *)(result + 72) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for HeaderFooterVisitor.IOSMultiColumnModifier()
{
  return &unk_1E1ACE130;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, (void (*)(void))lazy protocol witness table accessor for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier);
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

uint64_t sub_1879A2EC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Case?>, &lazy cache variable for type metadata for Text.Case?, MEMORY[0x1E0CE6B70], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE66C0]);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier>();
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<HeaderFooterConfiguration>, (uint64_t)&type metadata for HeaderFooterConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  v13[0] = v1;
  v13[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Text.Case?> and conformance _EnvironmentKeyTransformModifier<A>();
  v7 = MEMORY[0x1E0CE2E70];
  v12[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v13);
  v12[1] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier> and conformance <> StaticIf<A, B, C>();
  v11[0] = MEMORY[0x18D75FFDC](v7, v3, v12);
  v11[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<HeaderFooterConfiguration> and conformance _EnvironmentKeyWritingModifier<A>();
  v10[0] = MEMORY[0x18D75FFDC](v7, v4, v11);
  v10[1] = &protocol witness table for AccessibilityScrollableContextModifier;
  v9[0] = MEMORY[0x18D75FFDC](v7, v5, v10);
  v9[1] = MEMORY[0x1E0CE35E0];
  return MEMORY[0x18D75FFDC](v7, v6, v9);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HeaderFooterVisitor.LegacyModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HeaderFooterVisitor.IOSMultiColumnModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>)
  {
    type metadata accessor for StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>();
    lazy protocol witness table accessor for type StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>> and conformance <> StaticIf<A, B, C>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>);
  }
}

uint64_t type metadata accessor for StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>;
  if (!lazy cache variable for type metadata for StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>);
    lazy protocol witness table accessor for type ListUsesBaselineAlignedHeadersPredicate and conformance ListUsesBaselineAlignedHeadersPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>);
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>, (void (*)(uint64_t))type metadata accessor for (VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer));
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>);
  }
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(void))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, a3, a4);
    a5();
    v7 = type metadata accessor for HStack();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer))
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, (void (*)(void))lazy protocol witness table accessor for type HeaderFooterVisitor.IOSMultiColumnModifier and conformance HeaderFooterVisitor.IOSMultiColumnModifier);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer));
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer));
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for (VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer))
  {
    type metadata accessor for VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer));
  }
}

void type metadata accessor for VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>, (void (*)(uint64_t))type metadata accessor for (_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>));
    lazy protocol witness table accessor for type TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)> and conformance TupleView<A>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>);
  }
}

void type metadata accessor for (_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>))
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>));
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>, (void (*)(uint64_t))type metadata accessor for (_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>));
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for (ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, MEMORY[0x1E0CE6298], MEMORY[0x1E0CE1A90], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer));
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>, MEMORY[0x1E0CE5460], MEMORY[0x1E0CE5450], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type ListUsesBaselineAlignedHeadersPredicate and conformance ListUsesBaselineAlignedHeadersPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListUsesBaselineAlignedHeadersPredicate and conformance ListUsesBaselineAlignedHeadersPredicate;
  if (!lazy protocol witness table cache variable for type ListUsesBaselineAlignedHeadersPredicate and conformance ListUsesBaselineAlignedHeadersPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListUsesBaselineAlignedHeadersPredicate, &type metadata for ListUsesBaselineAlignedHeadersPredicate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListUsesBaselineAlignedHeadersPredicate and conformance ListUsesBaselineAlignedHeadersPredicate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>();
    v2[0] = lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>> and conformance HStack<A>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>> and conformance HStack<A>();
    v3[1] = lazy protocol witness table accessor for type TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>> and conformance HStack<A>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>> and conformance HStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>, (void (*)(uint64_t))type metadata accessor for (VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer));
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer));
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(unsigned __int8 *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(unsigned __int8 *)(a1 + 104);
  v10 = *(_BYTE *)(a1 + 72);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v10);
  a3(v5, v6);
  a3(v7, v8);
  return a1;
}

uint64_t sub_1879A3980()
{
  uint64_t v0;

  outlined consume of Environment<HeaderFooterConfiguration>.Content(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #3 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)(a1, (_OWORD *)(v1 + 16));
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyACyAA6HStackVyAA9TupleViewVyAA01_h9Modifier_D0VyAA19HeaderFooterVisitor33_09EFF545269A5D039E3623E2F99BCD02LLV014IOSMultiColumnI0VG_AA6SpacerVtGGAIyAA6VStackVyAIyAA021_TextBaselineRelativeV0V_AUtGG_AYtGGAIyAA08ModifiedD0VyAyA12_FrameLayoutVG_A3_yAuA013_TraitWritingI0VyAA22LayoutPriorityTraitKeyVGGAYtG_GWOi0_(uint64_t result)
{
  *(_BYTE *)(result + 121) = 1;
  return result;
}

uint64_t outlined init with take of _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>(0, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>();
    v7 = v6;
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer));
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyACyAA6HStackVyAA9TupleViewVyAA01_h9Modifier_D0VyAA19HeaderFooterVisitor33_09EFF545269A5D039E3623E2F99BCD02LLV014IOSMultiColumnI0VG_AA6SpacerVtGGAIyAA6VStackVyAIyAA021_TextBaselineRelativeV0V_AUtGG_AYtGGAIyAA08ModifiedD0VyAyA12_FrameLayoutVG_A3_yAuA013_TraitWritingI0VyAA22LayoutPriorityTraitKeyVGGAYtG_GWOi_(uint64_t result)
{
  *(_BYTE *)(result + 121) = 0;
  return result;
}

ValueMetadata *type metadata accessor for ListUsesBaselineAlignedHeadersPredicate()
{
  return &type metadata for ListUsesBaselineAlignedHeadersPredicate;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>> and conformance <> Modifie()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>> and conformance <> M;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>> and conformance <> M)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>> and conformance <> M);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE66C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>)
  {
    type metadata accessor for ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, MEMORY[0x1E0CE0B90], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
  }
}

void type metadata accessor for ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, MEMORY[0x1E0CE74B8]);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1879A3DE8()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, a2, a3);
    v8 = v7;
    v9[0] = a4();
    v9[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, (void (*)(void))lazy protocol witness table accessor for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, MEMORY[0x1E0CE0B90], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, (void (*)(void))lazy protocol witness table accessor for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t _UIHostingView.convertAnchor<A>(_:)()
{
  ViewGraph.transform.getter();
  Anchor.convert(to:)();
  return swift_release();
}

uint64_t protocol witness for HostingViewProtocol.preferenceValue<A>(_:) in conformance _UIHostingView<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a4);
  return ViewRendererHost.preferenceValue<A>(_:)();
}

uint64_t DatePicker<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  outlined init with copy of Binding<Date>(a1, a2, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v4 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v5 = a1 + v4[6];
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t)&protocol witness table for DatePickerStyleConfiguration.Label);
  v7 = v6;
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of Binding<Date>(v5, a2 + *(int *)(v6 + 36), (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  outlined init with copy of Binding<Date>(a1 + v4[7], a2 + *(int *)(v7 + 40), (unint64_t *)&lazy cache variable for type metadata for Date?, v8);
  *(_QWORD *)(a2 + *(int *)(v7 + 44)) = *(_QWORD *)(a1 + v4[8]);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for DatePickerStyleConfiguration);
}

uint64_t DatePicker.init(selection:minimumDate:maximumDate:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  _QWORD v24[2];
  void (*v25)(uint64_t);
  uint64_t v26;

  v24[1] = a5;
  v25 = a4;
  v26 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v16;
  outlined init with copy of Binding<Date>(v18, a8, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v20 = (int *)type metadata accessor for DatePicker(0, a6, a7, v19);
  v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of Binding<Date>(a2, a8 + v20[9], (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v22 = outlined init with copy of Binding<Date>(a3, a8 + v20[10], (unint64_t *)&lazy cache variable for type metadata for Date?, v21);
  *(_QWORD *)(a8 + v20[11]) = v17;
  v25(v22);
  outlined destroy of Date?(a3, (unint64_t *)&lazy cache variable for type metadata for Date?, v21);
  outlined destroy of Date?(a2, (unint64_t *)&lazy cache variable for type metadata for Date?, v21);
  outlined destroy of Date?(a1, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(a8 + v20[12], v15, a6);
}

void DatePicker.body.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for ResolvedDatePickerStyle(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Binding<Date>(v1, (uint64_t)v10, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of Binding<Date>(v1 + *(int *)(a1 + 36), (uint64_t)&v10[v7[6]], (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  outlined init with copy of Binding<Date>(v1 + *(int *)(a1 + 40), (uint64_t)&v10[v7[7]], (unint64_t *)&lazy cache variable for type metadata for Date?, v11);
  *(_QWORD *)&v10[v7[8]] = *(_QWORD *)(v1 + *(int *)(a1 + 44));
  outlined init with copy of DatePickerStyleConfiguration((uint64_t)v10, (uint64_t)v6);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v15 = v12;
  v16 = v13;
  v17 = v1;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, type metadata accessor for ResolvedDatePickerStyle, (uint64_t)&protocol conformance descriptor for ResolvedDatePickerStyle);
  lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t)partial apply for closure #1 in DatePicker.body.getter);
}

uint64_t sub_1879A44B8()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v1, v0);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v2, type metadata accessor for DatePickerStyleConfiguration);
}

uint64_t closure #1 in DatePicker.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DatePicker(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 48), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t type metadata accessor for DatePicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DatePicker);
}

uint64_t outlined init with copy of Binding<Date>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;

  type metadata accessor for Binding<Date>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for Binding<Date>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for Date();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t partial apply for closure #1 in DatePicker.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in DatePicker.body.getter(v1[4], v1[2], v1[3], a1);
}

_QWORD *static DatePickerComponents.hourAndMinute.getter@<X0>(_QWORD *a1@<X8>)
{
  return static DatePickerComponents.hourAndMinute.getter(&one-time initialization token for hourAndMinute, &static DatePickerComponents.hourAndMinute, a1);
}

_QWORD *static DatePickerComponents.date.getter@<X0>(_QWORD *a1@<X8>)
{
  return static DatePickerComponents.hourAndMinute.getter(&one-time initialization token for date, &static DatePickerComponents.date, a1);
}

_QWORD *static DatePickerComponents.hourAndMinute.getter@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*result != -1)
    result = (_QWORD *)swift_once();
  *a3 = *a2;
  return result;
}

uint64_t specialized DatePicker.init(selection:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  char *v37;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v44 = a4;
  v45 = a6;
  v41 = a5;
  v42 = a3;
  v43 = a7;
  v39 = a1;
  v40 = a2;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v39 - v11;
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v39 - v19;
  v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v39 - v24;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v39 - v24, &lazy cache variable for type metadata for Binding<Date>, v21);
  v26 = type metadata accessor for Date();
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v27(v20, 1, 1, v26);
  v27(v16, 1, 1, v26);
  outlined init with copy of Binding<Date>((uint64_t)v25, (uint64_t)v12, &lazy cache variable for type metadata for Binding<Date>, v21);
  v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of Binding<Date>((uint64_t)v20, (uint64_t)&v12[v9[9]], (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  outlined init with copy of Binding<Date>((uint64_t)v16, (uint64_t)&v12[v9[10]], (unint64_t *)&lazy cache variable for type metadata for Date?, v28);
  *(_QWORD *)&v12[v9[11]] = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = Text.init(_:tableName:bundle:comment:)();
  v31 = v30;
  v33 = v32;
  v35 = v34;
  outlined destroy of Date?((uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for Date?, v28);
  outlined destroy of Date?((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Date?, v28);
  v36 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  outlined destroy of Date?((uint64_t)v25, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v37 = &v12[v9[12]];
  *(_QWORD *)v37 = v29;
  *((_QWORD *)v37 + 1) = v31;
  v37[16] = v33 & 1;
  *((_QWORD *)v37 + 3) = v35;
  outlined init with take of DatePicker<Text>((uint64_t)v12, v43);
  outlined destroy of Date?(v39, &lazy cache variable for type metadata for Binding<Date>, v36);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized DatePicker.init(selection:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(__int128 *__return_ptr, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(__int128 *__return_ptr, uint64_t);
  uint64_t v37;
  __int128 v38;
  char v39;
  uint64_t v40;

  v35 = a4;
  v36 = a3;
  v33 = a1;
  v34 = a2;
  v37 = a5;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v32 - v9;
  v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v32 - v18;
  v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v32 - v23;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v32 - v23, &lazy cache variable for type metadata for Binding<Date>, v20);
  v25 = type metadata accessor for Date();
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v19, 1, 1, v25);
  v26(v15, 1, 1, v25);
  outlined init with copy of Binding<Date>((uint64_t)v24, (uint64_t)v10, &lazy cache variable for type metadata for Binding<Date>, v20);
  outlined init with copy of Binding<Date>((uint64_t)v19, (uint64_t)&v10[v7[9]], (unint64_t *)&lazy cache variable for type metadata for Date?, v11);
  v27 = outlined init with copy of Binding<Date>((uint64_t)v15, (uint64_t)&v10[v7[10]], (unint64_t *)&lazy cache variable for type metadata for Date?, v11);
  *(_QWORD *)&v10[v7[11]] = v34;
  v36(&v38, v27);
  outlined destroy of Date?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Date?, v11);
  outlined destroy of Date?((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Date?, v11);
  outlined destroy of Date?((uint64_t)v24, &lazy cache variable for type metadata for Binding<Date>, v20);
  v28 = &v10[v7[12]];
  v29 = v39;
  v30 = v40;
  *(_OWORD *)v28 = v38;
  v28[16] = v29;
  *((_QWORD *)v28 + 3) = v30;
  outlined init with take of DatePicker<Text>((uint64_t)v10, v37);
  return outlined destroy of Date?(v33, &lazy cache variable for type metadata for Binding<Date>, v20);
}

uint64_t DatePicker.init(selection:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a5;
  v31 = a6;
  v28 = a3;
  v29 = a4;
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v27 - v16;
  v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v27 - v21;
  v23 = *a2;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v27 - v21, &lazy cache variable for type metadata for Binding<Date>, v18);
  v24 = type metadata accessor for Date();
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v25(v17, 1, 1, v24);
  v25(v13, 1, 1, v24);
  v32 = v23;
  DatePicker.init(selection:minimumDate:maximumDate:displayedComponents:label:)((uint64_t)v22, (uint64_t)v17, (uint64_t)v13, v28, v29, v30, v31, a7);
  return outlined destroy of Date?(a1, &lazy cache variable for type metadata for Binding<Date>, v18);
}

uint64_t specialized DatePicker.init(selection:in:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  char *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v52 = a5;
  v53 = a7;
  v50 = a6;
  v48 = a3;
  v49 = a4;
  v47 = a1;
  v51 = a8;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v45 - v13;
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v45 - v21;
  v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v45 - v26;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v45 - v26, &lazy cache variable for type metadata for Binding<Date>, v23);
  v28 = type metadata accessor for Date();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v46 = a2;
  v30(v22, a2, v28);
  v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
  v31(v22, 0, 1, v28);
  type metadata accessor for ClosedRange<Date>(0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
  v30(v18, a2 + *(int *)(v32 + 36), v28);
  v31(v18, 0, 1, v28);
  outlined init with copy of Binding<Date>((uint64_t)v27, (uint64_t)v14, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v33 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of Binding<Date>((uint64_t)v22, (uint64_t)&v14[v11[9]], (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  outlined init with copy of Binding<Date>((uint64_t)v18, (uint64_t)&v14[v11[10]], (unint64_t *)&lazy cache variable for type metadata for Date?, v33);
  *(_QWORD *)&v14[v11[11]] = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = Text.init(_:tableName:bundle:comment:)();
  v36 = v35;
  LOBYTE(v31) = v37;
  v39 = v38;
  v40 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined destroy of Date?((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  outlined destroy of Date?((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for Date?, v40);
  v41 = (uint64_t)v27;
  v42 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  outlined destroy of Date?(v41, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v43 = &v14[v11[12]];
  *(_QWORD *)v43 = v34;
  *((_QWORD *)v43 + 1) = v36;
  v43[16] = v31 & 1;
  *((_QWORD *)v43 + 3) = v39;
  outlined init with take of DatePicker<Text>((uint64_t)v14, v51);
  outlined destroy of ClosedRange<Date>(v46, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
  outlined destroy of Date?(v47, &lazy cache variable for type metadata for Binding<Date>, v42);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v8;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  char *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a5;
  v50 = a7;
  v47 = a6;
  v45 = a3;
  v46 = a4;
  v8 = a2;
  v43 = a2;
  v44 = a1;
  v48 = a8;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v42 - v13;
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v42 - v21;
  v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v42 - v26;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v42 - v26, &lazy cache variable for type metadata for Binding<Date>, v23);
  v28 = type metadata accessor for Date();
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v22, v8, v28);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  v30(v22, 0, 1, v28);
  v30(v18, 1, 1, v28);
  outlined init with copy of Binding<Date>((uint64_t)v27, (uint64_t)v14, &lazy cache variable for type metadata for Binding<Date>, v23);
  v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of Binding<Date>((uint64_t)v22, (uint64_t)&v14[v11[9]], (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  outlined init with copy of Binding<Date>((uint64_t)v18, (uint64_t)&v14[v11[10]], (unint64_t *)&lazy cache variable for type metadata for Date?, v31);
  *(_QWORD *)&v14[v11[11]] = v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = Text.init(_:tableName:bundle:comment:)();
  v34 = v33;
  LOBYTE(v8) = v35;
  v37 = v36;
  outlined destroy of Date?((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Date?, v31);
  outlined destroy of Date?((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for Date?, v31);
  v38 = (uint64_t)v27;
  v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  outlined destroy of Date?(v38, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v40 = &v14[v11[12]];
  *(_QWORD *)v40 = v32;
  *((_QWORD *)v40 + 1) = v34;
  v40[16] = v8 & 1;
  *((_QWORD *)v40 + 3) = v37;
  outlined init with take of DatePicker<Text>((uint64_t)v14, v48);
  outlined destroy of ClosedRange<Date>(v43, &lazy cache variable for type metadata for PartialRangeFrom<Date>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC910]);
  outlined destroy of Date?(v44, &lazy cache variable for type metadata for Binding<Date>, v39);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  char *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a5;
  v50 = a7;
  v47 = a6;
  v45 = a3;
  v46 = a4;
  v43 = a2;
  v44 = a1;
  v48 = a8;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v42 - v13;
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v42 - v21;
  v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v42 - v26;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v42 - v26, &lazy cache variable for type metadata for Binding<Date>, v23);
  v28 = type metadata accessor for Date();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  v30(v22, 1, 1, v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v18, a2, v28);
  v30(v18, 0, 1, v28);
  outlined init with copy of Binding<Date>((uint64_t)v27, (uint64_t)v14, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of Binding<Date>((uint64_t)v22, (uint64_t)&v14[v11[9]], (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  outlined init with copy of Binding<Date>((uint64_t)v18, (uint64_t)&v14[v11[10]], (unint64_t *)&lazy cache variable for type metadata for Date?, v31);
  *(_QWORD *)&v14[v11[11]] = v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = Text.init(_:tableName:bundle:comment:)();
  v34 = v33;
  v36 = v35;
  v38 = v37;
  outlined destroy of Date?((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Date?, v31);
  outlined destroy of Date?((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for Date?, v31);
  v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  outlined destroy of Date?((uint64_t)v27, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v40 = &v14[v11[12]];
  *(_QWORD *)v40 = v32;
  *((_QWORD *)v40 + 1) = v34;
  v40[16] = v36 & 1;
  *((_QWORD *)v40 + 3) = v38;
  outlined init with take of DatePicker<Text>((uint64_t)v14, v48);
  outlined destroy of ClosedRange<Date>(v43, &lazy cache variable for type metadata for PartialRangeThrough<Date>, MEMORY[0x1E0DECD78]);
  outlined destroy of Date?(v44, &lazy cache variable for type metadata for Binding<Date>, v39);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized DatePicker.init(selection:in:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(__int128 *__return_ptr, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(__int128 *__return_ptr, uint64_t);
  uint64_t v42;
  __int128 v43;
  char v44;
  uint64_t v45;

  v40 = a5;
  v41 = a4;
  v38 = a1;
  v39 = a3;
  v42 = a6;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v37 - v11;
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v37 - v19;
  v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v37 - v24;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v37 - v24, &lazy cache variable for type metadata for Binding<Date>, v21);
  v26 = type metadata accessor for Date();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v37 = a2;
  v28(v20, a2, v26);
  v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
  v29(v20, 0, 1, v26);
  type metadata accessor for ClosedRange<Date>(0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
  v28(v16, a2 + *(int *)(v30 + 36), v26);
  v29(v16, 0, 1, v26);
  outlined init with copy of Binding<Date>((uint64_t)v25, (uint64_t)v12, &lazy cache variable for type metadata for Binding<Date>, v21);
  v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of Binding<Date>((uint64_t)v20, (uint64_t)&v12[v9[9]], (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v32 = outlined init with copy of Binding<Date>((uint64_t)v16, (uint64_t)&v12[v9[10]], (unint64_t *)&lazy cache variable for type metadata for Date?, v31);
  *(_QWORD *)&v12[v9[11]] = v39;
  v41(&v43, v32);
  outlined destroy of Date?((uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for Date?, v31);
  outlined destroy of Date?((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Date?, v31);
  outlined destroy of Date?((uint64_t)v25, &lazy cache variable for type metadata for Binding<Date>, v21);
  v33 = &v12[v9[12]];
  v34 = v44;
  v35 = v45;
  *(_OWORD *)v33 = v43;
  v33[16] = v34;
  *((_QWORD *)v33 + 3) = v35;
  outlined init with take of DatePicker<Text>((uint64_t)v12, v42);
  outlined destroy of ClosedRange<Date>(v37, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
  return outlined destroy of Date?(v38, &lazy cache variable for type metadata for Binding<Date>, v21);
}

{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(__int128 *__return_ptr, uint64_t);
  uint64_t v41;
  __int128 v42;
  char v43;
  uint64_t v44;

  v39 = a5;
  v40 = a4;
  v37 = a1;
  v38 = a3;
  v41 = a6;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v36 - v11;
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v36 - v19;
  v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v36 - v24;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v36 - v24, &lazy cache variable for type metadata for Binding<Date>, v21);
  v26 = type metadata accessor for Date();
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v20, a2, v26);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  v28(v20, 0, 1, v26);
  v28(v16, 1, 1, v26);
  v29 = v21;
  outlined init with copy of Binding<Date>((uint64_t)v25, (uint64_t)v12, &lazy cache variable for type metadata for Binding<Date>, v21);
  v30 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  outlined init with copy of Binding<Date>((uint64_t)v20, (uint64_t)&v12[v9[9]], (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v31 = outlined init with copy of Binding<Date>((uint64_t)v16, (uint64_t)&v12[v9[10]], (unint64_t *)&lazy cache variable for type metadata for Date?, v30);
  *(_QWORD *)&v12[v9[11]] = v38;
  v40(&v42, v31);
  outlined destroy of Date?((uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for Date?, v30);
  outlined destroy of Date?((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Date?, v30);
  outlined destroy of Date?((uint64_t)v25, &lazy cache variable for type metadata for Binding<Date>, v29);
  v32 = &v12[v9[12]];
  v33 = v43;
  v34 = v44;
  *(_OWORD *)v32 = v42;
  v32[16] = v33;
  *((_QWORD *)v32 + 3) = v34;
  outlined init with take of DatePicker<Text>((uint64_t)v12, v41);
  outlined destroy of ClosedRange<Date>(a2, &lazy cache variable for type metadata for PartialRangeFrom<Date>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC910]);
  return outlined destroy of Date?(v37, &lazy cache variable for type metadata for Binding<Date>, v29);
}

{
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(__int128 *__return_ptr, uint64_t);
  uint64_t v43;
  __int128 v44;
  char v45;
  uint64_t v46;

  v41 = a5;
  v42 = a4;
  v39 = a1;
  v40 = a3;
  v38 = a2;
  v43 = a6;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v38 - v10;
  v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v38 - v19;
  v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v38 - v24;
  v26 = v21;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v38 - v24, &lazy cache variable for type metadata for Binding<Date>, v21);
  v27 = type metadata accessor for Date();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
  v29(v20, 1, 1, v27);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v31 = v38;
  v30(v16, v38, v27);
  v29(v16, 0, 1, v27);
  outlined init with copy of Binding<Date>((uint64_t)v25, (uint64_t)v11, &lazy cache variable for type metadata for Binding<Date>, v26);
  outlined init with copy of Binding<Date>((uint64_t)v20, (uint64_t)&v11[v8[9]], (unint64_t *)&lazy cache variable for type metadata for Date?, v12);
  v32 = outlined init with copy of Binding<Date>((uint64_t)v16, (uint64_t)&v11[v8[10]], (unint64_t *)&lazy cache variable for type metadata for Date?, v12);
  *(_QWORD *)&v11[v8[11]] = v40;
  v42(&v44, v32);
  outlined destroy of Date?((uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for Date?, v12);
  outlined destroy of Date?((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Date?, v12);
  v33 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  outlined destroy of Date?((uint64_t)v25, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v34 = &v11[v8[12]];
  v35 = v45;
  v36 = v46;
  *(_OWORD *)v34 = v44;
  v34[16] = v35;
  *((_QWORD *)v34 + 3) = v36;
  outlined init with take of DatePicker<Text>((uint64_t)v11, v43);
  outlined destroy of ClosedRange<Date>(v31, &lazy cache variable for type metadata for PartialRangeThrough<Date>, MEMORY[0x1E0DECD78]);
  return outlined destroy of Date?(v39, &lazy cache variable for type metadata for Binding<Date>, v33);
}

uint64_t DatePicker.init(selection:in:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a6;
  v38 = a7;
  v35 = a4;
  v36 = a5;
  v33 = a1;
  v34 = a8;
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v32 - v17;
  v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v32 - v22;
  v24 = *a3;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v32 - v22, &lazy cache variable for type metadata for Binding<Date>, v19);
  v25 = type metadata accessor for Date();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v27(v18, a2, v25);
  v28 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56);
  v28(v18, 0, 1, v25);
  v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0];
  type metadata accessor for ClosedRange<Date>(0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
  v27(v14, a2 + *(int *)(v30 + 36), v25);
  v28(v14, 0, 1, v25);
  v39 = v24;
  DatePicker.init(selection:minimumDate:maximumDate:displayedComponents:label:)((uint64_t)v23, (uint64_t)v18, (uint64_t)v14, v35, v36, v37, v38, v34);
  outlined destroy of ClosedRange<Date>(a2, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, v29);
  return outlined destroy of Date?(v33, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a6;
  v33 = a7;
  v30 = a4;
  v31 = a5;
  v29 = a8;
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v29 - v17;
  v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v29 - v22;
  v24 = *a3;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v29 - v22, &lazy cache variable for type metadata for Binding<Date>, v19);
  v25 = type metadata accessor for Date();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v18, a2, v25);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  v27(v18, 0, 1, v25);
  v27(v14, 1, 1, v25);
  v34 = v24;
  DatePicker.init(selection:minimumDate:maximumDate:displayedComponents:label:)((uint64_t)v23, (uint64_t)v18, (uint64_t)v14, v30, v31, v32, v33, v29);
  outlined destroy of ClosedRange<Date>(a2, &lazy cache variable for type metadata for PartialRangeFrom<Date>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC910]);
  return outlined destroy of Date?(a1, &lazy cache variable for type metadata for Binding<Date>, v19);
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a6;
  v33 = a7;
  v30 = a4;
  v31 = a5;
  v29 = a8;
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v29 - v17;
  v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v29 - v22;
  v24 = *a3;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v29 - v22, &lazy cache variable for type metadata for Binding<Date>, v19);
  v25 = type metadata accessor for Date();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  v27(v18, 1, 1, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v14, a2, v25);
  v27(v14, 0, 1, v25);
  v34 = v24;
  DatePicker.init(selection:minimumDate:maximumDate:displayedComponents:label:)((uint64_t)v23, (uint64_t)v18, (uint64_t)v14, v30, v31, v32, v33, v29);
  outlined destroy of ClosedRange<Date>(a2, &lazy cache variable for type metadata for PartialRangeThrough<Date>, MEMORY[0x1E0DECD78]);
  return outlined destroy of Date?(a1, &lazy cache variable for type metadata for Binding<Date>, v19);
}

uint64_t DatePicker<>.init(_:selection:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;

  v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v21 - v17;
  v19 = *a6;
  outlined init with copy of Binding<Date>(a5, (uint64_t)&v21 - v17, &lazy cache variable for type metadata for Binding<Date>, v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized DatePicker.init(selection:displayedComponents:label:)((uint64_t)v18, v19, a1, a2, a3, a4, a7);
  outlined destroy of Date?(a5, &lazy cache variable for type metadata for Binding<Date>, v14);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t DatePicker<>.init(_:selection:in:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  return DatePicker<>.init(_:selection:in:displayedComponents:)(a1, a2, a3, a4, a5, a6, a7, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0], (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))specialized DatePicker.init(selection:in:displayedComponents:label:));
}

{
  return DatePicker<>.init(_:selection:in:displayedComponents:)(a1, a2, a3, a4, a5, a6, a7, &lazy cache variable for type metadata for PartialRangeFrom<Date>, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC910], (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))specialized DatePicker.init(selection:in:displayedComponents:label:));
}

{
  return DatePicker<>.init(_:selection:in:displayedComponents:)(a1, a2, a3, a4, a5, a6, a7, &lazy cache variable for type metadata for PartialRangeThrough<Date>, a8, MEMORY[0x1E0DECD78], (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))specialized DatePicker.init(selection:in:displayedComponents:label:));
}

uint64_t DatePicker<>.init(_:selection:in:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, unint64_t *a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(uint64_t, uint64_t, uint64_t), void (*a11)(char *, char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  unsigned int v33;

  v29 = a6;
  v30 = a9;
  v33 = a3;
  v31 = a1;
  v32 = a11;
  type metadata accessor for ClosedRange<Date>(0, a8, a10);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v28 - v18;
  v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v28 - v23;
  v25 = *a7;
  outlined init with copy of Binding<Date>(a5, (uint64_t)&v28 - v23, &lazy cache variable for type metadata for Binding<Date>, v20);
  v26 = v29;
  outlined init with copy of PartialRangeThrough<Date>(v29, (uint64_t)v19, a8, a10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32(v24, v19, v25, v31, a2, v33, a4);
  outlined destroy of ClosedRange<Date>(v26, a8, a10);
  outlined destroy of Date?(a5, &lazy cache variable for type metadata for Binding<Date>, v20);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t DatePicker<>.init<A>(_:selection:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v19[-v15];
  v17 = *a3;
  outlined init with copy of Binding<Date>(a2, (uint64_t)&v19[-v15], &lazy cache variable for type metadata for Binding<Date>, v12);
  v20 = a4;
  v21 = a5;
  v22 = a1;
  specialized DatePicker.init(selection:displayedComponents:label:)((uint64_t)v16, v17, (void (*)(__int128 *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:onEditingChanged:onCommit:), (uint64_t)v19, a6);
  outlined destroy of Date?(a2, &lazy cache variable for type metadata for Binding<Date>, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

uint64_t DatePicker<>.init<A>(_:selection:in:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return DatePicker<>.init<A>(_:selection:in:displayedComponents:)(a1, a2, a3, a4, a5, a6, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0], a7, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:), (void (*)(char *, char *, uint64_t, uint64_t, _BYTE *))specialized DatePicker.init(selection:in:displayedComponents:label:));
}

{
  return DatePicker<>.init<A>(_:selection:in:displayedComponents:)(a1, a2, a3, a4, a5, a6, &lazy cache variable for type metadata for PartialRangeFrom<Date>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC910], a7, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:), (void (*)(char *, char *, uint64_t, uint64_t, _BYTE *))specialized DatePicker.init(selection:in:displayedComponents:label:));
}

{
  return DatePicker<>.init<A>(_:selection:in:displayedComponents:)(a1, a2, a3, a4, a5, a6, &lazy cache variable for type metadata for PartialRangeThrough<Date>, MEMORY[0x1E0DECD78], a7, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:), (void (*)(char *, char *, uint64_t, uint64_t, _BYTE *))specialized DatePicker.init(selection:in:displayedComponents:label:));
}

uint64_t DatePicker<>.init<A>(_:selection:in:displayedComponents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, uint64_t (*a8)(uint64_t, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>, uint64_t a10, void (*a11)(char *, char *, uint64_t, uint64_t, _BYTE *))
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t, uint64_t, _BYTE *);
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v30 = a1;
  v31 = a6;
  v32 = a9;
  v33 = a11;
  v34 = a10;
  type metadata accessor for ClosedRange<Date>(0, a7, a8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v29 - v19;
  v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for Binding<Date>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v29 - v24;
  v26 = *a4;
  outlined init with copy of Binding<Date>(a2, (uint64_t)&v29 - v24, &lazy cache variable for type metadata for Binding<Date>, v21);
  outlined init with copy of PartialRangeThrough<Date>(a3, (uint64_t)v20, a7, a8);
  v27 = v30;
  v36 = a5;
  v37 = v31;
  v38 = v30;
  v33(v25, v20, v26, v34, v35);
  outlined destroy of ClosedRange<Date>(a3, a7, a8);
  outlined destroy of Date?(a2, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(v27, a5);
}

uint64_t DatePickerComponents.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

SwiftUI::DatePickerComponents __swiftcall DatePickerComponents.init(rawValue:)(SwiftUI::DatePickerComponents rawValue)
{
  SwiftUI::DatePickerComponents *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void one-time initialization function for hourAndMinute()
{
  static DatePickerComponents.hourAndMinute = 96;
}

void one-time initialization function for date()
{
  static DatePickerComponents.date = 28;
}

uint64_t outlined destroy of Date?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;

  type metadata accessor for Binding<Date>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for ClosedRange<Date>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for Date();
    v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t outlined destroy of ClosedRange<Date>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  type metadata accessor for ClosedRange<Date>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of PartialRangeThrough<Date>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  type metadata accessor for ClosedRange<Date>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void static DatePickerComponents.hourMinuteAndSecond.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for View.Body : View in DatePicker<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type DatePickerComponents and conformance DatePickerComponents()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents;
  if (!lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DatePickerComponents, &type metadata for DatePickerComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents;
  if (!lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DatePickerComponents, &type metadata for DatePickerComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents;
  if (!lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DatePickerComponents, &type metadata for DatePickerComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents;
  if (!lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DatePickerComponents, &type metadata for DatePickerComponents);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePickerComponents and conformance DatePickerComponents);
  }
  return result;
}

void type metadata completion function for DatePicker()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Binding<Date>(319, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<Date>(319, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
    {
      swift_checkMetadataState();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for DatePicker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  const void *v30;
  unsigned int (*v31)(const void *, uint64_t, uint64_t);
  size_t v32;
  void (*v33)(void *, const void *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v41;
  void (*v42)(void *, const void *, uint64_t);
  size_t v43;
  size_t __n;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = ((v8 + 16) & ~v8) + v9 + v8;
  if (*(_DWORD *)(v7 + 84))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = v9 + 1;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = ((v14 + 8 + ((v11 + 7 + ((v11 + v8 + (v10 & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8)) & ~v14)
      + *(_QWORD *)(v13 + 64);
  v16 = (*(_DWORD *)(v13 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000;
  v17 = *a2;
  *a1 = *a2;
  if ((v14 | v8) > 7 || v16 != 0 || v15 > 0x18)
  {
    v28 = (uint64_t *)(v17 + (((v14 | v8) & 0xF8 ^ 0x1F8) & ((v14 | v8) + 16)));
    swift_retain();
  }
  else
  {
    v43 = v11 + v8;
    __n = v11;
    v45 = v14 + 8;
    v46 = v11 + 7;
    v47 = v13;
    v48 = v12;
    v20 = ~v8;
    v21 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v22;
    v23 = ((unint64_t)v21 + v8 + 8) & ~v8;
    v41 = a1;
    v24 = ((unint64_t)v22 + v8 + 8) & ~v8;
    v25 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    swift_retain();
    swift_retain();
    v26 = v24;
    v27 = v6;
    v42 = v25;
    v25(v23, v26, v6);
    v28 = v41;
    v29 = ((unint64_t)v41 + v10) & v20;
    v30 = (const void *)(((unint64_t)a2 + v10) & v20);
    v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
    if (v31(v30, 1, v6))
    {
      v32 = __n;
      memcpy((void *)(((unint64_t)v41 + v10) & v20), v30, __n);
      v33 = (void (*)(void *, const void *, uint64_t))v42;
    }
    else
    {
      v34 = ((unint64_t)v41 + v10) & v20;
      v33 = (void (*)(void *, const void *, uint64_t))v42;
      v42(v34, v30, v6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v29, 0, 1, v6);
      v32 = __n;
    }
    v35 = ~v14;
    v36 = (void *)((v43 + v29) & v20);
    v37 = (const void *)(((unint64_t)v30 + v43) & v20);
    if (v31(v37, 1, v27))
    {
      memcpy(v36, v37, v32);
    }
    else
    {
      v33(v36, v37, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v36, 0, 1, v27);
    }
    v38 = (_QWORD *)(((unint64_t)v36 + v46) & 0xFFFFFFFFFFFFFFF8);
    v39 = (_QWORD *)(((unint64_t)v37 + v46) & 0xFFFFFFFFFFFFFFF8);
    *v38 = *v39;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v47 + 16))(((unint64_t)v38 + v45) & v35, ((unint64_t)v39 + v45) & v35, v48);
  }
  return v28;
}

uint64_t destroy for DatePicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v4 = a1 + 15;
  swift_release();
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v9, v6);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = v8 + a1 + v11 + ((v8 + 16) & ~v8);
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v13(v12 & ~v8, 1, v6))
    v10(v12 & ~v8, v6);
  if (*(_DWORD *)(v7 + 84))
    v14 = v11;
  else
    v14 = v11 + 1;
  v15 = ((v12 | v8) + v14) & ~v8;
  if (!v13(v15, 1, v6))
    v10(v15, v6);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((v14 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for DatePicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, unint64_t, uint64_t);
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  int v18;
  size_t v19;
  size_t v20;
  void *v21;
  const void *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v27)(void *, const void *, uint64_t);
  uint64_t v28;
  _QWORD *v30;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v28 = ~v9;
  v10 = ((unint64_t)v5 + v9 + 8) & ~v9;
  v11 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v11(v10, ((unint64_t)v6 + v9 + 8) & ~v9, v7);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = ((v9 + 16) & ~v9) + v12 + v9;
  v30 = a1;
  v14 = (unint64_t)a1 + v13;
  v15 = (unint64_t)a2 + v13;
  v16 = (const void *)(((unint64_t)a2 + v13) & ~v9);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  v27 = (void (*)(void *, const void *, uint64_t))v11;
  if (v17(v16, 1, v7))
  {
    v18 = *(_DWORD *)(v8 + 84);
    if (v18)
      v19 = v12;
    else
      v19 = v12 + 1;
    memcpy((void *)(v14 & ~v9), v16, v19);
  }
  else
  {
    v11(v14 & ~v9, (unint64_t)v16, v7);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v14 & ~v9, 0, 1, v7);
    v18 = *(_DWORD *)(v8 + 84);
  }
  if (v18)
    v20 = v12;
  else
    v20 = v12 + 1;
  v21 = (void *)(((v14 | v9) + v20) & v28);
  v22 = (const void *)(((v15 | v9) + v20) & v28);
  if (v17(v22, 1, v7))
  {
    memcpy(v21, v22, v20);
  }
  else
  {
    v27(v21, v22, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  v23 = (_QWORD *)(((unint64_t)v21 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v22 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v25 + 16))(((unint64_t)v23 + *(unsigned __int8 *)(v25 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80), ((unint64_t)v24 + *(unsigned __int8 *)(v25 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
  return v30;
}

_QWORD *assignWithCopy for DatePicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  size_t v19;
  size_t v20;
  void *v21;
  void *v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v29)(unint64_t, unint64_t, uint64_t);
  uint64_t v30;
  _QWORD *v32;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *v6 = *(_QWORD *)v5;
  swift_retain();
  swift_release();
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24);
  v30 = ~v9;
  v29(((unint64_t)v6 + v9 + 8) & ~v9, (v9 + 8 + v5) & ~v9, v7);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = ((v9 + 16) & ~v9) + v10 + v9;
  v32 = a1;
  v12 = (unint64_t)a1 + v11;
  v13 = (void *)(((unint64_t)a1 + v11) & ~v9);
  v14 = (unint64_t)a2 + v11;
  v15 = (void *)(((unint64_t)a2 + v11) & ~v9);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v17 = v16(v13, 1, v7);
  v18 = v16(v15, 1, v7);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v13, v15, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v18)
    {
      v29((unint64_t)v13, (unint64_t)v15, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v13, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v19 = v10;
  else
    v19 = v10 + 1;
  memcpy(v13, v15, v19);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v20 = v10;
  else
    v20 = v10 + 1;
  v21 = (void *)(((v12 | v9) + v20) & v30);
  v22 = (void *)(((v14 | v9) + v20) & v30);
  v23 = v16(v21, 1, v7);
  v24 = v16(v22, 1, v7);
  if (!v23)
  {
    if (!v24)
    {
      v29((unint64_t)v21, (unint64_t)v22, v7);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v21, v7);
    goto LABEL_18;
  }
  if (v24)
  {
LABEL_18:
    memcpy(v21, v22, v20);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v21, v22, v7);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
LABEL_19:
  v25 = (_QWORD *)(((unint64_t)v21 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)v22 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 24))(((unint64_t)v25 + *(unsigned __int8 *)(v27 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), ((unint64_t)v26 + *(unsigned __int8 *)(v27 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return v32;
}

_QWORD *initializeWithTake for DatePicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, unint64_t, uint64_t);
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  const void *v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  int v18;
  size_t v19;
  size_t v20;
  void *v21;
  const void *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v27)(void *, const void *, uint64_t);
  uint64_t v28;
  _QWORD *v30;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v28 = ~v9;
  v10 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32);
  v10(((unint64_t)v5 + v9 + 8) & ~v9, ((unint64_t)v6 + v9 + 8) & ~v9, v7);
  v11 = *(_QWORD *)(v8 + 64);
  v12 = ((v9 + 16) & ~v9) + v11 + v9;
  v30 = a1;
  v13 = (unint64_t)a1 + v12;
  v14 = (void *)(((unint64_t)a1 + v12) & ~v9);
  v15 = (unint64_t)a2 + v12;
  v16 = (const void *)(((unint64_t)a2 + v12) & ~v9);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  v27 = (void (*)(void *, const void *, uint64_t))v10;
  if (v17(v16, 1, v7))
  {
    v18 = *(_DWORD *)(v8 + 84);
    if (v18)
      v19 = v11;
    else
      v19 = v11 + 1;
    memcpy(v14, v16, v19);
  }
  else
  {
    v10((unint64_t)v14, (unint64_t)v16, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v14, 0, 1, v7);
    v18 = *(_DWORD *)(v8 + 84);
  }
  if (v18)
    v20 = v11;
  else
    v20 = v11 + 1;
  v21 = (void *)(((v13 | v9) + v20) & v28);
  v22 = (const void *)(((v15 | v9) + v20) & v28);
  if (v17(v22, 1, v7))
  {
    memcpy(v21, v22, v20);
  }
  else
  {
    v27(v21, v22, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
  }
  v23 = (_QWORD *)(((unint64_t)v21 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v22 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v25 + 32))(((unint64_t)v23 + *(unsigned __int8 *)(v25 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80), ((unint64_t)v24 + *(unsigned __int8 *)(v25 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
  return v30;
}

_QWORD *assignWithTake for DatePicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  size_t v19;
  size_t v20;
  void *v21;
  void *v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v29)(unint64_t, unint64_t, uint64_t);
  uint64_t v30;
  _QWORD *v32;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *v6 = *(_QWORD *)v5;
  swift_release();
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40);
  v30 = ~v9;
  v29(((unint64_t)v6 + v9 + 8) & ~v9, (v9 + 8 + v5) & ~v9, v7);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = ((v9 + 16) & ~v9) + v10 + v9;
  v32 = a1;
  v12 = (unint64_t)a1 + v11;
  v13 = (void *)(((unint64_t)a1 + v11) & ~v9);
  v14 = (unint64_t)a2 + v11;
  v15 = (void *)(((unint64_t)a2 + v11) & ~v9);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v17 = v16(v13, 1, v7);
  v18 = v16(v15, 1, v7);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v13, v15, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v18)
    {
      v29((unint64_t)v13, (unint64_t)v15, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v13, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v19 = v10;
  else
    v19 = v10 + 1;
  memcpy(v13, v15, v19);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v20 = v10;
  else
    v20 = v10 + 1;
  v21 = (void *)(((v12 | v9) + v20) & v30);
  v22 = (void *)(((v14 | v9) + v20) & v30);
  v23 = v16(v21, 1, v7);
  v24 = v16(v22, 1, v7);
  if (!v23)
  {
    if (!v24)
    {
      v29((unint64_t)v21, (unint64_t)v22, v7);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v21, v7);
    goto LABEL_18;
  }
  if (v24)
  {
LABEL_18:
    memcpy(v21, v22, v20);
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v21, v22, v7);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v21, 0, 1, v7);
LABEL_19:
  v25 = (_QWORD *)(((unint64_t)v21 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)v22 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v27 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 40))(((unint64_t)v25 + *(unsigned __int8 *)(v27 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), ((unint64_t)v26 + *(unsigned __int8 *)(v27 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return v32;
}

uint64_t getEnumTagSinglePayload for DatePicker(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(unint64_t, uint64_t, uint64_t);
  unsigned int v35;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v7 + 84);
  if ((_DWORD)v8)
    v10 = v8 - 1;
  else
    v10 = 0;
  if (v10 <= v9)
    v11 = v9;
  else
    v11 = v10;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v13 + 84) > v11)
    v11 = *(_DWORD *)(v13 + 84);
  v14 = *(_QWORD *)(v7 + 64);
  if ((_DWORD)v8)
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = v14 + 1;
  if (!a2)
    return 0;
  v16 = v6;
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = ((v17 + 16) & ~v17) + v14 + v17;
  v19 = v15 + v17;
  v20 = v15 + 7;
  v21 = *(unsigned __int8 *)(v13 + 80);
  v22 = v21 + 8;
  if (a2 <= v11)
    goto LABEL_34;
  v23 = ((v22 + ((v20 + ((v19 + (v18 & ~v17)) & ~v17)) & 0xFFFFFFFFFFFFFFF8)) & ~v21) + *(_QWORD *)(v13 + 64);
  v24 = 8 * v23;
  if (v23 > 3)
    goto LABEL_18;
  v26 = ((a2 - v11 + ~(-1 << v24)) >> v24) + 1;
  if (HIWORD(v26))
  {
    v25 = *(_DWORD *)(a1 + v23);
    if (v25)
      goto LABEL_25;
LABEL_34:
    v29 = ~v17;
    if (v9 == v11)
    {
      v30 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v8 & 0x80000000) == 0)
      {
        v31 = *v30;
        if ((unint64_t)*v30 >= 0xFFFFFFFF)
          LODWORD(v31) = -1;
        return (v31 + 1);
      }
      v33 = ((unint64_t)v30 + v17 + 8) & v29;
      v34 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
      v12 = v16;
      return v34(v33, v8, v12);
    }
    v32 = (v18 + a1) & v29;
    if (v10 != v11)
    {
      v33 = (v22 + ((v20 + ((v19 + v32) & v29)) & 0xFFFFFFFFFFFFFFF8)) & ~v21;
      v34 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48);
      v8 = *(unsigned int *)(v13 + 84);
      return v34(v33, v8, v12);
    }
    if (v8 >= 2)
    {
      v35 = (*(uint64_t (**)(uint64_t))(v7 + 48))(v32);
      if (v35 >= 2)
        return v35 - 1;
      else
        return 0;
    }
    return 0;
  }
  if (v26 > 0xFF)
  {
    v25 = *(unsigned __int16 *)(a1 + v23);
    if (*(_WORD *)(a1 + v23))
      goto LABEL_25;
    goto LABEL_34;
  }
  if (v26 < 2)
    goto LABEL_34;
LABEL_18:
  v25 = *(unsigned __int8 *)(a1 + v23);
  if (!*(_BYTE *)(a1 + v23))
    goto LABEL_34;
LABEL_25:
  v27 = (v25 - 1) << v24;
  if (v23 > 3)
    v27 = 0;
  if ((_DWORD)v23)
  {
    if (v23 <= 3)
      v28 = ((v22 + ((v20 + ((v19 + (v18 & ~(_DWORD)v17)) & ~(_DWORD)v17)) & 0xFFFFFFF8)) & ~(_DWORD)v21)
          + *(_DWORD *)(v13 + 64);
    else
      v28 = 4;
    __asm { BR              X12 }
  }
  return v11 + v27 + 1;
}

void storeEnumTagSinglePayload for DatePicker(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;

  v8 = 0u;
  v9 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v10)
    v12 = v10 - 1;
  else
    v12 = 0;
  if (v12 <= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v14 + 84) > v13)
    v13 = *(_DWORD *)(v14 + 84);
  v15 = *(unsigned __int8 *)(v9 + 80);
  v16 = *(_QWORD *)(v9 + 64);
  v17 = ((v15 + 16) & ~v15) + v16 + v15;
  if (!v10)
    ++v16;
  v18 = ((*(unsigned __int8 *)(v14 + 80) + 8 + ((v16 + 7 + ((v16 + v15 + (v17 & ~v15)) & ~v15)) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
      + *(_QWORD *)(v14 + 64);
  if (a3 > v13)
  {
    if (v18 > 3)
    {
      v8 = 1u;
      if (v13 >= a2)
LABEL_30:
        __asm { BR              X22 }
LABEL_23:
      v20 = ~v13 + a2;
      if (v18 < 4)
      {
        if ((_DWORD)v18)
        {
          v21 = v20 & ~(-1 << (8 * v18));
          bzero(a1, v18);
          if ((_DWORD)v18 == 3)
          {
            *(_WORD *)a1 = v21;
            a1[2] = BYTE2(v21);
          }
          else if ((_DWORD)v18 == 2)
          {
            *(_WORD *)a1 = v21;
          }
          else
          {
            *a1 = v21;
          }
        }
      }
      else
      {
        bzero(a1, v18);
        *(_DWORD *)a1 = v20;
      }
      __asm { BR              X10 }
    }
    v19 = ((a3 - v13 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
    if (HIWORD(v19))
    {
      v8 = 4u;
      if (v13 >= a2)
        goto LABEL_30;
      goto LABEL_23;
    }
    if (v19 >= 0x100)
      v8 = 2;
    else
      v8 = v19 > 1;
  }
  if (v13 >= a2)
    goto LABEL_30;
  goto LABEL_23;
}

void sub_1879A80D4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1879A80F4);
}

void sub_1879A80DC()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1879A80F4);
}

void sub_1879A80E4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1879A80F4);
}

ValueMetadata *type metadata accessor for DatePickerComponents()
{
  return &type metadata for DatePickerComponents;
}

void sub_1879A811C()
{
  type metadata accessor for ResolvedDatePickerStyle(255);
  lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_1879A8168()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  _QWORD v3[12];

  v1 = type metadata accessor for ModifiedContent();
  v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, v0, (uint64_t)&protocol conformance descriptor for ResolvedDatePickerStyle);
  v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v3);
}

void type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for DatePicker(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t outlined init with take of DatePicker<Text>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void static TouchBarItemPresenceTraitKey.defaultValue.getter()
{
  _diagnoseUnavailableCodeReached()();
}

void View.touchBarItemPresence(_:)()
{
  _diagnoseUnavailableCodeReached()();
}

void static TouchBarItemPrincipalTraitKey.defaultValue.getter()
{
  _diagnoseUnavailableCodeReached()();
}

void View.touchBarItemPrincipal(_:)()
{
  _diagnoseUnavailableCodeReached()();
}

void static TouchBarCustomizationLabelTraitKey.defaultValue.getter()
{
  _diagnoseUnavailableCodeReached()();
}

void View.touchBarCustomizationLabel(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for TouchBarItemPresenceTraitKey()
{
  return &type metadata for TouchBarItemPresenceTraitKey;
}

ValueMetadata *type metadata accessor for TouchBarItemPrincipalTraitKey()
{
  return &type metadata for TouchBarItemPrincipalTraitKey;
}

ValueMetadata *type metadata accessor for TouchBarCustomizationLabelTraitKey()
{
  return &type metadata for TouchBarCustomizationLabelTraitKey;
}

uint64_t sub_1879A82FC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<TouchBarItemPresenceTraitKey>, (uint64_t)&type metadata for TouchBarItemPresenceTraitKey, (uint64_t)&protocol witness table for TouchBarItemPresenceTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<TouchBarItemPresenceTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t sub_1879A8320(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<TouchBarItemPrincipalTraitKey>, (uint64_t)&type metadata for TouchBarItemPrincipalTraitKey, (uint64_t)&protocol witness table for TouchBarItemPrincipalTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<TouchBarItemPrincipalTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t sub_1879A8344(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<TouchBarCustomizationLabelTraitKey>, (uint64_t)&type metadata for TouchBarCustomizationLabelTraitKey, (uint64_t)&protocol witness table for TouchBarCustomizationLabelTraitKey, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<TouchBarCustomizationLabelTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t View.accessibilityChartDescriptor<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ChartDescriptorModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for ChartDescriptorModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChartDescriptorModifier);
}

uint64_t static ChartDescriptorModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, double *a5@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  _BYTE v32[32];
  _BYTE v33[32];
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_DWORD *)(a1 + 80);
  *(_QWORD *)&v31 = *(_QWORD *)a1;
  DWORD2(v31) = v7;
  *(_QWORD *)v32 = v8;
  *(_OWORD *)&v32[8] = *(_OWORD *)(a1 + 24);
  *(_QWORD *)&v32[24] = v9;
  *(_QWORD *)v33 = v10;
  *(_OWORD *)&v33[8] = *(_OWORD *)(a1 + 56);
  *(_QWORD *)&v33[24] = *(_QWORD *)(a1 + 72);
  v34 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static DynamicPropertyCache.fields(of:)();
  v21 = *((_QWORD *)&v35 + 1);
  v22 = v35;
  v20 = v36;
  v23 = DWORD1(v36);
  outlined copy of DynamicPropertyCache.Fields.Layout();
  v18 = a3;
  type metadata accessor for ChartDescriptorModifier(0, a3, a4, v12);
  _DynamicPropertyBuffer.init<A>(fields:container:inputs:)();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  *((_QWORD *)&v37 + 1) = v9;
  v38 = __PAIR128__(*(unint64_t *)&v33[8], v10);
  v39 = *(_OWORD *)&v33[16];
  v40 = v34;
  LODWORD(v35) = AGGraphCreateOffsetAttribute2();
  DWORD1(v35) = _ViewInputs.environment.getter();
  *((_QWORD *)&v35 + 1) = _ViewInputs.viewPhase.getter();
  v13 = v29;
  *(_QWORD *)&v36 = 0;
  *((_QWORD *)&v36 + 1) = v29;
  LODWORD(v10) = HIDWORD(v30);
  LODWORD(a3) = v30;
  *(_QWORD *)&v37 = v30;
  v27 = type metadata accessor for ChartDescriptorModifier.Child(0, v18, a4, v14);
  v28 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ChartDescriptorModifier<A>.Child, v27);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v35, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_25, (uint64_t)v26, v27, MEMORY[0x1E0DEDCE8], v15, MEMORY[0x1E0DEDD18], v16);
  swift_release();
  v29 = v13;
  v30 = __PAIR64__(v10, a3);
  *(_QWORD *)&v35 = v22;
  *((_QWORD *)&v35 + 1) = v21;
  LOBYTE(v36) = v20;
  DWORD1(v36) = v23;
  _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  outlined consume of DynamicPropertyCache.Fields.Layout();
  _GraphValue.init(_:)();
  LODWORD(v8) = v29;
  v37 = *(_OWORD *)&v32[16];
  v38 = *(_OWORD *)v33;
  v39 = *(_OWORD *)&v33[16];
  v40 = v34;
  v35 = v31;
  v36 = *(_OWORD *)v32;
  outlined retain of _ViewInputs((uint64_t)&v35);
  specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v8, (uint64_t)&v35, a2, a5);
  outlined release of _ViewInputs((uint64_t)&v35);
  return outlined release of _ViewInputs((uint64_t)&v35);
}

uint64_t ChartDescriptorModifier.Child.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  __int128 v15;
  char v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  int *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t OutputValue;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD v56[3];

  v3 = v2;
  v56[2] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v2 + 8);
  v9 = *(_DWORD *)(v2 + 12);
  v11 = *(_QWORD *)(v2 + 16);
  v12 = *(_QWORD *)(v2 + 24);
  v13 = *(_DWORD *)(v2 + 32);
  v14 = *(_DWORD *)(v2 + 36);
  *(_QWORD *)&v15 = *(_QWORD *)v2;
  v49 = v15;
  v51 = v15;
  v52 = __PAIR64__(v9, v10);
  v47 = v12;
  v48 = v11;
  v53 = v11;
  v54 = v12;
  v45 = v14;
  v46 = v13;
  v55 = __PAIR64__(v14, v13);
  WindowSceneList.MakeList.environment.getter(v56);
  v51 = v56[0];
  v52 = v56[1];
  v16 = EnvironmentValues.accessibilityEnabled.getter();
  swift_release();
  swift_release();
  if ((v16 & 1) == 0)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v56[0] = Dictionary.init(minimumCapacity:)();
    AccessibilityAttachment.init(properties:)();
    v30 = v51;
    v31 = v52;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = v30;
    *(_QWORD *)(v32 + 24) = v31;
    v51 = v32;
    v52 = 0;
    AGGraphSetOutputValue();
    return swift_release();
  }
  Value = AGGraphGetValue();
  v44 = v18;
  *(_QWORD *)&v49 = v6;
  v19 = v5;
  v20 = v5;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v21(v8, Value, v20);
  v22 = (int *)AGGraphGetValue();
  v43 = v23;
  v24 = *v22;
  v25 = *v22 >> 1;
  if (v25 != v9)
  {
    v51 = v47;
    v52 = __PAIR64__(v45, v46);
    _DynamicPropertyBuffer.reset()();
    if (v48)
    {
      swift_retain();
      RepresentableChartDescriptorStorage.reset()();
      v22 = (int *)swift_release();
    }
    *(_DWORD *)(v3 + 12) = v25;
  }
  MEMORY[0x1E0C80A78](v22, v23);
  v26 = *(_QWORD *)(a1 + 24);
  *(&v42 - 4) = v19;
  *(&v42 - 3) = v26;
  *(&v42 - 2) = v3;
  *((_DWORD *)&v42 - 2) = v24;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)partial apply for closure #1 in ChartDescriptorModifier.Child.updateValue(), (uint64_t)(&v42 - 6), v19, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v27);
  if ((v50 & 1) != 0)
  {
    v28 = 1;
    v29 = v49;
  }
  else
  {
    OutputValue = AGGraphGetOutputValue();
    v28 = 1;
    v29 = v49;
    if (OutputValue)
    {
      if ((v44 & 1) == 0)
        v28 = v43 & 1;
    }
  }
  v50 = v28;
  if (*(_QWORD *)(v3 + 16))
  {
    if (v28)
    {
      v54 = v19;
      v55 = v26;
      v35 = __swift_allocate_boxed_opaque_existential_1(&v51);
      v21((char *)v35, (uint64_t)v8, v19);
      swift_retain();
      RepresentableChartDescriptorStorage.markNeedsUpdate(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v19);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
    }
  }
  else
  {
    type metadata accessor for RepresentableChartDescriptorStorage();
    v54 = v19;
    v55 = v26;
    v36 = __swift_allocate_boxed_opaque_existential_1(&v51);
    v21((char *)v36, (uint64_t)v8, v19);
    v37 = RepresentableChartDescriptorStorage.__allocating_init(_:)();
    *(_QWORD *)(v3 + 16) = v37;
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    swift_retain_n();
    v56[0] = Dictionary.init(minimumCapacity:)();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityChartDescriptorStorage?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    v54 = v38;
    v55 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?> and conformance AccessibilityPropertiesEntry<A>();
    v51 = v37;
    specialized Dictionary.subscript.setter((uint64_t)&v51, MEMORY[0x1E0CE5790]);
    AccessibilityAttachment.init(properties:)();
    v39 = v51;
    v40 = v52;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = v39;
    *(_QWORD *)(v41 + 24) = v40;
    v51 = v41;
    v52 = 0;
    AGGraphSetOutputValue();
    swift_release();
    swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v8, v19);
}

void ChartDescriptorModifier.Child.destroy()()
{
  uint64_t v0;

  _DynamicPropertyBuffer.destroy()();
  if (*(_QWORD *)(v0 + 16))
  {
    RepresentableChartDescriptorStorage.reset()();
    swift_release();
  }
  *(_QWORD *)(v0 + 16) = 0;
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance ChartDescriptorModifier<A>.Child()
{
  ChartDescriptorModifier.Child.destroy()();
}

uint64_t ChartDescriptorModifier.description.getter()
{
  Swift::String v0;

  _StringGuts.grow(_:)(53);
  v0._object = (void *)0x8000000187BECA80;
  v0._countAndFlagsBits = 0xD000000000000033;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  return 0;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ChartDescriptorModifier<A>@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, uint64_t a3@<X4>, double *a4@<X8>)
{
  return static ChartDescriptorModifier._makeView(modifier:inputs:body:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ChartDescriptorModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ChartDescriptorModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t AccessibilityNode.accessibilityChartDescriptor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[2];

  AccessibilityNode.attachment.getter(v4);

  v0 = swift_bridgeObjectRetain();
  v1 = specialized AccessibilityProperties.subscript.getter(v0);
  swift_bridgeObjectRelease_n();
  if (!v1)
    return 0;
  v2 = dispatch thunk of AccessibilityChartDescriptorStorage.resolve()();
  swift_release();
  return v2;
}

uint64_t sub_1879A8F5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for ChartDescriptorModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for ChartDescriptorModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t getEnumTagSinglePayload for ChartDescriptorModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879A906C + 4 * byte_187C760D0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ChartDescriptorModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in ChartDescriptorModifier<A>()
{
  return &protocol witness table for ChartDescriptorModifier<A>;
}

uint64_t type metadata accessor for ChartDescriptorModifier.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ChartDescriptorModifier.Child);
}

uint64_t initializeWithCopy for ChartDescriptorModifier.Child(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ChartDescriptorModifier.Child(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t assignWithTake for ChartDescriptorModifier.Child(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

void base witness table accessor for _AttributeBody in ChartDescriptorModifier<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in ChartDescriptorModifier.Child.updateValue()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _DynamicPropertyBuffer.update(container:phase:)();
  *a1 = result & 1;
  return result;
}

void type metadata accessor for AccessibilityChartDescriptorStorage?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for AccessibilityChartDescriptorStorage?, MEMORY[0x1E0CE67C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityChartDescriptorStorage?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityChartDescriptorStorage?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t EnvironmentValues.searchSuffix.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.searchPresentationToolbarBehavior.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void static SearchPresentationToolbarBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static SearchPresentationToolbarBehavior.avoidHidingContent.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t EnvironmentValues.searchPresentationToolbarBehavior.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.searchPresentationToolbarBehavior(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_1879A97CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.searchPresentationToolbarBehavior.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1879A9804()
{
  return EnvironmentValues.searchPresentationToolbarBehavior.setter();
}

uint64_t EnvironmentValues.searchDictationBehavior.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.searchDictationBehavior.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.searchDictationBehavior(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.searchDictationBehavior : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_1879A9B7C()
{
  return EnvironmentValues.searchDictationBehavior.setter();
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SearchSuffixKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = -0.0;
  *(_OWORD *)(a1 + 16) = xmmword_187BF9FB0;
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.SearchSuffixKey(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];

  v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return MEMORY[0x18D75AFA8](v6, v5) & 1;
}

uint64_t View.searchSuffix(alwaysVisible:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  swift_getKeyPath();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  outlined copy of Text?(a1, a2, a3, a4);
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

double key path getter for EnvironmentValues.searchSuffix : EnvironmentValues@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;
  __int128 v5;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.searchSuffix : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  outlined copy of Text.Suffix.Storage(*a1, v2, v3);
  specialized EnvironmentValues.subscript.setter(v1, v2, v3);
  return outlined consume of Text.Suffix.Storage(v1, v2, v3);
}

uint64_t *closure #1 in View.searchSuffix(alwaysVisible:)(uint64_t *result, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a5)
  {
    v9 = result;
    v10 = *result;
    v11 = result[1];
    v12 = result[2];
    outlined copy of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    result = (uint64_t *)outlined consume of Text.Suffix.Storage(v10, v11, v12);
    *v9 = a2;
    v9[1] = a3;
    v9[2] = a4 & 1 | 0x4000000000000000;
    v9[3] = a5;
  }
  return result;
}

uint64_t sub_1879A9ED4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t *partial apply for closure #1 in View.searchSuffix(alwaysVisible:)(uint64_t *a1)
{
  uint64_t *v1;

  return closure #1 in View.searchSuffix(alwaysVisible:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

ValueMetadata *type metadata accessor for SearchPresentationToolbarBehavior()
{
  return &type metadata for SearchPresentationToolbarBehavior;
}

uint64_t sub_1879A9F2C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role>, (uint64_t)&type metadata for SearchPresentationToolbarBehavior.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8], (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role> and conformance _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role>, (uint64_t)&type metadata for SearchPresentationToolbarBehavior.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchPresentationToolbarBehavior.Role> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_1879A9FB0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextInputDictationBehavior>, (uint64_t)&type metadata for TextInputDictationBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8], (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextInputDictationBehavior> and conformance _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextInputDictationBehavior> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextInputDictationBehavior> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextInputDictationBehavior> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextInputDictationBehavior>, (uint64_t)&type metadata for TextInputDictationBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextInputDictationBehavior> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_1879AA034(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Suffix>, MEMORY[0x1E0CE6BB0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0], (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Text.Suffix> and conformance _EnvironmentKeyTransformModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Text.Suffix> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Text.Suffix> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Text.Suffix> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Suffix>, MEMORY[0x1E0CE6BB0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Text.Suffix> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchPresentationToolbarBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1879AA104 + 4 * byte_187C76275[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1879AA138 + 4 * byte_187C76270[v4]))();
}

uint64_t sub_1879AA138(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879AA140(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1879AA148);
  return result;
}

uint64_t sub_1879AA154(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1879AA15CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1879AA160(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879AA168(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchPresentationToolbarBehavior.Role()
{
  return &type metadata for SearchPresentationToolbarBehavior.Role;
}

unint64_t lazy protocol witness table accessor for type SearchPresentationToolbarBehavior.Role and conformance SearchPresentationToolbarBehavior.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchPresentationToolbarBehavior.Role and conformance SearchPresentationToolbarBehavior.Role;
  if (!lazy protocol witness table cache variable for type SearchPresentationToolbarBehavior.Role and conformance SearchPresentationToolbarBehavior.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPresentationToolbarBehavior.Role, &type metadata for SearchPresentationToolbarBehavior.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchPresentationToolbarBehavior.Role and conformance SearchPresentationToolbarBehavior.Role);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchDictationBehaviorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>[0];
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>[0])
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchPresentationToolbarBehaviorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *type metadata accessor for EnvironmentValues.SearchDictationBehaviorKey()
{
  return &unk_1E1AC3C48;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchSuffixKey()
{
  return &type metadata for EnvironmentValues.SearchSuffixKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchPresentationToolbarBehaviorKey()
{
  return &type metadata for EnvironmentValues.SearchPresentationToolbarBehaviorKey;
}

uint64_t CompactDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  outlined init with copy of DatePickerStyleConfiguration(a1, a2);
  v3 = (int *)type metadata accessor for UIKitDatePicker(0);
  *(_QWORD *)(a2 + v3[5]) = 2;
  v4 = (uint64_t *)(a2 + v3[6]);
  *v4 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  swift_storeEnumTagMultiPayload();
  v5 = (uint64_t *)(a2 + v3[7]);
  *v5 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  swift_storeEnumTagMultiPayload();
  v6 = (uint64_t *)(a2 + v3[8]);
  *v6 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  return swift_storeEnumTagMultiPayload();
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in CompactDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DatePickerStyle.makeBody(configuration:) in conformance CompactDatePickerStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  outlined init with copy of DatePickerStyleConfiguration(a1, a2);
  v3 = (int *)type metadata accessor for UIKitDatePicker(0);
  *(_QWORD *)(a2 + v3[5]) = 2;
  v4 = (uint64_t *)(a2 + v3[6]);
  *v4 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  swift_storeEnumTagMultiPayload();
  v5 = (uint64_t *)(a2 + v3[7]);
  *v5 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  swift_storeEnumTagMultiPayload();
  v6 = (uint64_t *)(a2 + v3[8]);
  *v6 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  return swift_storeEnumTagMultiPayload();
}

ValueMetadata *type metadata accessor for CompactDatePickerStyle()
{
  return &type metadata for CompactDatePickerStyle;
}

SwiftUI::_OverlayLayout __swiftcall _OverlayLayout.init(contentIndex:)(SwiftUI::_OverlayLayout contentIndex)
{
  uint64_t v1;

  *(_QWORD *)v1 = contentIndex.contentIndex.value;
  *(_BYTE *)(v1 + 8) = contentIndex.contentIndex.is_nil;
  return contentIndex;
}

uint64_t static _OverlayLayout._makeView(root:inputs:body:)()
{
  lazy protocol witness table accessor for type _OverlayLayout and conformance _OverlayLayout();
  return static Layout.makeLayoutView(root:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type _OverlayLayout and conformance _OverlayLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout;
  if (!lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _OverlayLayout, &type metadata for _OverlayLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout;
  if (!lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _OverlayLayout, &type metadata for _OverlayLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout;
  if (!lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _OverlayLayout, &type metadata for _OverlayLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout;
  if (!lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _OverlayLayout, &type metadata for _OverlayLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayLayout and conformance _OverlayLayout);
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _OverlayLayout()
{
  lazy protocol witness table accessor for type _OverlayLayout and conformance _OverlayLayout();
  return static Layout.makeLayoutView(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _OverlayLayout()
{
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _OverlayLayout()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _OverlayLayout.placeSubviews(in:proposal:subviews:cache:)()
{
  return specialized _OverlayLayout.placeSubviews(in:proposal:subviews:cache:)();
}

void static _OverlayLayout.layoutProperties.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 258;
  *(_BYTE *)(a1 + 2) = 0;
}

uint64_t _OverlayLayout.sizeThatFits(proposal:subviews:cache:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
  {
    v4 = *(_QWORD *)v0;
    swift_bridgeObjectRetain();
    v1 = LayoutSubviews.endIndex.getter();
    result = LayoutSubviews.endIndex.getter();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v3 = LayoutSubviews.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if ((v1 & 0x8000000000000000) == 0 && v3 >= v1)
      {
        result = v4;
        if (v4 < v1)
        {
          LayoutSubviews.subscript.getter();
          return LayoutSubview.sizeThatFits(_:)();
        }
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

void protocol witness for static Layout.layoutProperties.getter in conformance _OverlayLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 258;
  *(_BYTE *)(a1 + 2) = 0;
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _OverlayLayout()
{
  return _OverlayLayout.sizeThatFits(proposal:subviews:cache:)();
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance _OverlayLayout()
{
  return specialized _OverlayLayout.placeSubviews(in:proposal:subviews:cache:)();
}

void static _OverlayLayout.implicitRoot.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t protocol witness for static _VariadicView_AnyImplicitRoot.visitType<A>(visitor:) in conformance _OverlayLayout()
{
  lazy protocol witness table accessor for type _OverlayLayout and conformance _OverlayLayout();
  return static _VariadicView_ImplicitRoot.visitType<A>(visitor:)();
}

uint64_t specialized _OverlayLayout.placeSubviews(in:proposal:subviews:cache:)()
{
  uint64_t v0;
  uint64_t result;

  swift_bridgeObjectRetain();
  if (!LayoutSubviews.endIndex.getter())
    return swift_bridgeObjectRelease();
  v0 = 0;
  while (1)
  {
    LayoutSubviews.subscript.getter();
    result = LayoutSubviews.endIndex.getter();
    if (v0 >= result)
      break;
    ++v0;
    static UnitPoint.topLeading.getter();
    LayoutSubview.place(at:anchor:proposal:)();
    if (v0 == LayoutSubviews.endIndex.getter())
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t instantiation function for generic protocol witness table for _OverlayLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _OverlayLayout and conformance _OverlayLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for _VariadicView_ViewRoot in _OverlayLayout()
{
  return &protocol witness table for _OverlayLayout;
}

ValueMetadata *type metadata accessor for _OverlayLayout()
{
  return &type metadata for _OverlayLayout;
}

uint64_t View.accessibilityCustomContent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;

  type metadata accessor for [AccessibilityCustomContentEntry](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityCustomContentEntry>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
  outlined init with copy of AccessibilityCustomContentEntry(a1, v6 + 32);
  v8 = v6;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57F0], (uint64_t)&v8, 1, a2, MEMORY[0x1E0CE57F0], a3);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v4;

  v4 = a1;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE57F0], (uint64_t)&v4, 1, a2, MEMORY[0x1E0CE57F0], a3);
}

Swift::OpaquePointer_optional __swiftcall AccessibilityNode.accessibilityCustomContent()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::Bool v4;
  void *v5;
  uint64_t v6;
  id v7;
  Swift::OpaquePointer_optional result;

  AccessibilityNode.attachment.getter(&v6);
  v1 = v6;

  v6 = v1;
  AccessibilityProperties.customContentList.getter();
  swift_bridgeObjectRelease();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  v7 = v2;
  swift_retain();
  swift_retain();
  v3 = Array<A>.resolve(in:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v5 = (void *)v3;
  result.value._rawValue = v5;
  result.is_nil = v4;
  return result;
}

uint64_t View.accessibilityCustomContent(_:_:importance:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v18[128];

  v9 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v13 = *(_BYTE *)(a1 + 48);
  if (a5)
  {
    outlined copy of Text?(a2, a3, a4, a5);
    outlined copy of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined copy of Text.Storage(v12, v11, v13);
    swift_bridgeObjectRetain();
    v18[0] = a4 & 1;
    AccessibilityCustomContentEntry.init(_:value:importance:)();
  }
  else
  {
    outlined copy of AccessibilityCustomContentKey.Identifier(v9, v8, v10);
    outlined copy of Text.Storage(v12, v11, v13);
    swift_bridgeObjectRetain();
    AccessibilityCustomContentEntry.init(clearing:)();
  }
  View.accessibilityCustomContent(_:)((uint64_t)v18, a7, a8);
  return outlined destroy of AccessibilityCustomContentEntry((uint64_t)v18);
}

uint64_t outlined copy of AccessibilityCustomContentKey.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
    outlined copy of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t outlined destroy of AccessibilityCustomContentEntry(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE6600] - 8) + 8))();
  return a1;
}

uint64_t View.accessibilityCustomContent(_:_:importance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  _OWORD v21[3];
  char v22;
  uint64_t v23;

  v11 = *(_BYTE *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 16);
  v21[0] = *(_OWORD *)a1;
  v21[1] = v13;
  v21[2] = *(_OWORD *)(a1 + 32);
  v22 = v11;
  v23 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = Text.init(_:tableName:bundle:comment:)();
  v16 = v15;
  v18 = v17 & 1;
  View.accessibilityCustomContent(_:_:importance:)((uint64_t)v21, v14, v15, v17 & 1, v19, a6, a7, a8);
  outlined consume of Text.Storage(v14, v16, v18);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityCustomContent<A>(_:_:importance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  _OWORD v22[3];
  char v23;
  uint64_t v24;

  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *(_BYTE *)(v11 + 48);
  v12 = *(_QWORD *)(v11 + 56);
  v13 = *(_OWORD *)(v11 + 16);
  v22[0] = *(_OWORD *)v11;
  v22[1] = v13;
  v22[2] = *(_OWORD *)(v11 + 32);
  v23 = v9;
  v24 = v12;
  (*(void (**)(char *))(v14 + 16))(v10);
  v15 = Text.init<A>(_:)();
  v17 = v16;
  v19 = v18 & 1;
  View.accessibilityCustomContent(_:_:importance:)((uint64_t)v22, v15, v16, v18 & 1, v20, a3, a4, a6);
  outlined consume of Text.Storage(v15, v17, v19);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityCustomContent(_:_:importance:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v22[6];
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityCustomContentKey.init(_:)();
  v11 = v25;
  v12 = v26;
  v13 = v27;
  v15 = v29;
  v14 = v30;
  v16 = v31;
  v22[0] = v25;
  v22[1] = v26;
  v22[2] = v27;
  v22[3] = v28;
  v22[4] = v29;
  v22[5] = v30;
  v23 = v31;
  v24 = v32;
  View.accessibilityCustomContent(_:_:importance:)((uint64_t)v22, a5, a6, a7 & 1, a8, a9, a10, a11);
  outlined consume of AccessibilityCustomContentKey.Identifier(v11, v12, v13);
  outlined consume of Text.Storage(v15, v14, v16);
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of AccessibilityCustomContentKey.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
    outlined consume of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityCustomContent(_:_:importance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = Text.init(_:tableName:bundle:comment:)();
  v17 = v16;
  v19 = v18 & 1;
  View.accessibilityCustomContent(_:_:importance:)(v15, v16, v18 & 1, v20, a5, a6, a7 & 1, a8, a9, a10, a11);
  outlined consume of Text.Storage(v15, v17, v19);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityCustomContent(_:_:importance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = Text.init(_:tableName:bundle:comment:)();
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = Text.init(_:tableName:bundle:comment:)();
  v20 = v19;
  v22 = v21 & 1;
  View.accessibilityCustomContent(_:_:importance:)(v11, v13, v17, v15, v18, v19, v21 & 1, v23, a9, a10, a11);
  outlined consume of Text.Storage(v18, v20, v22);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v11, v13, v17);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityCustomContent<A>(_:_:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a4;
  v26 = a7;
  v27 = a5;
  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = Text.init(_:tableName:bundle:comment:)();
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, a6);
  v20 = Text.init<A>(_:)();
  v22 = v21;
  LOBYTE(v10) = v23 & 1;
  View.accessibilityCustomContent(_:_:importance:)(v13, v15, v19, v17, v20, v21, v23 & 1, v24, v28, v27, a8);
  outlined consume of Text.Storage(v20, v22, v10);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v13, v15, v19);
  return swift_bridgeObjectRelease();
}

void View.accessibilityCustomContent<A, B>(_:_:importance:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t ModifiedContent<>.accessibilityCustomContent(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  type metadata accessor for [AccessibilityCustomContentEntry](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityCustomContentEntry>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
  outlined init with copy of AccessibilityCustomContentEntry(a1, v6 + 32);
  v9 = v6;
  v7 = lazy protocol witness table accessor for type [AccessibilityCustomContentEntry] and conformance [A]();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE57F0], (uint64_t)&v9, 1, a2, MEMORY[0x1E0CE57F0], MEMORY[0x1E0CE57E8], v7, a3);
  return swift_bridgeObjectRelease();
}

{
  unint64_t v5;
  uint64_t v7;

  v7 = a1;
  v5 = lazy protocol witness table accessor for type [AccessibilityCustomContentEntry] and conformance [A]();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE57F0], (uint64_t)&v7, 1, a2, MEMORY[0x1E0CE57F0], MEMORY[0x1E0CE57E8], v5, a3);
}

uint64_t ModifiedContent<>.accessibilityCustomContent(_:_:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v17[128];

  v8 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v12 = *(_BYTE *)(a1 + 48);
  if (a5)
  {
    outlined copy of Text?(a2, a3, a4, a5);
    outlined copy of AccessibilityCustomContentKey.Identifier(v8, v7, v9);
    outlined copy of Text.Storage(v11, v10, v12);
    swift_bridgeObjectRetain();
    v17[0] = a4 & 1;
    AccessibilityCustomContentEntry.init(_:value:importance:)();
  }
  else
  {
    outlined copy of AccessibilityCustomContentKey.Identifier(v8, v7, v9);
    outlined copy of Text.Storage(v11, v10, v12);
    swift_bridgeObjectRetain();
    AccessibilityCustomContentEntry.init(clearing:)();
  }
  ModifiedContent<>.accessibilityCustomContent(_:)((uint64_t)v17, a6, a7);
  return outlined destroy of AccessibilityCustomContentEntry((uint64_t)v17);
}

uint64_t ModifiedContent<>.accessibilityCustomContent(_:_:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  _OWORD v15[3];
  char v16;
  uint64_t v17;

  v5 = *(_BYTE *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v7;
  v15[2] = *(_OWORD *)(a1 + 32);
  v16 = v5;
  v17 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = Text.init(_:tableName:bundle:comment:)();
  v10 = v9;
  v12 = v11 & 1;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)((uint64_t)v15, v8, v9, v11 & 1, v13, a2, a3);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityCustomContent<A>(_:_:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  _OWORD v19[3];
  char v20;
  uint64_t v21;

  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v6) = *(_BYTE *)(v8 + 48);
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *(_OWORD *)(v8 + 16);
  v19[0] = *(_OWORD *)v8;
  v19[1] = v10;
  v19[2] = *(_OWORD *)(v8 + 32);
  v20 = v6;
  v21 = v9;
  (*(void (**)(char *))(v11 + 16))(v7);
  v12 = Text.init<A>(_:)();
  v14 = v13;
  v16 = v15 & 1;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)((uint64_t)v19, v12, v13, v15 & 1, v17, a3, a4);
  outlined consume of Text.Storage(v12, v14, v16);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityCustomContent(_:_:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v22[6];
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityCustomContentKey.init(_:)();
  v11 = v25;
  v12 = v26;
  v13 = v27;
  v15 = v29;
  v14 = v30;
  v16 = v31;
  v22[0] = v25;
  v22[1] = v26;
  v22[2] = v27;
  v22[3] = v28;
  v22[4] = v29;
  v22[5] = v30;
  v23 = v31;
  v24 = v32;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)((uint64_t)v22, a4, a5, a6 & 1, a7, a10, a8);
  outlined consume of AccessibilityCustomContentKey.Identifier(v11, v12, v13);
  outlined consume of Text.Storage(v15, v14, v16);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityCustomContent(_:_:importance:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, char a3@<W6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = Text.init(_:tableName:bundle:comment:)();
  v13 = v12;
  v15 = v14 & 1;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)(v11, v12, v14 & 1, a1, a2, a3 & 1, a4, a5, a6, a7);
  outlined consume of Text.Storage(v11, v13, v15);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityCustomContent(_:_:importance:)@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = Text.init(_:tableName:bundle:comment:)();
  v5 = v4;
  v7 = v6 & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = Text.init(_:tableName:bundle:comment:)();
  v10 = v9;
  v12 = v11 & 1;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)(v3, v5, v7, v8, v9, v11 & 1, v13, a1, a2, a3);
  outlined consume of Text.Storage(v8, v10, v12);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v3, v5, v7);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityCustomContent<A>(_:_:importance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a4;
  v25 = a5;
  v10 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = Text.init(_:tableName:bundle:comment:)();
  v15 = v14;
  v17 = v16 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, a6);
  v18 = Text.init<A>(_:)();
  v20 = v19;
  LOBYTE(v10) = v21 & 1;
  ModifiedContent<>.accessibilityCustomContent(_:_:importance:)(v13, v15, v17, v18, v19, v21 & 1, v22, a7, v26, v25);
  outlined consume of Text.Storage(v18, v20, v10);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v13, v15, v17);
  return swift_bridgeObjectRelease();
}

void ModifiedContent<>.accessibilityCustomContent<A, B>(_:_:importance:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type [AccessibilityCustomContentEntry] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [AccessibilityCustomContentEntry] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AccessibilityCustomContentEntry] and conformance [A])
  {
    type metadata accessor for [AccessibilityCustomContentEntry](255, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityCustomContentEntry], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE80E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AccessibilityCustomContentEntry] and conformance [A]);
  }
  return result;
}

unint64_t type metadata accessor for AXCustomContent()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AXCustomContent;
  if (!lazy cache variable for type metadata for AXCustomContent)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AXCustomContent);
  }
  return result;
}

void type metadata accessor for [AccessibilityCustomContentEntry](uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0CE6600]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined init with copy of AccessibilityCustomContentEntry(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE6600] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for WindowSceneConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v11 = *v10;
    v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(_QWORD *)(v13 + 24);
    swift_retain();
    if (v14 < 0xFFFFFFFF)
    {
      v18 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 16) = v18;
    }
    else
    {
      v15 = *(_QWORD *)v13;
      v16 = *(_QWORD *)(v13 + 8);
      v17 = *(_BYTE *)(v13 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v13, v16, v17);
      *(_QWORD *)v12 = v15;
      *(_QWORD *)(v12 + 8) = v16;
      *(_BYTE *)(v12 + 16) = v17;
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(v13 + 24);
      swift_bridgeObjectRetain();
    }
    v19 = (_QWORD *)((v12 + 39) & 0xFFFFFFFFFFFFF8);
    v20 = (_QWORD *)((v13 + 39) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v22 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
      return v4;
    }
    v23 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_QWORD *)(v21 + 8) = v23;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for WindowSceneConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 + a2;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *v7 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = v9 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (*(_QWORD *)(v10 + 24) < 0xFFFFFFFFuLL)
  {
    if (v12 >= 0xFFFFFFFF)
    {
      v19 = *(_QWORD *)v11;
      v20 = *(_QWORD *)(v11 + 8);
      v21 = *(_BYTE *)(v11 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v11, v20, v21);
      *(_QWORD *)v10 = v19;
      *(_QWORD *)(v10 + 8) = v20;
      *(_BYTE *)(v10 + 16) = v21;
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v12 >= 0xFFFFFFFF)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(v11 + 8);
      v15 = *(_BYTE *)(v11 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v11, v14, v15);
      v16 = *(_QWORD *)v10;
      v17 = *(_QWORD *)(v10 + 8);
      v18 = *(_BYTE *)(v10 + 16);
      *(_QWORD *)v10 = v13;
      *(_QWORD *)(v10 + 8) = v14;
      *(_BYTE *)(v10 + 16) = v15;
      outlined consume of Text.Storage(v16, v17, v18);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  v22 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v22;
LABEL_8:
  v23 = (_QWORD *)((v10 + 39) & 0xFFFFFFFFFFFFF8);
  v24 = (_QWORD *)((v11 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = (unint64_t *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = *v26;
  if (*v25 < 0xFFFFFFFFuLL)
  {
    if (v27 >= 0xFFFFFFFF)
    {
      v29 = v26[1];
      *v25 = v27;
      v25[1] = v29;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)v25 = *(_OWORD *)v26;
    return a1;
  }
  if (v27 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  v28 = v26[1];
  *v25 = v27;
  v25[1] = v28;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for WindowSceneConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(((unint64_t)v9 + 39) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v10 + 39) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v15;
  if ((unint64_t)*v15 < 0xFFFFFFFF)
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  else
  {
    v17 = v15[1];
    *(_QWORD *)v14 = v16;
    *(_QWORD *)(v14 + 8) = v17;
  }
  return a1;
}

uint64_t assignWithTake for WindowSceneConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v9 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v10 + 24) >= 0xFFFFFFFFuLL)
    {
      v11 = *(_BYTE *)(v10 + 16);
      v12 = *(_QWORD *)v9;
      v13 = *(_QWORD *)(v9 + 8);
      v14 = *(_BYTE *)(v9 + 16);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *(_BYTE *)(v9 + 16) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  v15 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v15;
LABEL_6:
  v16 = (_QWORD *)((v9 + 39) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (unint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      v22 = v19[1];
      *v18 = v20;
      v18[1] = v22;
      return a1;
    }
LABEL_12:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    return a1;
  }
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_12;
  }
  v21 = v19[1];
  *v18 = v20;
  v18[1] = v21;
  swift_release();
  return a1;
}

void storeEnumTagSinglePayload for WindowSceneConfiguration(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1879AC7AC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1879AC820);
}

void sub_1879AC7B4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1879AC7BCLL);
  JUMPOUT(0x1879AC820);
}

void sub_1879AC7FC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879AC820);
}

void sub_1879AC804()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879AC820);
}

uint64_t sub_1879AC80C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1879AC820);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1879AC81CLL);
    JUMPOUT(0x1879AC818);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t TextSelection.range.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(_BYTE *, _QWORD);
  uint64_t *v21;
  _BYTE v24[32];

  v1 = MEMORY[0x1E0DEA790];
  v2 = MEMORY[0x1E0DEA7A0];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for RangeSet<String.Index>.Ranges, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], MEMORY[0x1E0DEE810]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v24[-v7 - 8];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, v1, v2, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = &v24[-v13 - 8];
  v15 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of TextSelection.Indices(v0, (uint64_t)v18);
  if (swift_getEnumCaseMultiPayload() != 1)
    return *(_QWORD *)v18;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v18, v10);
  RangeSet.ranges.getter();
  lazy protocol witness table accessor for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges, MEMORY[0x1E0DEE828]);
  if ((dispatch thunk of Collection.isEmpty.getter() & 1) != 0)
  {
    v19 = 0;
  }
  else
  {
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges, MEMORY[0x1E0DEE820]);
    dispatch thunk of BidirectionalCollection.index(before:)();
    v20 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
    v19 = *v21;
    v20(v24, 0);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v19;
}

uint64_t TextSelection.init(range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for TextSelection.Indices(0);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for TextSelection(0);
  *((_BYTE *)a3 + *(int *)(result + 20)) = 0;
  return result;
}

uint64_t type metadata accessor for TextSelection.Indices(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TextSelection.Indices);
}

uint64_t type metadata accessor for TextSelection(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TextSelection);
}

uint64_t EnvironmentValues.textSelectionAffinity.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void TextSelection.Indices.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v4);
  v6 = (char *)&v13 - v5;
  v7 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (unint64_t *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TextSelection.Indices(v0, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, unint64_t *, uint64_t))(v3 + 32))(v6, v10, v2);
    Hasher._combine(_:)(1uLL);
    lazy protocol witness table accessor for type RangeSet<String.Index> and conformance <> RangeSet<A>();
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    v11 = *v10;
    v12 = v10[1];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v11 >> 14);
    Hasher._combine(_:)(v12 >> 14);
  }
}

Swift::Int TextSelection.Indices.hashValue.getter()
{
  Hasher.init(_seed:)();
  TextSelection.Indices.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextSelection.Indices()
{
  Hasher.init(_seed:)();
  TextSelection.Indices.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextSelection.Indices()
{
  Hasher.init(_seed:)();
  TextSelection.Indices.hash(into:)();
  return Hasher._finalize()();
}

uint64_t TextSelection.indices.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of TextSelection.Indices(v1, a1);
}

uint64_t TextSelection.indices.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of TextSelection.Indices(a1, v1);
}

uint64_t (*TextSelection.indices.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t TextSelection.affinity.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TextSelection(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t TextSelection.init(ranges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for TextSelection.Indices(0);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for TextSelection(0);
  *(_BYTE *)(a2 + *(int *)(result + 20)) = 0;
  return result;
}

uint64_t TextSelection.init(insertionPoint:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  *a2 = a1;
  a2[1] = a1;
  type metadata accessor for TextSelection.Indices(0);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for TextSelection(0);
  *((_BYTE *)a2 + *(int *)(result + 20)) = 0;
  return result;
}

BOOL TextSelection.isInsertion.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v1 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (uint64_t *)((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of TextSelection.Indices(v0, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() != 1)
    return (v4[1] ^ *v4) < 0x4000uLL;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, type metadata accessor for TextSelection.Indices);
  return 0;
}

BOOL static TextSelection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((specialized static TextSelection.Indices.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = type metadata accessor for TextSelection(0);
  return *(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v4 + 20));
}

BOOL static TextSelectionAffinity.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void TextSelection.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  TextSelection.Indices.hash(into:)();
  v1 = type metadata accessor for TextSelection(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + *(int *)(v1 + 20)));
}

Swift::Int TextSelection.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  Hasher.init(_seed:)();
  TextSelection.Indices.hash(into:)();
  v1 = type metadata accessor for TextSelection(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + *(int *)(v1 + 20)));
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextSelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (specialized static TextSelection.Indices.== infix(_:_:)(a1, a2) & 1) != 0
      && *(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(a3 + 20));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextSelection(uint64_t a1)
{
  uint64_t v1;

  Hasher.init(_seed:)();
  TextSelection.Indices.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + *(int *)(a1 + 20)));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TextSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  TextSelection.Indices.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(a2 + 20)));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  Hasher.init(_seed:)();
  TextSelection.Indices.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + *(int *)(a2 + 20)));
  return Hasher._finalize()();
}

uint64_t View.textSelectionAffinity(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.textSelectionAffinity : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.textSelectionAffinity : EnvironmentValues()
{
  return EnvironmentValues.textSelectionAffinity.setter();
}

uint64_t EnvironmentValues.textSelectionAffinity.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void TextSelectionAffinity.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int TextSelectionAffinity.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t (*EnvironmentValues.textSelectionAffinity.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.textSelectionAffinity.modify;
}

uint64_t EnvironmentValues.textSelectionAffinity.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized static TextSelection.Indices.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char v24;
  void (*v25)(char *, uint64_t);
  unint64_t v26;
  uint64_t (*v27)(_QWORD);
  uint64_t v29;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v29 - v8;
  v10 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (uint64_t *)((char *)&v29 - v16);
  type metadata accessor for (TextSelection.Indices, TextSelection.Indices)();
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = &v21[*(int *)(v22 + 48)];
  outlined init with copy of TextSelection.Indices(a1, (uint64_t)v21);
  outlined init with copy of TextSelection.Indices(a2, (uint64_t)v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of TextSelection.Indices((uint64_t)v21, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v23, v5);
      v24 = static RangeSet.== infix(_:_:)();
      v25 = *(void (**)(char *, uint64_t))(v6 + 8);
      v25(v9, v5);
      v25(v13, v5);
LABEL_11:
      v27 = type metadata accessor for TextSelection.Indices;
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  }
  else
  {
    outlined init with copy of TextSelection.Indices((uint64_t)v21, (uint64_t)v17);
    v26 = v17[1];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v24 = !((*(_QWORD *)v23 ^ *v17) >> 14) && (*((_QWORD *)v23 + 1) ^ v26) < 0x4000;
      goto LABEL_11;
    }
  }
  v24 = 0;
  v27 = (uint64_t (*)(_QWORD))type metadata accessor for (TextSelection.Indices, TextSelection.Indices);
LABEL_12:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, v27);
  return v24 & 1;
}

uint64_t outlined init with copy of TextSelection.Indices(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextSelection.Indices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type RangeSet<String.Index> and conformance <> RangeSet<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type RangeSet<String.Index> and conformance <> RangeSet<A>;
  if (!lazy protocol witness table cache variable for type RangeSet<String.Index> and conformance <> RangeSet<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
    v2 = MEMORY[0x1E0DEA798];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE850], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<String.Index> and conformance <> RangeSet<A>);
  }
  return result;
}

uint64_t outlined assign with take of TextSelection.Indices(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextSelection.Indices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1879ADAA4()
{
  return EnvironmentValues.textSelectionAffinity.setter();
}

uint64_t base witness table accessor for Equatable in TextSelection.Indices()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextSelection.Indices and conformance TextSelection.Indices, type metadata accessor for TextSelection.Indices, (uint64_t)&protocol conformance descriptor for TextSelection.Indices);
}

uint64_t base witness table accessor for Equatable in TextSelection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextSelection and conformance TextSelection, type metadata accessor for TextSelection, (uint64_t)&protocol conformance descriptor for TextSelection);
}

unint64_t lazy protocol witness table accessor for type TextSelectionAffinity and conformance TextSelectionAffinity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextSelectionAffinity and conformance TextSelectionAffinity;
  if (!lazy protocol witness table cache variable for type TextSelectionAffinity and conformance TextSelectionAffinity)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextSelectionAffinity, &type metadata for TextSelectionAffinity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSelectionAffinity and conformance TextSelectionAffinity);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TextSelection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for TextSelection(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for TextSelection.Indices(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for TextSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TextSelection.Indices(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithCopy for TextSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for TextSelection.Indices);
    v6 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *initializeWithTake for TextSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TextSelection.Indices(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for TextSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for TextSelection.Indices);
    v6 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for TextSelection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1879AE030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for TextSelection.Indices(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TextSelection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1879AE0B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for TextSelection.Indices(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for TextSelection()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TextSelection.Indices(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TextSelection.Indices(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for TextSelection.Indices(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for TextSelection.Indices(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for TextSelection.Indices(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for TextSelection.Indices);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *initializeWithTake for TextSelection.Indices(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for TextSelection.Indices(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for TextSelection.Indices);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for TextSelection.Indices()
{
  unint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(319, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  if (v0 <= 0x3F)
    swift_initEnumMetadataMultiPayload();
}

uint64_t storeEnumTagSinglePayload for TextSelectionAffinity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1879AE698 + 4 * byte_187C766A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1879AE6CC + 4 * byte_187C766A0[v4]))();
}

uint64_t sub_1879AE6CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879AE6D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1879AE6DCLL);
  return result;
}

uint64_t sub_1879AE6E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1879AE6F0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1879AE6F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879AE6FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextSelectionAffinity()
{
  return &type metadata for TextSelectionAffinity;
}

uint64_t sub_1879AE718(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<TextSelectionAffinity>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextSelectionAffinity> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TextSelectionAffinity>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TextSelectionAffinity>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextSelectionAffinity>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextSelectionAffinity>);
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.TextSelectionAffinityKey()
{
  return &type metadata for EnvironmentValues.TextSelectionAffinityKey;
}

uint64_t lazy protocol witness table accessor for type RangeSet<String.Index>.Ranges and conformance RangeSet<A>.Ranges(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for RangeSet<String.Index>.Ranges, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], MEMORY[0x1E0DEE810]);
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for (TextSelection.Indices, TextSelection.Indices)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (TextSelection.Indices, TextSelection.Indices))
  {
    type metadata accessor for TextSelection.Indices(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TextSelection.Indices, TextSelection.Indices));
  }
}

uint64_t EnvironmentValues.menuIndicatorVisibility.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.menuIndicatorVisibility.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.menuIndicatorProminenceReduced.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedMenuIndicatorProminence>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ReducedMenuIndicatorProminence> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedMenuIndicatorProminence>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedMenuIndicatorProminence>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ReducedMenuIndicatorProminence> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedMenuIndicatorProminence>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.menuIndicatorProminenceReduced.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedMenuIndicatorProminence>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ReducedMenuIndicatorProminence> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedMenuIndicatorProminence>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.menuIndicator(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t (*EnvironmentValues.menuIndicatorVisibility.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;

  v2 = a1 + 1;
  *a1 = v1;
  v3 = (char *)a1 + 9;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *v2 = *v3;
  return EnvironmentValues.menuIndicatorVisibility.modify;
}

uint64_t EnvironmentValues.menuIndicatorVisibility.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuIndicatorVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1879AF000@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.menuIndicatorVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1879AF028()
{
  return EnvironmentValues.menuIndicatorVisibility.setter();
}

void View.menuIndicatorProminenceReduced(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1879AF064(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA04FormE19SizeFittingBehaviorVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>);
}

void *type metadata accessor for MenuIndicatorVisibilityKey()
{
  return &unk_1E1AEF610;
}

void *type metadata accessor for ReducedMenuIndicatorProminence()
{
  return &unk_1E1AFD888;
}

uint64_t associated type witness table accessor for LabelGroupStyle_v0.Foreground : ShapeStyle in BodyLabelGroupStyle()
{
  return MEMORY[0x1E0CE5408];
}

uint64_t protocol witness for LabelGroupStyle_v0.font(at:) in conformance BodyLabelGroupStyle(uint64_t a1)
{
  if (a1 == 2)
    return static Font.footnote.getter();
  if (a1 != 1)
  {
    if (!a1)
      return static Font.body.getter();
    return static Font.footnote.getter();
  }
  return static Font.subheadline.getter();
}

ValueMetadata *type metadata accessor for BodyLabelGroupStyle()
{
  return &type metadata for BodyLabelGroupStyle;
}

uint64_t TupleTableColumnContent.init(_:valueType:sortType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t TupleTableColumnContent.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) - 8) + 16))(a2, v2);
}

uint64_t TupleTableColumnContent.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 40))(v2, a1);
}

uint64_t (*TupleTableColumnContent.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static TupleTableColumnContent._makeContent(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t *, _QWORD);
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v41 = *a1;
  v14 = *a2;
  v40 = *((_DWORD *)a2 + 2);
  v15 = a2[2];
  v16 = a2[6];
  v38 = a2[5];
  v39 = *((_DWORD *)a2 + 20);
  lazy protocol witness table accessor for type TableColumnDescriptor and conformance TableColumnDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  v17 = v51;
  LODWORD(v51) = v41;
  v52 = v14;
  v53 = v40;
  v54 = v15;
  v55 = *(_OWORD *)(a2 + 3);
  v56 = v38;
  v57 = v16;
  v58 = *(_OWORD *)(a2 + 7);
  v59 = a2[9];
  v60 = v39;
  v61 = 0;
  v62 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v17 + 16))
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42 = *(_OWORD *)(v17 + 40);
    v61 = AGTupleElementOffset();
    v44 = v42;
    v46 = a3;
    v47 = a4;
    v48 = a5;
    v49 = a6;
    v50 = a7;
    type metadata accessor for TupleTableColumnContent.MakeList();
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = MEMORY[0x1E0DEE9D8];
  v19 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  v20 = MEMORY[0x1E0DEE9D8];
  if (v19)
  {
    v46 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    v20 = v46;
    v21 = (_DWORD *)(v18 + 40);
    do
    {
      v22 = *((_QWORD *)v21 - 1);
      v23 = *v21;
      v46 = v20;
      v25 = *(_QWORD *)(v20 + 16);
      v24 = *(_QWORD *)(v20 + 24);
      swift_bridgeObjectRetain();
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1);
        v20 = v46;
      }
      *(_QWORD *)(v20 + 16) = v25 + 1;
      v26 = v20 + 16 * v25;
      *(_QWORD *)(v26 + 32) = v22;
      *(_DWORD *)(v26 + 40) = v23;
      v21 += 4;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  PreferencesOutputs.init()();
  *(_QWORD *)&v44 = v20;
  *((_QWORD *)&v44 + 1) = v46;
  v45 = v47;
  v43 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    v27 = MEMORY[0x1E0CE6550];
    v28 = MEMORY[0x1E0CE6548];
    do
    {
      v29 = (void (*)(uint64_t *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v31 = *v30;
      v32 = v30[1];
      v29(&v46, 0);
      v33 = v43;
      v46 = v16;
      swift_bridgeObjectRetain();
      v34 = PreferenceKeys.endIndex.getter();
      if (v43 < 0 || v43 >= v34)
        __break(1u);
      ++v43;
      swift_bridgeObjectRelease();
      (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 16))(&v44, v27, v28, v31, v32);
    }
    while (v33 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  v35 = v45;
  *(_QWORD *)a8 = *((_QWORD *)&v44 + 1);
  *(_DWORD *)(a8 + 8) = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void type metadata accessor for TupleTableColumnContent.MakeList()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t static TupleTableColumnContent._tableColumnCount(inputs:)()
{
  uint64_t v1;

  lazy protocol witness table accessor for type TableColumnDescriptor and conformance TableColumnDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  if (*(_QWORD *)(v1 + 16))
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    type metadata accessor for TupleTableColumnContent.CountColumns();
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return 0;
}

void TupleTableColumnContent.MakeList.visit<A>(type:)()
{
  type metadata accessor for TupleTableColumnContent();
}

uint64_t sub_1879AF7AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  v4 = *(_OWORD *)(v0 + 48);
  v18 = *(_OWORD *)(v0 + 32);
  v5 = *(_DWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_DWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 8);
  v16 = v5;
  v17 = v6;
  v19 = v4;
  v20 = *(_OWORD *)(v0 + 64);
  v21 = *(_QWORD *)(v0 + 80);
  v22 = v7;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v1 + 64))(v3 - 68, &v15, v2, v1);
  v8 = *(_QWORD *)(v3 - 64);
  v9 = *(_DWORD *)(v3 - 56);
  v10 = *(_QWORD *)(v0 + 104);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
    v10 = result;
  }
  v13 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v10);
    v10 = result;
  }
  *(_QWORD *)(v10 + 16) = v13 + 1;
  v14 = v10 + 16 * v13;
  *(_QWORD *)(v14 + 32) = v8;
  *(_DWORD *)(v14 + 40) = v9;
  *(_QWORD *)(v0 + 104) = v10;
  return result;
}

void protocol witness for TableColumnTypeVisitor.visit<A>(type:) in conformance TupleTableColumnContent<A, B, C>.MakeList()
{
  TupleTableColumnContent.MakeList.visit<A>(type:)();
}

void TupleTableColumnContent.CountColumns.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  if ((v4[12] & 1) != 0)
    goto LABEL_5;
  v5 = v4[11];
  v6 = *((_DWORD *)v4 + 2);
  v7 = v4[2];
  v8 = *((_DWORD *)v4 + 20);
  v14 = *v4;
  v15 = v6;
  v16 = v7;
  v9 = *(_OWORD *)(v4 + 5);
  v17 = *(_OWORD *)(v4 + 3);
  v18 = v9;
  v19 = *(_OWORD *)(v4 + 7);
  v20 = v4[9];
  v21 = v8;
  v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a4 + 72))(&v14, a3, a4);
  if ((v11 & 1) != 0)
  {
LABEL_5:
    v12 = 0;
    v13 = 1;
    goto LABEL_6;
  }
  v12 = v5 + v10;
  if (!__OFADD__(v5, v10))
  {
    v13 = 0;
LABEL_6:
    v4[11] = v12;
    *((_BYTE *)v4 + 96) = v13;
    return;
  }
  __break(1u);
}

void protocol witness for TableColumnTypeVisitor.visit<A>(type:) in conformance TupleTableColumnContent<A, B, C>.CountColumns(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  TupleTableColumnContent.CountColumns.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance TupleTableColumnContent<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleTableColumnContent._makeContent(content:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a4);
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance TupleTableColumnContent<A, B, C>()
{
  return static TupleTableColumnContent._tableColumnCount(inputs:)();
}

uint64_t Group<A>.init<A, B>(content:)(uint64_t a1, uint64_t a2)
{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return Group.init(_content:)();
}

uint64_t static Group<A>._makeContent(content:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  _BYTE v26[4];

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 20);
  LODWORD(v17) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  v11 = a2[3];
  v12 = a2[4];
  v15 = *(_OWORD *)(a2 + 7);
  v16 = *(_OWORD *)(a2 + 5);
  v13 = a2[9];
  _GraphValue.subscript.getter();
  v17 = v7;
  v18 = v8;
  v19 = v9;
  v20 = v11;
  v21 = v12;
  v22 = v16;
  v23 = v15;
  v24 = v13;
  v25 = v10;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(a4 + 64))(v26, &v17, a3, a4);
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeContent(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

void type metadata accessor for TupleTableColumnContent.CountColumns()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t instantiation function for generic protocol witness table for TupleTableColumnContent<A, B, C>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TupleTableColumnContent<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for TupleTableColumnContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TupleTableColumnContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for TupleTableColumnContent(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 32) - 8) + 8))();
}

uint64_t initializeWithCopy for TupleTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 16))();
  return a1;
}

uint64_t assignWithCopy for TupleTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 24))();
  return a1;
}

uint64_t initializeWithTake for TupleTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for TupleTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 32) - 8) + 40))();
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleTableColumnContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879AFE44 + 4 * byte_187C769A0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TupleTableColumnContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void type metadata accessor for TupleTableColumnContent()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t initializeWithCopy for TupleTableColumnContent.CountColumns(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v4 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleTableColumnContent.CountColumns(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v4 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v4;
  return a1;
}

uint64_t assignWithTake for TupleTableColumnContent.CountColumns(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t FocusedValue.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t **a4@<X8>)
{
  uint64_t v5;

  v5 = *a1;
  *a4 = a1;
  type metadata accessor for FocusedValue.Content(0, *(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v5 + 8) + 16), a2, a3);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for FocusedValue.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusedValue.Content);
}

uint64_t View.focusedValue<A>(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return View.focusedValue<A>(_:_:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in View.focusedValue<A>(_:_:), a5);
}

{
  return View.focusedSceneValue<A>(_:_:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in View.focusedValue<A>(_:_:), a5);
}

uint64_t View.focusedSceneValue<A>(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return View.focusedValue<A>(_:_:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in View.focusedSceneValue<A>(_:_:), a5);
}

{
  return View.focusedSceneValue<A>(_:_:)(a1, a2, a3, a4, (uint64_t)partial apply for closure #1 in View.focusedSceneValue<A>(_:_:), a5);
}

uint64_t View.focusedValue<A>(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[2];

  v24 = a6;
  v10 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a1 + 8);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)v25 - v13;
  (*(void (**)(char *, double))(v11 + 16))((char *)v25 - v13, v12);
  v15 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = a3;
  *((_QWORD *)v16 + 3) = *(_QWORD *)(v10 + 16);
  *((_QWORD *)v16 + 4) = a4;
  *((_QWORD *)v16 + 5) = a1;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], v14, v10);
  v19 = type metadata accessor for FocusedValueModifier(0, v10, v17, v18);
  v25[0] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a5);
  v25[1] = v20;
  v22 = type metadata accessor for ResponderViewModifier(0, v19, (uint64_t)&protocol witness table for FocusedValueModifier<A>, v21);
  swift_retain();
  MEMORY[0x18D75B4AC](v25, a3, v22, a4);
  return swift_release();
}

uint64_t FocusedValues.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char *v33;
  uint64_t AssociatedTypeWitness;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;

  v36 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v33 = (char *)&v33 - v7;
  v9 = type metadata accessor for FocusedValues.Entry(255, a1, a2, v8);
  v10 = type metadata accessor for Optional();
  v35 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v33 - v17;
  v19 = *(_QWORD *)(v9 - 8);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v19 + 56);
  v20((char *)&v33 - v17, 1, 1, v9, v16);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v20)(v13, 1, 1, v9);
  v22 = type metadata accessor for FocusedValuePropertyKey(0, a1, a2, v21);
  v37 = a1;
  v38 = a2;
  v39 = v18;
  v40 = v13;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValuePropertyKey<A>, v22);
  PropertyList.forEach<A>(keyType:_:)();
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (!v23(v13, 1, v9))
  {
    v29 = v33;
    v28 = AssociatedTypeWitness;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v33, &v13[*(int *)(v9 + 36)], AssociatedTypeWitness);
    v30 = 4;
    v27 = v35;
    v26 = v36;
    goto LABEL_5;
  }
  v24 = 1;
  v25 = v23(v18, 1, v9);
  v27 = v35;
  v26 = v36;
  v28 = AssociatedTypeWitness;
  if (!v25)
  {
    v29 = &v18[*(int *)(v9 + 36)];
    v30 = 2;
LABEL_5:
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 8 * v30))(v26, v29, v28);
    v24 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v26, v24, 1, v28);
  v31 = *(void (**)(char *, uint64_t))(v27 + 8);
  v31(v13, v10);
  return ((uint64_t (*)(char *, uint64_t))v31)(v18, v10);
}

uint64_t FocusedValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  void (*v27)(uint64_t, uint64_t);
  char v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = type metadata accessor for FocusedValues.Entry(255, a3, a4, a4);
  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8, v9);
  v44 = (uint64_t)&v42 - v10;
  v46 = a3;
  v47 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v42 - v15;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v42 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, a1, v12, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness) == 1)
  {
    v27 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v27(a1, v12);
    return ((uint64_t (*)(char *, uint64_t))v27)(v16, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v26, v16, AssociatedTypeWitness);
    v29 = *(_BYTE *)(v4 + 8);
    v42 = v4;
    v43 = a1;
    if ((v29 & 2) != 0)
    {
      if (one-time initialization token for scene != -1)
        swift_once();
      v30 = &static FocusedValueScope.scene;
    }
    else
    {
      if (one-time initialization token for view != -1)
        swift_once();
      v30 = &static FocusedValueScope.view;
    }
    v32 = *((_QWORD *)v30 + 1);
    v31 = *((_QWORD *)v30 + 2);
    v33 = *v30;
    swift_bridgeObjectRetain();
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v26, AssociatedTypeWitness);
    v34 = v29 & 1;
    v35 = v44;
    v36 = v33;
    v37 = v31;
    v39 = v46;
    v38 = v47;
    FocusedValues.Entry.init(scope:value:inFocusedViewHierarchy:)(v36, v32, v37, (uint64_t)v21, v34, v46, v47, v44);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v35, 0, 1);
    v41 = type metadata accessor for FocusedValuePropertyKey(0, v39, v38, v40);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValuePropertyKey<A>, v41);
    PropertyList.subscript.setter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v43, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v26, AssociatedTypeWitness);
  }
}

void FocusedValues.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t FocusedValue.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FocusedValue.content.getter(a1, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for FocusedValue.Content, a2);
}

uint64_t FocusedValue.content.setter(uint64_t a1, uint64_t a2)
{
  return FocusedValue.content.setter(a1, a2, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for FocusedValue.Content);
}

uint64_t (*FocusedValue.content.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FocusedValue.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v5 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for FocusedValue.Content(0, v7, a2, a3);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v16 - v12, v5, v8, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = type metadata accessor for Optional();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a4, v13, v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a4, 1, 1, v7);
  }
}

uint64_t static FocusedValue._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized static FocusedValue._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance FocusedValue<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static FocusedValue._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(_QWORD *)(a6 + 16));
}

uint64_t FocusedBinding.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FocusedValue.content.getter(a1, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for FocusedBinding.Content, a2);
}

uint64_t FocusedValue.content.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2(0, *(_QWORD *)(a1 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v3, v5);
}

uint64_t FocusedBinding.content.setter(uint64_t a1, uint64_t a2)
{
  return FocusedValue.content.setter(a1, a2, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for FocusedBinding.Content);
}

uint64_t FocusedValue.content.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v5;

  v5 = a3(0, *(_QWORD *)(a2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v3, a1, v5);
}

uint64_t (*FocusedBinding.content.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FocusedBinding.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t **a4@<X8>)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *a1;
  v6 = (_QWORD *)MEMORY[0x1E0DEE2A8];
  *a4 = a1;
  type metadata accessor for FocusedBinding.Content(0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v6 + v5 + 8) + 16) + 16), a2, a3);
  return swift_storeEnumTagMultiPayload();
}

uint64_t FocusedBinding.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  v30 = a4;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = type metadata accessor for FocusedBinding.Content(0, v6, a2, a3);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v29 - v10;
  v12 = type metadata accessor for Binding();
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v29 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, v5, v7, v20);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v22, v11, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v22, v13);
    v23 = *(_QWORD *)(v12 - 8);
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v17, 1, v12);
    v25 = v30;
    if (v24 == 1)
    {
      v26 = *(void (**)(char *, uint64_t))(v14 + 8);
      v26(v22, v13);
      v26(v17, v13);
      v27 = 1;
    }
    else
    {
      MEMORY[0x18D75B9C8](v12);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v22, v13);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v12);
      v27 = 0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v27 = 1;
    v25 = v30;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v25, v27, 1, v6);
}

uint64_t key path setter for FocusedBinding.wrappedValue : <A>FocusedBinding<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = type metadata accessor for Optional();
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v16 - v9;
  (*(void (**)(char *, uint64_t, double))(v11 + 16))((char *)&v16 - v9, a1, v8);
  v14 = type metadata accessor for FocusedBinding(0, v5, v12, v13);
  return FocusedBinding.wrappedValue.setter((uint64_t)v10, v14);
}

uint64_t FocusedBinding.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;

  v52 = a1;
  v2 = *(_QWORD *)(a2 + 16);
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v48 = (char *)&v46 - v6;
  v49 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FocusedBinding.Content(0, v2, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v46 - v16;
  v18 = type metadata accessor for Binding();
  v51 = type metadata accessor for Optional();
  v19 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v20);
  v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v50 = (char *)&v46 - v26;
  (*(void (**)(char *, char *, uint64_t, double))(v14 + 16))(v17, v53, v13, v25);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v52, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  v47 = v18;
  v53 = v22;
  v27 = v19;
  v28 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v29 = v50;
  v30 = v17;
  v31 = v51;
  v28(v50, v30, v51);
  v32 = v48;
  v33 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v48, v52, v3);
  v34 = v49;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v32, 1, v2) == 1)
  {
    v35 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v35(v33, v3);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v31);
    v36 = v32;
    v37 = v3;
    return ((uint64_t (*)(char *, uint64_t))v35)(v36, v37);
  }
  v39 = v32;
  v40 = v10;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v10, v39, v2);
  v41 = v53;
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v53, v29, v31);
  v42 = v47;
  v43 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v47) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v33, v3);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v2);
    v44 = v41;
    v35 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v45 = v51;
    v35((uint64_t)v50, v51);
    v36 = v44;
    v37 = v45;
    return ((uint64_t (*)(char *, uint64_t))v35)(v36, v37);
  }
  v48 = v40;
  specialized Binding.wrappedValue.setter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v33, v3);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v48, v2);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v50, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v41, v42);
}

void (*FocusedBinding.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = type metadata accessor for Optional();
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  FocusedBinding.wrappedValue.getter(a2, v10, v11, (uint64_t)v9);
  return FocusedBinding.wrappedValue.modify;
}

void FocusedBinding.wrappedValue.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v5 = v2[2];
    v6 = v2[3];
    v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    FocusedBinding.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    FocusedBinding.wrappedValue.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t FocusedBinding.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v45 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for Optional();
  v43 = *(_QWORD *)(v3 - 8);
  v44 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v42 = (char *)&v39 - v5;
  v6 = type metadata accessor for Binding();
  v40 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v39 - v12;
  v16 = type metadata accessor for FocusedBinding.Content(0, v2, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v39 - v19;
  v41 = v6;
  v21 = type metadata accessor for Optional();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  v30 = (char *)&v39 - v29;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v46, v16, v28);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    goto LABEL_5;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v30, v20, v21);
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v30, v21);
  v31 = v40;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v25, 1, v41) == 1)
  {
    v32 = *(void (**)(char *, uint64_t))(v22 + 8);
    v32(v30, v21);
    v32(v25, v21);
LABEL_5:
    v33 = v42;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v42, 1, 1, v2);
    v34 = v44;
    static Binding.constant(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v33, v34);
  }
  v36 = v13;
  v37 = v13;
  v38 = v41;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v37, v25, v41);
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v9, v36, v38);
  Binding.init<A>(_:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v36, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v30, v21);
}

uint64_t static FocusedBinding._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return specialized static FocusedBinding._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance FocusedBinding<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return specialized static FocusedBinding._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4);
}

uint64_t FocusedValueBox.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t Value;
  char v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD v66[5];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 16);
  v73 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v72 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v70 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v63 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v74 = (char *)&v63 - v17;
  v20 = type metadata accessor for FocusedValue.Content(0, v5, v18, v19);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (uint64_t *)((char *)&v63 - v24);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)&v63 - v24, a1, v20, v23);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v67 = v21;
    v68 = v8;
    v27 = *v25;
    v28 = *(_DWORD *)(v75 + 4);
    v29 = *MEMORY[0x1E0CFED28];
    v69 = a1;
    v71 = a3;
    if (v28 == v29)
    {
      LODWORD(v65) = 0;
      *(_QWORD *)v66 = 0;
      v39 = 0;
    }
    else
    {
      Value = AGGraphGetValue();
      v32 = v31;
      v33 = *(_QWORD *)Value;
      v34 = *(unsigned __int8 *)(Value + 8);
      v35 = *(_DWORD *)(Value + 12);
      swift_retain();
      v36 = v32 & 1;
      if (v33 == 1)
        v36 = 0;
      LODWORD(v65) = v36;
      if (v33 == 1)
        v37 = 0;
      else
        v37 = v35;
      if (v33 == 1)
        v38 = 0;
      else
        v38 = v34;
      v66[0] = v38;
      v66[1] = v37;
      if (v33 == 1)
        v39 = 0;
      else
        v39 = v33;
    }
    v40 = v75;
    v41 = (uint64_t *)AGGraphGetValue();
    v44 = *v41;
    v43 = v41[1];
    v45 = *(_QWORD *)(v40 + 8);
    v77 = v27;
    *(_QWORD *)&v66[3] = v44;
    if (v45)
    {
      v64 = v42;
      v76 = v45;
      type metadata accessor for KeyPath();
      swift_retain();
      swift_retain_n();
      swift_retain();
      v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      swift_release();
      v47 = v71;
      if ((v46 & 1) != 0)
      {
        if (((v64 | v65) & 1) == 0)
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v26 = 0;
          v48 = v68;
LABEL_27:
          v61 = v69;
          (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v69, v20);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v61, v75 + *(int *)(v47 + 36), v7);
          swift_storeEnumTagMultiPayload();
          return v26;
        }
LABEL_22:
        v65 = v43;
        v77 = v39;
        v78 = v66[0];
        v79 = v66[1];
        swift_retain();
        v49 = v74;
        swift_getAtKeyPath();
        swift_release();
        v48 = v68;
        v50 = *(void (**)(char *))(v68 + 16);
        *(_QWORD *)&v66[1] = v75 + *(int *)(v47 + 36);
        v50(v14);
        v51 = v73;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v14, 1, v5) == 1)
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v7);
        }
        else
        {
          v52 = v72;
          (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v72, v14, v5);
          v53 = (uint64_t)v70;
          (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v70, v52, v5);
          v54 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56))(v53, 0, 1, v5);
          MEMORY[0x1E0C80A78](v54, v55);
          v56 = v74;
          *(&v63 - 4) = v7;
          *(&v63 - 3) = (uint64_t)v56;
          *((_DWORD *)&v63 - 4) = 3;
          _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v53, (uint64_t)closure #1 in compareValues<A>(_:_:options:)partial apply, (uint64_t)(&v63 - 6), v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v57);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v49 = v74;
          v58 = v77;
          v59 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
          v60 = v53;
          v47 = v71;
          v59(v60, v7);
          (*(void (**)(char *, uint64_t))(v51 + 8))(v72, v5);
          if (v58 == 1)
          {
            v59((uint64_t)v49, v7);
            v26 = 0;
            goto LABEL_27;
          }
        }
        (*(void (**)(_QWORD, char *, uint64_t))(v48 + 40))(*(_QWORD *)&v66[1], v49, v7);
        v26 = 1;
        goto LABEL_27;
      }
    }
    else
    {
      swift_retain();
      swift_retain();
      v47 = v71;
    }
    swift_retain();
    swift_release();
    *(_QWORD *)(v75 + 8) = v27;
    goto LABEL_22;
  }
  (*(void (**)(uint64_t *, uint64_t))(v21 + 8))(v25, v20);
  return 0;
}

uint64_t View.focusedSceneValue<A>(_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v25 = a5;
  v26 = a6;
  v9 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a1 + 8);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v24 - v13;
  (*(void (**)(char *, double))(v11 + 16))((char *)&v24 - v13, v12);
  v15 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = a3;
  *((_QWORD *)v16 + 3) = v10;
  *((_QWORD *)v16 + 4) = a4;
  *((_QWORD *)v16 + 5) = a1;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], v14, v10);
  v19 = type metadata accessor for FocusedValueModifier(0, v9, v17, v18);
  v27[0] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v25);
  v27[1] = v20;
  v22 = type metadata accessor for ResponderViewModifier(0, v19, (uint64_t)&protocol witness table for FocusedValueModifier<A>, v21);
  swift_retain();
  MEMORY[0x18D75B4AC](v27, a3, v22, a4);
  return swift_release();
}

uint64_t FocusedValueModifier.init(keyPath:value:responder:isSceneValue:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  char v5;
  uint64_t v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t result;

  v5 = a4;
  v9 = *a1;
  *a5 = a1;
  v10 = (int *)type metadata accessor for FocusedValueModifier(0, *(_QWORD *)(*MEMORY[0x1E0DEC880] + v9 + 8), a3, a4);
  v11 = (char *)a5 + v10[7];
  v12 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a2, v12);
  *(uint64_t **)((char *)a5 + v10[8]) = (uint64_t *)a3;
  *((_BYTE *)a5 + v10[9]) = v5;
  return result;
}

uint64_t partial apply for closure #1 in View.focusedValue<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  return partial apply for closure #1 in View.focusedValue<A>(_:_:)(a1, 0, a2);
}

{
  return partial apply for closure #1 in View.focusedSceneValue<A>(_:_:)(a1, 0, a2);
}

uint64_t type metadata accessor for FocusedValueModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusedValueModifier);
}

uint64_t closure #1 in View.focusedValue<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t **a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v10 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a2 + 8);
  v11 = type metadata accessor for Optional();
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16 = *(_QWORD *)(v10 + 16);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v19 - v14, a3, v16, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v15, 0, 1, v10);
  FocusedValueModifier.init(keyPath:value:responder:isSceneValue:)(a2, (uint64_t)v15, a1, a4, a5);
  swift_retain();
  return swift_retain();
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v10 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a2 + 8);
  v11 = type metadata accessor for Optional();
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v18 - v14;
  v16 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v18 - v14, a3, v10, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v15, 0, 1, v10);
  FocusedValueModifier.init(keyPath:value:responder:isSceneValue:)(a2, (uint64_t)v15, a1, a4, a5);
  swift_retain();
  return swift_retain();
}

uint64_t partial apply for closure #1 in View.focusedSceneValue<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  return partial apply for closure #1 in View.focusedValue<A>(_:_:)(a1, 1, a2);
}

{
  return partial apply for closure #1 in View.focusedSceneValue<A>(_:_:)(a1, 1, a2);
}

uint64_t partial apply for closure #1 in View.focusedValue<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional() - 8) + 80);
  return closure #1 in View.focusedValue<A>(_:_:)(a1, *(uint64_t **)(v3 + 40), v3 + ((v7 + 48) & ~v7), a2, a3);
}

uint64_t type metadata accessor for FocusedValues.Entry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusedValues.Entry);
}

uint64_t type metadata accessor for FocusedValuePropertyKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusedValuePropertyKey);
}

void FocusedValueModifier.Transform.focusItem.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Value;

  if (*(_DWORD *)(v1 + 8) == *MEMORY[0x1E0CFED28])
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(int64x2_t *)(a1 + 40) = vdupq_n_s64(1uLL);
    *(_DWORD *)(a1 + 56) = 0;
  }
  else
  {
    type metadata accessor for FocusItem?();
    Value = AGGraphGetValue();
    outlined init with copy of FocusItem?(Value, a1);
  }
}

uint64_t FocusedValueModifier.Transform.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t Value;
  char v33;
  char v34;
  void (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t result;
  char *v46;
  char v47;
  uint64_t v48;
  void (*v49)(char *);
  uint64_t (*v50)(char *, uint64_t);
  int v51;
  char *v52;
  void (*v53)(char *, uint64_t, uint64_t);
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  int v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE v95[40];
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[9];

  v2 = v1;
  v98[8] = *MEMORY[0x1E0C80C00];
  v94 = a1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = type metadata accessor for Optional();
  v90 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v85 = (char *)&v80 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v80 - v13;
  v92 = v3;
  v17 = type metadata accessor for FocusedValueModifier(0, v3, v15, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v89 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v86 = (char *)&v80 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v91 = (char *)&v80 - v26;
  v88 = v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v80 - v30;
  Value = AGGraphGetValue();
  v34 = v33;
  v93 = v18;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v35(v31, Value, v17);
  LODWORD(v18) = *(_DWORD *)(v2 + 16);
  v36 = *(unsigned __int8 *)(v2 + 20);
  v37 = *(_DWORD *)AGGraphGetValue() >> 1;
  v87 = v36 | ((_DWORD)v18 != v37);
  if (v36 & 1 | ((_DWORD)v18 != v37))
  {
    *(_DWORD *)(v2 + 16) = v37;
    *(_BYTE *)(v2 + 20) = 0;
    v38 = v94;
    *(_DWORD *)(v2 + *(int *)(v94 + 60)) = 0;
    *(_DWORD *)(v2 + *(int *)(v38 + 64)) = 0;
  }
  v39 = *(int *)(v94 + 60);
  v40 = *(_DWORD *)(v2 + v39);
  v41 = *(_DWORD *)AGGraphGetValue();
  if (v40 == v41)
  {
    v42 = *(int *)(v94 + 64);
    v43 = *(_DWORD *)(v2 + v42);
    if (!v43 || (v44 = v43 - 1, (*(_DWORD *)(v2 + v42) = v44) == 0))
    {
      type metadata accessor for (_:)();
      if (AGGraphGetOutputValue())
        return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v31, v17);
    }
  }
  else
  {
    *(_DWORD *)(v2 + v39) = v41;
    *(_DWORD *)(v2 + *(int *)(v94 + 64)) = 2;
  }
  v84 = v7;
  v46 = v91;
  v35(v91, (uint64_t)v31, v17);
  if ((v34 & 1) == 0)
  {
    v91 = *(char **)(v93 + 8);
    ((void (*)(char *, uint64_t))v91)(v46, v17);
    v47 = v87;
LABEL_16:
    FocusedValueModifier.Transform.focusItem.getter((uint64_t)v95);
    if (v96 == 1 && v97 == 1)
    {
      outlined destroy of FocusItem??((uint64_t)v95);
    }
    else
    {
      outlined init with take of FocusItem?((uint64_t)v95, (uint64_t)v98);
      if (v98[5] || v98[6] != 1)
      {
        v70 = swift_retain();
        v71 = FocusItem.inFocusedResponderChain(_:)(v70);
        swift_release();
        outlined destroy of FocusItem((uint64_t)v98);
        v68 = *(int *)(v94 + 56);
        v69 = *(unsigned __int8 *)(v2 + v68);
        if ((v71 & 1) != v69)
        {
          LOBYTE(v69) = v71;
          goto LABEL_28;
        }
        if ((v47 & 1) != 0)
          goto LABEL_29;
LABEL_32:
        type metadata accessor for (_:)();
        if (AGGraphGetOutputValue())
          return ((uint64_t (*)(char *, uint64_t))v91)(v31, v17);
        goto LABEL_29;
      }
      outlined destroy of FocusItem?((uint64_t)v98);
    }
    v68 = *(int *)(v94 + 56);
    if ((*(_BYTE *)(v2 + v68) & 1) != 0)
    {
      LOBYTE(v69) = 0;
LABEL_28:
      *(_BYTE *)(v2 + v68) = v69 & 1;
      goto LABEL_29;
    }
    LOBYTE(v69) = 0;
    if ((v47 & 1) != 0)
    {
LABEL_29:
      DisplayList.Version.init(forUpdate:)();
      v90 = v98[0];
      v72 = v89;
      v35(v89, (uint64_t)v31, v17);
      v73 = v93;
      v74 = (*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
      v75 = v31;
      v76 = v74 + v88;
      v77 = swift_allocObject();
      v78 = v92;
      *(_QWORD *)(v77 + 16) = *(_QWORD *)(v94 + 16);
      *(_QWORD *)(v77 + 24) = v78;
      (*(void (**)(unint64_t, char *, uint64_t))(v73 + 32))(v77 + v74, v72, v17);
      *(_BYTE *)(v77 + v76) = v69 & 1;
      v31 = v75;
      v79 = swift_allocObject();
      *(_QWORD *)(v79 + 16) = v90;
      *(_BYTE *)(v79 + 24) = v69 & 1;
      *(_QWORD *)(v79 + 32) = partial apply for closure #1 in FocusedValueModifier.Transform.updateValue();
      *(_QWORD *)(v79 + 40) = v77;
      v98[0] = partial apply for closure #2 in FocusedValueModifier.Transform.updateValue();
      v98[1] = v79;
      type metadata accessor for (_:)();
      AGGraphSetOutputValue();
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v91)(v31, v17);
    }
    goto LABEL_32;
  }
  v82 = v31;
  v48 = v90;
  v49 = *(void (**)(char *))(v90 + 16);
  v83 = v2 + *(int *)(v94 + 52);
  v49(v14);
  v80 = *(_QWORD *)(v92 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t))(v80 + 48);
  v51 = v50(v14, 1);
  v81 = *(void (**)(char *, uint64_t))(v48 + 8);
  v81(v14, v4);
  v52 = v86;
  v53 = v35;
  v35(v86, (uint64_t)v46, v17);
  if (v51 == 1)
  {
    v54 = *(void (**)(char *, uint64_t))(v93 + 8);
    v54(v52, v17);
    v91 = (char *)v54;
    v54(v46, v17);
    v31 = v82;
    v55 = v83;
    goto LABEL_15;
  }
  v56 = v84;
  v55 = v83;
  ((void (*)(char *, uint64_t, uint64_t))v49)(v84, v83, v4);
  v57 = v92;
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v50)(v56, 1, v92);
  if ((_DWORD)result != 1)
  {
    v58 = v4;
    v59 = v80;
    v60 = (uint64_t)v85;
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v85, v56, v57);
    v61 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v60, 0, 1, v57);
    MEMORY[0x1E0C80A78](v61, v62);
    *(&v80 - 4) = v58;
    *(&v80 - 3) = v63;
    *((_DWORD *)&v80 - 4) = 3;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v60, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)(&v80 - 6), v58, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v64);
    v65 = v98[0];
    v81((char *)v60, v58);
    v66 = *(void (**)(char *, uint64_t))(v93 + 8);
    v66(v52, v17);
    v67 = v91;
    v91 = (char *)v66;
    v66(v67, v17);
    v4 = v58;
    v31 = v82;
    v35 = v53;
    v47 = v87;
    if ((v65 & 1) != 0)
      goto LABEL_16;
LABEL_15:
    (*(void (**)(uint64_t, char *, uint64_t))(v90 + 24))(v55, &v31[*(int *)(v17 + 28)], v4);
    v47 = 1;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in FocusedValueModifier.Transform.updateValue()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  _BYTE v27[12];
  int v28;

  v28 = a3;
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v27[-v11];
  v13 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = &v27[-v20];
  v24 = type metadata accessor for FocusedValueModifier(0, a5, v22, v23);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, a2 + *(int *)(v24 + 28), v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a5) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v21, v12, a5);
  if (*(_BYTE *)(a2 + *(int *)(v24 + 36)))
    v26 = 2;
  else
    v26 = 0;
  *(_BYTE *)(a1 + 8) = v26 & 0xFE | v28 & 1;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16))(v17, v21, a5);
  swift_setAtWritableKeyPath();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v21, a5);
}

uint64_t closure #2 in FocusedValueModifier.Transform.updateValue()(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v10 = *a1;
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
    v10 = result;
  }
  v13 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v10);
    v10 = result;
  }
  *(_QWORD *)(v10 + 16) = v13 + 1;
  v14 = v10 + 32 * v13;
  *(_QWORD *)(v14 + 32) = a2;
  *(_BYTE *)(v14 + 40) = a3 & 1;
  *(_QWORD *)(v14 + 48) = a4;
  *(_QWORD *)(v14 + 56) = a5;
  *a1 = v10;
  return result;
}

uint64_t FocusedValueModifier.Transform.init(viewPhase:modifier:focusItem:updateSeed:resetSeed:content:isFocused:lastUpdateSeed:ttl:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, uint64_t a11, uint64_t a12)
{
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_DWORD *)(a9 + 16) = a5;
  *(_BYTE *)(a9 + 20) = BYTE4(a5) & 1;
  v16 = (int *)type metadata accessor for FocusedValueModifier.Transform(0, a11, a12, a4);
  v17 = a9 + v16[13];
  v18 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a6, v18);
  *(_BYTE *)(a9 + v16[14]) = a7;
  *(_DWORD *)(a9 + v16[15]) = a8;
  *(_DWORD *)(a9 + v16[16]) = a10;
  return result;
}

double static FocusedValueModifier._makeView(modifier:inputs:body:)@<D0>(__int128 *a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  _OWORD v9[5];
  int v10;
  uint64_t v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;

  v4 = a1[3];
  v5 = a1[1];
  v15 = a1[2];
  v16 = v4;
  v6 = a1[3];
  v17 = a1[4];
  v7 = a1[1];
  v13 = *a1;
  v14 = v7;
  v9[2] = v15;
  v9[3] = v6;
  v9[4] = a1[4];
  v18 = *((_DWORD *)a1 + 20);
  v10 = *((_DWORD *)a1 + 20);
  v9[0] = v13;
  v9[1] = v5;
  a2(&v11);
  *(_QWORD *)&v9[0] = v16;
  DWORD2(v9[0]) = DWORD2(v16);
  outlined retain of [Text.Modifier]((uint64_t)v9);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v11;
  result = v12;
  a3[1] = v12;
  return result;
}

uint64_t implicit closure #1 in static FocusedValueModifier._makeView(modifier:inputs:body:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  int v41;
  int v42;
  id v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[16];
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  _OWORD v55[3];
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[3];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v6, v7);
  v48 = (char *)&v39 - v8;
  v49 = type metadata accessor for FocusedValueModifier.Transform(0, a3, a3, v9);
  v50 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v10);
  v47 = (uint64_t)&v39 - v11;
  v12 = *(_OWORD *)(a1 + 48);
  v55[1] = *(_OWORD *)(a1 + 32);
  v55[2] = v12;
  v56 = *(_OWORD *)(a1 + 64);
  LODWORD(v57) = *(_DWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 16);
  v54 = *(_OWORD *)a1;
  v55[0] = v13;
  v46 = _ViewInputs.viewPhase.getter();
  LODWORD(v54) = a2;
  type metadata accessor for FocusedValueModifier(255, a3, v14, v15);
  type metadata accessor for _GraphValue();
  v45 = _GraphValue.value.getter();
  v16 = *(_OWORD *)(a1 + 16);
  v60[0] = *(_OWORD *)a1;
  v60[1] = v16;
  v60[2] = *(_OWORD *)(a1 + 32);
  outlined retain of _ViewInputs(a1);
  outlined retain of _GraphInputs((uint64_t)v60);
  lazy protocol witness table accessor for type FocusedItemInputKey and conformance FocusedItemInputKey();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v60);
  outlined release of _ViewInputs(a1);
  v44 = v54;
  type metadata accessor for GraphHost();
  v17 = MEMORY[0x18D75C118]();
  swift_beginAccess();
  v18 = *(void **)(v17 + 16);
  v19 = *(void **)(v17 + 24);
  v20 = *(void **)(v17 + 32);
  v21 = *(_BYTE *)(v17 + 40);
  v40 = *(unsigned __int8 *)(v17 + 41);
  v42 = *(_DWORD *)(v17 + 68);
  v22 = *(_QWORD *)(v17 + 72);
  v41 = *(_DWORD *)(v17 + 80);
  v23 = *(_QWORD *)(v17 + 88);
  v24 = *(_QWORD *)(v17 + 112);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v43 = v18;
  v25 = v19;
  v26 = v20;
  v39 = *(_OWORD *)(v17 + 44);
  v27 = *(_QWORD *)(v17 + 60);
  v28 = *(_QWORD *)(v17 + 96);
  v29 = *(_QWORD *)(v17 + 104);
  swift_release();
  *(_QWORD *)&v54 = v18;
  *((_QWORD *)&v54 + 1) = v25;
  *(_QWORD *)&v55[0] = v26;
  BYTE8(v55[0]) = v21;
  BYTE9(v55[0]) = v40;
  *(_OWORD *)((char *)v55 + 12) = v39;
  *(_QWORD *)((char *)&v55[1] + 12) = v27;
  DWORD1(v55[2]) = v42;
  *((_QWORD *)&v55[2] + 1) = v22;
  LODWORD(v56) = v41;
  *((_QWORD *)&v56 + 1) = v23;
  v57 = v28;
  v58 = v29;
  v59 = v24;
  v30 = GraphHost.Data.$updateSeed.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  v31 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v48, 1, 1, a3);
  LOBYTE(v54) = 1;
  v37 = a3;
  v38 = a3;
  v32 = v47;
  FocusedValueModifier.Transform.init(viewPhase:modifier:focusItem:updateSeed:resetSeed:content:isFocused:lastUpdateSeed:ttl:)(v46, v45, v44, v30, 0x100000000, v31, 0, -1, v47, 0, v37, v38);
  v33 = v49;
  v52 = v49;
  v53 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValueModifier<A>.Transform<A1>, v49);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v32, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_26, (uint64_t)v51, v33, MEMORY[0x1E0DEDCE8], v34, MEMORY[0x1E0DEDD18], v35);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v32, v33);
  return v54;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance FocusedValueModifier<A>@<D0>(__int128 *a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  return static FocusedValueModifier._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance FocusedValueModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValueModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusedValueList.Key(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t result;
  uint64_t v4;

  a2(&v4);
  result = specialized Array.append<A>(contentsOf:)(*a1);
  *a1 = v4;
  return result;
}

uint64_t FocusedValues.Entry.init(scope:value:inFocusedViewHierarchy:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  *(_DWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  v11 = type metadata accessor for FocusedValues.Entry(0, a6, a7, a4);
  v12 = a8 + *(int *)(v11 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v12, a4, AssociatedTypeWitness);
  *(_BYTE *)(a8 + *(int *)(v11 + 40)) = a5;
  return result;
}

uint64_t closure #1 in FocusedValues.subscript.getter(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  _BYTE *v23;
  void (*v24)(_BYTE *, uint64_t, uint64_t, double);
  unsigned int (*v25)(_BYTE *, uint64_t, uint64_t);
  void (*v27)(uint64_t, _BYTE *, uint64_t);
  int v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  void (*v32)(_BYTE *, uint64_t);
  int v33;
  uint64_t v34;
  _BYTE v35[12];
  int v36;
  uint64_t v37;
  void (*v38)(uint64_t, _BYTE *, uint64_t);
  uint64_t v39;
  _BYTE *v40;

  v40 = a3;
  v8 = type metadata accessor for FocusedValues.Entry(255, a5, a6, a4);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v35[-v16];
  v18 = *(_QWORD *)(v8 - 8);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = &v35[-v22];
  v24 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v10 + 16);
  v24(v17, a1, v9, v21);
  v25 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48);
  if (v25(v17, 1, v8) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v17, v9);
  v27 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32);
  v37 = a4;
  v38 = v27;
  v27((uint64_t)v23, v17, v8);
  v28 = *(_DWORD *)v23;
  v29 = one-time initialization token for scene;
  v39 = *((_QWORD *)v23 + 2);
  swift_bridgeObjectRetain();
  if (v29 != -1)
    swift_once();
  v30 = v40;
  if (static FocusedValueScope.scene == v28)
  {
    v36 = v28;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v24)(v13, v40, v9);
    if (v25(v13, 1, v8) == 1)
    {
      swift_bridgeObjectRelease();
      v31 = v30;
      v32 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
      v32(v13, v9);
      v32(v31, v9);
      v38((uint64_t)v31, v23, v8);
      return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v31, 0, 1, v8);
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
    v28 = v36;
  }
  if (one-time initialization token for view != -1)
    swift_once();
  v33 = static FocusedValueScope.view;
  swift_bridgeObjectRelease();
  if (v33 != v28 || v23[*(int *)(v8 + 40)] != 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v18 + 8))(v23, v8);
  v34 = v37;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v37, v9);
  v38(v34, v23, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v34, 0, 1, v8);
}

uint64_t partial apply for closure #1 in FocusedValues.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in FocusedValues.subscript.getter(a1, a2, *(_BYTE **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void (*FocusedValues.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v9[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v13 = malloc(v12);
  v9[7] = v13;
  FocusedValues.subscript.getter(a3, a4, (uint64_t)v13);
  return FocusedValues.subscript.modify;
}

void FocusedValues.subscript.modify(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  if ((a2 & 1) != 0)
  {
    v5 = v2[4];
    v6 = v2[5];
    v7 = v2[2];
    v8 = v2[1];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    FocusedValues.subscript.setter((uint64_t)v3, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    FocusedValues.subscript.setter((*a1)[7], a2, v2[1], v2[2]);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t static FocusedValuePropertyKey.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for FocusedValues.Entry(0, a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a4, 1, 1, v5);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance FocusedValuePropertyKey<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return static FocusedValuePropertyKey.defaultValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

void one-time initialization function for scene()
{
  int v0;
  int v1;

  v0 = static ViewIdentity.nextSeed;
  if ((static ViewIdentity.nextSeed + 1) > 1)
    v1 = static ViewIdentity.nextSeed + 1;
  else
    v1 = 1;
  static ViewIdentity.nextSeed = v1;
  static FocusedValueScope.scene = v0;
  qword_1EDF00318 = 0x656E656353;
  unk_1EDF00320 = 0xE500000000000000;
}

void one-time initialization function for view()
{
  int v0;
  int v1;

  v0 = static ViewIdentity.nextSeed;
  if ((static ViewIdentity.nextSeed + 1) > 1)
    v1 = static ViewIdentity.nextSeed + 1;
  else
    v1 = 1;
  static ViewIdentity.nextSeed = v1;
  static FocusedValueScope.view = v0;
  qword_1EDF00330 = 2003134806;
  unk_1EDF00338 = 0xE400000000000000;
}

uint64_t specialized static FocusedValue._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v15[2];
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v5 = a3;
  v15[1] = a1;
  v6 = type metadata accessor for FocusedValueBox(0, a4, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v15 - v9;
  LODWORD(v9) = *(_DWORD *)(v5 + 8);
  v11 = *(_QWORD *)(v5 + 16);
  v12 = *(_QWORD *)(v5 + 40);
  v16 = *(_QWORD *)v5;
  v17 = v9;
  v18 = v11;
  v19 = *(_OWORD *)(v5 + 24);
  v20 = v12;
  LODWORD(v5) = _GraphInputs.environment.getter();
  lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v13 = v16;
  *((_QWORD *)v10 + 1) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(&v10[*(int *)(v6 + 36)], 1, 1, a4);
  *(_DWORD *)v10 = v5;
  *((_DWORD *)v10 + 1) = v13;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValueBox<A>, v6);
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t type metadata accessor for FocusedBinding.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusedBinding.Content);
}

uint64_t specialized static FocusedBinding._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD v16[2];
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v16[1] = a1;
  v4 = type metadata accessor for Binding();
  v7 = type metadata accessor for FocusedValueBox(0, v4, v5, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v16 - v10;
  LODWORD(v10) = *((_DWORD *)a3 + 2);
  v12 = a3[2];
  v13 = a3[5];
  v17 = *a3;
  v18 = v10;
  v19 = v12;
  v20 = *(_OWORD *)(a3 + 3);
  v21 = v13;
  LODWORD(a3) = _GraphInputs.environment.getter();
  lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v14 = v17;
  *((_QWORD *)v11 + 1) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(&v11[*(int *)(v7 + 36)], 1, 1, v4);
  *(_DWORD *)v11 = (_DWORD)a3;
  *((_DWORD *)v11 + 1) = v14;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValueBox<A>, v7);
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t objectdestroy_5Tm_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.focusedSceneValue<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) - 8) + 80);
  return closure #1 in View.focusedValue<A>(_:_:)(a1, *(uint64_t **)(v3 + 40), v3 + ((v4 + 48) & ~v4), a2, a3);
}

uint64_t sub_1879B39F8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for FocusedBinding(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  return FocusedBinding.wrappedValue.getter(v5, v6, v7, a4);
}

uint64_t sub_1879B3A34()
{
  return 8;
}

_QWORD *sub_1879B3A40(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata completion function for FocusedValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for FocusedValue(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD))type metadata accessor for FocusedValue.Content);
}

uint64_t destroy for FocusedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  if (*(_DWORD *)(v4 + 84))
    v5 = *(_QWORD *)(v4 + 64);
  else
    v5 = *(_QWORD *)(v4 + 64) + 1;
  if (v5 <= 8)
    v5 = 8;
  v6 = *(unsigned __int8 *)(a1 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 != 1)
    return swift_release();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

_QWORD *initializeWithCopy for FocusedValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 <= 8)
    v8 = 8;
  else
    v8 = v7;
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  if (v9 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    *((_BYTE *)a1 + v8) = 1;
  }
  else
  {
    *a1 = *a2;
    *((_BYTE *)a1 + v8) = 0;
    swift_retain();
  }
  return a1;
}

_QWORD *assignWithCopy for FocusedValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    if (v7 <= 8)
      v8 = 8;
    else
      v8 = v7;
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
        (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
    }
    else
    {
      swift_release();
    }
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v8) = 0;
      swift_retain();
    }
  }
  return a1;
}

_QWORD *initializeWithTake for FocusedValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 <= 8)
    v8 = 8;
  else
    v8 = v7;
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  if (v9 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
      v11 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v11 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  return a1;
}

_QWORD *assignWithTake for FocusedValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    if (v7 <= 8)
      v8 = 8;
    else
      v8 = v7;
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
        (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
    }
    else
    {
      swift_release();
    }
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
        v13 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
        v13 = 1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusedValue(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(v3 + 64);
  if (!v4)
    ++v5;
  v6 = 8;
  if (v5 > 8)
    v6 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_23;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 < 2)
    {
LABEL_23:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 2)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_23;
LABEL_16:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 255);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879B42AC + 4 * byte_187C76B03[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for FocusedValue(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  if (!v6)
    ++v7;
  if (v7 <= 8)
    v7 = 8;
  v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v10 = a2 - 255;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t type metadata accessor for FocusedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusedValue);
}

uint64_t type metadata completion function for FocusedValue.Content()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusedValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = v8;
  if ((v7 & 0x1000F8) != 0 || (unint64_t)(v9 + 1) > 0x18)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
LABEL_22:
    swift_retain();
    return v4;
  }
  v12 = *((unsigned __int8 *)a2 + v9);
  if (v12 >= 2)
  {
    if (v9 <= 3)
      v13 = v9;
    else
      v13 = 4;
    __asm { BR              X12 }
  }
  if (v12 != 1)
  {
    *a1 = *a2;
    *((_BYTE *)a1 + v9) = 0;
    goto LABEL_22;
  }
  if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(v4, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(v4, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  }
  *((_BYTE *)v4 + v9) = 1;
  return v4;
}

uint64_t destroy for FocusedValue.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  if (*(_DWORD *)(v4 + 84))
    v5 = *(_QWORD *)(v4 + 64);
  else
    v5 = *(_QWORD *)(v4 + 64) + 1;
  if (v5 <= 8)
    v5 = 8;
  v6 = *(unsigned __int8 *)(a1 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 != 1)
    return swift_release();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

_QWORD *initializeWithCopy for FocusedValue.Content(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 <= 8)
    v8 = 8;
  else
    v8 = v7;
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  if (v9 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    *((_BYTE *)a1 + v8) = 1;
  }
  else
  {
    *a1 = *a2;
    *((_BYTE *)a1 + v8) = 0;
    swift_retain();
  }
  return a1;
}

_QWORD *assignWithCopy for FocusedValue.Content(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    if (v7 <= 8)
      v8 = 8;
    else
      v8 = v7;
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
        (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
    }
    else
    {
      swift_release();
    }
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      *a1 = *a2;
      *((_BYTE *)a1 + v8) = 0;
      swift_retain();
    }
  }
  return a1;
}

_QWORD *initializeWithTake for FocusedValue.Content(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84))
    v7 = *(_QWORD *)(v6 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 <= 8)
    v8 = 8;
  else
    v8 = v7;
  v9 = *((unsigned __int8 *)a2 + v8);
  if (v9 >= 2)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  if (v9 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v7);
      v11 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v11 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    v11 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v8) = v11;
  return a1;
}

_QWORD *assignWithTake for FocusedValue.Content(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    if (v7 <= 8)
      v8 = 8;
    else
      v8 = v7;
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v9 == 1)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
        (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
    }
    else
    {
      swift_release();
    }
    v11 = *((unsigned __int8 *)a2 + v8);
    if (v11 >= 2)
    {
      if (v8 <= 3)
        v12 = v8;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
        v13 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
        v13 = 1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      v13 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v8) = v13;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusedValue.Content(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(v3 + 64);
  if (!v4)
    ++v5;
  v6 = 8;
  if (v5 > 8)
    v6 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_23;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v11 < 2)
    {
LABEL_23:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 2)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_23;
LABEL_16:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 255);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879B4EFC + 4 * byte_187C76B39[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for FocusedValue.Content(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  if (!v6)
    ++v7;
  if (v7 <= 8)
    v7 = 8;
  v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v10 = a2 - 255;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for FocusedValue.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_DWORD *)(v2 + 84);
  v4 = *(_QWORD *)(v2 + 64);
  if (!v3)
    ++v4;
  v5 = 8;
  if (v4 > 8)
    v5 = v4;
  if (*(unsigned __int8 *)(a1 + v5) < 2u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v6 = v5;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879B5150 + 4 * byte_187C76B47[v6]))();
}

_BYTE *destructiveInjectEnumTag for FocusedValue.Content(_BYTE *result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  size_t v7;
  char v8;
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v6;
  if (v6 <= 8)
    v7 = 8;
  else
    v7 = v6;
  if (a2 > 1)
  {
    if (v7 <= 3)
      v8 = ((a2 - 2) >> (8 * v7)) + 2;
    else
      v8 = 2;
    result[v7] = v8;
    if (v7 >= 4)
      v9 = 4;
    else
      v9 = v7;
    bzero(result, v7);
    __asm { BR              X10 }
  }
  result[v7] = a2;
  return result;
}

uint64_t type metadata completion function for FocusedBinding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for FocusedValue(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD))type metadata accessor for FocusedBinding.Content);
}

uint64_t type metadata completion function for FocusedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319, *(_QWORD *)(a1 + 16));
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for FocusedBinding(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = ((v4 + 16) & ~v4) + *(_QWORD *)(v3 + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = *(unsigned __int8 *)(a1 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 != 1)
    return swift_release();
  v8 = ~v4;
  v9 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v9 + v4 + 8) & v8);
    if ((_DWORD)result)
      return result;
LABEL_16:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(((unint64_t)v9 + v4 + 8) & v8, v2);
  }
  v10 = *v9;
  if ((unint64_t)*v9 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  result = (v10 + 1);
  if ((_DWORD)v10 == -1)
    goto LABEL_16;
  return result;
}

_QWORD *initializeWithCopy for FocusedBinding(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v10 = __src[v9];
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 1)
  {
    v12 = ~v7;
    v13 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v13 + v7 + 8) & v12))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
LABEL_18:
        *((_BYTE *)__dst + v9) = 1;
        return __dst;
      }
    }
    else
    {
      v14 = *v13;
      if ((unint64_t)*v13 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((_DWORD)v14 != -1)
        goto LABEL_14;
    }
    *__dst = *(_QWORD *)__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v13;
    v16 = ((unint64_t)v15 + v7 + 8) & v12;
    v17 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v17(v16, ((unint64_t)v13 + v7 + 8) & v12, v5);
    goto LABEL_18;
  }
  *__dst = *(_QWORD *)__src;
  *((_BYTE *)__dst + v9) = 0;
  swift_retain();
  return __dst;
}

unsigned __int8 *assignWithCopy for FocusedBinding(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(uint64_t, unint64_t, uint64_t);

  if (__dst == __src)
    return __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64);
  v10 = ((v8 + 16) & ~v8) + v9;
  if (v10 <= 8)
    v11 = 8;
  else
    v11 = ((v8 + 16) & ~v8) + v9;
  v12 = __dst[v11];
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X12 }
  }
  v14 = ~v8;
  if (v12 == 1)
  {
    v15 = (uint64_t *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) == 0)
    {
      v16 = *v15;
      if ((unint64_t)*v15 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      if ((_DWORD)v16 != -1)
        goto LABEL_19;
      goto LABEL_18;
    }
    if (!(*(unsigned int (**)(unint64_t, _QWORD, _QWORD))(v6 + 48))(((unint64_t)v15 + v8 + 8) & v14, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)))
    {
LABEL_18:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v15 + v8 + 8) & v14, v5);
    }
  }
  else
  {
    swift_release();
  }
LABEL_19:
  v17 = __src[v11];
  if (v17 >= 2)
  {
    if (v11 <= 3)
      v18 = v11;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  if (v17 == 1)
  {
    v19 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v19 + v8 + 8) & v14, v7, v5))
      {
LABEL_29:
        memcpy(__dst, __src, v10);
LABEL_33:
        __dst[v11] = 1;
        return __dst;
      }
    }
    else
    {
      v20 = *v19;
      if ((unint64_t)*v19 >= 0xFFFFFFFF)
        LODWORD(v20) = -1;
      if ((_DWORD)v20 != -1)
        goto LABEL_29;
    }
    *(_QWORD *)__dst = *(_QWORD *)__src;
    v21 = (_QWORD *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v19;
    v22 = ((unint64_t)v21 + v8 + 8) & v14;
    v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v23(v22, ((unint64_t)v19 + v8 + 8) & v14, v5);
    goto LABEL_33;
  }
  *(_QWORD *)__dst = *(_QWORD *)__src;
  __dst[v11] = 0;
  swift_retain();
  return __dst;
}

_QWORD *initializeWithTake for FocusedBinding(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v10 = __src[v9];
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 1)
  {
    v12 = ~v7;
    v13 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v13 + v7 + 8) & v12))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
LABEL_18:
        v15 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      v14 = *v13;
      if ((unint64_t)*v13 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((_DWORD)v14 != -1)
        goto LABEL_14;
    }
    *__dst = *(_QWORD *)__src;
    v16 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v16 = *v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v16 + v7 + 8) & v12, ((unint64_t)v13 + v7 + 8) & v12, v5);
    goto LABEL_18;
  }
  v15 = 0;
  *__dst = *(_QWORD *)__src;
LABEL_19:
  *((_BYTE *)__dst + v9) = v15;
  return __dst;
}

unsigned __int8 *assignWithTake for FocusedBinding(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned int *)(v6 + 84);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = *(_QWORD *)(v6 + 64);
    v10 = ((v8 + 16) & ~v8) + v9;
    if (v10 <= 8)
      v11 = 8;
    else
      v11 = ((v8 + 16) & ~v8) + v9;
    v12 = __dst[v11];
    if (v12 >= 2)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    v14 = ~v8;
    if (v12 != 1)
    {
      swift_release();
      goto LABEL_19;
    }
    v15 = (uint64_t *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, _QWORD, _QWORD))(v6 + 48))(((unint64_t)v15 + v8 + 8) & v14, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)))
      {
        goto LABEL_19;
      }
    }
    else
    {
      v16 = *v15;
      if ((unint64_t)*v15 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      if ((_DWORD)v16 != -1)
      {
LABEL_19:
        v17 = __src[v11];
        if (v17 >= 2)
        {
          if (v11 <= 3)
            v18 = v11;
          else
            v18 = 4;
          __asm { BR              X12 }
        }
        if (v17 != 1)
        {
          v21 = 0;
          *(_QWORD *)__dst = *(_QWORD *)__src;
LABEL_34:
          __dst[v11] = v21;
          return __dst;
        }
        v19 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v19 + v8 + 8) & v14, v7, v5))
          {
LABEL_29:
            memcpy(__dst, __src, v10);
LABEL_33:
            v21 = 1;
            goto LABEL_34;
          }
        }
        else
        {
          v20 = *v19;
          if ((unint64_t)*v19 >= 0xFFFFFFFF)
            LODWORD(v20) = -1;
          if ((_DWORD)v20 != -1)
            goto LABEL_29;
        }
        *(_QWORD *)__dst = *(_QWORD *)__src;
        v22 = (_QWORD *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
        *v22 = *v19;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v22 + v8 + 8) & v14, ((unint64_t)v19 + v8 + 8) & v14, v5);
        goto LABEL_33;
      }
    }
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v15 + v8 + 8) & v14, v5);
    goto LABEL_19;
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for FocusedBinding(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8)
    v3 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879B5DAC + 4 * byte_187C76B73[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for FocusedBinding(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t type metadata accessor for FocusedBinding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusedBinding);
}

uint64_t type metadata completion function for FocusedBinding.Content()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FocusedBinding(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(uint64_t, unint64_t, uint64_t);

  v4 = __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v6 + 64);
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = ((v7 + 16) & ~(unint64_t)v7) + *(_QWORD *)(v6 + 64);
  v11 = v7 & 0x100000;
  if (v8 > 7 || v11 != 0 || v10 + 1 > 0x18)
  {
    v14 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  }
  else
  {
    v15 = __src[v10];
    if (v15 >= 2)
    {
      if (v10 <= 3)
        v16 = v10;
      else
        v16 = 4;
      __asm { BR              X12 }
    }
    if (v15 == 1)
    {
      v17 = ~v8;
      v18 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
      {
        if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v18 + v8 + 8) & v17))
        {
LABEL_23:
          memcpy(v4, __src, v9);
LABEL_28:
          *((_BYTE *)v4 + v10) = 1;
          return v4;
        }
      }
      else
      {
        v19 = *v18;
        if ((unint64_t)*v18 >= 0xFFFFFFFF)
          LODWORD(v19) = -1;
        if ((_DWORD)v19 != -1)
          goto LABEL_23;
      }
      *v4 = *(_QWORD *)__src;
      v20 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v20 = *v18;
      v21 = ((unint64_t)v20 + v8 + 8) & v17;
      v22 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
      swift_retain();
      swift_retain();
      v22(v21, ((unint64_t)v18 + v8 + 8) & v17, v5);
      goto LABEL_28;
    }
    *(_QWORD *)__dst = *(_QWORD *)__src;
    __dst[v10] = 0;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for FocusedBinding.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = ((v4 + 16) & ~v4) + *(_QWORD *)(v3 + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = *(unsigned __int8 *)(a1 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 != 1)
    return swift_release();
  v8 = ~v4;
  v9 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v9 + v4 + 8) & v8);
    if ((_DWORD)result)
      return result;
LABEL_16:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(((unint64_t)v9 + v4 + 8) & v8, v2);
  }
  v10 = *v9;
  if ((unint64_t)*v9 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  result = (v10 + 1);
  if ((_DWORD)v10 == -1)
    goto LABEL_16;
  return result;
}

_QWORD *initializeWithCopy for FocusedBinding.Content(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v10 = __src[v9];
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 1)
  {
    v12 = ~v7;
    v13 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v13 + v7 + 8) & v12))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
LABEL_18:
        *((_BYTE *)__dst + v9) = 1;
        return __dst;
      }
    }
    else
    {
      v14 = *v13;
      if ((unint64_t)*v13 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((_DWORD)v14 != -1)
        goto LABEL_14;
    }
    *__dst = *(_QWORD *)__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v13;
    v16 = ((unint64_t)v15 + v7 + 8) & v12;
    v17 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v17(v16, ((unint64_t)v13 + v7 + 8) & v12, v5);
    goto LABEL_18;
  }
  *__dst = *(_QWORD *)__src;
  *((_BYTE *)__dst + v9) = 0;
  swift_retain();
  return __dst;
}

unsigned __int8 *assignWithCopy for FocusedBinding.Content(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(uint64_t, unint64_t, uint64_t);

  if (__dst == __src)
    return __dst;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64);
  v10 = ((v8 + 16) & ~v8) + v9;
  if (v10 <= 8)
    v11 = 8;
  else
    v11 = ((v8 + 16) & ~v8) + v9;
  v12 = __dst[v11];
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X12 }
  }
  v14 = ~v8;
  if (v12 == 1)
  {
    v15 = (uint64_t *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) == 0)
    {
      v16 = *v15;
      if ((unint64_t)*v15 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      if ((_DWORD)v16 != -1)
        goto LABEL_19;
      goto LABEL_18;
    }
    if (!(*(unsigned int (**)(unint64_t, _QWORD, _QWORD))(v6 + 48))(((unint64_t)v15 + v8 + 8) & v14, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)))
    {
LABEL_18:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v15 + v8 + 8) & v14, v5);
    }
  }
  else
  {
    swift_release();
  }
LABEL_19:
  v17 = __src[v11];
  if (v17 >= 2)
  {
    if (v11 <= 3)
      v18 = v11;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  if (v17 == 1)
  {
    v19 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v19 + v8 + 8) & v14, v7, v5))
      {
LABEL_29:
        memcpy(__dst, __src, v10);
LABEL_33:
        __dst[v11] = 1;
        return __dst;
      }
    }
    else
    {
      v20 = *v19;
      if ((unint64_t)*v19 >= 0xFFFFFFFF)
        LODWORD(v20) = -1;
      if ((_DWORD)v20 != -1)
        goto LABEL_29;
    }
    *(_QWORD *)__dst = *(_QWORD *)__src;
    v21 = (_QWORD *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v19;
    v22 = ((unint64_t)v21 + v8 + 8) & v14;
    v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v23(v22, ((unint64_t)v19 + v8 + 8) & v14, v5);
    goto LABEL_33;
  }
  *(_QWORD *)__dst = *(_QWORD *)__src;
  __dst[v11] = 0;
  swift_retain();
  return __dst;
}

_QWORD *initializeWithTake for FocusedBinding.Content(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v10 = __src[v9];
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 1)
  {
    v12 = ~v7;
    v13 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v13 + v7 + 8) & v12))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
LABEL_18:
        v15 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      v14 = *v13;
      if ((unint64_t)*v13 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      if ((_DWORD)v14 != -1)
        goto LABEL_14;
    }
    *__dst = *(_QWORD *)__src;
    v16 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v16 = *v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v16 + v7 + 8) & v12, ((unint64_t)v13 + v7 + 8) & v12, v5);
    goto LABEL_18;
  }
  v15 = 0;
  *__dst = *(_QWORD *)__src;
LABEL_19:
  *((_BYTE *)__dst + v9) = v15;
  return __dst;
}

unsigned __int8 *assignWithTake for FocusedBinding.Content(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned int *)(v6 + 84);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v9 = *(_QWORD *)(v6 + 64);
    v10 = ((v8 + 16) & ~v8) + v9;
    if (v10 <= 8)
      v11 = 8;
    else
      v11 = ((v8 + 16) & ~v8) + v9;
    v12 = __dst[v11];
    if (v12 >= 2)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    v14 = ~v8;
    if (v12 != 1)
    {
      swift_release();
      goto LABEL_19;
    }
    v15 = (uint64_t *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, _QWORD, _QWORD))(v6 + 48))(((unint64_t)v15 + v8 + 8) & v14, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)))
      {
        goto LABEL_19;
      }
    }
    else
    {
      v16 = *v15;
      if ((unint64_t)*v15 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      if ((_DWORD)v16 != -1)
      {
LABEL_19:
        v17 = __src[v11];
        if (v17 >= 2)
        {
          if (v11 <= 3)
            v18 = v11;
          else
            v18 = 4;
          __asm { BR              X12 }
        }
        if (v17 != 1)
        {
          v21 = 0;
          *(_QWORD *)__dst = *(_QWORD *)__src;
LABEL_34:
          __dst[v11] = v21;
          return __dst;
        }
        v19 = (uint64_t *)((unint64_t)(__src + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v19 + v8 + 8) & v14, v7, v5))
          {
LABEL_29:
            memcpy(__dst, __src, v10);
LABEL_33:
            v21 = 1;
            goto LABEL_34;
          }
        }
        else
        {
          v20 = *v19;
          if ((unint64_t)*v19 >= 0xFFFFFFFF)
            LODWORD(v20) = -1;
          if ((_DWORD)v20 != -1)
            goto LABEL_29;
        }
        *(_QWORD *)__dst = *(_QWORD *)__src;
        v22 = (_QWORD *)((unint64_t)(__dst + 15) & 0xFFFFFFFFFFFFFFF8);
        *v22 = *v19;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v22 + v8 + 8) & v14, ((unint64_t)v19 + v8 + 8) & v14, v5);
        goto LABEL_33;
      }
    }
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v15 + v8 + 8) & v14, v5);
    goto LABEL_19;
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for FocusedBinding.Content(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8)
    v3 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879B6CDC + 4 * byte_187C76BA9[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for FocusedBinding.Content(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for FocusedBinding.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8)
    v2 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879B6F38 + 4 * byte_187C76BB7[v3]))();
}

_BYTE *destructiveInjectEnumTag for FocusedBinding.Content(_BYTE *result, unsigned int a2, uint64_t a3)
{
  size_t v3;
  char v4;
  int v5;

  v3 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    if (v3 <= 8)
      v3 = 8;
    if (v3 <= 3)
      v4 = ((a2 - 2) >> (8 * v3)) + 2;
    else
      v4 = 2;
    result[v3] = v4;
    if (v3 >= 4)
      v5 = 4;
    else
      v5 = v3;
    bzero(result, v3);
    __asm { BR              X10 }
  }
  if (v3 <= 8)
    v3 = 8;
  result[v3] = a2;
  return result;
}

uint64_t assignWithTake for FocusedValues(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t sub_1879B70B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for Optional();
  v5 = type metadata accessor for FocusedValueModifier(255, v2, v3, v4);
  type metadata accessor for ResponderViewModifier(255, v5, (uint64_t)&protocol witness table for FocusedValueModifier<A>, v6);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = v1;
  v9[1] = &protocol witness table for ResponderViewModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v9);
}

ValueMetadata *type metadata accessor for FocusedValues.StorageOptions()
{
  return &type metadata for FocusedValues.StorageOptions;
}

uint64_t type metadata completion function for FocusedValues.Entry()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusedValues.Entry(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || v7 + ((v6 + 24) & (unint64_t)~v6) + 1 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v11 = AssociatedTypeWitness;
    v12 = ~v6;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v13 = a2[2];
    a1[1] = a2[1];
    a1[2] = v13;
    v14 = (char *)a1 + v6;
    v15 = (char *)a2 + v6;
    v16 = (unint64_t)(v14 + 24) & v12;
    v17 = (unint64_t)(v15 + 24) & v12;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v18(v16, v17, v11);
    *(_BYTE *)(v16 + v7) = *(_BYTE *)(v17 + v7);
  }
  return a1;
}

uint64_t destroy for FocusedValues.Entry(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t initializeWithCopy for FocusedValues.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 24 + a1) & ~v7;
  v9 = (v7 + 24 + a2) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, AssociatedTypeWitness);
  *(_BYTE *)(v8 + *(_QWORD *)(v6 + 64)) = *(_BYTE *)(v9 + *(_QWORD *)(v6 + 64));
  return a1;
}

uint64_t assignWithCopy for FocusedValues.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24 + a1) & ~v6;
  v8 = (v6 + 24 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v7, v8, AssociatedTypeWitness);
  *(_BYTE *)(v7 + *(_QWORD *)(v5 + 64)) = *(_BYTE *)(v8 + *(_QWORD *)(v5 + 64));
  return a1;
}

uint64_t initializeWithTake for FocusedValues.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24 + a1) & ~v6;
  v8 = (v6 + 24 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7, v8, AssociatedTypeWitness);
  *(_BYTE *)(v7 + *(_QWORD *)(v5 + 64)) = *(_BYTE *)(v8 + *(_QWORD *)(v5 + 64));
  return a1;
}

uint64_t assignWithTake for FocusedValues.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 24 + a1) & ~v7;
  v9 = (v7 + 24 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(v8, v9, AssociatedTypeWitness);
  *(_BYTE *)(v8 + *(_QWORD *)(v6 + 64)) = *(_BYTE *)(v9 + *(_QWORD *)(v6 + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusedValues.Entry(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (a2 <= v6)
    goto LABEL_24;
  v8 = *(_QWORD *)(v4 + 64) + ((v7 + 24) & ~v7) + 1;
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v12 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_24:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 24) & ~v7);
      v15 = *(_QWORD *)(a1 + 16);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_24;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v14 = v8;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  return v6 + v13 + 1;
}

void storeEnumTagSinglePayload for FocusedValues.Entry(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64)
     + ((*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + 1;
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) + ((*(unsigned __int8 *)(v6 + 80) + 24) & ~*(unsigned __int8 *)(v6 + 80)) != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata completion function for FocusedValueModifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusedValueModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  void *v14;
  const void *v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  unint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = v6 & 0x100000;
  v11 = *a2;
  *a1 = *a2;
  if (v7 > 7 || v10 != 0 || ((v8 + 7 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    a1 = (uint64_t *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    v14 = (void *)(((unint64_t)a1 + v7 + 8) & ~v7);
    v15 = (const void *)(((unint64_t)a2 + v7 + 8) & ~v7);
    v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v16(v15, 1, v4))
    {
      memcpy(v14, v15, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v14, v15, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    }
    v17 = ((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)v15 + v9) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for FocusedValueModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return swift_release();
}

_QWORD *initializeWithCopy for FocusedValueModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);
  int v10;
  size_t v11;
  size_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_retain();
  if (v9(v8, 1, v4))
  {
    v10 = *(_DWORD *)(v5 + 84);
    v11 = *(_QWORD *)(v5 + 64);
    if (v10)
      v12 = v11;
    else
      v12 = v11 + 1;
    memcpy(v7, v8, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v10 = *(_DWORD *)(v5 + 84);
    v11 = *(_QWORD *)(v5 + 64);
  }
  if (v10)
    v13 = v11;
  else
    v13 = v11 + 1;
  v14 = ((unint64_t)v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for FocusedValueModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
  v10 = (void *)(((unint64_t)a2 + v8 + 8) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  v16 = ((unint64_t)v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  swift_retain();
  swift_release();
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  return a1;
}

_QWORD *initializeWithTake for FocusedValueModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = ((unint64_t)v7 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  return a1;
}

_QWORD *assignWithTake for FocusedValueModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
  v10 = (void *)(((unint64_t)a2 + v8 + 8) & ~v8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(v9, 1, v6);
  v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v9, v10, v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  v16 = ((unint64_t)v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  swift_release();
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusedValueModifier(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    v10 = ((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 9;
    v11 = (a2 - v7 + 255) >> (8 * v10);
    if (v10 < 4)
      v12 = v11 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    __asm { BR              X16 }
  }
  if ((v6 & 0x80000000) != 0)
  {
    v17 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v9 + 8) & ~v9);
    if (v17 >= 2)
      return v17 - 1;
    else
      return 0;
  }
  else
  {
    v16 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v16) = -1;
    return (v16 + 1);
  }
}

void storeEnumTagSinglePayload for FocusedValueModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((v11 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  if (v10 < a3)
  {
    v13 = (a3 - v10 + 255) >> (8 * v12);
    if (v12 <= 3)
      v14 = v13 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v6 = v15;
    else
      v6 = 0;
  }
  if (v10 < a2)
  {
    if (v12 >= 4)
      v16 = ~v10 + a2;
    else
      v16 = (~(_BYTE)v10 + a2);
    bzero(a1, v12);
    if ((_DWORD)v12 == 1)
      *a1 = v16;
    else
      *(_DWORD *)a1 = v16;
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

void sub_1879B8310()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1879B83C8);
}

void sub_1879B8318(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1879B8320);
  JUMPOUT(0x1879B83C8);
}

void sub_1879B8330()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879B83C8);
}

void sub_1879B8338()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879B83C8);
}

void sub_1879B8340(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((v2 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x1879B83C4);
      JUMPOUT(0x1879B83C0);
    }
    JUMPOUT(0x1879B834CLL);
  }
  JUMPOUT(0x1879B83C8);
}

void sub_1879B83B8()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x1879B83C8);
}

void sub_1879B83FC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1879B83C8);
}

void sub_1879B8404()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1879B83C8);
}

void sub_1879B8414()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1879B83C8);
}

_UNKNOWN **base witness table accessor for ViewModifier in FocusedValueModifier<A>()
{
  return &protocol witness table for FocusedValueModifier<A>;
}

unint64_t lazy protocol witness table accessor for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions;
  if (!lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValues.StorageOptions, &type metadata for FocusedValues.StorageOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions;
  if (!lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValues.StorageOptions, &type metadata for FocusedValues.StorageOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions;
  if (!lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValues.StorageOptions, &type metadata for FocusedValues.StorageOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions;
  if (!lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValues.StorageOptions, &type metadata for FocusedValues.StorageOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValues.StorageOptions and conformance FocusedValues.StorageOptions);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static FocusedValueModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static FocusedValueModifier._makeView(modifier:inputs:body:)(*(_QWORD *)(v0 + 24), *(_DWORD *)(v0 + 32), *(_QWORD *)(v0 + 16));
}

uint64_t type metadata accessor for FocusedValueModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusedValueModifier.Transform);
}

uint64_t type metadata accessor for FocusedValueBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusedValueBox);
}

uint64_t type metadata completion function for FocusedValueBox()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusedValueBox(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  unint64_t v13;
  int v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  const void *v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v14 = *(_DWORD *)a2;
    v13 = (unint64_t)a2 + 7;
    *(_DWORD *)a1 = v14;
    v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v15 = *(_DWORD *)(v13 & 0xFFFFFFFFFFFFFCLL);
    v16 = (_QWORD *)(((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFFFF8);
    v17 = (_QWORD *)(((v13 & 0xFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
    *v16 = *v17;
    v18 = (void *)(((unint64_t)v16 + v7 + 8) & ~v7);
    v19 = (const void *)(((unint64_t)v17 + v7 + 8) & ~v7);
    v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v20(v19, 1, v4))
    {
      memcpy(v18, v19, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v18, v19, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for FocusedValueBox(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v3 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return result;
}

_DWORD *initializeWithCopy for FocusedValueBox(_DWORD *a1, int *a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  size_t v15;

  v5 = *a2;
  v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFCLL);
  v7 = (_QWORD *)(((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((v4 & 0xFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  v13 = (const void *)(((unint64_t)v8 + v11 + 8) & ~v11);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  if (v14(v13, 1, v9))
  {
    if (*(_DWORD *)(v10 + 84))
      v15 = *(_QWORD *)(v10 + 64);
    else
      v15 = *(_QWORD *)(v10 + 64) + 1;
    memcpy(v12, v13, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v12, v13, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
  }
  return a1;
}

_DWORD *assignWithCopy for FocusedValueBox(_DWORD *a1, int *a2, uint64_t a3)
{
  unint64_t v5;
  int v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  size_t v17;

  v6 = *a2;
  v5 = (unint64_t)a2 + 7;
  *a1 = v6;
  v7 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_QWORD *)(((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((v5 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  swift_retain();
  swift_release();
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (void *)(((unint64_t)v8 + v12 + 8) & ~v12);
  v14 = (void *)(((unint64_t)v9 + v12 + 8) & ~v12);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v9) = v15(v13, 1, v10);
  v16 = v15(v14, 1, v10);
  if ((_DWORD)v9)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v13, v14, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      return a1;
    }
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v13, v14, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (*(_DWORD *)(v11 + 84))
    v17 = *(_QWORD *)(v11 + 64);
  else
    v17 = *(_QWORD *)(v11 + 64) + 1;
  memcpy(v13, v14, v17);
  return a1;
}

_DWORD *initializeWithTake for FocusedValueBox(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  size_t v13;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_QWORD *)(((unint64_t)v4 + 11) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v5 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v6 + v10 + 8) & ~v10);
  v12 = (const void *)(((unint64_t)v7 + v10 + 8) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v12, 1, v8))
  {
    if (*(_DWORD *)(v9 + 84))
      v13 = *(_QWORD *)(v9 + 64);
    else
      v13 = *(_QWORD *)(v9 + 64) + 1;
    memcpy(v11, v12, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v11, v12, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
  }
  return a1;
}

_DWORD *assignWithTake for FocusedValueBox(_DWORD *a1, int *a2, uint64_t a3)
{
  unint64_t v5;
  int v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  size_t v17;

  v6 = *a2;
  v5 = (unint64_t)a2 + 7;
  *a1 = v6;
  v7 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFCLL);
  v8 = (_QWORD *)(((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((v5 & 0xFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  swift_release();
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (void *)(((unint64_t)v8 + v12 + 8) & ~v12);
  v14 = (void *)(((unint64_t)v9 + v12 + 8) & ~v12);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v9) = v15(v13, 1, v10);
  v16 = v15(v14, 1, v10);
  if ((_DWORD)v9)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v13, v14, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      return a1;
    }
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v13, v14, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (*(_DWORD *)(v11 + 84))
    v17 = *(_QWORD *)(v11 + 64);
  else
    v17 = *(_QWORD *)(v11 + 64) + 1;
  memcpy(v13, v14, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusedValueBox(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 16) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      v17 = (unint64_t *)((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8);
      if (v6 > 0x7FFFFFFE)
      {
        v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v9 + 8) & ~v9);
        if (v19 >= 2)
          return v19 - 1;
        else
          return 0;
      }
      else
      {
        v18 = *v17;
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        if ((v18 + 1) >= 2)
          return v18;
        else
          return 0;
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void storeEnumTagSinglePayload for FocusedValueBox(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_1879B906C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1879B9074()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1879B9094()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1879B90A4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1879B90AC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata completion function for FocusedValueModifier.Transform()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusedValueModifier.Transform(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  void *v22;
  const void *v23;
  unint64_t v24;
  unint64_t v25;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7
    || v9 != 0
    || ((((((v7 + 21) & ~v7) + v8) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v13 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v14 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v13 = *v14;
    v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v15 = *v16;
    v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFCLL);
    v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v17 = *v18;
    v19 = ((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v20 = ((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v21 = *(_DWORD *)v20;
    *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
    *(_DWORD *)v19 = v21;
    v22 = (void *)((v19 + v7 + 5) & ~v7);
    v23 = (const void *)((v20 + v7 + 5) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v23, 1, v4))
    {
      memcpy(v22, v23, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v22, v23, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, v4);
    }
    *((_BYTE *)v22 + v8) = *((_BYTE *)v23 + v8);
    v24 = ((unint64_t)v22 + v8) & 0xFFFFFFFFFFFFFFFCLL;
    v25 = ((unint64_t)v23 + v8) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)(v24 + 4) = *(_DWORD *)(v25 + 4);
    *(_DWORD *)((v24 + 11) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((v25 + 11) & 0xFFFFFFFFFFFFFCLL);
  }
  return v3;
}

uint64_t destroy for FocusedValueModifier.Transform(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
      + *(unsigned __int8 *)(v3 + 80)
      + 5) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return result;
}

_DWORD *initializeWithCopy for FocusedValueModifier.Transform(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  size_t v19;
  size_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v4;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v6;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v9 = *v8;
  v10 = ((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = ((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  *(_DWORD *)v10 = v12;
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (char *)((v15 + 5 + v10) & ~v15);
  v17 = (char *)((v15 + 5 + v11) & ~v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v17, 1, v13))
  {
    v18 = *(_DWORD *)(v14 + 84);
    v19 = *(_QWORD *)(v14 + 64);
    if (v18)
      v20 = v19;
    else
      v20 = v19 + 1;
    memcpy(v16, v17, v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v17, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v13);
    v18 = *(_DWORD *)(v14 + 84);
    v19 = *(_QWORD *)(v14 + 64);
  }
  if (v18)
    v21 = v19;
  else
    v21 = v19 + 1;
  v22 = (unint64_t)&v16[v21];
  v23 = (unint64_t)&v17[v21];
  *(_BYTE *)v22 = *(_BYTE *)v23;
  v22 &= 0xFFFFFFFFFFFFFFFCLL;
  v23 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v22 + 4) = *(_DWORD *)(v23 + 4);
  *(_DWORD *)((v22 + 11) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((v23 + 11) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithCopy for FocusedValueModifier.Transform(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v4;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v6;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v9 = *v8;
  v10 = ((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = ((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  *(_DWORD *)v10 = v12;
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (char *)((v15 + 5 + v10) & ~v15);
  v17 = (char *)((v15 + 5 + v11) & ~v15);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v19 = v18(v16, 1, v13);
  v20 = v18(v17, 1, v13);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v17, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v13);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v16, v17, v13);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  if (*(_DWORD *)(v14 + 84))
    v21 = *(_QWORD *)(v14 + 64);
  else
    v21 = *(_QWORD *)(v14 + 64) + 1;
  memcpy(v16, v17, v21);
LABEL_10:
  if (*(_DWORD *)(v14 + 84))
    v22 = *(_QWORD *)(v14 + 64);
  else
    v22 = *(_QWORD *)(v14 + 64) + 1;
  v23 = (unint64_t)&v16[v22];
  v24 = (unint64_t)&v17[v22];
  *(_BYTE *)v23 = *(_BYTE *)v24;
  v23 &= 0xFFFFFFFFFFFFFFFCLL;
  v24 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v23 + 4) = *(_DWORD *)(v24 + 4);
  *(_DWORD *)((v23 + 11) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((v24 + 11) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *initializeWithTake for FocusedValueModifier.Transform(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  size_t v19;
  size_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v4;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v6;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v9 = *v8;
  v10 = ((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = ((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  *(_DWORD *)v10 = v12;
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (char *)((v15 + 5 + v10) & ~v15);
  v17 = (char *)((v15 + 5 + v11) & ~v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v17, 1, v13))
  {
    v18 = *(_DWORD *)(v14 + 84);
    v19 = *(_QWORD *)(v14 + 64);
    if (v18)
      v20 = v19;
    else
      v20 = v19 + 1;
    memcpy(v16, v17, v20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v17, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v13);
    v18 = *(_DWORD *)(v14 + 84);
    v19 = *(_QWORD *)(v14 + 64);
  }
  if (v18)
    v21 = v19;
  else
    v21 = v19 + 1;
  v22 = (unint64_t)&v16[v21];
  v23 = (unint64_t)&v17[v21];
  *(_BYTE *)v22 = *(_BYTE *)v23;
  v22 &= 0xFFFFFFFFFFFFFFFCLL;
  v23 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v22 + 4) = *(_DWORD *)(v23 + 4);
  *(_DWORD *)((v22 + 11) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((v23 + 11) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithTake for FocusedValueModifier.Transform(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  *a1 = *a2;
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v5 = *v4;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v6;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v9 = *v8;
  v10 = ((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = ((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  *(_DWORD *)v10 = v12;
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (char *)((v15 + 5 + v10) & ~v15);
  v17 = (char *)((v15 + 5 + v11) & ~v15);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v19 = v18(v16, 1, v13);
  v20 = v18(v17, 1, v13);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v17, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v13);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v16, v17, v13);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  if (*(_DWORD *)(v14 + 84))
    v21 = *(_QWORD *)(v14 + 64);
  else
    v21 = *(_QWORD *)(v14 + 64) + 1;
  memcpy(v16, v17, v21);
LABEL_10:
  if (*(_DWORD *)(v14 + 84))
    v22 = *(_QWORD *)(v14 + 64);
  else
    v22 = *(_QWORD *)(v14 + 64) + 1;
  v23 = (unint64_t)&v16[v22];
  v24 = (unint64_t)&v17[v22];
  *(_BYTE *)v23 = *(_BYTE *)v24;
  v23 &= 0xFFFFFFFFFFFFFFFCLL;
  v24 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v23 + 4) = *(_DWORD *)(v24 + 4);
  *(_DWORD *)((v23 + 11) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((v24 + 11) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusedValueModifier.Transform(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    if (((((((((v9 + 21) & ~v9) + v8) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4) & 0xFFFFFFFC) != 0)
      v10 = 2;
    else
      v10 = a2 - v7 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    __asm { BR              X17 }
  }
  v13 = (((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
       + v9
       + 5) & ~v9;
  if (v6 < 0xFE)
  {
    v16 = *(unsigned __int8 *)(v13 + v8);
    if (v16 >= 2)
      return ((v16 + 2147483646) & 0x7FFFFFFF) + 1;
    return 0;
  }
  v14 = (*(uint64_t (**)(unint64_t))(v4 + 48))(v13);
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for FocusedValueModifier.Transform(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if (((((((*(unsigned __int8 *)(v7 + 80) + 21) & ~*(unsigned __int8 *)(v7 + 80)) + (_DWORD)v11) & 0xFFFFFFFC) + 11) & 0xFFFFFFFC) == 0xFFFFFFFC)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if (((((((*(unsigned __int8 *)(v7 + 80) + 21) & ~*(unsigned __int8 *)(v7 + 80)) + (_DWORD)v11) & 0xFFFFFFFC) + 11) & 0xFFFFFFFC) != 0xFFFFFFFC)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((((((*(unsigned __int8 *)(v7 + 80) + 21) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11) & 0xFFFFFFFFFFFFFFFCLL)+ 11) & 0xFFFFFFFFFFFFFFFCLL)+ 4);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

uint64_t sub_1879B9BCC@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t result;

  *(_BYTE *)(v14 + v15) = 0;
  if (a1)
  {
    v16 = (_BYTE *)((((((((((v14 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                   + v13
                   + 5) & v10);
    if (v11 < 0xFE)
    {
      v16[a2] = a1 + 1;
    }
    else if (v11 >= a1)
    {
      return (*(uint64_t (**)(_BYTE *, _QWORD))(v12 + 56))(v16, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v17 = a2;
      else
        v17 = 4;
      bzero(v16, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_1879B9CC8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1879B9CD8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

ValueMetadata *type metadata accessor for FocusedValueList.Key()
{
  return &type metadata for FocusedValueList.Key;
}

ValueMetadata *type metadata accessor for FocusedValuesInputKey()
{
  return &type metadata for FocusedValuesInputKey;
}

uint64_t initializeBufferWithCopyOfBuffer for FocusedValueScope(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FocusedValueScope(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FocusedValueScope(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FocusedValueScope()
{
  return &type metadata for FocusedValueScope;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in FocusedValueBox<A>()
{
  return &protocol witness table for FocusedValue<A>;
}

void base witness table accessor for _AttributeBody in FocusedValueModifier<A>.Transform<A1>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_1879B9E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v4 + 24);
  v6 = type metadata accessor for FocusedValueModifier(0, v5, a3, a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  swift_release();
  v8 = v4 + ((v7 + 32) & ~v7) + *(int *)(v6 + 28);
  v9 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FocusedValueModifier.Transform.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(type metadata accessor for FocusedValueModifier(0, v7, a3, a4) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return closure #1 in FocusedValueModifier.Transform.updateValue()(a1, v4 + v9, *(unsigned __int8 *)(v4 + v9 + *(_QWORD *)(v8 + 64)), v6, v7);
}

uint64_t sub_1879B9F74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in FocusedValueModifier.Transform.updateValue()(uint64_t *a1)
{
  uint64_t v1;

  return closure #2 in FocusedValueModifier.Transform.updateValue()(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t initializeWithCopy for FocusedValueList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FocusedValueList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FocusedValueList.Item(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FocusedValueList.Item()
{
  return &type metadata for FocusedValueList.Item;
}

uint64_t closure #1 in compareValues<A>(_:_:options:)partial apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0(a1, a2, a3, a4, a5, a6, a7, a8);
}

ValueMetadata *type metadata accessor for NavigationDestinationBuilder()
{
  return &type metadata for NavigationDestinationBuilder;
}

uint64_t Subview.traits.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 88);
  return swift_bridgeObjectRetain();
}

uint64_t Subview.containerValues.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 88);
  return swift_bridgeObjectRetain();
}

Swift::Int Subview.ID.hashValue.getter()
{
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t Subview.isSelected<A>(selection:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  _QWORD v16[2];

  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v16 - v7;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(_QWORD *)(v2 + 88);
  ViewTraitCollection.tag<A>(for:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v14 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v8, a2);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, a2);
  }
  return v14 & 1;
}

uint64_t Subview.tagValue<A>(for:)()
{
  return ViewTraitCollection.tagValue<A>(for:)();
}

uint64_t static Subview._makeView(view:inputs:)()
{
  type metadata accessor for _GraphValue<Subview>();
  _GraphValue.subscript.getter();
  return static _VariadicView_Children.Element._makeView(view:inputs:)();
}

void type metadata accessor for _GraphValue<Subview>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<Subview>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Subview>);
  }
}

uint64_t static Subview._makeViewList(view:inputs:)()
{
  type metadata accessor for _GraphValue<Subview>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _ViewListInputs.traits.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type MergeTraits and conformance MergeTraits();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewListInputs.traits.setter();
  static _ViewListOutputs.unaryViewList<A>(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance Subview()
{
  type metadata accessor for _GraphValue<Subview>();
  _GraphValue.subscript.getter();
  return static _VariadicView_Children.Element._makeView(view:inputs:)();
}

void protocol witness for View.body.getter in conformance Subview()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t MergeTraits.value.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    v4 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  AGGraphGetValue();
  result = ViewTraitCollection.mergeValues(_:)();
  *a2 = v4;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance MergeTraits@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return MergeTraits.value.getter(*v1, a1);
}

uint64_t Subview.ID.toCustomIDRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AnyHashable(v1, a1);
}

unint64_t lazy protocol witness table accessor for type MergeTraits and conformance MergeTraits()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MergeTraits and conformance MergeTraits;
  if (!lazy protocol witness table cache variable for type MergeTraits and conformance MergeTraits)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MergeTraits, &unk_1E1AAFB78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MergeTraits and conformance MergeTraits);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in Subview()
{
  return &protocol witness table for Subview;
}

uint64_t initializeWithCopy for Subview(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  id v7;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Subview(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v4 = *(void **)(a1 + 80);
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Subview(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Subview()
{
  return &type metadata for Subview;
}

ValueMetadata *type metadata accessor for Subview.ID()
{
  return &type metadata for Subview.ID;
}

void *type metadata accessor for MergeTraits()
{
  return &unk_1E1AAFB78;
}

uint64_t EnvironmentValues.areMultimodalBadgesEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.areMultimodalBadgesEnabled.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.navigationBarHost.setter(uint64_t a1)
{
  return EnvironmentValues.preferredPencilDoubleTapAction.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationBarHostKey>, (uint64_t)&type metadata for NavigationBarHostKey, (uint64_t)&protocol witness table for NavigationBarHostKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.multimodalListLayout.setter(uint64_t a1)
{
  return EnvironmentValues.preferredPencilDoubleTapAction.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<MultimodalListLayoutKey>, (uint64_t)&type metadata for MultimodalListLayoutKey, (uint64_t)&protocol witness table for MultimodalListLayoutKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.multimodalListLayout.getter()
{
  return EnvironmentValues.fileDialogDefaultDirectory.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<MultimodalListLayoutKey>, (uint64_t)&type metadata for MultimodalListLayoutKey, (uint64_t)&protocol witness table for MultimodalListLayoutKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t NavigationBarHost.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t EnvironmentValues.navigationBarHost.getter()
{
  return EnvironmentValues.fileDialogDefaultDirectory.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationBarHostKey>, (uint64_t)&type metadata for NavigationBarHostKey, (uint64_t)&protocol witness table for NavigationBarHostKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>);
}

SwiftUI::NavigationBarHost_optional __swiftcall NavigationBarHost.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (SwiftUI::NavigationBarHost_optional)rawValue;
}

void *static NavigationBarHost.allCases.getter()
{
  return &outlined read-only object #0 of static NavigationBarHost.allCases.getter;
}

unint64_t lazy protocol witness table accessor for type [NavigationBarHost] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [NavigationBarHost] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NavigationBarHost] and conformance [A])
  {
    type metadata accessor for [NavigationBarHost]();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [NavigationBarHost] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [NavigationBarHost]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [NavigationBarHost])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [NavigationBarHost]);
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance NavigationBarHost(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance NavigationBarHost;
}

uint64_t storeEnumTagSinglePayload for NavigationBarHost(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1879BAEE0 + 4 * byte_187C77495[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1879BAF14 + 4 * byte_187C77490[v4]))();
}

uint64_t sub_1879BAF14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879BAF1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1879BAF24);
  return result;
}

uint64_t sub_1879BAF30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1879BAF38);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1879BAF3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879BAF44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BadgesEnabledKey()
{
  return &type metadata for BadgesEnabledKey;
}

ValueMetadata *type metadata accessor for MultimodalListLayoutKey()
{
  return &type metadata for MultimodalListLayoutKey;
}

ValueMetadata *type metadata accessor for NavigationBarHostKey()
{
  return &type metadata for NavigationBarHostKey;
}

uint64_t type metadata completion function for NavigationStackCoordinator()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  int64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  int64_t v15;
  int v16;
  char v17;
  uint64_t *v18;
  BOOL v19;
  char v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  const void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t *__return_ptr, _QWORD *);
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  int64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  int64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  void *v65;
  unint64_t v66;
  char v67;
  char v68;
  id v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t result;
  char v82;
  _QWORD *v83;
  int64_t v84;
  char v86;
  unsigned __int16 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t *v93;
  int v94;
  int v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  void (*v99)(_QWORD *__return_ptr, _QWORD);
  uint64_t v100;
  char v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD v106[4];
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  char v112;
  uint64_t v113;
  _BYTE v114[480];
  uint64_t v115;
  char v116;
  _BYTE v117[7];
  int64_t v118;
  char v119;
  void (*v120)(_QWORD *__return_ptr, _QWORD);
  uint64_t v121;
  _OWORD v122[4];
  char v123;
  char v124;
  _BYTE __dst[423];
  _DWORD v126[2];
  char v127;
  _DWORD v128[2];
  _DWORD v129[2];
  char v130;
  _QWORD v131[52];
  _QWORD v132[2];
  char v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  _BYTE v137[304];
  uint64_t v138[38];
  _QWORD v139[8];
  unsigned __int16 v140;
  _BYTE v141[392];
  _BYTE v142[416];
  unint64_t v143;

  v92 = *(_QWORD *)a1;
  v10 = *(_BYTE *)(a1 + 8);
  v129[0] = *(_DWORD *)(a1 + 9);
  *(_DWORD *)((char *)v129 + 3) = *(_DWORD *)(a1 + 12);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned __int8 *)(a1 + 24);
  v128[0] = *(_DWORD *)(a1 + 25);
  *(_DWORD *)((char *)v128 + 3) = *(_DWORD *)(a1 + 28);
  v100 = *(_QWORD *)(a1 + 32);
  v13 = *(_BYTE *)(a1 + 40);
  v14 = *(_DWORD *)(a1 + 41);
  *(_DWORD *)((char *)v126 + 3) = *(_DWORD *)(a1 + 44);
  v126[0] = v14;
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(unsigned __int8 *)(a1 + 56);
  memcpy(__dst, (const void *)(a1 + 57), sizeof(__dst));
  v17 = v10 & 1;
  v142[392] = v10 & 1;
  v130 = v10;
  v127 = v13;
  v124 = v10 & 1;
  v98 = *(_QWORD *)(a1 + 488);
  v99 = *(void (**)(_QWORD *__return_ptr, _QWORD))(a1 + 480);
  swift_retain();
  outlined retain of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>(a1);
  v18 = (uint64_t *)(a2 + 16);
  v91 = v15;
  v95 = v16;
  if (v15)
    v19 = 0;
  else
    v19 = v16 == 2;
  v20 = v19;
  v86 = v20;
  if (v11)
    v21 = 0;
  else
    v21 = (_DWORD)v12 == 2;
  v22 = !v21;
  v82 = v22;
  v83 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v84 = v11;
  v23 = v92;
  v24 = v12;
  v94 = v12;
  v93 = v18;
  while ((v17 & 1) != 0)
  {
    if (!v127)
      goto LABEL_106;
LABEL_24:
    if (!(_BYTE)v24)
    {
      if (v95)
        goto LABEL_32;
LABEL_29:
      if (v11 == v91)
        goto LABEL_30;
      goto LABEL_32;
    }
    if (v24 == 1)
    {
      if (v95 != 1)
        goto LABEL_32;
      goto LABEL_29;
    }
    if ((v86 & 1) != 0)
    {
LABEL_30:
      v123 = 0;
      memset(v122, 0, sizeof(v122));
      goto LABEL_80;
    }
LABEL_32:
    memcpy(v131, &__dst[7], sizeof(v131));
    if ((v130 & 1) != 0)
    {
      if ((v17 & 1) == 0)
        goto LABEL_109;
    }
    else
    {
      v26 = v92;
      if ((v17 & 1) == 0)
        goto LABEL_36;
    }
LABEL_49:
    if ((v127 & 1) != 0)
    {
      if ((v17 & 1) != 0)
        goto LABEL_108;
    }
    else
    {
      if ((v17 & 1) != 0)
        goto LABEL_107;
      if (v23 >= v100)
      {
        if (v100 < v23)
          goto LABEL_99;
        if ((_BYTE)v24)
        {
          if (v24 == 1)
          {
            if (v95 != 1)
              goto LABEL_110;
            if (v11 >= v91)
              goto LABEL_101;
          }
          else if ((v86 & 1) != 0)
          {
            goto LABEL_102;
          }
        }
        else if (v95)
        {
          if (v95 != 1)
            goto LABEL_112;
        }
        else if (v11 >= v91)
        {
          goto LABEL_105;
        }
      }
    }
    outlined init with take of NavigationState.Base(v131, v141);
    outlined init with take of NavigationState.Base(v141, v142);
    v27 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v142);
    v143 = v11;
    v101 = v17;
    if (v27)
    {
      v96 = v23;
      if (v27 == 1)
      {
        v28 = (const void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v142);
        memcpy(v114, v28, 0x188uLL);
        memcpy(v137, v28, 0x12BuLL);
        v29 = *(_QWORD *)&v114[304];
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v131);
        outlined retain of NavigationState.Base((uint64_t)v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        outlined consume of ResolvedNavigationDestinations?(v29);
        v30 = v23;
        if (v23)
          goto LABEL_113;
        specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(0, 0, v143, v24, (uint64_t)v137, 0, (uint64_t)v122);
        outlined release of NavigationColumnState((uint64_t *)v114);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v131);
        LODWORD(v12) = v94;
        v18 = v93;
      }
      else
      {
        v44 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v142);
        v45 = *(_QWORD *)v44;
        v46 = *(_QWORD *)(v44 + 8);
        v12 = *(_QWORD *)(v44 + 16);
        v47 = *(_QWORD *)(v44 + 24);
        v48 = *(_QWORD *)(v44 + 32);
        v49 = *(_QWORD *)(v44 + 40);
        v51 = *(_QWORD *)(v44 + 48);
        v50 = *(_QWORD *)(v44 + 56);
        v52 = *(_QWORD *)(v44 + 64);
        v53 = *(_WORD *)(v44 + 72);
        v139[0] = v46;
        v139[1] = v12;
        v139[2] = v47;
        v139[3] = v48;
        v139[4] = v49;
        v139[5] = v51;
        v139[6] = v50;
        v139[7] = v52;
        v140 = v53;
        if ((v96 & 0x8000000000000000) != 0)
          goto LABEL_96;
        if (*(_QWORD *)(v45 + 16) < v96)
          goto LABEL_97;
        v87 = v53;
        v88 = v52;
        v90 = v50;
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v131);
        outlined retain of NavigationState.Base((uint64_t)v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        v54 = swift_bridgeObjectRetain();
        v55 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v54, (uint64_t)v139, 0, (2 * v96) | 1);
        swift_bridgeObjectRelease();
        if (v96 >= *(_QWORD *)(v45 + 16))
          goto LABEL_98;
        memcpy(v138, (const void *)(v45 + 304 * v96 + 32), 0x12BuLL);
        outlined retain of NavigationColumnState(v138);
        swift_bridgeObjectRelease();
        specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(v96, 0, v143, v24, (uint64_t)v138, v55, (uint64_t)v122);
        outlined copy of NavigationSplitViewState?(v46, v12, v47, v48, v49, v51, v90, v88, v87, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        outlined release of NavigationColumnState(v138);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v131);
        LODWORD(v12) = v94;
        v18 = v93;
        v30 = v96;
      }
    }
    else
    {
      v31 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v142);
      v32 = *(_QWORD *)v31;
      v33 = *(unsigned __int8 *)(v31 + 8);
      v34 = *(_QWORD *)(v31 + 16);
      v35 = v131[51];
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v131);
      v36 = static HorizontalAlignment.center.getter();
      if (!*(_QWORD *)(v35 + 16))
        goto LABEL_95;
      v37 = v36;
      outlined init with copy of _VariadicView_Children(v35 + 32, (uint64_t)&v113);
      v110 = v37;
      v111 = 0;
      v112 = 1;
      v132[0] = 0;
      v132[1] = v32;
      v133 = v33;
      v134 = v34;
      v135 = 0;
      v136 = (_DWORD)v33 == 3;
      v30 = v23;
      v38 = (void (*)(uint64_t *__return_ptr, _QWORD *))v131[49];
      if (v33 >= 3)
        v39 = 3;
      else
        v39 = v33;
      v97 = v39;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v110, (uint64_t)v114, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
      *(_QWORD *)&v114[80] = 0;
      *(_QWORD *)&v114[88] = v32;
      *(_QWORD *)&v114[96] = v33;
      *(_QWORD *)&v114[104] = v34;
      *(_QWORD *)&v114[112] = 0;
      v114[120] = (_DWORD)v33 == 3;
      LODWORD(v12) = v94;
      v114[121] = 1;
      v40 = swift_allocObject();
      *(_BYTE *)(v40 + 16) = 1;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v114, (uint64_t)v106, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
      v108 = a8;
      v109 = v40;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v114, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
      v38(&v102, v132);
      LOBYTE(v40) = v102;
      v89 = v103;
      v41 = v104;
      v42 = v105;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v106, (uint64_t)v114, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
      v114[144] = v40;
      *(_OWORD *)&v114[152] = v89;
      *(_QWORD *)&v114[168] = v41;
      *(_QWORD *)&v114[176] = v42;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v106, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
      type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
      lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>);
      v43 = AnyView.init<A>(_:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v110, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
      memset((char *)&v122[1] + 8, 0, 40);
      v123 = 2;
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v131);
      *(_QWORD *)&v122[0] = v43;
      BYTE8(v122[0]) = v97;
      *(_QWORD *)&v122[1] = 0;
      v18 = v93;
    }
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v131);
    v23 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v30, v101 & 1);
    v17 = v56;
    v11 = v57;
    v24 = v58;
    outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v131);
    v124 = v17 & 1;
LABEL_80:
    outlined init with take of Image.Resolved?((uint64_t)v122, (uint64_t)v106, &lazy cache variable for type metadata for NavigationState.StackContent.PositionedView?, (uint64_t)&type metadata for NavigationState.StackContent.PositionedView);
    if (!*(_QWORD *)&v106[0])
    {
      *(_DWORD *)&v114[9] = v129[0];
      *(_DWORD *)&v114[12] = *(_DWORD *)((char *)v129 + 3);
      *(_DWORD *)&v114[25] = v128[0];
      *(_DWORD *)&v114[28] = *(_DWORD *)((char *)v128 + 3);
      *(_DWORD *)&v114[41] = v126[0];
      *(_DWORD *)&v114[44] = *(_DWORD *)((char *)v126 + 3);
      *(_DWORD *)v117 = v110;
      *(_DWORD *)&v117[3] = *(_DWORD *)((char *)&v110 + 3);
      *(_QWORD *)v114 = v92;
      v114[8] = v130;
      *(_QWORD *)&v114[16] = v84;
      v114[24] = v12;
      *(_QWORD *)&v114[32] = v100;
      v114[40] = v127;
      *(_QWORD *)&v114[48] = v91;
      v114[56] = v95;
      memcpy(&v114[57], __dst, 0x1A7uLL);
      v115 = v23;
      v116 = v124;
      v118 = v11;
      v119 = v24;
      v120 = v99;
      v121 = v98;
      outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>.Iterator((uint64_t)v114);
      swift_release_n();
      return (uint64_t)v83;
    }
    *(_OWORD *)&v114[32] = v106[2];
    *(_OWORD *)&v114[48] = v106[3];
    v114[64] = v107;
    *(_OWORD *)v114 = v106[0];
    *(_OWORD *)&v114[16] = v106[1];
    v99(&v110, v114);
    v59 = v110;
    v60 = v111;
    outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v114);
    if (v60 >= 1)
    {
      swift_beginAccess();
      v61 = *v18;
      if (*(_QWORD *)(*v18 + 16) && (v62 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v60), (v63 & 1) != 0))
      {
        v64 = v24;
        v65 = *(void **)(*(_QWORD *)(v61 + 56) + 8 * v62);
        swift_endAccess();
        swift_beginAccess();
        v66 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v60);
        v68 = v67;
        v69 = v65;
        if ((v68 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v71 = *v18;
          *(_QWORD *)&v106[0] = *v18;
          *v18 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v71 = *(_QWORD *)&v106[0];
          }
          v72 = *(void **)(*(_QWORD *)(v71 + 56) + 8 * v66);
          specialized _NativeDictionary._delete(at:)(v66, v71);
          *v18 = v71;

          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        v73 = swift_allocObject();
        swift_weakInit();
        v74 = swift_allocObject();
        *(_QWORD *)(v74 + 16) = v73;
        *(_QWORD *)(v74 + 24) = v69;
        v75 = swift_allocObject();
        *(_QWORD *)(v75 + 16) = a5;
        *(_QWORD *)(v75 + 24) = v74;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83[2] + 1, 1, v83);
        v24 = v64;
        v77 = v83[2];
        v76 = v83[3];
        if (v77 >= v76 >> 1)
          v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v76 > 1), v77 + 1, 1, v83);
        v83[2] = v77 + 1;
        v78 = &v83[2 * v77];
        v78[4] = a6;
        v78[5] = v75;
        v17 = v124;
      }
      else
      {
        swift_endAccess();
      }
    }
  }
  if (v23 == v100)
    v25 = v127;
  else
    v25 = 1;
  if ((v25 & 1) == 0)
    goto LABEL_24;
  memcpy(v131, &__dst[7], sizeof(v131));
  v26 = v92;
  if ((v130 & 1) != 0)
    goto LABEL_109;
LABEL_36:
  if (v23 >= v26)
  {
    if (v26 >= v23)
    {
      if ((_BYTE)v24)
      {
        if (v24 == 1)
        {
          if ((_DWORD)v12 == 1 && v11 < v84)
            goto LABEL_103;
        }
        else if ((v82 & 1) != 0)
        {
          goto LABEL_100;
        }
      }
      else if ((_DWORD)v12)
      {
        if ((_DWORD)v12 != 2)
          goto LABEL_111;
      }
      else if (v11 < v84)
      {
        goto LABEL_104;
      }
    }
    goto LABEL_49;
  }
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  memcpy(v131, &__dst[7], sizeof(v131));
LABEL_107:
  swift_release();
  __break(1u);
LABEL_108:
  swift_release();
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  swift_release();
  __break(1u);
LABEL_111:
  swift_release();
  __break(1u);
LABEL_112:
  swift_release();
  __break(1u);
LABEL_113:
  swift_release_n();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()()
{
  return specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
}

{
  return specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD __dst[38];
  char v18;
  _BYTE __src[392];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  _BYTE v29[299];
  _BYTE v30[408];

  outlined init with take of NavigationState.Base(v0, __src);
  outlined init with take of NavigationState.Base(__src, v30);
  if (_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v30) != 2)
    return 0;
  v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v30);
  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_WORD *)(v1 + 72);
  v15 = *(_QWORD *)(v1 + 8);
  v20 = v15;
  v21 = v3;
  v22 = v4;
  v23 = v5;
  v24 = v6;
  v25 = v7;
  v26 = v8;
  v27 = v9;
  v14 = v10;
  v28 = v10;
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v11 = *(_QWORD *)(v2 + 16);
  v12 = v11 != 0;
  v18 = 0;
  outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  swift_bridgeObjectRetain();
  if (v11 != v12)
  {
    if (v11 > v12)
    {
      memcpy(__dst, (const void *)(v2 + 304 * (v11 != 0) + 32), 0x12BuLL);
      if (v11 > 1)
      {
        memcpy(v29, (const void *)(v2 + 336), sizeof(v29));
        __asm { BR              X9 }
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    JUMPOUT(0x1879BC664);
  }
  swift_unknownObjectRelease();
  outlined copy of NavigationSplitViewState?(v15, v3, v4, v5, v6, v7, v8, v9, v14, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  swift_bridgeObjectRelease();
  return v16;
}

{
  return specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
}

uint64_t specialized static Comparable.<= infix(_:_:)(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, int a6, uint64_t a7, char a8)
{
  _BOOL4 v10;
  BOOL v11;
  int v12;
  int v13;

  if (((a2 | a6) & 1) != 0)
    return !(a2 & ((a6 & 1) == 0));
  if (a5 < a1)
    return 0;
  if (a1 < a5)
    return 1;
  if (a8)
  {
    v10 = a4 == 1 && a7 < a3;
    if (a3)
      v11 = 0;
    else
      v11 = a4 == 2;
    v12 = !v11;
    if (a8 == 1)
      v13 = v10;
    else
      v13 = v12;
    return v13 ^ 1u;
  }
  else if (a4)
  {
    return a4 != 1;
  }
  else
  {
    return a7 >= a3;
  }
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(uint64_t result, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  uint64_t v12;
  char v13;
  BOOL v15;
  char v16;
  uint64_t v17;
  BOOL v19;
  char v20;

  v12 = a5;
  v13 = a2 & 1;
  if ((a5 & 0x8000000000000000) == 0)
  {
    if (!a5)
      return result;
    v15 = a9 == 2 && a8 == 0;
    while (1)
    {
      if ((v13 & 1) != 0)
      {
        if ((a7 & 1) == 0)
          goto LABEL_10;
      }
      else if ((a7 & 1) != 0 || result != a6)
      {
        goto LABEL_10;
      }
      if (!a4)
        break;
      if (a4 != 1)
      {
        if (v15)
          return 0;
        goto LABEL_10;
      }
      if (a9 == 1)
        goto LABEL_21;
LABEL_10:
      result = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(result, v13 & 1);
      v13 = v16 & 1;
      if (!--v12)
        return result;
    }
    if (a9)
      goto LABEL_10;
LABEL_21:
    if (a3 == a8)
      return 0;
    goto LABEL_10;
  }
  v17 = 0;
  v19 = a9 == 2 && a8 == 0;
  while (1)
  {
    if ((v13 & 1) != 0)
    {
      if ((a7 & 1) == 0)
        goto LABEL_30;
    }
    else if ((a7 & 1) != 0 || result != a6)
    {
      goto LABEL_30;
    }
    if (a4)
      break;
    if (!a9)
      goto LABEL_41;
LABEL_30:
    --v17;
    result = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(result, v13 & 1);
    v13 = v20 & 1;
    if (v17 <= v12)
      return result;
  }
  if (a4 != 1)
  {
    if (v19)
      return 0;
    goto LABEL_30;
  }
  if (a9 != 1)
    goto LABEL_30;
LABEL_41:
  if (a3 != a8)
    goto LABEL_30;
  return 0;
}

void NavigationStackHostingController.__allocating_init(rootView:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  specialized NavigationStackHostingController.init(rootView:)(a1);
}

uint64_t sub_1879BC93C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 936) - 8) + 8))(v2);
  return a1;
}

void specialized _UIHostingView.traitCollectionOverride.setter(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  id v4;
  id v5;
  BOOL v6;
  id v7;

  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x128);
  v4 = *(id *)((char *)v1 + v3);
  *(_QWORD *)((char *)v1 + v3) = a1;
  v5 = a1;
  v7 = v5;
  if (!a1)
  {
    if (!v4)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v4)
    v6 = v5 == v4;
  else
    v6 = 0;
  if (!v6)
  {
LABEL_6:
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
LABEL_7:

}

double specialized Collection.subscript.getter@<D0>(int64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  char v7;
  uint64_t v11;
  int v12;
  int64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  double result;
  _BYTE __dst[416];
  __int128 v19;
  uint64_t v20;
  char v21;
  int64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  v7 = *(_BYTE *)(v5 + 8);
  if ((v7 & 1) != 0 || (a2 & 1) != 0 || *(_QWORD *)v5 > a1)
    goto LABEL_34;
  v11 = *(_QWORD *)(v5 + 16);
  v12 = *(unsigned __int8 *)(v5 + 24);
  if (*(_QWORD *)v5 < a1)
    goto LABEL_5;
  if (!(_BYTE)a4)
  {
    if (*(_BYTE *)(v5 + 24))
    {
      if (v12 == 1)
        goto LABEL_34;
      goto LABEL_5;
    }
    goto LABEL_20;
  }
  if (a4 != 1)
  {
    if (v11 || v12 != 2)
      goto LABEL_34;
    goto LABEL_5;
  }
  if (v12 == 1)
  {
LABEL_20:
    if (v11 > a3)
      goto LABEL_34;
  }
LABEL_5:
  v13 = *(_QWORD *)(v5 + 32);
  v14 = *(_BYTE *)(v5 + 40);
  v15 = *(_QWORD *)(v5 + 48);
  v16 = *(unsigned __int8 *)(v5 + 56);
  if ((v14 & 1) != 0 || v13 > a1)
    goto LABEL_33;
  if (v13 >= a1)
  {
    if ((_BYTE)a4)
    {
      if (a4 == 1)
      {
        if (v16 == 1 && v15 > a3)
        {
          LOBYTE(v16) = 1;
LABEL_33:
          *(_QWORD *)&v19 = *(_QWORD *)v5;
          BYTE8(v19) = v7;
          v20 = v11;
          v21 = v12;
          v22 = v13;
          v23 = v14;
          v24 = v15;
          v25 = v16;
          memcpy(__dst, (const void *)(v5 + 64), sizeof(__dst));
          specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, 0, a3, a4, &v19);
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__dst);
          specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(a1, 0, a3, a4);
          outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>(v5);
          return result;
        }
      }
      else if (v15 || v16 != 2)
      {
        goto LABEL_33;
      }
    }
    else if (*(_BYTE *)(v5 + 56))
    {
      if (v16 == 1)
        goto LABEL_33;
    }
    else if (v15 > a3)
    {
      LOBYTE(v16) = 0;
      goto LABEL_33;
    }
  }
LABEL_34:
  *(_BYTE *)(a5 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  return result;
}

uint64_t specialized NavigationStrategy.inheritedEnvironment<A>(from:for:canPop:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v21;

  v8 = a1;
  if (a1 == 1)
  {
    swift_retain();
    swift_retain();
    v8 = a4;
    a2 = a5;
  }
  v21 = a2;
  type metadata accessor for MainActor();
  outlined copy of EnvironmentValues?(a1);
  v12 = static MainActor.shared.getter();
  v13 = swift_allocObject();
  v14 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v14;
  *(_BYTE *)(v13 + 32) = a3 & 1;
  v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  v16 = static MainActor.shared.getter();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v14;
  *(_BYTE *)(v17 + 32) = a3 & 1;
  *(_QWORD *)(v17 + 40) = v15;
  swift_release();
  Binding.init(get:set:)();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>, (uint64_t)&type metadata for PresentationModeKey, (uint64_t)&protocol witness table for PresentationModeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (v21)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    result = swift_release();
    v19 = v21;
  }
  else
  {
    swift_release();
    swift_release();
    result = swift_release();
    v19 = 0;
  }
  *a6 = v8;
  a6[1] = v19;
  return result;
}

id specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(unint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, void (*a5)(unint64_t), uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id result;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  char *v49;
  id v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  id v82;
  unint64_t v83;
  Class isa;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  id v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  int64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(unint64_t);
  char **v113;
  __int128 v114;
  __int128 v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125[7];
  unint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  unint64_t v136;

  v111 = a6;
  v112 = a5;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v110 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v118 = (char *)&v110 - v19;
  v131 = 0;
  v129 = v6;
  v130 = MEMORY[0x1E0DEE9D8];
  swift_unknownObjectWeakInit();
  swift_retain();
  a3(&v129);
  v20 = v130;
  if (v130 >> 62)
    goto LABEL_107;
  v21 = *(_QWORD *)((v130 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  while (1)
  {
    v123 = a1;
    v113 = (char **)v20;
    if (!v21)
      break;
    v122 = v20 & 0xC000000000000001;
    v23 = 4;
    *(_QWORD *)&v22 = 138412290;
    v115 = v22;
    *(_QWORD *)&v22 = 138412546;
    v114 = v22;
    v110 = MEMORY[0x1E0DEE9B8] + 8;
    v116 = v12;
    v119 = (uint64_t)v16;
    v121 = v21;
    while (1)
    {
      v26 = v122 ? (char *)MEMORY[0x18D75E3BC](v23 - 4, v20) : (char *)*(id *)(v20 + 8 * v23);
      v27 = v26;
      v28 = v23 - 3;
      if (__OFADD__(v23 - 4, 1))
        break;
      v29 = objc_msgSend(v26, sel_navigationController, v110, v111);
      v30 = v29;
      if (v29)
      {
        if (a1)
        {
          if (v29 != (id)a1)
          {
            v31 = (id)a1;
            v32 = v30;
            objc_msgSend(v27, sel_willMoveToParentViewController_, 0);
            result = objc_msgSend(v27, sel_view);
            if (!result)
            {
              __break(1u);
              return result;
            }
            v34 = result;
            objc_msgSend(result, sel_removeFromSuperview);

            specialized mustRemove #1 <A>(_:from:) in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(v27, v32, (uint64_t)&v131);
            a1 = v123;
            v20 = (unint64_t)v113;
            v25 = v121;
            v28 = v23 - 3;
            goto LABEL_8;
          }
          v44 = v118;
          static Log.navigation.getter();
          v45 = type metadata accessor for Logger();
          v117 = *(_QWORD *)(v45 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v44, 1, v45) != 1)
          {
            v120 = v23 - 3;
            v48 = (id)a1;
            v49 = v27;
            v50 = v48;
            v51 = v49;
            v52 = Logger.logObject.getter();
            v53 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v52, v53))
            {
              v54 = swift_slowAlloc();
              v55 = (_QWORD *)swift_slowAlloc();
              v56 = swift_slowAlloc();
              v125[0] = v56;
              *(_DWORD *)v54 = v114;
              *(_QWORD *)(v54 + 4) = v51;
              *v55 = v51;

              *(_WORD *)(v54 + 12) = 2080;
              v132 = (uint64_t)v30;
              type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for UINavigationController?, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
              v50 = v50;
              v57 = String.init<A>(describing:)();
              *(_QWORD *)(v54 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v125);

              swift_bridgeObjectRelease();
              _os_log_impl(&dword_186E48000, v52, v53, "[NavigationHostingControllerCache_UIKit] %@ containment skipped because sourceNavigationController and destination were equal %s", (uint8_t *)v54, 0x16u);
              type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
              swift_arrayDestroy();
              MEMORY[0x18D760108](v55, -1, -1);
              swift_arrayDestroy();
              v59 = v56;
              v44 = v118;
              MEMORY[0x18D760108](v59, -1, -1);
              v60 = v54;
              v12 = v116;
              MEMORY[0x18D760108](v60, -1, -1);

            }
            else
            {

            }
            v16 = (char *)v119;
            v25 = v121;
            (*(void (**)(char *, uint64_t))(v117 + 8))(v44, v45);
            a1 = v123;
            v20 = (unint64_t)v113;
LABEL_36:
            v28 = v120;
            goto LABEL_8;
          }

          v24 = (uint64_t)v44;
          goto LABEL_6;
        }
      }
      else if (!a1)
      {
        static Log.navigation.getter();
        v46 = type metadata accessor for Logger();
        v47 = *(_QWORD *)(v46 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v12, 1, v46) != 1)
        {
          v120 = v23 - 3;
          v61 = v27;
          v62 = Logger.logObject.getter();
          v63 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v62, v63))
          {
            v64 = swift_slowAlloc();
            v65 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v64 = v115;
            *(_QWORD *)(v64 + 4) = v61;
            *v65 = v61;
            type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            swift_arrayDestroy();
            v66 = v65;
            v16 = (char *)v119;
            MEMORY[0x18D760108](v66, -1, -1);
            MEMORY[0x18D760108](v64, -1, -1);
            v67 = v62;
            v62 = v61;
          }
          else
          {

            v67 = v61;
          }
          a1 = v123;
          v20 = (unint64_t)v113;

          (*(void (**)(char *, uint64_t))(v47 + 8))(v12, v46);
          v25 = v121;
          goto LABEL_36;
        }

        v24 = (uint64_t)v12;
        goto LABEL_6;
      }
      static Log.navigation.getter();
      v35 = type metadata accessor for Logger();
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v16, 1, v35) != 1)
      {
        v37 = v27;
        v38 = Logger.logObject.getter();
        v39 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v38, v39))
        {
          v40 = swift_slowAlloc();
          v41 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v40 = v115;
          *(_QWORD *)(v40 + 4) = v37;
          *v41 = v37;

          _os_log_impl(&dword_186E48000, v38, v39, "[NavigationHostingControllerCache_UIKit] %@ containment skipped because sourceNavigationController or destination were nil", (uint8_t *)v40, 0xCu);
          type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
          swift_arrayDestroy();
          v42 = v41;
          v12 = v116;
          MEMORY[0x18D760108](v42, -1, -1);
          v43 = v40;
          v16 = (char *)v119;
          MEMORY[0x18D760108](v43, -1, -1);
        }
        else
        {

        }
        v28 = v23 - 3;

        (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v35);
        a1 = v123;
        v20 = (unint64_t)v113;
        goto LABEL_7;
      }

      v24 = (uint64_t)v16;
LABEL_6:
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v24, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
LABEL_7:
      v25 = v121;
LABEL_8:
      ++v23;
      if (v28 == v25)
        goto LABEL_37;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    swift_bridgeObjectRetain_n();
    v21 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_37:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!v131)
    goto LABEL_94;
  v68 = *(_QWORD *)(v131 + 64);
  *(_QWORD *)&v114 = v131 + 64;
  v69 = 1 << *(_BYTE *)(v131 + 32);
  if (v69 < 64)
    v70 = ~(-1 << v69);
  else
    v70 = -1;
  a1 = v70 & v68;
  *(_QWORD *)&v115 = (unint64_t)(v69 + 63) >> 6;
  v71 = swift_bridgeObjectRetain();
  v72 = 0;
  v73 = 0;
  v20 = (unint64_t)&selRef_setSensitive_;
  v122 = MEMORY[0x1E0DEE9B0] + 8;
  v116 = (char *)v71;
  while (2)
  {
    if (a1)
    {
      v119 = (a1 - 1) & a1;
      v120 = v72;
      v74 = __clz(__rbit64(a1)) | (v72 << 6);
      goto LABEL_58;
    }
    v75 = __OFADD__(v72, 1);
    v76 = v72 + 1;
    if (v75)
      goto LABEL_105;
    if (v76 >= (uint64_t)v115)
      goto LABEL_93;
    v77 = *(_QWORD *)(v114 + 8 * v76);
    if (v77)
    {
LABEL_57:
      v119 = (v77 - 1) & v77;
      v120 = v76;
      v74 = __clz(__rbit64(v77)) + (v76 << 6);
LABEL_58:
      v79 = 8 * v74;
      v80 = *(_QWORD *)(*(_QWORD *)(v71 + 56) + v79);
      v81 = (char *)*(id *)(*(_QWORD *)(v71 + 48) + v79);
      swift_bridgeObjectRetain();
      v82 = objc_msgSend(v81, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      v83 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      specialized _ArrayProtocol.filter(_:)(v83, v80);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v81, sel_setViewControllers_, isa);

      v121 = v73;
      v118 = v81;
      if ((v80 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
        lazy protocol witness table accessor for type NavigationStackHostingController<AnyView> and conformance NSObject();
        Set.Iterator.init(_cocoa:)();
        v80 = v132;
        v16 = v133;
        v85 = v134;
        v12 = v135;
        a1 = v136;
      }
      else
      {
        v12 = 0;
        v86 = -1 << *(_BYTE *)(v80 + 32);
        v16 = (char *)(v80 + 56);
        v85 = ~v86;
        v87 = -v86;
        if (v87 < 64)
          v88 = ~(-1 << v87);
        else
          v88 = -1;
        a1 = v88 & *(_QWORD *)(v80 + 56);
      }
      v117 = v85;
      v89 = (unint64_t)(v85 + 64) >> 6;
      if ((v80 & 0x8000000000000000) == 0)
        goto LABEL_68;
LABEL_65:
      v90 = __CocoaSet.Iterator.next()();
      if (!v90)
        goto LABEL_42;
      v124 = v90;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v91 = (id)v125[0];
      swift_unknownObjectRelease();
      v92 = v12;
      v93 = a1;
      if (!v91)
      {
LABEL_42:
        outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();

        v71 = (uint64_t)v116;
        v73 = v121;
        v72 = v120;
        a1 = v119;
        continue;
      }
      while (1)
      {
        objc_msgSend(v91, sel_removeFromParentViewController, v110);
        objc_msgSend(v91, sel_willMoveToParentViewController_, v123);

        v12 = v92;
        a1 = v93;
        if (v80 < 0)
          goto LABEL_65;
LABEL_68:
        if (a1)
        {
          v93 = (a1 - 1) & a1;
          v94 = __clz(__rbit64(a1)) | ((_QWORD)v12 << 6);
          v92 = v12;
        }
        else
        {
          v95 = (int64_t)(v12 + 1);
          if (__OFADD__(v12, 1))
          {
            __break(1u);
            goto LABEL_104;
          }
          if (v95 >= v89)
            goto LABEL_42;
          v96 = *(_QWORD *)&v16[8 * v95];
          v92 = v12 + 1;
          if (!v96)
          {
            v92 = v12 + 2;
            if ((uint64_t)(v12 + 2) >= v89)
              goto LABEL_42;
            v96 = *(_QWORD *)&v16[8 * (_QWORD)v92];
            if (!v96)
            {
              v92 = v12 + 3;
              if ((uint64_t)(v12 + 3) >= v89)
                goto LABEL_42;
              v96 = *(_QWORD *)&v16[8 * (_QWORD)v92];
              if (!v96)
              {
                v92 = v12 + 4;
                if ((uint64_t)(v12 + 4) >= v89)
                  goto LABEL_42;
                v96 = *(_QWORD *)&v16[8 * (_QWORD)v92];
                if (!v96)
                {
                  v92 = v12 + 5;
                  if ((uint64_t)(v12 + 5) >= v89)
                    goto LABEL_42;
                  v96 = *(_QWORD *)&v16[8 * (_QWORD)v92];
                  if (!v96)
                  {
                    v97 = v12 + 6;
                    while ((char *)v89 != v97)
                    {
                      v96 = *(_QWORD *)&v16[8 * (_QWORD)v97++];
                      if (v96)
                      {
                        v92 = v97 - 1;
                        goto LABEL_85;
                      }
                    }
                    goto LABEL_42;
                  }
                }
              }
            }
          }
LABEL_85:
          v93 = (v96 - 1) & v96;
          v94 = __clz(__rbit64(v96)) + ((_QWORD)v92 << 6);
        }
        v91 = *(id *)(*(_QWORD *)(v80 + 48) + 8 * v94);
        if (!v91)
          goto LABEL_42;
      }
    }
    break;
  }
  v78 = v76 + 1;
  if (v76 + 1 >= (uint64_t)v115)
    goto LABEL_93;
  v77 = *(_QWORD *)(v114 + 8 * v78);
  if (v77)
    goto LABEL_56;
  v78 = v76 + 2;
  if (v76 + 2 >= (uint64_t)v115)
    goto LABEL_93;
  v77 = *(_QWORD *)(v114 + 8 * v78);
  if (v77)
    goto LABEL_56;
  v78 = v76 + 3;
  if (v76 + 3 >= (uint64_t)v115)
    goto LABEL_93;
  v77 = *(_QWORD *)(v114 + 8 * v78);
  if (v77)
    goto LABEL_56;
  v78 = v76 + 4;
  if (v76 + 4 >= (uint64_t)v115)
    goto LABEL_93;
  v77 = *(_QWORD *)(v114 + 8 * v78);
  if (v77)
  {
LABEL_56:
    v76 = v78;
    goto LABEL_57;
  }
  while (1)
  {
    v76 = v78 + 1;
    if (__OFADD__(v78, 1))
      goto LABEL_106;
    if (v76 >= (uint64_t)v115)
      break;
    v77 = *(_QWORD *)(v114 + 8 * v76);
    ++v78;
    if (v77)
      goto LABEL_57;
  }
LABEL_93:
  swift_release();
  a1 = v123;
  v20 = (unint64_t)v113;
LABEL_94:
  v112(v20);
  swift_bridgeObjectRelease();
  if (v131)
  {
    v98 = *(_QWORD *)(v131 + 64);
    v99 = -1 << *(_BYTE *)(v131 + 32);
    v100 = ~v99;
    v101 = -v99;
    v125[0] = v131;
    v125[1] = v131 + 64;
    if (v101 < 64)
      v102 = ~(-1 << v101);
    else
      v102 = -1;
    v125[2] = v100;
    v125[3] = 0;
    v125[4] = v102 & v98;
    v125[5] = (uint64_t)closure #2 in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:);
    v125[6] = 0;
    v126 = 0xF000000000000007;
    v127 = 0u;
    v128 = 0u;
    specialized FlattenSequence.Iterator.next()();
    if (v103)
    {
      v104 = v103;
      v105 = MEMORY[0x1E0CE7518];
      v106 = MEMORY[0x1E0CE7508];
      do
      {
        objc_msgSend(v104, sel_didMoveToParentViewController_, a1, v110);
        v107 = *(id *)&v104[direct field offset for UIHostingController.host];
        static ViewRendererHostProperties.all.getter();
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, v105, v106, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        specialized FlattenSequence.Iterator.next()();
        v104 = v108;
      }
      while (v108);
    }
    v109 = v126;
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    swift_release();
    outlined consume of Set<NavigationStackHostingController<AnyView>>.Iterator?(v109);
  }
  return (id)outlined destroy of NavigationHostingControllerCache_UIKit.Source((uint64_t)&v129);
}

uint64_t specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  char v5;
  int64_t v6;
  int v7;
  char v8;
  int v9;
  int64_t v10;
  int v11;
  int64_t v12;
  BOOL v13;
  char v14;
  BOOL v15;
  char v16;
  char v17;
  char v18;
  int64_t v19;
  int64_t v20;
  char v21;
  int v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t result;
  char v57;
  int64_t v58;
  int v59;
  char v61;
  unsigned __int16 v62;
  uint64_t v63;
  int64_t v64;
  int v65;
  int64_t v66;
  char v67;
  unint64_t v68;
  void (*v69)(uint64_t *__return_ptr, _QWORD *);
  __int128 v70;
  char v71;
  char v72;
  uint64_t v73;
  void (*v74)(_QWORD *__return_ptr, _QWORD);
  int64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD v80[4];
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  _BYTE v88[480];
  int64_t v89;
  char v90;
  _BYTE v91[7];
  int64_t v92;
  char v93;
  void (*v94)(_QWORD *__return_ptr, _QWORD);
  uint64_t v95;
  _OWORD v96[4];
  char v97;
  char v98;
  _BYTE __dst[423];
  _DWORD v100[2];
  char v101;
  _DWORD v102[2];
  _DWORD v103[2];
  char v104;
  _QWORD v105[52];
  _QWORD v106[2];
  char v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  _BYTE v111[304];
  uint64_t v112[38];
  _QWORD v113[8];
  unsigned __int16 v114;
  _BYTE v115[392];
  _BYTE v116[416];

  v4 = *(_QWORD *)a1;
  v5 = *(_BYTE *)(a1 + 8);
  v103[0] = *(_DWORD *)(a1 + 9);
  *(_DWORD *)((char *)v103 + 3) = *(_DWORD *)(a1 + 12);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(a1 + 24);
  v102[0] = *(_DWORD *)(a1 + 25);
  *(_DWORD *)((char *)v102 + 3) = *(_DWORD *)(a1 + 28);
  v75 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_DWORD *)(a1 + 41);
  *(_DWORD *)((char *)v100 + 3) = *(_DWORD *)(a1 + 44);
  v100[0] = v9;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(unsigned __int8 *)(a1 + 56);
  memcpy(__dst, (const void *)(a1 + 57), sizeof(__dst));
  v116[392] = v5 & 1;
  v104 = v5;
  v101 = v8;
  v98 = v5 & 1;
  v73 = *(_QWORD *)(a1 + 488);
  v74 = *(void (**)(_QWORD *__return_ptr, _QWORD))(a1 + 480);
  outlined retain of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>(a1);
  v12 = v4;
  v64 = v10;
  if (v10)
    v13 = 0;
  else
    v13 = v11 == 2;
  v14 = v13;
  v61 = v14;
  if (v6)
    v15 = 0;
  else
    v15 = v7 == 2;
  v16 = !v15;
  v57 = v16;
  v17 = v8 & 1;
  v18 = v5 & 1;
  v19 = v4;
  v58 = v6;
  v20 = v6;
  v21 = v7;
  v59 = v7;
  v65 = v11;
  v66 = v12;
  if ((v5 & 1) == 0)
    goto LABEL_16;
LABEL_14:
  if ((v17 & 1) == 0)
    goto LABEL_92;
  while (1)
  {
    if (!v21)
    {
      if (v11)
        goto LABEL_27;
LABEL_24:
      if (v20 == v64)
        goto LABEL_25;
      goto LABEL_27;
    }
    if (v21 == 1)
    {
      if (v11 != 1)
        goto LABEL_27;
      goto LABEL_24;
    }
    if ((v61 & 1) != 0)
    {
LABEL_25:
      v97 = 0;
      memset(v96, 0, sizeof(v96));
      goto LABEL_76;
    }
LABEL_27:
    memcpy(v105, &__dst[7], sizeof(v105));
    if ((v104 & 1) != 0)
      break;
    if ((v18 & 1) != 0)
      goto LABEL_44;
    while (1)
    {
      if (v19 < v12)
      {
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        memcpy(v105, &__dst[7], sizeof(v105));
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }
      if (v12 >= v19)
      {
        if (v21)
        {
          if (v21 == 1)
          {
            if (v59 == 1 && v20 < v58)
              goto LABEL_89;
          }
          else if ((v57 & 1) != 0)
          {
            goto LABEL_86;
          }
        }
        else if (v59)
        {
          if (v59 != 2)
            goto LABEL_97;
        }
        else if (v20 < v58)
        {
          goto LABEL_90;
        }
      }
LABEL_44:
      if ((v17 & 1) != 0)
      {
        if ((v18 & 1) != 0)
          goto LABEL_94;
      }
      else
      {
        if ((v18 & 1) != 0)
          goto LABEL_93;
        if (v19 >= v75)
        {
          if (v75 < v19)
            goto LABEL_85;
          if (v21)
          {
            if (v21 == 1)
            {
              if (v11 != 1)
                goto LABEL_96;
              if (v20 >= v64)
                goto LABEL_87;
            }
            else if ((v61 & 1) != 0)
            {
              goto LABEL_88;
            }
          }
          else if (v11)
          {
            if (v11 != 1)
              goto LABEL_98;
          }
          else if (v20 >= v64)
          {
            goto LABEL_91;
          }
        }
      }
      outlined init with take of NavigationState.Base(v105, v115);
      outlined init with take of NavigationState.Base(v115, v116);
      v22 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v116);
      if (v22)
      {
        v67 = v21;
        v68 = v20;
        v71 = v18;
        if (v22 != 1)
        {
          v37 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v116);
          v38 = *(_QWORD *)v37;
          v39 = *(_QWORD *)(v37 + 8);
          v41 = *(_QWORD *)(v37 + 16);
          v40 = *(_QWORD *)(v37 + 24);
          v43 = *(_QWORD *)(v37 + 32);
          v42 = *(_QWORD *)(v37 + 40);
          v44 = *(_QWORD *)(v37 + 48);
          v45 = *(_QWORD *)(v37 + 56);
          v46 = *(_QWORD *)(v37 + 64);
          v47 = *(_WORD *)(v37 + 72);
          v113[0] = v39;
          v113[1] = v41;
          v113[2] = v40;
          v113[3] = v43;
          v113[4] = v42;
          v113[5] = v44;
          v113[6] = v45;
          v113[7] = v46;
          v114 = v47;
          if (v19 < 0)
            goto LABEL_82;
          if (*(_QWORD *)(v38 + 16) < (unint64_t)v19)
            goto LABEL_83;
          v62 = v47;
          v63 = v46;
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v105);
          outlined retain of NavigationState.Base((uint64_t)v115, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
          v48 = swift_bridgeObjectRetain();
          v49 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v48, (uint64_t)v113, 0, (2 * v19) | 1);
          swift_bridgeObjectRelease();
          if ((unint64_t)v19 >= *(_QWORD *)(v38 + 16))
            goto LABEL_84;
          memcpy(v112, (const void *)(v38 + 304 * v19 + 32), 0x12BuLL);
          outlined retain of NavigationColumnState(v112);
          swift_bridgeObjectRelease();
          specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(v19, 0, v68, v67, (uint64_t)v112, v49, (uint64_t)v96);
          outlined copy of NavigationSplitViewState?(v39, v41, v40, v43, v42, v44, v45, v63, v62, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
          outlined release of NavigationColumnState(v112);
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v105);
          v12 = v66;
          v11 = v65;
          v18 = v71;
          goto LABEL_75;
        }
        v23 = (const void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v116);
        memcpy(v88, v23, 0x188uLL);
        memcpy(v111, v23, 0x12BuLL);
        v24 = *(_QWORD *)&v88[304];
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v105);
        outlined retain of NavigationState.Base((uint64_t)v115, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        outlined consume of ResolvedNavigationDestinations?(v24);
        if (v19)
          goto LABEL_99;
        specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(0, 0, v20, v21, (uint64_t)v111, 0, (uint64_t)v96);
        outlined release of NavigationColumnState((uint64_t *)v88);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v105);
        v11 = v65;
      }
      else
      {
        v25 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v116);
        v26 = *(_QWORD *)v25;
        v27 = *(unsigned __int8 *)(v25 + 8);
        v28 = *(_QWORD *)(v25 + 16);
        v29 = v105[51];
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v105);
        v30 = static HorizontalAlignment.center.getter();
        if (!*(_QWORD *)(v29 + 16))
          goto LABEL_81;
        v31 = v30;
        outlined init with copy of _VariadicView_Children(v29 + 32, (uint64_t)&v87);
        v84 = v31;
        v85 = 0;
        v86 = 1;
        v106[0] = 0;
        v106[1] = v26;
        v107 = v27;
        v108 = v28;
        v109 = 0;
        v110 = (_DWORD)v27 == 3;
        v69 = (void (*)(uint64_t *__return_ptr, _QWORD *))v105[49];
        v32 = v27 >= 3 ? 3 : v27;
        v72 = v32;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v84, (uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
        *(_QWORD *)&v88[80] = 0;
        *(_QWORD *)&v88[88] = v26;
        *(_QWORD *)&v88[96] = v27;
        *(_QWORD *)&v88[104] = v28;
        *(_QWORD *)&v88[112] = 0;
        v88[120] = (_DWORD)v27 == 3;
        v88[121] = 1;
        v33 = swift_allocObject();
        *(_BYTE *)(v33 + 16) = 1;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v88, (uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
        v82 = a3;
        v83 = v33;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
        v69(&v76, v106);
        v11 = v65;
        LOBYTE(v33) = v76;
        v70 = v77;
        v34 = v78;
        v35 = v79;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v80, (uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
        v88[144] = v33;
        *(_OWORD *)&v88[152] = v70;
        *(_QWORD *)&v88[168] = v34;
        *(_QWORD *)&v88[176] = v35;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
        type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
        lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>);
        v36 = AnyView.init<A>(_:)();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v84, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
        memset((char *)&v96[1] + 8, 0, 40);
        v97 = 2;
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v105);
        *(_QWORD *)&v96[0] = v36;
        BYTE8(v96[0]) = v72;
        *(_QWORD *)&v96[1] = 0;
      }
      v12 = v66;
LABEL_75:
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v105);
      v19 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v19, v18 & 1);
      v18 = v50;
      v20 = v51;
      v21 = v52;
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v105);
      v98 = v18 & 1;
LABEL_76:
      outlined init with take of Image.Resolved?((uint64_t)v96, (uint64_t)v80, &lazy cache variable for type metadata for NavigationState.StackContent.PositionedView?, (uint64_t)&type metadata for NavigationState.StackContent.PositionedView);
      if (!*(_QWORD *)&v80[0])
      {
        *(_DWORD *)&v88[9] = v103[0];
        *(_DWORD *)&v88[12] = *(_DWORD *)((char *)v103 + 3);
        *(_DWORD *)&v88[25] = v102[0];
        *(_DWORD *)&v88[28] = *(_DWORD *)((char *)v102 + 3);
        *(_DWORD *)&v88[41] = v100[0];
        *(_DWORD *)&v88[44] = *(_DWORD *)((char *)v100 + 3);
        *(_DWORD *)v91 = v84;
        *(_DWORD *)&v91[3] = *(_DWORD *)((char *)&v84 + 3);
        *(_QWORD *)v88 = v12;
        v88[8] = v104;
        *(_QWORD *)&v88[16] = v58;
        v88[24] = v59;
        *(_QWORD *)&v88[32] = v75;
        v88[40] = v101;
        *(_QWORD *)&v88[48] = v64;
        v88[56] = v11;
        memcpy(&v88[57], __dst, 0x1A7uLL);
        v89 = v19;
        v90 = v98;
        v92 = v20;
        v93 = v21;
        v94 = v74;
        v95 = v73;
        return outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>.Iterator((uint64_t)v88);
      }
      *(_OWORD *)&v88[32] = v80[2];
      *(_OWORD *)&v88[48] = v80[3];
      v88[64] = v81;
      *(_OWORD *)v88 = v80[0];
      *(_OWORD *)&v88[16] = v80[1];
      v74(&v84, v88);
      v53 = v84;
      v54 = v85;
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v88);
      v88[0] = v53;
      *(_QWORD *)&v88[8] = v54;
      v55 = v88;
      NavigationHostingControllerCache_UIKit.eject(at:)(*(SwiftUI::NavigationContentAbstractPosition *)&v55);
      v17 = v101;
      if ((v18 & 1) != 0)
        goto LABEL_14;
LABEL_16:
      if (!(v17 & 1 | (v19 != v75)))
        break;
      memcpy(v105, &__dst[7], sizeof(v105));
      if ((v104 & 1) != 0)
        goto LABEL_95;
    }
  }
  if ((v18 & 1) != 0)
    goto LABEL_44;
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double static NavigationStackCore._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  _QWORD v42[2];
  __int128 v43;
  _QWORD v44[2];
  __int128 v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  double v61;

  v7 = *a1;
  v8 = *a2;
  v9 = a2[2];
  v29 = *((_DWORD *)a2 + 2);
  v30 = *((_DWORD *)a2 + 6);
  v31 = *((_DWORD *)a2 + 7);
  v32 = *((_DWORD *)a2 + 8);
  v10 = a2[5];
  v11 = a2[6];
  v33 = *((_DWORD *)a2 + 9);
  v34 = *((_DWORD *)a2 + 14);
  v35 = *((_DWORD *)a2 + 15);
  v36 = *((_DWORD *)a2 + 16);
  v37 = *((_DWORD *)a2 + 17);
  v38 = *((_DWORD *)a2 + 18);
  v39 = *((_DWORD *)a2 + 19);
  v40 = *((_DWORD *)a2 + 20);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v28 = v45;
  LODWORD(v45) = v7;
  type metadata accessor for NavigationStackCore(255, a3, a4, v12);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64))
    closure #1 in static NavigationStackCore._makeView(view:inputs:)(1, a3, a4, v13);
  AGGraphCreateOffsetAttribute2();
  LODWORD(v45) = v7;
  _GraphValue.value.getter();
  closure #2 in static NavigationStackCore._makeView(view:inputs:)(1, a3, a4, v14);
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  AnyInterfaceIdiom.init<A>(_:)();
  v15 = a4;
  if (v28 && (v60 = v28, v61 = *((double *)&v45 + 1), v43 = v45, (static AnyInterfaceIdiom.== infix(_:_:)() & 1) != 0))
  {
    lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    v17 = type metadata accessor for NavigationStackCore.MultimodalNavigationStackRoot(255, a3, a4, v16);
    v18 = type metadata accessor for _VariadicView.Tree();
    HIDWORD(v45) = DWORD1(v45);
    v20 = type metadata accessor for NavigationStackCore.MultimodalNavigationStackChild(0, a3, v15, v19);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackCore<A>.MultimodalNavigationStackChild, v20);
    _GraphValue.init<A>(_:)();
    *(_QWORD *)&v45 = v8;
    DWORD2(v45) = v29;
    v46 = v9;
    v47 = v30;
    v48 = v31;
    v49 = v32;
    v50 = v33;
    v51 = v10;
    v52 = v11;
    v53 = v34;
    v54 = v35;
    v55 = v36;
    v56 = v37;
    v57 = v38;
    v58 = v39;
    v59 = v40;
    v42[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackCore<A>.MultimodalNavigationStackRoot, v17);
    v42[1] = v15;
    v21 = MEMORY[0x1E0CE2630];
    v22 = v42;
  }
  else
  {
    lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    v24 = type metadata accessor for NavigationStackCore.NavigationStackRepresentableRoot(255, a3, a4, v23);
    v18 = type metadata accessor for _VariadicView.Tree();
    HIDWORD(v45) = DWORD1(v45);
    v26 = type metadata accessor for NavigationStackCore.NavigationStackRepresentableChild(0, a3, v15, v25);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackCore<A>.NavigationStackRepresentableChild, v26);
    _GraphValue.init<A>(_:)();
    *(_QWORD *)&v45 = v8;
    DWORD2(v45) = v29;
    v46 = v9;
    v47 = v30;
    v48 = v31;
    v49 = v32;
    v50 = v33;
    v51 = v10;
    v52 = v11;
    v53 = v34;
    v54 = v35;
    v55 = v36;
    v56 = v37;
    v57 = v38;
    v58 = v39;
    v59 = v40;
    v44[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackCore<A>.NavigationStackRepresentableRoot, v24);
    v44[1] = v15;
    v21 = MEMORY[0x1E0CE2630];
    v22 = v44;
  }
  MEMORY[0x18D75FFDC](v21, v18, v22);
  static View.makeDebuggableView(view:inputs:)();
  result = v61;
  *(_QWORD *)a5 = v60;
  *(double *)(a5 + 8) = result;
  return result;
}

uint64_t closure #1 in static NavigationStackCore._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for NavigationStackCore(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t closure #2 in static NavigationStackCore._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v5 = type metadata accessor for NavigationStackCore(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 36);
  v10[2] = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_15, (uint64_t)v10, (uint64_t)&type metadata for NavigationStackContext, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

double NavigationStackCore.NavigationStackRepresentableChild.authority.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of SwiftUIAnySortComparator?(WeakValue, a1, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = xmmword_187BF9F90;
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

void NavigationStackCore.NavigationStackRepresentableChild.navigationPresentationAdaptor.getter(int a1@<W3>, uint64_t a2@<X8>)
{
  uint64_t Value;

  if (*MEMORY[0x1E0CFED28] == a1)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_OWORD *)(a2 + 24) = xmmword_187BFE310;
  }
  else
  {
    type metadata accessor for UINavigationPresentationAdaptor?();
    Value = AGGraphGetValue();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, a2, (uint64_t (*)(_QWORD))type metadata accessor for UINavigationPresentationAdaptor?);
  }
}

uint64_t NavigationStackCore.NavigationStackRepresentableChild.ensuredAuthority.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  NavigationStackCore.NavigationStackRepresentableChild.authority.getter((uint64_t)v7);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)&v5, (uint64_t (*)(_QWORD))type metadata accessor for NavigationAuthority??);
  if (v6 == 2)
  {
    v10 = xmmword_187BF9840;
    v11 = 0;
  }
  else
  {
    outlined init with take of Image.Resolved?((uint64_t)&v5, (uint64_t)&v10, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for NavigationAuthority??);
  if (*((_QWORD *)&v10 + 1) != 1)
    return outlined init with take of NavigationAuthority((uint64_t)&v10, a1);
  type metadata accessor for NavigationStateHost();
  swift_allocObject();
  NavigationStateHost.init()();
  EnvironmentValues.init()();
  v2 = v5;
  v3 = v6;
  swift_weakInit();
  swift_weakAssign();
  swift_release();
  v8 = v2;
  v9 = v3;
  outlined init with take of NavigationAuthority((uint64_t)v7, a1);
  return outlined destroy of AccessibilityTableContext?((uint64_t)&v10, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
}

uint64_t NavigationStackCore.NavigationStackRepresentableChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  char *v10;
  uint64_t Value;
  char v12;
  uint64_t v13;
  uint64_t *WeakValue;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  _BYTE v26[24];
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD v30[4];
  uint64_t v31;

  v23 = a6;
  v22 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  v21 = *(_QWORD *)Value;
  v12 = *(_BYTE *)(Value + 8);
  v13 = *(_QWORD *)(Value + 16);
  NavigationStackCore.NavigationStackRepresentableChild.ensuredAuthority.getter((uint64_t)v26);
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
    v15 = *WeakValue;
  else
    v15 = -1;
  NavigationStackCore.NavigationStackRepresentableChild.navigationPresentationAdaptor.getter(a3, (uint64_t)&v27);
  if (v30[0] == 1)
  {
    v25 = 0;
    memset(v24, 0, sizeof(v24));
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v27, (uint64_t (*)(_QWORD))type metadata accessor for UINavigationPresentationAdaptor??);
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)&v27, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for UINavigationPresentationAdaptor?);
  }
  v16 = v22;
  v27 = v21;
  v28 = v12;
  v29 = v13;
  outlined init with take of NavigationAuthority((uint64_t)v26, (uint64_t)v30);
  v30[3] = v15;
  outlined init with take of TableCellFormula((uint64_t)v24, (uint64_t)&v31, (uint64_t (*)(_QWORD))type metadata accessor for UINavigationPresentationAdaptor?);
  v17 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v10, v17, a4);
  type metadata accessor for NavigationStackCore.NavigationStackRepresentableRoot(0, a4, a5, v18);
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationStackCore<A>.NavigationStackRepresentableChild@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance NavigationStackCore<A>.NavigationStackRepresentableChild(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for NavigationStackCore.NavigationStackRepresentableRoot, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationStackCore<A>.NavigationStackRepresentableChild@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return NavigationStackCore.NavigationStackRepresentableChild.value.getter(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t NavigationStackCore.MultimodalNavigationStackChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Value;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *WeakValue;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _BYTE v20[24];
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD v24[4];

  v19[1] = a5;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  v11 = *(_QWORD *)Value;
  v12 = *(_BYTE *)(Value + 8);
  v13 = *(_QWORD *)(Value + 16);
  NavigationStackCore.NavigationStackRepresentableChild.ensuredAuthority.getter((uint64_t)v20);
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
    v15 = *WeakValue;
  else
    v15 = -1;
  v21 = v11;
  v22 = v12;
  v23 = v13;
  outlined init with take of NavigationAuthority((uint64_t)v20, (uint64_t)v24);
  v24[3] = v15;
  v16 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v16, a3);
  type metadata accessor for NavigationStackCore.MultimodalNavigationStackRoot(0, a3, a4, v17);
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationStackCore<A>.MultimodalNavigationStackChild@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance NavigationStackCore<A>.NavigationStackRepresentableChild(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for NavigationStackCore.MultimodalNavigationStackRoot, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationStackCore<A>.NavigationStackRepresentableChild@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, _QWORD, _QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;

  a2(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = type metadata accessor for _VariadicView.Tree();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationStackCore<A>.MultimodalNavigationStackChild@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return NavigationStackCore.MultimodalNavigationStackChild.value.getter(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t NavigationStackCore.NavigationStackRepresentableRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  _BYTE v6[176];
  uint64_t v7;

  v3 = a1;
  closure #1 in NavigationStackCore.NavigationStackRepresentableRoot.body(children:)(v2, a1, 1, (uint64_t)v6);
  closure #1 in NavigationStackCore.NavigationStackRepresentableRoot.body(children:)(v2, v3, 0, (uint64_t)&v7);
  LOBYTE(v3) = static Edge.Set.all.getter();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v6, a2, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>);
  *(_QWORD *)(a2 + 352) = -1;
  *(_BYTE *)(a2 + 360) = v3;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>);
}

uint64_t closure #1 in NavigationStackCore.NavigationStackRepresentableRoot.body(children:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v7 = *a1;
  v8 = *((_BYTE *)a1 + 8);
  v9 = a1[2];
  outlined init with copy of _VariadicView_Children(a2, a4 + 24);
  outlined init with copy of NavigationAuthority((uint64_t)(a1 + 3), a4 + 80);
  v10 = a1[6];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)(a1 + 7), a4 + 120, (uint64_t (*)(_QWORD))type metadata accessor for UINavigationPresentationAdaptor?);
  *(_QWORD *)a4 = v7;
  *(_BYTE *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = v9;
  *(_BYTE *)(a4 + 104) = a3;
  *(_QWORD *)(a4 + 108) = v10;
  result = swift_getKeyPath();
  *(_QWORD *)(a4 + 160) = result;
  *(_BYTE *)(a4 + 168) = 0;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance NavigationStackCore<A>.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackCore<A>.NavigationStackRepresentableRoot, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t NavigationStackCore.MultimodalNavigationStackRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;

  outlined init with copy of _VariadicView_Children(a1, a2);
  v4 = *v2;
  v5 = *((_BYTE *)v2 + 8);
  v6 = v2[2];
  outlined init with copy of NavigationAuthority((uint64_t)(v2 + 3), a2 + 80);
  *(_QWORD *)(a2 + 56) = v4;
  *(_BYTE *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v6;
  *(_QWORD *)(a2 + 104) = v2[6];
  result = swift_getKeyPath();
  *(_QWORD *)(a2 + 112) = result;
  *(_BYTE *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 136) = 1;
  *(_QWORD *)(a2 + 144) = 0;
  *(_BYTE *)(a2 + 152) = 1;
  *(_QWORD *)(a2 + 160) = 0;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance NavigationStackCore<A>.MultimodalNavigationStackRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackCore<A>.MultimodalNavigationStackRoot, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

double protocol witness for static View._makeView(view:inputs:) in conformance NavigationStackCore<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static NavigationStackCore._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

void protocol witness for View.body.getter in conformance NavigationStackCore<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackCore<A>, a1);
  specialized PrimitiveView.body.getter();
}

UINavigationController *NavigationStackRepresentable.makeUIViewController(context:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  id v9;
  char v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  UINavigationController *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[40];

  v2 = v1;
  v3 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(void **)(a1 + 24);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E0CE5600], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
  outlined init with copy of _VariadicView_Children(v1 + 24, v6 + 32);
  v7 = *(_QWORD *)(v1 + 160);
  v8 = *(_BYTE *)(v2 + 168);
  swift_retain_n();
  swift_retain_n();
  v9 = v3;
  outlined copy of Environment<Bool>.Content(v7, v8);
  v10 = specialized Environment.wrappedValue.getter(v7, v8);
  outlined consume of Environment<Bool>.Content(v7, v8);
  v11 = specialized NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)(v4, (uint64_t)v5, v10 & 1, v4, (uint64_t)v5, v6);
  type metadata accessor for UIKitNavigationController();
  *(_QWORD *)&v20 = v4;
  *((_QWORD *)&v20 + 1) = v5;
  outlined init with copy of NavigationAuthority(v2 + 80, (uint64_t)v22);
  v12 = *(_BYTE *)(v2 + 104);
  swift_retain();
  swift_retain();
  v13 = v11;
  v14 = (UINavigationController *)UIKitNavigationController.__allocating_init(rootViewController:environment:navigationAuthority:isSecure:)(v13, (uint64_t *)&v20, (uint64_t)v22, v12);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2 + 120, (uint64_t)&v20, (uint64_t (*)(_QWORD))type metadata accessor for UINavigationPresentationAdaptor?);
  if (v21)
  {
    outlined init with take of OptionalBinaryInteger(&v20, (uint64_t)v22);
    outlined init with copy of TableColumnList((uint64_t)v22, (uint64_t)&v20);
    v15 = (uint64_t)v14 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_platformNavigationPresentationStrategy;
    swift_beginAccess();
    outlined assign with take of UIKitNavigationController.PlatformNavigationRequestStrategy((uint64_t)&v20, v15);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v20, (uint64_t (*)(_QWORD))type metadata accessor for UINavigationPresentationAdaptor?);
  }
  v16 = *(unsigned __int8 *)(v2 + 8);
  v17 = *(_QWORD *)(v2 + 16);
  v18 = (Class *)((char *)&v14->super.super.super.isa + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_context);
  *v18 = *(_QWORD *)v2;
  v18[1] = v16;
  v18[2] = v17;
  -[UINavigationController setDelegate:](v14, sel_setDelegate_, v9);
  specialized UIHostingController.prepareNavigationBar(in:navigationController:isRoot:)(v4, v5, v14, 1);

  swift_bridgeObjectRelease();
  swift_release_n();
  swift_release_n();

  return v14;
}

_QWORD *specialized NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *result;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _BYTE v62[24];
  uint64_t v63;
  uint64_t (*v64)();
  uint64_t v65;
  char *(*v66)();
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  void *v70;
  void (*v71)(_BYTE *@<X8>);
  void (*v72)(char *);
  __int128 v73;
  int v74;
  __int16 v75;
  _OWORD v76[4];
  char v77;
  _BYTE v78[392];
  _BYTE v79[392];
  _QWORD v80[55];
  _OWORD v81[4];
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[52];
  _BYTE v87[392];
  _OWORD v88[9];
  __int16 v89;

  v7 = v6;
  v74 = a3;
  *(_QWORD *)&v73 = a1;
  *((_QWORD *)&v73 + 1) = a2;
  v83 = a4;
  v84 = a5;
  v85 = a6;
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v12 = (_QWORD *)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x70));
  swift_beginAccess();
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  *v12 = a4;
  v12[1] = a5;
  v12[2] = a6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of RichTextAttributeResolver?(v13, v14, v15);
  v16 = (uint64_t)v7 + *(_QWORD *)((*v11 & *v7) + 0x68);
  Strong = swift_weakLoadStrong();
  if (!Strong)
    goto LABEL_4;
  v18 = Strong + 16;
  swift_beginAccess();
  outlined init with take of Image.Resolved?(v18, (uint64_t)v81, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  outlined retain of NavigationState?((uint64_t)v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
  swift_release();
  outlined init with take of Image.Resolved?((uint64_t)v81, (uint64_t)v78, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v78) == 1)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
LABEL_4:
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v80);
    v19 = v80;
    goto LABEL_5;
  }
  v88[6] = *(_OWORD *)&v78[96];
  v88[7] = *(_OWORD *)&v78[112];
  v88[8] = *(_OWORD *)&v78[128];
  v88[2] = *(_OWORD *)&v78[32];
  v88[3] = *(_OWORD *)&v78[48];
  v89 = *(_WORD *)&v78[144];
  v88[4] = *(_OWORD *)&v78[64];
  v88[5] = *(_OWORD *)&v78[80];
  v88[0] = *(_OWORD *)v78;
  v88[1] = *(_OWORD *)&v78[16];
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v61 = (char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x60);
  NavigationState.stackContent(for:)(*(_QWORD *)v61, v61[8], *((_QWORD *)v61 + 2), (uint64_t)v86);
  outlined retain of NavigationState?((uint64_t)v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
  outlined init with take of Image.Resolved?((uint64_t)v86, (uint64_t)v79, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined init with take of Image.Resolved?((uint64_t)v79, (uint64_t)v80, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v80) != 1)
  {
    outlined init with take of Image.Resolved?((uint64_t)v79, (uint64_t)v87, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    goto LABEL_9;
  }
  v19 = v79;
LABEL_5:
  outlined init with take of Image.Resolved?((uint64_t)v19, (uint64_t)v88, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  v20 = (char *)v7 + *(_QWORD *)((*v11 & *v7) + 0x60);
  v21 = *(_QWORD *)v20;
  v22 = v20[8];
  v23 = *((_QWORD *)v20 + 2);
  outlined release of NavigationState.StackContent?((uint64_t)v88, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
  v86[0] = v21;
  if (v22 == 4)
    v24 = 0;
  else
    v24 = v22;
  LOBYTE(v86[1]) = v24;
  v86[2] = v23;
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v86);
  outlined init with take of NavigationState.Base(v86, v87);
LABEL_9:
  memcpy(v78, v87, sizeof(v78));
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v78);
  v25 = (uint64_t)v7 + *(_QWORD *)((*v11 & *v7) + 0xB0);
  outlined init with take of Image.Resolved?(v25, (uint64_t)v79, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined init with take of Image.Resolved?((uint64_t)v78, v25, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined retain of NavigationState.Base((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  outlined release of NavigationState.StackContent?((uint64_t)v79, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = a4;
  v26[3] = a5;
  v26[4] = a6;
  outlined init with take of NavigationState.Base(v87, v80);
  v80[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
  v80[50] = v26;
  v80[51] = a6;
  memcpy(v86, v80, sizeof(v86));
  outlined retain of NavigationState.Base((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of NavigationState.Base((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  swift_bridgeObjectRetain();
  specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
  swift_bridgeObjectRelease();
  v27 = outlined retain of NavigationState.Base((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  v29 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v27);
  v31 = v30;
  v33 = v32;
  v34 = v28;
  if ((v30 & 1) != 0 && v28 > 1u)
  {
    result = (_QWORD *)outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
    goto LABEL_24;
  }
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
  specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v29, v31 & 1, v33, v34);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
  result = (_QWORD *)outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
  if (!*(_QWORD *)&v76[0])
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v36 = v11;
  v81[2] = v76[2];
  v81[3] = v76[3];
  v82 = v77;
  v81[0] = v76[0];
  v81[1] = v76[1];
  outlined init with copy of NavigationAuthority(v16, (uint64_t)v76);
  NavigationAuthority.controllerCache.getter();
  v37 = outlined destroy of NavigationAuthority((uint64_t)v76);
  MEMORY[0x1E0C80A78](v37, v38);
  v72 = (void (*)(char *))v81;
  MEMORY[0x1E0C80A78](v39, v40);
  v68 = &v83;
  v69 = v41;
  MEMORY[0x1E0C80A78](v42, v43);
  v62[16] = v44;
  v63 = v45;
  v64 = partial apply for closure #1 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:);
  v65 = v46;
  v66 = partial apply for specialized closure #2 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:);
  v67 = v47;
  v48 = specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(0, (void (*)(uint64_t *))partial apply for closure #1 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:), (uint64_t)v62, (void (*)(uint64_t *__return_ptr, unint64_t))closure #2 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:), 0);
  swift_release();
  specialized NavigationStackCoordinator.configureAsRoot(_:transparentBackground:)(v48, v74 & 1);
  result = objc_msgSend(v48, sel_view);
  if (!result)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  v49 = result;
  objc_msgSend(result, sel_setClipsToBounds_, 1);

  v50 = direct field offset for UIHostingController.host;
  v51 = v83;
  v52 = v84;
  v53 = *(id *)((char *)v48 + direct field offset for UIHostingController.host);
  v71 = partial apply for closure #1 in UIHostingController.initialDataDrivenPresentationMode(canPop:);
  v72 = partial apply for specialized closure #2 in UIHostingController.initialDataDrivenPresentationMode(canPop:);
  v70 = &unk_1E1B4DBF8;
  specialized NavigationStrategy.inheritedEnvironment<A>(from:for:canPop:)(1, 0, 0, v51, v52, (uint64_t *)v76);
  v54 = (_QWORD *)((char *)v53 + *(_QWORD *)((*v36 & *v53) + 0x118));
  v55 = *v54;
  *(_OWORD *)v54 = v76[0];
  outlined consume of EnvironmentValues?(v55);
  v75 = 2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  v76[0] = v73;
  v56 = EnvironmentValues.preferenceBridge.getter();
  if (v56)
  {
    v57 = v56;
    v58 = *(id *)((char *)v48 + v50);
    swift_retain();
    v59 = ViewGraph.preferenceBridge.getter();
    if (!v59 || (v60 = v59, swift_release(), v57 != v60))
    {
      swift_retain();
      ViewGraph.preferenceBridge.setter();
    }
    swift_release();

    outlined retain of NavigationState.Base((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    swift_release();
  }
  else
  {
    outlined retain of NavigationState.Base((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  }
  outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v81);
  return v48;
}

{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *result;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _BYTE v62[24];
  uint64_t v63;
  uint64_t (*v64)();
  uint64_t v65;
  char *(*v66)();
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  void *v70;
  uint64_t (*v71)();
  uint64_t (*v72)();
  __int128 v73;
  int v74;
  __int16 v75;
  _OWORD v76[4];
  char v77;
  _BYTE v78[392];
  _BYTE v79[392];
  _QWORD v80[55];
  _OWORD v81[4];
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[52];
  _BYTE v87[392];
  _OWORD v88[9];
  __int16 v89;

  v7 = v6;
  v74 = a3;
  *(_QWORD *)&v73 = a1;
  *((_QWORD *)&v73 + 1) = a2;
  v83 = a4;
  v84 = a5;
  v85 = a6;
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v12 = (_QWORD *)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x70));
  swift_beginAccess();
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  *v12 = a4;
  v12[1] = a5;
  v12[2] = a6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of RichTextAttributeResolver?(v13, v14, v15);
  v16 = (uint64_t)v7 + *(_QWORD *)((*v11 & *v7) + 0x68);
  Strong = swift_weakLoadStrong();
  if (!Strong)
    goto LABEL_4;
  v18 = Strong + 16;
  swift_beginAccess();
  outlined init with take of Image.Resolved?(v18, (uint64_t)v81, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  outlined retain of NavigationState?((uint64_t)v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
  swift_release();
  outlined init with take of Image.Resolved?((uint64_t)v81, (uint64_t)v78, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v78) == 1)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
LABEL_4:
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v80);
    v19 = v80;
    goto LABEL_5;
  }
  v88[6] = *(_OWORD *)&v78[96];
  v88[7] = *(_OWORD *)&v78[112];
  v88[8] = *(_OWORD *)&v78[128];
  v88[2] = *(_OWORD *)&v78[32];
  v88[3] = *(_OWORD *)&v78[48];
  v89 = *(_WORD *)&v78[144];
  v88[4] = *(_OWORD *)&v78[64];
  v88[5] = *(_OWORD *)&v78[80];
  v88[0] = *(_OWORD *)v78;
  v88[1] = *(_OWORD *)&v78[16];
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v61 = (char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x60);
  NavigationState.stackContent(for:)(*(_QWORD *)v61, v61[8], *((_QWORD *)v61 + 2), (uint64_t)v86);
  outlined retain of NavigationState?((uint64_t)v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
  outlined init with take of Image.Resolved?((uint64_t)v86, (uint64_t)v79, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined init with take of Image.Resolved?((uint64_t)v79, (uint64_t)v80, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v80) != 1)
  {
    outlined init with take of Image.Resolved?((uint64_t)v79, (uint64_t)v87, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    goto LABEL_9;
  }
  v19 = v79;
LABEL_5:
  outlined init with take of Image.Resolved?((uint64_t)v19, (uint64_t)v88, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  v20 = (char *)v7 + *(_QWORD *)((*v11 & *v7) + 0x60);
  v21 = *(_QWORD *)v20;
  v22 = v20[8];
  v23 = *((_QWORD *)v20 + 2);
  outlined release of NavigationState.StackContent?((uint64_t)v88, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
  v86[0] = v21;
  if (v22 == 4)
    v24 = 0;
  else
    v24 = v22;
  LOBYTE(v86[1]) = v24;
  v86[2] = v23;
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v86);
  outlined init with take of NavigationState.Base(v86, v87);
LABEL_9:
  memcpy(v78, v87, sizeof(v78));
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v78);
  v25 = (uint64_t)v7 + *(_QWORD *)((*v11 & *v7) + 0xB0);
  outlined init with take of Image.Resolved?(v25, (uint64_t)v79, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined init with take of Image.Resolved?((uint64_t)v78, v25, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined retain of NavigationState.Base((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  outlined release of NavigationState.StackContent?((uint64_t)v79, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = a4;
  v26[3] = a5;
  v26[4] = a6;
  outlined init with take of NavigationState.Base(v87, v80);
  v80[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
  v80[50] = v26;
  v80[51] = a6;
  memcpy(v86, v80, sizeof(v86));
  outlined retain of NavigationState.Base((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of NavigationState.Base((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  swift_bridgeObjectRetain();
  specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
  swift_bridgeObjectRelease();
  v27 = outlined retain of NavigationState.Base((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  v29 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v27);
  v31 = v30;
  v33 = v32;
  v34 = v28;
  if ((v30 & 1) != 0 && v28 > 1u)
  {
    result = (_QWORD *)outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
    goto LABEL_24;
  }
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
  specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v29, v31 & 1, v33, v34);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
  result = (_QWORD *)outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v80);
  if (!*(_QWORD *)&v76[0])
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v36 = v11;
  v81[2] = v76[2];
  v81[3] = v76[3];
  v82 = v77;
  v81[0] = v76[0];
  v81[1] = v76[1];
  outlined init with copy of NavigationAuthority(v16, (uint64_t)v76);
  NavigationAuthority.controllerCache.getter();
  v37 = outlined destroy of NavigationAuthority((uint64_t)v76);
  MEMORY[0x1E0C80A78](v37, v38);
  v72 = (uint64_t (*)())v81;
  MEMORY[0x1E0C80A78](v39, v40);
  v68 = &v83;
  v69 = v41;
  MEMORY[0x1E0C80A78](v42, v43);
  v62[16] = v44;
  v63 = v45;
  v64 = closure #1 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)partial apply;
  v65 = v46;
  v66 = partial apply for specialized closure #2 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:);
  v67 = v47;
  v48 = specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(0, (void (*)(uint64_t *))partial apply for closure #1 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:), (uint64_t)v62, (void (*)(uint64_t *__return_ptr, unint64_t))closure #2 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:), 0);
  swift_release();
  specialized NavigationStackCoordinator.configureAsRoot(_:transparentBackground:)(v48, v74 & 1);
  result = objc_msgSend(v48, sel_view);
  if (!result)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  v49 = result;
  objc_msgSend(result, sel_setClipsToBounds_, 1);

  v50 = direct field offset for UIHostingController.host;
  v51 = v83;
  v52 = v84;
  v53 = *(id *)((char *)v48 + direct field offset for UIHostingController.host);
  v71 = closure #1 in UIHostingController.initialDataDrivenPresentationMode(canPop:)partial apply;
  v72 = closure #2 in UIHostingController.initialDataDrivenPresentationMode(canPop:)specialized partial apply;
  v70 = &unk_1E1B4E328;
  specialized NavigationStrategy.inheritedEnvironment<A>(from:for:canPop:)(1, 0, 0, v51, v52, (uint64_t *)v76);
  v54 = (_QWORD *)((char *)v53 + *(_QWORD *)((*v36 & *v53) + 0x118));
  v55 = *v54;
  *(_OWORD *)v54 = v76[0];
  outlined consume of EnvironmentValues?(v55);
  v75 = 2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  v76[0] = v73;
  v56 = EnvironmentValues.preferenceBridge.getter();
  if (v56)
  {
    v57 = v56;
    v58 = *(id *)((char *)v48 + v50);
    swift_retain();
    v59 = ViewGraph.preferenceBridge.getter();
    if (!v59 || (v60 = v59, swift_release(), v57 != v60))
    {
      swift_retain();
      ViewGraph.preferenceBridge.setter();
    }
    swift_release();

    outlined retain of NavigationState.Base((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    swift_release();
  }
  else
  {
    outlined retain of NavigationState.Base((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  }
  outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v81);
  return v48;
}

_BYTE *UIKitNavigationController.__allocating_init(rootViewController:environment:navigationAuthority:isSecure:)(void *a1, uint64_t *a2, uint64_t a3, char a4)
{
  objc_class *v4;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD v14[3];

  v9 = *a2;
  v8 = a2[1];
  v10 = objc_msgSend(objc_allocWithZone(v4), sel_initWithRootViewController_, a1);
  outlined init with copy of NavigationAuthority(a3, (uint64_t)v14);
  v11 = (uint64_t)v10 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_navigationAuthority;
  swift_beginAccess();
  v12 = v10;
  outlined assign with take of NavigationAuthority?((uint64_t)v14, v11);
  swift_endAccess();
  v12[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isSecure] = a4;
  v14[0] = v9;
  v14[1] = v8;
  UIKitNavigationController.configure(environment:)((uint64_t)v14);

  outlined destroy of NavigationAuthority(a3);
  swift_release();
  swift_release();
  return v12;
}

void specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1E1B4DC98, (uint64_t)&unk_1E1B4DCE8, (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:));
}

{
  specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1E1B4E030, (uint64_t)&unk_1E1B4E080, (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:));
}

{
  specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1E1B4D928, (uint64_t)&unk_1E1B4D978, (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:));
}

void specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v12;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  char v43;
  id v44;
  uint64_t Strong;
  uint64_t v46;
  uint8_t *v47;
  _QWORD *v48;
  unsigned int *v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  Swift::UInt v56;
  Swift::UInt v57;
  unsigned __int8 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  int v66;
  uint8_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  id v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  id v98;
  int v99;
  int v100;
  _BYTE v101[392];
  _BYTE v102[392];
  _BYTE v103[392];
  _BYTE v104[392];
  _BYTE v105[392];
  _BYTE v106[392];
  _QWORD v107[52];
  _BYTE v108[152];
  _OWORD v109[9];
  __int16 v110;
  _BYTE v111[392];
  _OWORD v112[26];

  LODWORD(v94) = a6;
  v95 = a5;
  v96 = a3;
  v93 = a4;
  v98 = a1;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v16, v17);
  v91 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v92 = (uint8_t *)&v88 - v21;
  v22 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v12) + 0x70);
  v97 = v12;
  v23 = (uint64_t *)((char *)v12 + v22);
  swift_beginAccess();
  v25 = *v23;
  v24 = v23[1];
  v26 = v23[2];
  *v23 = a7;
  v23[1] = a8;
  v23[2] = a9;
  v90 = a8;
  swift_retain();
  swift_bridgeObjectRetain();
  v89 = a7;
  swift_retain();
  outlined consume of RichTextAttributeResolver?(v25, v24, v26);
  if (!v23[2])
    goto LABEL_55;
  v27 = v96;
  *v23 = a2;
  v23[1] = v27;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v28 = v98;
  v29 = objc_msgSend(v98, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v30 >> 62)
  {
    swift_bridgeObjectRetain();
    v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v32 = v97;
  if (v31 < 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if ((v30 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v33 = *(id *)(v30 + 32);
      goto LABEL_8;
    }
    __break(1u);
LABEL_55:
    __break(1u);
    return;
  }
  v33 = (id)MEMORY[0x18D75E3BC](0, v30);
LABEL_8:
  v34 = v33;
  swift_bridgeObjectRelease();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  v35 = swift_dynamicCastClass();
  if (v35)
  {
    v36 = v35;
    v37 = direct field offset for UIHostingController.host;
    v38 = *(void **)(v35 + direct field offset for UIHostingController.host);
    v39 = (void *)objc_opt_self();
    v40 = v38;
    v41 = objc_msgSend(v39, sel_currentDevice);
    v42 = objc_msgSend(v41, sel_userInterfaceIdiom);

    v43 = v42 == (id)5 && *((_BYTE *)v32 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v32) + 0x60) + 8) == 0;
    specialized _UIHostingView.setWantsTransparentBackground(for:_:)(1, v43);

    v44 = *(id *)(v36 + v37);
    specialized _UIHostingView.setWantsTransparentBackground(for:_:)(4, v94 & 1);

  }
  else
  {

  }
LABEL_15:
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v46 = Strong + 16;
    swift_beginAccess();
    outlined init with take of Image.Resolved?(v46, (uint64_t)v108, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of Image.Resolved?((uint64_t)v108, (uint64_t)v109, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v109) != 1)
    {
      v47 = (uint8_t *)HIDWORD(v95);
      v48 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v32);
      v49 = (unsigned int *)((char *)v32 + v48[21]);
      v50 = *v49;
      v96 = a10;
      v97 = v49;
      if (__PAIR64__(v49[1], v50) == v95)
      {
        outlined init with take of Image.Resolved?((uint64_t)v32 + v48[22], (uint64_t)v111, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
        outlined init with take of Image.Resolved?((uint64_t)v111, (uint64_t)v112, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
        if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v112) == 1)
        {
          v51 = (char *)v32 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v32) + 0x60);
          v52 = *(_QWORD *)v51;
          v53 = v51[8];
          v54 = *((_QWORD *)v51 + 2);
          if (v53 == 4)
            LOBYTE(v53) = 0;
          v107[0] = v52;
          LOBYTE(v107[1]) = v53;
          v107[2] = v54;
          _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v107);
          outlined init with take of NavigationState.Base(v107, v106);
        }
        else
        {
          memcpy(v106, v112, sizeof(v106));
        }
        v61 = (uint64_t)v92;
        outlined release of NavigationState.StackContent?((uint64_t)v111, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
        memcpy(v107, v106, 0x188uLL);
      }
      else
      {
        v55 = (char *)v32 + v48[12];
        v56 = *(_QWORD *)v55;
        v57 = *((_QWORD *)v55 + 2);
        v58 = v55[8];
        v112[6] = v109[6];
        v112[7] = v109[7];
        v112[8] = v109[8];
        LOWORD(v112[9]) = v110;
        v112[2] = v109[2];
        v112[3] = v109[3];
        v112[4] = v109[4];
        v112[5] = v109[5];
        v112[0] = v109[0];
        v112[1] = v109[1];
        NavigationState.stackContent(for:)(v56, v58, v57, (uint64_t)v104);
        outlined init with take of Image.Resolved?((uint64_t)v104, (uint64_t)v106, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
        outlined init with take of Image.Resolved?((uint64_t)v106, (uint64_t)v111, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
        if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v111) == 1)
        {
          v59 = v55[8];
          v60 = *((_QWORD *)v55 + 2);
          if (v59 == 4)
            LOBYTE(v59) = 0;
          *(_QWORD *)&v112[0] = *(_QWORD *)v55;
          BYTE8(v112[0]) = v59;
          *(_QWORD *)&v112[1] = v60;
          _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v112);
          outlined init with take of NavigationState.Base(v112, v105);
        }
        else
        {
          outlined init with take of Image.Resolved?((uint64_t)v106, (uint64_t)v105, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
        }
        memcpy(v112, v105, 0x188uLL);
        memcpy(v107, v105, 0x188uLL);
        NavigationState.StackContent.structuralSeed.getter(&v100);
        v72 = v100;
        outlined init with take of Image.Resolved?((uint64_t)v32 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v32) + 0xB0), (uint64_t)v102, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
        outlined init with take of Image.Resolved?((uint64_t)v102, (uint64_t)v103, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
        if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v103) == 1)
        {
          v73 = v55[8];
          v74 = *((_QWORD *)v55 + 2);
          if (v73 == 4)
            LOBYTE(v73) = 0;
          v107[0] = *(_QWORD *)v55;
          LOBYTE(v107[1]) = v73;
          v107[2] = v74;
          _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v107);
          outlined init with take of NavigationState.Base(v107, v101);
        }
        else
        {
          memcpy(v101, v103, sizeof(v101));
        }
        v75 = (uint64_t)v91;
        memcpy(v107, v101, 0x188uLL);
        outlined release of NavigationState.StackContent?((uint64_t)v102, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
        NavigationState.StackContent.structuralSeed.getter(&v99);
        outlined retain of NavigationState.Base((uint64_t)v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
        if (v72 == -1 || v99 == -1 || v72 != v99)
        {
          v92 = v47;
          v76 = v28;
          static Log.navigation.getter();
          v77 = type metadata accessor for Logger();
          v78 = *(_QWORD *)(v77 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v75, 1, v77) == 1)
          {
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v75, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
          }
          else
          {
            v79 = Logger.logObject.getter();
            v80 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v79, v80))
            {
              v81 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v81 = 0;
              _os_log_impl(&dword_186E48000, v79, v80, "Enqueuing: Updating stack views with new content", v81, 2u);
              v82 = v81;
              v75 = (uint64_t)v91;
              MEMORY[0x18D760108](v82, -1, -1);
            }

            (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v75, v77);
          }
          v83 = swift_allocObject();
          swift_unknownObjectWeakInit();
          v84 = swift_allocObject();
          *(_QWORD *)(v84 + 16) = v83;
          memcpy((void *)(v84 + 24), v112, 0x188uLL);
          v85 = v93;
          *(_QWORD *)(v84 + 416) = v76;
          *(_QWORD *)(v84 + 424) = v85;
          *(_BYTE *)(v84 + 432) = v94 & 1;
          swift_retain();
          swift_retain();
          v86 = v76;
          outlined retain of NavigationState.Base((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
          static Update.enqueueAction(_:)();
          outlined retain of NavigationState.Base((uint64_t)v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
          swift_release();
          outlined retain of NavigationState?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
          swift_release();
          LODWORD(v47) = (_DWORD)v92;
          goto LABEL_50;
        }
        memcpy(v107, v105, 0x188uLL);
        v61 = (uint64_t)v92;
      }
      v94 = a12;
      memcpy(v111, v107, sizeof(v111));
      static Log.navigation.getter();
      v62 = type metadata accessor for Logger();
      v63 = *(_QWORD *)(v62 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62) == 1)
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v61, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
      }
      else
      {
        v64 = Logger.logObject.getter();
        v65 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v64, v65))
        {
          v66 = (int)v47;
          v47 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v47 = 0;
          _os_log_impl(&dword_186E48000, v64, v65, "Enqueuing: Updating stack views in place", v47, 2u);
          v67 = v47;
          LODWORD(v47) = v66;
          v28 = v98;
          MEMORY[0x18D760108](v67, -1, -1);
        }

        (*(void (**)(uint8_t *, uint64_t))(v63 + 8))(v92, v62);
      }
      v68 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v69 = (_QWORD *)swift_allocObject();
      v69[2] = v68;
      memcpy(v69 + 3, v111, 0x188uLL);
      v70 = v90;
      v69[52] = v89;
      v69[53] = v70;
      v69[54] = a9;
      v69[55] = v28;
      v69[56] = v93;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      outlined retain of NavigationState.Base((uint64_t)v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      swift_retain();
      v71 = v28;
      static Update.enqueueAction(_:)();
      outlined retain of NavigationState.Base((uint64_t)v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
      swift_release();
      outlined retain of NavigationState?((uint64_t)v108, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
      swift_release();
LABEL_50:
      v87 = v97;
      *v97 = v95;
      v87[1] = v47;
    }
  }
}

uint64_t protocol witness for UIViewControllerRepresentable.updateUIViewController(_:context:) in conformance NavigationStackRepresentable(void *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = *(_QWORD *)(v2 + 108);
  v8 = *(_QWORD *)(v2 + 160);
  v9 = *(_BYTE *)(v2 + 168);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = specialized Environment.wrappedValue.getter(v8, v9);
  outlined consume of Environment<Bool>.Content(v8, v9);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E0CE5600], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_187BF9830;
  outlined init with copy of _VariadicView_Children(v2 + 24, v11 + 32);
  swift_retain();
  swift_retain();
  specialized NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(a1, v5, v6, v4, v7, v10 & 1, v5, v6, v11, (uint64_t)&unk_1E1B4D928, (uint64_t)&unk_1E1B4D978, (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:));
  swift_bridgeObjectRelease();
  swift_release_n();
  return swift_release_n();
}

id protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance NavigationStackRepresentable@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  Class v7;
  id v8;
  id result;
  _BYTE v10[24];

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = v1 + 80;
  v6 = *(_BYTE *)(v1 + 8);
  outlined init with copy of NavigationAuthority(v5, (uint64_t)v10);
  type metadata accessor for NavigationStackCoordinator<NavigationStrategy_Phone>(0);
  v8 = objc_allocWithZone(v7);
  result = specialized NavigationStackCoordinator.init(context:navigationAuthority:)(v3, v6, v4, (uint64_t)v10);
  *a1 = result;
  return result;
}

uint64_t NavigationStackCoordinator.environment.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t result;

  v1 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v2 = (char *)v0 + v1[14];
  swift_beginAccess();
  v3 = v1[10];
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t))(v1[11] + 24))(v3);
    return swift_endAccess();
  }
  return result;
}

uint64_t NavigationStackCoordinator.previousContent.getter@<X0>(void *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE v12[392];
  _BYTE __src[392];

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  outlined init with take of Image.Resolved?((uint64_t)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xB0), (uint64_t)v12, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined init with take of Image.Resolved?((uint64_t)v12, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)__src) == 1)
  {
    v4 = (char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x60);
    v5 = *(_QWORD *)v4;
    v6 = v4[8];
    v7 = *((_QWORD *)v4 + 2);
    if (v6 == 4)
      LOBYTE(v6) = 0;
    v9 = v5;
    v10 = v6;
    v11 = v7;
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(&v9);
    outlined init with take of NavigationState.Base(&v9, a1);
  }
  else
  {
    memcpy(a1, __src, 0x188uLL);
  }
  return outlined release of NavigationState.StackContent?((uint64_t)v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
}

id specialized NavigationStackCoordinator.init(context:navigationAuthority:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *ObjectType;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  id v15;
  objc_super v17;
  _BYTE v18[392];

  ObjectType = (objc_class *)swift_getObjectType();
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v11 = (_QWORD *)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x70));
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v10 & *v4) + 0x78)) = 2;
  *((_BYTE *)v4 + *(_QWORD *)((*v10 & *v4) + 0x80)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v10 & *v4) + 0x88)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v10 & *v4) + 0x90)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v10 & *v4) + 0x98)) = 0;
  v12 = (_QWORD *)((char *)v4 + *(_QWORD *)((*v10 & *v4) + 0xA0));
  *v12 = 0;
  v12[1] = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v10 & *v4) + 0xA8)) = -1;
  v13 = (uint64_t)v4 + *(_QWORD *)((*v10 & *v4) + 0xB0);
  _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v18);
  outlined init with take of Image.Resolved?((uint64_t)v18, v13, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  v14 = (char *)v4 + *(_QWORD *)((*v10 & *v4) + 0x60);
  *(_QWORD *)v14 = a1;
  v14[8] = a2;
  *((_QWORD *)v14 + 2) = a3;
  outlined init with copy of NavigationAuthority(a4, (uint64_t)v4 + *(_QWORD *)((*v10 & *v4) + 0x68));
  v17.receiver = v4;
  v17.super_class = ObjectType;
  v15 = objc_msgSendSuper2(&v17, sel_init);
  outlined destroy of NavigationAuthority(a4);
  return v15;
}

uint64_t closure #1 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized UIHostingController.setRootView(_:transaction:)(v0);
  return swift_release();
}

void specialized NavigationStackCoordinator.configureAsRoot(_:transparentBackground:)(_QWORD *a1, char a2)
{
  _QWORD *v2;
  char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  char v12;
  id v13;

  v5 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x60);
  *((_BYTE *)a1 + *(_QWORD *)((*a1 & *MEMORY[0x1E0DEEDD8]) + 0x3B8)) = v5[8];
  v6 = direct field offset for UIHostingController.host;
  v7 = *(void **)((char *)a1 + direct field offset for UIHostingController.host);
  v8 = (void *)objc_opt_self();
  v9 = v7;
  v10 = objc_msgSend(v8, sel_currentDevice);
  v11 = objc_msgSend(v10, sel_userInterfaceIdiom);

  v12 = v11 == (id)5 && v5[8] == 0;
  specialized _UIHostingView.setWantsTransparentBackground(for:_:)(1, v12);

  v13 = *(id *)((char *)a1 + v6);
  specialized _UIHostingView.setWantsTransparentBackground(for:_:)(4, a2 & 1);

}

void specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t), void (*a11)(uint64_t, _BYTE *, uint64_t))
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint8_t *v30;
  uint8_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  void (*v44)(uint64_t, _BYTE *, uint64_t);
  uint64_t v45;
  _BYTE v46[392];
  _BYTE v47[392];
  _BYTE v48[392];
  _QWORD v49[55];
  _BYTE v50[416];
  _BYTE v51[392];

  memcpy(v51, a2, sizeof(v51));
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v23 = MEMORY[0x18D760234](a1 + 16);
  if (v23)
  {
    v24 = (_QWORD *)v23;
    v43 = a8;
    v45 = a4;
    v44 = a11;
    v42 = a10;
    v41 = a9;
    static Log.navigation.getter();
    v25 = type metadata accessor for Logger();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v22, 1, v25) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
    }
    else
    {
      v39 = a3;
      v40 = a6;
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        v38 = a7;
        v30 = v29;
        *(_WORD *)v29 = 0;
        _os_log_impl(&dword_186E48000, v27, v28, "Updating stack views in place", v29, 2u);
        v31 = v30;
        a7 = v38;
        MEMORY[0x18D760108](v31, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v25);
      a3 = v39;
      a6 = v40;
    }
    outlined init with take of NavigationState.Base(a2, v48);
    v32 = (_QWORD *)swift_allocObject();
    v33 = v45;
    v32[2] = a3;
    v32[3] = v33;
    v32[4] = a5;
    outlined init with take of NavigationState.Base(v48, v49);
    v49[49] = v41;
    v49[50] = v32;
    v49[51] = a5;
    memcpy(v50, v49, sizeof(v50));
    swift_retain();
    swift_bridgeObjectRetain_n();
    swift_retain();
    v34 = outlined retain of NavigationState.Base((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    v35 = v42(v34);
    v44(a6, v50, a7);
    v36 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (v35)
    {
      outlined init with copy of NavigationAuthority((uint64_t)v24 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v24) + 0x68), (uint64_t)v47);
      NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v47);
      specialized NavigationHostingControllerCache_UIKit.updateUnusedRoots(_:transaction:)(v35);
      swift_bridgeObjectRelease();
      swift_release();
    }
    memcpy(v46, v51, sizeof(v46));
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v46);
    v37 = (uint64_t)v24 + *(_QWORD *)((*v36 & *v24) + 0xB0);
    outlined init with take of Image.Resolved?(v37, (uint64_t)v47, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    outlined init with take of Image.Resolved?((uint64_t)v46, v37, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    outlined retain of NavigationState.Base((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined release of NavigationState.StackContent?((uint64_t)v47, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
    outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v49);

  }
}

uint64_t specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(void *a1, const void *a2, uint64_t a3)
{
  return specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(a1, a2, a3, (uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:));
}

uint64_t specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[6];
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *);
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BYTE v33[480];
  _BYTE v34[480];
  _BYTE v35[496];
  _BYTE v36[416];
  _BYTE v37[480];

  v23 = a3;
  v24 = a4;
  v21 = a1;
  memcpy(v37, a2, sizeof(v37));
  v20 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = a2[2];
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 40);
  v9 = a2[6];
  v10 = *((_BYTE *)a2 + 56);
  v11 = *((_BYTE *)a2 + 24);
  memcpy(v36, a2 + 8, sizeof(v36));
  v12 = specialized BidirectionalCollection._distance(from:to:)(v20, v5, v6, v11, v7, v8, v9, v10);
  v13 = objc_msgSend(v21, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v12 == v15)
  {
    memcpy(v33, v37, sizeof(v33));
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v33);
    outlined init with take of TableCellFormula((uint64_t)v33, (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
    outlined retain of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>((uint64_t)a2);
  }
  else
  {
    _ss5SliceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0H8SequenceVy___AC22_VariadicView_ChildrenVAC08ModifiedG0VyAC0D14ColumnModifierVAOyAC09InjectKeyO0VAC0d16BackgroundReaderO033_7632008E3567AB610EB09B57688D0EDELLVGGGGSgWOi0_((uint64_t)v33);
    outlined init with take of TableCellFormula((uint64_t)v33, (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  }
  outlined init with take of TableCellFormula((uint64_t)v33, (uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  outlined init with take of TableCellFormula((uint64_t)v35, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  v16 = _ss5SliceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0H8SequenceVy___AC22_VariadicView_ChildrenVAC08ModifiedG0VyAC0D14ColumnModifierVAOyAC09InjectKeyO0VAC0d16BackgroundReaderO033_7632008E3567AB610EB09B57688D0EDELLVGGGGSgWOg((uint64_t)v33);
  if ((_DWORD)v16 == 1)
  {
    v30 = 0;
    v29 = 0;
    v31 = 0;
    v32 = -1;
  }
  else
  {
    v16 = outlined init with take of TableCellFormula((uint64_t)v35, (uint64_t)&v25, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
    v29 = v25;
    LOBYTE(v30) = v26;
    v31 = v27;
    v32 = v28;
  }
  MEMORY[0x1E0C80A78](v16, v17);
  v19[2] = v22;
  v19[3] = v34;
  v19[4] = &v29;
  v19[5] = v23;
  specialized UINavigationController.visitDescendents<A>(matchingType:visitor:)(v24, (uint64_t)v19);
  outlined init with take of TableCellFormula((uint64_t)v34, (uint64_t)&v25, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  return outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)&v25);
}

uint64_t specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(void *a1, const void *a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  uint64_t v4;
  uint64_t v6;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 v16;
  char v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD v32[8];
  _BYTE v33[416];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _BYTE v38[416];
  _BYTE v39[416];
  _BYTE v40[416];
  _BYTE v41[416];
  _BYTE v42[416];

  v6 = v4;
  v10 = memcpy(v42, a2, sizeof(v42));
  v11 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v10);
  if ((v12 & 1) != 0)
  {
    v15 = 0;
LABEL_8:
    v18 = objc_msgSend(a1, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v19 >> 62))
    {
      v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_10;
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = v13 + 1;
      if (__OFADD__(v13, 1))
        break;
      v11 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v11, v14 & 1);
      v14 = v17 & 1;
      ++v13;
      if ((v17 & 1) != 0 && v16 >= 2u)
        goto LABEL_8;
    }
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  if (v15 == v20)
  {
    memcpy(v41, v42, sizeof(v41));
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v41);
    outlined init with take of TableCellFormula((uint64_t)v41, (uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)a2);
  }
  else
  {
    _s7SwiftUI15NavigationStateV12StackContentV5ViewsV0G8SequenceVy___AA22_VariadicView_ChildrenVAA08ModifiedF0VyAA0C14ColumnModifierVAMyAA09InjectKeyN0VAA0c16BackgroundReaderN033_7632008E3567AB610EB09B57688D0EDELLVGGGSgWOi0_((uint64_t)v41);
    outlined init with take of TableCellFormula((uint64_t)v41, (uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  }
  outlined init with take of TableCellFormula((uint64_t)v41, (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  outlined init with take of TableCellFormula((uint64_t)v40, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  v21 = _s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v38);
  if ((_DWORD)v21 == 1)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = -1;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v40, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
    memcpy(v41, v33, sizeof(v41));
    v23 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v33);
    v24 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v23);
    v26 = v25;
    v28 = v27;
    v30 = v29;
    v21 = outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?((uint64_t)v40);
    v34 = v24;
    LOBYTE(v35) = v26 & 1;
    v36 = v28;
    v37 = v30;
  }
  MEMORY[0x1E0C80A78](v21, v22);
  v32[2] = v6;
  v32[3] = v39;
  v32[4] = &v34;
  v32[5] = a3;
  specialized UINavigationController.visitDescendents<A>(matchingType:visitor:)(a4, (uint64_t)v32);
  outlined init with take of TableCellFormula((uint64_t)v39, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  return outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?((uint64_t)v33);
}

void specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(const void *, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _BYTE v20[392];
  _BYTE v21[392];
  _BYTE v22[392];
  _BYTE v23[392];
  _BYTE __src[392];
  _QWORD v25[49];
  _BYTE __dst[392];

  memcpy(__dst, a2, sizeof(__dst));
  swift_beginAccess();
  v12 = (_QWORD *)MEMORY[0x18D760234](a1 + 16);
  if (v12)
  {
    v13 = v12;
    v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v15 = (uint64_t)v12 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v12) + 0xB0);
    outlined init with take of Image.Resolved?(v15, (uint64_t)v23, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    outlined init with take of Image.Resolved?((uint64_t)v23, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)__src) == 1)
    {
      v16 = (char *)v13 + *(_QWORD *)((*v14 & *v13) + 0x60);
      v17 = *(_QWORD *)v16;
      v18 = v16[8];
      v19 = *((_QWORD *)v16 + 2);
      if (v18 == 4)
        LOBYTE(v18) = 0;
      v25[0] = v17;
      LOBYTE(v25[1]) = v18;
      v25[2] = v19;
      _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v25);
      outlined init with take of NavigationState.Base(v25, v22);
    }
    else
    {
      memcpy(v22, __src, sizeof(v22));
    }
    memcpy(v25, v22, sizeof(v25));
    outlined release of NavigationState.StackContent?((uint64_t)v23, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of NavigationState.Base);
    a6(a2, v25, a3, a4, a5 & 1);
    outlined retain of NavigationState.Base((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    memcpy(v20, __dst, sizeof(v20));
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v20);
    outlined init with take of Image.Resolved?(v15, (uint64_t)v21, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    outlined init with take of Image.Resolved?((uint64_t)v20, v15, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    outlined retain of NavigationState.Base((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined release of NavigationState.StackContent?((uint64_t)v21, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);

  }
}

uint64_t specialized NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  char **v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  _QWORD *v63;
  id v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  BOOL v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  BOOL v72;
  uint8_t *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v95;
  char v96;
  NSObject *v97;
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint8_t *v104;
  id v105;
  unint64_t v106;
  uint64_t v107;
  id v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  void *v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t *v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  void *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t *v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  _QWORD *v146;
  void *v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  char v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  char v163;
  id v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int64_t v168;
  int64_t v169;
  uint64_t v170;
  int64_t v171;
  int v172;
  char v175;
  int v176;
  char *v177;
  void *v178;
  id v179;
  void *v180;
  char v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  Swift::Int v185;
  Swift::Int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  const void *v192;
  char *v193;
  int v194;
  _BOOL8 v197;
  void *v198;
  id v199;
  void *v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  char v223;
  char v224;
  uint64_t v225;
  char v226;
  id v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  int64_t v235;
  int v236;
  int v237;
  _BOOL8 v240;
  void *v241;
  id v242;
  void *v243;
  uint64_t v244;
  void *v245;
  _QWORD v247[2];
  uint64_t v248;
  int v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  void *v256;
  _QWORD *v257;
  const void *v258;
  void *v259;
  uint64_t v260;
  _QWORD v261[49];
  uint64_t v262;
  char v263;
  char v264;
  _QWORD v265[53];
  uint64_t v266[65];
  _QWORD v267[49];
  _QWORD v268[52];
  _QWORD v269[52];
  uint64_t (*v270)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v271;
  _BYTE v272[399];
  char v273;
  _BYTE v274[392];
  _QWORD v275[55];
  _BYTE v276[416];
  _QWORD v277[62];
  _QWORD v278[52];
  _BYTE v279[392];

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  LODWORD(v252) = v4;
  v255 = v6;
  v256 = v5;
  v259 = v7;
  v9 = v8;
  memcpy(v279, v5, sizeof(v279));
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v247 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v247 - v16;
  v18 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v19 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x70));
  swift_beginAccess();
  v20 = v19[2];
  if (!v20)
  {
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  v253 = v19;
  v23 = v19;
  v22 = *v19;
  v21 = v23[1];
  outlined init with take of NavigationState.Base(v9, v274);
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = v22;
  v24[3] = v21;
  v24[4] = v20;
  outlined init with take of NavigationState.Base(v274, v275);
  v275[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
  v275[50] = v24;
  v275[51] = v20;
  memcpy(v276, v275, sizeof(v276));
  outlined copy of NavigationStrategy_Phone?(v22, v21, v20);
  outlined copy of NavigationStrategy_Phone?(v22, v21, v20);
  swift_bridgeObjectRetain();
  v258 = v9;
  outlined retain of NavigationState.Base((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  v254 = specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
  outlined consume of RichTextAttributeResolver?(v22, v21, v20);
  v25 = *v18 & *v3;
  v26 = *(_QWORD *)(v25 + 0x78);
  v27 = *((unsigned __int8 *)v3 + v26);
  v257 = v3;
  if (v27 != 2)
  {
    static Log.navigation.getter();
    v34 = type metadata accessor for Logger();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v17, 1, v34) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
      v33 = v253;
    }
    else
    {
      v70 = Logger.logObject.getter();
      v71 = static os_log_type_t.default.getter();
      v72 = os_log_type_enabled(v70, v71);
      v33 = v253;
      if (v72)
      {
        v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v73 = 0;
        _os_log_impl(&dword_186E48000, v70, v71, "Updating stack views in place after end-user triggered transition or isTransitioningViewControllers", v73, 2u);
        MEMORY[0x18D760108](v73, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v34);
    }
    v41 = (char **)v257;
    specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v259, v276, v255);
    v74 = *((unsigned __int8 *)v41 + v26);
    if (v74 == 2)
      goto LABEL_136;
    *((_BYTE *)v41 + v26) = 2;
    memcpy(v277, v256, 0x188uLL);
    v75 = NavigationState.StackContent.count.getter();
    memcpy(v277, v258, 0x188uLL);
    v76 = NavigationState.StackContent.count.getter();
    v77 = v75 - v76;
    if (__OFSUB__(v75, v76))
      goto LABEL_220;
    if (v77 < 1)
    {
LABEL_136:
      v209 = v254;
      if (!v254)
        return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v275);
LABEL_137:
      outlined init with copy of NavigationAuthority((uint64_t)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x68), (uint64_t)v266);
      NavigationAuthority.controllerCache.getter();
      v210 = v266;
      goto LABEL_186;
    }
    v78 = (uint64_t)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x68);
    if ((v74 & 1) == 0)
    {
      outlined init with copy of NavigationAuthority(v78, (uint64_t)v277);
      v75 = NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v277);
      v79 = v33[2];
      if (!v79)
      {
LABEL_246:
        __break(1u);
        goto LABEL_247;
      }
      v82 = v33;
      v81 = *v33;
      v80 = v82[1];
      v83 = (uint64_t)v256;
      outlined init with take of NavigationState.Base(v256, v272);
      v84 = (_QWORD *)swift_allocObject();
      v84[2] = v81;
      v84[3] = v80;
      v84[4] = v79;
      outlined init with take of NavigationState.Base(v272, v268);
      v268[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      v268[50] = v84;
      v268[51] = v79;
      memcpy(v278, v268, sizeof(v278));
      outlined retain of NavigationState.Base(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v81, v80, v79);
      outlined retain of NavigationState.Base(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v81, v80, v79);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined retain of NavigationState.Base(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?(v81, v80, v79);
      v85 = memcpy(v269, v268, sizeof(v269));
      v33 = (uint64_t *)closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      v270 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      v271 = 0;
      v86 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v85);
      v90 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v77, v86, v87 & 1, v88, v89);
      if ((_BYTE)v93 == 0xFF)
      {
        v203 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
        v94 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v203);
        v95 = v204;
        v26 = v205;
        v96 = v206 & 1;
        v90 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
      }
      else
      {
        v94 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v90;
        v95 = v92;
        v26 = v93;
        v96 = v91 & 1;
      }
      v207 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v90);
      if ((v208 & 1) == 0)
      {
        if ((v96 & 1) != 0)
          goto LABEL_135;
        if ((uint64_t)v94 < v207)
        {
LABEL_240:
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
          goto LABEL_243;
        }
        if (v207 < (uint64_t)v94)
          goto LABEL_135;
        if (!(_BYTE)v26)
          goto LABEL_194;
        if (v26 != 1)
          goto LABEL_200;
        if (v162 != 1 || v95 >= v161)
        {
LABEL_135:
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v268);
          outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
          LOBYTE(v267[0]) = v96;
          LOBYTE(v261[0]) = 1;
          memcpy((char *)v265 + 7, v268, 0x1A0uLL);
          v266[0] = (uint64_t)v94;
          LOBYTE(v266[1]) = v96;
          v266[2] = v95;
          LOBYTE(v266[3]) = v26;
          v266[4] = 0;
          LOBYTE(v266[5]) = 1;
          v266[6] = 0;
          LOBYTE(v266[7]) = 2;
          memcpy((char *)&v266[7] + 1, v265, 0x1A7uLL);
          v266[60] = (uint64_t)v33;
          v266[61] = 0;
          memcpy(v277, v266, sizeof(v277));
          specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v277, (uint64_t)&unk_1E1B4E350, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
          swift_release();
          outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v266);
          goto LABEL_136;
        }
        __break(1u);
      }
      if ((v96 & 1) == 0)
      {
LABEL_233:
        __break(1u);
        goto LABEL_234;
      }
      goto LABEL_135;
    }
    outlined init with copy of NavigationAuthority(v78, (uint64_t)v277);
    v94 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))NavigationAuthority.controllerCache.getter();
    outlined destroy of NavigationAuthority((uint64_t)v277);
    v141 = v33[2];
    if (!v141)
    {
LABEL_247:
      __break(1u);
      JUMPOUT(0x1879C49C4);
    }
    v144 = v33;
    v143 = *v33;
    v142 = v144[1];
    v145 = (uint64_t)v256;
    outlined init with take of NavigationState.Base(v256, v272);
    v146 = (_QWORD *)swift_allocObject();
    v146[2] = v143;
    v146[3] = v142;
    v146[4] = v141;
    outlined init with take of NavigationState.Base(v272, v268);
    v268[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
    v268[50] = v146;
    v268[51] = v141;
    memcpy(v278, v268, sizeof(v278));
    outlined retain of NavigationState.Base(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v143, v142, v141);
    outlined retain of NavigationState.Base(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v143, v142, v141);
    swift_bridgeObjectRetain();
    specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
    swift_bridgeObjectRelease();
    outlined retain of NavigationState.Base(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    outlined consume of RichTextAttributeResolver?(v143, v142, v141);
    v147 = memcpy(v269, v268, sizeof(v269));
    v33 = (uint64_t *)closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    v270 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    v271 = 0;
    v148 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v147);
    v152 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v77, v148, v149 & 1, v150, v151);
    if ((_BYTE)v155 == 0xFF)
    {
      v211 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
      v75 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v211);
      v95 = v212;
      v26 = v213;
      v96 = v214 & 1;
      v152 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
    }
    else
    {
      v75 = v152;
      v95 = v154;
      v26 = v155;
      v96 = v153 & 1;
    }
    v215 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v152);
    if ((v216 & 1) == 0)
    {
      if ((v96 & 1) != 0)
        goto LABEL_149;
      if (v75 < v215)
        goto LABEL_241;
      if (v215 < v75)
        goto LABEL_149;
      if (!(_BYTE)v26)
        goto LABEL_197;
      if (v26 != 1)
        goto LABEL_203;
      if (v162 != 1 || v95 >= v161)
      {
LABEL_149:
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v268);
        outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
        LOBYTE(v267[0]) = v96;
        LOBYTE(v261[0]) = 1;
        memcpy((char *)v265 + 7, v268, 0x1A0uLL);
        v266[0] = v75;
        LOBYTE(v266[1]) = v96;
        v266[2] = v95;
        LOBYTE(v266[3]) = v26;
        v266[4] = 0;
        LOBYTE(v266[5]) = 1;
        v266[6] = 0;
        LOBYTE(v266[7]) = 2;
        memcpy((char *)&v266[7] + 1, v265, 0x1A7uLL);
        v266[60] = (uint64_t)v33;
        v266[61] = 0;
        memcpy(v277, v266, sizeof(v277));
        swift_retain();
        v217 = specialized Sequence.compactMap<A>(_:)((uint64_t)v277, (uint64_t)v94, (uint64_t)&unk_1E1B4E288, (uint64_t)&unk_1E1B4E2B0, (uint64_t)closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred(at:)partial apply, (uint64_t)thunk for @escaping @callee_guaranteed () -> (@out ())partial apply, (uint64_t)&unk_1E1B4E2D8, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
        v218 = swift_allocObject();
        *(_QWORD *)(v218 + 16) = v217;
        swift_release();
        outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v266);
        v219 = (uint64_t *)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0xA0));
        v220 = *v219;
        *v219 = (uint64_t)closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred<A>(at:)partial apply;
        v219[1] = v218;
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v220);
        v209 = v254;
        if (!v254)
          return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v275);
        goto LABEL_137;
      }
      __break(1u);
    }
    if ((v96 & 1) == 0)
    {
LABEL_234:
      __break(1u);
      goto LABEL_235;
    }
    goto LABEL_149;
  }
  v273 = 1;
  v250 = *(_QWORD *)(v25 + 128);
  *((_BYTE *)v3 + v250) = 1;
  if ((*((_BYTE *)v3 + *(_QWORD *)((*v18 & *v3) + 0x98)) & 1) == 0)
    goto LABEL_12;
  v28 = objc_msgSend(v259, sel_view);
  if (!v28)
    goto LABEL_244;
  v29 = v28;
  v30 = objc_msgSend(v28, sel_window);

  if (v30 && (v31 = objc_msgSend(v30, sel_windowScene), v30, v31))
  {
    if (objc_msgSend((id)objc_opt_self(), sel_areAnimationsEnabled))
    {
      if (objc_msgSend(v31, sel_activationState))
      {
        v32 = objc_msgSend(v31, sel_activationState);

        LODWORD(v33) = v32 == (id)1;
      }
      else
      {

        LODWORD(v33) = 1;
      }
    }
    else
    {

      LODWORD(v33) = 0;
    }
  }
  else
  {
LABEL_12:
    LODWORD(v33) = 0;
  }
  memcpy(v277, v258, 0x188uLL);
  memcpy(v272, v279, 0x188uLL);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v272);
  outlined init with take of Image.Resolved?((uint64_t)v272, (uint64_t)v266, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  v26 = NavigationState.StackContent.change(from:)((uint64_t)v266, v36);
  LODWORD(v38) = v37;
  static Log.navigation.getter();
  v39 = type metadata accessor for Logger();
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v13, 1, v39) != 1)
  {
    v97 = Logger.logObject.getter();
    v98 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v99 = swift_slowAlloc();
      v249 = (int)v38;
      v38 = (uint8_t *)v99;
      v100 = swift_slowAlloc();
      v248 = v100;
      v251 = (int)v33;
      *(_DWORD *)v38 = 136315138;
      v266[0] = v100;
      v247[1] = v38 + 4;
      v277[0] = v26;
      LOBYTE(v277[1]) = v249 & 1;
      v101 = String.init<A>(describing:)();
      v277[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v102, v266);
      LODWORD(v33) = v251;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v97, v98, "Updating stack content for change: %s", v38, 0xCu);
      v103 = v248;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v103, -1, -1);
      v104 = v38;
      LOBYTE(v38) = v249;
      MEMORY[0x18D760108](v104, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v39);
    if ((v38 & 1) == 0)
      goto LABEL_15;
LABEL_44:
    __asm { BR              X9 }
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  if ((v38 & 1) != 0)
    goto LABEL_44;
LABEL_15:
  v41 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
  if (v26 == 1)
  {
    v42 = objc_msgSend(v259, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v43 >> 62)
    {
      swift_bridgeObjectRetain();
      v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v44 >= 2)
    {
      v251 = (int)v33;
      outlined init with copy of NavigationAuthority((uint64_t)v257 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v257) + 0x68), (uint64_t)v277);
      NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v277);
      v45 = v253[2];
      if (v45)
      {
        v46 = *v253;
        v47 = v253[1];
        v48 = (uint64_t)v256;
        outlined init with take of NavigationState.Base(v256, v265);
        v49 = (_QWORD *)swift_allocObject();
        v49[2] = v46;
        v49[3] = v47;
        v49[4] = v45;
        outlined init with take of NavigationState.Base(v265, v269);
        v269[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
        v269[50] = v49;
        v269[51] = v45;
        memcpy(v266, v269, 0x1A0uLL);
        outlined retain of NavigationState.Base(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        outlined copy of NavigationStrategy_Phone?(v46, v47, v45);
        outlined retain of NavigationState.Base(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        outlined copy of NavigationStrategy_Phone?(v46, v47, v45);
        swift_bridgeObjectRetain();
        specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
        swift_bridgeObjectRelease();
        outlined retain of NavigationState.Base(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
        outlined consume of RichTextAttributeResolver?(v46, v47, v45);
        v50 = memcpy(v277, v269, 0x1A0uLL);
        v277[52] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
        v277[53] = 0;
        specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v50);
        if ((v53 & 1) == 0 || v52 != 2 || v51)
        {
          v54 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(0, 1);
          v56 = v55;
          v58 = v57;
          v60 = v59;
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v269);
          specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v54, v56 & 1, v58, v60);
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v269);
          v61 = v278[1];
          v62 = v278[2];
          outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v278);
          outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v277);
          LOBYTE(v278[0]) = v61;
          v278[1] = v62;
          v63 = v278;
          NavigationHostingControllerCache_UIKit.eject(at:)(*(SwiftUI::NavigationContentAbstractPosition *)&v63);
          swift_release();
          v64 = objc_msgSend(v259, sel_viewControllers);
          v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          v26 = v65 >> 62;
          if (!(v65 >> 62))
          {
            v66 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_25;
          }
LABEL_227:
          swift_bridgeObjectRetain();
          v66 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_25:
          v41 = (char **)v257;
          v67 = v251;
          if (__OFSUB__(0, v66))
          {
            __break(1u);
          }
          else
          {
            if (v66)
            {
              v68 = __OFSUB__(v66--, 1);
              if (v68)
              {
LABEL_235:
                __break(1u);
LABEL_236:
                __break(1u);
LABEL_237:
                __break(1u);
LABEL_238:
                __break(1u);
LABEL_239:
                __break(1u);
                goto LABEL_240;
              }
              if (v66 < 0)
                goto LABEL_236;
            }
            if (!v26)
            {
              v69 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
              goto LABEL_97;
            }
            swift_bridgeObjectRetain();
            v184 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if ((v184 & 0x8000000000000000) == 0)
            {
              swift_bridgeObjectRetain();
              v69 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
LABEL_97:
              if (v69 >= v66)
              {
                if ((v65 & 0xC000000000000001) != 0 && v66)
                {
                  v185 = 0;
                  do
                  {
                    v186 = v185 + 1;
                    _ArrayBuffer._typeCheckSlowPath(_:)(v185);
                    v185 = v186;
                  }
                  while (v66 != v186);
                }
                if (v26)
                {
                  swift_bridgeObjectRetain();
                  _CocoaArrayWrapper.subscript.getter();
                  v187 = v188;
                  v26 = v189;
                  v191 = v190;
                  swift_bridgeObjectRelease_n();
                  v66 = v191 >> 1;
                }
                else
                {
                  v187 = (v65 & 0xFFFFFFFFFFFFFF8) + 32;
                }
                v192 = v258;
                if (v26 == v66)
                {
                  swift_unknownObjectRelease();
                  v193 = 0;
                  goto LABEL_109;
                }
                if (v66 - 1 >= v26)
                {
                  v193 = (char *)*(id *)(v187 + 8 * (v66 - 1));
                  swift_unknownObjectRelease();
LABEL_109:
                  *(char **)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x88)) = v193;
                  if ((v67 & 1) != 0)
                  {
                    memcpy(v278, v192, 0x188uLL);
                    NavigationState.StackContent.animationSeed.getter(v268);
                    v194 = v268[0];
                    memcpy(v278, v256, 0x188uLL);
                    NavigationState.StackContent.animationSeed.getter(v267);
                    v197 = v194 != -1 && LODWORD(v267[0]) != -1 && v194 == LODWORD(v267[0]);
                  }
                  else
                  {
                    v197 = 0;
                  }
                  v198 = v259;

                  specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v198, v276, v255);
                  v199 = objc_msgSend(v198, sel_transitionCoordinator);
                  if (v199)
                  {
                    v200 = v199;
                    if (v197)
                    {
                      v273 = 1;
                      v201 = swift_allocObject();
                      swift_unknownObjectWeakInit();
                      v278[4] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
                      v278[5] = v201;
                      v278[0] = MEMORY[0x1E0C809B0];
                      v278[1] = 1107296256;
                      v278[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
                      v278[3] = &block_descriptor_272;
                      v202 = _Block_copy(v278);
                      swift_release();
                      objc_msgSend(v200, sel_animateAlongsideTransition_completion_, 0, v202);
                      _Block_release(v202);
                    }
                    swift_unknownObjectRelease();
                  }
                  goto LABEL_181;
                }
                goto LABEL_238;
              }
              goto LABEL_230;
            }
          }
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
          goto LABEL_232;
        }
LABEL_251:
        outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v277);
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x1879C4A14);
      }
      __break(1u);
LABEL_249:
      __break(1u);
LABEL_250:
      swift_unknownObjectRelease();
      __break(1u);
      goto LABEL_251;
    }
  }
  v105 = objc_msgSend(v259, sel_viewControllers);
  v75 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v106 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v106 >> 62)
    goto LABEL_222;
  v107 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    if (v107 < 2)
      goto LABEL_55;
    v108 = objc_msgSend(v259, v41[344]);
    v109 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v109 >> 62)
    {
      swift_bridgeObjectRetain();
      v110 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v110 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v26 >= v110)
    {
LABEL_55:
      memcpy(v277, v256, 0x188uLL);
      v125 = NavigationState.StackContent.count.getter();
      memcpy(v277, v258, 0x188uLL);
      v126 = NavigationState.StackContent.count.getter();
      v68 = __OFSUB__(v125, v126);
      v75 = v125 - v126;
      if (v68)
        goto LABEL_221;
      v41 = (char **)v257;
      if (v75 < 1)
        goto LABEL_77;
      v251 = (int)v33;
      outlined init with copy of NavigationAuthority((uint64_t)v257 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v257) + 0x68), (uint64_t)v277);
      v94 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v277);
      v127 = v253[2];
      if (!v127)
        goto LABEL_245;
      v128 = *v253;
      v129 = v253[1];
      v130 = (uint64_t)v256;
      outlined init with take of NavigationState.Base(v256, v267);
      v131 = (_QWORD *)swift_allocObject();
      v131[2] = v128;
      v131[3] = v129;
      v131[4] = v127;
      outlined init with take of NavigationState.Base(v267, v268);
      v268[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      v268[50] = v131;
      v268[51] = v127;
      memcpy(v278, v268, sizeof(v278));
      outlined retain of NavigationState.Base(v130, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v128, v129, v127);
      outlined retain of NavigationState.Base(v130, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v128, v129, v127);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined retain of NavigationState.Base(v130, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?(v128, v129, v127);
      v132 = memcpy(v269, v268, sizeof(v269));
      v26 = (uint64_t)closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      v270 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      v271 = 0;
      v133 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v132);
      v137 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v75, v133, v134 & 1, v135, v136);
      if (v140 == -1)
      {
        v156 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
        v95 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v156);
        v33 = v157;
        LOBYTE(v13) = v158;
        v96 = v159 & 1;
        v137 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
      }
      else
      {
        v95 = v137;
        v33 = v139;
        LOBYTE(v13) = v140;
        v96 = v138 & 1;
      }
      v65 = (unint64_t)v278;
      v160 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v137);
      if ((v163 & 1) != 0)
        goto LABEL_74;
      if ((v96 & 1) != 0)
        goto LABEL_75;
      if (v95 < v160)
        goto LABEL_237;
      if (v160 < v95)
        goto LABEL_75;
      if ((_BYTE)v13)
      {
        if (v13 == 1)
        {
          if (v162 != 1 || (uint64_t)v33 >= v161)
            goto LABEL_75;
          __break(1u);
LABEL_74:
          if ((v96 & 1) == 0)
          {
            __break(1u);
          }
          else
          {
LABEL_75:
            outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v268);
            outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
            LOBYTE(v261[0]) = v96;
            LOBYTE(v262) = 1;
            memcpy((char *)v265 + 7, v268, 0x1A0uLL);
            v266[0] = v95;
            LOBYTE(v266[1]) = v96;
            v266[2] = (uint64_t)v33;
            LOBYTE(v266[3]) = (_BYTE)v13;
            v266[4] = 0;
            LOBYTE(v266[5]) = 1;
            v266[6] = 0;
            LOBYTE(v266[7]) = 2;
            memcpy((char *)&v266[7] + 1, v265, 0x1A7uLL);
            v266[60] = v26;
            v266[61] = 0;
            memcpy(v277, v266, sizeof(v277));
            specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v277, (uint64_t)&unk_1E1B4E350, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
            swift_release();
            outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v266);
            v164 = objc_msgSend(v259, sel_viewControllers);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
            v165 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            v65 = specialized BidirectionalCollection.dropLast(_:)(v75, v165);
            v167 = v166;
            v169 = v168;
            v26 = v170;
            swift_bridgeObjectRelease();
            v171 = (unint64_t)v26 >> 1;
            if (v169 == (unint64_t)v26 >> 1)
            {
              swift_unknownObjectRelease();
              LODWORD(v33) = v251;
LABEL_77:
              if ((_DWORD)v33)
                goto LABEL_78;
              goto LABEL_89;
            }
            v176 = v251;
            if (v171 > v169)
            {
              v177 = (char *)*(id *)(v167 + 8 * v171 - 8);
              swift_unknownObjectRelease();
              *(char **)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x88)) = v177;

              if (v176)
              {
LABEL_78:
                memcpy(v266, v258, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v269);
                v172 = v269[0];
                memcpy(v266, v256, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v265);
                v175 = v172 != -1 && LODWORD(v265[0]) != -1 && v172 == LODWORD(v265[0]);
LABEL_90:
                v178 = v259;
                specialized NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(v259, (uint64_t)v276, v175, v255, v252 & 1);
                v179 = objc_msgSend(v178, sel_transitionCoordinator);
                if (v179)
                {
                  v180 = v179;
                  v181 = v175 ^ 1;
                  if (v75 < 1)
                    v181 = 1;
                  if ((v181 & 1) == 0)
                  {
                    v273 = 1;
                    v182 = swift_allocObject();
                    swift_unknownObjectWeakInit();
                    v266[4] = (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
                    v266[5] = v182;
                    v266[0] = MEMORY[0x1E0C809B0];
                    v266[1] = 1107296256;
                    v266[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
                    v266[3] = (uint64_t)&block_descriptor_250;
                    v183 = _Block_copy(v266);
                    swift_release();
                    objc_msgSend(v180, sel_animateAlongsideTransition_completion_, 0, v183);
                    _Block_release(v183);
                  }
LABEL_180:
                  swift_unknownObjectRelease();
                }
                goto LABEL_182;
              }
LABEL_89:
              v175 = 0;
              goto LABEL_90;
            }
          }
          __break(1u);
          goto LABEL_227;
        }
      }
      else
      {
        if (!v162)
        {
LABEL_206:
          if ((uint64_t)v33 >= v161)
            goto LABEL_75;
          __break(1u);
          goto LABEL_208;
        }
        if (v162 == 2)
          goto LABEL_75;
        __break(1u);
      }
      if (v162 == 2 && !v161)
        goto LABEL_75;
      __break(1u);
LABEL_194:
      if (!v162)
        goto LABEL_214;
      if (v162 == 2)
        goto LABEL_135;
      __break(1u);
LABEL_197:
      if (!v162)
        goto LABEL_216;
      if (v162 == 2)
        goto LABEL_149;
      __break(1u);
LABEL_200:
      if (v162 == 2 && !v161)
        goto LABEL_135;
      __break(1u);
LABEL_203:
      if (v162 == 2 && !v161)
        goto LABEL_149;
      __break(1u);
      goto LABEL_206;
    }
    v251 = (int)v33;
    outlined init with copy of NavigationAuthority((uint64_t)v257 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v257) + 0x68), (uint64_t)v277);
    v252 = NavigationAuthority.controllerCache.getter();
    outlined destroy of NavigationAuthority((uint64_t)v277);
    v111 = v253[2];
    if (!v111)
      goto LABEL_249;
    v112 = *v253;
    v113 = v253[1];
    v114 = (uint64_t)v256;
    outlined init with take of NavigationState.Base(v256, v267);
    v115 = (_QWORD *)swift_allocObject();
    v115[2] = v112;
    v115[3] = v113;
    v115[4] = v111;
    outlined init with take of NavigationState.Base(v267, v268);
    v268[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
    v268[50] = v115;
    v268[51] = v111;
    memcpy(v278, v268, sizeof(v278));
    outlined retain of NavigationState.Base(v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v112, v113, v111);
    outlined retain of NavigationState.Base(v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v112, v113, v111);
    swift_bridgeObjectRetain();
    specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
    swift_bridgeObjectRelease();
    outlined retain of NavigationState.Base(v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    outlined consume of RichTextAttributeResolver?(v112, v113, v111);
    v116 = memcpy(v269, v268, sizeof(v269));
    v94 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    v270 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    v271 = 0;
    if (v26 < 0)
      goto LABEL_231;
    v117 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v116);
    v121 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v26, v117, v118 & 1, v119, v120);
    if (v124 == -1)
    {
      v221 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
      v95 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v221);
      v33 = v222;
      LOBYTE(v13) = v223;
      v96 = v224 & 1;
      v121 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
    }
    else
    {
      v95 = v121;
      v33 = v123;
      LOBYTE(v13) = v124;
      v96 = v122 & 1;
    }
    v225 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v121);
    if ((v226 & 1) != 0)
      goto LABEL_162;
    if ((v96 & 1) != 0)
      goto LABEL_163;
    if (v95 < v225)
      goto LABEL_242;
    if (v225 < v95)
      goto LABEL_163;
    if ((_BYTE)v13)
      break;
LABEL_208:
    if (v162)
    {
      if (v162 == 2)
        goto LABEL_163;
      __break(1u);
      goto LABEL_211;
    }
LABEL_218:
    if ((uint64_t)v33 >= v161)
      goto LABEL_163;
    __break(1u);
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
LABEL_222:
    swift_bridgeObjectRetain();
    v107 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 != 1)
  {
LABEL_211:
    if (v162 == 2 && !v161)
      goto LABEL_163;
    __break(1u);
LABEL_214:
    if (v95 >= v161)
      goto LABEL_135;
    __break(1u);
LABEL_216:
    if (v95 >= v161)
      goto LABEL_149;
    __break(1u);
    goto LABEL_218;
  }
  if (v162 == 1 && (uint64_t)v33 < v161)
  {
    __break(1u);
LABEL_162:
    if ((v96 & 1) == 0)
      goto LABEL_239;
  }
LABEL_163:
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v268);
  outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
  v264 = v96;
  v263 = 1;
  memcpy((char *)v265 + 7, v268, 0x1A0uLL);
  v266[0] = v95;
  LOBYTE(v266[1]) = v96;
  v266[2] = (uint64_t)v33;
  LOBYTE(v266[3]) = (_BYTE)v13;
  v266[4] = 0;
  LOBYTE(v266[5]) = 1;
  v266[6] = 0;
  LOBYTE(v266[7]) = 2;
  memcpy((char *)&v266[7] + 1, v265, 0x1A7uLL);
  v266[60] = (uint64_t)v94;
  v266[61] = 0;
  memcpy(v277, v266, sizeof(v277));
  specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v277, (uint64_t)&unk_1E1B4E350, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
  swift_release();
  outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v266);
  v227 = objc_msgSend(v259, v41[344]);
  v228 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized BidirectionalCollection.dropLast(_:)(v26, v228);
  v230 = v229;
  v232 = v231;
  v234 = v233;
  swift_bridgeObjectRelease();
  v235 = v234 >> 1;
  if (v232 == v234 >> 1)
    goto LABEL_250;
  v41 = (char **)v257;
  v236 = v251;
  if (v235 <= v232)
  {
LABEL_232:
    __break(1u);
    goto LABEL_233;
  }
  v193 = (char *)*(id *)(v230 + 8 * v235 - 8);
  swift_unknownObjectRelease();
  *(char **)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x88)) = v193;
  if (v236)
  {
    memcpy(v261, v258, sizeof(v261));
    NavigationState.StackContent.animationSeed.getter(&v262);
    v237 = v262;
    memcpy(v261, v256, sizeof(v261));
    NavigationState.StackContent.animationSeed.getter(&v260);
    v240 = v237 != -1 && (_DWORD)v260 != -1 && v237 == (_DWORD)v260;
  }
  else
  {
    v240 = 0;
  }
  v241 = v259;

  specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v241, v276, v255);
  v242 = objc_msgSend(v241, sel_transitionCoordinator);
  if (v242)
  {
    v243 = v242;
    if (v240)
    {
      v273 = 1;
      v244 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v261[4] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
      v261[5] = v244;
      v261[0] = MEMORY[0x1E0C809B0];
      v261[1] = 1107296256;
      v261[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      v261[3] = &block_descriptor_263;
      v245 = _Block_copy(v261);
      swift_release();
      objc_msgSend(v243, sel_animateAlongsideTransition_completion_, 0, v245);
      _Block_release(v245);
    }

    goto LABEL_180;
  }
LABEL_181:

LABEL_182:
  if (v273 == 1)
  {
    *((_BYTE *)v41 + v250) = 0;
    *(char **)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x88)) = 0;
  }
  v209 = v254;
  if (v254)
  {
    outlined init with copy of NavigationAuthority((uint64_t)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x68), (uint64_t)v269);
    NavigationAuthority.controllerCache.getter();
    v210 = v269;
LABEL_186:
    outlined destroy of NavigationAuthority((uint64_t)v210);
    specialized NavigationHostingControllerCache_UIKit.updateUnusedRoots(_:transaction:)(v209);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v275);
}

{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  char **v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  _QWORD *v63;
  id v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  BOOL v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  BOOL v72;
  uint8_t *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v95;
  char v96;
  NSObject *v97;
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint8_t *v104;
  id v105;
  unint64_t v106;
  uint64_t v107;
  id v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  void *v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t *v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  void *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t *v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  _QWORD *v146;
  void *v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  char v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  char v163;
  id v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int64_t v168;
  int64_t v169;
  uint64_t v170;
  int64_t v171;
  int v172;
  char v175;
  int v176;
  char *v177;
  void *v178;
  id v179;
  void *v180;
  char v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  Swift::Int v185;
  Swift::Int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  const void *v192;
  char *v193;
  int v194;
  _BOOL8 v197;
  void *v198;
  id v199;
  void *v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  char v223;
  char v224;
  uint64_t v225;
  char v226;
  id v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  int64_t v235;
  int v236;
  int v237;
  _BOOL8 v240;
  void *v241;
  id v242;
  void *v243;
  uint64_t v244;
  void *v245;
  _QWORD v247[2];
  uint64_t v248;
  int v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  void *v256;
  _QWORD *v257;
  const void *v258;
  void *v259;
  uint64_t v260;
  _QWORD v261[49];
  uint64_t v262;
  char v263;
  char v264;
  _QWORD v265[53];
  uint64_t v266[65];
  _QWORD v267[49];
  _QWORD v268[52];
  _QWORD v269[52];
  uint64_t (*v270)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v271;
  _BYTE v272[399];
  char v273;
  _BYTE v274[392];
  _QWORD v275[55];
  _BYTE v276[416];
  _QWORD v277[62];
  _QWORD v278[52];
  _BYTE v279[392];

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  LODWORD(v252) = v4;
  v255 = v6;
  v256 = v5;
  v259 = v7;
  v9 = v8;
  memcpy(v279, v5, sizeof(v279));
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v247 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v247 - v16;
  v18 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v19 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x70));
  swift_beginAccess();
  v20 = v19[2];
  if (!v20)
  {
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  v253 = v19;
  v23 = v19;
  v22 = *v19;
  v21 = v23[1];
  outlined init with take of NavigationState.Base(v9, v274);
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = v22;
  v24[3] = v21;
  v24[4] = v20;
  outlined init with take of NavigationState.Base(v274, v275);
  v275[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
  v275[50] = v24;
  v275[51] = v20;
  memcpy(v276, v275, sizeof(v276));
  outlined copy of NavigationStrategy_Phone?(v22, v21, v20);
  outlined copy of NavigationStrategy_Phone?(v22, v21, v20);
  swift_bridgeObjectRetain();
  v258 = v9;
  outlined retain of NavigationState.Base((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  v254 = specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
  outlined consume of RichTextAttributeResolver?(v22, v21, v20);
  v25 = *v18 & *v3;
  v26 = *(_QWORD *)(v25 + 0x78);
  v27 = *((unsigned __int8 *)v3 + v26);
  v257 = v3;
  if (v27 != 2)
  {
    static Log.navigation.getter();
    v34 = type metadata accessor for Logger();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v17, 1, v34) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
      v33 = v253;
    }
    else
    {
      v70 = Logger.logObject.getter();
      v71 = static os_log_type_t.default.getter();
      v72 = os_log_type_enabled(v70, v71);
      v33 = v253;
      if (v72)
      {
        v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v73 = 0;
        _os_log_impl(&dword_186E48000, v70, v71, "Updating stack views in place after end-user triggered transition or isTransitioningViewControllers", v73, 2u);
        MEMORY[0x18D760108](v73, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v34);
    }
    v41 = (char **)v257;
    specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v259, v276, v255);
    v74 = *((unsigned __int8 *)v41 + v26);
    if (v74 == 2)
      goto LABEL_136;
    *((_BYTE *)v41 + v26) = 2;
    memcpy(v277, v256, 0x188uLL);
    v75 = NavigationState.StackContent.count.getter();
    memcpy(v277, v258, 0x188uLL);
    v76 = NavigationState.StackContent.count.getter();
    v77 = v75 - v76;
    if (__OFSUB__(v75, v76))
      goto LABEL_220;
    if (v77 < 1)
    {
LABEL_136:
      v209 = v254;
      if (!v254)
        return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v275);
LABEL_137:
      outlined init with copy of NavigationAuthority((uint64_t)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x68), (uint64_t)v266);
      NavigationAuthority.controllerCache.getter();
      v210 = v266;
      goto LABEL_186;
    }
    v78 = (uint64_t)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x68);
    if ((v74 & 1) == 0)
    {
      outlined init with copy of NavigationAuthority(v78, (uint64_t)v277);
      v75 = NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v277);
      v79 = v33[2];
      if (!v79)
      {
LABEL_246:
        __break(1u);
        goto LABEL_247;
      }
      v82 = v33;
      v81 = *v33;
      v80 = v82[1];
      v83 = (uint64_t)v256;
      outlined init with take of NavigationState.Base(v256, v272);
      v84 = (_QWORD *)swift_allocObject();
      v84[2] = v81;
      v84[3] = v80;
      v84[4] = v79;
      outlined init with take of NavigationState.Base(v272, v268);
      v268[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      v268[50] = v84;
      v268[51] = v79;
      memcpy(v278, v268, sizeof(v278));
      outlined retain of NavigationState.Base(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v81, v80, v79);
      outlined retain of NavigationState.Base(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v81, v80, v79);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined retain of NavigationState.Base(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?(v81, v80, v79);
      v85 = memcpy(v269, v268, sizeof(v269));
      v33 = (uint64_t *)closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      v270 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      v271 = 0;
      v86 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v85);
      v90 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v77, v86, v87 & 1, v88, v89);
      if ((_BYTE)v93 == 0xFF)
      {
        v203 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
        v94 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v203);
        v95 = v204;
        v26 = v205;
        v96 = v206 & 1;
        v90 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
      }
      else
      {
        v94 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v90;
        v95 = v92;
        v26 = v93;
        v96 = v91 & 1;
      }
      v207 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v90);
      if ((v208 & 1) == 0)
      {
        if ((v96 & 1) != 0)
          goto LABEL_135;
        if ((uint64_t)v94 < v207)
        {
LABEL_240:
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
          goto LABEL_243;
        }
        if (v207 < (uint64_t)v94)
          goto LABEL_135;
        if (!(_BYTE)v26)
          goto LABEL_194;
        if (v26 != 1)
          goto LABEL_200;
        if (v162 != 1 || v95 >= v161)
        {
LABEL_135:
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v268);
          outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
          LOBYTE(v267[0]) = v96;
          LOBYTE(v261[0]) = 1;
          memcpy((char *)v265 + 7, v268, 0x1A0uLL);
          v266[0] = (uint64_t)v94;
          LOBYTE(v266[1]) = v96;
          v266[2] = v95;
          LOBYTE(v266[3]) = v26;
          v266[4] = 0;
          LOBYTE(v266[5]) = 1;
          v266[6] = 0;
          LOBYTE(v266[7]) = 2;
          memcpy((char *)&v266[7] + 1, v265, 0x1A7uLL);
          v266[60] = (uint64_t)v33;
          v266[61] = 0;
          memcpy(v277, v266, sizeof(v277));
          specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v277, (uint64_t)&unk_1E1B4DFB8, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
          swift_release();
          outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v266);
          goto LABEL_136;
        }
        __break(1u);
      }
      if ((v96 & 1) == 0)
      {
LABEL_233:
        __break(1u);
        goto LABEL_234;
      }
      goto LABEL_135;
    }
    outlined init with copy of NavigationAuthority(v78, (uint64_t)v277);
    v94 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))NavigationAuthority.controllerCache.getter();
    outlined destroy of NavigationAuthority((uint64_t)v277);
    v141 = v33[2];
    if (!v141)
    {
LABEL_247:
      __break(1u);
      JUMPOUT(0x1879C6D9CLL);
    }
    v144 = v33;
    v143 = *v33;
    v142 = v144[1];
    v145 = (uint64_t)v256;
    outlined init with take of NavigationState.Base(v256, v272);
    v146 = (_QWORD *)swift_allocObject();
    v146[2] = v143;
    v146[3] = v142;
    v146[4] = v141;
    outlined init with take of NavigationState.Base(v272, v268);
    v268[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
    v268[50] = v146;
    v268[51] = v141;
    memcpy(v278, v268, sizeof(v278));
    outlined retain of NavigationState.Base(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v143, v142, v141);
    outlined retain of NavigationState.Base(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v143, v142, v141);
    swift_bridgeObjectRetain();
    specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
    swift_bridgeObjectRelease();
    outlined retain of NavigationState.Base(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    outlined consume of RichTextAttributeResolver?(v143, v142, v141);
    v147 = memcpy(v269, v268, sizeof(v269));
    v33 = (uint64_t *)closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    v270 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    v271 = 0;
    v148 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v147);
    v152 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v77, v148, v149 & 1, v150, v151);
    if ((_BYTE)v155 == 0xFF)
    {
      v211 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
      v75 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v211);
      v95 = v212;
      v26 = v213;
      v96 = v214 & 1;
      v152 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
    }
    else
    {
      v75 = v152;
      v95 = v154;
      v26 = v155;
      v96 = v153 & 1;
    }
    v215 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v152);
    if ((v216 & 1) == 0)
    {
      if ((v96 & 1) != 0)
        goto LABEL_149;
      if (v75 < v215)
        goto LABEL_241;
      if (v215 < v75)
        goto LABEL_149;
      if (!(_BYTE)v26)
        goto LABEL_197;
      if (v26 != 1)
        goto LABEL_203;
      if (v162 != 1 || v95 >= v161)
      {
LABEL_149:
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v268);
        outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
        LOBYTE(v267[0]) = v96;
        LOBYTE(v261[0]) = 1;
        memcpy((char *)v265 + 7, v268, 0x1A0uLL);
        v266[0] = v75;
        LOBYTE(v266[1]) = v96;
        v266[2] = v95;
        LOBYTE(v266[3]) = v26;
        v266[4] = 0;
        LOBYTE(v266[5]) = 1;
        v266[6] = 0;
        LOBYTE(v266[7]) = 2;
        memcpy((char *)&v266[7] + 1, v265, 0x1A7uLL);
        v266[60] = (uint64_t)v33;
        v266[61] = 0;
        memcpy(v277, v266, sizeof(v277));
        swift_retain();
        v217 = specialized Sequence.compactMap<A>(_:)((uint64_t)v277, (uint64_t)v94, (uint64_t)&unk_1E1B4DEF0, (uint64_t)&unk_1E1B4DF18, (uint64_t)closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred(at:)partial apply, (uint64_t)thunk for @escaping @callee_guaranteed () -> (@out ())partial apply, (uint64_t)&unk_1E1B4DF40, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
        v218 = swift_allocObject();
        *(_QWORD *)(v218 + 16) = v217;
        swift_release();
        outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v266);
        v219 = (uint64_t *)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0xA0));
        v220 = *v219;
        *v219 = (uint64_t)closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred<A>(at:)partial apply;
        v219[1] = v218;
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v220);
        v209 = v254;
        if (!v254)
          return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v275);
        goto LABEL_137;
      }
      __break(1u);
    }
    if ((v96 & 1) == 0)
    {
LABEL_234:
      __break(1u);
      goto LABEL_235;
    }
    goto LABEL_149;
  }
  v273 = 1;
  v250 = *(_QWORD *)(v25 + 128);
  *((_BYTE *)v3 + v250) = 1;
  if ((*((_BYTE *)v3 + *(_QWORD *)((*v18 & *v3) + 0x98)) & 1) == 0)
    goto LABEL_12;
  v28 = objc_msgSend(v259, sel_view);
  if (!v28)
    goto LABEL_244;
  v29 = v28;
  v30 = objc_msgSend(v28, sel_window);

  if (v30 && (v31 = objc_msgSend(v30, sel_windowScene), v30, v31))
  {
    if (objc_msgSend((id)objc_opt_self(), sel_areAnimationsEnabled))
    {
      if (objc_msgSend(v31, sel_activationState))
      {
        v32 = objc_msgSend(v31, sel_activationState);

        LODWORD(v33) = v32 == (id)1;
      }
      else
      {

        LODWORD(v33) = 1;
      }
    }
    else
    {

      LODWORD(v33) = 0;
    }
  }
  else
  {
LABEL_12:
    LODWORD(v33) = 0;
  }
  memcpy(v277, v258, 0x188uLL);
  memcpy(v272, v279, 0x188uLL);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v272);
  outlined init with take of Image.Resolved?((uint64_t)v272, (uint64_t)v266, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  v26 = NavigationState.StackContent.change(from:)((uint64_t)v266, v36);
  LODWORD(v38) = v37;
  static Log.navigation.getter();
  v39 = type metadata accessor for Logger();
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v13, 1, v39) != 1)
  {
    v97 = Logger.logObject.getter();
    v98 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v99 = swift_slowAlloc();
      v249 = (int)v38;
      v38 = (uint8_t *)v99;
      v100 = swift_slowAlloc();
      v248 = v100;
      v251 = (int)v33;
      *(_DWORD *)v38 = 136315138;
      v266[0] = v100;
      v247[1] = v38 + 4;
      v277[0] = v26;
      LOBYTE(v277[1]) = v249 & 1;
      v101 = String.init<A>(describing:)();
      v277[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v102, v266);
      LODWORD(v33) = v251;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v97, v98, "Updating stack content for change: %s", v38, 0xCu);
      v103 = v248;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v103, -1, -1);
      v104 = v38;
      LOBYTE(v38) = v249;
      MEMORY[0x18D760108](v104, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v39);
    if ((v38 & 1) == 0)
      goto LABEL_15;
LABEL_44:
    __asm { BR              X9 }
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  if ((v38 & 1) != 0)
    goto LABEL_44;
LABEL_15:
  v41 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
  if (v26 == 1)
  {
    v42 = objc_msgSend(v259, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v43 >> 62)
    {
      swift_bridgeObjectRetain();
      v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v44 >= 2)
    {
      v251 = (int)v33;
      outlined init with copy of NavigationAuthority((uint64_t)v257 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v257) + 0x68), (uint64_t)v277);
      NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v277);
      v45 = v253[2];
      if (v45)
      {
        v46 = *v253;
        v47 = v253[1];
        v48 = (uint64_t)v256;
        outlined init with take of NavigationState.Base(v256, v265);
        v49 = (_QWORD *)swift_allocObject();
        v49[2] = v46;
        v49[3] = v47;
        v49[4] = v45;
        outlined init with take of NavigationState.Base(v265, v269);
        v269[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
        v269[50] = v49;
        v269[51] = v45;
        memcpy(v266, v269, 0x1A0uLL);
        outlined retain of NavigationState.Base(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        outlined copy of NavigationStrategy_Phone?(v46, v47, v45);
        outlined retain of NavigationState.Base(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        outlined copy of NavigationStrategy_Phone?(v46, v47, v45);
        swift_bridgeObjectRetain();
        specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
        swift_bridgeObjectRelease();
        outlined retain of NavigationState.Base(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
        outlined consume of RichTextAttributeResolver?(v46, v47, v45);
        v50 = memcpy(v277, v269, 0x1A0uLL);
        v277[52] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
        v277[53] = 0;
        specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v50);
        if ((v53 & 1) == 0 || v52 != 2 || v51)
        {
          v54 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(0, 1);
          v56 = v55;
          v58 = v57;
          v60 = v59;
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v269);
          specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v54, v56 & 1, v58, v60);
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v269);
          v61 = v278[1];
          v62 = v278[2];
          outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v278);
          outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v277);
          LOBYTE(v278[0]) = v61;
          v278[1] = v62;
          v63 = v278;
          NavigationHostingControllerCache_UIKit.eject(at:)(*(SwiftUI::NavigationContentAbstractPosition *)&v63);
          swift_release();
          v64 = objc_msgSend(v259, sel_viewControllers);
          v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          v26 = v65 >> 62;
          if (!(v65 >> 62))
          {
            v66 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_25;
          }
LABEL_227:
          swift_bridgeObjectRetain();
          v66 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_25:
          v41 = (char **)v257;
          v67 = v251;
          if (__OFSUB__(0, v66))
          {
            __break(1u);
          }
          else
          {
            if (v66)
            {
              v68 = __OFSUB__(v66--, 1);
              if (v68)
              {
LABEL_235:
                __break(1u);
LABEL_236:
                __break(1u);
LABEL_237:
                __break(1u);
LABEL_238:
                __break(1u);
LABEL_239:
                __break(1u);
                goto LABEL_240;
              }
              if (v66 < 0)
                goto LABEL_236;
            }
            if (!v26)
            {
              v69 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
              goto LABEL_97;
            }
            swift_bridgeObjectRetain();
            v184 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if ((v184 & 0x8000000000000000) == 0)
            {
              swift_bridgeObjectRetain();
              v69 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
LABEL_97:
              if (v69 >= v66)
              {
                if ((v65 & 0xC000000000000001) != 0 && v66)
                {
                  v185 = 0;
                  do
                  {
                    v186 = v185 + 1;
                    _ArrayBuffer._typeCheckSlowPath(_:)(v185);
                    v185 = v186;
                  }
                  while (v66 != v186);
                }
                if (v26)
                {
                  swift_bridgeObjectRetain();
                  _CocoaArrayWrapper.subscript.getter();
                  v187 = v188;
                  v26 = v189;
                  v191 = v190;
                  swift_bridgeObjectRelease_n();
                  v66 = v191 >> 1;
                }
                else
                {
                  v187 = (v65 & 0xFFFFFFFFFFFFFF8) + 32;
                }
                v192 = v258;
                if (v26 == v66)
                {
                  swift_unknownObjectRelease();
                  v193 = 0;
                  goto LABEL_109;
                }
                if (v66 - 1 >= v26)
                {
                  v193 = (char *)*(id *)(v187 + 8 * (v66 - 1));
                  swift_unknownObjectRelease();
LABEL_109:
                  *(char **)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x88)) = v193;
                  if ((v67 & 1) != 0)
                  {
                    memcpy(v278, v192, 0x188uLL);
                    NavigationState.StackContent.animationSeed.getter(v268);
                    v194 = v268[0];
                    memcpy(v278, v256, 0x188uLL);
                    NavigationState.StackContent.animationSeed.getter(v267);
                    v197 = v194 != -1 && LODWORD(v267[0]) != -1 && v194 == LODWORD(v267[0]);
                  }
                  else
                  {
                    v197 = 0;
                  }
                  v198 = v259;

                  specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v198, v276, v255);
                  v199 = objc_msgSend(v198, sel_transitionCoordinator);
                  if (v199)
                  {
                    v200 = v199;
                    if (v197)
                    {
                      v273 = 1;
                      v201 = swift_allocObject();
                      swift_unknownObjectWeakInit();
                      v278[4] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
                      v278[5] = v201;
                      v278[0] = MEMORY[0x1E0C809B0];
                      v278[1] = 1107296256;
                      v278[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
                      v278[3] = &block_descriptor_170;
                      v202 = _Block_copy(v278);
                      swift_release();
                      objc_msgSend(v200, sel_animateAlongsideTransition_completion_, 0, v202);
                      _Block_release(v202);
                    }
                    swift_unknownObjectRelease();
                  }
                  goto LABEL_181;
                }
                goto LABEL_238;
              }
              goto LABEL_230;
            }
          }
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
          goto LABEL_232;
        }
LABEL_251:
        outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v277);
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x1879C6DECLL);
      }
      __break(1u);
LABEL_249:
      __break(1u);
LABEL_250:
      swift_unknownObjectRelease();
      __break(1u);
      goto LABEL_251;
    }
  }
  v105 = objc_msgSend(v259, sel_viewControllers);
  v75 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v106 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v106 >> 62)
    goto LABEL_222;
  v107 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    if (v107 < 2)
      goto LABEL_55;
    v108 = objc_msgSend(v259, v41[344]);
    v109 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v109 >> 62)
    {
      swift_bridgeObjectRetain();
      v110 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v110 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v26 >= v110)
    {
LABEL_55:
      memcpy(v277, v256, 0x188uLL);
      v125 = NavigationState.StackContent.count.getter();
      memcpy(v277, v258, 0x188uLL);
      v126 = NavigationState.StackContent.count.getter();
      v68 = __OFSUB__(v125, v126);
      v75 = v125 - v126;
      if (v68)
        goto LABEL_221;
      v41 = (char **)v257;
      if (v75 < 1)
        goto LABEL_77;
      v251 = (int)v33;
      outlined init with copy of NavigationAuthority((uint64_t)v257 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v257) + 0x68), (uint64_t)v277);
      v94 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v277);
      v127 = v253[2];
      if (!v127)
        goto LABEL_245;
      v128 = *v253;
      v129 = v253[1];
      v130 = (uint64_t)v256;
      outlined init with take of NavigationState.Base(v256, v267);
      v131 = (_QWORD *)swift_allocObject();
      v131[2] = v128;
      v131[3] = v129;
      v131[4] = v127;
      outlined init with take of NavigationState.Base(v267, v268);
      v268[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      v268[50] = v131;
      v268[51] = v127;
      memcpy(v278, v268, sizeof(v278));
      outlined retain of NavigationState.Base(v130, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v128, v129, v127);
      outlined retain of NavigationState.Base(v130, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v128, v129, v127);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined retain of NavigationState.Base(v130, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?(v128, v129, v127);
      v132 = memcpy(v269, v268, sizeof(v269));
      v26 = (uint64_t)closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      v270 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      v271 = 0;
      v133 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v132);
      v137 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v75, v133, v134 & 1, v135, v136);
      if (v140 == -1)
      {
        v156 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
        v95 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v156);
        v33 = v157;
        LOBYTE(v13) = v158;
        v96 = v159 & 1;
        v137 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
      }
      else
      {
        v95 = v137;
        v33 = v139;
        LOBYTE(v13) = v140;
        v96 = v138 & 1;
      }
      v65 = (unint64_t)v278;
      v160 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v137);
      if ((v163 & 1) != 0)
        goto LABEL_74;
      if ((v96 & 1) != 0)
        goto LABEL_75;
      if (v95 < v160)
        goto LABEL_237;
      if (v160 < v95)
        goto LABEL_75;
      if ((_BYTE)v13)
      {
        if (v13 == 1)
        {
          if (v162 != 1 || (uint64_t)v33 >= v161)
            goto LABEL_75;
          __break(1u);
LABEL_74:
          if ((v96 & 1) == 0)
          {
            __break(1u);
          }
          else
          {
LABEL_75:
            outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v268);
            outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
            LOBYTE(v261[0]) = v96;
            LOBYTE(v262) = 1;
            memcpy((char *)v265 + 7, v268, 0x1A0uLL);
            v266[0] = v95;
            LOBYTE(v266[1]) = v96;
            v266[2] = (uint64_t)v33;
            LOBYTE(v266[3]) = (_BYTE)v13;
            v266[4] = 0;
            LOBYTE(v266[5]) = 1;
            v266[6] = 0;
            LOBYTE(v266[7]) = 2;
            memcpy((char *)&v266[7] + 1, v265, 0x1A7uLL);
            v266[60] = v26;
            v266[61] = 0;
            memcpy(v277, v266, sizeof(v277));
            specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v277, (uint64_t)&unk_1E1B4DFB8, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
            swift_release();
            outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v266);
            v164 = objc_msgSend(v259, sel_viewControllers);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
            v165 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            v65 = specialized BidirectionalCollection.dropLast(_:)(v75, v165);
            v167 = v166;
            v169 = v168;
            v26 = v170;
            swift_bridgeObjectRelease();
            v171 = (unint64_t)v26 >> 1;
            if (v169 == (unint64_t)v26 >> 1)
            {
              swift_unknownObjectRelease();
              LODWORD(v33) = v251;
LABEL_77:
              if ((_DWORD)v33)
                goto LABEL_78;
              goto LABEL_89;
            }
            v176 = v251;
            if (v171 > v169)
            {
              v177 = (char *)*(id *)(v167 + 8 * v171 - 8);
              swift_unknownObjectRelease();
              *(char **)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x88)) = v177;

              if (v176)
              {
LABEL_78:
                memcpy(v266, v258, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v269);
                v172 = v269[0];
                memcpy(v266, v256, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v265);
                v175 = v172 != -1 && LODWORD(v265[0]) != -1 && v172 == LODWORD(v265[0]);
LABEL_90:
                v178 = v259;
                specialized NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(v259, (uint64_t)v276, v175, v255, v252 & 1);
                v179 = objc_msgSend(v178, sel_transitionCoordinator);
                if (v179)
                {
                  v180 = v179;
                  v181 = v175 ^ 1;
                  if (v75 < 1)
                    v181 = 1;
                  if ((v181 & 1) == 0)
                  {
                    v273 = 1;
                    v182 = swift_allocObject();
                    swift_unknownObjectWeakInit();
                    v266[4] = (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
                    v266[5] = v182;
                    v266[0] = MEMORY[0x1E0C809B0];
                    v266[1] = 1107296256;
                    v266[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
                    v266[3] = (uint64_t)&block_descriptor_148;
                    v183 = _Block_copy(v266);
                    swift_release();
                    objc_msgSend(v180, sel_animateAlongsideTransition_completion_, 0, v183);
                    _Block_release(v183);
                  }
LABEL_180:
                  swift_unknownObjectRelease();
                }
                goto LABEL_182;
              }
LABEL_89:
              v175 = 0;
              goto LABEL_90;
            }
          }
          __break(1u);
          goto LABEL_227;
        }
      }
      else
      {
        if (!v162)
        {
LABEL_206:
          if ((uint64_t)v33 >= v161)
            goto LABEL_75;
          __break(1u);
          goto LABEL_208;
        }
        if (v162 == 2)
          goto LABEL_75;
        __break(1u);
      }
      if (v162 == 2 && !v161)
        goto LABEL_75;
      __break(1u);
LABEL_194:
      if (!v162)
        goto LABEL_214;
      if (v162 == 2)
        goto LABEL_135;
      __break(1u);
LABEL_197:
      if (!v162)
        goto LABEL_216;
      if (v162 == 2)
        goto LABEL_149;
      __break(1u);
LABEL_200:
      if (v162 == 2 && !v161)
        goto LABEL_135;
      __break(1u);
LABEL_203:
      if (v162 == 2 && !v161)
        goto LABEL_149;
      __break(1u);
      goto LABEL_206;
    }
    v251 = (int)v33;
    outlined init with copy of NavigationAuthority((uint64_t)v257 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v257) + 0x68), (uint64_t)v277);
    v252 = NavigationAuthority.controllerCache.getter();
    outlined destroy of NavigationAuthority((uint64_t)v277);
    v111 = v253[2];
    if (!v111)
      goto LABEL_249;
    v112 = *v253;
    v113 = v253[1];
    v114 = (uint64_t)v256;
    outlined init with take of NavigationState.Base(v256, v267);
    v115 = (_QWORD *)swift_allocObject();
    v115[2] = v112;
    v115[3] = v113;
    v115[4] = v111;
    outlined init with take of NavigationState.Base(v267, v268);
    v268[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
    v268[50] = v115;
    v268[51] = v111;
    memcpy(v278, v268, sizeof(v278));
    outlined retain of NavigationState.Base(v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v112, v113, v111);
    outlined retain of NavigationState.Base(v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v112, v113, v111);
    swift_bridgeObjectRetain();
    specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
    swift_bridgeObjectRelease();
    outlined retain of NavigationState.Base(v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    outlined consume of RichTextAttributeResolver?(v112, v113, v111);
    v116 = memcpy(v269, v268, sizeof(v269));
    v94 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    v270 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    v271 = 0;
    if (v26 < 0)
      goto LABEL_231;
    v117 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v116);
    v121 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v26, v117, v118 & 1, v119, v120);
    if (v124 == -1)
    {
      v221 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
      v95 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v221);
      v33 = v222;
      LOBYTE(v13) = v223;
      v96 = v224 & 1;
      v121 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
    }
    else
    {
      v95 = v121;
      v33 = v123;
      LOBYTE(v13) = v124;
      v96 = v122 & 1;
    }
    v225 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v121);
    if ((v226 & 1) != 0)
      goto LABEL_162;
    if ((v96 & 1) != 0)
      goto LABEL_163;
    if (v95 < v225)
      goto LABEL_242;
    if (v225 < v95)
      goto LABEL_163;
    if ((_BYTE)v13)
      break;
LABEL_208:
    if (v162)
    {
      if (v162 == 2)
        goto LABEL_163;
      __break(1u);
      goto LABEL_211;
    }
LABEL_218:
    if ((uint64_t)v33 >= v161)
      goto LABEL_163;
    __break(1u);
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
LABEL_222:
    swift_bridgeObjectRetain();
    v107 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 != 1)
  {
LABEL_211:
    if (v162 == 2 && !v161)
      goto LABEL_163;
    __break(1u);
LABEL_214:
    if (v95 >= v161)
      goto LABEL_135;
    __break(1u);
LABEL_216:
    if (v95 >= v161)
      goto LABEL_149;
    __break(1u);
    goto LABEL_218;
  }
  if (v162 == 1 && (uint64_t)v33 < v161)
  {
    __break(1u);
LABEL_162:
    if ((v96 & 1) == 0)
      goto LABEL_239;
  }
LABEL_163:
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v268);
  outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
  v264 = v96;
  v263 = 1;
  memcpy((char *)v265 + 7, v268, 0x1A0uLL);
  v266[0] = v95;
  LOBYTE(v266[1]) = v96;
  v266[2] = (uint64_t)v33;
  LOBYTE(v266[3]) = (_BYTE)v13;
  v266[4] = 0;
  LOBYTE(v266[5]) = 1;
  v266[6] = 0;
  LOBYTE(v266[7]) = 2;
  memcpy((char *)&v266[7] + 1, v265, 0x1A7uLL);
  v266[60] = (uint64_t)v94;
  v266[61] = 0;
  memcpy(v277, v266, sizeof(v277));
  specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v277, (uint64_t)&unk_1E1B4DFB8, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
  swift_release();
  outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v266);
  v227 = objc_msgSend(v259, v41[344]);
  v228 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized BidirectionalCollection.dropLast(_:)(v26, v228);
  v230 = v229;
  v232 = v231;
  v234 = v233;
  swift_bridgeObjectRelease();
  v235 = v234 >> 1;
  if (v232 == v234 >> 1)
    goto LABEL_250;
  v41 = (char **)v257;
  v236 = v251;
  if (v235 <= v232)
  {
LABEL_232:
    __break(1u);
    goto LABEL_233;
  }
  v193 = (char *)*(id *)(v230 + 8 * v235 - 8);
  swift_unknownObjectRelease();
  *(char **)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x88)) = v193;
  if (v236)
  {
    memcpy(v261, v258, sizeof(v261));
    NavigationState.StackContent.animationSeed.getter(&v262);
    v237 = v262;
    memcpy(v261, v256, sizeof(v261));
    NavigationState.StackContent.animationSeed.getter(&v260);
    v240 = v237 != -1 && (_DWORD)v260 != -1 && v237 == (_DWORD)v260;
  }
  else
  {
    v240 = 0;
  }
  v241 = v259;

  specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v241, v276, v255);
  v242 = objc_msgSend(v241, sel_transitionCoordinator);
  if (v242)
  {
    v243 = v242;
    if (v240)
    {
      v273 = 1;
      v244 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v261[4] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
      v261[5] = v244;
      v261[0] = MEMORY[0x1E0C809B0];
      v261[1] = 1107296256;
      v261[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      v261[3] = &block_descriptor_161;
      v245 = _Block_copy(v261);
      swift_release();
      objc_msgSend(v243, sel_animateAlongsideTransition_completion_, 0, v245);
      _Block_release(v245);
    }

    goto LABEL_180;
  }
LABEL_181:

LABEL_182:
  if (v273 == 1)
  {
    *((_BYTE *)v41 + v250) = 0;
    *(char **)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x88)) = 0;
  }
  v209 = v254;
  if (v254)
  {
    outlined init with copy of NavigationAuthority((uint64_t)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x68), (uint64_t)v269);
    NavigationAuthority.controllerCache.getter();
    v210 = v269;
LABEL_186:
    outlined destroy of NavigationAuthority((uint64_t)v210);
    specialized NavigationHostingControllerCache_UIKit.updateUnusedRoots(_:transaction:)(v209);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v275);
}

{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  char **v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  _QWORD *v63;
  id v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  BOOL v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  BOOL v72;
  uint8_t *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  _QWORD *v84;
  void *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v95;
  char v96;
  NSObject *v97;
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint8_t *v104;
  id v105;
  unint64_t v106;
  uint64_t v107;
  id v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  void *v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t *v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  void *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t *v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  _QWORD *v146;
  void *v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  char v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  char v163;
  id v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int64_t v168;
  int64_t v169;
  uint64_t v170;
  int64_t v171;
  int v172;
  char v175;
  int v176;
  char *v177;
  void *v178;
  id v179;
  void *v180;
  char v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  Swift::Int v185;
  Swift::Int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  const void *v192;
  char *v193;
  int v194;
  _BOOL8 v197;
  void *v198;
  id v199;
  void *v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  char v223;
  char v224;
  uint64_t v225;
  char v226;
  id v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  int64_t v235;
  int v236;
  int v237;
  _BOOL8 v240;
  void *v241;
  id v242;
  void *v243;
  uint64_t v244;
  void *v245;
  _QWORD v247[2];
  uint64_t v248;
  int v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  void *v256;
  _QWORD *v257;
  const void *v258;
  void *v259;
  uint64_t v260;
  _QWORD v261[49];
  uint64_t v262;
  char v263;
  char v264;
  _QWORD v265[53];
  uint64_t v266[65];
  _QWORD v267[49];
  _QWORD v268[52];
  _QWORD v269[52];
  uint64_t (*v270)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v271;
  _BYTE v272[399];
  char v273;
  _BYTE v274[392];
  _QWORD v275[55];
  _BYTE v276[416];
  _QWORD v277[62];
  _QWORD v278[52];
  _BYTE v279[392];

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  LODWORD(v252) = v4;
  v255 = v6;
  v256 = v5;
  v259 = v7;
  v9 = v8;
  memcpy(v279, v5, sizeof(v279));
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v247 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v247 - v16;
  v18 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v19 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x70));
  swift_beginAccess();
  v20 = v19[2];
  if (!v20)
  {
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  v253 = v19;
  v23 = v19;
  v22 = *v19;
  v21 = v23[1];
  outlined init with take of NavigationState.Base(v9, v274);
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = v22;
  v24[3] = v21;
  v24[4] = v20;
  outlined init with take of NavigationState.Base(v274, v275);
  v275[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
  v275[50] = v24;
  v275[51] = v20;
  memcpy(v276, v275, sizeof(v276));
  outlined copy of NavigationStrategy_Phone?(v22, v21, v20);
  outlined copy of NavigationStrategy_Phone?(v22, v21, v20);
  swift_bridgeObjectRetain();
  v258 = v9;
  outlined retain of NavigationState.Base((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  v254 = specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
  outlined consume of RichTextAttributeResolver?(v22, v21, v20);
  v25 = *v18 & *v3;
  v26 = *(_QWORD *)(v25 + 0x78);
  v27 = *((unsigned __int8 *)v3 + v26);
  v257 = v3;
  if (v27 != 2)
  {
    static Log.navigation.getter();
    v34 = type metadata accessor for Logger();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v17, 1, v34) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
      v33 = v253;
    }
    else
    {
      v70 = Logger.logObject.getter();
      v71 = static os_log_type_t.default.getter();
      v72 = os_log_type_enabled(v70, v71);
      v33 = v253;
      if (v72)
      {
        v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v73 = 0;
        _os_log_impl(&dword_186E48000, v70, v71, "Updating stack views in place after end-user triggered transition or isTransitioningViewControllers", v73, 2u);
        MEMORY[0x18D760108](v73, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v34);
    }
    v41 = (char **)v257;
    specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v259, v276, v255);
    v74 = *((unsigned __int8 *)v41 + v26);
    if (v74 == 2)
      goto LABEL_136;
    *((_BYTE *)v41 + v26) = 2;
    memcpy(v277, v256, 0x188uLL);
    v75 = NavigationState.StackContent.count.getter();
    memcpy(v277, v258, 0x188uLL);
    v76 = NavigationState.StackContent.count.getter();
    v77 = v75 - v76;
    if (__OFSUB__(v75, v76))
      goto LABEL_220;
    if (v77 < 1)
    {
LABEL_136:
      v209 = v254;
      if (!v254)
        return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v275);
LABEL_137:
      outlined init with copy of NavigationAuthority((uint64_t)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x68), (uint64_t)v266);
      NavigationAuthority.controllerCache.getter();
      v210 = v266;
      goto LABEL_186;
    }
    v78 = (uint64_t)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x68);
    if ((v74 & 1) == 0)
    {
      outlined init with copy of NavigationAuthority(v78, (uint64_t)v277);
      v75 = NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v277);
      v79 = v33[2];
      if (!v79)
      {
LABEL_246:
        __break(1u);
        goto LABEL_247;
      }
      v82 = v33;
      v81 = *v33;
      v80 = v82[1];
      v83 = (uint64_t)v256;
      outlined init with take of NavigationState.Base(v256, v272);
      v84 = (_QWORD *)swift_allocObject();
      v84[2] = v81;
      v84[3] = v80;
      v84[4] = v79;
      outlined init with take of NavigationState.Base(v272, v268);
      v268[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      v268[50] = v84;
      v268[51] = v79;
      memcpy(v278, v268, sizeof(v278));
      outlined retain of NavigationState.Base(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v81, v80, v79);
      outlined retain of NavigationState.Base(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v81, v80, v79);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined retain of NavigationState.Base(v83, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?(v81, v80, v79);
      v85 = memcpy(v269, v268, sizeof(v269));
      v33 = (uint64_t *)closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      v270 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      v271 = 0;
      v86 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v85);
      v90 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v77, v86, v87 & 1, v88, v89);
      if ((_BYTE)v93 == 0xFF)
      {
        v203 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
        v94 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v203);
        v95 = v204;
        v26 = v205;
        v96 = v206 & 1;
        v90 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
      }
      else
      {
        v94 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v90;
        v95 = v92;
        v26 = v93;
        v96 = v91 & 1;
      }
      v207 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v90);
      if ((v208 & 1) == 0)
      {
        if ((v96 & 1) != 0)
          goto LABEL_135;
        if ((uint64_t)v94 < v207)
        {
LABEL_240:
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
          goto LABEL_243;
        }
        if (v207 < (uint64_t)v94)
          goto LABEL_135;
        if (!(_BYTE)v26)
          goto LABEL_194;
        if (v26 != 1)
          goto LABEL_200;
        if (v162 != 1 || v95 >= v161)
        {
LABEL_135:
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v268);
          outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
          LOBYTE(v267[0]) = v96;
          LOBYTE(v261[0]) = 1;
          memcpy((char *)v265 + 7, v268, 0x1A0uLL);
          v266[0] = (uint64_t)v94;
          LOBYTE(v266[1]) = v96;
          v266[2] = v95;
          LOBYTE(v266[3]) = v26;
          v266[4] = 0;
          LOBYTE(v266[5]) = 1;
          v266[6] = 0;
          LOBYTE(v266[7]) = 2;
          memcpy((char *)&v266[7] + 1, v265, 0x1A7uLL);
          v266[60] = (uint64_t)v33;
          v266[61] = 0;
          memcpy(v277, v266, sizeof(v277));
          specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v277, (uint64_t)&unk_1E1B4DC20, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
          swift_release();
          outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v266);
          goto LABEL_136;
        }
        __break(1u);
      }
      if ((v96 & 1) == 0)
      {
LABEL_233:
        __break(1u);
        goto LABEL_234;
      }
      goto LABEL_135;
    }
    outlined init with copy of NavigationAuthority(v78, (uint64_t)v277);
    v94 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))NavigationAuthority.controllerCache.getter();
    outlined destroy of NavigationAuthority((uint64_t)v277);
    v141 = v33[2];
    if (!v141)
    {
LABEL_247:
      __break(1u);
      JUMPOUT(0x1879C9174);
    }
    v144 = v33;
    v143 = *v33;
    v142 = v144[1];
    v145 = (uint64_t)v256;
    outlined init with take of NavigationState.Base(v256, v272);
    v146 = (_QWORD *)swift_allocObject();
    v146[2] = v143;
    v146[3] = v142;
    v146[4] = v141;
    outlined init with take of NavigationState.Base(v272, v268);
    v268[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
    v268[50] = v146;
    v268[51] = v141;
    memcpy(v278, v268, sizeof(v278));
    outlined retain of NavigationState.Base(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v143, v142, v141);
    outlined retain of NavigationState.Base(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v143, v142, v141);
    swift_bridgeObjectRetain();
    specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
    swift_bridgeObjectRelease();
    outlined retain of NavigationState.Base(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    outlined consume of RichTextAttributeResolver?(v143, v142, v141);
    v147 = memcpy(v269, v268, sizeof(v269));
    v33 = (uint64_t *)closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    v270 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    v271 = 0;
    v148 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v147);
    v152 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v77, v148, v149 & 1, v150, v151);
    if ((_BYTE)v155 == 0xFF)
    {
      v211 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
      v75 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v211);
      v95 = v212;
      v26 = v213;
      v96 = v214 & 1;
      v152 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
    }
    else
    {
      v75 = v152;
      v95 = v154;
      v26 = v155;
      v96 = v153 & 1;
    }
    v215 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v152);
    if ((v216 & 1) == 0)
    {
      if ((v96 & 1) != 0)
        goto LABEL_149;
      if (v75 < v215)
        goto LABEL_241;
      if (v215 < v75)
        goto LABEL_149;
      if (!(_BYTE)v26)
        goto LABEL_197;
      if (v26 != 1)
        goto LABEL_203;
      if (v162 != 1 || v95 >= v161)
      {
LABEL_149:
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v268);
        outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
        LOBYTE(v267[0]) = v96;
        LOBYTE(v261[0]) = 1;
        memcpy((char *)v265 + 7, v268, 0x1A0uLL);
        v266[0] = v75;
        LOBYTE(v266[1]) = v96;
        v266[2] = v95;
        LOBYTE(v266[3]) = v26;
        v266[4] = 0;
        LOBYTE(v266[5]) = 1;
        v266[6] = 0;
        LOBYTE(v266[7]) = 2;
        memcpy((char *)&v266[7] + 1, v265, 0x1A7uLL);
        v266[60] = (uint64_t)v33;
        v266[61] = 0;
        memcpy(v277, v266, sizeof(v277));
        swift_retain();
        v217 = specialized Sequence.compactMap<A>(_:)((uint64_t)v277, (uint64_t)v94, (uint64_t)&unk_1E1B4DB30, (uint64_t)&unk_1E1B4DB58, (uint64_t)partial apply for closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred(at:), (uint64_t)partial apply for thunk for @callee_guaranteed () -> (), (uint64_t)&unk_1E1B4DB80, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
        v218 = swift_allocObject();
        *(_QWORD *)(v218 + 16) = v217;
        swift_release();
        outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v266);
        v219 = (uint64_t *)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0xA0));
        v220 = *v219;
        *v219 = (uint64_t)partial apply for closure #2 in DragAndDropBridge.dragInteraction(_:sessionWillBegin:);
        v219[1] = v218;
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v220);
        v209 = v254;
        if (!v254)
          return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v275);
        goto LABEL_137;
      }
      __break(1u);
    }
    if ((v96 & 1) == 0)
    {
LABEL_234:
      __break(1u);
      goto LABEL_235;
    }
    goto LABEL_149;
  }
  v273 = 1;
  v250 = *(_QWORD *)(v25 + 128);
  *((_BYTE *)v3 + v250) = 1;
  if ((*((_BYTE *)v3 + *(_QWORD *)((*v18 & *v3) + 0x98)) & 1) == 0)
    goto LABEL_12;
  v28 = objc_msgSend(v259, sel_view);
  if (!v28)
    goto LABEL_244;
  v29 = v28;
  v30 = objc_msgSend(v28, sel_window);

  if (v30 && (v31 = objc_msgSend(v30, sel_windowScene), v30, v31))
  {
    if (objc_msgSend((id)objc_opt_self(), sel_areAnimationsEnabled))
    {
      if (objc_msgSend(v31, sel_activationState))
      {
        v32 = objc_msgSend(v31, sel_activationState);

        LODWORD(v33) = v32 == (id)1;
      }
      else
      {

        LODWORD(v33) = 1;
      }
    }
    else
    {

      LODWORD(v33) = 0;
    }
  }
  else
  {
LABEL_12:
    LODWORD(v33) = 0;
  }
  memcpy(v277, v258, 0x188uLL);
  memcpy(v272, v279, 0x188uLL);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v272);
  outlined init with take of Image.Resolved?((uint64_t)v272, (uint64_t)v266, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  v26 = NavigationState.StackContent.change(from:)((uint64_t)v266, v36);
  LODWORD(v38) = v37;
  static Log.navigation.getter();
  v39 = type metadata accessor for Logger();
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v13, 1, v39) != 1)
  {
    v97 = Logger.logObject.getter();
    v98 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v99 = swift_slowAlloc();
      v249 = (int)v38;
      v38 = (uint8_t *)v99;
      v100 = swift_slowAlloc();
      v248 = v100;
      v251 = (int)v33;
      *(_DWORD *)v38 = 136315138;
      v266[0] = v100;
      v247[1] = v38 + 4;
      v277[0] = v26;
      LOBYTE(v277[1]) = v249 & 1;
      v101 = String.init<A>(describing:)();
      v277[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v102, v266);
      LODWORD(v33) = v251;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v97, v98, "Updating stack content for change: %s", v38, 0xCu);
      v103 = v248;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v103, -1, -1);
      v104 = v38;
      LOBYTE(v38) = v249;
      MEMORY[0x18D760108](v104, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v39);
    if ((v38 & 1) == 0)
      goto LABEL_15;
LABEL_44:
    __asm { BR              X9 }
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  if ((v38 & 1) != 0)
    goto LABEL_44;
LABEL_15:
  v41 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
  if (v26 == 1)
  {
    v42 = objc_msgSend(v259, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v43 >> 62)
    {
      swift_bridgeObjectRetain();
      v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v44 >= 2)
    {
      v251 = (int)v33;
      outlined init with copy of NavigationAuthority((uint64_t)v257 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v257) + 0x68), (uint64_t)v277);
      NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v277);
      v45 = v253[2];
      if (v45)
      {
        v46 = *v253;
        v47 = v253[1];
        v48 = (uint64_t)v256;
        outlined init with take of NavigationState.Base(v256, v265);
        v49 = (_QWORD *)swift_allocObject();
        v49[2] = v46;
        v49[3] = v47;
        v49[4] = v45;
        outlined init with take of NavigationState.Base(v265, v269);
        v269[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
        v269[50] = v49;
        v269[51] = v45;
        memcpy(v266, v269, 0x1A0uLL);
        outlined retain of NavigationState.Base(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        outlined copy of NavigationStrategy_Phone?(v46, v47, v45);
        outlined retain of NavigationState.Base(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        outlined copy of NavigationStrategy_Phone?(v46, v47, v45);
        swift_bridgeObjectRetain();
        specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
        swift_bridgeObjectRelease();
        outlined retain of NavigationState.Base(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
        outlined consume of RichTextAttributeResolver?(v46, v47, v45);
        v50 = memcpy(v277, v269, 0x1A0uLL);
        v277[52] = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
        v277[53] = 0;
        specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v50);
        if ((v53 & 1) == 0 || v52 != 2 || v51)
        {
          v54 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(0, 1);
          v56 = v55;
          v58 = v57;
          v60 = v59;
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v269);
          specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v54, v56 & 1, v58, v60);
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v269);
          v61 = v278[1];
          v62 = v278[2];
          outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v278);
          outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v277);
          LOBYTE(v278[0]) = v61;
          v278[1] = v62;
          v63 = v278;
          NavigationHostingControllerCache_UIKit.eject(at:)(*(SwiftUI::NavigationContentAbstractPosition *)&v63);
          swift_release();
          v64 = objc_msgSend(v259, sel_viewControllers);
          v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          v26 = v65 >> 62;
          if (!(v65 >> 62))
          {
            v66 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_25;
          }
LABEL_227:
          swift_bridgeObjectRetain();
          v66 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_25:
          v41 = (char **)v257;
          v67 = v251;
          if (__OFSUB__(0, v66))
          {
            __break(1u);
          }
          else
          {
            if (v66)
            {
              v68 = __OFSUB__(v66--, 1);
              if (v68)
              {
LABEL_235:
                __break(1u);
LABEL_236:
                __break(1u);
LABEL_237:
                __break(1u);
LABEL_238:
                __break(1u);
LABEL_239:
                __break(1u);
                goto LABEL_240;
              }
              if (v66 < 0)
                goto LABEL_236;
            }
            if (!v26)
            {
              v69 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
              goto LABEL_97;
            }
            swift_bridgeObjectRetain();
            v184 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if ((v184 & 0x8000000000000000) == 0)
            {
              swift_bridgeObjectRetain();
              v69 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
LABEL_97:
              if (v69 >= v66)
              {
                if ((v65 & 0xC000000000000001) != 0 && v66)
                {
                  v185 = 0;
                  do
                  {
                    v186 = v185 + 1;
                    _ArrayBuffer._typeCheckSlowPath(_:)(v185);
                    v185 = v186;
                  }
                  while (v66 != v186);
                }
                if (v26)
                {
                  swift_bridgeObjectRetain();
                  _CocoaArrayWrapper.subscript.getter();
                  v187 = v188;
                  v26 = v189;
                  v191 = v190;
                  swift_bridgeObjectRelease_n();
                  v66 = v191 >> 1;
                }
                else
                {
                  v187 = (v65 & 0xFFFFFFFFFFFFFF8) + 32;
                }
                v192 = v258;
                if (v26 == v66)
                {
                  swift_unknownObjectRelease();
                  v193 = 0;
                  goto LABEL_109;
                }
                if (v66 - 1 >= v26)
                {
                  v193 = (char *)*(id *)(v187 + 8 * (v66 - 1));
                  swift_unknownObjectRelease();
LABEL_109:
                  *(char **)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x88)) = v193;
                  if ((v67 & 1) != 0)
                  {
                    memcpy(v278, v192, 0x188uLL);
                    NavigationState.StackContent.animationSeed.getter(v268);
                    v194 = v268[0];
                    memcpy(v278, v256, 0x188uLL);
                    NavigationState.StackContent.animationSeed.getter(v267);
                    v197 = v194 != -1 && LODWORD(v267[0]) != -1 && v194 == LODWORD(v267[0]);
                  }
                  else
                  {
                    v197 = 0;
                  }
                  v198 = v259;

                  specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v198, v276, v255);
                  v199 = objc_msgSend(v198, sel_transitionCoordinator);
                  if (v199)
                  {
                    v200 = v199;
                    if (v197)
                    {
                      v273 = 1;
                      v201 = swift_allocObject();
                      swift_unknownObjectWeakInit();
                      v278[4] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
                      v278[5] = v201;
                      v278[0] = MEMORY[0x1E0C809B0];
                      v278[1] = 1107296256;
                      v278[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
                      v278[3] = &block_descriptor_71_0;
                      v202 = _Block_copy(v278);
                      swift_release();
                      objc_msgSend(v200, sel_animateAlongsideTransition_completion_, 0, v202);
                      _Block_release(v202);
                    }
                    swift_unknownObjectRelease();
                  }
                  goto LABEL_181;
                }
                goto LABEL_238;
              }
              goto LABEL_230;
            }
          }
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
          goto LABEL_232;
        }
LABEL_251:
        outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v277);
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x1879C91C4);
      }
      __break(1u);
LABEL_249:
      __break(1u);
LABEL_250:
      swift_unknownObjectRelease();
      __break(1u);
      goto LABEL_251;
    }
  }
  v105 = objc_msgSend(v259, sel_viewControllers);
  v75 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v106 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v106 >> 62)
    goto LABEL_222;
  v107 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    if (v107 < 2)
      goto LABEL_55;
    v108 = objc_msgSend(v259, v41[344]);
    v109 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v109 >> 62)
    {
      swift_bridgeObjectRetain();
      v110 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v110 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v26 >= v110)
    {
LABEL_55:
      memcpy(v277, v256, 0x188uLL);
      v125 = NavigationState.StackContent.count.getter();
      memcpy(v277, v258, 0x188uLL);
      v126 = NavigationState.StackContent.count.getter();
      v68 = __OFSUB__(v125, v126);
      v75 = v125 - v126;
      if (v68)
        goto LABEL_221;
      v41 = (char **)v257;
      if (v75 < 1)
        goto LABEL_77;
      v251 = (int)v33;
      outlined init with copy of NavigationAuthority((uint64_t)v257 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v257) + 0x68), (uint64_t)v277);
      v94 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))NavigationAuthority.controllerCache.getter();
      outlined destroy of NavigationAuthority((uint64_t)v277);
      v127 = v253[2];
      if (!v127)
        goto LABEL_245;
      v128 = *v253;
      v129 = v253[1];
      v130 = (uint64_t)v256;
      outlined init with take of NavigationState.Base(v256, v267);
      v131 = (_QWORD *)swift_allocObject();
      v131[2] = v128;
      v131[3] = v129;
      v131[4] = v127;
      outlined init with take of NavigationState.Base(v267, v268);
      v268[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
      v268[50] = v131;
      v268[51] = v127;
      memcpy(v278, v268, sizeof(v278));
      outlined retain of NavigationState.Base(v130, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v128, v129, v127);
      outlined retain of NavigationState.Base(v130, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined copy of NavigationStrategy_Phone?(v128, v129, v127);
      swift_bridgeObjectRetain();
      specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
      swift_bridgeObjectRelease();
      outlined retain of NavigationState.Base(v130, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
      outlined consume of RichTextAttributeResolver?(v128, v129, v127);
      v132 = memcpy(v269, v268, sizeof(v269));
      v26 = (uint64_t)closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      v270 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
      v271 = 0;
      v133 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v132);
      v137 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v75, v133, v134 & 1, v135, v136);
      if (v140 == -1)
      {
        v156 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
        v95 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v156);
        v33 = v157;
        LOBYTE(v13) = v158;
        v96 = v159 & 1;
        v137 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
      }
      else
      {
        v95 = v137;
        v33 = v139;
        LOBYTE(v13) = v140;
        v96 = v138 & 1;
      }
      v65 = (unint64_t)v278;
      v160 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v137);
      if ((v163 & 1) != 0)
        goto LABEL_74;
      if ((v96 & 1) != 0)
        goto LABEL_75;
      if (v95 < v160)
        goto LABEL_237;
      if (v160 < v95)
        goto LABEL_75;
      if ((_BYTE)v13)
      {
        if (v13 == 1)
        {
          if (v162 != 1 || (uint64_t)v33 >= v161)
            goto LABEL_75;
          __break(1u);
LABEL_74:
          if ((v96 & 1) == 0)
          {
            __break(1u);
          }
          else
          {
LABEL_75:
            outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v268);
            outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
            LOBYTE(v261[0]) = v96;
            LOBYTE(v262) = 1;
            memcpy((char *)v265 + 7, v268, 0x1A0uLL);
            v266[0] = v95;
            LOBYTE(v266[1]) = v96;
            v266[2] = (uint64_t)v33;
            LOBYTE(v266[3]) = (_BYTE)v13;
            v266[4] = 0;
            LOBYTE(v266[5]) = 1;
            v266[6] = 0;
            LOBYTE(v266[7]) = 2;
            memcpy((char *)&v266[7] + 1, v265, 0x1A7uLL);
            v266[60] = v26;
            v266[61] = 0;
            memcpy(v277, v266, sizeof(v277));
            specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v277, (uint64_t)&unk_1E1B4DC20, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
            swift_release();
            outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v266);
            v164 = objc_msgSend(v259, sel_viewControllers);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
            v165 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            v65 = specialized BidirectionalCollection.dropLast(_:)(v75, v165);
            v167 = v166;
            v169 = v168;
            v26 = v170;
            swift_bridgeObjectRelease();
            v171 = (unint64_t)v26 >> 1;
            if (v169 == (unint64_t)v26 >> 1)
            {
              swift_unknownObjectRelease();
              LODWORD(v33) = v251;
LABEL_77:
              if ((_DWORD)v33)
                goto LABEL_78;
              goto LABEL_89;
            }
            v176 = v251;
            if (v171 > v169)
            {
              v177 = (char *)*(id *)(v167 + 8 * v171 - 8);
              swift_unknownObjectRelease();
              *(char **)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x88)) = v177;

              if (v176)
              {
LABEL_78:
                memcpy(v266, v258, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v269);
                v172 = v269[0];
                memcpy(v266, v256, 0x188uLL);
                NavigationState.StackContent.animationSeed.getter(v265);
                v175 = v172 != -1 && LODWORD(v265[0]) != -1 && v172 == LODWORD(v265[0]);
LABEL_90:
                v178 = v259;
                specialized NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(v259, (uint64_t)v276, v175, v255, v252 & 1);
                v179 = objc_msgSend(v178, sel_transitionCoordinator);
                if (v179)
                {
                  v180 = v179;
                  v181 = v175 ^ 1;
                  if (v75 < 1)
                    v181 = 1;
                  if ((v181 & 1) == 0)
                  {
                    v273 = 1;
                    v182 = swift_allocObject();
                    swift_unknownObjectWeakInit();
                    v266[4] = (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
                    v266[5] = v182;
                    v266[0] = MEMORY[0x1E0C809B0];
                    v266[1] = 1107296256;
                    v266[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
                    v266[3] = (uint64_t)&block_descriptor_49_1;
                    v183 = _Block_copy(v266);
                    swift_release();
                    objc_msgSend(v180, sel_animateAlongsideTransition_completion_, 0, v183);
                    _Block_release(v183);
                  }
LABEL_180:
                  swift_unknownObjectRelease();
                }
                goto LABEL_182;
              }
LABEL_89:
              v175 = 0;
              goto LABEL_90;
            }
          }
          __break(1u);
          goto LABEL_227;
        }
      }
      else
      {
        if (!v162)
        {
LABEL_206:
          if ((uint64_t)v33 >= v161)
            goto LABEL_75;
          __break(1u);
          goto LABEL_208;
        }
        if (v162 == 2)
          goto LABEL_75;
        __break(1u);
      }
      if (v162 == 2 && !v161)
        goto LABEL_75;
      __break(1u);
LABEL_194:
      if (!v162)
        goto LABEL_214;
      if (v162 == 2)
        goto LABEL_135;
      __break(1u);
LABEL_197:
      if (!v162)
        goto LABEL_216;
      if (v162 == 2)
        goto LABEL_149;
      __break(1u);
LABEL_200:
      if (v162 == 2 && !v161)
        goto LABEL_135;
      __break(1u);
LABEL_203:
      if (v162 == 2 && !v161)
        goto LABEL_149;
      __break(1u);
      goto LABEL_206;
    }
    v251 = (int)v33;
    outlined init with copy of NavigationAuthority((uint64_t)v257 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v257) + 0x68), (uint64_t)v277);
    v252 = NavigationAuthority.controllerCache.getter();
    outlined destroy of NavigationAuthority((uint64_t)v277);
    v111 = v253[2];
    if (!v111)
      goto LABEL_249;
    v112 = *v253;
    v113 = v253[1];
    v114 = (uint64_t)v256;
    outlined init with take of NavigationState.Base(v256, v267);
    v115 = (_QWORD *)swift_allocObject();
    v115[2] = v112;
    v115[3] = v113;
    v115[4] = v111;
    outlined init with take of NavigationState.Base(v267, v268);
    v268[49] = partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:);
    v268[50] = v115;
    v268[51] = v111;
    memcpy(v278, v268, sizeof(v278));
    outlined retain of NavigationState.Base(v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v112, v113, v111);
    outlined retain of NavigationState.Base(v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
    outlined copy of NavigationStrategy_Phone?(v112, v113, v111);
    swift_bridgeObjectRetain();
    specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()();
    swift_bridgeObjectRelease();
    outlined retain of NavigationState.Base(v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    outlined consume of RichTextAttributeResolver?(v112, v113, v111);
    v116 = memcpy(v269, v268, sizeof(v269));
    v94 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    v270 = closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:);
    v271 = 0;
    if (v26 < 0)
      goto LABEL_231;
    v117 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v116);
    v121 = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(0, 1, 0, 2, -v26, v117, v118 & 1, v119, v120);
    if (v124 == -1)
    {
      v221 = outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
      v95 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v221);
      v33 = v222;
      LOBYTE(v13) = v223;
      v96 = v224 & 1;
      v121 = outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
    }
    else
    {
      v95 = v121;
      v33 = v123;
      LOBYTE(v13) = v124;
      v96 = v122 & 1;
    }
    v225 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v121);
    if ((v226 & 1) != 0)
      goto LABEL_162;
    if ((v96 & 1) != 0)
      goto LABEL_163;
    if (v95 < v225)
      goto LABEL_242;
    if (v225 < v95)
      goto LABEL_163;
    if ((_BYTE)v13)
      break;
LABEL_208:
    if (v162)
    {
      if (v162 == 2)
        goto LABEL_163;
      __break(1u);
      goto LABEL_211;
    }
LABEL_218:
    if ((uint64_t)v33 >= v161)
      goto LABEL_163;
    __break(1u);
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
LABEL_222:
    swift_bridgeObjectRetain();
    v107 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 != 1)
  {
LABEL_211:
    if (v162 == 2 && !v161)
      goto LABEL_163;
    __break(1u);
LABEL_214:
    if (v95 >= v161)
      goto LABEL_135;
    __break(1u);
LABEL_216:
    if (v95 >= v161)
      goto LABEL_149;
    __break(1u);
    goto LABEL_218;
  }
  if (v162 == 1 && (uint64_t)v33 < v161)
  {
    __break(1u);
LABEL_162:
    if ((v96 & 1) == 0)
      goto LABEL_239;
  }
LABEL_163:
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v268);
  outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>((uint64_t)v269);
  v264 = v96;
  v263 = 1;
  memcpy((char *)v265 + 7, v268, 0x1A0uLL);
  v266[0] = v95;
  LOBYTE(v266[1]) = v96;
  v266[2] = (uint64_t)v33;
  LOBYTE(v266[3]) = (_BYTE)v13;
  v266[4] = 0;
  LOBYTE(v266[5]) = 1;
  v266[6] = 0;
  LOBYTE(v266[7]) = 2;
  memcpy((char *)&v266[7] + 1, v265, 0x1A7uLL);
  v266[60] = (uint64_t)v94;
  v266[61] = 0;
  memcpy(v277, v266, sizeof(v277));
  specialized NavigationHostingControllerCache_UIKit.eject<A>(at:)((uint64_t)v277, (uint64_t)&unk_1E1B4DC20, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply);
  swift_release();
  outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>((uint64_t)v266);
  v227 = objc_msgSend(v259, v41[344]);
  v228 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized BidirectionalCollection.dropLast(_:)(v26, v228);
  v230 = v229;
  v232 = v231;
  v234 = v233;
  swift_bridgeObjectRelease();
  v235 = v234 >> 1;
  if (v232 == v234 >> 1)
    goto LABEL_250;
  v41 = (char **)v257;
  v236 = v251;
  if (v235 <= v232)
  {
LABEL_232:
    __break(1u);
    goto LABEL_233;
  }
  v193 = (char *)*(id *)(v230 + 8 * v235 - 8);
  swift_unknownObjectRelease();
  *(char **)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x88)) = v193;
  if (v236)
  {
    memcpy(v261, v258, sizeof(v261));
    NavigationState.StackContent.animationSeed.getter(&v262);
    v237 = v262;
    memcpy(v261, v256, sizeof(v261));
    NavigationState.StackContent.animationSeed.getter(&v260);
    v240 = v237 != -1 && (_DWORD)v260 != -1 && v237 == (_DWORD)v260;
  }
  else
  {
    v240 = 0;
  }
  v241 = v259;

  specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v241, v276, v255);
  v242 = objc_msgSend(v241, sel_transitionCoordinator);
  if (v242)
  {
    v243 = v242;
    if (v240)
    {
      v273 = 1;
      v244 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v261[4] = partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:);
      v261[5] = v244;
      v261[0] = MEMORY[0x1E0C809B0];
      v261[1] = 1107296256;
      v261[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      v261[3] = &block_descriptor_62;
      v245 = _Block_copy(v261);
      swift_release();
      objc_msgSend(v243, sel_animateAlongsideTransition_completion_, 0, v245);
      _Block_release(v245);
    }

    goto LABEL_180;
  }
LABEL_181:

LABEL_182:
  if (v273 == 1)
  {
    *((_BYTE *)v41 + v250) = 0;
    *(char **)((char *)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x88)) = 0;
  }
  v209 = v254;
  if (v254)
  {
    outlined init with copy of NavigationAuthority((uint64_t)v41 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v41) + 0x68), (uint64_t)v269);
    NavigationAuthority.controllerCache.getter();
    v210 = v269;
LABEL_186:
    outlined destroy of NavigationAuthority((uint64_t)v210);
    specialized NavigationHostingControllerCache_UIKit.updateUnusedRoots(_:transaction:)(v209);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v275);
}

uint64_t specialized UINavigationController.visitDescendents<A>(matchingType:visitor:)(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  void *v2;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = objc_msgSend(v2, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
    {
LABEL_3:
      v8 = 4;
      do
      {
        if ((v6 & 0xC000000000000001) != 0)
          v11 = (id)MEMORY[0x18D75E3BC](v8 - 4, v6);
        else
          v11 = *(id *)(v6 + 8 * v8);
        v12 = v11;
        v13 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
        {
          __break(1u);
          goto LABEL_17;
        }
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
        v14 = swift_dynamicCastClass();
        if (v14)
        {
          v16 = v14;
          v9 = a1(&v16);
        }
        else
        {
          objc_opt_self();
          if (!swift_dynamicCastObjCClass())
          {

            goto LABEL_6;
          }
          v9 = specialized UINavigationController.visitDescendents<A>(matchingType:visitor:)(a1, a2);
        }
        v10 = v9;

        if ((v10 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
LABEL_6:
        ++v8;
      }
      while (v13 != v7);
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t closure #1 in previousPositions #1 <A>() in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *(_BYTE *)a2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 8) = v2;
  return result;
}

uint64_t specialized Collection.dropLast(_:)@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unsigned __int8 v37;

  if (result < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v3 = result;
  result = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(result);
  if ((v5 & 1) == 0)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      result = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(result, v7 & 1);
      v7 = v10 & 1;
      ++v6;
      if ((v10 & 1) != 0 && v9 >= 2u)
        goto LABEL_9;
    }
    __break(1u);
    goto LABEL_19;
  }
  v8 = 0;
LABEL_9:
  v11 = v8 - v3;
  if (__OFSUB__(v8, v3))
    goto LABEL_20;
  v12 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(result);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  if (v11 >= 1)
  {
    v20 = v11 & ~(v11 >> 63);
    while ((v19 & 1) == 0 || v17 <= 1u)
    {
      v12 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v13, v19 & 1);
      v13 = v12;
      v15 = v21;
      v17 = v22;
      v19 = v23 & 1;
      if (!--v20)
        goto LABEL_16;
    }
    v13 = 0;
    v15 = 0;
    v17 = 2;
    v19 = 1;
  }
LABEL_16:
  v24 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v12);
  v26 = v25;
  v28 = v27;
  v30 = v29 & 1;
  result = specialized static Comparable.<= infix(_:_:)(v24, v29 & 1, v25, v27, v13, v19, v15, v17);
  if ((result & 1) != 0)
  {
    *(_QWORD *)&v31 = v24;
    BYTE8(v31) = v30;
    v32 = v26;
    v33 = v28;
    v34 = v13;
    v35 = v19;
    v36 = v15;
    v37 = v17;
    specialized Collection<>.subscript.getter(&v31, a2);
    return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(v2);
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;

  v3 = (_QWORD *)((char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70));
  result = swift_beginAccess();
  v5 = v3[2];
  if (v5)
  {
    v8 = v3;
    v6 = *v3;
    v7 = v8[1];
    v9 = *a2;
    outlined copy of NavigationStrategy_Phone?(v6, v7, v5);
    v10 = specialized NavigationStrategy.viewControllerCommon(for:entering:canPop:isRoot:)(v9, 1, v6, v7);
    outlined consume of RichTextAttributeResolver?(v6, v7, v5);
    return (uint64_t)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(char a1, void *a2, _BYTE *a3)
{
  return specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(a1, a2, a3, (uint64_t)&unk_1E1B4E030, (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:), (uint64_t)&block_descriptor_327);
}

{
  return specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(a1, a2, a3, (uint64_t)&unk_1E1B4DC98, (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:), (uint64_t)&block_descriptor_225);
}

{
  return specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(a1, a2, a3, (uint64_t)&unk_1E1B4D928, (uint64_t)partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:), (uint64_t)&block_descriptor_119_0);
}

id specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(char a1, id a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id result;
  void *v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[6];

  result = objc_msgSend(a2, sel_transitionCoordinator);
  if (result)
  {
    v11 = result;
    if ((a1 & 1) != 0)
    {
      *a3 = 1;
      v12 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v14[4] = a5;
      v14[5] = v12;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1107296256;
      v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      v14[3] = a6;
      v13 = _Block_copy(v14);
      swift_release();
      objc_msgSend(v11, sel_animateAlongsideTransition_completion_, 0, v13);
      _Block_release(v13);
      return (id)swift_unknownObjectRelease();
    }
    else
    {
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t specialized NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(void *a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned __int8 v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[3];
  char v31;
  uint64_t v32;
  void *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t *v39;
  _BYTE v40[24];
  uint64_t v41;
  char v42;

  v6 = v5;
  v12 = objc_msgSend(a1, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((a3 & 1) != 0)
  {
    if (v13 >> 62)
      goto LABEL_16;
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      if (v14 != 1)
        break;
      v15 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
      v16 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v15);
      if ((v17 & 1) != 0)
      {
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
        break;
      }
      v18 = 0;
      v19 = 0;
      while (1)
      {
        v20 = v18 + 1;
        if (__OFADD__(v18, 1))
          break;
        v16 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v16, v19 & 1);
        v19 = v22 & 1;
        ++v18;
        if ((v22 & 1) != 0 && v21 >= 2u)
        {
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
          v23 = v20 != 1;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    v23 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = 0;
  }
LABEL_14:
  v41 = 0;
  v42 = 1;
  outlined init with copy of NavigationAuthority((uint64_t)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x68), (uint64_t)v40);
  NavigationAuthority.controllerCache.getter();
  v24 = outlined destroy of NavigationAuthority((uint64_t)v40);
  MEMORY[0x1E0C80A78](v24, v25);
  v35 = a2;
  v36 = a4;
  v37 = v6;
  v38 = a1;
  v39 = &v41;
  MEMORY[0x1E0C80A78](v26, v27);
  v30[2] = v6;
  v31 = a5 & 1;
  v32 = a4;
  v33 = a1;
  v34 = v23;
  specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)((unint64_t)a1, 0, (void (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), v28, partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), (uint64_t)v30);
  return swift_release();
}

{
  _QWORD *v5;
  _QWORD *v6;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned __int8 v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[3];
  char v31;
  uint64_t v32;
  void *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t *v39;
  _BYTE v40[24];
  uint64_t v41;
  char v42;

  v6 = v5;
  v12 = objc_msgSend(a1, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((a3 & 1) != 0)
  {
    if (v13 >> 62)
      goto LABEL_16;
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      if (v14 != 1)
        break;
      v15 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
      v16 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v15);
      if ((v17 & 1) != 0)
      {
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
        break;
      }
      v18 = 0;
      v19 = 0;
      while (1)
      {
        v20 = v18 + 1;
        if (__OFADD__(v18, 1))
          break;
        v16 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v16, v19 & 1);
        v19 = v22 & 1;
        ++v18;
        if ((v22 & 1) != 0 && v21 >= 2u)
        {
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
          v23 = v20 != 1;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    v23 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = 0;
  }
LABEL_14:
  v41 = 0;
  v42 = 1;
  outlined init with copy of NavigationAuthority((uint64_t)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x68), (uint64_t)v40);
  NavigationAuthority.controllerCache.getter();
  v24 = outlined destroy of NavigationAuthority((uint64_t)v40);
  MEMORY[0x1E0C80A78](v24, v25);
  v35 = a2;
  v36 = a4;
  v37 = v6;
  v38 = a1;
  v39 = &v41;
  MEMORY[0x1E0C80A78](v26, v27);
  v30[2] = v6;
  v31 = a5 & 1;
  v32 = a4;
  v33 = a1;
  v34 = v23;
  specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)((unint64_t)a1, 0, (void (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), v28, partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), (uint64_t)v30);
  return swift_release();
}

{
  _QWORD *v5;
  _QWORD *v6;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned __int8 v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[3];
  char v31;
  uint64_t v32;
  void *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t *v39;
  _BYTE v40[24];
  uint64_t v41;
  char v42;

  v6 = v5;
  v12 = objc_msgSend(a1, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((a3 & 1) != 0)
  {
    if (v13 >> 62)
      goto LABEL_16;
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      if (v14 != 1)
        break;
      v15 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
      v16 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v15);
      if ((v17 & 1) != 0)
      {
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
        break;
      }
      v18 = 0;
      v19 = 0;
      while (1)
      {
        v20 = v18 + 1;
        if (__OFADD__(v18, 1))
          break;
        v16 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v16, v19 & 1);
        v19 = v22 & 1;
        ++v18;
        if ((v22 & 1) != 0 && v21 >= 2u)
        {
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(a2);
          v23 = v20 != 1;
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    v23 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = 0;
  }
LABEL_14:
  v41 = 0;
  v42 = 1;
  outlined init with copy of NavigationAuthority((uint64_t)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x68), (uint64_t)v40);
  NavigationAuthority.controllerCache.getter();
  v24 = outlined destroy of NavigationAuthority((uint64_t)v40);
  MEMORY[0x1E0C80A78](v24, v25);
  v35 = a2;
  v36 = a4;
  v37 = v6;
  v38 = a1;
  v39 = &v41;
  MEMORY[0x1E0C80A78](v26, v27);
  v30[2] = v6;
  v31 = a5 & 1;
  v32 = a4;
  v33 = a1;
  v34 = v23;
  specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)((unint64_t)a1, 0, (void (*)(uint64_t *))partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), v28, partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), (uint64_t)v30);
  return swift_release();
}

uint64_t specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1E1B4E378, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply, (void (*)(void))partial apply for closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:), (uint64_t (*)(uint64_t))partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:));
}

{
  return specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1E1B4DFE0, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply, (void (*)(void))partial apply for closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:), (uint64_t (*)(uint64_t))partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:));
}

{
  return specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1E1B4DC48, (uint64_t)closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply, (void (*)(void))partial apply for closure #1 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:), (uint64_t (*)(uint64_t))partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:));
}

uint64_t specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, void (*a9)(void), uint64_t (*a10)(uint64_t))
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  int v19;
  int v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  uint64_t result;
  _QWORD v64[6];
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  void (*v76)(void);
  uint64_t (*v77)(uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92[8];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[2];
  char v97;
  uint64_t v98;
  _OWORD v99[26];
  unint64_t v100;
  char v101;
  _BYTE v102[7];
  unint64_t v103;
  char v104;
  __int128 v105;
  _OWORD v106[3];
  char v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  char v117;
  char v118;
  char v119;
  _BYTE v120[416];
  _QWORD v121[52];
  _QWORD v122[2];
  char v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  _BYTE v127[304];
  uint64_t v128[38];
  _QWORD v129[8];
  __int16 v130;
  _BYTE v131[392];
  _BYTE v132[416];

  v71 = a7;
  v72 = a8;
  v68 = a6;
  v80 = a4;
  v81 = a5;
  v78 = a1;
  v79 = a3;
  v77 = a10;
  v76 = a9;
  memcpy(v120, a2, sizeof(v120));
  v11 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)a2);
  v87 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v11);
  v13 = v12;
  v15 = v14;
  v16 = 0;
  v18 = v17 & 1;
  v132[392] = v17 & 1;
  v119 = v17 & 1;
  v118 = 0;
  v69 = (char *)v106 + 8;
  v70 = &v98;
  v19 = 3;
  while (1)
  {
    if ((v18 & 1) != 0 && v15 >= 2u)
    {
      LOBYTE(v15) = 2;
LABEL_26:
      memcpy(v99, v120, sizeof(v99));
      v100 = v87;
      v101 = v119;
      *(_DWORD *)v102 = *(_DWORD *)v92;
      *(_DWORD *)&v102[3] = *(_DWORD *)&v92[3];
      v103 = v13;
      v104 = v15;
      return outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v99);
    }
    memcpy(v121, v120, sizeof(v121));
    outlined init with take of NavigationState.Base(v121, v131);
    outlined init with take of NavigationState.Base(v131, v132);
    v20 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v132);
    v85 = v19;
    v86 = v18;
    if (v20)
    {
      v82 = v16;
      LODWORD(v83) = v15;
      v84 = v13;
      if (v20 == 1)
      {
        v21 = (const void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v132);
        memcpy(v99, v21, 0x188uLL);
        memcpy(v127, v21, 0x12BuLL);
        v22 = *(_QWORD *)&v99[19];
        v75 = v99[23];
        v23 = *(_QWORD *)&v99[24];
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v121);
        outlined retain of NavigationState.Base((uint64_t)v131, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        v66 = v23;
        v65 = v75;
        outlined consume of ResolvedNavigationDestinations?(v22);
        v24 = v86;
        if (v86 & 1 | (v87 != 0))
          goto LABEL_33;
        specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(0, 0, v84, v83, (uint64_t)v127, 0, (uint64_t)&v105);
        outlined release of NavigationColumnState((uint64_t *)v99);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v121);
        v16 = v82;
      }
      else
      {
        v39 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v132);
        v40 = *(_QWORD *)v39;
        v41 = *(_QWORD *)(v39 + 8);
        v42 = *(_QWORD *)(v39 + 16);
        v43 = *(_QWORD *)(v39 + 24);
        v44 = *(_QWORD *)(v39 + 32);
        v45 = *(_QWORD *)(v39 + 40);
        v47 = *(_QWORD *)(v39 + 48);
        v46 = *(_QWORD *)(v39 + 56);
        v48 = *(_QWORD *)(v39 + 64);
        v49 = *(unsigned __int16 *)(v39 + 72);
        v129[0] = v41;
        v129[1] = v42;
        v129[2] = v43;
        v129[3] = v44;
        v129[4] = v45;
        v129[5] = v47;
        v129[6] = v46;
        v129[7] = v48;
        v130 = v49;
        if ((v86 & 1) != 0)
          goto LABEL_32;
        v50 = v87;
        if ((v87 & 0x8000000000000000) != 0)
          goto LABEL_29;
        if (*(_QWORD *)(v40 + 16) < v87)
          goto LABEL_30;
        v73 = v49;
        v74 = v48;
        *(_QWORD *)&v75 = v46;
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v121);
        outlined retain of NavigationState.Base((uint64_t)v131, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        v51 = swift_bridgeObjectRetain();
        v52 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v51, (uint64_t)v129, 0, (2 * v50) | 1);
        swift_bridgeObjectRelease();
        if (v50 >= *(_QWORD *)(v40 + 16))
          goto LABEL_31;
        memcpy(v128, (const void *)(v40 + 304 * v50 + 32), 0x12BuLL);
        outlined retain of NavigationColumnState(v128);
        swift_bridgeObjectRelease();
        specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(v50, 0, v84, v83, (uint64_t)v128, v52, (uint64_t)&v105);
        outlined copy of NavigationSplitViewState?(v41, v42, v43, v44, v45, v47, v75, v74, v73, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        outlined release of NavigationColumnState(v128);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v121);
        v16 = v82;
        v24 = v86;
      }
    }
    else
    {
      v25 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v132);
      v26 = *(_QWORD *)v25;
      v27 = *(unsigned __int8 *)(v25 + 8);
      v28 = *(_QWORD *)(v25 + 16);
      v29 = v121[51];
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v121);
      v30 = static HorizontalAlignment.center.getter();
      if (!*(_QWORD *)(v29 + 16))
        goto LABEL_28;
      v31 = v30;
      outlined init with copy of _VariadicView_Children(v29 + 32, (uint64_t)v70);
      v96[0] = v31;
      v96[1] = 0;
      v97 = 1;
      v122[0] = 0;
      v122[1] = v26;
      v123 = v27;
      v124 = v28;
      v125 = 0;
      v126 = (_DWORD)v27 == 3;
      *(_QWORD *)&v83 = v121[49];
      v32 = v27 >= 3 ? 3 : v27;
      LODWORD(v84) = v32;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v96, (uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
      *(_QWORD *)&v99[5] = 0;
      *((_QWORD *)&v99[5] + 1) = v26;
      *(_QWORD *)&v99[6] = v27;
      *((_QWORD *)&v99[6] + 1) = v28;
      *(_QWORD *)&v99[7] = 0;
      BYTE8(v99[7]) = (_DWORD)v27 == 3;
      BYTE9(v99[7]) = 1;
      v33 = swift_allocObject();
      *(_BYTE *)(v33 + 16) = 1;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v99, (uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
      v94 = v72;
      v95 = v33;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
      ((void (*)(uint64_t *__return_ptr, _QWORD *))v83)(&v88, v122);
      v24 = v86;
      v34 = v88;
      v83 = v89;
      v35 = v90;
      v36 = v91;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v92, (uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
      LOBYTE(v99[9]) = v34;
      *(_OWORD *)((char *)&v99[9] + 8) = v83;
      *((_QWORD *)&v99[10] + 1) = v35;
      *(_QWORD *)&v99[11] = v36;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
      type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
      lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>);
      v37 = AnyView.init<A>(_:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v96, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
      v38 = v69;
      *((_QWORD *)v69 + 4) = 0;
      *v38 = 0u;
      v38[1] = 0u;
      v107 = 2;
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v121);
      *(_QWORD *)&v105 = v37;
      BYTE8(v105) = v84;
      *(_QWORD *)&v106[0] = 0;
    }
    v53 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v87, v24 & 1);
    v87 = v53;
    v119 = v54 & 1;
    v110 = v106[1];
    v111 = v106[2];
    v112 = v107;
    v108 = v105;
    v109 = v106[0];
    if (__OFADD__(v16, 1))
      break;
    v18 = v54;
    v13 = v55;
    v15 = v56;
    v115 = v110;
    v116 = v111;
    v117 = v112;
    v114 = v109;
    v113 = v108;
    v99[0] = v108;
    v99[1] = v109;
    v99[2] = v110;
    v99[3] = v111;
    LOBYTE(v99[4]) = v112;
    v92[0] = BYTE8(v108);
    v93 = v109;
    MEMORY[0x1E0C80A78](v53, v54);
    v66 = (uint64_t)v99;
    v67 = v79;
    MEMORY[0x1E0C80A78](v57, v58);
    v64[2] = v80;
    v64[3] = v59;
    v64[4] = v81;
    v64[5] = v16;
    NavigationHostingControllerCache_UIKit.Source.ensureViewController(at:forPushing:configureExisting:makeNew:)(v92, 0, v76, v60, v77, (void (*)(void))v64);
    v61 = BYTE8(v99[0]);
    if (v85 || BYTE8(v99[0]) == 3)
    {
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v99);
    }
    else
    {
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v99);
      if (v61 == 2)
      {
        v62 = v68;
        *v68 = v16;
        *((_BYTE *)v62 + 8) = 0;
      }
    }
    ++v16;
    v19 = v61;
    if ((v118 & 1) != 0)
      goto LABEL_26;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  LODWORD(v67) = 0;
  v66 = 879;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized UIHostingController.setRootView(_:transaction:)(v0);
  return swift_release();
}

uint64_t specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;

  v6 = (_QWORD *)((char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70));
  result = swift_beginAccess();
  v8 = v6[2];
  if (v8)
  {
    v11 = v6;
    v9 = *v6;
    v10 = v11[1];
    v12 = *a2;
    outlined copy of NavigationStrategy_Phone?(v9, v10, v8);
    v13 = specialized NavigationStrategy.viewControllerCommon(for:entering:canPop:isRoot:)(v12, a4 > 0, v9, v10);
    outlined consume of RichTextAttributeResolver?(v9, v10, v8);
    return (uint64_t)v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(unint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, UINavigationController *a5, char a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  int64_t v36;
  id v37;
  char *v38;
  void *v39;
  uint64_t v40;
  Class isa;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  void **v57;
  uint64_t *v58;
  SEL *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  _QWORD *v65;
  id v66;
  char v67;
  _QWORD *v68;
  _BYTE *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  char v90;
  char v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  char v95;
  char v96;

  v85 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_82;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v87 = v10;
    if (v10)
    {
      v7 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) == 0)
      {
        if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          v34 = (id)MEMORY[0x18D75E3BC](0, a1);
          goto LABEL_35;
        }
        v12 = *(id *)(a1 + 32);
LABEL_7:
        v13 = v12;
        swift_bridgeObjectRelease();
        v6 = v13;
        v10 = (uint64_t)a2;
        specialized NavigationStackCoordinator.configureAsRoot(_:transparentBackground:)((_QWORD *)v6, a3 & 1);

        if (v87 >= 1)
        {
          swift_bridgeObjectRetain();
          v14 = 0;
          while (1)
          {
            v19 = v7 ? (char *)MEMORY[0x18D75E3BC](v14, a1) : (char *)*(id *)(a1 + 8 * v14 + 32);
            v20 = v19;
            v21 = direct field offset for UIHostingController.host;
            v22 = objc_msgSend(*(id *)&v19[direct field offset for UIHostingController.host], sel_window, v77);
            if (!v22)
              break;

            v15 = *(_QWORD **)&v20[v21];
            v16 = (_QWORD *)((char *)v15 + *(_QWORD *)((*v11 & *v15) + 0x118));
            v17 = *v16;
            *(_OWORD *)v16 = xmmword_187BFE310;
            v18 = v15;
            outlined consume of EnvironmentValues?(v17);
            LOWORD(v92) = 2;
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
            lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
            ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

LABEL_10:
            if (v87 == ++v14)
              goto LABEL_24;
          }
          v23 = *(id *)&v20[v21];
          v24 = objc_msgSend(v20, sel_traitCollection);
          v25 = *(_QWORD *)((*v11 & *v23) + 0x128);
          v26 = *(id *)((char *)v23 + v25);
          *(_QWORD *)((char *)v23 + v25) = v24;
          v27 = v24;
          v28 = v27;
          if (v24)
          {
            if (v26)
              v29 = v27 == v26;
            else
              v29 = 0;
            if (v29)
              goto LABEL_21;
          }
          else if (!v26)
          {
            goto LABEL_21;
          }
          LOWORD(v92) = 2;
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
LABEL_21:

          v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          goto LABEL_10;
        }
        goto LABEL_86;
      }
LABEL_84:
      v12 = (id)MEMORY[0x18D75E3BC](0, a1);
      goto LABEL_7;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    if (v85)
    {
      swift_bridgeObjectRetain();
      a3 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      a3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    if (__OFSUB__(a3, 1))
    {
      __break(1u);
      goto LABEL_84;
    }
    v78 = a3;
    specialized BidirectionalCollection.suffix(_:)(a3 - 1, a1);
    v10 = v30;
    a3 = v31;
    v6 = v32;
    swift_bridgeObjectRelease();
    v96 = 0;
    if (v85)
    {
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter())
        goto LABEL_37;
    }
    else
    {
      v33 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v33)
        goto LABEL_37;
    }
    v83 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0)
      goto LABEL_87;
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      swift_bridgeObjectRetain();
      v37 = (id)MEMORY[0x18D75E3BC](a3, a1);
      swift_bridgeObjectRelease();
LABEL_43:
      v38 = (char *)a2 + *(_QWORD *)((*v11 & *a2) + 0x70);
      swift_beginAccess();
      if (!*((_QWORD *)v38 + 2))
        goto LABEL_94;
      v39 = (void *)*((_QWORD *)v38 + 1);
      swift_retain();
      v40 = swift_retain();
      specialized UIHostingController.prepareNavigationBar(in:navigationController:isRoot:)(v40, v39, a5, v78 == 1);
      swift_release();
      swift_release();

      goto LABEL_45;
    }
    v34 = *(id *)(a1 + 32);
LABEL_35:
    v35 = v34;
    v36 = v6 >> 1;
    v82 = (v6 >> 1) - a3;
    if (v6 >> 1 == a3)
      break;
    v49 = 0;
    v6 = a1 & 0xFFFFFFFFFFFFFF8;
    if ((a1 & 0x8000000000000000) != 0)
      v50 = a1;
    else
      v50 = a1 & 0xFFFFFFFFFFFFFF8;
    v77 = v50;
    v81 = v10 + 8 * a3;
    while ((uint64_t)(a3 + v49) < v36)
    {
      v51 = *(id *)(v81 + 8 * v49);
      v52 = -[UINavigationController splitViewController](a5, sel_splitViewController, v77);
      v92 = xmmword_187BF9F90;
      v93 = 0;
      v94 = 0;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();

      v7 = 2;
      v95 = 2;
      v53 = (uint64_t)v51 + direct field offset for UIHostingController.overrides;
      swift_beginAccess();
      outlined assign with take of HostingControllerOverrides((uint64_t)&v92, v53);
      swift_endAccess();
      specialized UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(v35, 0);
      v88 = xmmword_187BF9F90;
      v89 = 0;
      v90 = 0;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      v91 = 2;
      outlined init with take of HostingControllerOverrides((uint64_t)&v88, (uint64_t)&v92);
      swift_beginAccess();
      outlined assign with take of HostingControllerOverrides((uint64_t)&v92, v53);
      swift_endAccess();

      if ((v96 & 1) != 0)
        goto LABEL_37;
      if (v85)
      {
        swift_bridgeObjectRetain();
        v54 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v54 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      v55 = v49 + 1;
      if (v49 + 1 == v54)
        goto LABEL_37;
      if (v83)
      {
        v56 = (id)MEMORY[0x18D75E3BC](v49 + 1, a1);
      }
      else
      {
        if (v55 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_80;
        v56 = *(id *)(a1 + 8 * v49 + 40);
      }
      v35 = v56;
      if (__OFADD__(v55, 1))
        goto LABEL_81;
      if (v82 == ++v49)
        goto LABEL_36;
    }
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_36:

LABEL_37:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (!v87)
  {
LABEL_45:
    if (v85)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    -[UINavigationController setViewControllers:animated:](a5, sel_setViewControllers_animated_, isa, a6 & 1);

    if ((a6 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      specialized Collection.dropLast(_:)(1, a1);
      v43 = v42;
      v45 = v44;
      v47 = v46;
      swift_bridgeObjectRelease();
      v48 = (v47 >> 1) - v45;
      if (v47 >> 1 != v45)
      {
        if ((uint64_t)(v47 >> 1) <= v45)
          goto LABEL_93;
        v57 = (void **)(v43 + 8 * v45);
        v58 = &direct field offset for UIHostingController.host;
        v59 = (SEL *)&_OBJC___CLASS_PROP_LIST_NSSecureCoding;
        v86 = MEMORY[0x1E0DEE9C0] + 8;
        do
        {
          v62 = *v57;
          v63 = *(void **)((char *)*v57 + *v58);
          v96 = 0;
          v64 = v62;
          v65 = v63;
          v66 = objc_msgSend(v65, v59[289]);

          if (v66)
          {
            v67 = 2;
          }
          else
          {
            v96 = 1;
            v67 = 3;
          }
          v68 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          v69 = (char *)v65 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v65) + 0xF8);
          v60 = swift_beginAccess();
          if (*v69 == 1)
          {
            v70 = v58;
            v96 = v67;
            MEMORY[0x1E0C80A78](v60, v61);
            type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for ()?, v86, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            v71 = static Update.locked<A>(_:)();
            v73 = *(_QWORD *)((*v68 & *v65) + 0x148);
            v74 = *(void **)((char *)v65 + v73);
            if (v74)
            {
              MEMORY[0x1E0C80A78](v71, v72);
              v76 = v75;
              static Update.locked<A>(_:)();

              v74 = *(void **)((char *)v65 + v73);
            }
            v58 = v70;
            *(_QWORD *)((char *)v65 + v73) = 0;

            v59 = (SEL *)&_OBJC___CLASS_PROP_LIST_NSSecureCoding;
          }
          MEMORY[0x1E0C80A78](v60, v61);
          static Update.ensure<A>(_:)();

          ++v57;
          --v48;
        }
        while (v48);
      }
      swift_unknownObjectRelease();
    }
    return;
  }
  a3 = v87 - 1;
  if (__OFSUB__(v87, 1))
    goto LABEL_89;
  if ((a1 & 0xC000000000000001) != 0)
    goto LABEL_90;
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (a3 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v37 = *(id *)(a1 + 8 * a3 + 32);
    goto LABEL_43;
  }
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
}

void specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (_QWORD *)MEMORY[0x18D760234](v2);
  if (v3)
  {
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    *((_BYTE *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x80)) = 0;
    *(_QWORD *)((char *)v3 + *(_QWORD *)((*v4 & *v3) + 0x88)) = 0;

  }
}

Swift::Void __swiftcall NavigationStackCoordinator.navigationController(_:willShow:animated:)(UINavigationController *_, UIViewController *willShow, Swift::Bool animated)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  UINavigationController *v20;
  UIViewController *v21;
  BOOL v22;
  char v23;
  NSArray *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSArray *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  __int128 v44[8];
  uint64_t v45;
  _BYTE v46[392];
  _BYTE v47[24];
  _BYTE __src[392];
  _QWORD __dst[49];
  _QWORD aBlock[51];

  v4 = v3;
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v3);
  if (!animated)
    goto LABEL_8;
  v9 = -[UINavigationController transitionCoordinator](_, sel_transitionCoordinator);
  if (!v9)
  {
    v6 = (_QWORD *)(*v5 & *v3);
LABEL_8:
    *((_BYTE *)v3 + v6[18]) = 0;
    return;
  }
  v10 = v9;
  v11 = *(_QWORD *)((*v5 & *v3) + 0x90);
  *((_BYTE *)v3 + v11) = 1;
  v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v13 = (_QWORD *)swift_allocObject();
  v14 = v6[10];
  v13[2] = v14;
  v15 = v6[11];
  v13[3] = v15;
  v13[4] = v12;
  aBlock[4] = partial apply for closure #1 in NavigationStackCoordinator.navigationController(_:willShow:animated:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  aBlock[3] = &block_descriptor_75;
  v16 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v10, sel_animateAlongsideTransition_completion_, 0, v16);
  _Block_release(v16);
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
LABEL_22:
    swift_unknownObjectRelease();
    return;
  }
  if (-[UINavigationController lastOperation](_, sel_lastOperation) == (id)1)
  {
    v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = v14;
    v18[3] = v15;
    v18[4] = v17;
    v18[5] = _;
    aBlock[4] = partial apply for closure #2 in NavigationStackCoordinator.navigationController(_:willShow:animated:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    aBlock[3] = &block_descriptor_19_1;
    v19 = _Block_copy(aBlock);
LABEL_6:
    v20 = _;
    swift_release();
    objc_msgSend(v10, sel_notifyWhenInteractionChangesUsingBlock_, v19);
    _Block_release(v19);
    goto LABEL_22;
  }
  v21 = *(UIViewController **)((char *)v4 + *(_QWORD *)((*v5 & *v4) + 0x88));
  if (v21)
    v22 = v21 == willShow;
  else
    v22 = 1;
  v23 = v22;
  v43 = v23;
  v24 = -[UINavigationController viewControllers](_, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  NavigationStackCoordinator.previousContent.getter(aBlock);
  memcpy(__dst, aBlock, sizeof(__dst));
  v27 = NavigationState.StackContent.count.getter();
  outlined retain of NavigationState.Base((uint64_t)aBlock, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  if (v26 >= v27 || *((_BYTE *)v4 + *(_QWORD *)((*v5 & *v4) + 0x80)) == 1 || (v43 & 1) == 0)
    goto LABEL_22;
  if (objc_msgSend(v10, sel_isInteractive))
  {
    v28 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v29 = (_QWORD *)swift_allocObject();
    v29[2] = v14;
    v29[3] = v15;
    v29[4] = v28;
    v29[5] = _;
    __dst[4] = partial apply for closure #3 in NavigationStackCoordinator.navigationController(_:willShow:animated:);
    __dst[5] = v29;
    __dst[0] = MEMORY[0x1E0C809B0];
    __dst[1] = 1107296256;
    __dst[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    __dst[3] = &block_descriptor_12_3;
    v19 = _Block_copy(__dst);
    goto LABEL_6;
  }
  v30 = -[UINavigationController viewControllers](_, sel_viewControllers);
  v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  NavigationStackCoordinator.previousContent.getter(__src);
  memcpy(__dst, __src, sizeof(__dst));
  v33 = NavigationState.StackContent.count.getter();
  outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  *((_BYTE *)v4 + v11) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v5 & *v4) + 0x78)) = 1;
  outlined init with copy of NavigationAuthority((uint64_t)v4 + *(_QWORD *)((*v5 & *v4) + 0x68), (uint64_t)v47);
  v34 = v33 - v32;
  if (__OFSUB__(v33, v32))
  {
    __break(1u);
  }
  else
  {
    NavigationStackCoordinator.previousContent.getter(__dst);
    memcpy(v46, __dst, sizeof(v46));
    v35 = NavigationState.StackContent.topKey.getter();
    v37 = v36;
    v39 = v38;
    outlined retain of NavigationState.Base((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    static Transaction.current.getter();
    static Transaction.current.getter();
    v40 = Transaction.disablesAnimations.getter();
    swift_release();
    if ((v40 & 1) != 0)
      v41 = 1;
    else
      v41 = Transaction.disablesAnimations.getter();
    static Transaction.current.getter();
    v42 = Transaction.animation.getter();
    swift_release();
    if (!v42)
      v42 = Transaction.animation.getter();
    swift_release();
    memset(&v46[8], 0, 56);
    v45 = v42;
    *(_QWORD *)v46 = v34;
    v46[64] = 9;
    *(_QWORD *)&v46[72] = v35;
    *(_QWORD *)&v46[80] = v37;
    *(_QWORD *)&v46[88] = v39;
    memset(&v46[96], 0, 24);
    v46[120] = v41 & 1;
    *(_QWORD *)&v46[128] = v42;
    v44[6] = 0u;
    v44[7] = *(_OWORD *)&v46[112];
    v44[2] = *(_OWORD *)&v46[32];
    v44[3] = 0uLL;
    v44[4] = *(_OWORD *)&v46[64];
    v44[5] = *(_OWORD *)&v46[80];
    v44[0] = *(_OWORD *)v46;
    v44[1] = *(_OWORD *)&v46[16];
    NavigationAuthority.enqueueRequest(_:)(v44);
    swift_unknownObjectRelease();
    outlined release of NavigationRequest((uint64_t)v46);
    outlined destroy of NavigationAuthority((uint64_t)v47);
  }
}

void closure #1 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  uint64_t *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (_QWORD *)MEMORY[0x18D760234](v2);
  if (v3)
  {
    v4 = v3;
    v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    *((_BYTE *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x90)) = 0;
    v6 = (_QWORD *)((char *)v3 + *(_QWORD *)((*v5 & *v3) + 0xA0));
    v7 = (void (*)(uint64_t))*v6;
    if (*v6)
    {
      v8 = swift_retain();
      v7(v8);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
      v9 = *v6;
    }
    else
    {
      v9 = 0;
    }
    *v6 = 0;
    v6[1] = 0;
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);

  }
}

void closure #2 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  __int128 v22[8];
  uint64_t v23;
  _BYTE v24[392];
  _BYTE v25[24];
  _BYTE __src[392];
  _BYTE __dst[392];

  v5 = a2 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v7 = (_QWORD *)v6;
    if (objc_msgSend(a1, sel_isCancelled))
    {
      v8 = objc_msgSend(a3, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        v10 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      NavigationStackCoordinator.previousContent.getter(__src);
      memcpy(__dst, __src, sizeof(__dst));
      v11 = NavigationState.StackContent.count.getter();
      outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
      v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      *((_BYTE *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x90)) = 0;
      *((_BYTE *)v7 + *(_QWORD *)((*v12 & *v7) + 0x78)) = 1;
      outlined init with copy of NavigationAuthority((uint64_t)v7 + *(_QWORD *)((*v12 & *v7) + 0x68), (uint64_t)v25);
      v13 = v11 - v10;
      if (__OFSUB__(v11, v10))
      {
        __break(1u);
      }
      else
      {
        NavigationStackCoordinator.previousContent.getter(__dst);
        memcpy(v24, __dst, sizeof(v24));
        v14 = NavigationState.StackContent.topKey.getter();
        v16 = v15;
        v18 = v17;
        outlined retain of NavigationState.Base((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
        static Transaction.current.getter();
        static Transaction.current.getter();
        v19 = Transaction.disablesAnimations.getter();
        swift_release();
        if ((v19 & 1) != 0)
          v20 = 1;
        else
          v20 = Transaction.disablesAnimations.getter();
        static Transaction.current.getter();
        v21 = Transaction.animation.getter();
        swift_release();
        if (!v21)
          v21 = Transaction.animation.getter();
        swift_release();
        memset(&v24[8], 0, 56);
        v23 = v21;
        *(_QWORD *)v24 = v13;
        v24[64] = 9;
        *(_QWORD *)&v24[72] = v14;
        *(_QWORD *)&v24[80] = v16;
        *(_QWORD *)&v24[88] = v18;
        memset(&v24[96], 0, 24);
        v24[120] = v20 & 1;
        *(_QWORD *)&v24[128] = v21;
        v22[6] = 0u;
        v22[7] = *(_OWORD *)&v24[112];
        v22[2] = *(_OWORD *)&v24[32];
        v22[3] = 0uLL;
        v22[4] = *(_OWORD *)&v24[64];
        v22[5] = *(_OWORD *)&v24[80];
        v22[0] = *(_OWORD *)v24;
        v22[1] = *(_OWORD *)&v24[16];
        NavigationAuthority.enqueueRequest(_:)(v22);

        outlined release of NavigationRequest((uint64_t)v24);
        outlined destroy of NavigationAuthority((uint64_t)v25);
      }
    }
    else
    {

    }
  }
}

void closure #3 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  __int128 v22[8];
  uint64_t v23;
  _BYTE v24[392];
  _BYTE v25[24];
  _BYTE __src[392];
  _BYTE __dst[392];

  v5 = a2 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v7 = (_QWORD *)v6;
    if ((objc_msgSend(a1, sel_isCancelled) & 1) != 0)
    {

    }
    else
    {
      v8 = objc_msgSend(a3, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        v10 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      NavigationStackCoordinator.previousContent.getter(__src);
      memcpy(__dst, __src, sizeof(__dst));
      v11 = NavigationState.StackContent.count.getter();
      outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
      v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      *((_BYTE *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x90)) = 0;
      *((_BYTE *)v7 + *(_QWORD *)((*v12 & *v7) + 0x78)) = 1;
      outlined init with copy of NavigationAuthority((uint64_t)v7 + *(_QWORD *)((*v12 & *v7) + 0x68), (uint64_t)v25);
      v13 = v11 - v10;
      if (__OFSUB__(v11, v10))
      {
        __break(1u);
      }
      else
      {
        NavigationStackCoordinator.previousContent.getter(__dst);
        memcpy(v24, __dst, sizeof(v24));
        v14 = NavigationState.StackContent.topKey.getter();
        v16 = v15;
        v18 = v17;
        outlined retain of NavigationState.Base((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
        static Transaction.current.getter();
        static Transaction.current.getter();
        v19 = Transaction.disablesAnimations.getter();
        swift_release();
        if ((v19 & 1) != 0)
          v20 = 1;
        else
          v20 = Transaction.disablesAnimations.getter();
        static Transaction.current.getter();
        v21 = Transaction.animation.getter();
        swift_release();
        if (!v21)
          v21 = Transaction.animation.getter();
        swift_release();
        memset(&v24[8], 0, 56);
        v23 = v21;
        *(_QWORD *)v24 = v13;
        v24[64] = 9;
        *(_QWORD *)&v24[72] = v14;
        *(_QWORD *)&v24[80] = v16;
        *(_QWORD *)&v24[88] = v18;
        memset(&v24[96], 0, 24);
        v24[120] = v20 & 1;
        *(_QWORD *)&v24[128] = v21;
        v22[6] = 0u;
        v22[7] = *(_OWORD *)&v24[112];
        v22[2] = *(_OWORD *)&v24[32];
        v22[3] = 0uLL;
        v22[4] = *(_OWORD *)&v24[64];
        v22[5] = *(_OWORD *)&v24[80];
        v22[0] = *(_OWORD *)v24;
        v22[1] = *(_OWORD *)&v24[16];
        NavigationAuthority.enqueueRequest(_:)(v22);

        outlined release of NavigationRequest((uint64_t)v24);
        outlined destroy of NavigationAuthority((uint64_t)v25);
      }
    }
  }
}

void @objc NavigationStackCoordinator.navigationController(_:willShow:animated:)(void *a1, uint64_t a2, void *a3, void *a4, Swift::Bool a5)
{
  UINavigationController *v8;
  UIViewController *v9;
  id v10;

  v8 = a3;
  v9 = a4;
  v10 = a1;
  NavigationStackCoordinator.navigationController(_:willShow:animated:)(v8, v9, a5);

}

uint64_t $defer #1 <A>() in NavigationStackCoordinator.navigationController(_:didShow:animated:)(uint64_t a1, void *a2)
{
  id v4;
  unint64_t v5;
  Swift::Int v6;
  __n128 v7[3];
  uint64_t v8;
  _BYTE v9[48];

  NavigationStackCoordinator.environment.getter();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>, (uint64_t)&type metadata for PPTTestCaseEnvironmentKey, (uint64_t)&protocol witness table for PPTTestCaseEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v8)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v7[0].n128_u64[0] || v7[0].n128_u64[1] != 1)
  {
    outlined init with take of PPTTestCase(v7, (uint64_t)v9);
    swift_release();
    swift_release();
    v4 = objc_msgSend(a2, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    PPTTestCase.navigationComplete(depth:)(v6);
    return outlined destroy of PPTTestCase((uint64_t)v9);
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PPTTestCase?, (uint64_t)&type metadata for PPTTestCase);
    swift_release();
    return swift_release();
  }
}

void @objc NavigationStackCoordinator.navigationController(_:didShow:animated:)(void *a1, uint64_t a2, void *a3, void *a4, char a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  v10 = a1;
  specialized NavigationStackCoordinator.navigationController(_:didShow:animated:)(v8, a5);

}

void @objc NavigationStackCoordinator.init()()
{
  specialized NavigationStackCoordinator.init()();
}

uint64_t @objc NavigationStackCoordinator.__ivar_destroyer(_QWORD *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  _BYTE v6[392];

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  outlined destroy of NavigationAuthority((uint64_t)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x68));
  v3 = (char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x70);
  v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)a1 + *(_QWORD *)((*v2 & *a1) + 0xA0)));
  outlined init with take of Image.Resolved?((uint64_t)a1 + *(_QWORD *)((*v2 & *a1) + 0xB0), (uint64_t)v6, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  return outlined release of NavigationState.StackContent?((uint64_t)v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of NavigationState.Base);
}

uint64_t type metadata accessor for NavigationStackCoordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackCoordinator);
}

uint64_t type metadata completion function for NavigationStackHostingController()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t static NavigationStackHostingController.HostingView.ignoresPresentations.getter()
{
  static Semantics.v6.getter();
  return isLinkedOnOrAfter(_:)() & 1;
}

void NavigationStackHostingController.HostingView.__allocating_init(rootView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized NavigationStackHostingController.HostingView.__allocating_init(rootView:)(a1, a2, a3, a4);
}

uint64_t sub_1879CC400(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 2448) - 8) + 8))(v1);
  return a1;
}

id NavigationStackHostingController.HostingView.init(coder:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  id v7;
  objc_super v9;

  v6 = (objc_class *)type metadata accessor for NavigationStackHostingController.HostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x990), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x998), a4);
  v9.receiver = v4;
  v9.super_class = v6;
  v7 = objc_msgSendSuper2(&v9, sel_initWithCoder_, a1);

  return v7;
}

id @objc NavigationStackHostingController.HostingView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  return NavigationStackHostingController.HostingView.init(coder:)(v3, v4, v5, v6);
}

id NavigationStackHostingController.HostingView.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for NavigationStackHostingController.HostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x990), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x998), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

void @objc NavigationStackHostingController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized NavigationStackHostingController.init(coder:)();
}

uint64_t @objc NavigationStackHostingController._canShowWhileLocked()()
{
  return 1;
}

Swift::Void __swiftcall NavigationStackHostingController.viewDidLoad()()
{
  void *v0;
  objc_super v1;

  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_viewDidLoad);
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.delegate.setter((uint64_t)v0, (uint64_t)&protocol witness table for NavigationStackHostingController<A>);
}

void @objc NavigationStackHostingController.viewDidLoad()(void *a1)
{
  id v1;

  v1 = a1;
  NavigationStackHostingController.viewDidLoad()();

}

uint64_t NavigationStackHostingController.hostingView<A>(_:didMoveTo:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;

  v4 = *MEMORY[0x1E0DEEDD8] & *v2;
  v5 = *(_QWORD *)(v4 + 0x3A8);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v22 - v11;
  v13 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v22 - v17;
  if (a2)
  {
    v23 = xmmword_187BFE310;
    return _UIHostingView.inheritedEnvironment.setter(&v23);
  }
  else
  {
    v20 = v16;
    v21 = (char *)v2 + *(_QWORD *)(v4 + 960);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v21, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v5) == 1)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v12, v5);
      UIHostingController.setRootView(_:transaction:)((uint64_t)v18);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v5);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v20, 1, 1, v5);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 40))(v21, v20, v6);
      return swift_endAccess();
    }
  }
}

void NavigationStackHostingController.__allocating_init(coder:rootView:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void NavigationStackHostingController.__allocating_init(hostingView:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t NavigationStackHostingController.__ivar_destroyer()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  v1 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C0);
  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t @objc NavigationStackHostingController.__ivar_destroyer(_QWORD *a1)
{
  char *v1;
  uint64_t v2;

  v1 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x3C0);
  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t type metadata accessor for NavigationStackHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackHostingController);
}

uint64_t type metadata accessor for NavigationStackHostingController.HostingView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackHostingController.HostingView);
}

uint64_t storeEnumTagSinglePayload for NavigationStackCoordinator.EndUserTriggeredUpdate(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1879CC900 + 4 * byte_187C77645[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1879CC934 + 4 * byte_187C77640[v4]))();
}

uint64_t sub_1879CC934(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879CC93C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1879CC944);
  return result;
}

uint64_t sub_1879CC950(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1879CC958);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1879CC95C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1879CC964(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for NavigationStackCoordinator.EndUserTriggeredUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackCoordinator.EndUserTriggeredUpdate);
}

uint64_t type metadata completion function for NavigationStackCore()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationStackCore(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFA)
    v6 = 250;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFA)
    {
      v12 = *(unsigned __int8 *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 6)
        return v12 - 5;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1879CCA6C + 4 * byte_187C7764A[v10]))();
  }
}

void storeEnumTagSinglePayload for NavigationStackCore(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFAu)
    v6 = 250;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1879CCBDC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1879CCC58);
}

void sub_1879CCBE4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1879CCBECLL);
  JUMPOUT(0x1879CCC58);
}

void sub_1879CCC30()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879CCC58);
}

void sub_1879CCC38()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1879CCC58);
}

uint64_t sub_1879CCC40(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFA)
  {
    if (a2 > 0xFA)
      JUMPOUT(0x1879CCC4CLL);
    *(_BYTE *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = a2 + 5;
LABEL_6:
    JUMPOUT(0x1879CCC58);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for NavigationStackCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackCore);
}

_UNKNOWN **base witness table accessor for View in NavigationStackCore<A>()
{
  return &protocol witness table for NavigationStackCore<A>;
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(view:willModifyViewInputs:) in conformance NavigationStackHostingController<A>()
{
  return specialized NavigationStackHostingController.hostingView<A>(view:willModifyViewInputs:)();
}

uint64_t UIKitNavigationController.configure(environment:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  _QWORD v10[5];

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey>, (uint64_t)&type metadata for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t)&protocol witness table for EnvironmentValues.AllowsToolbarConversionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.AllowsToolbarConversionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if ((v10[0] & 1) == 0)
  {
    v4 = objc_msgSend(v2, sel_navigationBar);
    objc_msgSend(v4, sel_setPreferredBehavioralStyle_, 1);

  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>, (uint64_t)&type metadata for PlatformNavigationPresentationBridgingEnabledKey, (uint64_t)&protocol witness table for PlatformNavigationPresentationBridgingEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v5 = LOBYTE(v10[0]);
  memset(v10, 0, 24);
  v10[3] = v5;
  v10[4] = 0;
  v6 = (uint64_t)v2 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_platformNavigationPresentationStrategy;
  swift_beginAccess();
  outlined assign with take of UIKitNavigationController.PlatformNavigationRequestStrategy((uint64_t)v10, v6);
  result = swift_endAccess();
  v8 = 1;
  *((_BYTE *)v2 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isDataDriven) = 1;
  v9 = OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isSecure;
  if ((*((_BYTE *)v2 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isSecure) & 1) == 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v3)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    result = swift_release_n();
    v8 = v10[0];
  }
  *((_BYTE *)v2 + v9) = v8;
  return result;
}

uint64_t type metadata accessor for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackCore.NavigationStackRepresentableRoot);
}

uint64_t type metadata accessor for NavigationStackCore.NavigationStackRepresentableChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackCore.NavigationStackRepresentableChild);
}

uint64_t type metadata accessor for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackCore.MultimodalNavigationStackRoot);
}

uint64_t type metadata accessor for NavigationStackCore.MultimodalNavigationStackChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackCore.MultimodalNavigationStackChild);
}

uint64_t specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v5;

  if (result)
    goto LABEL_2;
  if (a4 == 2)
  {
    if (!a3)
    {
LABEL_9:
      v5 = 2;
      goto LABEL_3;
    }
  }
  else if (a4 == 3 && a3 == 1)
  {
    goto LABEL_9;
  }
LABEL_2:
  v5 = 1;
LABEL_3:
  *(_BYTE *)a5 = v5;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_QWORD *)(a5 + 32) = result;
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, char a2, uint64_t a3, char a4, _OWORD *a5)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[25];
  _BYTE v18[16];
  _BYTE v19[25];
  _BYTE v20[16];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  *(_OWORD *)v19 = *a5;
  *(_OWORD *)&v19[9] = *(_OWORD *)((char *)a5 + 9);
  v10 = MEMORY[0x1E0DEB418];
  outlined init with take of Image.Resolved?((uint64_t)v19, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418]);
  result = outlined init with take of Image.Resolved?((uint64_t)v20, (uint64_t)&v21, (unint64_t *)&lazy cache variable for type metadata for Int?, v10);
  if ((v22 & 1) != 0)
  {
    if ((a2 & 1) != 0)
      goto LABEL_19;
    __break(1u);
  }
  if ((a2 & 1) == 0)
  {
    if (v21 > a1)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v21 >= a1)
    {
      v12 = *(_QWORD *)&v19[16];
      v13 = v19[24];
      if (a4)
      {
        if (a4 != 1)
          goto LABEL_15;
        if (v19[24] != 1 || *(uint64_t *)&v19[16] <= a3)
          goto LABEL_19;
        __break(1u);
      }
      if (!v13)
      {
LABEL_18:
        if (v12 > a3)
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        goto LABEL_19;
      }
      if (v13 == 2)
        goto LABEL_19;
      __break(1u);
LABEL_15:
      if (!v12 && v13 == 2)
        goto LABEL_19;
      __break(1u);
      goto LABEL_18;
    }
  }
LABEL_19:
  *(_OWORD *)v17 = a5[2];
  *(_OWORD *)&v17[9] = *(_OWORD *)((char *)a5 + 41);
  v14 = MEMORY[0x1E0DEB418];
  outlined init with take of Image.Resolved?((uint64_t)v17, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418]);
  result = outlined init with take of Image.Resolved?((uint64_t)v18, (uint64_t)&v23, (unint64_t *)&lazy cache variable for type metadata for Int?, v14);
  if ((v24 & 1) != 0)
  {
    if ((a2 & 1) == 0)
      return result;
    __break(1u);
  }
  if ((a2 & 1) != 0)
    goto LABEL_42;
  if (v23 > a1)
    return result;
  if (v23 < a1)
    goto LABEL_39;
  v15 = *(_QWORD *)&v17[16];
  v16 = v17[24];
  if (a4)
  {
    if (a4 != 1)
      goto LABEL_33;
    if (v17[24] != 1)
    {
LABEL_43:
      __break(1u);
      return result;
    }
    if (*(uint64_t *)&v17[16] > a3)
      return result;
    __break(1u);
  }
  if (!v16)
    goto LABEL_36;
  if (v16 == 1)
    return result;
  __break(1u);
LABEL_33:
  if (!v15 && v16 == 2)
  {
    __break(1u);
LABEL_36:
    if (v15 > a3)
      return result;
    goto LABEL_40;
  }
  return result;
}

void specialized NavigationStackHostingController.HostingView.__allocating_init(rootView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v5 = objc_allocWithZone((Class)type metadata accessor for NavigationStackHostingController.HostingView(0, *(_QWORD *)(v4 + 2448), *(_QWORD *)(v4 + 2456), a4));
  specialized _UIHostingView.init(rootView:)();
}

void specialized NavigationStackHostingController.init(rootView:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  *((_BYTE *)v2 + v5[119]) = 6;
  v6 = v5[117];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))((char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x3C0), 1, 1, v6);
  v8 = type metadata accessor for NavigationStackHostingController.HostingView(0, v6, v5[118], v7);
  specialized NavigationStackHostingController.HostingView.__allocating_init(rootView:)(a1, v8, v9, v10);
}

void sub_1879CD2F4()
{
  UIHostingController.init(_hostingView:)();
}

uint64_t specialized NavigationStackHostingController.hostingView<A>(view:willModifyViewInputs:)()
{
  _QWORD *v0;
  int v1;
  uint64_t result;

  v1 = *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B8));
  if (v1 == 4 || v1 == 1 || !*((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B8)))
    return _GraphInputs.pushStyleContext<A>(_:)();
  return result;
}

void specialized NavigationStackCoordinator.navigationControllerViewDidAppear(_:animated:)()
{
  _QWORD *v0;

  *((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98)) = 1;
}

id specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(unint64_t a1, void (*a2)(uint64_t *), uint64_t a3, void (*a4)(uint64_t *__return_ptr, unint64_t), uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id result;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  char *v48;
  id v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  BOOL v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  id v81;
  unint64_t v82;
  Class isa;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  id v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  int64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t *__return_ptr, unint64_t);
  char **v112;
  __int128 v113;
  __int128 v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123[7];
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;

  v110 = a5;
  v111 = a4;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v109 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v117 = (char *)&v109 - v18;
  v130 = 0;
  v128 = v5;
  v129 = MEMORY[0x1E0DEE9D8];
  swift_unknownObjectWeakInit();
  swift_retain();
  a2(&v128);
  v19 = v129;
  if (v129 >> 62)
    goto LABEL_107;
  v20 = *(_QWORD *)((v129 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  while (1)
  {
    v122 = a1;
    v112 = (char **)v19;
    if (!v20)
      break;
    v121 = v19 & 0xC000000000000001;
    v22 = 4;
    *(_QWORD *)&v21 = 138412290;
    v114 = v21;
    *(_QWORD *)&v21 = 138412546;
    v113 = v21;
    v109 = MEMORY[0x1E0DEE9B8] + 8;
    v115 = v11;
    v118 = (uint64_t)v15;
    v120 = v20;
    while (1)
    {
      v25 = v121 ? (char *)MEMORY[0x18D75E3BC](v22 - 4, v19) : (char *)*(id *)(v19 + 8 * v22);
      v26 = v25;
      v27 = v22 - 3;
      if (__OFADD__(v22 - 4, 1))
        break;
      v28 = objc_msgSend(v25, sel_navigationController, v109, v110, v111);
      v29 = v28;
      if (v28)
      {
        if (a1)
        {
          if (v28 != (id)a1)
          {
            v30 = v28;
            v31 = (id)a1;
            objc_msgSend(v26, sel_willMoveToParentViewController_, 0);
            result = objc_msgSend(v26, sel_view);
            if (!result)
            {
              __break(1u);
              return result;
            }
            v33 = result;
            objc_msgSend(result, sel_removeFromSuperview);

            specialized mustRemove #1 <A>(_:from:) in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(v26, v30, (uint64_t)&v130);
            a1 = v122;
            v19 = (unint64_t)v112;
            v24 = v120;
            v27 = v22 - 3;
            goto LABEL_8;
          }
          v43 = v117;
          static Log.navigation.getter();
          v44 = type metadata accessor for Logger();
          v116 = *(_QWORD *)(v44 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v43, 1, v44) != 1)
          {
            v119 = v22 - 3;
            v47 = (id)a1;
            v48 = v26;
            v49 = v47;
            v50 = v48;
            v51 = Logger.logObject.getter();
            v52 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v51, v52))
            {
              v53 = swift_slowAlloc();
              v54 = (_QWORD *)swift_slowAlloc();
              v55 = swift_slowAlloc();
              v123[0] = v55;
              *(_DWORD *)v53 = v113;
              *(_QWORD *)(v53 + 4) = v50;
              *v54 = v50;

              *(_WORD *)(v53 + 12) = 2080;
              v131 = (uint64_t)v29;
              type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for UINavigationController?, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
              v49 = v49;
              v56 = String.init<A>(describing:)();
              *(_QWORD *)(v53 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v123);

              swift_bridgeObjectRelease();
              _os_log_impl(&dword_186E48000, v51, v52, "[NavigationHostingControllerCache_UIKit] %@ containment skipped because sourceNavigationController and destination were equal %s", (uint8_t *)v53, 0x16u);
              type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
              swift_arrayDestroy();
              MEMORY[0x18D760108](v54, -1, -1);
              swift_arrayDestroy();
              v58 = v55;
              v43 = v117;
              MEMORY[0x18D760108](v58, -1, -1);
              v59 = v53;
              v11 = v115;
              MEMORY[0x18D760108](v59, -1, -1);

            }
            else
            {

            }
            v15 = (char *)v118;
            v24 = v120;
            (*(void (**)(char *, uint64_t))(v116 + 8))(v43, v44);
            a1 = v122;
            v19 = (unint64_t)v112;
LABEL_36:
            v27 = v119;
            goto LABEL_8;
          }

          v23 = (uint64_t)v43;
          goto LABEL_6;
        }
      }
      else if (!a1)
      {
        static Log.navigation.getter();
        v45 = type metadata accessor for Logger();
        v46 = *(_QWORD *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v11, 1, v45) != 1)
        {
          v119 = v22 - 3;
          v60 = v26;
          v61 = Logger.logObject.getter();
          v62 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v61, v62))
          {
            v63 = swift_slowAlloc();
            v64 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v63 = v114;
            *(_QWORD *)(v63 + 4) = v60;
            *v64 = v60;
            type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            swift_arrayDestroy();
            v65 = v64;
            v15 = (char *)v118;
            MEMORY[0x18D760108](v65, -1, -1);
            MEMORY[0x18D760108](v63, -1, -1);
            v66 = v61;
            v61 = v60;
          }
          else
          {

            v66 = v60;
          }
          a1 = v122;
          v19 = (unint64_t)v112;

          (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v45);
          v24 = v120;
          goto LABEL_36;
        }

        v23 = (uint64_t)v11;
        goto LABEL_6;
      }
      static Log.navigation.getter();
      v34 = type metadata accessor for Logger();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v15, 1, v34) != 1)
      {
        v36 = v26;
        v37 = Logger.logObject.getter();
        v38 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v37, v38))
        {
          v39 = swift_slowAlloc();
          v40 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v39 = v114;
          *(_QWORD *)(v39 + 4) = v36;
          *v40 = v36;

          _os_log_impl(&dword_186E48000, v37, v38, "[NavigationHostingControllerCache_UIKit] %@ containment skipped because sourceNavigationController or destination were nil", (uint8_t *)v39, 0xCu);
          type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
          swift_arrayDestroy();
          v41 = v40;
          v11 = v115;
          MEMORY[0x18D760108](v41, -1, -1);
          v42 = v39;
          v15 = (char *)v118;
          MEMORY[0x18D760108](v42, -1, -1);
        }
        else
        {

        }
        v27 = v22 - 3;

        (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v34);
        a1 = v122;
        v19 = (unint64_t)v112;
        goto LABEL_7;
      }

      v23 = (uint64_t)v15;
LABEL_6:
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v23, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
LABEL_7:
      v24 = v120;
LABEL_8:
      ++v22;
      if (v27 == v24)
        goto LABEL_37;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    swift_bridgeObjectRetain_n();
    v20 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_37:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!v130)
    goto LABEL_94;
  v67 = *(_QWORD *)(v130 + 64);
  *(_QWORD *)&v113 = v130 + 64;
  v68 = 1 << *(_BYTE *)(v130 + 32);
  if (v68 < 64)
    v69 = ~(-1 << v68);
  else
    v69 = -1;
  a1 = v69 & v67;
  *(_QWORD *)&v114 = (unint64_t)(v68 + 63) >> 6;
  v70 = swift_bridgeObjectRetain();
  v71 = 0;
  v72 = 0;
  v19 = (unint64_t)&selRef_setSensitive_;
  v121 = MEMORY[0x1E0DEE9B0] + 8;
  v115 = (char *)v70;
  while (2)
  {
    if (a1)
    {
      v118 = (a1 - 1) & a1;
      v119 = v71;
      v73 = __clz(__rbit64(a1)) | (v71 << 6);
      goto LABEL_58;
    }
    v74 = __OFADD__(v71, 1);
    v75 = v71 + 1;
    if (v74)
      goto LABEL_105;
    if (v75 >= (uint64_t)v114)
      goto LABEL_93;
    v76 = *(_QWORD *)(v113 + 8 * v75);
    if (v76)
    {
LABEL_57:
      v118 = (v76 - 1) & v76;
      v119 = v75;
      v73 = __clz(__rbit64(v76)) + (v75 << 6);
LABEL_58:
      v78 = 8 * v73;
      v79 = *(_QWORD *)(*(_QWORD *)(v70 + 56) + v78);
      v80 = (char *)*(id *)(*(_QWORD *)(v70 + 48) + v78);
      swift_bridgeObjectRetain();
      v81 = objc_msgSend(v80, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      v82 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      specialized _ArrayProtocol.filter(_:)(v82, v79);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v80, sel_setViewControllers_, isa);

      v120 = v72;
      v117 = v80;
      if ((v79 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
        lazy protocol witness table accessor for type NavigationStackHostingController<AnyView> and conformance NSObject();
        Set.Iterator.init(_cocoa:)();
        v79 = v131;
        v15 = v132;
        v84 = v133;
        v11 = v134;
        a1 = v135;
      }
      else
      {
        v11 = 0;
        v85 = -1 << *(_BYTE *)(v79 + 32);
        v15 = (char *)(v79 + 56);
        v84 = ~v85;
        v86 = -v85;
        if (v86 < 64)
          v87 = ~(-1 << v86);
        else
          v87 = -1;
        a1 = v87 & *(_QWORD *)(v79 + 56);
      }
      v116 = v84;
      v88 = (unint64_t)(v84 + 64) >> 6;
      if ((v79 & 0x8000000000000000) == 0)
        goto LABEL_68;
LABEL_65:
      v89 = __CocoaSet.Iterator.next()();
      if (!v89)
        goto LABEL_42;
      v127 = v89;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v90 = (id)v123[0];
      swift_unknownObjectRelease();
      v91 = v11;
      v92 = a1;
      if (!v90)
      {
LABEL_42:
        outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();

        v70 = (uint64_t)v115;
        v72 = v120;
        v71 = v119;
        a1 = v118;
        continue;
      }
      while (1)
      {
        objc_msgSend(v90, sel_removeFromParentViewController, v109);
        objc_msgSend(v90, sel_willMoveToParentViewController_, v122);

        v11 = v91;
        a1 = v92;
        if (v79 < 0)
          goto LABEL_65;
LABEL_68:
        if (a1)
        {
          v92 = (a1 - 1) & a1;
          v93 = __clz(__rbit64(a1)) | ((_QWORD)v11 << 6);
          v91 = v11;
        }
        else
        {
          v94 = (int64_t)(v11 + 1);
          if (__OFADD__(v11, 1))
          {
            __break(1u);
            goto LABEL_104;
          }
          if (v94 >= v88)
            goto LABEL_42;
          v95 = *(_QWORD *)&v15[8 * v94];
          v91 = v11 + 1;
          if (!v95)
          {
            v91 = v11 + 2;
            if ((uint64_t)(v11 + 2) >= v88)
              goto LABEL_42;
            v95 = *(_QWORD *)&v15[8 * (_QWORD)v91];
            if (!v95)
            {
              v91 = v11 + 3;
              if ((uint64_t)(v11 + 3) >= v88)
                goto LABEL_42;
              v95 = *(_QWORD *)&v15[8 * (_QWORD)v91];
              if (!v95)
              {
                v91 = v11 + 4;
                if ((uint64_t)(v11 + 4) >= v88)
                  goto LABEL_42;
                v95 = *(_QWORD *)&v15[8 * (_QWORD)v91];
                if (!v95)
                {
                  v91 = v11 + 5;
                  if ((uint64_t)(v11 + 5) >= v88)
                    goto LABEL_42;
                  v95 = *(_QWORD *)&v15[8 * (_QWORD)v91];
                  if (!v95)
                  {
                    v96 = v11 + 6;
                    while ((char *)v88 != v96)
                    {
                      v95 = *(_QWORD *)&v15[8 * (_QWORD)v96++];
                      if (v95)
                      {
                        v91 = v96 - 1;
                        goto LABEL_85;
                      }
                    }
                    goto LABEL_42;
                  }
                }
              }
            }
          }
LABEL_85:
          v92 = (v95 - 1) & v95;
          v93 = __clz(__rbit64(v95)) + ((_QWORD)v91 << 6);
        }
        v90 = *(id *)(*(_QWORD *)(v79 + 48) + 8 * v93);
        if (!v90)
          goto LABEL_42;
      }
    }
    break;
  }
  v77 = v75 + 1;
  if (v75 + 1 >= (uint64_t)v114)
    goto LABEL_93;
  v76 = *(_QWORD *)(v113 + 8 * v77);
  if (v76)
    goto LABEL_56;
  v77 = v75 + 2;
  if (v75 + 2 >= (uint64_t)v114)
    goto LABEL_93;
  v76 = *(_QWORD *)(v113 + 8 * v77);
  if (v76)
    goto LABEL_56;
  v77 = v75 + 3;
  if (v75 + 3 >= (uint64_t)v114)
    goto LABEL_93;
  v76 = *(_QWORD *)(v113 + 8 * v77);
  if (v76)
    goto LABEL_56;
  v77 = v75 + 4;
  if (v75 + 4 >= (uint64_t)v114)
    goto LABEL_93;
  v76 = *(_QWORD *)(v113 + 8 * v77);
  if (v76)
  {
LABEL_56:
    v75 = v77;
    goto LABEL_57;
  }
  while (1)
  {
    v75 = v77 + 1;
    if (__OFADD__(v77, 1))
      goto LABEL_106;
    if (v75 >= (uint64_t)v114)
      break;
    v76 = *(_QWORD *)(v113 + 8 * v75);
    ++v77;
    if (v76)
      goto LABEL_57;
  }
LABEL_93:
  swift_release();
  a1 = v122;
  v19 = (unint64_t)v112;
LABEL_94:
  v111(&v127, v19);
  swift_bridgeObjectRelease();
  if (v130)
  {
    v97 = *(_QWORD *)(v130 + 64);
    v98 = -1 << *(_BYTE *)(v130 + 32);
    v99 = ~v98;
    v100 = -v98;
    v123[0] = v130;
    v123[1] = v130 + 64;
    if (v100 < 64)
      v101 = ~(-1 << v100);
    else
      v101 = -1;
    v123[2] = v99;
    v123[3] = 0;
    v123[4] = v101 & v97;
    v123[5] = (uint64_t)closure #2 in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:);
    v123[6] = 0;
    v124 = 0xF000000000000007;
    v125 = 0u;
    v126 = 0u;
    specialized FlattenSequence.Iterator.next()();
    if (v102)
    {
      v103 = v102;
      v104 = MEMORY[0x1E0CE7518];
      v105 = MEMORY[0x1E0CE7508];
      do
      {
        objc_msgSend(v103, sel_didMoveToParentViewController_, a1, v109);
        v106 = *(id *)&v103[direct field offset for UIHostingController.host];
        static ViewRendererHostProperties.all.getter();
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, v104, v105, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        specialized FlattenSequence.Iterator.next()();
        v103 = v107;
      }
      while (v107);
    }
    v108 = v124;
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    swift_release();
    outlined consume of Set<NavigationStackHostingController<AnyView>>.Iterator?(v108);
  }
  outlined destroy of NavigationHostingControllerCache_UIKit.Source((uint64_t)&v128);
  return (id)v127;
}

char *specialized NavigationStrategy.viewControllerCommon(for:entering:canPop:isRoot:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  Class v9;
  _QWORD *v10;
  _QWORD *v11;
  Class v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *result;
  char *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v7 = MEMORY[0x1E0CE7518];
  v8 = MEMORY[0x1E0CE7508];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
  v10 = objc_allocWithZone(v9);
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *((_BYTE *)v10 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v10) + 0x3B8)) = 6;
  *(_QWORD *)((char *)v10 + *(_QWORD *)((*v11 & *v10) + 0x3C0)) = 0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>.HostingView, v7, v8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController.HostingView);
  v13 = objc_allocWithZone(v12);
  v14 = swift_retain();
  v15 = specialized _UIHostingView.init(rootView:)(v14);
  swift_release();
  v16 = (char *)specialized UIHostingController.init(_hostingView:)(v15);
  result = (char *)objc_msgSend(v16, sel_view);
  if (result)
  {
    v18 = result;
    objc_msgSend(result, sel_setClipsToBounds_, 1);

    v19 = *(id *)&v16[direct field offset for UIHostingController.host];
    specialized NavigationStrategy.inheritedEnvironment<A>(from:for:canPop:)(1, 0, a2 & 1, a3, a4, (uint64_t *)&v26);
    v20 = (_QWORD *)((char *)v19 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v19) + 0x118));
    v21 = *v20;
    *(_OWORD *)v20 = v26;
    outlined consume of EnvironmentValues?(v21);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    *(_QWORD *)&v26 = a3;
    *((_QWORD *)&v26 + 1) = a4;
    v22 = EnvironmentValues.preferenceBridge.getter();
    if (v22)
    {
      v23 = v22;
      swift_retain();
      v24 = ViewGraph.preferenceBridge.getter();
      if (!v24 || (v25 = v24, swift_release(), v23 != v25))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }

      swift_release_n();
    }
    else
    {

    }
    return v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;

  if (result < 0)
  {
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    v6 = -v5;
    if (!__OFSUB__(0, v5))
      goto LABEL_4;
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v2 = a2;
  v3 = result;
  v4 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_30;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = -v5;
  if (__OFSUB__(0, v5))
    goto LABEL_32;
LABEL_4:
  v7 = -v3;
  if (v6 > 0 || v6 <= v7)
  {
    v8 = v5 - v3;
    if (__OFADD__(v5, v7))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v5 < v8)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v4)
    {
LABEL_8:
      v9 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_13;
    }
  }
  else
  {
    if (v5 < 0)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v8 = 0;
    if (!v4)
      goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
LABEL_13:
  if (v9 < v8)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v8 < 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < v5)
    goto LABEL_35;
  if (v5 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((v2 & 0xC000000000000001) != 0 && v8 != v5)
  {
    if (v8 < (unint64_t)v5)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      v11 = v8;
      do
      {
        v12 = v11 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v11);
        v11 = v12;
      }
      while (v5 != v12);
      goto LABEL_25;
    }
LABEL_40:
    __break(1u);
    return result;
  }
LABEL_25:
  if (v4)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v13;
}

uint64_t specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  int64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  id v34;
  _BYTE v36[416];
  _BYTE v37[416];
  _QWORD v38[8];
  char v39;
  _BYTE v40[416];
  _WORD __src[208];
  _BYTE __dst[416];
  _BYTE v43[416];

  outlined init with take of TableCellFormula(a2, (uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  outlined init with take of TableCellFormula((uint64_t)v37, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  outlined init with take of TableCellFormula(a2, (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  result = _s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v40);
  if ((_DWORD)result == 1)
    goto LABEL_20;
  v7 = *(unsigned __int8 *)(a3 + 24);
  if (v7 == 255)
  {
    __break(1u);
    goto LABEL_39;
  }
  v9 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)a3;
  outlined init with take of TableCellFormula((uint64_t)v43, (uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  memcpy(__dst, __src, sizeof(__dst));
  v11 = outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  v12 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(v11);
  if ((v15 & 1) != 0)
  {
    v16 = (v9 & 1) == 0;
  }
  else
  {
    if ((v9 & 1) != 0 || v10 < v12)
      goto LABEL_18;
    if (v12 < v10)
      goto LABEL_14;
    if (!v7)
    {
      if (v14)
      {
        if (v14 != 1)
          goto LABEL_14;
        goto LABEL_18;
      }
      goto LABEL_37;
    }
    if (v7 == 1)
    {
      if (v14 != 1)
        goto LABEL_14;
LABEL_37:
      v16 = v8 < v13;
      goto LABEL_12;
    }
    v16 = v14 != 2 || v13 != 0;
  }
LABEL_12:
  if (!v16 && (v9 & 1) == 0)
  {
LABEL_14:
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
    LOBYTE(v38[0]) = v9 & 1;
    specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v10, v9 & 1, v8, v7);
    outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(a2);
    outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(a2);
    v17 = v38[0];
    if (v38[0])
    {
      swift_retain();
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v38);
      goto LABEL_21;
    }
    goto LABEL_19;
  }
LABEL_18:
  v39 = 0;
  memset(v38, 0, sizeof(v38));
  outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(a2);
LABEL_19:
  outlined destroy of AccessibilityTableContext?((uint64_t)v38, &lazy cache variable for type metadata for NavigationState.StackContent.PositionedView?, (uint64_t)&type metadata for NavigationState.StackContent.PositionedView);
LABEL_20:
  v17 = 0;
LABEL_21:
  v18 = direct field offset for UIHostingController.host;
  v19 = objc_msgSend(*(id *)&a1[direct field offset for UIHostingController.host], sel_window);
  if (!v19)
  {
    v34 = *(id *)&a1[v18];
    specialized _UIHostingView.traitCollectionOverride.setter(objc_msgSend(a1, sel_traitCollection));

    if (!v17)
      goto LABEL_24;
    goto LABEL_23;
  }

  v20 = *(_QWORD **)&a1[v18];
  v21 = (_QWORD *)((char *)v20 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v20) + 0x118));
  v22 = *v21;
  *(_OWORD *)v21 = xmmword_187BFE310;
  v23 = v20;
  outlined consume of EnvironmentValues?(v22);
  __src[0] = 2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  if (v17)
  {
LABEL_23:
    v24 = swift_retain();
    specialized UIHostingController.setRootView(_:transaction:)(v24);
    swift_release_n();
  }
LABEL_24:
  outlined init with take of TableCellFormula(a2, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  result = _s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v38);
  if ((_DWORD)result == 1)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = -1;
LABEL_28:
    *(_QWORD *)a3 = v25;
    *(_QWORD *)(a3 + 8) = v26;
    *(_QWORD *)(a3 + 16) = v27;
    *(_BYTE *)(a3 + 24) = v28;
    return 1;
  }
  if (*(unsigned __int8 *)(a3 + 24) != 255)
  {
    v29 = *(_DWORD *)(a3 + 8);
    v30 = *(_QWORD *)a3;
    outlined init with take of TableCellFormula((uint64_t)v43, (uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
    memcpy(__src, v36, sizeof(__src));
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v36);
    v25 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v30, v29 & 1);
    v27 = v31;
    v28 = v32;
    v26 = v33 & 1;
    outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(a2);
    goto LABEL_28;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  id v28;
  _QWORD v29[8];
  _BYTE v30[416];
  _BYTE v31[480];
  _WORD __src[240];
  _BYTE v33[480];
  _BYTE v34[416];
  _BYTE __dst[480];
  _BYTE v36[480];

  outlined init with take of TableCellFormula(a2, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  outlined init with take of TableCellFormula((uint64_t)v31, (uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  outlined init with take of TableCellFormula(a2, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  result = _ss5SliceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0H8SequenceVy___AC22_VariadicView_ChildrenVAC08ModifiedG0VyAC0D14ColumnModifierVAOyAC09InjectKeyO0VAC0d16BackgroundReaderO033_7632008E3567AB610EB09B57688D0EDELLVGGGGSgWOg((uint64_t)v33);
  if ((_DWORD)result == 1)
  {
    v7 = 0;
  }
  else
  {
    v8 = *(unsigned __int8 *)(a3 + 24);
    if (v8 == 255)
    {
      __break(1u);
      goto LABEL_18;
    }
    v9 = *(_QWORD *)(a3 + 16);
    v10 = *(_DWORD *)(a3 + 8);
    v11 = *(_QWORD *)a3;
    outlined init with take of TableCellFormula((uint64_t)v36, (uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
    memcpy(__dst, __src, sizeof(__dst));
    outlined retain of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>((uint64_t)__src);
    LOBYTE(v29[0]) = v10 & 1;
    specialized Collection.subscript.getter(v11, v10 & 1, v9, v8, (uint64_t)v29);
    outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(a2);
    v7 = v29[0];
    if (v29[0])
    {
      swift_retain();
      outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v29);
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v29, &lazy cache variable for type metadata for NavigationState.StackContent.PositionedView?, (uint64_t)&type metadata for NavigationState.StackContent.PositionedView);
    }
  }
  v12 = direct field offset for UIHostingController.host;
  v13 = objc_msgSend(*(id *)&a1[direct field offset for UIHostingController.host], sel_window);
  if (!v13)
  {
    v28 = *(id *)&a1[v12];
    specialized _UIHostingView.traitCollectionOverride.setter(objc_msgSend(a1, sel_traitCollection));

    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }

  v14 = *(_QWORD **)&a1[v12];
  v15 = (_QWORD *)((char *)v14 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v14) + 0x118));
  v16 = *v15;
  *(_OWORD *)v15 = xmmword_187BFE310;
  v17 = v14;
  outlined consume of EnvironmentValues?(v16);
  __src[0] = 2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  if (v7)
  {
LABEL_9:
    v18 = swift_retain();
    specialized UIHostingController.setRootView(_:transaction:)(v18);
    swift_release_n();
  }
LABEL_10:
  outlined init with take of TableCellFormula(a2, (uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  result = _ss5SliceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0H8SequenceVy___AC22_VariadicView_ChildrenVAC08ModifiedG0VyAC0D14ColumnModifierVAOyAC09InjectKeyO0VAC0d16BackgroundReaderO033_7632008E3567AB610EB09B57688D0EDELLVGGGGSgWOg((uint64_t)__src);
  if ((_DWORD)result == 1)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = -1;
LABEL_14:
    *(_QWORD *)a3 = v19;
    *(_QWORD *)(a3 + 8) = v20;
    *(_QWORD *)(a3 + 16) = v21;
    *(_BYTE *)(a3 + 24) = v22;
    return 1;
  }
  if (*(unsigned __int8 *)(a3 + 24) != 255)
  {
    v23 = *(_DWORD *)(a3 + 8);
    v24 = *(_QWORD *)a3;
    outlined init with take of TableCellFormula((uint64_t)v36, (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
    memcpy(v34, v30, sizeof(v34));
    outlined retain of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>((uint64_t)v29);
    v19 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v24, v23 & 1);
    v21 = v25;
    v22 = v26;
    v20 = v27 & 1;
    outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(a2);
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized Collection.dropLast(_:)(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v2 = a2;
  v3 = result;
  v4 = a2 >> 62;
  if (a2 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    v12 = v11 - v3;
    if (__OFSUB__(v11, v3))
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v14 < 0)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v13 >= (v12 & ~(v12 >> 63)) || v13 <= -1)
      v16 = v12 & ~(v12 >> 63);
    else
      v16 = v13;
    if (v12 >= 1)
      v7 = v16;
    else
      v7 = v12 & ~(v12 >> 63);
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v17 >= v7)
      goto LABEL_10;
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5 >= ((v5 - result) & ~((uint64_t)(v5 - result) >> 63)))
    v6 = (v5 - result) & ~((uint64_t)(v5 - result) >> 63);
  else
    v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if ((uint64_t)(v5 - result) >= 1)
    v7 = v6;
  else
    v7 = (v5 - result) & ~((uint64_t)(v5 - result) >> 63);
  if ((uint64_t)v5 < v7)
    goto LABEL_31;
LABEL_10:
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    v8 = 0;
    do
    {
      v9 = v8 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v8);
      v8 = v9;
    }
    while (v7 != v9);
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v10;
}

uint64_t specialized NavigationStackCoordinator.navigationController(_:didShow:animated:)(id a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23[8];
  uint64_t v24;
  _BYTE v25[392];
  _BYTE v26[24];
  _BYTE __dst[392];
  _BYTE __src[408];

  v3 = v2;
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *((_BYTE *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x90)) = 0;
  if ((a2 & 1) != 0 && (static SemanticFeature.isEnabled.getter() & 1) != 0)
    return $defer #1 <A>() in NavigationStackCoordinator.navigationController(_:didShow:animated:)((uint64_t)v2, a1);
  if ((*((_BYTE *)v2 + *(_QWORD *)((*v5 & *v2) + 0x80)) & 1) != 0)
    return $defer #1 <A>() in NavigationStackCoordinator.navigationController(_:didShow:animated:)((uint64_t)v2, a1);
  v6 = objc_msgSend(a1, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v8)
    return $defer #1 <A>() in NavigationStackCoordinator.navigationController(_:didShow:animated:)((uint64_t)v2, a1);
  v9 = objc_msgSend(a1, sel_viewControllers);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  NavigationStackCoordinator.previousContent.getter(__src);
  memcpy(__dst, __src, sizeof(__dst));
  v12 = NavigationState.StackContent.count.getter();
  outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  if (v11 >= v12)
    return $defer #1 <A>() in NavigationStackCoordinator.navigationController(_:didShow:animated:)((uint64_t)v3, a1);
  *((_BYTE *)v3 + *(_QWORD *)((*v5 & *v3) + 0x78)) = 0;
  result = outlined init with copy of NavigationAuthority((uint64_t)v3 + *(_QWORD *)((*v5 & *v3) + 0x68), (uint64_t)v26);
  v14 = v12 - v11;
  if (!__OFSUB__(v12, v11))
  {
    NavigationStackCoordinator.previousContent.getter(__dst);
    memcpy(v25, __dst, sizeof(v25));
    v15 = NavigationState.StackContent.topKey.getter();
    v17 = v16;
    v22 = v18;
    outlined retain of NavigationState.Base((uint64_t)__dst, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
    static Transaction.current.getter();
    static Transaction.current.getter();
    v19 = Transaction.disablesAnimations.getter();
    swift_release();
    if ((v19 & 1) != 0)
      v20 = 1;
    else
      v20 = Transaction.disablesAnimations.getter();
    static Transaction.current.getter();
    v21 = Transaction.animation.getter();
    swift_release();
    if (!v21)
      v21 = Transaction.animation.getter();
    swift_release();
    memset(&v25[8], 0, 56);
    *(_QWORD *)v25 = v14;
    v25[64] = 9;
    *(_QWORD *)&v25[72] = v15;
    *(_QWORD *)&v25[80] = v17;
    *(_QWORD *)&v25[88] = v22;
    memset(&v25[96], 0, 24);
    v25[120] = v20 & 1;
    *(_QWORD *)&v25[128] = v21;
    v23[6] = 0uLL;
    v23[7] = *(_OWORD *)&v25[112];
    v24 = v21;
    v23[2] = *(_OWORD *)&v25[32];
    v23[3] = 0uLL;
    v23[4] = *(_OWORD *)&v25[64];
    v23[5] = *(_OWORD *)&v25[80];
    v23[0] = *(_OWORD *)v25;
    v23[1] = *(_OWORD *)&v25[16];
    NavigationAuthority.enqueueRequest(_:)(v23);
    outlined release of NavigationRequest((uint64_t)v25);
    outlined destroy of NavigationAuthority((uint64_t)v26);
    return $defer #1 <A>() in NavigationStackCoordinator.navigationController(_:didShow:animated:)((uint64_t)v3, a1);
  }
  __break(1u);
  return result;
}

void specialized NavigationStackCoordinator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void specialized NavigationStackHostingController.init(coder:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *MEMORY[0x1E0DEEDD8] & *v0;
  *((_BYTE *)v0 + *(_QWORD *)(v2 + 0x3B8)) = 6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 936) - 8) + 56))((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x3C0), 1, 1);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1879CF490()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1879CF4B4()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(a1, *(_QWORD *)(v1 + 32));
}

void partial apply for closure #3 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(void *a1)
{
  uint64_t v1;

  closure #3 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(a1, *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t objectdestroy_8Tm_3()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(void *a1)
{
  uint64_t v1;

  closure #2 in NavigationStackCoordinator.navigationController(_:willShow:animated:)(a1, *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t destroy for NavigationStackCore.MultimodalNavigationStackRoot()
{
  swift_weakDestroy();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakCopyInit();
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  return a1;
}

uint64_t initializeWithTake for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationStackCore.MultimodalNavigationStackRoot(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t destroy for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1)
{
  uint64_t result;

  swift_weakDestroy();
  swift_release();
  result = swift_release();
  if (*(_QWORD *)(a1 + 80))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  return result;
}

uint64_t initializeWithCopy for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakCopyInit();
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_retain();
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v5;
    *(_QWORD *)(a1 + 88) = v6;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8))(a1 + 56, a2 + 56, v5);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  }
  return a1;
}

uint64_t assignWithCopy for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  v4 = *(_QWORD *)(a2 + 80);
  if (!*(_QWORD *)(a1 + 80))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 80) = v4;
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 56, a2 + 56);
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 56);
    v6 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 56) = v5;
    *(_OWORD *)(a1 + 72) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 56);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  return a1;
}

uint64_t initializeWithTake for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 80))
    __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationStackCore.NavigationStackRepresentableRoot(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for NavigationStackCore<A>.NavigationStackRepresentableRoot(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackCore<A>.NavigationStackRepresentableRoot);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for NavigationStackCore<A>.MultimodalNavigationStackRoot(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackCore<A>.MultimodalNavigationStackRoot);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in NavigationStackCore<A>.MultimodalNavigationStackRoot()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in NavigationStackCore<A>.MultimodalNavigationStackChild()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in NavigationStackCore<A>.NavigationStackRepresentableRoot()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in NavigationStackCore<A>.NavigationStackRepresentableChild()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for UINavigationPresentationAdaptor??(uint64_t a1)
{
  type metadata accessor for (offset: Int, element: TableSections.Item)?(a1, &lazy cache variable for type metadata for UINavigationPresentationAdaptor??, (void (*)(uint64_t))type metadata accessor for UINavigationPresentationAdaptor?);
}

void type metadata accessor for NavigationAuthority??()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for NavigationAuthority??)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationAuthority??);
  }
}

uint64_t type metadata accessor for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>;
  if (!lazy cache variable for type metadata for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>)
  {
    lazy protocol witness table accessor for type IsInSecureDrawingHierarchy and conformance IsInSecureDrawingHierarchy();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t sub_1879CFD6C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.displayScale.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1879CFDA4()
{
  return EnvironmentValues.displayScale.setter();
}

uint64_t destroy for NavigationStackRepresentable(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);

  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 144))
    __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 160), *(_BYTE *)(a1 + 168));
}

uint64_t initializeWithCopy for NavigationStackRepresentable(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 24, a2 + 24);
  v5 = *(void **)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v6;
  v7 = v5;
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 108) = *(_QWORD *)(a2 + 108);
  v9 = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_retain();
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v9;
    *(_QWORD *)(a1 + 152) = v10;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))(a1 + 120, a2 + 120, v9);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v11;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  }
  v12 = *(_QWORD *)(a2 + 160);
  v13 = *(_BYTE *)(a2 + 168);
  outlined copy of Environment<Bool>.Content(v12, v13);
  *(_QWORD *)(a1 + 160) = v12;
  *(_BYTE *)(a1 + 168) = v13;
  return a1;
}

uint64_t assignWithCopy for NavigationStackRepresentable(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  v4 = *(void **)(a2 + 64);
  v5 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v7 = *(_QWORD *)(a2 + 144);
  if (!*(_QWORD *)(a1 + 144))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 144) = v7;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 120, a2 + 120);
      goto LABEL_8;
    }
LABEL_7:
    v8 = *(_OWORD *)(a2 + 120);
    v9 = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 120) = v8;
    *(_OWORD *)(a1 + 136) = v9;
    goto LABEL_8;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 120);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 120), (uint64_t *)(a2 + 120));
LABEL_8:
  v10 = *(_QWORD *)(a2 + 160);
  v11 = *(_BYTE *)(a2 + 168);
  outlined copy of Environment<Bool>.Content(v10, v11);
  v12 = *(_QWORD *)(a1 + 160);
  v13 = *(_BYTE *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v10;
  *(_BYTE *)(a1 + 168) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  return a1;
}

uint64_t initializeWithTake for NavigationStackRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 108) = *(_QWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v4 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v4;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  return a1;
}

uint64_t assignWithTake for NavigationStackRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 108) = *(_QWORD *)(a2 + 108);
  if (*(_QWORD *)(a1 + 144))
    __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  v6 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v6;
  v7 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v8 = *(_BYTE *)(a2 + 168);
  v9 = *(_QWORD *)(a1 + 160);
  v10 = *(_BYTE *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v7;
  *(_BYTE *)(a1 + 168) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackRepresentable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 169))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationStackRepresentable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 168) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 169) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 169) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationStackRepresentable()
{
  return &type metadata for NavigationStackRepresentable;
}

uint64_t sub_1879D02F0()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>, _SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable> and conformance <> StaticIf<A, B, C>, MEMORY[0x1E0CE65D8]);
}

void type metadata accessor for ModifiedContent<StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>, _SafeAreaRegionsIgnoringLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>, _SafeAreaRegionsIgnoringLayout>)
  {
    type metadata accessor for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>, _SafeAreaRegionsIgnoringLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable>();
    v2[0] = &protocol witness table for NavigationStackRepresentable;
    v2[1] = &protocol witness table for NavigationStackRepresentable;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsInSecureDrawingHierarchy, NavigationStackRepresentable, NavigationStackRepresentable> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationStack and conformance MultimodalNavigationStack()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalNavigationStack and conformance MultimodalNavigationStack;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationStack and conformance MultimodalNavigationStack)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalNavigationStack, &type metadata for MultimodalNavigationStack);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationStack and conformance MultimodalNavigationStack);
  }
  return result;
}

void type metadata accessor for NavigationStackCoordinator<NavigationStrategy_Phone>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for NavigationStackCoordinator<NavigationStrategy_Phone>)
  {
    v2 = lazy protocol witness table accessor for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone();
    v4 = type metadata accessor for NavigationStackCoordinator(a1, (uint64_t)&type metadata for NavigationStrategy_Phone, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for NavigationStackCoordinator<NavigationStrategy_Phone>);
  }
}

void partial apply for specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)()
{
  partial apply for specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)((void (*)(const void *, _QWORD *, uint64_t, uint64_t, _QWORD))specialized NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:));
}

{
  partial apply for specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)((void (*)(const void *, _QWORD *, uint64_t, uint64_t, _QWORD))specialized NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:));
}

{
  partial apply for specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)((void (*)(const void *, _QWORD *, uint64_t, uint64_t, _QWORD))specialized NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:));
}

void partial apply for specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)()
{
  partial apply for specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)((uint64_t)&unk_1E1B4D9A0, (uint64_t)partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:), (uint64_t (*)(uint64_t))specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots(), (void (*)(uint64_t, _BYTE *, uint64_t))specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:));
}

{
  partial apply for specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)((uint64_t)&unk_1E1B4DD10, (uint64_t)partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:), (uint64_t (*)(uint64_t))specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots(), (void (*)(uint64_t, _BYTE *, uint64_t))specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:));
}

{
  partial apply for specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)((uint64_t)&unk_1E1B4E0A8, (uint64_t)partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:), (uint64_t (*)(uint64_t))specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots(), (void (*)(uint64_t, _BYTE *, uint64_t))specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:));
}

double _s7SwiftUI15NavigationStateV12StackContentV5ViewsV0G8SequenceVy___AA22_VariadicView_ChildrenVAA08ModifiedF0VyAA0C14ColumnModifierVAMyAA09InjectKeyN0VAA0c16BackgroundReaderN033_7632008E3567AB610EB09B57688D0EDELLVGGGSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0x7000000000000007;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = xmmword_187BFE320;
  *(_QWORD *)(a1 + 264) = 4194296;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  return result;
}

void type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(uint64_t a1)
{
  type metadata accessor for (offset: Int, element: TableSections.Item)?(a1, &lazy cache variable for type metadata for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?, (void (*)(uint64_t))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>);
}

uint64_t type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>;
  if (!lazy cache variable for type metadata for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>)
  {
    type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for NavigationState.StackContent.Views.ViewsSequence();
  }
  return result;
}

uint64_t outlined release of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = *(_OWORD *)(a1 + 272);
  v7 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 208);
  outlined consume of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((unint64_t *)&v7 + 1),
    *(_QWORD *)(a1 + 304));
  return a1;
}

uint64_t outlined consume of NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39)
{
  uint64_t result;

  result = a21;
  if ((~a22 & 0x7000000000000007) != 0
    || (a32 & 0xF000000000000007) != 0xF000000000000007
    || (a34 & 0xFFFFFFFFFFFFFFF8) != 0x3FFFF8
    || (a38 & 0xFFFFFFFFFF0000FCLL) != 0)
  {
    outlined consume of NavigationState.Base(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>)
  {
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  }
}

uint64_t sub_1879D08C0()
{
  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>)
  {
    type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ReadDestinationsModifier<ResolvedNavigationDestinations>, (uint64_t)&type metadata for ResolvedNavigationDestinations, (uint64_t)&protocol witness table for ResolvedNavigationDestinations, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ReadDestinationsModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
  }
}

uint64_t partial apply for specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(uint64_t a1)
{
  return partial apply for closure #1 in static Table._makeViewList(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:));
}

{
  return partial apply for closure #1 in static Table._makeViewList(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:));
}

{
  return partial apply for closure #1 in static Table._makeViewList(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:));
}

void partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(unint64_t a1)
{
  partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1);
}

{
  uint64_t v1;

  specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1, *(_QWORD **)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32), *(UINavigationController **)(v1 + 40), *(_BYTE *)(v1 + 48));
}

{
  partial apply for specialized closure #2 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(a1);
}

void partial apply for specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(uint64_t a1)
{
  uint64_t v1;

  specialized closure #1 in NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:)(a1, v1);
}

uint64_t outlined retain of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v6 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  outlined copy of NavigationState.Base(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(_QWORD *)(a1 + 304));
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined release of LazyMapSequence<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, NavigationContentAbstractPosition>(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v6 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 256);
  v5 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  outlined consume of NavigationState.Base(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(_QWORD *)(a1 + 304));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v6 = *(_OWORD *)(a1 + 352);
  v4 = *(_OWORD *)(a1 + 320);
  v5 = *(_OWORD *)(a1 + 336);
  v3 = *(_OWORD *)(a1 + 288);
  outlined consume of NavigationState.Base(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 304),
    *(_QWORD *)(a1 + 312),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(_QWORD *)(a1 + 368));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v6 = *(_OWORD *)(a1 + 352);
  v4 = *(_OWORD *)(a1 + 320);
  v5 = *(_OWORD *)(a1 + 336);
  v3 = *(_OWORD *)(a1 + 288);
  outlined consume of NavigationState.Base(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 304),
    *(_QWORD *)(a1 + 312),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(_QWORD *)(a1 + 368));
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

void partial apply for specialized closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(uint64_t a1)
{
  partial apply for specialized closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(a1, (void (*)(void))partial apply for closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:), (uint64_t (*)(uint64_t))partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:));
}

{
  partial apply for specialized closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(a1, (void (*)(void))partial apply for closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:), (uint64_t (*)(uint64_t))partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:));
}

{
  partial apply for specialized closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(a1, (void (*)(void))partial apply for closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:), (uint64_t (*)(uint64_t))partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:));
}

uint64_t outlined retain of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v6 = *(_OWORD *)(a1 + 352);
  v4 = *(_OWORD *)(a1 + 320);
  v5 = *(_OWORD *)(a1 + 336);
  v3 = *(_OWORD *)(a1 + 288);
  outlined copy of NavigationState.Base(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 304),
    *(_QWORD *)(a1 + 312),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(_QWORD *)(a1 + 368));
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined release of LazyMapSequence<Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>, NavigationContentAbstractPosition>.Iterator(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v6 = *(_OWORD *)(a1 + 352);
  v4 = *(_OWORD *)(a1 + 320);
  v5 = *(_OWORD *)(a1 + 336);
  v3 = *(_OWORD *)(a1 + 288);
  outlined consume of NavigationState.Base(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 304),
    *(_QWORD *)(a1 + 312),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(_QWORD *)(a1 + 368));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1879D0EE0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred(at:)()
{
  return closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred(at:)();
}

uint64_t sub_1879D0F10()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)()
{
  uint64_t v0;

  return specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(*(_QWORD **)(v0 + 16), *(uint64_t **)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(*(_QWORD **)(v0 + 16), *(uint64_t **)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #2 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(*(_QWORD **)(v0 + 16), *(uint64_t **)(v0 + 24));
}

void partial apply for closure #1 in UIHostingController.initialDataDrivenPresentationMode(canPop:)(_BYTE *a1@<X8>)
{
  uint64_t v1;

  closure #1 in UIHostingController.initialDataDrivenPresentationMode(canPop:)(*(_BYTE *)(v1 + 32), a1);
}

void partial apply for specialized closure #2 in UIHostingController.initialDataDrivenPresentationMode(canPop:)(char *a1)
{
  uint64_t v1;

  specialized closure #2 in UIHostingController.initialDataDrivenPresentationMode(canPop:)(*a1, *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void specialized closure #2 in UIHostingController.initialDataDrivenPresentationMode(canPop:)(char a1, char a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  char v7;
  id v8;

  if ((a1 & 1) == 0 && (a2 & 1) != 0)
  {
    v3 = a3 + 16;
    swift_beginAccess();
    v4 = (void *)MEMORY[0x18D760234](v3);
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v4, sel_navigationController);

      if (v6)
      {
        static Transaction.current.getter();
        v7 = Transaction.disablesAnimations.getter();
        swift_release();
        v8 = objc_msgSend(v6, sel_popViewControllerAnimated_, (v7 & 1) == 0);

      }
    }
  }
}

double _ss5SliceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0H8SequenceVy___AC22_VariadicView_ChildrenVAC08ModifiedG0VyAC0D14ColumnModifierVAOyAC09InjectKeyO0VAC0d16BackgroundReaderO033_7632008E3567AB610EB09B57688D0EDELLVGGGGSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0x7000000000000007;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0xF000000000000007;
  *(_OWORD *)(a1 + 320) = xmmword_187C77630;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  return result;
}

void type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(uint64_t a1)
{
  type metadata accessor for (offset: Int, element: TableSections.Item)?(a1, &lazy cache variable for type metadata for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?, (void (*)(uint64_t))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>);
}

void type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>)
  {
    type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
    lazy protocol witness table accessor for type NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance NavigationState.StackContent.Views.ViewsSequence<A, B>();
    v0 = type metadata accessor for Slice();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>);
  }
}

unint64_t lazy protocol witness table accessor for type NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance NavigationState.StackContent.Views.ViewsSequence<A, B>;
  if (!lazy protocol witness table cache variable for type NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance NavigationState.StackContent.Views.ViewsSequence<A, B>)
  {
    v1 = type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationState.StackContent.Views.ViewsSequence<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance NavigationState.StackContent.Views.ViewsSequence<A, B>);
  }
  return result;
}

uint64_t _ss5SliceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0H8SequenceVy___AC22_VariadicView_ChildrenVAC08ModifiedG0VyAC0D14ColumnModifierVAOyAC09InjectKeyO0VAC0d16BackgroundReaderO033_7632008E3567AB610EB09B57688D0EDELLVGGGGSgWOg(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 232) >> 57) & 0x38 | *(_QWORD *)(a1 + 232) & 7 | (*(_QWORD *)(a1 + 312) >> 51) & 0x1E00 | ((*(_QWORD *)(a1 + 312) & 7) << 6) & 0x1FFF | (*(_DWORD *)(a1 + 328) >> 3 << 13);
  if (v1 > 0x80000000)
    return -v1;
  else
    return 0;
}

uint64_t outlined release of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v10 = *(_OWORD *)(a1 + 336);
  v11 = *(_OWORD *)(a1 + 352);
  v8 = *(_OWORD *)(a1 + 304);
  v9 = *(_OWORD *)(a1 + 320);
  v6 = *(_OWORD *)(a1 + 272);
  v7 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 208);
  outlined consume of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((unint64_t *)&v11 + 1),
    *(_QWORD *)(a1 + 368));
  return a1;
}

uint64_t outlined consume of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int16 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,unint64_t a46,uint64_t a47)
{
  uint64_t result;

  result = a9;
  if ((~a30 & 0x7000000000000007) != 0
    || (a40 & 0xF000000000000007) != 0xF000000000000007
    || (a42 & 0xFFFFFFFFFFFFFFF8) != 0x3FFFF8
    || (a46 & 0xFFFFFFFFFF0000FCLL) != 0)
  {
    outlined consume of NavigationState.Base(a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27,
      a28,
      a29,
      a30,
      a31,
      a32,
      a33,
      a34,
      a35,
      a36,
      a37,
      a38,
      a39,
      a40,
      a41,
      a42,
      a43,
      a44,
      a45,
      a46,
      a47);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined retain of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v6 = *(_OWORD *)(a1 + 352);
  v4 = *(_OWORD *)(a1 + 320);
  v5 = *(_OWORD *)(a1 + 336);
  v3 = *(_OWORD *)(a1 + 288);
  outlined copy of NavigationState.Base(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 304),
    *(_QWORD *)(a1 + 312),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    *(_QWORD *)(a1 + 368));
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1879D1544()
{
  return swift_deallocObject();
}

_QWORD *partial apply for specialized closure #1 in _UIHostingView.cancelAsyncRendering()@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return specialized closure #1 in _UIHostingView.cancelAsyncRendering()(*(_QWORD **)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)()
{
  return closure #1 in closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)();
}

uint64_t partial apply for specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)()
{
  uint64_t v0;

  return specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(*(_QWORD **)(v0 + 16), *(uint64_t **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

{
  uint64_t v0;

  return specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(*(_QWORD **)(v0 + 16), *(uint64_t **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

{
  uint64_t v0;

  return specialized closure #2 in closure #1 in NavigationStackCoordinator.setViewControllers<A, B>(of:to:animated:transaction:transparentBackground:)(*(_QWORD **)(v0 + 16), *(uint64_t **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1879D15D8()
{
  return swift_deallocObject();
}

uint64_t outlined assign with take of UIKitNavigationController.PlatformNavigationRequestStrategy(uint64_t a1, uint64_t a2)
{
  assignWithTake for _PresentationTransitionOutputs.Content(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>, (uint64_t)&type metadata for PlatformNavigationPresentationBridgingEnabledKey, (uint64_t)&protocol witness table for PlatformNavigationPresentationBridgingEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t *partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  v3 = result[1];
  if (*result)
    v4 = 1;
  else
    v4 = 2;
  v5 = *((unsigned __int8 *)result + 16);
  v6 = result[3];
  *(_BYTE *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v2;
  return result;
}

{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result[3];
  if (result[4])
    v3 = 1;
  else
    v3 = 2;
  v4 = *((unsigned __int8 *)result + 16);
  v6 = *result;
  v5 = result[1];
  *(_BYTE *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t partial apply for closure #1 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)()
{
  return closure #1 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)();
}

char *partial apply for specialized closure #2 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)()
{
  return partial apply for specialized closure #2 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)();
}

{
  return partial apply for specialized closure #2 in NavigationStackCoordinator.makeRootHostingController(environment:transparentBackground:strategy:)();
}

{
  uint64_t v0;

  return specialized NavigationStrategy.viewControllerCommon(for:entering:canPop:isRoot:)(**(_QWORD **)(v0 + 24), 0, **(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 8));
}

void partial apply for specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(void (*a1)(const void *, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v1;

  specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(*(_QWORD *)(v1 + 16), (const void *)(v1 + 24), *(_QWORD *)(v1 + 416), *(_QWORD *)(v1 + 424), *(_BYTE *)(v1 + 432), a1);
}

void partial apply for specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(uint64_t, _BYTE *, uint64_t))
{
  uint64_t *v4;

  specialized closure #1 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(v4[2], v4 + 3, v4[52], v4[53], v4[54], v4[55], v4[56], a1, a2, a3, a4);
}

uint64_t partial apply for specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(char **a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BYTE v5[416];

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *a1;
  outlined init with take of TableCellFormula(*(_QWORD *)(v1 + 24), (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>?);
  return specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v3, (uint64_t)v5, v2) & 1;
}

{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BYTE v5[480];

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *a1;
  outlined init with take of TableCellFormula(*(_QWORD *)(v1 + 24), (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?);
  return specialized closure #1 in NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:)(v3, (uint64_t)v5, v2) & 1;
}

uint64_t sub_1879D1834()
{
  return swift_deallocObject();
}

uint64_t sub_1879D18C0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1879D18E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1879D190C()
{
  return swift_deallocObject();
}

uint64_t sub_1879D1958()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1879D19E0()
{
  return swift_deallocObject();
}

uint64_t sub_1879D1A2C()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_30Tm()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  swift_release();
  v5 = *(_OWORD *)(v0 + 312);
  v3 = *(_OWORD *)(v0 + 280);
  v4 = *(_OWORD *)(v0 + 296);
  v2 = *(_OWORD *)(v0 + 248);
  outlined consume of NavigationState.Base(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176),
    *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    *(_QWORD *)(v0 + 224),
    *(_QWORD *)(v0 + 232),
    *(_QWORD *)(v0 + 240),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(v0 + 264),
    *(_QWORD *)(v0 + 272),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(_QWORD *)(v0 + 328));

  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_34Tm()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  swift_release();
  v5 = *(_OWORD *)(v0 + 312);
  v3 = *(_OWORD *)(v0 + 280);
  v4 = *(_OWORD *)(v0 + 296);
  v2 = *(_OWORD *)(v0 + 248);
  outlined consume of NavigationState.Base(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176),
    *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    *(_QWORD *)(v0 + 224),
    *(_QWORD *)(v0 + 232),
    *(_QWORD *)(v0 + 240),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(v0 + 264),
    *(_QWORD *)(v0 + 272),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(_QWORD *)(v0 + 328));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1879D1C34()
{
  return swift_deallocObject();
}

uint64_t outlined copy of NavigationStrategy_Phone?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

void partial apply for specialized closure #1 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(uint64_t a1, void (*a2)(void), uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13[8];
  uint64_t v14;

  v4 = v3[2];
  v5 = v3[3];
  v6 = v3[4];
  v7 = v3[5];
  v8 = *(_QWORD *)(v4 + 16);
  v13[0] = *(_BYTE *)(v4 + 8);
  v14 = v8;
  v11 = v4;
  v12 = v5;
  v9[2] = v6;
  v9[3] = v4;
  v9[4] = v7;
  NavigationHostingControllerCache_UIKit.Source.ensureViewController(at:forPushing:configureExisting:makeNew:)(v13, 1, a2, (uint64_t)v10, a3, (void (*)(void))v9);
}

uint64_t objectdestroy_87Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1879D1D50()
{
  return swift_deallocObject();
}

uint64_t sub_1879D1DA0()
{
  return swift_deallocObject();
}

uint64_t sub_1879D1DEC()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_37Tm_0()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

double partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v6;
  return result;
}

void partial apply for closure #1 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:)(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(void))(v1 + 32), *(_QWORD *)(v1 + 40), *(uint64_t (**)(uint64_t))(v1 + 48), *(void (**)(void))(v1 + 56));
}

_QWORD *closure #1 in _UIHostingView.cancelAsyncRendering()specialized partial apply@<X0>(BOOL *a1@<X8>)
{
  return partial apply for specialized closure #1 in _UIHostingView.cancelAsyncRendering()(a1);
}

void closure #1 in _UIHostingView.updateRemovedState()specialized partial apply()
{
  partial apply for specialized closure #1 in _UIHostingView.updateRemovedState()();
}

uint64_t View.readNavigationDestinations<A>(position:isActive:reader:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t DestinationsModifier;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD v18[2];
  __int128 v19;
  char v20;

  DestinationsModifier = type metadata accessor for ReadDestinationsModifier(255, a5, a7, a4);
  v12 = type metadata accessor for ModifiedContent();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v18 - v15;
  outlined init with take of Image.Resolved?(a1, (uint64_t)&v19, &lazy cache variable for type metadata for NavigationStackViewPosition?, (uint64_t)&type metadata for NavigationStackViewPosition);
  v20 = a2;
  MEMORY[0x18D75B4AC](&v19, a4, DestinationsModifier, a6);
  *(_BYTE *)(swift_allocObject() + 16) = a2;
  v18[0] = a6;
  v18[1] = &protocol witness table for ReadDestinationsModifier<A>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v18);
  View.transformPreference<A>(_:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t View.processNavigationDestinations<A>(authority:processor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE v14[24];

  outlined init with copy of NavigationAuthority?(a1, (uint64_t)v13);
  outlined init with take of Image.Resolved?((uint64_t)v13, (uint64_t)v14, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  v11 = type metadata accessor for PositionedNavigationDestinationProcessor(0, a4, a6, v10);
  MEMORY[0x18D75B4AC](v14, a3, v11, a5);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v14, v11);
}

uint64_t closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)(uint64_t result, char a2)
{
  _QWORD *v2;

  if ((a2 & 1) != 0)
  {
    v2 = (_QWORD *)result;
    result = swift_bridgeObjectRelease();
    *v2 = MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t type metadata accessor for ReadDestinationsModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReadDestinationsModifier);
}

uint64_t sub_1879D223C()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI4ViewPAAE26readNavigationDestinations8position8isActive6readerQrAA0e5StackC8PositionVSg_Sbqd__mtAA0E17DestinationReaderRd__lFySayAA0eM12ResolverBaseCGzcfU_TA_0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  if (*(_BYTE *)(v1 + 16) == 1)
  {
    v2 = (_QWORD *)result;
    result = swift_bridgeObjectRelease();
    *v2 = MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReadDestinationsModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 41);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ReadDestinationsModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 41) = a2 + 1;
  }
  return result;
}

uint64_t destroy for PositionedNavigationDestinationProcessor(uint64_t result)
{
  if (*(_QWORD *)(result + 8) != 1)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for PositionedNavigationDestinationProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a2 + 8) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    swift_weakCopyInit();
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for PositionedNavigationDestinationProcessor(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8) == 1)
  {
    if (v4 == 1)
    {
      v5 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v5;
    }
    else
    {
      swift_weakCopyInit();
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      swift_retain();
      swift_retain();
    }
  }
  else if (v4 == 1)
  {
    outlined destroy of NavigationAuthority(a1);
    v6 = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = v6;
  }
  else
  {
    swift_weakCopyAssign();
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    swift_retain();
    swift_release();
  }
  return a1;
}

__n128 initializeWithTake for PositionedNavigationDestinationProcessor(__n128 *a1, __n128 *a2)
{
  __n128 *v2;
  __n128 result;
  uint64_t v4;

  v2 = (__n128 *)&a2->n128_i8[8];
  if (a2->n128_u64[1] == 1)
  {
    result = *a2;
    *a1 = *a2;
    a1[1].n128_u64[0] = a2[1].n128_u64[0];
  }
  else
  {
    v4 = swift_weakTakeInit();
    result = *v2;
    *(__n128 *)(v4 + 8) = *v2;
  }
  return result;
}

uint64_t assignWithTake for PositionedNavigationDestinationProcessor(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;

  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) != 1)
  {
    if (v5 != 1)
    {
      swift_weakTakeAssign();
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_release();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_release();
      return a1;
    }
    outlined destroy of NavigationAuthority(a1);
    goto LABEL_6;
  }
  if (v5 == 1)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  swift_weakTakeInit();
  *v4 = *v6;
  return a1;
}

uint64_t type metadata accessor for PositionedNavigationDestinationProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PositionedNavigationDestinationProcessor);
}

ValueMetadata *type metadata accessor for PositionedNavigationDestination.Key()
{
  return &type metadata for PositionedNavigationDestination.Key;
}

_UNKNOWN **base witness table accessor for ViewModifier in PositionedNavigationDestinationProcessor<A>()
{
  return &protocol witness table for PositionedNavigationDestinationProcessor<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in ReadDestinationsModifier<A>()
{
  return &protocol witness table for ReadDestinationsModifier<A>;
}

uint64_t static ReadDestinationsModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t result;
  int v32;
  unint64_t *v33;
  _QWORD v34[8];
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  int v65;

  v41 = a5;
  v40 = a4;
  v42 = a6;
  v38 = *a1;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v11 = *(_DWORD *)(a2 + 80);
  v57 = *(_QWORD *)a2;
  v58 = v7;
  v60 = *(_OWORD *)(a2 + 24);
  v59 = v8;
  v61 = v10;
  v62 = v9;
  v39 = *(_OWORD *)(a2 + 56);
  v63 = v39;
  v64 = *(_QWORD *)(a2 + 72);
  v65 = v11;
  type metadata accessor for _AnyPreferenceKey<NavigationDestinationKey>();
  lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationDestinationKey> and conformance _AnyPreferenceKey<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  PreferenceKeys.remove<A>(_:)();
  v45 = v57;
  v46 = v58;
  v47 = v8;
  v48 = v60;
  v49 = v10;
  v50 = v9;
  v51 = v39;
  v52 = v64;
  v53 = v65;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  a3(&v54, v12, &v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v13 = v54;
  v14 = v55;
  v45 = v54;
  v46 = v55;
  swift_bridgeObjectRetain();
  v15 = PreferencesOutputs.subscript.getter();
  v16 = swift_bridgeObjectRelease();
  if ((v15 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
  }
  else
  {
    v37 = &v35;
    MEMORY[0x1E0C80A78](v16, v17);
    v36 = v9;
    v19 = v41;
    v34[6] = v40;
    v18 = v40;
    v34[7] = v41;
    v20 = v38;
    LODWORD(v45) = v38;
    type metadata accessor for ReadDestinationsModifier(255, v40, v41, v21);
    type metadata accessor for _GraphValue();
    v22 = MEMORY[0x1E0CE1470];
    v23 = MEMORY[0x1E0DEAFA0];
    _GraphValue.subscript.getter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v23, (uint64_t (*)(_QWORD, uint64_t))v22);
    v24 = _GraphValue.value.getter();
    LODWORD(v23) = v24;
    MEMORY[0x1E0C80A78](v24, v25);
    v34[2] = v18;
    v34[3] = v19;
    LODWORD(v45) = v20;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationStackViewPosition?, (uint64_t)&type metadata for NavigationStackViewPosition, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    _GraphValue.subscript.getter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for _GraphValue<NavigationStackViewPosition?>, &lazy cache variable for type metadata for NavigationStackViewPosition?, (uint64_t)&type metadata for NavigationStackViewPosition, (uint64_t (*)(uint64_t, uint64_t))v22);
    LODWORD(v22) = _GraphValue.value.getter();
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
    v28 = v27;
    v29 = AGMakeUniqueID();
    v45 = __PAIR64__(v22, v23);
    v46 = v15;
    v47 = v26;
    *(_QWORD *)&v48 = v28;
    *((_QWORD *)&v48 + 1) = v29;
    v43 = v36;
    v44 = v39;
    MEMORY[0x1E0C80A78](v36, v30);
    v34[-4] = v18;
    v34[-3] = v19;
    v34[-2] = &v45;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
    outlined release of StrokeStyle((uint64_t)&v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v13 = v54;
    v14 = v55;
  }
  v32 = v56;
  v33 = v42;
  *v42 = v13;
  *((_DWORD *)v33 + 2) = v14;
  *((_DWORD *)v33 + 3) = v32;
  return result;
}

uint64_t closure #1 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v4 = a1 + 41;
  v9[2] = type metadata accessor for ReadDestinationsModifier(0, a2, a3, a4);
  v5 = MEMORY[0x1E0DEAFA0];
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v9, v5, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t closure #2 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = type metadata accessor for ReadDestinationsModifier(0, a2, a3, a4);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationStackViewPosition?, (uint64_t)&type metadata for NavigationStackViewPosition, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, v6, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t implicit closure #1 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  _OWORD v10[2];
  uint64_t v11;
  _BYTE v12[16];
  uint64_t Destinations;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v5;
  v11 = *(_QWORD *)(a1 + 32);
  Destinations = type metadata accessor for ReadDestinationsModifier.RequestsTransform(0, a2, a3, a4);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReadDestinationsModifier<A>.RequestsTransform, Destinations);
  outlined retain of ReadDestinationsModifier<A>.RequestsTransform(a1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v12, Destinations, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t ReadDestinationsModifier.RequestsTransform.updateValue()()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  uint64_t Value;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t *v14;
  char v15;
  uint64_t result;
  char v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  void *v39;
  void *v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  os_log_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  Swift::String v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  _OWORD v63[2];
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v49 - v3;
  v5 = v0[1];
  v64 = *v0;
  v65 = v5;
  v66 = *((_QWORD *)v0 + 4);
  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationStackViewPosition?, (uint64_t)&type metadata for NavigationStackViewPosition, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    Value = AGGraphGetValue();
    v57 = v7;
    v8 = *(_QWORD *)Value;
    v9 = *(NSObject **)(Value + 8);
    v10 = *(unsigned __int8 *)(Value + 16);
    v12 = *(_QWORD *)(Value + 24);
    v11 = *(_QWORD *)(Value + 32);
    v13 = *(unsigned __int8 *)(Value + 40);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [NavigationDestinationResolverBase], (uint64_t (*)(uint64_t))type metadata accessor for NavigationDestinationResolverBase, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v14 = (unint64_t *)AGGraphGetValue();
    if (v13 == 2)
    {
      type metadata accessor for (_:)();
      result = AGGraphGetOutputValue();
      if (!result)
        goto LABEL_6;
      return result;
    }
    v17 = v15;
    v55 = v12;
    v56 = v4;
    v58 = *v14;
    v18 = v13 & 1;
    *(_QWORD *)&v62 = v8;
    *((_QWORD *)&v62 + 1) = v9;
    v54 = v9;
    LOBYTE(v63[0]) = v10;
    *((_QWORD *)&v63[0] + 1) = v12;
    *(_QWORD *)&v63[1] = v11;
    BYTE8(v63[1]) = v13 & 1;
    v19 = HIDWORD(v66);
    v53 = type metadata accessor for (_:)();
    result = AGGraphGetOutputValue();
    if (!result || (v57 & 1) != 0)
    {
      if ((v17 & 1) == 0)
        goto LABEL_13;
    }
    else if ((v17 & 1) == 0)
    {
      return result;
    }
    *((_DWORD *)v0 + 9) = ++v19;
LABEL_13:
    v20 = *((_QWORD *)&v65 + 1);
    if (v10 == 4)
      v21 = v11;
    else
      v21 = v8;
    if (!v18)
      v21 = -1;
    v22 = v66;
    *(_QWORD *)&v68 = v58;
    *((_QWORD *)&v68 + 1) = v21;
    v69 = v65;
    v70 = 0u;
    v71 = 0u;
    LOBYTE(v72) = 3;
    *((_QWORD *)&v72 + 1) = v54;
    *(_QWORD *)&v73 = v10;
    v76 = 0;
    *((_QWORD *)&v73 + 1) = v55;
    v74 = 0uLL;
    *(_QWORD *)&v75 = 0;
    BYTE8(v75) = 0;
    v23 = v65;
    if ((_DWORD)v66)
    {
      v24 = (uint64_t)v56;
      if ((_DWORD)v66 != -1)
        v22 = merge32(_:_:)(v66, v19);
    }
    else
    {
      v22 = v19;
      v24 = (uint64_t)v56;
    }
    v83 = v74;
    v84 = v75;
    v85 = v76;
    v79 = v70;
    v80 = v71;
    v81 = v72;
    v82 = v73;
    v77 = v68;
    v78 = v69;
    swift_bridgeObjectRetain();
    outlined retain of ReadDestinationsModifier<A>.RequestsTransform((uint64_t)&v64);
    swift_bridgeObjectRetain();
    outlined retain of ReadDestinationsModifier<A>.RequestsTransform((uint64_t)&v64);
    outlined retain of NavigationRequest((uint64_t)&v68);
    static Log.navigation.getter();
    v25 = type metadata accessor for Logger();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
    {
      outlined release of StrokeStyle((uint64_t)&v64);
      swift_bridgeObjectRelease();
      outlined destroy of TableRowID?(v24, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
LABEL_39:
      v43 = swift_allocObject();
      v44 = v63[0];
      *(_OWORD *)(v43 + 16) = v62;
      *(_OWORD *)(v43 + 32) = v44;
      *(_OWORD *)(v43 + 41) = *(_OWORD *)((char *)v63 + 9);
      v45 = v84;
      *(_OWORD *)(v43 + 160) = v83;
      *(_OWORD *)(v43 + 176) = v45;
      *(_QWORD *)(v43 + 192) = v85;
      v46 = v80;
      *(_OWORD *)(v43 + 96) = v79;
      *(_OWORD *)(v43 + 112) = v46;
      v47 = v82;
      *(_OWORD *)(v43 + 128) = v81;
      *(_OWORD *)(v43 + 144) = v47;
      v48 = v78;
      *(_OWORD *)(v43 + 64) = v77;
      *(_OWORD *)(v43 + 80) = v48;
      *(_DWORD *)(v43 + 200) = v22;
      v60 = (uint64_t)partial apply for closure #4 in ReadDestinationsModifier.RequestsTransform.updateValue();
      v61 = v43;
      AGGraphSetOutputValue();
      outlined release of NavigationRequest((uint64_t)&v68);
      return swift_release();
    }
    swift_bridgeObjectRetain();
    outlined retain of ReadDestinationsModifier<A>.RequestsTransform((uint64_t)&v64);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v27, (os_log_type_t)v28))
    {

      outlined release of StrokeStyle((uint64_t)&v64);
      outlined release of StrokeStyle((uint64_t)&v64);
      swift_bridgeObjectRelease_n();
LABEL_38:
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
      goto LABEL_39;
    }
    v52 = v28;
    v54 = v27;
    v55 = v26;
    v57 = v25;
    v29 = swift_slowAlloc();
    v51 = swift_slowAlloc();
    v67 = v51;
    *(_DWORD *)v29 = 136315650;
    v30 = NavigationStackViewPosition.description.getter();
    v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v67);
    v32 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    swift_bridgeObjectRetain();
    v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v20, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined release of StrokeStyle((uint64_t)&v64);
    outlined release of StrokeStyle((uint64_t)&v64);
    outlined release of StrokeStyle((uint64_t)&v64);
    *(_WORD *)(v29 + 22) = 2080;
    v60 = 91;
    v61 = 0xE100000000000000;
    if (v32 >> 62)
    {
      swift_bridgeObjectRetain();
      v33 = _CocoaArrayWrapper.endIndex.getter();
      if (v33)
        goto LABEL_27;
    }
    else
    {
      v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v33)
      {
LABEL_27:
        v50 = v22;
        if (v33 < 1)
          __break(1u);
        v34 = 0;
        v35 = v32 & 0xC000000000000001;
        do
        {
          if (v35)
          {
            v36 = MEMORY[0x18D75E3BC](v34, v32);
          }
          else
          {
            v36 = *(_QWORD *)(v32 + 8 * v34 + 32);
            swift_retain();
          }
          ++v34;
          v37._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v36 + 128))();
          v59._countAndFlagsBits = 2314;
          v59._object = (void *)0xE200000000000000;
          String.append(_:)(v37);
          swift_bridgeObjectRelease();
          String.append(_:)(v59);
          swift_release();
          swift_bridgeObjectRelease();
          v32 = v58;
        }
        while (v33 != v34);
        swift_bridgeObjectRelease();
        v38 = v60;
        v39 = (void *)v61;
        v22 = v50;
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    v39 = (void *)0xE100000000000000;
    v38 = 91;
LABEL_37:
    v60 = 93;
    v61 = 0xE100000000000000;
    v59._countAndFlagsBits = v38;
    v59._object = v39;
    swift_bridgeObjectRetain();
    v59._countAndFlagsBits = String.init<A>(_:)();
    v59._object = v40;
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59._countAndFlagsBits, (unint64_t)v59._object, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v41 = v54;
    _os_log_impl(&dword_186E48000, v54, (os_log_type_t)v52, "Reading navigation destinations at %s\nReader: %s\nDestinations: %s", (uint8_t *)v29, 0x20u);
    v42 = v51;
    swift_arrayDestroy();
    MEMORY[0x18D760108](v42, -1, -1);
    MEMORY[0x18D760108](v29, -1, -1);

    v24 = (uint64_t)v56;
    v25 = v57;
    v26 = v55;
    goto LABEL_38;
  }
  type metadata accessor for (_:)();
  result = AGGraphGetOutputValue();
  if (!result)
  {
LABEL_6:
    *(_QWORD *)&v77 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    *((_QWORD *)&v77 + 1) = 0;
    return AGGraphSetOutputValue();
  }
  return result;
}

uint64_t closure #4 in ReadDestinationsModifier.RequestsTransform.updateValue()(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;

  outlined retain of NavigationRequest((uint64_t)a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, a2, isUniquelyReferenced_nonNull_native);
  *a1 = v8;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ReadDestinationsModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  return static ReadDestinationsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ReadDestinationsModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReadDestinationsModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance PositionedNavigationDestination.Key@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static PositionedNavigationDestination.Key.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t static PositionedNavigationDestinationProcessor._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, _DWORD *, _BYTE *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  int v63;
  _BYTE v64[12];
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;

  v56 = a4;
  v57 = a5;
  v60 = a6;
  v77 = *MEMORY[0x1E0C80C00];
  LODWORD(v47) = *a1;
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v10 = *((_DWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 7);
  v11 = *((_DWORD *)a2 + 8);
  v12 = *((_DWORD *)a2 + 9);
  v14 = a2[5];
  v13 = a2[6];
  v15 = *((_DWORD *)a2 + 14);
  v16 = *((_DWORD *)a2 + 15);
  v17 = *((_DWORD *)a2 + 16);
  v18 = *((_DWORD *)a2 + 17);
  v19 = *((_DWORD *)a2 + 18);
  v20 = *((_DWORD *)a2 + 19);
  v21 = *((_DWORD *)a2 + 20);
  *(_QWORD *)v64 = *a2;
  v55 = v7;
  *(_DWORD *)&v64[8] = v7;
  v66 = v8;
  v67 = __PAIR64__(v9, v10);
  v54 = v9;
  v68 = __PAIR64__(v12, v11);
  v69 = v14;
  v70 = v13;
  v59 = v13;
  v58 = v15;
  v71 = v15;
  v72 = v16;
  v53 = v16;
  v52 = v17;
  v73 = __PAIR64__(v18, v17);
  v51 = v18;
  v50 = v19;
  v74 = v19;
  v75 = v20;
  v49 = v20;
  v48 = v21;
  v76 = v21;
  a3(&v61, a1, v64);
  v22 = v61;
  v23 = v62;
  v24 = v63;
  *(_QWORD *)v64 = v61;
  *(_DWORD *)&v64[8] = v62;
  v65 = v63;
  result = _ViewOutputs.subscript.getter();
  if ((result & 0x100000000) == 0)
  {
    *(_DWORD *)v64 = v47;
    v47 = result;
    type metadata accessor for PositionedNavigationDestinationProcessor(255, v56, v57, v26);
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    closure #1 in static PositionedNavigationDestinationProcessor._makeView(modifier:inputs:body:)(1, v56, v57, v27);
    AGGraphCreateOffsetAttribute2();
    v46 = AGCreateWeakAttribute();
    *(_QWORD *)v64 = v6;
    *(_DWORD *)&v64[8] = v55;
    v66 = v8;
    v67 = __PAIR64__(v54, v10);
    v68 = __PAIR64__(v12, v11);
    v28 = v59;
    v69 = v14;
    v70 = v59;
    v29 = v58;
    v71 = v58;
    v72 = v53;
    v73 = __PAIR64__(v51, v52);
    v74 = v50;
    v75 = v49;
    v76 = v48;
    v55 = _ViewInputs.viewPhase.getter();
    lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v30 = v64[0];
    v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v56, v57);
    v33 = v32;
    UpdateCycleDetector.init()();
    v34 = *(_DWORD *)&v64[8];
    v35 = v65;
    v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v37 = *(_QWORD *)v64;
    *(_DWORD *)v64 = v47;
    *(_QWORD *)&v64[4] = v46;
    v65 = v55;
    LOBYTE(v66) = v30;
    v67 = v31;
    v68 = v33;
    v69 = v37;
    LODWORD(v70) = v34;
    BYTE4(v70) = v35;
    v71 = 0;
    v73 = v36;
    MEMORY[0x1E0C80A78](v36, v38);
    v44 = type metadata accessor for PositionedNavigationDestinationProcessor.PollingRule(0, v56, v57, v39);
    v45 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PositionedNavigationDestinationProcessor<A>.PollingRule, v44);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v64, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)&v43, v44, MEMORY[0x1E0DEDCE8], v40, MEMORY[0x1E0DEDD18], v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
    *(_QWORD *)v64 = v28;
    *(_DWORD *)&v64[8] = v29;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    result = swift_bridgeObjectRelease();
    v22 = v61;
    v23 = v62;
    v24 = v63;
  }
  v42 = v60;
  *v60 = v22;
  *((_DWORD *)v42 + 2) = v23;
  *((_DWORD *)v42 + 3) = v24;
  return result;
}

uint64_t closure #1 in static PositionedNavigationDestinationProcessor._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = type metadata accessor for PositionedNavigationDestinationProcessor(0, a2, a3, a4);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_23, (uint64_t)v10, v6, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t implicit closure #1 in static PositionedNavigationDestinationProcessor._makeView(modifier:inputs:body:)()
{
  type metadata accessor for (_:)();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for External<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<(_:)> and conformance External<A>();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t closure #2 in implicit closure #1 in static PositionedNavigationDestinationProcessor._makeView(modifier:inputs:body:)(unint64_t *a1)
{
  unint64_t v2;
  uint64_t result;

  v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t PositionedNavigationDestinationProcessor.PollingRule.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t Value;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  char *v80;
  __int128 v81[8];
  uint64_t v82;
  uint64_t v83;
  char *v84;
  _BYTE v85[24];
  __int128 v86;
  _OWORD v87[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[2];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v1 = v0;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v77 - v4;
  LOBYTE(v4) = *(_BYTE *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_DWORD *)(v0 + 48);
  v9 = *(_BYTE *)(v0 + 52);
  v10 = *(_DWORD *)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 64);
  v12 = *(_QWORD *)(v0 + 40);
  v79 = *(_OWORD *)v0;
  v88 = v79;
  LOBYTE(v89) = v4;
  *((_QWORD *)&v89 + 1) = v6;
  *(_QWORD *)&v90 = v7;
  *((_QWORD *)&v90 + 1) = v12;
  LODWORD(v91) = v8;
  BYTE4(v91) = v9;
  DWORD2(v91) = v10;
  *(_QWORD *)&v92 = v11;
  NavigationStackReader.ChildEnvironment.inheritedAuthority.getter((uint64_t)&v96);
  if (*((_QWORD *)&v96 + 1) == 1)
    return outlined destroy of TableRowID?((uint64_t)&v96, (uint64_t)&lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (*((_QWORD *)&v96 + 1) == 2)
    return outlined destroy of NavigationAuthority??((uint64_t)&v96);
  v77 = v5;
  v78 = v0 + 40;
  outlined init with take of NavigationAuthority((uint64_t)&v96, (uint64_t)v85);
  v14 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v14 != v10)
  {
    *(_DWORD *)(v0 + 56) = v14;
    *(_QWORD *)(v0 + 44) = 0xFFFFFFFFLL;
    *(_BYTE *)(v0 + 52) = 0;
  }
  v80 = (char *)MEMORY[0x1E0DEE9D8];
  v84 = (char *)MEMORY[0x1E0DEE9D8];
  Value = AGGraphGetValue();
  v16 = *(_QWORD *)Value;
  v17 = *(_QWORD *)Value + 64;
  v18 = 1 << *(_BYTE *)(*(_QWORD *)Value + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(*(_QWORD *)Value + 64);
  v21 = (unint64_t)(v18 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v22 = 0;
  while (v20)
  {
    v23 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
    v24 = v23 | (v22 << 6);
LABEL_29:
    v28 = *(_QWORD *)(v16 + 56);
    v29 = (__int128 *)(*(_QWORD *)(v16 + 48) + 48 * v24);
    v30 = v29[1];
    v31 = *(__int128 *)((char *)v29 + 25);
    v86 = *v29;
    v87[0] = v30;
    *(_OWORD *)((char *)v87 + 9) = v31;
    v32 = (__int128 *)(v28 + 144 * v24);
    v33 = v32[1];
    v34 = v32[2];
    v35 = v32[4];
    v91 = v32[3];
    v92 = v35;
    v89 = v33;
    v90 = v34;
    v36 = v32[5];
    v37 = v32[6];
    v38 = v32[7];
    *(_OWORD *)((char *)v95 + 12) = *(__int128 *)((char *)v32 + 124);
    v94 = v37;
    v95[0] = v38;
    v93 = v36;
    v88 = *v32;
    v39 = *(_QWORD *)(v1 + 64);
    if (*(_QWORD *)(v39 + 16) && (v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v86), (v41 & 1) != 0))
    {
      v42 = *(_DWORD *)(*(_QWORD *)(v39 + 56) + 4 * v40);
      if (v42 != -1 && DWORD2(v95[1]) != -1 && v42 == DWORD2(v95[1]))
      {
LABEL_11:
        outlined retain of NavigationRequest((uint64_t)&v88);
        goto LABEL_12;
      }
    }
    else if (!DWORD2(v95[1]))
    {
      goto LABEL_11;
    }
    outlined retain of NavigationRequest((uint64_t)&v88);
    outlined retain of NavigationRequest((uint64_t)&v88);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v43 = v80;
    else
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v80 + 2) + 1, 1, v80);
    v45 = *((_QWORD *)v43 + 2);
    v44 = *((_QWORD *)v43 + 3);
    v46 = (char *)(v45 + 1);
    if (v45 >= v44 >> 1)
    {
      v80 = (char *)(v45 + 1);
      v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1, v43);
      v46 = v80;
      v43 = v54;
    }
    v98 = v90;
    v99 = v91;
    v104 = *(_QWORD *)&v95[1];
    v102 = v94;
    v103 = v95[0];
    v100 = v92;
    v101 = v93;
    v96 = v88;
    v97 = v89;
    *((_QWORD *)v43 + 2) = v46;
    v47 = &v43[136 * v45];
    *((_OWORD *)v47 + 2) = v96;
    v48 = v97;
    v49 = v98;
    v50 = v100;
    *((_OWORD *)v47 + 5) = v99;
    *((_OWORD *)v47 + 6) = v50;
    *((_OWORD *)v47 + 3) = v48;
    *((_OWORD *)v47 + 4) = v49;
    v51 = v101;
    v52 = v102;
    v53 = v103;
    *((_QWORD *)v47 + 20) = v104;
    *((_OWORD *)v47 + 8) = v52;
    *((_OWORD *)v47 + 9) = v53;
    *((_OWORD *)v47 + 7) = v51;
    v80 = v43;
    v84 = v43;
LABEL_12:
    $defer #1 <A>() in PositionedNavigationDestinationProcessor.PollingRule.updateValue()(v1, &v86, (uint64_t)&v88);
    result = outlined release of NavigationRequest((uint64_t)&v88);
  }
  v25 = v22 + 1;
  if (__OFADD__(v22, 1))
  {
    __break(1u);
LABEL_56:
    __break(1u);
    return result;
  }
  if (v25 >= v21)
    goto LABEL_40;
  v26 = *(_QWORD *)(v17 + 8 * v25);
  ++v22;
  if (v26)
    goto LABEL_28;
  v22 = v25 + 1;
  if (v25 + 1 >= v21)
    goto LABEL_40;
  v26 = *(_QWORD *)(v17 + 8 * v22);
  if (v26)
    goto LABEL_28;
  v22 = v25 + 2;
  if (v25 + 2 >= v21)
    goto LABEL_40;
  v26 = *(_QWORD *)(v17 + 8 * v22);
  if (v26)
  {
LABEL_28:
    v20 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v22 << 6);
    goto LABEL_29;
  }
  v27 = v25 + 3;
  if (v27 < v21)
  {
    v26 = *(_QWORD *)(v17 + 8 * v27);
    if (!v26)
    {
      while (1)
      {
        v22 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_56;
        if (v22 >= v21)
          goto LABEL_40;
        v26 = *(_QWORD *)(v17 + 8 * v22);
        ++v27;
        if (v26)
          goto LABEL_28;
      }
    }
    v22 = v27;
    goto LABEL_28;
  }
LABEL_40:
  swift_release();
  if (*((_QWORD *)v80 + 2) && (UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
  {
    v56 = *(_QWORD *)(v1 + 24);
    v55 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain();
    v57 = (uint64_t)v77;
    static Log.navigation.getter();
    v58 = type metadata accessor for Logger();
    v59 = *(_QWORD *)(v58 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58) == 1)
    {
      swift_bridgeObjectRelease();
      outlined destroy of TableRowID?(v57, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    }
    else
    {
      v60 = v80;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v61 = Logger.logObject.getter();
      v62 = static os_log_type_t.debug.getter();
      v63 = v62;
      if (os_log_type_enabled(v61, v62))
      {
        v64 = swift_slowAlloc();
        *(_QWORD *)&v79 = v59;
        v65 = v64;
        v66 = swift_slowAlloc();
        *(_QWORD *)&v81[0] = v66;
        *(_DWORD *)v65 = 136315394;
        LODWORD(v78) = v63;
        swift_bridgeObjectRetain();
        v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v55, (uint64_t *)v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v65 + 12) = 2080;
        v67 = specialized implicit closure #5 in PositionedNavigationDestinationProcessor.PollingRule.updateValue()((uint64_t)v60);
        v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, (uint64_t *)v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_186E48000, v61, (os_log_type_t)v78, "Processing navigation destinations from\n- Processor: %s\n- Requests: %s", (uint8_t *)v65, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x18D760108](v66, -1, -1);
        v69 = v65;
        v59 = v79;
        v57 = (uint64_t)v77;
        MEMORY[0x18D760108](v69, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
    }
    swift_beginAccess();
    v70 = *((_QWORD *)v84 + 2);
    if (v70)
    {
      v71 = *(unsigned __int8 *)(v1 + 16);
      v72 = v84 + 32;
      do
      {
        if (!v71)
        {
          v73 = *((_OWORD *)v72 + 7);
          v81[6] = *((_OWORD *)v72 + 6);
          v81[7] = v73;
          v82 = *((_QWORD *)v72 + 16);
          v74 = *((_OWORD *)v72 + 3);
          v81[2] = *((_OWORD *)v72 + 2);
          v81[3] = v74;
          v75 = *((_OWORD *)v72 + 5);
          v81[4] = *((_OWORD *)v72 + 4);
          v81[5] = v75;
          v76 = *((_OWORD *)v72 + 1);
          v81[0] = *(_OWORD *)v72;
          v81[1] = v76;
          NavigationAuthority.enqueueRequest(_:)(v81);
        }
        v72 += 136;
        --v70;
      }
      while (v70);
    }
  }
  swift_bridgeObjectRelease();
  return outlined destroy of NavigationAuthority((uint64_t)v85);
}

uint64_t $defer #1 <A>() in PositionedNavigationDestinationProcessor.PollingRule.updateValue()(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  int v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;

  v5 = *(_DWORD *)(a3 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, a2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 64) = v8;
  return swift_bridgeObjectRelease();
}

unint64_t implicit closure #3 in implicit closure #2 in PositionedNavigationDestinationProcessor.PollingRule.updateValue()()
{
  return 0xD000000000000020;
}

uint64_t specialized implicit closure #5 in PositionedNavigationDestinationProcessor.PollingRule.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  v42 = 91;
  v43 = 0xE100000000000000;
  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    swift_bridgeObjectRetain_n();
    v31 = v1 - 1;
    v3 = 32;
    for (i = v2; ; v2 = i)
    {
      v29 = v3;
      v4 = *(_OWORD *)(v2 + v3 + 64);
      v5 = *(_OWORD *)(v2 + v3 + 96);
      v6 = *(_OWORD *)(v2 + v3 + 112);
      v38 = *(_OWORD *)(v2 + v3 + 80);
      v39 = v5;
      v40 = v6;
      v7 = *(_OWORD *)(v2 + v3 + 16);
      v33 = *(_OWORD *)(v2 + v3);
      v34 = v7;
      v8 = *(_OWORD *)(v2 + v3 + 48);
      v35 = *(_OWORD *)(v2 + v3 + 32);
      v36 = v8;
      v37 = v4;
      v41 = *(_QWORD *)(v2 + v3 + 128);
      v27 = *((_QWORD *)&v4 + 1);
      v28 = v38;
      v30 = *((_QWORD *)&v39 + 1);
      v25 = v39;
      v26 = v6;
      v9 = v33;
      v10 = v34;
      v11 = v35;
      v12 = v8;
      v13 = v4;
      outlined retain of NavigationRequest((uint64_t)&v33);
      outlined retain of NavigationRequest((uint64_t)&v33);
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      outlined copy of NavigationRequest.Action(v9, *((uint64_t *)&v9 + 1), v10, *((uint64_t *)&v10 + 1), v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13);
      NavigationRequest.Action.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      outlined consume of NavigationRequest.Action(v9, *((uint64_t *)&v9 + 1), v10, *((uint64_t *)&v10 + 1), v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13);
      v15._countAndFlagsBits = 0x203A79656B5B205DLL;
      v15._object = (void *)0xE800000000000000;
      String.append(_:)(v15);
      if (!(v30 >> 62))
        break;
      if (v30 >> 62 == 1)
      {
        v44 = v27;
        v45 = v28;
        v46 = v25;
        v47 = v30 & 1;
        v48 = v26;
        v16 = NavigationState.ListKey.description.getter();
LABEL_7:
        v18 = v17;
        goto LABEL_9;
      }
      v18 = 0xE500000000000000;
      v16 = 0x74696C7073;
LABEL_9:
      v19 = v18;
      String.append(_:)(*(Swift::String *)&v16);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 93;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      outlined release of NavigationRequest((uint64_t)&v33);
      v21._countAndFlagsBits = 0xD00000000000001ELL;
      v21._object = (void *)0x8000000187BECCC0;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 2314;
      v22._object = (void *)0xE200000000000000;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      outlined release of NavigationRequest((uint64_t)&v33);
      if (!v31)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_12;
      }
      --v31;
      v3 = v29 + 136;
    }
    NavigationState.StackContent.Key.debugDescription.getter(v27, v28);
    goto LABEL_7;
  }
LABEL_12:
  *(_QWORD *)&v33 = 93;
  *((_QWORD *)&v33 + 1) = 0xE100000000000000;
  swift_bridgeObjectRetain();
  v32 = String.init<A>(_:)();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PositionedNavigationDestinationProcessor<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, _DWORD *, _BYTE *)@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  return static PositionedNavigationDestinationProcessor._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PositionedNavigationDestinationProcessor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PositionedNavigationDestinationProcessor<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t specialized static PositionedNavigationDestination.Key.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  a2(&v6);
  v3 = v6;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with take of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?, (uint64_t (*)(uint64_t))type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest));
  }
}

uint64_t _s7SwiftUI27NavigationStackViewPositionV_AA010PositionedC11DestinationO7StorageV13SeededRequest33_EA42A490FE48784768DCEF705CD04CF4LLVtSgWOg(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 152) >> 1) > 0x80000000)
    return -(*(_QWORD *)(a1 + 152) >> 1);
  else
    return 0;
}

uint64_t type metadata accessor for PositionedNavigationDestinationProcessor.PollingRule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PositionedNavigationDestinationProcessor.PollingRule);
}

uint64_t partial apply for closure #1 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t partial apply for closure #2 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t partial apply for implicit closure #1 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return implicit closure #1 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(v4[4], v4[2], v4[3], a4);
}

uint64_t type metadata accessor for ReadDestinationsModifier.RequestsTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReadDestinationsModifier.RequestsTransform);
}

uint64_t outlined retain of ReadDestinationsModifier<A>.RequestsTransform(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for ReadDestinationsModifier.RequestsTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReadDestinationsModifier.RequestsTransform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t assignWithTake for ReadDestinationsModifier.RequestsTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t destroy for PositionedNavigationDestinationProcessor.PollingRule()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PositionedNavigationDestinationProcessor.PollingRule(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 45) = *(_QWORD *)(a2 + 45);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PositionedNavigationDestinationProcessor.PollingRule(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PositionedNavigationDestinationProcessor.PollingRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PositionedNavigationDestinationProcessor.PollingRule(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PositionedNavigationDestinationProcessor.PollingRule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1)
{
  outlined consume of NavigationRequest.Action(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return swift_release();
}

uint64_t initializeWithCopy for PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v13 = *(_BYTE *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v13);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  char v24;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v24 = *(_BYTE *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v24);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v24;
  outlined consume of NavigationRequest.Action(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = *(_OWORD *)(a2 + 72);
  v22 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v22;
  *(_OWORD *)(a1 + 72) = v21;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

__n128 __swift_memcpy140_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 124) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_BYTE *)(a2 + 64);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_BYTE *)(a1 + 64);
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_BYTE *)(a1 + 64) = v4;
  outlined consume of NavigationRequest.Action(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_release();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 140))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 104) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_DWORD *)(a1 + 136) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 140) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_QWORD *)(a1 + 104) = 2 * -a2;
      *(_QWORD *)(a1 + 112) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 140) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PositionedNavigationDestination.Storage.SeededRequest()
{
  return &type metadata for PositionedNavigationDestination.Storage.SeededRequest;
}

ValueMetadata *type metadata accessor for PositionedNavigationDestination()
{
  return &type metadata for PositionedNavigationDestination;
}

ValueMetadata *type metadata accessor for PositionedNavigationDestination.Storage()
{
  return &type metadata for PositionedNavigationDestination.Storage;
}

void base witness table accessor for _AttributeBody in ReadDestinationsModifier<A>.RequestsTransform()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in PositionedNavigationDestinationProcessor<A>.PollingRule()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_1879D544C()
{
  uint64_t v0;

  outlined consume of NavigationRequest.Action(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in ReadDestinationsModifier.RequestsTransform.updateValue()(uint64_t *a1)
{
  uint64_t v1;

  return closure #4 in ReadDestinationsModifier.RequestsTransform.updateValue()(a1, (_OWORD *)(v1 + 16), (_OWORD *)(v1 + 64));
}

Swift::Void __swiftcall BarAppearanceBridge.platformUpdateNavigationAdaptor()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t updated;
  uint64_t v5;
  id v6[11];

  v1 = v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v1, (uint64_t)v6);
  if (!v6[0])
    goto LABEL_7;
  v2 = v6[0];
  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)v6);
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v1, (uint64_t)v6);
  if (!v6[0])
  {

LABEL_7:
    outlined destroy of AccessibilityTableContext?((uint64_t)v6, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
    return;
  }
  v3 = v6[9];
  swift_bridgeObjectRetain();
  updated = outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)v6);
  if (v3[2])
  {
    MEMORY[0x1E0C80A78](updated, v5);
    static Update.ensure<A>(_:)();
  }

  swift_bridgeObjectRelease();
}

void BarAppearanceBridge.didUpdate(bar:barUpdates:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  v3 = v2;
  v5 = *a2;
  v6 = a2[1];
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v7 = specialized static ToolbarPlacement.Role.== infix(_:_:)(a1, (uint64_t)v22);
  outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
  if ((v7 & 1) == 0)
    return;
  v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastBarUpdates);
  swift_beginAccess();
  v9 = *v8;
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v11 & 1) != 0)
    {
      v12 = (unsigned __int8 *)(*(_QWORD *)(v9 + 56) + 2 * v10);
      v13 = *v12;
      v14 = v12[1];
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
  }
  v13 = 0;
  v14 = 2;
LABEL_7:
  v15 = MEMORY[0x18D760234](v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage + 8);
  if (!v15)
    goto LABEL_16;
  v16 = (void *)v15;
  if (!BarAppearanceBridge.uiHasStatusBarOpinion.getter())
  {
LABEL_15:

LABEL_16:
    if (v13 == v5)
      goto LABEL_19;
    goto LABEL_24;
  }
  if (v13 != v5)
    goto LABEL_18;
  if (v14 != 2)
  {
    if (v6 == 2 || ((v14 ^ v6) & 1) != 0)
      goto LABEL_18;
    goto LABEL_15;
  }
  if (v6 == 2)
  {

    return;
  }
LABEL_18:
  *(_QWORD *)(swift_allocObject() + 16) = v16;
  v17 = v16;
  onNextMainRunLoop(do:)();

  swift_release();
  if (v13 == v5)
  {
LABEL_19:
    if (v14 == 2)
    {
      if (v6 == 2)
        return;
    }
    else if (v6 != 2 && ((v14 ^ v6) & 1) == 0)
    {
      return;
    }
  }
LABEL_24:
  v18 = v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barBackgroundViewModels;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v18 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v19 & 1) != 0))
  {
    swift_endAccess();
    v20 = swift_allocObject();
    swift_weakInit();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v20;
    *(_BYTE *)(v21 + 24) = v5;
    *(_BYTE *)(v21 + 25) = v6;
    swift_retain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_endAccess();
  }
}

uint64_t closure #1 in BarAppearanceBridge.uiPreferredStatusBarStyle.getter@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  static Semantics.v5.getter();
  result = isLinkedOnOrAfter(_:)();
  if ((result & 1) != 0)
  {
    result = UIAccessibilityIsInvertColorsEnabled();
    v5 = 3;
    if (v3)
      v5 = 1;
    v6 = 3;
    if (!v3)
      v6 = 1;
    if ((_DWORD)result)
      v5 = v6;
  }
  else
  {
    v5 = 3;
    if (!v3)
      v5 = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t BarAppearanceBridge.updateTabBarConfiguration()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  double v16;
  int v17;
  uint64_t v19;
  id v20;
  __int16 v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned __int8 v31;
  __int16 v32;
  uint64_t v33;
  unsigned __int8 v34;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v1, (uint64_t)&v26);
  if (!(_QWORD)v26)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v26, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
    return 0;
  }
  v2 = (id)v26;
  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v26);
  v3 = objc_msgSend(v2, sel_tabBarController);
  if (!v3)
  {
LABEL_15:

    return 0;
  }
  v4 = v3;
  v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  v6 = *v5;
  v27 = 0;
  v26 = 0uLL;
  v28 = xmmword_187C0CDF0;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_14:
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v26);

    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v26);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v9 = (unsigned __int8 *)(*(_QWORD *)(v6 + 56) + 80 * v7);
  v10 = *v9;
  v11 = *((_QWORD *)v9 + 1);
  v12 = *((_QWORD *)v9 + 2);
  v13 = *((_QWORD *)v9 + 4);
  v24 = v9[40];
  v25 = v9[24];
  v23 = *((_QWORD *)v9 + 6);
  v21 = *(_WORD *)(v9 + 57);
  v22 = v9[56];
  v14 = *((_QWORD *)v9 + 8);
  v15 = v9[72];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)&v26);
  LOBYTE(v26) = v10;
  *((_QWORD *)&v26 + 1) = v11;
  v27 = v12;
  LOBYTE(v28) = v25;
  *((_QWORD *)&v28 + 1) = v13;
  v29 = v24;
  v30 = v23;
  v31 = v22;
  v32 = v21;
  v33 = v14;
  v34 = v15;
  BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)(&v26, v4);
  if (v14)
    v16 = 0.3;
  else
    v16 = 0.0;
  if (v10 == 2)
  {
    if (v14)
      v17 = 7;
    else
      v17 = 0;
  }
  else if (v14)
  {
    v17 = 3;
  }
  else
  {
    v17 = 0;
  }
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v4;
  *(_DWORD *)(v19 + 24) = v17;
  *(double *)(v19 + 32) = v16;
  v20 = v4;
  onNextMainRunLoop(do:)();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return 1;
}

uint64_t closure #2 in BarAppearanceBridge.didUpdate(bar:barUpdates:)()
{
  uint64_t result;

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.setter();
  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    return static Published.subscript.setter();
  }
  return result;
}

void BarAppearanceBridge.updateNavigationBarMargins(_:isTop:)(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;

  v40 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment);
  EnvironmentValues.contentMarginProxy.getter((uint64_t)&v47);
  v5 = v55;
  v6 = v56;
  v7 = v57;
  v8 = v58;
  v9 = v59;
  v10 = v60;
  v11 = v61;
  v12 = v62;
  OptionalEdgeInsets.init()();
  v32 = v5;
  v33 = v6;
  v34 = v7;
  v35 = v8;
  v36 = v9;
  v37 = v10;
  v38 = v11;
  v39 = v12;
  static OptionalEdgeInsets.none.getter();
  v16 = v24;
  v17 = v25;
  v18 = v26;
  v19 = v27;
  v20 = v28;
  v21 = v29;
  v22 = v30;
  v23 = v31;
  MEMORY[0x18D7593E8](&v32, &v16);
  if ((a2 & 1) != 0)
  {
    v47 = v5;
    v48 = v6;
    v49 = v7;
    v50 = v8;
    v51 = v9;
    v52 = v10;
    v53 = v11;
    v54 = v12;
    static OptionalEdgeInsets.none.getter();
    v32 = v40;
    v33 = BYTE8(v40);
    v34 = v41;
    v35 = v42;
    v36 = v43;
    v37 = v44;
    v38 = v45;
    v39 = v46;
    if ((MEMORY[0x18D7593E8](&v47, &v32) & 1) == 0)
    {
      v13 = objc_msgSend(a1, sel_navigationController);
      if (v13)
      {
        v14 = v13;
        v15 = objc_msgSend(v13, sel_navigationBar);

        if (v15)
        {
          v47 = v5;
          v48 = v6;
          v49 = v7;
          v50 = v8;
          v51 = v9;
          v52 = v10;
          v53 = v11;
          v54 = v12;
          static Edge.Set.all.getter();
          OptionalEdgeInsets.in(edges:)();
          objc_msgSend(v15, sel_setDirectionalLayoutMargins_);

        }
      }
    }
  }
}

uint64_t closure #1 in closure #1 in BarAppearanceBridge.updateBackAction(_:)()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v1);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

void BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)(__int128 *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  id v12;
  uint64_t v13;
  __int128 v14[5];
  id v15[3];
  __int128 v16;
  _OWORD v17[3];
  _OWORD v18[2];

  v3 = v2;
  v5 = *a1;
  v17[1] = a1[1];
  v6 = a1[3];
  v17[2] = a1[2];
  v18[0] = v6;
  *(_OWORD *)((char *)v18 + 9) = *(__int128 *)((char *)a1 + 57);
  v17[0] = v5;
  type metadata accessor for UIKitTabBarController();
  v7 = swift_dynamicCastClass();
  if (v7)
  {
    v8 = (void *)v7;
    v9 = a2;
    outlined retain of ToolbarAppearanceConfiguration((uint64_t)v17);
    v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    memset(v15, 0, sizeof(v15));
    v16 = xmmword_187C0CDF0;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v14[0] = v10;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v15);
    v12 = v9;
    PlatformBarUpdater.callAsFunction(configurations:context:)(v10, 0, v8);
    swift_bridgeObjectRelease();

    v13 = v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
    swift_beginAccess();
    outlined init with copy of BarAppearanceBridge.UpdateContext?(v13, (uint64_t)v14);
    if (*(_QWORD *)&v14[0])
    {
      outlined init with take of BarAppearanceBridge.UpdateContext(v14, (uint64_t)v15);
      closure #1 in BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)(v15, v3);
      outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)v15);

    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v14, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
}

void closure #1 in BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)(id *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  int v20;
  char v21;
  uint64_t v22;
  void *v23;
  char **v24;
  id v25;
  void *v26;
  unsigned int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  id v31;
  id v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  Class isa;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  void *v68;
  char v69;
  Class v70;
  uint64_t v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Class v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  uint64_t v91;
  char v92;
  Class v93;
  uint64_t v94;
  void *v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  char v104;
  uint64_t v105;
  int v106;
  id v107;
  char v108;
  int v109;
  _OWORD v110[2];
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;

  v4 = (uint64_t *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  v5 = *v4;
  v113 = 0;
  v112 = 0uLL;
  v114 = xmmword_187C0CDF0;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_88;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v112);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_88:
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v112);
    return;
  }
  v8 = *(_QWORD *)(v5 + 56) + 80 * v6;
  v10 = *(_QWORD *)(v8 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  v11 = *(unsigned __int8 *)(v8 + 24);
  v12 = *(unsigned __int8 *)(v8 + 40);
  v13 = *(unsigned __int8 *)(v8 + 56);
  v14 = *(unsigned __int8 *)(v8 + 57);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)&v112);
  v100 = objc_msgSend(*a1, sel_tabBarItem);
  if (v100)
  {
    v15 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment);
    v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment + 8);
    if (v10)
      v17 = 0;
    else
      v17 = v11 == 0;
    if (v17)
      v18 = v13;
    else
      v18 = 0;
    if (v9)
      v19 = 0;
    else
      v19 = v14 == 2;
    v95 = (void *)*MEMORY[0x1E0DC1140];
    v20 = v18 & v12 ^ 1;
    if (!v19)
      v20 = 1;
    v106 = v20;
    v102 = v15;
    swift_retain();
    v101 = v16;
    swift_retain();
    v21 = 0;
    v22 = 0;
    v94 = MEMORY[0x1E0DEE9B8] + 8;
    v97 = v10;
    v99 = v9;
    v96 = v11;
    v98 = v14;
    v23 = v100;
    while (1)
    {
      v108 = v21;
      v109 = *((unsigned __int8 *)&outlined read-only object #0 of closure #1 in BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)
             + v22
             + 32);
      v24 = &selRef_scrollEdgeAppearance;
      if (!*((_BYTE *)&outlined read-only object #0 of closure #1 in BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)
            + v22
            + 32))
        v24 = &selRef_standardAppearance;
      v25 = objc_msgSend(v23, *v24, v94);
      if (v25)
      {
        v26 = v25;
        swift_getObjectType();
        v27 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);

        if (!v27)
          goto LABEL_18;
      }
      if (!v106)
      {
        if ((v109 & 1) != 0)
          objc_msgSend(v23, sel_setScrollEdgeAppearance_, 0);
        else
          objc_msgSend(v23, sel_setStandardAppearance_, 0);
        goto LABEL_18;
      }
      v28 = v11 == 0;
      if ((v109 & v28) != 0)
        v29 = 2;
      else
        v29 = v14;
      if ((v109 & v28) != 0)
        v30 = 3;
      else
        v30 = v11;
      type metadata accessor for UIKitTabBarAppearance();
      v31 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      swift_retain();
      swift_retain();
      swift_retain();
      v32 = objc_msgSend(v31, sel_init);
      v33 = v32;
      v104 = v29;
      if (v30 == 1)
      {
        swift_retain();
        swift_retain();
        swift_retain();
        objc_msgSend(v33, sel_configureWithDefaultBackground);
        if (v9)
          goto LABEL_42;
      }
      else
      {
        if (v30 == 3)
        {
          objc_msgSend(v32, sel_configureWithTransparentBackground);
          if (!v10)
            goto LABEL_33;
          goto LABEL_58;
        }
        swift_retain();
        swift_retain();
        swift_retain();
        if (v9)
        {
LABEL_42:
          v107 = v33;
          v111 = v9;
          *(_QWORD *)&v112 = v102;
          *((_QWORD *)&v112 + 1) = v101;
          swift_retain();
          ShapeStyle.resolveBackgroundMaterial(in:level:)();
          v34 = *(_QWORD *)&v110[0];
          v35 = 6;
          switch(*(_QWORD *)&v110[0])
          {
            case 0:
              goto LABEL_49;
            case 1:
              v35 = 7;
              goto LABEL_49;
            case 2:
              v35 = 4;
              goto LABEL_49;
            case 3:
            case 4:
              v35 = 9;
              goto LABEL_49;
            case 5:
              v35 = 10;
LABEL_49:
              v45 = objc_msgSend((id)objc_opt_self(), sel_effectWithStyle_, v35);
              goto LABEL_50;
            case 6:
              goto LABEL_53;
            case 7:
              v34 = 7;
              goto LABEL_53;
            case 8:
              goto LABEL_54;
            default:
              v37 = *(_QWORD *)(*(_QWORD *)&v110[0] + 16);
              v36 = *(_QWORD *)(*(_QWORD *)&v110[0] + 24);
              v38 = *(_QWORD *)(*(_QWORD *)&v110[0] + 32);
              v39 = *(_QWORD *)(*(_QWORD *)&v110[0] + 40);
              v40 = *(void **)(*(_QWORD *)&v110[0] + 48);
              v41 = (void *)objc_opt_self();
              outlined copy of Material?(v34);
              v42 = v40;
              v43 = (void *)MEMORY[0x18D75CC88](v37, v36);
              v44 = (void *)MEMORY[0x18D75CC88](v38, v39);
              v45 = objc_msgSend(v41, sel__effectForLightMaterial_darkMaterial_bundle_, v43, v44, v42);

              if (v45)
              {

                outlined consume of Material?(v34);
                v10 = v97;
                v9 = v99;
                v14 = v98;
                v23 = v100;
LABEL_50:
                v33 = v107;
                objc_msgSend(v107, sel_setBackgroundEffect_, v45);

                outlined consume of Material?(v34);
                swift_release();
                swift_release();
                swift_release_n();
              }
              else
              {
                outlined consume of Material?(v34);
                v10 = v97;
                v9 = v99;
                v14 = v98;
                v23 = v100;
LABEL_53:
                outlined consume of Material?(v34);
LABEL_54:
                *(_QWORD *)&v110[0] = v9;
                *(_QWORD *)&v112 = v102;
                *((_QWORD *)&v112 + 1) = v101;
                if (ShapeStyle.fallbackColor(in:level:)())
                {
                  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
                  v46 = swift_retain();
                  v47 = UIColor.init(_:)(v46);
                  objc_msgSend(v107, sel_setBackgroundColor_, v47);
                  swift_release();
                  swift_release();
                  v33 = v107;
                  swift_release();

                  swift_release_n();
                }
                else
                {
                  swift_release();
                  swift_release();
                  swift_release_n();
                  v33 = v107;
                }
              }
              if (v10)
                goto LABEL_58;
              goto LABEL_33;
          }
        }
      }
      swift_release();
      swift_release();
      swift_release();
      if (!v10)
      {
LABEL_33:
        swift_retain();
        swift_retain();
        swift_retain();
        if (v29 == 2)
          goto LABEL_63;
LABEL_61:
        if ((v29 & 1) != 0)
          static Color.white.getter();
        else
          static Color.black.getter();
        v49 = MEMORY[0x1E0DEE9B8];
        swift_release();
        v103 = 0;
        goto LABEL_66;
      }
LABEL_58:
      *(_QWORD *)&v110[0] = v10;
      *(_QWORD *)&v112 = v102;
      *((_QWORD *)&v112 + 1) = v101;
      swift_retain();
      swift_retain();
      swift_retain();
      v48 = ShapeStyle.fallbackColor(in:level:)();
      if (v29 != 2)
        goto LABEL_61;
      if (!v48)
      {
LABEL_63:
        swift_release();
        swift_release();
        goto LABEL_74;
      }
      v103 = 1;
      v49 = MEMORY[0x1E0DEE9B8];
LABEL_66:
      v50 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      v51 = swift_retain();
      v52 = UIColor.init(_:)(v51);
      v53 = objc_msgSend(v33, sel_stackedLayoutAppearance);
      v54 = objc_msgSend(v53, sel_selected);

      v105 = v50;
      *(_QWORD *)&v114 = v50;
      *(_QWORD *)&v112 = v52;
      v55 = v95;
      v56 = v52;
      v57 = objc_msgSend(v54, sel_titleTextAttributes);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
      v58 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      v111 = v58;
      if ((_QWORD)v114)
      {
        outlined init with take of Any(&v112, v110);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v110, v55, isUniquelyReferenced_nonNull_native);
        v111 = v58;

        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v112, (unint64_t *)&lazy cache variable for type metadata for Any?, v49 + 8);
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v55, v110);

        outlined destroy of AccessibilityTableContext?((uint64_t)v110, (unint64_t *)&lazy cache variable for type metadata for Any?, v49 + 8);
      }
      v60 = v49 + 8;
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v54, sel_setTitleTextAttributes_, isa);

      objc_msgSend(v54, sel_setIconColor_, v56);
      v62 = objc_msgSend(v33, sel_inlineLayoutAppearance);
      v63 = objc_msgSend(v62, sel_selected);

      *(_QWORD *)&v114 = v105;
      *(_QWORD *)&v112 = v56;
      v64 = v56;
      v65 = v55;
      v66 = objc_msgSend(v63, sel_titleTextAttributes);
      v67 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      v111 = v67;
      v68 = v64;
      if ((_QWORD)v114)
      {
        outlined init with take of Any(&v112, v110);
        v69 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v110, v65, v69);
        v111 = v67;

        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v112, (unint64_t *)&lazy cache variable for type metadata for Any?, v60);
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v65, v110);

        outlined destroy of AccessibilityTableContext?((uint64_t)v110, (unint64_t *)&lazy cache variable for type metadata for Any?, v60);
      }
      v70 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v63, sel_setTitleTextAttributes_, v70);

      objc_msgSend(v63, sel_setIconColor_, v68);
      if (v103)
      {
        swift_release();
        v9 = v99;
        swift_release();
        v10 = v97;
        swift_release();

        v11 = v96;
        v14 = v98;
        v23 = v100;
LABEL_74:
        swift_release();
        if ((v109 & 1) != 0)
          goto LABEL_86;
        goto LABEL_16;
      }
      if ((v104 & 1) != 0)
        v71 = 2;
      else
        v71 = 1;
      v72 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
      v73 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithUserInterfaceStyle_, v71);
      v74 = objc_msgSend(v72, sel_resolvedColorWithTraitCollection_, v73);

      v75 = objc_msgSend(v33, sel_stackedLayoutAppearance);
      v76 = objc_msgSend(v75, sel_normal);

      *(_QWORD *)&v114 = v105;
      *(_QWORD *)&v112 = v74;
      v77 = v65;
      v78 = v74;
      v79 = objc_msgSend(v76, sel_titleTextAttributes);
      v80 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      v111 = v80;
      if ((_QWORD)v114)
      {
        outlined init with take of Any(&v112, v110);
        v81 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v110, v77, v81);
        v111 = v80;

        swift_bridgeObjectRelease();
        v82 = MEMORY[0x1E0DEE9B8];
      }
      else
      {
        v82 = MEMORY[0x1E0DEE9B8];
        v83 = MEMORY[0x1E0DEE9B8] + 8;
        outlined destroy of AccessibilityTableContext?((uint64_t)&v112, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v77, v110);

        outlined destroy of AccessibilityTableContext?((uint64_t)v110, (unint64_t *)&lazy cache variable for type metadata for Any?, v83);
      }
      v84 = v82 + 8;
      v85 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v76, sel_setTitleTextAttributes_, v85);

      objc_msgSend(v76, sel_setIconColor_, v78);
      v86 = objc_msgSend(v33, sel_inlineLayoutAppearance);
      v87 = objc_msgSend(v86, sel_normal);

      *(_QWORD *)&v114 = v105;
      *(_QWORD *)&v112 = v78;
      v88 = v78;
      v89 = v77;
      v90 = objc_msgSend(v87, sel_titleTextAttributes);
      v91 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      v111 = v91;
      if ((_QWORD)v114)
      {
        outlined init with take of Any(&v112, v110);
        v92 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v110, v89, v92);
        v111 = v91;

        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v112, (unint64_t *)&lazy cache variable for type metadata for Any?, v84);
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v89, v110);

        outlined destroy of AccessibilityTableContext?((uint64_t)v110, (unint64_t *)&lazy cache variable for type metadata for Any?, v84);
      }
      v10 = v97;
      v93 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v87, sel_setTitleTextAttributes_, v93);

      objc_msgSend(v87, sel_setIconColor_, v88);
      swift_release();
      v9 = v99;
      swift_release();
      swift_release();
      swift_release();

      v11 = v96;
      v14 = v98;
      v23 = v100;
      if ((v109 & 1) != 0)
      {
LABEL_86:
        objc_msgSend(v23, sel_setScrollEdgeAppearance_, v33);
        goto LABEL_17;
      }
LABEL_16:
      objc_msgSend(v23, sel_setStandardAppearance_, v33);
LABEL_17:
      swift_release();
      swift_release();
      swift_release();

LABEL_18:
      v21 = 1;
      v22 = 1u;
      if ((v108 & 1) != 0)
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        return;
      }
    }
  }
  swift_release();
  swift_release();
  swift_release();
}

id closure #1 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, sel_hideBarWithTransition_duration_, a2);
}

id closure #2 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, sel_showBarWithTransition_duration_, a2);
}

void UIViewController.defaultTitleMode(navController:title:showsBackItem:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, char *a5@<X8>)
{
  void *v5;
  uint64_t v10;
  char v11;
  id v12;
  char v13;

  if (!a1
    || (swift_getObjectType(), objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI)))
  {
    if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    {
      v10 = HIBYTE(a3) & 0xF;
      if ((a3 & 0x2000000000000000) == 0)
        v10 = a2 & 0xFFFFFFFFFFFFLL;
      if (!v10)
      {
        v12 = objc_msgSend(v5, sel_navigationItem);
        v13 = UINavigationItem.hasLargeContent.getter();

        if ((a4 & 1) != 0)
        {
          if ((v13 & 1) != 0)
          {
LABEL_12:
            v11 = 0;
            goto LABEL_15;
          }
        }
        else if ((v13 & 1) != 0)
        {
          goto LABEL_14;
        }
        v11 = 3;
        goto LABEL_15;
      }
      if ((a4 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v11 = 1;
    goto LABEL_15;
  }
  v11 = 5;
LABEL_15:
  *a5 = v11;
}

BOOL UISplitViewController.mayHaveNavigationBarContent.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v2;
  _BOOL8 result;

  swift_getObjectType();
  result = 1;
  if (objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI))
  {
    v1 = objc_msgSend(v0, sel_displayModeButtonVisibility);
    v2 = objc_msgSend(v0, sel_presentsWithGesture);
    if (v1 != (id)2 && (v1 || (v2 & 1) == 0))
      return 0;
  }
  return result;
}

id UITabBarController.combinedWithNavigationBar.getter()
{
  void *v0;
  id result;
  id v2;
  id v3;
  id v4;
  id v5;

  swift_getObjectType();
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__uip_isFloatingTabBarEnabled);
  if ((_DWORD)result)
  {
    v2 = objc_msgSend(v0, sel_traitCollection);
    v3 = objc_msgSend(v2, sel_userInterfaceIdiom);

    if (v3 == (id)1)
    {
      v4 = objc_msgSend(v0, sel_traitCollection);
      v5 = objc_msgSend(v4, sel_horizontalSizeClass);

      return (id)(v5 == (id)2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id UIKitNavigationBarAppearance.__deallocating_deinit()
{
  return DocumentViewController.__deallocating_deinit(type metadata accessor for UIKitNavigationBarAppearance);
}

uint64_t type metadata accessor for UIKitNavigationBarAppearance()
{
  return objc_opt_self();
}

id @objc UIKitNavigationBarAppearance.init(idiom:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), SEL *a5)
{
  objc_super v8;

  v8.receiver = a1;
  v8.super_class = (Class)a4();
  return objc_msgSendSuper2(&v8, *a5, a3);
}

id UIKitTabBarAppearance.__deallocating_deinit()
{
  return DocumentViewController.__deallocating_deinit(type metadata accessor for UIKitTabBarAppearance);
}

uint64_t type metadata accessor for UIKitTabBarAppearance()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for UIKitAction()
{
  return objc_opt_self();
}

uint64_t key path getter for BarEnvironmentViewModel.visibility : BarEnvironmentViewModel@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for BarEnvironmentViewModel.visibility : BarEnvironmentViewModel()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t key path getter for BarEnvironmentViewModel.colorScheme : BarEnvironmentViewModel@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for BarEnvironmentViewModel.colorScheme : BarEnvironmentViewModel()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_1879D7684()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1879D76A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in BarAppearanceBridge.didUpdate(bar:barUpdates:)()
{
  return closure #2 in BarAppearanceBridge.didUpdate(bar:barUpdates:)();
}

uint64_t sub_1879D76D8()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in BarAppearanceBridge.didUpdate(bar:barUpdates:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setNeedsStatusBarAppearanceUpdate);
}

void partial apply for closure #1 in BarAppearanceBridge.platformUpdateNavigationAdaptor()()
{
  uint64_t v0;

  closure #1 in ToolbarBridge.updateNavigationItem<A>(hostingController:adaptor:)(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24));
}

BOOL _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI23ToolbarTitleDisplayModeV_s5NeverOytTB5024_sSo16UIViewControllerC7c117UIE19updateNavigationBar4item5title11transaction11environment03navB013showsBackItemAC0fG11UpdateFlagsVAC0fgO0V_AC0F12f81StorageVSgAC11TransactionVSgAC17EnvironmentValuesVSo012UINavigationB0CSgSbtFyAC07e3R11gH6VXEfU_So0lM0CTf1cn_nTf4ng_n(unsigned __int8 a1, id a2)
{
  int v2;
  id v4;

  v2 = a1;
  if (a1 != 5)
  {
    v4 = objc_msgSend(a2, sel_navigationItem);
    objc_msgSend(v4, sel_setLargeTitleDisplayMode_, qword_187C780C8[(char)a1]);

  }
  return v2 == 5;
}

uint64_t specialized UIViewController.updateNavigationBar(item:title:transaction:environment:navController:showsBackItem:)(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, void *a4, int a5)
{
  void *v5;
  void *v6;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  char v38;
  char v39;
  char **v40;
  uint64_t v41;
  char v42;
  id v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;

  v6 = v5;
  v67 = a5;
  v11 = type metadata accessor for Locale();
  v62 = *(_QWORD *)(v11 - 8);
  v63 = v11;
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v61 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v17 = *(_QWORD *)a2;
  v16 = *(_QWORD *)(a2 + 8);
  v18 = *(_QWORD *)(a2 + 24);
  v65 = *(_QWORD *)(a2 + 16);
  v66 = v16;
  v19 = *(_QWORD *)(a2 + 32);
  v68 = *(_QWORD *)(a2 + 40);
  v69 = *(_QWORD *)(a2 + 48);
  v70 = v19;
  v64 = *(unsigned __int8 *)(a2 + 56);
  v21 = *a3;
  v20 = a3[1];
  v22 = objc_msgSend(v6, sel_navigationItem, v13);
  objc_msgSend(v22, sel_setHidesBackButton_, v15);

  v23 = 0;
  v24 = 0;
  if (v18 == 1)
    goto LABEL_7;
  v58 = v6;
  v60 = v20;
  v59 = v21;
  if (v18)
  {
    v73 = v21;
    v74 = v20;
    v77 = 0;
    v78 = 0;
    v72 = 0;
    v25 = v65;
    v26 = v66;
    outlined copy of Text?(v17, v66, v65, v18);
    v27 = v70;
    outlined copy of Transaction?(v70);
    swift_retain();
    v71 = v25 & 1;
    v23 = Text.resolveString(in:with:idiom:)();
    v24 = v28;
    v29 = v25;
    v30 = v18;
    v31 = v68;
    outlined consume of NavigationTitleStorage?(v17, v26, v29, v18, v27);
  }
  else
  {
    v30 = 0;
    v23 = 0;
    v24 = 0;
    v31 = v68;
  }
  LOBYTE(v32) = v31;
  v33 = v31 == 5;
  v20 = v60;
  v21 = v59;
  v18 = v30;
  v6 = v58;
  if (v33)
  {
LABEL_7:
    if (a4)
    {
      v34 = a4;
      if (UINavigationController.managesWindowToolbar()())
      {
        v58 = (void *)v17;
        type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WindowToolbarConfigurationKey>);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WindowToolbarConfigurationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WindowToolbarConfigurationKey>);
        swift_retain_n();
        if (v20)
        {
          swift_retain_n();
          PropertyList.Tracker.value<A>(_:for:)();

          swift_release_n();
        }
        else
        {
          PropertyList.subscript.getter();

        }
        swift_release_n();
        LODWORD(v32) = v73;
        outlined consume of ToolbarLabelStyle.Data?(v74, v75, v76);
        v17 = (uint64_t)v58;
        if ((_DWORD)v32 != 5)
          goto LABEL_21;
      }
      else
      {

      }
    }
    if (v24)
      v32 = v23;
    else
      v32 = 0;
    v35 = v17;
    if (v24)
      v36 = (unint64_t)v24;
    else
      v36 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    UIViewController.defaultTitleMode(navController:title:showsBackItem:)((uint64_t)a4, v32, v36, v67 & 1, (char *)&v73);
    v17 = v35;
    swift_bridgeObjectRelease();
    LOBYTE(v32) = v73;
  }
LABEL_21:
  v37 = v6;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI23ToolbarTitleDisplayModeV_s5NeverOytTB5024_sSo16UIViewControllerC7c117UIE19updateNavigationBar4item5title11transaction11environment03navB013showsBackItemAC0fG11UpdateFlagsVAC0fgO0V_AC0F12f81StorageVSgAC11TransactionVSgAC17EnvironmentValuesVSo012UINavigationB0CSgSbtFyAC07e3R11gH6VXEfU_So0lM0CTf1cn_nTf4ng_n(v32, v37);

  if (a4)
  {
    swift_getObjectType();
    v38 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);
  }
  else
  {
    v38 = 0;
  }
  v39 = UIViewController.updateTitle(_:isFromSwiftUI:)(v23, v24, v38);
  swift_bridgeObjectRelease();
  v73 = v21;
  v74 = v20;
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) != 0)
  {
    v40 = &selRef__defaultInteractionBehavior;
    if (v18 != 1)
    {
      v42 = v65;
      v41 = v66;
      outlined copy of Text?(v17, v66, v65, v18);
      outlined copy of Transaction?(v70);
      swift_retain();
      v43 = objc_msgSend(v37, sel_navigationItem);
      v60 = v20;
      if (v18)
      {
        v44 = v17;
        v45 = v42 & 1;
        v73 = v21;
        v74 = v20;
        v77 = 0;
        v78 = 0;
        outlined copy of Text.Storage(v44, v41, v42 & 1);
        swift_bridgeObjectRetain();
        LOBYTE(v72) = v42 & 1;
        v46 = v42;
        v47 = v41;
        v48 = (void *)static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
        v49 = v44;
        v50 = v45;
        v17 = v44;
        v40 = &selRef__defaultInteractionBehavior;
        outlined consume of Text.Storage(v49, v47, v50);
        swift_bridgeObjectRelease();
      }
      else
      {
        v46 = v42;
        v47 = v41;
        v48 = 0;
      }
      objc_msgSend(v43, sel_setAccessibilityAttributedLabel_, v48, v58);

      outlined consume of NavigationTitleStorage?(v17, v47, v46, v18, v70);
      v20 = v60;
    }
    v73 = v21;
    v74 = v20;
    v51 = v61;
    EnvironmentValues.locale.getter();
    v52 = Locale.bcp47LanguageCode.getter();
    v54 = v53;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v51, v63);
    v55 = objc_msgSend(v37, v40[90]);
    if (v54)
    {
      v56 = (void *)MEMORY[0x18D75CC88](v52, v54);
      swift_bridgeObjectRelease();
    }
    else
    {
      v56 = 0;
    }
    objc_msgSend(v55, sel_setAccessibilityLanguage_, v56, v58);

  }
  return v39 & 1;
}

uint64_t specialized BarAppearanceBridge.resolveIsHidden(config:edge:isFromSwiftUI:hasContent:)(unsigned __int8 *a1, char a2, int a3, int a4)
{
  int v7;
  int v8;
  unsigned int v10;

  v7 = *a1;
  v8 = a1[24];
  if ((a3 & 1) != 0)
    goto LABEL_6;
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0 && (a2 & 1) == 0)
    return 0;
  if (!v7)
    return 2;
LABEL_6:
  v10 = v8 != 1;
  if ((a2 & 1) == 0)
    v10 &= static SemanticFeature.isEnabled.getter();
  if (v7)
    return v7 != 1;
  else
    return a3 & ~a4 & v10;
}

uint64_t sub_1879D7E40()
{
  uint64_t v0;

  return swift_deallocObject();
}

id _s7SwiftUI19BarAppearanceBridgeC09updateTabC10Visibility33_BF747AB022DCE7FC5B6AD0F035BC8E0DLL_03tabC10ControlleryAA07ToolbarD13ConfigurationV_So05UITabcS0CtFyycfU0_TA_0()
{
  return partial apply for closure #2 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)((SEL *)&selRef_showBarWithTransition_duration_);
}

id _s7SwiftUI19BarAppearanceBridgeC09updateTabC10Visibility33_BF747AB022DCE7FC5B6AD0F035BC8E0DLL_03tabC10ControlleryAA07ToolbarD13ConfigurationV_So05UITabcS0CtFyycfU_TA_0()
{
  return partial apply for closure #2 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)((SEL *)&selRef_hideBarWithTransition_duration_);
}

id partial apply for closure #2 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)(SEL *a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), *a1, *(unsigned int *)(v1 + 24), *(double *)(v1 + 32));
}

uint64_t sub_1879D7E94()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in BarAppearanceBridge.updateBackAction(_:)()
{
  return closure #1 in closure #1 in BarAppearanceBridge.updateBackAction(_:)();
}

uint64_t (*AnyFileDocument.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a2;
  v6[3] = a3;
  v6[4] = a1;
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return partial apply for closure #1 in AnyFileDocument.init<A>(_:);
}

uint64_t closure #1 in AnyFileDocument.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v14 = (char *)&v16 - v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a4 + 48))(a1, a3, a4, v12);
  if (!v4)
  {
    a2 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 56))(v14, a1, a3, a4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, AssociatedTypeWitness);
  }
  return a2;
}

uint64_t sub_1879D8044()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyFileDocument.init<A>(_:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in AnyFileDocument.init<A>(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t (*specialized AnyFileDocument.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = MEMORY[0x1E0C80A78](a1, a1);
  v8 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v7);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  return partial apply for closure #1 in AnyFileDocument.init<A>(_:);
}

uint64_t sub_1879D8154()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyFileDocument.init<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 24) + 32))();
}

uint64_t destroy for AnyFileDocument()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for AnyFileDocument(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AnyFileDocument(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AnyFileDocument(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AnyFileDocument()
{
  return &type metadata for AnyFileDocument;
}

double protocol witness for Rule.value.getter in conformance AccessibilityOpacityAttachment@<D0>(_QWORD *a1@<X8>)
{
  double *Value;
  double result;

  Value = (double *)AGGraphGetValue();
  result = *Value;
  *a1 = *(_QWORD *)Value;
  return result;
}

uint64_t AccessibilityOpacityModifier.initialAttachment(for:)(double a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;

  if (a1 >= 0.001)
    return AccessibilityAttachment.init()();
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v4 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
  v3[3] = v1;
  v3[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  v3[0] = 8;
  specialized Dictionary.subscript.setter((uint64_t)v3, MEMORY[0x1E0CE5728]);
  v3[0] = v4;
  static AccessibilityAttachment.properties(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance AccessibilityOpacityModifier()
{
  double *v0;

  return AccessibilityOpacityModifier.initialAttachment(for:)(*v0);
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityOpacityModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

ValueMetadata *type metadata accessor for AccessibilityOpacityAttachment()
{
  return &type metadata for AccessibilityOpacityAttachment;
}

ValueMetadata *type metadata accessor for AccessibilityOpacityModifier()
{
  return &type metadata for AccessibilityOpacityModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityOpacityModifier()
{
  return &protocol witness table for AccessibilityOpacityModifier;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityOpacityModifier(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier();
  result = lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t View._gaugeTintOverride(primaryColor:secondaryColor:)()
{
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.gaugeTintOverride.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<GaugeTintOverrideKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GaugeTintOverrideKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<GaugeTintOverrideKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<GaugeTintOverrideKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GaugeTintOverrideKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<GaugeTintOverrideKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.gaugeTintOverride : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.gaugeTintOverride.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1879D8728@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.gaugeTintOverride.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.gaugeTintOverride : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  outlined copy of (Color, Color)?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);
  return outlined consume of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(v1);
}

uint64_t sub_1879D87AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<(Color, Color)?>(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<(Color, Color)?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<(Color, Color)?>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<(Color, Color)?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<(Color, Color)?>, (uint64_t (*)(uint64_t))type metadata accessor for (Color, Color)?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
}

void type metadata accessor for (Color, Color)?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for (Color, Color)?, (uint64_t (*)(uint64_t))type metadata accessor for (Color, Color), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for (Color, Color)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Color, Color))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Color, Color));
  }
}

void type metadata accessor for EnvironmentPropertyKey<GaugeTintOverrideKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeTintOverrideKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeTintOverrideKey>);
  }
}

ValueMetadata *type metadata accessor for GaugeTintOverrideKey()
{
  return &type metadata for GaugeTintOverrideKey;
}

double specialized AnimatedValueTrack<A>.VectorPath.arcLength.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  double v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  __int128 v38;
  __int128 v39;

  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  v34 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (double *)((char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v31 - v8;
  v10 = type metadata accessor for Quadrature.Integrator();
  v32 = *(_QWORD *)(v10 - 8);
  v33 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (uint64_t *)((char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Quadrature();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + 16);
  if (!v19)
    return 0.0;
  v20 = *MEMORY[0x1E0DE9528];
  swift_bridgeObjectRetain();
  v31 = a1;
  v21 = (__int128 *)(a1 + 64);
  v22 = 0uLL;
  v23 = 0.0;
  do
  {
    v24 = (float64x2_t)*(v21 - 2);
    if (*((_BYTE *)v21 + 57))
    {
      if (*((_BYTE *)v21 + 57) == 1)
      {
        v35 = (float64x2_t)*(v21 - 2);
        v36 = v22;
        v37 = v24;
        v25 = *v21;
        v38 = *(v21 - 1);
        v39 = v25;
        *v13 = 8;
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v32 + 104))(v13, v20, v33);
        v26 = Quadrature.init(integrator:absoluteTolerance:relativeTolerance:)();
        MEMORY[0x1E0C80A78](v26, v27);
        *(&v31 - 2) = (uint64_t)&v36;
        Quadrature.integrate(over:integrand:)();
        outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v9, (uint64_t)v5);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v28 = vsubq_f64(v37, v36);
          v29 = sqrt(vaddvq_f64(vmulq_f64(v28, v28)));
          outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v9);
          (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
          outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v5);
        }
        else
        {
          outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v9);
          (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
          v29 = *v5;
        }
        v23 = v23 + v29;
        v22 = v35;
      }
    }
    else
    {
      v22 = (float64x2_t)*(v21 - 2);
    }
    v21 += 6;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  return v23;
}

double specialized Curve.velocity(at:)(double a1)
{
  float64x2_t *v1;
  double result;

  *(_QWORD *)&result = *(_OWORD *)&vaddq_f64(vaddq_f64(vmulq_n_f64(v1[2], a1 * a1 * 3.0 + a1 * -4.0 + 1.0), vaddq_f64(vmulq_n_f64(*v1, a1 * a1 * 6.0 - a1 * 6.0), vmulq_n_f64(v1[1], a1 * 6.0 - a1 * a1 * 6.0))), vmulq_n_f64(v1[3], a1 * a1 * 3.0 - (a1 + a1)));
  return result;
}

void AnimatedValueTrack.appending(track:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  v7 = v3[3];
  v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  __swift_destroy_boxed_opaque_existential_1(a3);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueTrack<A>, a2);
  AnimatedValueTrackSource.combined<A>(with:)(a1, v7, a2, v8, v9);
}

uint64_t AnimatedValueTrack.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
  v6 = type metadata accessor for EmptyAnimatedValueTrackSource(0, a1, v4, v5);
  *(_QWORD *)(a2 + 24) = v6;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyAnimatedValueTrackSource<A>, v6);
  *(_QWORD *)(a2 + 32) = result;
  return result;
}

uint64_t AnimatedValueTrack.init<A>(source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
}

uint64_t AnimatedValueTrack.duration.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t AnimatedValueTrack.update(value:mix:at:)(uint64_t a1, double a2, double a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;

  v7 = v3[3];
  v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v8 + 24))(a1, v7, v8, a2, a3);
}

uint64_t AnimatedValueTrack.update(value:at:)(uint64_t a1, double a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v6 + 24))(a1, v5, v6, 1.0, a2);
}

uint64_t AnimatedValueTrack.init(track:)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;

  v6 = type metadata accessor for AnimatedValueTrack(0, a2, a2, a3);
  a4[3] = v6;
  a4[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueTrack<A>, v6);
  *a4 = swift_allocObject();
  return a1();
}

uint64_t type metadata accessor for AnimatedValueTrack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueTrack);
}

uint64_t sub_1879D8EC8()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t AnimatedValueTrack.init<A>(path:velocity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  Path.forEach(_:)();
  v6 = specialized AnimatedValueTrack<A>.VectorPath.arcLength.getter(v9) / a3;
  type metadata accessor for AnimatedValueTrack<CGPoint><A>.PacedPathSource(0);
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnimatedValueTrack<CGPoint><A>.PacedPathSource and conformance AnimatedValueTrack<A><A>.PacedPathSource, (uint64_t (*)(uint64_t))type metadata accessor for AnimatedValueTrack<CGPoint><A>.PacedPathSource, (uint64_t)&protocol conformance descriptor for AnimatedValueTrack<A><A>.PacedPathSource);
  result = outlined release of Path(a1);
  *(_QWORD *)a2 = v9;
  *(double *)(a2 + 8) = v6;
  return result;
}

void partial apply for closure #1 in AnimatedValueTrack<A>.VectorPath<>.init(path:)(uint64_t a1)
{
  closure #1 in AnimatedValueTrack<A>.VectorPath<>.init(path:)(a1);
}

void type metadata accessor for AnimatedValueTrack<CGPoint><A>.PacedPathSource(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AnimatedValueTrack<CGPoint><A>.PacedPathSource)
  {
    type metadata accessor for CGPoint(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E0CE8358]);
    v6 = type metadata accessor for AnimatedValueTrack<A>.PacedPathSource(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AnimatedValueTrack<CGPoint><A>.PacedPathSource);
  }
}

uint64_t AnimatedValueTrack.update(velocity:mix:at:)(uint64_t a1, double a2, double a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;

  v7 = v3[3];
  v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v8 + 32))(a1, v7, v8, a2, a3);
}

uint64_t static AnimatedValueTrack.== infix(_:_:)(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = a1[3];
  v6 = a1[4];
  v7 = __swift_project_boxed_opaque_existential_1(a1, v5);
  v8 = a2[3];
  v9 = __swift_project_boxed_opaque_existential_1(a2, v8);
  return static AnimatedValueTrack.areSourcesEqual<A, B>(_:_:)((uint64_t)v7, (uint64_t)v9, a3, v5, v8, v6);
}

uint64_t static AnimatedValueTrack.areSourcesEqual<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  char v27;
  _QWORD v29[2];

  v29[1] = a6;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v29 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a4 - 8);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v17, a2, a5, v21);
  v25 = swift_dynamicCast();
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if (v25)
  {
    v26(v13, 0, 1, a4);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v13, a4);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, a4);
  }
  else
  {
    v26(v13, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v27 = 0;
  }
  return v27 & 1;
}

uint64_t AnimatedValueTrack.keyPath<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t *boxed_opaque_existential_1;
  __int128 v15;
  uint64_t v16[3];
  __int128 v17;

  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  AnimatedValueTrackSource.keyPath<A>(_:)(a1, v5, v6, v16);
  v15 = v17;
  v7 = v17;
  v8 = __swift_project_boxed_opaque_existential_1(v16, v17);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v8, v8);
  v12 = (char *)&v16[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v9 + 16))(v12, v10);
  *(_OWORD *)(a2 + 24) = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 32))(boxed_opaque_existential_1, v12, v7);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValueTrack<A>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return static AnimatedValueTrack.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t AnimatedValueTrack.update(velocity:at:)(uint64_t a1, double a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[3];
  v6 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v6 + 32))(a1, v5, v6, 1.0, a2);
}

uint64_t AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:keyframes:)@<X0>(unsigned __int8 *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, double a7@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;

  if ((a2 & 1) != 0)
  {
    v18 = *a1;
    v10 = AnimatedValueTrack<A>.PacedPathSource.init(duration:keyframes:interpolation:)(a3, &v18, a4, a5);
    v12 = v11;
    v14 = type metadata accessor for AnimatedValueTrack<A>.PacedPathSource(0, a4, a5, v13);
    a6[3] = v14;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueTrack<A><A>.PacedPathSource, v14);
    a6[1] = v12;
  }
  else
  {
    v19 = *a1;
    v10 = AnimatedValueTrack<A>.VectorPath.init(duration:keyframes:interpolation:)(a3, &v19, a4, a5, a7);
    v17 = type metadata accessor for AnimatedValueTrack<A>.VectorPath(0, a4, a5, v16);
    a6[3] = v17;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueTrack<A><A>.VectorPath, v17);
  }
  a6[4] = result;
  *a6 = v10;
  return result;
}

uint64_t AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:values:)@<X0>(unsigned __int8 *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, double a7@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[7];
  unsigned __int8 v21;

  v21 = *a1;
  v20[6] = a3;
  v20[2] = a4;
  v20[3] = a5;
  v12 = type metadata accessor for Array();
  v15 = (char *)type metadata accessor for AnimatedValueKeyframe(0, a4, v13, v14);
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v12);
  v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:values:), (uint64_t)v20, v12, v15, MEMORY[0x1E0DEDCE8], v16, MEMORY[0x1E0DEDD18], v17);
  swift_bridgeObjectRelease();
  return AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:keyframes:)(&v21, a2, v18, a4, a5, a6, a7);
}

uint64_t closure #1 in AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21[2];
  char v22;

  v8 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters(0, a2, a3, a4);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v21 - v10;
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v16, a1, a2, v14);
  static AnimatedValueKeyframe.InterpolationParameters.automatic.getter(a2, v18, v19, (uint64_t)v11);
  memset(v21, 0, sizeof(v21));
  v22 = 1;
  return AnimatedValueKeyframe.init(value:interpolation:incomingTimingCurve:)((uint64_t)v16, (uint64_t)v11, v21, a2, a5);
}

uint64_t partial apply for closure #1 in AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:values:)(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2, a3);
}

uint64_t AnimatedValueTrack<A>.init(interpolation:keyframes:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;

  v12 = *a1;
  v8 = AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)(a2, &v12, a3, a4);
  v10 = type metadata accessor for AnimatedValueTrack<A>.VectorPath(0, a3, a4, v9);
  a5[3] = v10;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueTrack<A><A>.VectorPath, v10);
  a5[4] = result;
  *a5 = v8;
  return result;
}

uint64_t AnimatedValueTrack<A>.init(interpolation:values:)@<X0>(char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  char v9;

  v9 = *a1;
  type metadata accessor for AnimatedValueKeyframe(0, a2, a2, a3);
  v7 = Dictionary.mapValues<A>(_:)();
  swift_bridgeObjectRelease();
  return AnimatedValueTrack<A>.init(interpolation:keyframes:)(&v9, v7, a2, a3, a4);
}

uint64_t partial apply for closure #1 in AnimatedValueTrack<A>.init(interpolation:values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in AnimatedValueTrack<A>.init(duration:interpolation:constantVelocity:values:)(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2, a3);
}

uint64_t AnimatedValueTrack<A>.init(duration:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)&v26 - v13;
  v29 = AnimatedValueTrack<A>.VectorPath.init()(a2, a3, v15, v16);
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v18 = type metadata accessor for AnimatedValueTrack<A>.VectorPath(0, a2, a3, v17);
  AnimatedValueTrack<A>.VectorPath.move(to:)((uint64_t)v14, v18, v19, v20);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  AnimatedValueTrack<A>.VectorPath.hold(for:)(v18, a5, v21, v22, v23);
  v24 = v29;
  v27 = v18;
  v28 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueTrack<A><A>.VectorPath, v18);
  *(_QWORD *)&v26 = v24;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return outlined init with take of OptionalBinaryInteger(&v26, a4);
}

uint64_t AnimatedValueTrack<A>.init(discreteValues:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  Swift::Bool IsNativeType;
  BOOL v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  uint64_t v72;

  v60 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v62 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v59 - v7;
  v66 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = type metadata accessor for Optional();
  v63 = *(_QWORD *)(v14 - 8);
  v64 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v65 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (double *)((char *)&v59 - v19);
  v72 = AnimatedValueTrack<A>.VectorPath.init()(a1, a2, v21, v22);
  v69 = a1;
  v70 = a2;
  v71[0] = Dictionary.filter(_:)();
  v67 = a1;
  v68 = a2;
  v23 = type metadata accessor for Dictionary();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA0D0], v23);
  v24 = Sequence.sorted(by:)();
  swift_bridgeObjectRelease();
  v25 = 0;
  for (i = 0.0; ; i = v37)
  {
    if (v25 == MEMORY[0x18D75D06C](v24, TupleTypeMetadata2))
    {
      v33 = *(_QWORD *)(TupleTypeMetadata2 - 8);
      v34 = v65;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v65, 1, 1, TupleTypeMetadata2);
      goto LABEL_9;
    }
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      v33 = *(_QWORD *)(TupleTypeMetadata2 - 8);
      v34 = v65;
      (*(void (**)(char *, unint64_t, uint64_t))(v33 + 16))(v65, v24+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72) * v25, TupleTypeMetadata2);
      v36 = __OFADD__(v25++, 1);
      if (v36)
        break;
      goto LABEL_8;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)();
    v33 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    if (*(_QWORD *)(v33 + 64) != 8)
    {
      __break(1u);
      return result;
    }
    v71[0] = result;
    (*(void (**)(char *, _QWORD *, uint64_t))(v33 + 16))(v65, v71, TupleTypeMetadata2);
    v34 = v65;
    swift_unknownObjectRelease();
    v36 = __OFADD__(v25++, 1);
    if (v36)
      break;
LABEL_8:
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v34, 0, 1, TupleTypeMetadata2);
LABEL_9:
    (*(void (**)(double *, char *, uint64_t))(v63 + 32))(v20, v34, v64);
    if ((*(unsigned int (**)(double *, uint64_t, uint64_t))(v33 + 48))(v20, 1, TupleTypeMetadata2) == 1)
      goto LABEL_16;
    v37 = *v20;
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v12, (char *)v20 + *(int *)(TupleTypeMetadata2 + 48), a1);
    v38 = swift_bridgeObjectRetain();
    v40 = AnimatedValueTrack<A>.VectorPath.isEmpty.getter(v38, a1, a2, v39);
    swift_bridgeObjectRelease();
    if ((v40 & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
      v43 = type metadata accessor for AnimatedValueTrack<A>.VectorPath(0, a1, a2, v42);
      AnimatedValueTrack<A>.VectorPath.move(to:)((uint64_t)v8, v43, v44, v45);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v8, v62);
      AnimatedValueTrack<A>.VectorPath.hold(for:)(v43, v37 - i, v46, v47, v48);
    }
    else
    {
      v27 = type metadata accessor for AnimatedValueTrack<A>.VectorPath(0, a1, a2, v41);
      AnimatedValueTrack<A>.VectorPath.hold(for:)(v27, v37 - i, v28, v29, v30);
      (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
      AnimatedValueTrack<A>.VectorPath.move(to:)((uint64_t)v8, v27, v31, v32);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v8, v62);
    }
    (*(void (**)(char *, uint64_t))(v66 + 8))(v12, a1);
  }
  __break(1u);
LABEL_16:
  swift_bridgeObjectRelease();
  if (i < 1.0)
  {
    v51 = type metadata accessor for AnimatedValueTrack<A>.VectorPath(0, a1, a2, v50);
    AnimatedValueTrack<A>.VectorPath.hold(for:)(v51, 1.0 - i, v52, v53, v54);
  }
  v71[0] = v72;
  v55 = type metadata accessor for AnimatedValueTrack<A>.VectorPath(0, a1, a2, v50);
  v56 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueTrack<A><A>.VectorPath, v55);
  v57 = v60;
  v60[3] = v55;
  v57[4] = v56;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  return (*(uint64_t (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(boxed_opaque_existential_1, v71, v55);
}

BOOL closure #1 in AnimatedValueTrack<A>.init(discreteValues:)(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  double v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v16;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v8);
  v11 = (char *)&v16 - v10;
  v12 = *a1;
  *(uint64_t *)((char *)&v16 - v10) = *(_QWORD *)a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a3 - 8) + 16))((char *)&v16 + *(int *)(v13 + 48) - v10, a2, a3, v9);
  v14 = v12 <= 1.0 && v12 >= 0.0;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, TupleTypeMetadata2);
  return v14;
}

BOOL partial apply for closure #1 in AnimatedValueTrack<A>.init(discreteValues:)(double *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in AnimatedValueTrack<A>.init(discreteValues:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t AnimatedValueTrack<A>.init(discreteValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  Swift::Bool IsNativeType;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v55 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v53 = (char *)&v49 - v10;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v56 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v49 - v17;
  v58 = a1;
  v19 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v19);
  if ((Collection.isEmpty.getter() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return AnimatedValueTrack.init()(a2, (uint64_t)a4);
  }
  v21 = MEMORY[0x18D75D024](a1, a2);
  if (v21 < 2)
  {
LABEL_14:
    v44 = (uint64_t)v56;
    Array.subscript.getter();
    swift_bridgeObjectRelease();
    return AnimatedValueTrack<A>.init(duration:value:)(v44, a2, a3, (uint64_t)a4, 1.0);
  }
  v24 = v21;
  v25 = AnimatedValueTrack<A>.VectorPath.init()(a2, a3, v22, v23);
  v58 = v25;
  if (MEMORY[0x18D75D06C](a1, a2))
  {
    v26 = 0;
    v27 = 1.0 / (double)v24;
    v50 = *(void (**)(uint64_t, uint64_t))(a3 + 24);
    v51 = v18;
    v52 = a1;
    while (1)
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v18, a1+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v26, a2);
        v29 = v26 + 1;
        if (__OFADD__(v26, 1))
          goto LABEL_13;
      }
      else
      {
        result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v49 != 8)
        {
          __break(1u);
          return result;
        }
        v57 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v11 + 16))(v18, &v57, a2);
        swift_unknownObjectRelease();
        v29 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
      }
      v30 = v56;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v56, v18, a2);
      v31 = v11;
      v32 = (uint64_t)v53;
      v50(a2, a3);
      v34 = a4;
      v35 = type metadata accessor for AnimatedValueTrack<A>.VectorPath(0, a2, a3, v33);
      AnimatedValueTrack<A>.VectorPath.move(to:)(v32, v35, v36, v37);
      v38 = v32;
      v11 = v31;
      v18 = v51;
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v38, v55);
      v39 = v35;
      a4 = v34;
      AnimatedValueTrack<A>.VectorPath.hold(for:)(v39, v27, v40, v41, v42);
      v43 = v30;
      a1 = v52;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v43, a2);
      ++v26;
      if (v29 == MEMORY[0x18D75D06C](a1, a2))
      {
        swift_bridgeObjectRelease();
        v25 = v58;
        goto LABEL_16;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_16:
  v57 = v25;
  v46 = type metadata accessor for AnimatedValueTrack<A>.VectorPath(0, a2, a3, v45);
  v47 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueTrack<A><A>.VectorPath, v46);
  a4[3] = v46;
  a4[4] = v47;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(boxed_opaque_existential_1, &v57, v46);
}

uint64_t instantiation function for generic protocol witness table for AnimatedValueTrack<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueTrack<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double partial apply for specialized closure #1 in Curve.arcLength(at:)(double a1)
{
  double v1;
  double v2;

  v1 = specialized Curve.velocity(at:)(a1);
  return sqrt(v1 * v1 + v2 * v2);
}

uint64_t getEnumTagSinglePayload for ToolbarModifiedContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879DA408 + 4 * byte_187C78360[v17 - 1]))();
}

void storeEnumTagSinglePayload for ToolbarModifiedContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata accessor for ToolbarModifiedContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarModifiedContent);
}

uint64_t ToolbarContent.modifier<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v14, v12);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v17, v4, a2, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a4, v17, a2);
  v19 = type metadata accessor for ToolbarModifiedContent(0, a2, a3, v18);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4 + *(int *)(v19 + 36), v11, a3);
}

void protocol witness for ToolbarContentModifier.body(content:) in conformance ToolbarItemHiddenModifier()
{
  protocol witness for ToolbarContentModifier.body(content:) in conformance ToolbarItemHiddenModifier();
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for ToolbarContentModifier.body(content:) in conformance CustomizationBehaviorModifier()
{
  protocol witness for ToolbarContentModifier.body(content:) in conformance ToolbarItemHiddenModifier();
}

void protocol witness for ToolbarContentModifier.body(content:) in conformance CustomizationOptionsModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int v31;
  _BYTE v32[12];

  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 14);
  v22 = a2[8];
  v21 = *((_DWORD *)a2 + 18);
  LODWORD(v23) = *a1;
  v11 = v23;
  type metadata accessor for ToolbarModifiedContent(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v20 = *(_OWORD *)(a2 + 5);
  v16 = a2[3];
  v17 = a2[4];
  _GraphValue.subscript.getter();
  v23 = v12;
  v24 = v13;
  v25 = v14;
  v26 = v16;
  v27 = v17;
  v28 = v20;
  v29 = v15;
  v30 = v22;
  v31 = v21;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_DWORD *)(v18 + 48) = v11;
  (*(void (**)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a6 + 32))(v32, &v23, partial apply for closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:), v18, a4, a6);
  return swift_release();
}

uint64_t closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  int v27;
  _BYTE v28[12];

  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 14);
  v13 = a2[8];
  v14 = *((_DWORD *)a2 + 18);
  LODWORD(v19) = a3;
  type metadata accessor for ToolbarModifiedContent(255, a4, a5, a4);
  type metadata accessor for _GraphValue();
  v18 = *(_OWORD *)(a2 + 5);
  v15 = a2[3];
  v16 = a2[4];
  _GraphValue.subscript.getter();
  v19 = v9;
  v20 = v10;
  v21 = v11;
  v22 = v15;
  v23 = v16;
  v24 = v18;
  v25 = v12;
  v26 = v13;
  v27 = v14;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(a6 + 32))(v28, &v19, a4, a6);
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance <> ToolbarModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t);
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  int v36;
  _BYTE v37[12];

  v15 = *a2;
  v16 = *((_DWORD *)a2 + 2);
  v17 = a2[2];
  v26 = *((_DWORD *)a2 + 14);
  v25 = a2[8];
  v24 = *((_DWORD *)a2 + 18);
  LODWORD(v28) = *a1;
  v14 = v28;
  type metadata accessor for ToolbarModifiedContent(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  v23 = *(_OWORD *)(a2 + 5);
  v18 = a2[3];
  v19 = a2[4];
  _GraphValue.subscript.getter();
  v28 = v15;
  v29 = v16;
  v30 = v17;
  v31 = v18;
  v32 = v19;
  v33 = v23;
  v34 = v26;
  v35 = v25;
  v36 = v24;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a5;
  *(_QWORD *)(v20 + 24) = a6;
  *(_QWORD *)(v20 + 32) = a7;
  *(_QWORD *)(v20 + 40) = a8;
  *(_DWORD *)(v20 + 48) = v14;
  *(_QWORD *)(v20 + 56) = a3;
  *(_QWORD *)(v20 + 64) = a4;
  v21 = *(void (**)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32);
  swift_retain();
  v21(v37, &v28, partial apply for closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:), v20, a6, a8);
  return swift_release();
}

uint64_t closure #1 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[6];

  v9 = type metadata accessor for ToolbarModifiedContent(0, a2, a3, a4);
  v10 = a1 + *(int *)(v9 + 36);
  v14[2] = v9;
  v14[3] = a3;
  v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10, a6, (uint64_t)v14, a3, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  return v14[5];
}

uint64_t closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int v31;
  _BYTE v32[12];

  v11 = *a2;
  v12 = *((_DWORD *)a2 + 2);
  v13 = a2[2];
  v14 = *((_DWORD *)a2 + 14);
  v15 = a2[8];
  v16 = *((_DWORD *)a2 + 18);
  LODWORD(v23) = a3;
  type metadata accessor for ToolbarModifiedContent(255, a6, a7, a4);
  type metadata accessor for _GraphValue();
  v20 = *(_OWORD *)(a2 + 5);
  v17 = a2[3];
  v18 = a2[4];
  _GraphValue.subscript.getter();
  v23 = v11;
  v24 = v12;
  v25 = v13;
  v26 = v17;
  v27 = v18;
  v28 = v20;
  v29 = v14;
  v30 = v15;
  v31 = v16;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 32))(v32, &v23, a4, a5, a6, a8);
}

uint64_t closure #1 in closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];

  v12[2] = type metadata accessor for ToolbarModifiedContent(0, a2, a3, a4);
  v12[3] = a2;
  v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a6, (uint64_t)v12, a2, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12[5];
}

void protocol witness for ToolbarContentModifier.body(content:) in conformance <> ToolbarModifiedContent<A, B>()
{
  specialized ToolbarContentModifier<>.body(content:)();
}

uint64_t protocol witness for static ToolbarContentModifier._makeToolbar(content:inputs:body:) in conformance <> ToolbarModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), *(_QWORD *)(a6 - 8), *(_QWORD *)(a6 - 16));
}

uint64_t static ToolbarModifier_Content._makeToolbar(content:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD);
  uint64_t v14;
  uint64_t result;
  int v16;
  void (*v17)(uint64_t, _QWORD);
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  void (*v26)(uint64_t, _QWORD);
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_DWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_DWORD *)(a1 + 72);
  v26 = *(void (**)(uint64_t, _QWORD))a1;
  v27 = v5;
  v28 = v6;
  v29 = *(_OWORD *)(a1 + 24);
  v30 = v7;
  v31 = v8;
  v32 = v9;
  v33 = v10;
  v34 = v11;
  v12 = type metadata accessor for ToolbarModifier_Content.BodyInput(0, a2, a3, a3);
  type metadata accessor for (_:_:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarModifier_Content<A>.BodyInput, v12);
  _GraphInputs.popLast<A, B>(_:)();
  v13 = v17;
  if (v17)
  {
    v17 = v26;
    LODWORD(v18) = v27;
    v19 = v28;
    v20 = v29;
    v21 = v30;
    v22 = v31;
    v23 = v32;
    v24 = v33;
    v25 = v34;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v14 = swift_bridgeObjectRetain();
    v13(v14, &v17);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v13);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    PreferencesOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v16 = v18;
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 8) = v16;
    *(_QWORD *)(a4 + 16) = v10;
  }
  return result;
}

uint64_t static ToolbarModifier_Content.BodyInput.defaultValue.getter()
{
  type metadata accessor for (_:_:)();
  return Stack.init()();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance ToolbarModifier_Content<A>.BodyInput()
{
  return static ToolbarModifier_Content.BodyInput.defaultValue.getter();
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance ToolbarModifier_Content<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static ToolbarModifier_Content._makeToolbar(content:inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t instantiation function for generic protocol witness table for <> ToolbarModifiedContent<A, B>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ToolbarModifiedContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> ToolbarModifiedContent<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v4 = a3[1];
  v6[0] = *(_QWORD *)(*a3 + 8);
  v6[1] = v4;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ToolbarModifiedContent<A, B>, a2, v6);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t sub_1879DB1B8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t partial apply for closure #1 in closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t sub_1879DB1FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:)(a1, a2, *(_DWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t partial apply for closure #1 in closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:body:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #2 in static ToolbarModifiedContent<>._makeToolbar(content:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

void specialized ToolbarContentModifier.toolbarBodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized ToolbarContentModifier<>.body(content:)()
{
  specialized ToolbarContentModifier.toolbarBodyError()();
}

uint64_t type metadata accessor for ToolbarModifier_Content.BodyInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarModifier_Content.BodyInput);
}

uint64_t type metadata accessor for ToolbarModifier_Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToolbarModifier_Content);
}

void base witness table accessor for PropertyKey in ToolbarModifier_Content<A>.BodyInput()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t EnvironmentValues.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return EnvironmentValues.getBridgedValue<A>(for:)(a1, a2, a3, a4);
}

uint64_t EnvironmentValues.subscript.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  specialized EnvironmentValues.subscript.setter();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t EnvironmentValues.getBridgedValue<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup(0, a2, a3, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UITraitBridgedEnvironmentPropertyKeyLookup<A>, v4);
  return EnvironmentValues.valueWithSecondaryLookup<A>(_:)();
}

uint64_t EnvironmentValues.setBridgedValue<A>(value:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v17;

  v8 = *(_QWORD *)(v4 + 8);
  type metadata accessor for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v8)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v9 = (char *)v17;
  v10 = *(_QWORD *)(v17 + 16);
  if (v10)
  {
    v11 = 32;
    v12 = *(_QWORD *)(v17 + 16);
    while (*(_QWORD *)(v17 + v11) != a2)
    {
      v11 += 16;
      if (!--v12)
        goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 + 1, 1, (char *)v17);
    v14 = *((_QWORD *)v9 + 2);
    v13 = *((_QWORD *)v9 + 3);
    if (v14 >= v13 >> 1)
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v14 + 1;
    v15 = &v9[16 * v14];
    *((_QWORD *)v15 + 4) = a2;
    *((_QWORD *)v15 + 5) = a4;
    type metadata accessor for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.setter();
    if (v8)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  return EnvironmentValues._set<A>(_:for:)(a1);
}

void (*EnvironmentValues.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  uint64_t v13;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[6] = malloc(v12);
  v9[7] = malloc(v12);
  EnvironmentValues.getBridgedValue<A>(for:)(a2, a3, a4, v13);
  return EnvironmentValues.subscript.modify;
}

void EnvironmentValues.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[6];
  v4 = (void *)(*a1)[7];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[2];
  v9 = **a1;
  v8 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    EnvironmentValues.setBridgedValue<A>(value:for:)((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    EnvironmentValues.setBridgedValue<A>(value:for:)((*a1)[7], v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t static UITraitBridgedEnvironmentResolver.read<A>(for:from:)(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10[6];

  result = swift_conformsToProtocol2();
  if (result)
  {
    v5 = result;
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v10[3] = swift_getAssociatedTypeWitness();
    __swift_allocate_boxed_opaque_existential_1(v10);
    v10[4] = v6;
    v10[5] = v7;
    EnvironmentValues.getBridgedValue<A>(for:)(a1, a1, v5, v9);
    swift_getAssociatedTypeWitness();
    return swift_dynamicCast();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static UITraitBridgedEnvironmentResolver.write<A>(for:to:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;

  result = swift_conformsToProtocol2();
  if (result)
  {
    v7 = result;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return static UITraitBridgedEnvironmentResolver.write<A, B>(bridgedKey:to:value:)(a1, a2, a3, a1, AssociatedTypeWitness, v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static UITraitBridgedEnvironmentResolver.write<A, B>(bridgedKey:to:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v13);
  v15 = (char *)&v22 - v14;
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), a3, a5, v18);
  swift_dynamicCast();
  EnvironmentValues.setBridgedValue<A>(value:for:)((uint64_t)v15, a1, a4, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
}

uint64_t static UITraitBridgedEnvironmentPropertyKeyLookup.lookup(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  _QWORD v8[8];

  v8[7] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a2;
  type metadata accessor for UITraitCollection?();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in static UITraitBridgedEnvironmentPropertyKeyLookup.lookup(in:), (uint64_t)v8, MEMORY[0x1E0DEDCE8], AssociatedTypeWitness, v6, a4);
}

uint64_t protocol witness for static PropertyKeyLookup.lookup(in:) in conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static UITraitBridgedEnvironmentPropertyKeyLookup.lookup(in:)(*a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UITraitBridgedEnvironmentPropertyKeyLookup);
}

void associated type witness table accessor for PropertyKeyLookup.Primary : PropertyKey in UITraitBridgedEnvironmentPropertyKeyLookup<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for implicit closure #1 in static UITraitBridgedEnvironmentPropertyKeyLookup.lookup(in:)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 24) + 16))(*a1, *(_QWORD *)(v1 + 16));
}

void type metadata accessor for UITraitCollection?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UITraitCollection?)
  {
    type metadata accessor for UITraitCollection();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UITraitCollection?);
  }
}

unint64_t type metadata accessor for UITraitCollection()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UITraitCollection;
  if (!lazy cache variable for type metadata for UITraitCollection)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UITraitCollection);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for UITraitBridgedEnvironmentResolver()
{
  return &type metadata for UITraitBridgedEnvironmentResolver;
}

uint64_t *initializeBufferWithCopyOfBuffer for InsettableGroupedListBodyRule(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 42) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v9 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
    v10 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
    v11 = *(_OWORD *)v10;
    v12 = *(_OWORD *)(v10 + 16);
    *(_WORD *)(v9 + 32) = *(_WORD *)(v10 + 32);
    *(_OWORD *)v9 = v11;
    *(_OWORD *)(v9 + 16) = v12;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))((v9 + v5 + 34) & ~v5, (v10 + v5 + 34) & ~v5);
  }
  return v3;
}

uint64_t destroy for InsettableGroupedListBodyRule(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((((a1 + 11) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 34) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_DWORD *initializeWithCopy for InsettableGroupedListBodyRule(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)v5;
  v7 = *(_OWORD *)(v5 + 16);
  *(_WORD *)(v4 + 32) = *(_WORD *)(v5 + 32);
  *(_OWORD *)v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(unsigned __int8 *)(v8 + 80) + 34 + v4) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(unsigned __int8 *)(v8 + 80) + 34 + v5) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_DWORD *assignWithCopy for InsettableGroupedListBodyRule(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)v5;
  v7 = *(_OWORD *)(v5 + 16);
  *(_WORD *)(v4 + 32) = *(_WORD *)(v5 + 32);
  *(_OWORD *)v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(unsigned __int8 *)(v8 + 80) + 34 + v4) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(unsigned __int8 *)(v8 + 80) + 34 + v5) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_DWORD *initializeWithTake for InsettableGroupedListBodyRule(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)v5;
  v7 = *(_OWORD *)(v5 + 16);
  *(_WORD *)(v4 + 32) = *(_WORD *)(v5 + 32);
  *(_OWORD *)v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))((*(unsigned __int8 *)(v8 + 80) + 34 + v4) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(unsigned __int8 *)(v8 + 80) + 34 + v5) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_DWORD *assignWithTake for InsettableGroupedListBodyRule(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)v5;
  v7 = *(_OWORD *)(v5 + 16);
  *(_WORD *)(v4 + 32) = *(_WORD *)(v5 + 32);
  *(_OWORD *)v4 = v6;
  *(_OWORD *)(v4 + 16) = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(unsigned __int8 *)(v8 + 80) + 34 + v4) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(unsigned __int8 *)(v8 + 80) + 34 + v5) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for InsettableGroupedListBodyRule(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 42) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 11) & 0xFFFFFFFFFFFFFFF8) + v6 + 34) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1879DC0E8 + 4 * byte_187C78690[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for InsettableGroupedListBodyRule(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 42) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 42) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

_QWORD *initializeBufferWithCopyOfBuffer for InsettableGroupedListBody(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 + 34;
  if ((v10 | v7) <= 7
    && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v10 + 34 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v10) + *(_QWORD *)(v9 + 64) <= 0x18)
  {
    v15 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    v27 = ~v7;
    v28 = *(_QWORD *)(a3 + 16);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      v17 = ~v10;
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v15 + v7 + 8) & ~v7))
      {
LABEL_14:
        memcpy(__dst, __src, v8);
LABEL_17:
        v21 = ((unint64_t)__dst + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
        v22 = ((unint64_t)__src + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
        v23 = *(_OWORD *)v22;
        v24 = *(_OWORD *)(v22 + 16);
        *(_WORD *)(v21 + 32) = *(_WORD *)(v22 + 32);
        *(_OWORD *)v21 = v23;
        *(_OWORD *)(v21 + 16) = v24;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((v11 + v21) & v17, (v11 + v22) & v17, v28);
        return __dst;
      }
    }
    else
    {
      v16 = *v15;
      if ((unint64_t)*v15 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      v17 = ~v10;
      if ((_DWORD)v16 != -1)
        goto LABEL_14;
    }
    *__dst = *__src;
    v18 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v15;
    v26 = ((unint64_t)v18 + v7 + 8) & v27;
    v19 = ((unint64_t)v15 + v7 + 8) & v27;
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v20(v26, v19, v5);
    goto LABEL_17;
  }
  v14 = *__src;
  *__dst = *__src;
  __dst = (_QWORD *)(v14 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16)));
  swift_retain();
  return __dst;
}

_QWORD *assignWithCopy for InsettableGroupedListBody(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, unint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t v34;

  v3 = a3;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v34 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    v32 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
    v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v31 = v15(((unint64_t)v11 + v9 + 8) & ~v9, v8, v6);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v3 = a3;
    v14 = v15(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    v10 = v32;
    if (!v31)
    {
LABEL_5:
      if (!v14)
      {
        *a1 = *a2;
        swift_retain();
        swift_release();
        *v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v11 + v9 + 8) & v34, ((unint64_t)v12 + v9 + 8) & v34, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v11 + v9 + 8) & v34, v6);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *a1 = *a2;
    *v11 = *v12;
    v16 = (unint64_t)v11 + v9 + 8;
    v17 = v3;
    v18 = v16 & v34;
    v19 = (unint64_t)v12 + v9 + 8;
    v20 = v10;
    v21 = v19 & v34;
    v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v23 = v18;
    v3 = v17;
    v24 = v21;
    v10 = v20;
    v22(v23, v24, v6);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v10);
LABEL_12:
  v25 = ((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_OWORD *)v26;
  v28 = *(_OWORD *)(v26 + 16);
  *(_WORD *)(v25 + 32) = *(_WORD *)(v26 + 32);
  *(_OWORD *)v25 = v27;
  *(_OWORD *)(v25 + 16) = v28;
  v29 = *(_QWORD *)(*(_QWORD *)(v3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v29 + 24))((*(unsigned __int8 *)(v29 + 80) + 34 + v25) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80), (*(unsigned __int8 *)(v29 + 80) + 34 + v26) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
  return a1;
}

_QWORD *initializeWithTake for InsettableGroupedListBody(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ~v8;
  v10 = (v8 + 16) & ~v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v10 + v11;
    if ((_DWORD)v13 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v15 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  v16 = ((unint64_t)__dst + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)__src + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_OWORD *)v17;
  v19 = *(_OWORD *)(v17 + 16);
  *(_WORD *)(v16 + 32) = *(_WORD *)(v17 + 32);
  *(_OWORD *)v16 = v18;
  *(_OWORD *)(v16 + 16) = v19;
  v20 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 32))((*(unsigned __int8 *)(v20 + 80) + 34 + v16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), (*(unsigned __int8 *)(v20 + 80) + 34 + v17) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return __dst;
}

_QWORD *assignWithTake for InsettableGroupedListBody(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t);
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  uint64_t v25;

  v3 = a3;
  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
  v11 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    v23 = ((v9 + 16) & ~v9) + *(_QWORD *)(v7 + 64);
    v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v22 = v15(((unint64_t)v11 + v9 + 8) & ~v9, v8, v6);
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v3 = a3;
    v14 = v15(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    v10 = v23;
    if (!v22)
    {
LABEL_5:
      if (!v14)
      {
        *a1 = *a2;
        swift_release();
        *v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)v11 + v9 + 8) & v25, ((unint64_t)v12 + v9 + 8) & v25, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v11 + v9 + 8) & v25, v6);
      goto LABEL_9;
    }
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL)
      LODWORD(v13) = -1;
    v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v14)
  {
    *a1 = *a2;
    *v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v11 + v9 + 8) & v25, ((unint64_t)v12 + v9 + 8) & v25, v6);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v10);
LABEL_12:
  v16 = ((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_OWORD *)v17;
  v19 = *(_OWORD *)(v17 + 16);
  *(_WORD *)(v16 + 32) = *(_WORD *)(v17 + 32);
  *(_OWORD *)v16 = v18;
  *(_OWORD *)(v16 + 16) = v19;
  v20 = *(_QWORD *)(*(_QWORD *)(v3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 40))((*(unsigned __int8 *)(v20 + 80) + 34 + v16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), (*(unsigned __int8 *)(v20 + 80) + 34 + v17) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for InsettableGroupedListBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = v7 - 1;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8)
    v11 = v8;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = ((v12 + 16) & ~v12) + *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = v14 + 34;
  v16 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_27;
  v17 = ((v15 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v14) + *(_QWORD *)(v9 + 64);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_27:
      if (v8 < v10)
        return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v9 + 48))((v15 + ((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v14, *(unsigned int *)(v9 + 84), v4);
      v24 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        v26 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v24 + v12 + 8) & ~v12);
      }
      else
      {
        v25 = *v24;
        if (v25 >= 0xFFFFFFFF)
          LODWORD(v25) = -1;
        v26 = v25 + 1;
      }
      if (v26 >= 2)
        return v26 - 1;
      else
        return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_27;
LABEL_18:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = ((v15 + ((v13 + 7) & 0xFFFFFFF8)) & ~(_DWORD)v14) + *(_DWORD *)(v9 + 64);
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v11 + v22 + 1;
}

void storeEnumTagSinglePayload for InsettableGroupedListBody(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= (v6 - 1))
    v8 = v6 - 1;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = ((*(unsigned __int8 *)(v7 + 80)
       + 34
       + ((((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + *(_QWORD *)(v5 + 64)
         + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
     + *(_QWORD *)(v7 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

void protocol witness for static Rule.initialValue.getter in conformance InsettableGroupedListBodyRule<A, B, C>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for StyleContextWriter();
  v3 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), v4);
  v6[0] = &protocol witness table for ListStyleContent;
  v6[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v2);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v5);
  type metadata accessor for InsettableGroupedListBody();
}

uint64_t sub_1879DD0BC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void InsettableGroupedListBody.CollectionViewBody.collectionViewListRoot(style:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD v25[2];
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  _BYTE v41[8];
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;

  v31 = a3;
  v30 = *(_QWORD *)(a2 + 24);
  type metadata accessor for Binding();
  v29 = type metadata accessor for Optional();
  v28 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v6);
  v27 = (char *)v25 - v7;
  v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v18, v3 + *(int *)(a2 + 68), v13, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  v20 = *(_QWORD *)v3;
  v21 = *(unsigned __int8 *)(v3 + 8);
  LODWORD(a1) = *(unsigned __int8 *)(v3 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v3, v21, *(_BYTE *)(v3 + 9));
  v26 = specialized Environment.wrappedValue.getter(v20, v21 | ((_DWORD)a1 << 8));
  v25[1] = v22 & 1;
  outlined consume of Environment<CGFloat?>.Content(v20, v21, a1);
  v23 = *(_QWORD *)(v3 + 16);
  v24 = *(unsigned __int8 *)(v3 + 24);
  LODWORD(v21) = *(unsigned __int8 *)(v3 + 25);
  outlined copy of Environment<CGFloat?>.Content(v23, v24, *(_BYTE *)(v3 + 25));
  specialized Environment.wrappedValue.getter(v23, v24 | ((_DWORD)v21 << 8));
  outlined consume of Environment<CGFloat?>.Content(v23, v24, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v27, v3 + *(int *)(a2 + 60), v29);
  InsettableGroupedListBody.CollectionViewBody.effectiveListPadding.getter((uint64_t)v41);
  v32 = v41[0];
  v33 = v42;
  v34 = v43;
  v35 = v44;
  v36 = v45;
  v37 = v46;
  v38 = v47;
  v39 = v48;
  v40 = v49;
  CollectionViewListRoot.init(content:style:minRowHeight:minHeaderHeight:selection:listPadding:)((uint64_t)v18, v13, v31);
}

uint64_t static InsettableGroupedListBody.TableViewRoot._viewListOptions.getter()
{
  return 108;
}

void InsettableGroupedListBody.TableViewRoot.body(children:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  type metadata accessor for Binding();
  v15 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v4);
  v13 = (char *)&v10 - v5;
  v6 = *(_QWORD *)(a1 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = AssociatedTypeWitness;
  v18 = v3;
  v19 = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for TableViewListDataSource(255, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v17 = v9;
  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListDataSource<A>, v9);
  v21 = v9;
  v22 = v3;
  v23 = v16;
  v24 = v6;
  type metadata accessor for TableViewListCore();
}

void sub_1879DD4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  double v31;
  double v32;
  __int128 v33;
  _OWORD *v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v14 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v9 + 96) = a1;
  *(_QWORD *)(v9 + 104) = v14;
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 + 40) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v9 + 48) = (char *)&a9 - v18;
  outlined init with copy of _VariadicView_Children(v11, v9 + 384);
  v19 = 1;
  if (*(_BYTE *)(v10 + *(int *)(v12 + 64) + 33) != 1)
    v19 = 2;
  *(_QWORD *)v9 = v19;
  v20 = *(_QWORD *)v10;
  v21 = *(unsigned __int8 *)(v10 + 8);
  v22 = *(unsigned __int8 *)(v10 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v10, v21, *(_BYTE *)(v10 + 9));
  v23 = specialized Environment.wrappedValue.getter(v20, v21 | (v22 << 8));
  v25 = v24 & 1;
  outlined consume of Environment<CGFloat?>.Content(v20, v21, v22);
  v26 = *(_QWORD *)(v10 + 16);
  v27 = *(unsigned __int8 *)(v10 + 24);
  LODWORD(v20) = *(unsigned __int8 *)(v10 + 25);
  outlined copy of Environment<CGFloat?>.Content(v26, v27, *(_BYTE *)(v10 + 25));
  v28 = specialized Environment.wrappedValue.getter(v26, v27 | ((_DWORD)v20 << 8));
  v30 = v29;
  outlined consume of Environment<CGFloat?>.Content(v26, v27, v20);
  v31 = *(double *)&v28;
  if ((v30 & 1) != 0)
    v31 = 35.0;
  v32 = TableViewListDataSource.init(_:style:minRowHeight:minHeaderHeight:)(v9 + 384, *(_QWORD *)v9, v23, v25, v9 + 440, v31);
  (*(void (**)(_QWORD, uint64_t, _QWORD, double))(*(_QWORD *)(v9 + 32) + 16))(*(_QWORD *)(v9 + 24), v10 + *(int *)(v12 + 60), *(_QWORD *)(v9 + 56), v32);
  outlined init with take of SectionInsetMode(v10 + *(int *)(v12 + 64), v13 - 216);
  v33 = *(_OWORD *)(v10 + 80);
  v34 = (_OWORD *)(v13 - 176);
  v34[2] = *(_OWORD *)(v10 + 64);
  v34[3] = v33;
  *(_WORD *)(v13 - 112) = *(_WORD *)(v10 + 96);
  v35 = *(_OWORD *)(v10 + 48);
  *v34 = *(_OWORD *)(v10 + 32);
  v34[1] = v35;
  outlined retain of Environment<ListPadding>(v13 - 176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))outlined copy of Environment<ListPadding>.Content);
  specialized Environment.wrappedValue.getter(v9 + 312);
  outlined retain of Environment<ListPadding>(v13 - 176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))outlined consume of Environment<ListPadding>.Content);
  v36 = *(_BYTE *)(v9 + 328);
  v37 = *(_QWORD *)(v9 + 336);
  v38 = *(_BYTE *)(v9 + 344);
  v39 = *(_QWORD *)(v9 + 352);
  v40 = *(_BYTE *)(v9 + 360);
  v41 = *(_QWORD *)(v9 + 368);
  v42 = *(_BYTE *)(v9 + 376);
  *(_QWORD *)(v9 + 248) = *(_QWORD *)(v9 + 320);
  *(_BYTE *)(v9 + 256) = v36;
  *(_QWORD *)(v9 + 264) = v37;
  *(_BYTE *)(v9 + 272) = v38;
  *(_QWORD *)(v9 + 280) = v39;
  *(_BYTE *)(v9 + 288) = v40;
  *(_QWORD *)(v9 + 296) = v41;
  *(_BYTE *)(v9 + 304) = v42;
  v43 = *(_QWORD *)(v9 + 72);
  TableViewListCore.Configuration.init(insetMode:padding:)(v13 - 216, (uint64_t *)(v9 + 248), (_OWORD *)(v9 + 120));
  TableViewListCore.init(dataSource:selection:configuration:)(v9 + 440, v43, *(_QWORD *)(v9 + 40));
}

uint64_t sub_1879DD71C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = v0[6];
  v3 = v0[12];
  static ViewBuilder.buildExpression<A>(_:)(v1, v3, &protocol witness table for TableViewListCore<A, B>);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0[13] + 8);
  v4(v1, v3);
  static ViewBuilder.buildBlock<A>(_:)(v2, v3, v0[14]);
  return v4(v2, v3);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance InsettableGroupedListBody<A, B>.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>.TableViewRoot, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance InsettableGroupedListBody<A, B>.TableViewRoot()
{
  return static InsettableGroupedListBody.TableViewRoot._viewListOptions.getter();
}

void type metadata accessor for ViewInputFlagModifier<PreferBaselineAlignedHeaders>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<PreferBaselineAlignedHeaders>)
  {
    v2 = lazy protocol witness table accessor for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for PreferBaselineAlignedHeaders, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<PreferBaselineAlignedHeaders>);
  }
}

unint64_t lazy protocol witness table accessor for type CollectionViewGroupedListsEnabled and conformance CollectionViewGroupedListsEnabled()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollectionViewGroupedListsEnabled and conformance CollectionViewGroupedListsEnabled;
  if (!lazy protocol witness table cache variable for type CollectionViewGroupedListsEnabled and conformance CollectionViewGroupedListsEnabled)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewGroupedListsEnabled, &unk_1E1B027B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionViewGroupedListsEnabled and conformance CollectionViewGroupedListsEnabled);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SectionInsetMode()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  Swift::UInt v8;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v5 = *((unsigned __int8 *)v0 + 32);
  v6 = *((unsigned __int8 *)v0 + 33);
  Hasher.init(_seed:)();
  if (v6 == 1)
  {
    if (v4 | v2 | v1 | v3)
      v7 = 0;
    else
      v7 = v5 == 0;
    if (v7)
      v8 = 3;
    else
      v8 = 13;
    Hasher._combine(_:)(v8);
  }
  else
  {
    Hasher._combine(_:)(0x1FuLL);
    if ((v5 & 1) == 0)
      EdgeInsets.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SectionInsetMode()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  Swift::UInt v3;

  v1 = *(unsigned __int8 *)(v0 + 32);
  if (*(_BYTE *)(v0 + 33) == 1)
  {
    if (*(_QWORD *)(v0 + 16) | *(_QWORD *)(v0 + 8) | *(_QWORD *)v0 | *(_QWORD *)(v0 + 24))
      v2 = 0;
    else
      v2 = v1 == 0;
    if (v2)
      v3 = 3;
    else
      v3 = 13;
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(0x1FuLL);
    if ((v1 & 1) == 0)
      EdgeInsets.hash(into:)();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for InsettableGroupedListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v45;
  char v46;
  char v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t __n;
  uint64_t v53;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0
    && ((((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64) + (((v6 | 7) + 98) & ~(v6 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 34 <= 0x18)
  {
    v51 = *(_QWORD *)(a3 + 24);
    __n = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
    v48 = *(_DWORD *)(v5 + 84);
    v11 = *(_QWORD *)a2;
    v12 = *(_BYTE *)(a2 + 9);
    v13 = *(_BYTE *)(a2 + 8);
    v49 = ~(v6 | 7);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v13, v12);
    *(_QWORD *)a1 = v11;
    *(_BYTE *)(a1 + 8) = v13;
    *(_BYTE *)(a1 + 9) = v12;
    v53 = a1;
    v14 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    v15 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_QWORD *)v15;
    LOBYTE(v11) = *(_BYTE *)(v15 + 9);
    v17 = *(_BYTE *)(v15 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v15, v17, v11);
    *(_QWORD *)v14 = v16;
    *(_BYTE *)(v14 + 8) = v17;
    *(_BYTE *)(v14 + 9) = v11;
    v18 = (v14 + 17) & 0xFFFFFFFFFFFFFFF8;
    v19 = (v15 + 17) & 0xFFFFFFFFFFFFFFF8;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    v50 = v5;
    v24 = *(_QWORD *)(v19 + 32);
    v25 = *(_QWORD *)(v19 + 40);
    v26 = *(_QWORD *)(v19 + 56);
    v45 = *(_QWORD *)(v19 + 48);
    v46 = *(_BYTE *)(v19 + 64);
    v47 = *(_BYTE *)(v19 + 65);
    outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v19, v21, v22, v23, v24, v25, v45, v26, v46, v47);
    *(_QWORD *)v18 = v20;
    *(_QWORD *)(v18 + 8) = v21;
    *(_QWORD *)(v18 + 16) = v22;
    *(_QWORD *)(v18 + 24) = v23;
    *(_QWORD *)(v18 + 32) = v24;
    *(_QWORD *)(v18 + 40) = v25;
    *(_QWORD *)(v18 + 48) = v45;
    *(_QWORD *)(v18 + 56) = v26;
    v27 = (v18 + 73) & v49;
    *(_BYTE *)(v18 + 64) = v46;
    v28 = (v19 + 73) & v49;
    v29 = (uint64_t *)((v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *(_BYTE *)(v18 + 65) = v47;
    if (v48 < 0)
    {
      v32 = v51;
      v35 = (*(uint64_t (**)(unint64_t))(v50 + 48))(((unint64_t)v29 + v6 + 8) & ~v6);
      v33 = v50;
      v31 = ~v6;
      v10 = v53;
      if (v35)
      {
LABEL_14:
        v34 = __n;
        memcpy((void *)v27, (const void *)v28, __n);
LABEL_17:
        v40 = ((v28 | 7) + v34) & 0xFFFFFFFFFFFFFFF8;
        v41 = *(_OWORD *)v40;
        v42 = *(_OWORD *)(v40 + 16);
        v43 = ((v27 | 7) + v34) & 0xFFFFFFFFFFFFFFF8;
        *(_WORD *)(v43 + 32) = *(_WORD *)(v40 + 32);
        *(_OWORD *)v43 = v41;
        *(_OWORD *)(v43 + 16) = v42;
        return v10;
      }
    }
    else
    {
      v30 = *v29;
      if ((unint64_t)*v29 >= 0xFFFFFFFF)
        LODWORD(v30) = -1;
      v31 = ~v6;
      v32 = v51;
      v33 = v50;
      v10 = v53;
      if ((_DWORD)v30 != -1)
        goto LABEL_14;
    }
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v36 = (_QWORD *)((v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v36 = *v29;
    v37 = ((unint64_t)v36 + v6 + 8) & v31;
    v38 = ((unint64_t)v29 + v6 + 8) & v31;
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
    swift_retain();
    swift_retain();
    v39(v37, v38, v32);
    v34 = __n;
    goto LABEL_17;
  }
  v9 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v10 = v9 + ((v6 + 16) & ~(v6 | 7));
  swift_retain();
  return v10;
}

__n128 assignWithCopy for InsettableGroupedListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t (*v53)(unint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  unint64_t v58;
  unint64_t v59;
  __n128 result;
  __int128 v61;
  char v62;
  char v63;
  int v64;
  size_t v66;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 9);
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v7, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = v5;
  v10 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  LOBYTE(v5) = *(_BYTE *)(v12 + 9);
  v14 = *(_BYTE *)(v12 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v12, v14, v5);
  v15 = *(_QWORD *)v11;
  v16 = *(_BYTE *)(v11 + 9);
  *(_QWORD *)v11 = v13;
  v17 = *(unsigned __int8 *)(v11 + 8);
  *(_BYTE *)(v11 + 8) = v14;
  *(_BYTE *)(v11 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v20 = *(_QWORD *)(v18 + 8);
  v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(v18 + 16);
  v23 = *(_QWORD *)(v18 + 24);
  v24 = *(_QWORD *)(v18 + 32);
  v25 = *(_QWORD *)(v18 + 40);
  v26 = *(_QWORD *)(v18 + 48);
  v27 = *(_QWORD *)(v18 + 56);
  v62 = *(_BYTE *)(v18 + 64);
  v63 = *(_BYTE *)(v18 + 65);
  outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v18, v20, v22, v23, v24, v25, v26, v27, v62, v63);
  v28 = *(_QWORD *)v21;
  v29 = *(_QWORD *)(v21 + 8);
  v30 = *(_QWORD *)(v21 + 16);
  v31 = *(_QWORD *)(v21 + 24);
  v32 = *(_QWORD *)(v21 + 32);
  v33 = *(_QWORD *)(v21 + 40);
  v34 = *(_QWORD *)(v21 + 48);
  v35 = *(_QWORD *)(v21 + 56);
  v36 = *(_BYTE *)(v21 + 64);
  v37 = *(_BYTE *)(v21 + 65);
  *(_QWORD *)v21 = v19;
  *(_QWORD *)(v21 + 8) = v20;
  *(_QWORD *)(v21 + 16) = v22;
  *(_QWORD *)(v21 + 24) = v23;
  *(_QWORD *)(v21 + 32) = v24;
  *(_QWORD *)(v21 + 40) = v25;
  *(_QWORD *)(v21 + 48) = v26;
  *(_QWORD *)(v21 + 56) = v27;
  *(_BYTE *)(v21 + 64) = v62;
  *(_BYTE *)(v21 + 65) = v63;
  outlined consume of Environment<ListPadding>.Content(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(_QWORD *)(a3 + 24);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned __int8 *)(v39 + 80);
  v41 = (v40 | 7) + 66;
  v42 = (_QWORD *)((v41 + v21) & ~(v40 | 7));
  v43 = (_QWORD *)((v41 + v18) & ~(v40 | 7));
  v44 = *(unsigned int *)(v39 + 84);
  v45 = ~v40;
  v46 = *(_QWORD *)(v39 + 64);
  v47 = ((v40 + 16) & ~v40) + v46;
  v48 = (_QWORD *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v44 & 0x80000000) != 0)
  {
    v66 = ((v40 + 16) & ~v40) + v46;
    v53 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v39 + 48);
    v64 = v53(((unint64_t)v48 + v40 + 8) & v45, v44, v38);
    v54 = v38;
    v50 = (_QWORD *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
    v49 = v54;
    v52 = ((uint64_t (*)(unint64_t, uint64_t))v53)(((unint64_t)v50 + v40 + 8) & v45, v44);
    v47 = v66;
    if (!v64)
    {
LABEL_5:
      if (!v52)
      {
        *v42 = *v43;
        swift_retain();
        swift_release();
        *v48 = *v50;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 24))(((unint64_t)v48 + v40 + 8) & v45, ((unint64_t)v50 + v40 + 8) & v45, v49);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v39 + 8))(((unint64_t)v48 + v40 + 8) & v45, v49);
      goto LABEL_9;
    }
  }
  else
  {
    v49 = *(_QWORD *)(a3 + 24);
    v50 = (_QWORD *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
    v51 = *v50;
    if (*v50 >= 0xFFFFFFFFuLL)
      LODWORD(v51) = -1;
    v52 = v51 + 1;
    if (*v48 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v52)
  {
    *v42 = *v43;
    *v48 = *v50;
    v55 = ((unint64_t)v48 + v40 + 8) & v45;
    v56 = ((unint64_t)v50 + v40 + 8) & v45;
    v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
    swift_retain();
    swift_retain();
    v57(v55, v56, v49);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v42, v43, v47);
LABEL_12:
  v58 = ((unint64_t)v43 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  v59 = ((unint64_t)v42 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  result = *(__n128 *)v58;
  v61 = *(_OWORD *)(v58 + 16);
  *(_WORD *)(v59 + 32) = *(_WORD *)(v58 + 32);
  *(__n128 *)v59 = result;
  *(_OWORD *)(v59 + 16) = v61;
  return result;
}

uint64_t initializeWithTake for InsettableGroupedListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v5 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v5;
  *(_WORD *)(v4 + 8) = *(_WORD *)(v5 + 8);
  *(_QWORD *)v4 = v6;
  v7 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v5 + 17) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)(v8 + 32);
  v9 = *(_OWORD *)(v8 + 48);
  v11 = *(_OWORD *)(v8 + 16);
  *(_WORD *)(v7 + 64) = *(_WORD *)(v8 + 64);
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)(v7 + 48) = v9;
  *(_OWORD *)(v7 + 16) = v11;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  v12 = *(_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 | 7) + 66;
  v16 = (_QWORD *)((v15 + v7) & ~(v14 | 7));
  v17 = (_QWORD *)((v15 + v8) & ~(v14 | 7));
  v18 = ~v14;
  v19 = (v14 + 16) & ~v14;
  v20 = *(_QWORD *)(v13 + 64);
  v21 = (uint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v13 + 84) & 0x80000000) == 0)
  {
    v22 = *v21;
    if ((unint64_t)*v21 >= 0xFFFFFFFF)
      LODWORD(v22) = -1;
    v23 = v19 + v20;
    if ((_DWORD)v22 != -1)
      goto LABEL_5;
LABEL_7:
    *v16 = *v17;
    v24 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v24 = *v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))(((unint64_t)v24 + v14 + 8) & v18, ((unint64_t)v21 + v14 + 8) & v18, v12);
    goto LABEL_8;
  }
  v23 = v19 + v20;
  if (!(*(unsigned int (**)(unint64_t))(v13 + 48))(((unint64_t)v21 + v14 + 8) & v18))
    goto LABEL_7;
LABEL_5:
  memcpy(v16, v17, v23);
LABEL_8:
  v25 = ((unint64_t)v17 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_OWORD *)v25;
  v28 = *(_OWORD *)(v25 + 16);
  *(_WORD *)(v26 + 32) = *(_WORD *)(v25 + 32);
  *(_OWORD *)v26 = v27;
  *(_OWORD *)(v26 + 16) = v28;
  return a1;
}

uint64_t assignWithTake for InsettableGroupedListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t (*v48)(unint64_t, uint64_t, uint64_t);
  int v49;
  uint64_t (*v50)(unint64_t, uint64_t, uint64_t);
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  int v56;
  size_t v57;
  uint64_t v58;

  v6 = *(_BYTE *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 9);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v10 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  v14 = *(_BYTE *)(v12 + 9);
  v15 = *(_QWORD *)v11;
  v16 = *(_BYTE *)(v11 + 9);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v17 = *(unsigned __int8 *)(v11 + 8);
  *(_BYTE *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_BYTE *)(v18 + 64);
  v20 = *(_BYTE *)(v18 + 65);
  v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(_QWORD *)(v21 + 16);
  v25 = *(_QWORD *)(v21 + 24);
  v26 = *(_QWORD *)(v21 + 32);
  v27 = *(_QWORD *)(v21 + 40);
  v28 = *(_QWORD *)(v21 + 48);
  v29 = *(_QWORD *)(v21 + 56);
  v30 = *(_BYTE *)(v21 + 64);
  v31 = *(_BYTE *)(v21 + 65);
  v32 = *(_OWORD *)(v18 + 16);
  v33 = *(_OWORD *)(v18 + 32);
  v34 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)v21 = *(_OWORD *)v18;
  *(_OWORD *)(v21 + 16) = v32;
  *(_OWORD *)(v21 + 32) = v33;
  *(_OWORD *)(v21 + 48) = v34;
  *(_BYTE *)(v21 + 64) = v19;
  *(_BYTE *)(v21 + 65) = v20;
  outlined consume of Environment<ListPadding>.Content(v22, v23, v24, v25, v26, v27, v28, v29, v30, v31);
  v35 = *(_QWORD *)(a3 + 24);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = (v37 | 7) + 66;
  v39 = (_QWORD *)((v38 + v21) & ~(v37 | 7));
  v40 = (_QWORD *)((v38 + v18) & ~(v37 | 7));
  v41 = *(unsigned int *)(v36 + 84);
  v42 = *(_QWORD *)(v36 + 64);
  v43 = ((v37 + 16) & ~v37) + v42;
  v44 = (_QWORD *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
  v58 = ~v37;
  if ((v41 & 0x80000000) != 0)
  {
    v57 = ((v37 + 16) & ~v37) + v42;
    v48 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v36 + 48);
    v49 = v48(((unint64_t)v44 + v37 + 8) & ~v37, v41, v35);
    v50 = v48;
    v56 = v49;
    v45 = (_QWORD *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
    v47 = v50(((unint64_t)v45 + v37 + 8) & ~v37, v41, v35);
    v43 = v57;
    if (!v56)
    {
LABEL_5:
      if (!v47)
      {
        *v39 = *v40;
        swift_release();
        *v44 = *v45;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 40))(((unint64_t)v44 + v37 + 8) & v58, ((unint64_t)v45 + v37 + 8) & v58, v35);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v36 + 8))(((unint64_t)v44 + v37 + 8) & v58, v35);
      goto LABEL_9;
    }
  }
  else
  {
    v45 = (_QWORD *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
    v46 = *v45;
    if (*v45 >= 0xFFFFFFFFuLL)
      LODWORD(v46) = -1;
    v47 = v46 + 1;
    if (*v44 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v47)
  {
    *v39 = *v40;
    *v44 = *v45;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 32))(((unint64_t)v44 + v37 + 8) & v58, ((unint64_t)v45 + v37 + 8) & v58, v35);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v39, v40, v43);
LABEL_12:
  v51 = ((unint64_t)v40 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v52 = ((unint64_t)v39 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = *(_OWORD *)v51;
  v54 = *(_OWORD *)(v51 + 16);
  *(_WORD *)(v52 + 32) = *(_WORD *)(v51 + 32);
  *(_OWORD *)v52 = v53;
  *(_OWORD *)(v52 + 16) = v54;
  return a1;
}

uint64_t getEnumTagSinglePayload for InsettableGroupedListBody.TableViewRoot(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  if (v6 - 1 < a2)
  {
    v9 = ((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + ((v8 + 98) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 34;
    v10 = (a2 - v6 + 0x10000) >> (8 * v9);
    if (v9 <= 3)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X16 }
  }
  v15 = (unint64_t *)((((((((a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + v8 + 66) & ~v8) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0)
  {
    v17 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
  }
  else
  {
    v16 = *v15;
    if (v16 >= 0xFFFFFFFF)
      LODWORD(v16) = -1;
    v17 = v16 + 1;
  }
  if (v17 >= 2)
    return v17 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for InsettableGroupedListBody.TableViewRoot(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64);
  v10 = ((v9 + (((v8 | 7) + 98) & ~(v8 | 7)) + 7) & 0xFFFFFFF8) + 34;
  if (v6 - 1 >= a3)
  {
    v13 = 0u;
    if (v7 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v10 <= 3)
      v11 = ((a3 - v6 + 0x10000) >> (8 * v10)) + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (v7 >= a2)
LABEL_17:
      __asm { BR              X17 }
  }
  v14 = a2 - v6;
  bzero(a1, ((v9 + (((v8 | 7) + 98) & ~(v8 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 34);
  if (v10 > 3)
    *a1 = v14;
  else
    *(_WORD *)a1 = v14;
  __asm { BR              X11 }
}

void sub_1879DE740(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x1879DE860);
}

void sub_1879DE748(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1879DE750);
  JUMPOUT(0x1879DE860);
}

void sub_1879DE7CC()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x1879DE860);
}

void sub_1879DE7F0(__int16 a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x1879DE860);
}

void sub_1879DE7F8(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x1879DE860);
}

void sub_1879DE800(int a1@<W1>, size_t a2@<X8>)
{
  void *v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (a1)
  {
    v2 = (void *)((((((v7 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + v6 + 66) & v4);
    if (a1 + 1 <= v5)
      JUMPOUT(0x1879DE7D4);
    if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v3 = a2;
      else
        v3 = 4;
      bzero(v2, a2);
      __asm { BR              X10 }
    }
  }
  JUMPOUT(0x1879DE860);
}

void sub_1879DE834()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1879DE860);
}

void sub_1879DE844()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1879DE860);
}

void sub_1879DE84C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1879DE860);
}

uint64_t initializeBufferWithCopyOfBuffer for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(unint64_t, unint64_t, uint64_t);
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t __n;
  uint64_t v53;
  char v54;
  char v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7 | 7;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
  v10 = *(_QWORD *)(v5 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v7 | 7 | v11;
  if (v12 != 7
    || ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || ((v11 + 34 + ((v9 + 7 + (((v7 | 7) + 98) & ~(v7 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~v11) + *(_QWORD *)(v10 + 64) > 0x18)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v16 = v15 + ((v12 + 16) & ~v12);
    swift_retain();
  }
  else
  {
    v61 = *(_DWORD *)(v10 + 80);
    v62 = v9 + 7;
    __n = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64);
    v63 = v11 + 34;
    v64 = *(_QWORD *)(a3 + 24);
    v65 = *(_QWORD *)(v5 - 8);
    v66 = *(_QWORD *)(a3 + 16);
    v57 = ~v8;
    v56 = *(_DWORD *)(v6 + 84);
    v60 = ~v7;
    v17 = *(_QWORD *)a2;
    v18 = *(_BYTE *)(a2 + 9);
    v19 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v19, v18);
    *(_QWORD *)a1 = v17;
    *(_BYTE *)(a1 + 8) = v19;
    *(_BYTE *)(a1 + 9) = v18;
    v67 = a1;
    v20 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    v59 = v7;
    v21 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)v21;
    LOBYTE(v17) = *(_BYTE *)(v21 + 9);
    v23 = *(_BYTE *)(v21 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v21, v23, v17);
    *(_QWORD *)v20 = v22;
    *(_BYTE *)(v20 + 8) = v23;
    *(_BYTE *)(v20 + 9) = v17;
    v58 = v6;
    v24 = (v20 + 17) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v21 + 17) & 0xFFFFFFFFFFFFFFF8;
    v26 = *(_QWORD *)v25;
    v27 = *(_QWORD *)(v25 + 8);
    v28 = *(_QWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 24);
    v31 = *(_QWORD *)(v25 + 32);
    v30 = *(_QWORD *)(v25 + 40);
    v32 = *(_QWORD *)(v25 + 56);
    v53 = *(_QWORD *)(v25 + 48);
    v54 = *(_BYTE *)(v25 + 64);
    v55 = *(_BYTE *)(v25 + 65);
    outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v25, v27, v28, v29, v31, v30, v53, v32, v54, v55);
    *(_QWORD *)v24 = v26;
    *(_QWORD *)(v24 + 8) = v27;
    *(_QWORD *)(v24 + 16) = v28;
    *(_QWORD *)(v24 + 24) = v29;
    *(_QWORD *)(v24 + 32) = v31;
    *(_QWORD *)(v24 + 40) = v30;
    *(_QWORD *)(v24 + 48) = v53;
    *(_QWORD *)(v24 + 56) = v32;
    *(_BYTE *)(v24 + 64) = v54;
    *(_BYTE *)(v24 + 65) = v55;
    v33 = (_QWORD *)((v24 + v8 + 66) & v57);
    v34 = (_QWORD *)((v25 + v8 + 66) & v57);
    v35 = (uint64_t *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v56 < 0)
    {
      v38 = v64;
      v37 = (*(uint64_t (**)(unint64_t))(v58 + 48))(((unint64_t)v35 + v59 + 8) & v60);
      v40 = v58;
      v39 = v59;
      v41 = v60;
    }
    else
    {
      v36 = *v35;
      if ((unint64_t)*v35 >= 0xFFFFFFFF)
        LODWORD(v36) = -1;
      v37 = v36 + 1;
      v38 = v64;
      v40 = v58;
      v39 = v59;
      v41 = v60;
    }
    if (v37)
    {
      memcpy(v33, v34, __n);
    }
    else
    {
      *v33 = *v34;
      v42 = (_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v42 = *v35;
      v43 = v39 + 8;
      v44 = ((unint64_t)v42 + v43) & v41;
      v45 = ((unint64_t)v35 + v43) & v41;
      v46 = *(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 16);
      swift_retain();
      swift_retain();
      v46(v44, v45, v38);
    }
    v16 = v67;
    v47 = ((unint64_t)v33 + v62) & 0xFFFFFFFFFFFFFFF8;
    v48 = ((unint64_t)v34 + v62) & 0xFFFFFFFFFFFFFFF8;
    v49 = *(_OWORD *)v48;
    v50 = *(_OWORD *)(v48 + 16);
    *(_WORD *)(v47 + 32) = *(_WORD *)(v48 + 32);
    *(_OWORD *)v47 = v49;
    *(_OWORD *)(v47 + 16) = v50;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v65 + 16))((v63 + v47) & ~v61, (v63 + v48) & ~v61, v66);
  }
  return v16;
}

uint64_t assignWithCopy for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  uint64_t (*v52)(unint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v65;
  char v66;
  int v67;
  char __na;
  uint64_t __n;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 9);
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v7, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = v5;
  v10 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  v65 = a1;
  v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  LOBYTE(v5) = *(_BYTE *)(v12 + 9);
  v14 = *(_BYTE *)(v12 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v12, v14, v5);
  v15 = *(_QWORD *)v11;
  v16 = *(_BYTE *)(v11 + 9);
  *(_QWORD *)v11 = v13;
  v17 = *(unsigned __int8 *)(v11 + 8);
  *(_BYTE *)(v11 + 8) = v14;
  *(_BYTE *)(v11 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v20 = *(_QWORD *)(v18 + 8);
  v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(v18 + 16);
  v23 = *(_QWORD *)(v18 + 24);
  v24 = *(_QWORD *)(v18 + 32);
  v25 = *(_QWORD *)(v18 + 40);
  v26 = *(_QWORD *)(v18 + 48);
  v27 = *(_QWORD *)(v18 + 56);
  v66 = *(_BYTE *)(v18 + 64);
  __na = *(_BYTE *)(v18 + 65);
  outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v18, v20, v22, v23, v24, v25, v26, v27, v66, __na);
  v28 = *(_QWORD *)v21;
  v29 = *(_QWORD *)(v21 + 8);
  v30 = *(_QWORD *)(v21 + 16);
  v31 = *(_QWORD *)(v21 + 24);
  v32 = *(_QWORD *)(v21 + 32);
  v33 = *(_QWORD *)(v21 + 40);
  v34 = *(_QWORD *)(v21 + 48);
  v35 = *(_QWORD *)(v21 + 56);
  v36 = *(_BYTE *)(v21 + 64);
  v37 = *(_BYTE *)(v21 + 65);
  *(_QWORD *)v21 = v19;
  *(_QWORD *)(v21 + 8) = v20;
  *(_QWORD *)(v21 + 16) = v22;
  *(_QWORD *)(v21 + 24) = v23;
  v38 = a3;
  *(_QWORD *)(v21 + 32) = v24;
  *(_QWORD *)(v21 + 40) = v25;
  *(_QWORD *)(v21 + 48) = v26;
  *(_QWORD *)(v21 + 56) = v27;
  *(_BYTE *)(v21 + 64) = v66;
  *(_BYTE *)(v21 + 65) = __na;
  outlined consume of Environment<ListPadding>.Content(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  v39 = *(_QWORD *)(a3 + 24);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = (v41 | 7) + 66;
  v43 = (_QWORD *)((v42 + v21) & ~(v41 | 7));
  v44 = (_QWORD *)((v42 + v18) & ~(v41 | 7));
  v45 = *(unsigned int *)(v40 + 84);
  v46 = ~v41;
  v47 = (_QWORD *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  __n = ((v41 + 16) & ~v41) + *(_QWORD *)(v40 + 64);
  if ((v45 & 0x80000000) != 0)
  {
    v52 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48);
    v67 = v52(((unint64_t)v47 + v41 + 8) & v46, v45, v39);
    v53 = v39;
    v49 = (_QWORD *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
    v48 = v53;
    v51 = ((uint64_t (*)(unint64_t, uint64_t))v52)(((unint64_t)v49 + v41 + 8) & v46, v45);
    v38 = a3;
    if (!v67)
      goto LABEL_5;
LABEL_8:
    if (v51)
      goto LABEL_9;
    *v43 = *v44;
    *v47 = *v49;
    v56 = ((unint64_t)v47 + v41 + 8) & v46;
    v57 = ((unint64_t)v49 + v41 + 8) & v46;
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
    swift_retain();
    swift_retain();
    v58(v56, v57, v48);
LABEL_12:
    v55 = v65;
    v54 = __n;
    goto LABEL_13;
  }
  v48 = *(_QWORD *)(a3 + 24);
  v49 = (_QWORD *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
  v50 = *v49;
  if (*v49 >= 0xFFFFFFFFuLL)
    LODWORD(v50) = -1;
  v51 = v50 + 1;
  if (*v47 <= 0xFFFFFFFEuLL)
    goto LABEL_8;
LABEL_5:
  if (!v51)
  {
    *v43 = *v44;
    swift_retain();
    swift_release();
    *v47 = *v49;
    swift_retain();
    swift_release();
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v40 + 24))(((unint64_t)v47 + v41 + 8) & v46, ((unint64_t)v49 + v41 + 8) & v46, v48);
    goto LABEL_12;
  }
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v40 + 8))(((unint64_t)v47 + v41 + 8) & v46, v48);
LABEL_9:
  v54 = __n;
  memcpy(v43, v44, __n);
  v55 = v65;
LABEL_13:
  v59 = ((unint64_t)v43 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  v60 = ((unint64_t)v44 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  v61 = *(_OWORD *)v60;
  v62 = *(_OWORD *)(v60 + 16);
  *(_WORD *)(v59 + 32) = *(_WORD *)(v60 + 32);
  *(_OWORD *)v59 = v61;
  *(_OWORD *)(v59 + 16) = v62;
  v63 = *(_QWORD *)(*(_QWORD *)(v38 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v63 + 24))((*(unsigned __int8 *)(v63 + 80) + 34 + v59) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80), (*(unsigned __int8 *)(v63 + 80) + 34 + v60) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80));
  return v55;
}

uint64_t initializeWithTake for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v5 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v5;
  *(_WORD *)(v4 + 8) = *(_WORD *)(v5 + 8);
  *(_QWORD *)v4 = v6;
  v7 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v5 + 17) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_OWORD *)(v8 + 32);
  v9 = *(_OWORD *)(v8 + 48);
  v11 = *(_OWORD *)(v8 + 16);
  *(_WORD *)(v7 + 64) = *(_WORD *)(v8 + 64);
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)(v7 + 48) = v9;
  *(_OWORD *)(v7 + 16) = v11;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  v12 = *(_QWORD *)(a3 + 24);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 | 7) + 66;
  v16 = (_QWORD *)((v15 + v7) & ~(v14 | 7));
  v17 = (_QWORD *)((v15 + v8) & ~(v14 | 7));
  v18 = ~v14;
  v19 = (v14 + 16) & ~v14;
  v20 = *(_QWORD *)(v13 + 64);
  v21 = (uint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v13 + 84) & 0x80000000) == 0)
  {
    v22 = *v21;
    if ((unint64_t)*v21 >= 0xFFFFFFFF)
      LODWORD(v22) = -1;
    v23 = v19 + v20;
    if ((_DWORD)v22 != -1)
      goto LABEL_5;
LABEL_7:
    *v16 = *v17;
    v24 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v24 = *v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))(((unint64_t)v24 + v14 + 8) & v18, ((unint64_t)v21 + v14 + 8) & v18, v12);
    goto LABEL_8;
  }
  v23 = v19 + v20;
  if (!(*(unsigned int (**)(unint64_t))(v13 + 48))(((unint64_t)v21 + v14 + 8) & v18))
    goto LABEL_7;
LABEL_5:
  memcpy(v16, v17, v23);
LABEL_8:
  v25 = ((unint64_t)v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v17 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_OWORD *)v26;
  v28 = *(_OWORD *)(v26 + 16);
  *(_WORD *)(v25 + 32) = *(_WORD *)(v26 + 32);
  *(_OWORD *)v25 = v27;
  *(_OWORD *)(v25 + 16) = v28;
  v29 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v29 + 32))((*(unsigned __int8 *)(v29 + 80) + 34 + v25) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80), (*(unsigned __int8 *)(v29 + 80) + 34 + v26) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
  return a1;
}

uint64_t assignWithTake for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t (*v49)(unint64_t, uint64_t, uint64_t);
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t (*v53)(unint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v62;
  _QWORD *v63;
  size_t v64;
  uint64_t v65;

  v6 = *(_BYTE *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 9);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v10 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  v14 = *(_BYTE *)(v12 + 9);
  v15 = *(_QWORD *)v11;
  v16 = *(_BYTE *)(v11 + 9);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v17 = *(unsigned __int8 *)(v11 + 8);
  *(_BYTE *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_BYTE *)(v18 + 64);
  v20 = *(_BYTE *)(v18 + 65);
  v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(_QWORD *)(v21 + 16);
  v25 = *(_QWORD *)(v21 + 24);
  v26 = *(_QWORD *)(v21 + 32);
  v27 = *(_QWORD *)(v21 + 40);
  v28 = *(_QWORD *)(v21 + 48);
  v29 = *(_QWORD *)(v21 + 56);
  v30 = *(_BYTE *)(v21 + 64);
  v31 = *(_BYTE *)(v21 + 65);
  v32 = *(_OWORD *)(v18 + 16);
  v33 = *(_OWORD *)(v18 + 32);
  v34 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)v21 = *(_OWORD *)v18;
  *(_OWORD *)(v21 + 16) = v32;
  *(_OWORD *)(v21 + 32) = v33;
  *(_OWORD *)(v21 + 48) = v34;
  *(_BYTE *)(v21 + 64) = v19;
  *(_BYTE *)(v21 + 65) = v20;
  outlined consume of Environment<ListPadding>.Content(v22, v23, v24, v25, v26, v27, v28, v29, v30, v31);
  v35 = *(_QWORD *)(a3 + 24);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(unsigned __int8 *)(v36 + 80);
  v38 = (v37 | 7) + 66;
  v39 = (_QWORD *)((v38 + v21) & ~(v37 | 7));
  v40 = (_QWORD *)((v38 + v18) & ~(v37 | 7));
  v41 = *(unsigned int *)(v36 + 84);
  v42 = *(_QWORD *)(v36 + 64);
  v43 = ((v37 + 16) & ~v37) + v42;
  v44 = (_QWORD *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
  v65 = ~v37;
  if ((v41 & 0x80000000) != 0)
  {
    v64 = ((v37 + 16) & ~v37) + v42;
    v49 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v36 + 48);
    v63 = v39;
    v50 = v40;
    v51 = *(_QWORD *)(a3 + 24);
    v52 = v49(((unint64_t)v44 + v37 + 8) & ~v37, v41, v35);
    v53 = v49;
    v62 = v52;
    v46 = (_QWORD *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
    v54 = v41;
    v45 = v51;
    v55 = v51;
    v40 = v50;
    v39 = v63;
    v43 = v64;
    v48 = v53(((unint64_t)v46 + v37 + 8) & ~v37, v54, v55);
    if (!v62)
    {
LABEL_5:
      if (!v48)
      {
        *v39 = *v40;
        swift_release();
        *v44 = *v46;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 40))(((unint64_t)v44 + v37 + 8) & v65, ((unint64_t)v46 + v37 + 8) & v65, v45);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v36 + 8))(((unint64_t)v44 + v37 + 8) & v65, v45);
      goto LABEL_9;
    }
  }
  else
  {
    v45 = *(_QWORD *)(a3 + 24);
    v46 = (_QWORD *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
    v47 = *v46;
    if (*v46 >= 0xFFFFFFFFuLL)
      LODWORD(v47) = -1;
    v48 = v47 + 1;
    if (*v44 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v48)
  {
    *v39 = *v40;
    *v44 = *v46;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 32))(((unint64_t)v44 + v37 + 8) & v65, ((unint64_t)v46 + v37 + 8) & v65, v45);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v39, v40, v43);
LABEL_12:
  v56 = ((unint64_t)v39 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = ((unint64_t)v40 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v58 = *(_OWORD *)v57;
  v59 = *(_OWORD *)(v57 + 16);
  *(_WORD *)(v56 + 32) = *(_WORD *)(v57 + 32);
  *(_OWORD *)v56 = v58;
  *(_OWORD *)(v56 + 16) = v59;
  v60 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v60 + 40))((*(unsigned __int8 *)(v60 + 80) + 34 + v56) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80), (*(unsigned __int8 *)(v60 + 80) + 34 + v57) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  char v19;
  int v20;
  unsigned int v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int v28;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = v7 - 1;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v8 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v8;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = v12 | 7;
  v14 = ((v12 + 16) & ~v12) + *(_QWORD *)(v5 + 64) + 7;
  v15 = *(unsigned __int8 *)(v9 + 80);
  v16 = v15 + 34;
  v17 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_27;
  v18 = ((v16 + ((v14 + ((v13 + 98) & ~v13)) & 0xFFFFFFFFFFFFFFF8)) & ~v15) + *(_QWORD *)(v9 + 64);
  v19 = 8 * v18;
  if (v18 <= 3)
  {
    v22 = ((v17 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      v20 = *(_DWORD *)(a1 + v18);
      if (!v20)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v22 > 0xFF)
    {
      v20 = *(unsigned __int16 *)(a1 + v18);
      if (!*(_WORD *)(a1 + v18))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v22 < 2)
    {
LABEL_27:
      v25 = (((((a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + v13 + 66) & ~v13;
      if (v8 < v10)
        return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v9 + 48))((v16 + ((v14 + v25) & 0xFFFFFFFFFFFFFFF8)) & ~v15, *(unsigned int *)(v9 + 84), v4);
      v26 = (unint64_t *)((v25 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        v28 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v26 + v12 + 8) & ~v12);
      }
      else
      {
        v27 = *v26;
        if (v27 >= 0xFFFFFFFF)
          LODWORD(v27) = -1;
        v28 = v27 + 1;
      }
      if (v28 >= 2)
        return v28 - 1;
      else
        return 0;
    }
  }
  v20 = *(unsigned __int8 *)(a1 + v18);
  if (!*(_BYTE *)(a1 + v18))
    goto LABEL_27;
LABEL_18:
  v23 = (v20 - 1) << v19;
  if (v18 > 3)
    v23 = 0;
  if ((_DWORD)v18)
  {
    if (v18 <= 3)
      v24 = ((v16 + ((v14 + ((v13 + 98) & ~(_DWORD)v13)) & 0xFFFFFFF8)) & ~(_DWORD)v15) + *(_DWORD *)(v9 + 64);
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  return v11 + v23 + 1;
}

void storeEnumTagSinglePayload for InsettableGroupedListBody.CollectionViewBody(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if ((v6 - 1) <= *(_DWORD *)(v7 + 84))
    v8 = *(_DWORD *)(v7 + 84);
  else
    v8 = v6 - 1;
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = ((*(unsigned __int8 *)(v7 + 80)
        + 34
        + ((((v9 + 16) & ~v9) + *(_QWORD *)(v5 + 64) + 7 + (((v9 | 7) + 98) & ~(v9 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(_QWORD *)(v7 + 64);
  if (a3 > v8)
  {
    if (v10 <= 3)
    {
      v13 = ((a3 - v8 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v8 < a2)
  {
    v12 = ~v8 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v14 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v10 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X22 }
}

ValueMetadata *type metadata accessor for ContentConfigurationBasedRootEnvironment()
{
  return &type metadata for ContentConfigurationBasedRootEnvironment;
}

uint64_t assignWithCopy for ContentConfigurationBasedRootEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  v4 = (uint64_t *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = (uint64_t *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 72);
  if (v5 == 1)
  {
    if (v6 == 1)
    {
      v8 = *v7;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *v4 = v8;
    }
    else
    {
      *(_QWORD *)(a1 + 72) = v6;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      swift_retain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of ListItemTint(a1 + 72);
    v9 = *(_BYTE *)(a2 + 80);
    *v4 = *v7;
    *(_BYTE *)(a1 + 80) = v9;
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v6;
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  }
  return a1;
}

uint64_t assignWithTake for ContentConfigurationBasedRootEnvironment(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  if (v6 != 1)
  {
    if (v5 != 1)
    {
      *(_QWORD *)(a1 + 72) = v5;
      swift_release();
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      return a1;
    }
    outlined destroy of ListItemTint(a1 + 72);
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentConfigurationBasedRootEnvironment(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentConfigurationBasedRootEnvironment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SectionInsetMode(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SectionInsetMode(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 34) = v3;
  return result;
}

uint64_t getEnumTag for SectionInsetMode(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for SectionInsetMode(uint64_t result, int a2)
{
  if (a2)
  {
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    *(_BYTE *)(result + 33) = 0;
  }
  return result;
}

void sub_1879DFCC4()
{
  type metadata accessor for InsettableGroupedListBody.CollectionViewBody();
}

void sub_1879DFCF8()
{
  type metadata accessor for InsettableGroupedListBody.TableViewRoot();
}

void sub_1879DFD10()
{
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for ViewInputFlagModifier<PreferBaselineAlignedHeaders>(255);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type CollectionViewGroupedListsEnabled and conformance CollectionViewGroupedListsEnabled();
  type metadata accessor for StaticIf();
}

uint64_t sub_1879DFD6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>.CollectionViewBody, v2);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>.TableViewRoot, v3);
  v12 = v5;
  v10[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v1, &v11);
  v10[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v9[0] = v7;
  v9[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v10);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v9);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SectionInsetMode()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  Swift::UInt v8;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v5 = *((unsigned __int8 *)v0 + 32);
  v6 = *((unsigned __int8 *)v0 + 33);
  Hasher.init(_seed:)();
  if (v6 == 1)
  {
    if (v4 | v2 | v1 | v3)
      v7 = 0;
    else
      v7 = v5 == 0;
    if (v7)
      v8 = 3;
    else
      v8 = 13;
    Hasher._combine(_:)(v8);
  }
  else
  {
    Hasher._combine(_:)(0x1FuLL);
    if ((v5 & 1) == 0)
      EdgeInsets.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SectionInsetMode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  BOOL v14;
  BOOL v15;

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = *((unsigned __int8 *)a1 + 32);
  v7 = *((unsigned __int8 *)a1 + 33);
  v8 = *a2;
  v9 = a2[1];
  v11 = a2[2];
  v10 = a2[3];
  v12 = *((unsigned __int8 *)a2 + 32);
  result = *((unsigned __int8 *)a2 + 33);
  if (v7 != 1)
  {
    if ((result & 1) == 0)
    {
      if ((v6 & 1) != 0)
      {
        if ((v12 & 1) == 0)
          return 0;
      }
      else if ((v12 & 1) != 0 || (static EdgeInsets.== infix(_:_:)() & 1) == 0)
      {
        return 0;
      }
      return 1;
    }
    return 0;
  }
  if (v5 | v3 | v2 | v4)
    v14 = 0;
  else
    v14 = v6 == 0;
  if (!v14)
  {
    if ((result & 1) != 0)
    {
      if (v11 | v9 | v8 | v10)
        v15 = 0;
      else
        v15 = v12 == 0;
      return !v15;
    }
    return 0;
  }
  if (*((_BYTE *)a2 + 33))
    return !(v11 | v9 | v8 | v10) && v12 == 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionInsetMode and conformance SectionInsetMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionInsetMode and conformance SectionInsetMode;
  if (!lazy protocol witness table cache variable for type SectionInsetMode and conformance SectionInsetMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionInsetMode, &type metadata for SectionInsetMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionInsetMode and conformance SectionInsetMode);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContentConfigurationBasedRootEnvironment(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContentConfigurationBasedRootEnvironment(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ContentConfigurationBasedRootEnvironment()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ContentConfigurationBasedRootEnvironment()
{
  lazy protocol witness table accessor for type ContentConfigurationBasedRootEnvironment and conformance ContentConfigurationBasedRootEnvironment();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ContentConfigurationBasedRootEnvironment()
{
  return &protocol witness table for ContentConfigurationBasedRootEnvironment;
}

_UNKNOWN **base witness table accessor for ViewModifier in ContentConfigurationBasedRootEnvironment()
{
  return &protocol witness table for ContentConfigurationBasedRootEnvironment;
}

uint64_t instantiation function for generic protocol witness table for InsettableGroupedListBody<A, B>.TableViewRoot(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>.TableViewRoot);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in InsettableGroupedListBody<A, B>.TableViewRoot()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

unint64_t lazy protocol witness table accessor for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewGroupedListsFeature, &unk_1E1B08C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewGroupedListsFeature, &unk_1E1B08C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewGroupedListsFeature, &unk_1E1B08C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewGroupedListsFeature, &unk_1E1B08C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewGroupedListsFeature, &unk_1E1B08C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewGroupedListsFeature, &unk_1E1B08C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewGroupedListsFeature, &unk_1E1B08C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisableCollectionViewGroupedListsFeature, &unk_1E1B08C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
  }
  return result;
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance DisableCollectionViewGroupedListsFeature()
{
  return 0xD000000000000039;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance DisableCollectionViewGroupedListsFeature()
{
  swift_beginAccess();
  return static DisableCollectionViewGroupedListsFeature.cachedValue;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance DisableCollectionViewGroupedListsFeature(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static DisableCollectionViewGroupedListsFeature.cachedValue = a1;
  return result;
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance DisableCollectionViewGroupedListsFeature())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance DisableCollectionViewGroupedListsFeature()
{
  lazy protocol witness table accessor for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature();
  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance DisableCollectionViewGroupedListsFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisableCollectionViewGroupedListsFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance DisableCollectionViewGroupedListsFeature@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;

  v4 = lazy protocol witness table accessor for type DisableCollectionViewGroupedListsFeature and conformance DisableCollectionViewGroupedListsFeature();
  result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ListConcatenatesFooters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ListConcatenatesFooters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type ListConcatenatesFooters and conformance ListConcatenatesFooters);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance DisableListSections(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type DisableListSections and conformance DisableListSections);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisableListSections(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type DisableListSections and conformance DisableListSections);
}

uint64_t specialized static ContentConfigurationBasedRootEnvironment.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;

  Value = AGGraphGetValue();
  v4 = *(_QWORD *)(Value + 48);
  v8 = *(unsigned __int8 *)(Value + 56);
  v5 = *(_QWORD *)(Value + 72);
  swift_retain();
  swift_retain();
  outlined copy of Transaction?(v5);
  swift_retain();
  EnvironmentValues.defaultFont.setter();
  if (v4)
  {
    swift_retain();
    swift_retain();
    ShapeStyle.copyStyle(name:in:foregroundStyle:)();
    swift_release();
    swift_release();
  }
  EnvironmentValues.defaultForegroundStyle.setter();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelIconToTitleSpacingKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>);
  swift_retain();
  PropertyList.subscript.setter();
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowInsetsKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowInsetsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowInsetsKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v6)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>);
  outlined copy of Transaction?(v5);
  outlined copy of Transaction?(v5);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v6)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of Transaction?(v5);
  if (v8)
    EnvironmentValues.textCase.setter();
  swift_release();
  swift_release();
  return outlined consume of Transaction?(v5);
}

unint64_t lazy protocol witness table accessor for type ContentConfigurationBasedRootEnvironment and conformance ContentConfigurationBasedRootEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentConfigurationBasedRootEnvironment and conformance ContentConfigurationBasedRootEnvironment;
  if (!lazy protocol witness table cache variable for type ContentConfigurationBasedRootEnvironment and conformance ContentConfigurationBasedRootEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentConfigurationBasedRootEnvironment, &type metadata for ContentConfigurationBasedRootEnvironment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentConfigurationBasedRootEnvironment and conformance ContentConfigurationBasedRootEnvironment);
  }
  return result;
}

void *type metadata accessor for DisableCollectionViewGroupedListsFeature()
{
  return &unk_1E1B08C70;
}

ValueMetadata *type metadata accessor for ListConcatenatesFooters()
{
  return &type metadata for ListConcatenatesFooters;
}

_UNKNOWN **sub_1879E0774()
{
  return &protocol witness table for CollectionViewListRoot<A, B>;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in DisableCollectionViewGroupedListsFeature()
{
  return &protocol witness table for DisableCollectionViewGroupedListsFeature;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ListConcatenatesFooters()
{
  return &protocol witness table for ListConcatenatesFooters;
}

ValueMetadata *type metadata accessor for DisableListSections()
{
  return &type metadata for DisableListSections;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in DisableListSections()
{
  return &protocol witness table for DisableListSections;
}

ValueMetadata *type metadata accessor for FallbackLabelStyle()
{
  return &type metadata for FallbackLabelStyle;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in FallbackLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance FallbackLabelStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_WORD *)(a1 + 8) = 0;
  return result;
}

uint64_t destroy for ResolvedFallbackLabel(uint64_t a1)
{
  return outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_BYTE *)(a1 + 9));
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedFallbackLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 9);
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v5, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 9) = v4;
  return a1;
}

uint64_t assignWithCopy for ResolvedFallbackLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 9);
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v5, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = v3;
  v8 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 9) = v4;
  outlined consume of Environment<CGFloat?>.Content(v6, v8, v7);
  return a1;
}

uint64_t assignWithTake for ResolvedFallbackLabel(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 9);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4;
  outlined consume of Environment<CGFloat?>.Content(v5, v7, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedFallbackLabel(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedFallbackLabel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for ResolvedFallbackLabel()
{
  return &unk_1E1AD8AC0;
}

uint64_t sub_1879E0DB0()
{
  return lazy protocol witness table accessor for type StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedFallbackLabel and conformance ResolvedFallbackLabel, (uint64_t)&protocol conformance descriptor for <> StaticIf<A, B, C>);
}

uint64_t type metadata accessor for StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>;
  if (!lazy cache variable for type metadata for StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle, (uint64_t)&type metadata for TitleAndIconLabelStyle);
    lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedFallbackLabel and conformance ResolvedFallbackLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedFallbackLabel and conformance ResolvedFallbackLabel;
  if (!lazy protocol witness table cache variable for type ResolvedFallbackLabel and conformance ResolvedFallbackLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedFallbackLabel, &unk_1E1AD8AC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedFallbackLabel and conformance ResolvedFallbackLabel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle, (uint64_t)&type metadata for TitleAndIconLabelStyle);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>();
    v3[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle, (uint64_t)&type metadata for TitleAndIconLabelStyle);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedFallbackLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedFallbackLabel()
{
  uint64_t v0;
  char v1;
  BOOL v2;
  unsigned __int8 v3;

  type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
  type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(0, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle);
  lazy protocol witness table accessor for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>();
  lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle);
  v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(0, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle, (uint64_t)&type metadata for TitleAndIconLabelStyle);
    lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle, (uint64_t)&type metadata for TitleAndIconLabelStyle);
    v2 = v0 != static ModifiedContent<>._viewListCount(inputs:)();
    if (((v3 | v2) & 1) != 0)
      return 0;
  }
  return v0;
}

uint64_t protocol witness for View.body.getter in conformance ResolvedFallbackLabel@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)v1;
  v4 = *(unsigned __int8 *)(v1 + 8);
  v5 = *(unsigned __int8 *)(v1 + 9);
  outlined copy of Environment<CGFloat?>.Content(v3, v4, v5);
  specialized Environment.wrappedValue.getter(v3, v4 | (v5 << 8), (uint64_t)&v7);
  result = outlined consume of Environment<CGFloat?>.Content(v3, v4, v5);
  *a1 = v7 < 3 || (v8 & 1) == 0;
  return result;
}

uint64_t sub_1879E1174()
{
  return lazy protocol witness table accessor for type StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>> and conformance <> _ConditionalContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE4BD0]);
}

uint64_t lazy protocol witness table accessor for type StaticIf<ButtonContainerIsBorderedInput, ResolvedFallbackLabel, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>> and conformance <> StaticIf<A, B, C>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](a4, v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle);
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle, (uint64_t)&type metadata for TitleAndIconLabelStyle);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>>);
  }
}

void type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, a3, a4, a5);
    v9 = type metadata accessor for ModifiedContent();
    if (!v10)
      atomic_store(v9, a2);
  }
}

