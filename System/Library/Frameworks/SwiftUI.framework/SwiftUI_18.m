uint64_t type metadata completion function for DropPayloadCustomPreviewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for DropPayloadProvider.delegate.getter in conformance DefaultPreviewDropPayloadResponder@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + 312;
  swift_beginAccess();
  return outlined init with copy of DropDelegate?(v3, a1);
}

uint64_t DropPayloadCustomPreviewResponder.init(inputs:space:displayList:)(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  v5 = a1[2];
  v6 = *((_DWORD *)a1 + 20);
  v7 = *a2;
  v8 = (char *)v2 + *(_QWORD *)(class metadata base offset for DropPayloadCustomPreviewResponder + *v2 + 16);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_QWORD *)v8 + 4) = 0;
  v11 = v7;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v9 = *(_OWORD *)(a1 + 5);
  v15 = *(_OWORD *)(a1 + 3);
  v16 = v9;
  v17 = *(_OWORD *)(a1 + 7);
  v18 = a1[9];
  v19 = v6;
  return CustomPreviewDropResponder.init(inputs:space:displayList:)((uint64_t)&v12, &v11);
}

uint64_t DropPayloadCustomPreviewResponder.__ivar_destroyer()
{
  _QWORD *v0;

  return outlined destroy of DropDelegate?((uint64_t)v0 + *(_QWORD *)(class metadata base offset for DropPayloadCustomPreviewResponder
                                                                   + *v0
                                                                   + 16));
}

uint64_t DropPayloadCustomPreviewResponder.__deallocating_deinit()
{
  _QWORD *v0;

  v0 = CustomPreviewDropResponder.deinit();
  outlined destroy of DropDelegate?((uint64_t)v0 + *(_QWORD *)(class metadata base offset for DropPayloadCustomPreviewResponder
                                                            + *v0
                                                            + 16));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DropPayloadCustomPreviewResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropPayloadCustomPreviewResponder);
}

uint64_t destroy for DropPreviewModifier(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_release();
}

uint64_t initializeWithCopy for DropPreviewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DropPreviewModifier(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  v7 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 48) = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DropPreviewModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for DropPreviewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropPreviewModifier);
}

ValueMetadata *type metadata accessor for DropModifier()
{
  return &type metadata for DropModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in DropModifier()
{
  return &protocol witness table for DropModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in DropPreviewModifier<A>()
{
  return &protocol witness table for DropPreviewModifier<A>;
}

uint64_t protocol witness for DropPayloadProvider.delegate.getter in conformance DropPayloadCustomPreviewResponder<A>@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + *(_QWORD *)(class metadata base offset for DropPayloadCustomPreviewResponder + *(_QWORD *)*v1 + 16);
  swift_beginAccess();
  return outlined init with copy of DropDelegate?(v3, a1);
}

uint64_t DropPreviewResponderFilter.init(modifier:inputs:identity:children:responder:)@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  int v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v11;
  int v12;
  int v13;
  int v14;

  v14 = _ViewInputs.animatedPosition()();
  v13 = _ViewInputs.transform.getter();
  v12 = _ViewInputs.animatedSize()();
  swift_getKeyPath();
  v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  v9 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  v8 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  v7 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v5 = _ViewInputs.containerPosition.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_DWORD *)a5 = a1;
  *(_DWORD *)(a5 + 4) = a3;
  *(_DWORD *)(a5 + 8) = v14;
  *(_DWORD *)(a5 + 12) = v13;
  *(_DWORD *)(a5 + 16) = v12;
  *(_DWORD *)(a5 + 20) = v11;
  *(_DWORD *)(a5 + 24) = v9;
  *(_DWORD *)(a5 + 28) = v8;
  *(_DWORD *)(a5 + 32) = v7;
  *(_DWORD *)(a5 + 36) = v5;
  *(_DWORD *)(a5 + 40) = a2;
  *(_QWORD *)(a5 + 48) = a4;
  return result;
}

unint64_t lazy protocol witness table accessor for type DropResponderFilter and conformance DropResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DropResponderFilter and conformance DropResponderFilter;
  if (!lazy protocol witness table cache variable for type DropResponderFilter and conformance DropResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DropResponderFilter, &unk_1E1ACD820);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DropResponderFilter and conformance DropResponderFilter);
  }
  return result;
}

uint64_t outlined release of DropResponderFilter(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t outlined init with copy of DropModifier(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *((_QWORD *)a1 + 3);
  if (v3)
  {
    v4 = *((_QWORD *)a1 + 4);
    *(_QWORD *)(a2 + 24) = v3;
    *(_QWORD *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  return a2;
}

uint64_t outlined assign with take of DropDelegate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for DropDelegate?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_18775141C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.dragItemGroupID.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_18775145C()
{
  return EnvironmentValues.dragItemGroupID.setter();
}

uint64_t outlined init with take of AccessibilityActivationPointStorage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, MEMORY[0x1E0CE67B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *outlined retain of AccessibilityActivationPointStorage?(uint64_t *a1)
{
  outlined copy of AccessibilityActivationPointStorage?(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t outlined copy of AccessibilityActivationPointStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_18775154C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type DragLiftIdentity and conformance DragLiftIdentity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DragLiftIdentity and conformance DragLiftIdentity;
  if (!lazy protocol witness table cache variable for type DragLiftIdentity and conformance DragLiftIdentity)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DragLiftIdentity, &type metadata for DragLiftIdentity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragLiftIdentity and conformance DragLiftIdentity);
  }
  return result;
}

uint64_t type metadata accessor for DropPreviewResponderFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DropPreviewResponderFilter);
}

uint64_t outlined init with copy of DropDelegate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for DropDelegate?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for DropResponderFilter()
{
  return swift_release();
}

uint64_t initializeWithCopy for DropPreviewResponderFilter(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DropPreviewResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DropPreviewResponderFilter(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DropPreviewResponderFilter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DropPreviewResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for DropResponderFilter()
{
  return &unk_1E1ACD820;
}

ValueMetadata *type metadata accessor for CanDropKey()
{
  return &type metadata for CanDropKey;
}

void base witness table accessor for _AttributeBody in DropPreviewResponderFilter<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized AccessibilityRelationshipScope.nodes<A>(for:with:in:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[40];
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  outlined init with copy of AnyHashable(a2, (uint64_t)v17);
  outlined init with copy of AnyHashable((uint64_t)v17, (uint64_t)v18);
  AnyHashable.init<A>(_:)();
  outlined destroy of AnyHashable((uint64_t)v17);
  v18[0] = v14;
  v18[1] = v15;
  v19 = v16;
  v20 = a3;
  swift_beginAccess();
  v6 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v6 + 16)
    && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18), (v8 & 1) != 0)
    && (v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7), *(_QWORD *)(v9 + 16))
    && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v11 & 1) != 0))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
    swift_endAccess();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_endAccess();
    v12 = MEMORY[0x1E0DEE9D8];
  }
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v18);
  return v12;
}

uint64_t AccessibilityRotorEntry.resolveForList(in:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  int EnumCaseMultiPayload;
  uint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char v44;
  _QWORD v45[6];
  char v46;
  _OWORD v47[3];
  char v48;

  v4 = a2;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v41 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v42 = (char *)&v38 - v12;
  v40 = *(_QWORD *)(v13 + 24);
  v15 = type metadata accessor for AccessibilityRotorEntryElementSpecifier(0, v7, v40, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v38 - v18;
  if (*(_QWORD *)(v3 + 24))
  {
    v20 = *(_DWORD *)(v3 + 16);
    v38 = v8;
    v39 = v4;
    v21 = a1;
    v22 = *(_QWORD *)v3;
    v23 = *(_QWORD *)(v3 + 8);
    v24 = v20 & 1;
    v47[0] = *v21;
    v45[0] = 0;
    v45[1] = 0;
    outlined copy of Text.Storage(v22, v23, v20 & 1);
    swift_bridgeObjectRetain();
    v44 = v24;
    v43 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
    v25 = v23;
    v26 = v24;
    v8 = v38;
    v4 = v39;
    outlined consume of Text.Storage(v22, v25, v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    v43 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v3 + *(int *)(v4 + 40), v15);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      memset(v47, 0, sizeof(v47));
      v48 = 2;
      goto LABEL_10;
    }
    v28 = *(_QWORD *)&v19[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    v29 = v42;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v42, v19, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v41, v29, v7);
    AnyHashable.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v29, v7);
    v45[5] = v28;
    v46 = 1;
  }
  else
  {
    v30 = v42;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v42, v19, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v41, v30, v7);
    AnyHashable.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v30, v7);
    v46 = 0;
  }
  outlined init with take of AccessibilityRotorEntryElementSpecifier<AnyHashable>((uint64_t)v45, (uint64_t)v47);
LABEL_10:
  v31 = *(void **)(v3 + 32);
  v32 = *(_QWORD *)(v3 + 40);
  v33 = (uint64_t *)(v3 + *(int *)(v4 + 44));
  v35 = *v33;
  v34 = v33[1];
  v36 = *(_BYTE *)(v3 + 48);
  outlined init with take of AccessibilityRotorEntryElementSpecifier<AnyHashable>((uint64_t)v47, a3);
  *(_QWORD *)(a3 + 56) = v43;
  *(_QWORD *)(a3 + 64) = v31;
  *(_QWORD *)(a3 + 72) = v32;
  *(_BYTE *)(a3 + 80) = v36;
  *(_QWORD *)(a3 + 88) = v35;
  *(_QWORD *)(a3 + 96) = v34;
  *(_QWORD *)(a3 + 104) = 0;
  *(_BYTE *)(a3 + 112) = 1;
  outlined copy of AccessibilityRotorEntryRange?(v31, v32, v36);
  return swift_retain();
}

uint64_t AccessibilityRotorEntry.init(_:id:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE v26[4];
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v27 = a8;
  v28 = a7;
  v29 = a9;
  v31 = a2;
  v32 = a4;
  v30 = a1;
  v16 = type metadata accessor for AccessibilityRotorEntryElementSpecifier(0, a12, a13, a4);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = &v26[-v19];
  v21 = *(_QWORD *)(a12 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v21 + 16))(&v26[-v19], a5, a12, v18);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a5, a12);
  if ((v27 & 1) != 0)
    v22 = 0;
  else
    v22 = a6;
  if ((v27 & 1) != 0)
    v23 = 0;
  else
    v23 = v28;
  if ((v27 & 1) != 0)
    v24 = -1;
  else
    v24 = 1;
  return AccessibilityRotorEntry.init(_:elementSpecifier:textRange:prepare:)(v30, v31, a3 & 1, v32, (uint64_t)v20, v22, v23, v24, v29, a10, a11, a12, a13);
}

uint64_t type metadata accessor for AccessibilityRotorEntryElementSpecifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityRotorEntryElementSpecifier);
}

uint64_t AccessibilityRotorEntry.init(_:elementSpecifier:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  v17 = type metadata accessor for AccessibilityRotorEntry(0, a12, a13, a4);
  v18 = a9 + *(int *)(v17 + 40);
  v20 = type metadata accessor for AccessibilityRotorEntryElementSpecifier(0, a12, a13, v19);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, a5, v20);
  *(_QWORD *)(a9 + 32) = a6;
  *(_QWORD *)(a9 + 40) = a7;
  *(_BYTE *)(a9 + 48) = a8;
  v22 = (_QWORD *)(a9 + *(int *)(v17 + 44));
  *v22 = a10;
  v22[1] = a11;
  return result;
}

uint64_t AccessibilityRotorEntry.init(_:id:in:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v30 = a8;
  v31 = a9;
  v33 = a2;
  v34 = a4;
  v32 = a1;
  v28 = a7;
  v29 = a11;
  v27 = a12;
  v17 = type metadata accessor for AccessibilityRotorEntryElementSpecifier(0, a13, a14, a4);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v27 - v19;
  v21 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v22 = *(_QWORD *)(a13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v20, a5, a13);
  *(_QWORD *)&v20[v21] = a6;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a5, a13);
  if ((a10 & 1) != 0)
    v23 = 0;
  else
    v23 = v28;
  if ((a10 & 1) != 0)
    v24 = 0;
  else
    v24 = v30;
  if ((a10 & 1) != 0)
    v25 = -1;
  else
    v25 = 1;
  return AccessibilityRotorEntry.init(_:elementSpecifier:textRange:prepare:)(v32, v33, a3 & 1, v34, (uint64_t)v20, v23, v24, v25, v31, v29, v27, a13, a14);
}

uint64_t AccessibilityRotorEntry.init<>(_:textRange:prepare:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_BYTE *)(a9 + 48) = 1;
  *(_QWORD *)(a9 + 56) = 0;
  *(_BYTE *)(a9 + 64) = 2;
  *(_QWORD *)(a9 + 72) = a7;
  *(_QWORD *)(a9 + 80) = a8;
  return result;
}

uint64_t AccessibilityRotorEntry.init(_:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  v17 = type metadata accessor for AccessibilityRotorEntry(0, a11, a12, a4);
  type metadata accessor for AccessibilityRotorEntryElementSpecifier(0, a11, a12, v18);
  result = swift_storeEnumTagMultiPayload();
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_BYTE *)(a9 + 48) = a7;
  v20 = (_QWORD *)(a9 + *(int *)(v17 + 44));
  *v20 = a8;
  v20[1] = a10;
  return result;
}

uint64_t AccessibilityRotorEntry.init(_:id:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, char a6@<W7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a4;
  v27 = a5;
  v24 = a7;
  v23 = a8;
  v25 = a6 & 1;
  v12 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Text.init(_:tableName:bundle:comment:)();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, a10);
  AccessibilityRotorEntry.init(_:id:textRange:prepare:)(v15, v17, v19 & 1, v21, (uint64_t)v14, v26, v27, v25, v24, v23, a9, a10, a11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a3, a10);
}

uint64_t AccessibilityRotorEntry.init<A>(_:id:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v34 = a7;
  v35 = a6;
  v36 = a3;
  v37 = a4;
  v32 = a9;
  v30 = a1;
  v31 = a11;
  v33 = a5 & 1;
  v13 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a10 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  (*(void (**)(char *, double))(v16 + 16))((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
  v21 = Text.init<A>(_:)();
  v23 = v22;
  v25 = v24;
  v27 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a8);
  AccessibilityRotorEntry.init(_:id:textRange:prepare:)(v21, v23, v25 & 1, v27, (uint64_t)v15, v36, v37, v33, v32, v35, v34, a8, v31);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v30, a10);
}

uint64_t AccessibilityRotorEntry.init(_:id:in:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a5;
  v30 = a6;
  v27 = a7;
  v28 = a4;
  v25 = a10;
  v26 = a9;
  v13 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = Text.init(_:tableName:bundle:comment:)();
  v18 = v17;
  v20 = v19;
  v22 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, a11);
  AccessibilityRotorEntry.init(_:id:in:textRange:prepare:)(v16, v18, v20 & 1, v22, (uint64_t)v15, v28, v29, v30, v27, a8 & 1, v26, v25, a11, a12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a3, a11);
}

uint64_t AccessibilityRotorEntry.init<A>(_:_:in:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v33 = a8;
  v34 = a7;
  v36 = a4;
  v37 = a5;
  v35 = a3;
  v29 = a1;
  v32 = a9;
  v31 = a12;
  v30 = a6 & 1;
  v13 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a11 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  (*(void (**)(char *, double))(v16 + 16))((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
  v21 = Text.init<A>(_:)();
  v23 = v22;
  v25 = v24;
  v27 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a10);
  AccessibilityRotorEntry.init(_:id:in:textRange:prepare:)(v21, v23, v25 & 1, v27, (uint64_t)v15, v35, v36, v37, v32, v30, v34, v33, a10, v31);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v29, a11);
}

uint64_t AccessibilityRotorEntry.init(_:textRange:prepare:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v12 = Text.init(_:tableName:bundle:comment:)();
  return AccessibilityRotorEntry.init(_:textRange:prepare:)(v12, v14, v13 & 1, v15, a1, a2, 1, a3, a5, a4, a6, a7);
}

uint64_t AccessibilityRotorEntry.init<A>(_:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a4;
  v26 = a5;
  v12 = *(_QWORD *)(a6 - 8);
  v13 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v13);
  v16 = Text.init<A>(_:)();
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a6);
  *(_QWORD *)a7 = v16;
  *(_QWORD *)(a7 + 8) = v18;
  *(_QWORD *)(a7 + 16) = v22;
  *(_QWORD *)(a7 + 24) = v20;
  *(_QWORD *)(a7 + 32) = a2;
  *(_QWORD *)(a7 + 40) = a3;
  *(_BYTE *)(a7 + 48) = 1;
  *(_QWORD *)(a7 + 56) = 0;
  *(_BYTE *)(a7 + 64) = 2;
  v24 = v26;
  *(_QWORD *)(a7 + 72) = v25;
  *(_QWORD *)(a7 + 80) = v24;
  return result;
}

uint64_t static AccessibilityRotorEntryElementSpecifier.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t, double);
  int EnumCaseMultiPayload;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v46 = *(_QWORD *)(a3 - 8);
  v47 = a2;
  MEMORY[0x1E0C80A78](a1, a2);
  v43[0] = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v43 - v8;
  v43[1] = v10;
  v12 = type metadata accessor for AccessibilityRotorEntryElementSpecifier(0, v11, v10, v10);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v43 - v19;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v45 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v23 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v22);
  v25 = (char *)v43 - v24;
  v27 = (char *)v43 + *(int *)(v26 + 48) - v24;
  v44 = v13;
  v28 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v28((char *)v43 - v24, a1, v12, v23);
  ((void (*)(char *, uint64_t, uint64_t))v28)(v27, v47, v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    ((void (*)(char *, char *, uint64_t))v28)(v20, v25, v12);
    if (swift_getEnumCaseMultiPayload())
    {
      v16 = v20;
      goto LABEL_8;
    }
    v39 = v46;
    v40 = v9;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v9, v27, a3);
    v38 = dispatch thunk of static Equatable.== infix(_:_:)();
    v41 = *(void (**)(char *, uint64_t))(v39 + 8);
    v41(v40, a3);
    v41(v20, a3);
LABEL_13:
    v37 = v44;
    goto LABEL_15;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (swift_getEnumCaseMultiPayload() != 2)
      goto LABEL_11;
    v38 = 1;
    goto LABEL_13;
  }
  ((void (*)(char *, char *, uint64_t))v28)(v16, v25, v12);
  v30 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v31 = *(_QWORD *)&v16[v30];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
LABEL_8:
    (*(void (**)(char *, uint64_t))(v46 + 8))(v16, a3);
LABEL_11:
    v38 = 0;
    v37 = v45;
    v12 = TupleTypeMetadata2;
    goto LABEL_15;
  }
  v32 = *(_QWORD *)&v27[v30];
  v33 = v46;
  v34 = (char *)v43[0];
  (*(void (**)(_QWORD, char *, uint64_t))(v46 + 32))(v43[0], v27, a3);
  v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  v36 = *(void (**)(char *, uint64_t))(v33 + 8);
  v36(v16, a3);
  v37 = v44;
  if ((v35 & 1) != 0)
  {
    v38 = v31 == v32;
    v36(v34, a3);
  }
  else
  {
    v36(v34, a3);
    v38 = 0;
  }
LABEL_15:
  (*(void (**)(char *, uint64_t))(v37 + 8))(v25, v12);
  return v38 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityRotorEntryElementSpecifier<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AccessibilityRotorEntryElementSpecifier.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t AccessibilityListRotorEntry.resolveForNavigationOrClosestEntry(for:on:prepare:)@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  id v19;
  uint64_t result;
  char *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  char *v28;
  Class isa;
  _OWORD *v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;
  void *v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  _QWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  _BYTE v78[56];
  _OWORD v79[7];
  __int128 v80;

  v5 = v4;
  v43 = a4;
  v9 = type metadata accessor for Date();
  v49 = *(_QWORD *)(v9 - 8);
  v50 = v9;
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v48 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v58 = a1[1];
  v59 = v13;
  v14 = a1[2];
  v56 = a1[3];
  v57 = v14;
  v55 = a1[4];
  v54 = *((unsigned __int8 *)a1 + 40);
  v53 = a1[6];
  v52 = *((unsigned __int8 *)a1 + 56);
  if ((a3 & 1) != 0)
  {
    (*(void (**)(double))(v5 + 88))(v11);
    if (MEMORY[0x18D760234](&a2[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]))
    {
      swift_getObjectType();
      *(_QWORD *)&v79[0] = 0;
      BYTE8(v79[0]) = 1;
      ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
      swift_unknownObjectRelease();
    }
  }
  v51 = a3 ^ 1;
  v44 = v61;
  v15 = (void *)*MEMORY[0x1E0C99748];
  v46 = (void *)*MEMORY[0x1E0C99860];
  v47 = v15;
  v16 = 4;
  v45 = xmmword_187BF9820;
  while (1)
  {
    v17 = v16 == 0;
    outlined init with copy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(v5, (uint64_t)v78);
    outlined init with copy of AccessibilityRotorEntryElementSpecifier<AnyHashable>((uint64_t)v78, (uint64_t)&v73);
    if (v77)
      break;
    v70 = v73;
    v71 = v74;
    v72 = v75;
    v62 = v59;
    v63 = v58;
    v64 = v57;
    v65 = v56;
    v66 = v55;
    v67 = v54;
    v68 = v53;
    v69 = v52;
    AccessibilityRotorInfo.resolveImplicitElement(with:on:scrollIfNeeded:shouldLog:)((uint64_t)&v70, (uint64_t)a2, a3 & 1, a3 & v17);
LABEL_10:
    v19 = (id)v18;
    outlined destroy of AnyHashable((uint64_t)&v70);
    result = outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>((uint64_t)v78);
    if (v19)
      goto LABEL_18;
    if ((v16 == 0) | v51 & 1)
    {
      v30 = (_OWORD *)v43;
      *(_QWORD *)(v43 + 128) = 0;
      v30[6] = 0u;
      v30[7] = 0u;
      v30[4] = 0u;
      v30[5] = 0u;
      v30[2] = 0u;
      v30[3] = 0u;
      *v30 = 0u;
      v30[1] = 0u;
      return result;
    }
    v21 = a2;
    v22 = (void *)objc_opt_self();
    v23 = objc_msgSend(v22, sel_currentRunLoop);
    v60 = v45;
    v24 = v46;
    v61[0] = v47;
    v61[1] = v46;
    v25 = v47;
    v26 = v24;
    v27 = objc_msgSend(v22, sel_currentRunLoop);
    v28 = v48;
    Date.init(timeIntervalSinceNow:)();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v50);
    LOBYTE(v28) = objc_msgSend(v27, sel_runMode_beforeDate_, v25, isa);

    if ((v28 & 1) == 0)
      objc_msgSend((id)objc_opt_self(), sel_sleepForTimeInterval_, 0.001);

    type metadata accessor for NSRunLoopMode(0);
    swift_arrayDestroy();
    a2 = v21;

    --v16;
  }
  if (v77 == 1)
  {
    v70 = v73;
    v71 = v74;
    v72 = v75;
    v62 = v59;
    v63 = v58;
    v64 = v57;
    v65 = v56;
    v66 = v55;
    v67 = v54;
    v68 = v53;
    v69 = v52;
    v18 = AccessibilityRotorInfo.resolveNamespacedElement(with:in:on:shouldLog:)((uint64_t)&v70, v76, (uint64_t)a2, a3 & v17);
    goto LABEL_10;
  }
  AccessibilityNode.platformElement.getter();
  if (!v31)
    v31 = a2;
  v32 = v31;
  v19 = objc_msgSend(v31, sel_rotorOwnerElement, v43, v44);

  outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>((uint64_t)v78);
LABEL_18:
  v33 = *(unsigned __int8 *)(v5 + 80);
  if (v33 == 255)
  {
    v37 = 0;
  }
  else
  {
    v35 = *(void **)(v5 + 64);
    v34 = *(_QWORD *)(v5 + 72);
    outlined copy of AccessibilityRotorEntryRange(v35, v34, *(_BYTE *)(v5 + 80));
    AccessibilityRotorEntryRange.resolvePlatformRange(for:)(v19, v35, v34, v33);
    v37 = v36;
    outlined consume of AccessibilityRotorEntryRange?(v35, v34, v33);
  }
  result = outlined init with copy of AccessibilityListRotorEntry(v5, (uint64_t)v79);
  *((_QWORD *)&v80 + 1) = v19;
  v38 = (_OWORD *)v43;
  *(_QWORD *)(v43 + 128) = v37;
  v39 = v79[3];
  v38[2] = v79[2];
  v38[3] = v39;
  v40 = v79[5];
  v38[4] = v79[4];
  v38[5] = v40;
  v41 = v79[1];
  *v38 = v79[0];
  v38[1] = v41;
  v42 = v80;
  v38[6] = v79[6];
  v38[7] = v42;
  return result;
}

id AccessibilityRotorInfo.resolveElement(with:on:scrollIfNeeded:shouldLog:)(uint64_t a1, void *a2, char a3, char a4)
{
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  outlined init with copy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1, (uint64_t)&v15);
  if (!v19)
  {
    v12 = v15;
    v13 = v16;
    v14 = v17;
    AccessibilityRotorInfo.resolveImplicitElement(with:on:scrollIfNeeded:shouldLog:)((uint64_t)&v12, (uint64_t)a2, a3 & 1, a4 & 1);
    goto LABEL_5;
  }
  if (v19 == 1)
  {
    v12 = v15;
    v13 = v16;
    v14 = v17;
    v6 = AccessibilityRotorInfo.resolveNamespacedElement(with:in:on:shouldLog:)((uint64_t)&v12, v18, (uint64_t)a2, a4 & 1);
LABEL_5:
    v7 = (id)v6;
    outlined destroy of AnyHashable((uint64_t)&v12);
    return v7;
  }
  AccessibilityNode.platformElement.getter();
  if (!v8)
    v8 = a2;
  v9 = v8;
  v7 = objc_msgSend(v8, sel_rotorOwnerElement);

  return v7;
}

uint64_t closure #1 in AccessibilityRotorInfo.readEntryList(_:)(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t WeakValue;
  _QWORD v5[5];
  _BYTE v6[40];
  _BYTE v7[24];
  ValueMetadata *v8;
  _UNKNOWN **v9;
  _BYTE v10[12];
  uint64_t v11;
  char v12;

  outlined init with take of WeakAttribute<AccessibilityRotorEntryList>?(a1 + 32, (uint64_t)v10);
  outlined init with take of WeakAttribute<AccessibilityRotorEntryList>?((uint64_t)v10, (uint64_t)&v11);
  if ((v12 & 1) != 0 || (WeakValue = AGGraphGetWeakValue()) == 0)
  {
    v8 = &type metadata for EmptyGenerator;
    v9 = &protocol witness table for EmptyGenerator;
  }
  else
  {
    outlined init with copy of DropInfo(WeakValue, (uint64_t)v7);
  }
  outlined init with copy of TableColumnList((uint64_t)v7, (uint64_t)v6);
  v5[3] = &unk_1E1ADAA18;
  v5[4] = &protocol witness table for IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:);
  v5[0] = swift_allocObject();
  outlined init with copy of DropInfo((uint64_t)v6, v5[0] + 16);
  a2(v5);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v5);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v6);
  return outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v7);
}

uint64_t closure #1 in AccessibilityRotorInfo.resolveAllEntries()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = MEMORY[0x1E0DEE9D8];
  v1 = a1[3];
  v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  (*(void (**)(uint64_t *, uint64_t *, void *, _UNKNOWN **, uint64_t, uint64_t))(v2 + 8))(&v5, &v4, &unk_1E1ADAAA8, &protocol witness table for AccumulatingVisitor #1 in closure #1 in AccessibilityRotorInfo.resolveAllEntries(), v1, v2);
  return specialized Array.append<A>(contentsOf:)(v5);
}

uint64_t closure #1 in AccessibilityRotorInfo.entry(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WeakValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[7];
  char v28;
  _BYTE v29[12];
  uint64_t v30;
  char v31;

  v28 = 0;
  memset(v27, 0, sizeof(v27));
  outlined init with take of WeakAttribute<AccessibilityRotorEntryList>?(a1 + 32, (uint64_t)v29);
  outlined init with take of WeakAttribute<AccessibilityRotorEntryList>?((uint64_t)v29, (uint64_t)&v30);
  if ((v31 & 1) == 0)
  {
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      outlined init with copy of DropInfo(WeakValue, (uint64_t)&v20);
      *(_QWORD *)&v13 = a2;
      v6 = *((_QWORD *)&v21 + 1);
      v7 = v22;
      __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
      (*(void (**)(_OWORD *, __int128 *, void *, _UNKNOWN **, uint64_t, uint64_t))(v7 + 8))(v27, &v13, &unk_1E1ADAAE0, &protocol witness table for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:), v6, v7);
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)&v20);
    }
  }
  outlined init with take of Image.Resolved?((uint64_t)v27, (uint64_t)&v20, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  if (!*((_QWORD *)&v25 + 1))
    return outlined destroy of AccessibilityTableContext?((uint64_t)&v20, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  v17 = v24;
  v18 = v25;
  v19 = v26;
  v13 = v20;
  v14 = v21;
  v15 = v22;
  v16 = v23;
  LOBYTE(v20) = 0;
  result = outlined destroy of AccessibilityTableContext?(a3, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  v9 = v18;
  *(_OWORD *)(a3 + 64) = v17;
  *(_OWORD *)(a3 + 80) = v9;
  v10 = v19;
  v11 = v14;
  *(_OWORD *)a3 = v13;
  *(_OWORD *)(a3 + 16) = v11;
  v12 = v16;
  *(_OWORD *)(a3 + 32) = v15;
  *(_OWORD *)(a3 + 48) = v12;
  *(_QWORD *)(a3 + 96) = v10;
  *(_QWORD *)(a3 + 104) = a2;
  *(_BYTE *)(a3 + 112) = v20;
  return result;
}

double AccessibilityRotorInfo.entry(for:going:from:range:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 *v7;
  __int128 v9;
  int v14;
  id v15;
  __int128 *v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  _OWORD v24[3];
  uint64_t v25;
  _OWORD v26[7];
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[3];

  v9 = v7[1];
  v36 = *v7;
  v37 = v9;
  v38[0] = v7[2];
  *(_OWORD *)((char *)v38 + 9) = *(__int128 *)((char *)v7 + 41);
  if (a3)
  {
    v14 = a2 & 1;
    v35 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    v27 = 0;
    memset(v26, 0, sizeof(v26));
    v15 = a3;
    AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(v15, a4, a5, a6, a1, (uint64_t)&v28, (uint64_t)v26, (uint64_t)v23);
    if (v25)
    {

      outlined destroy of AccessibilityTableContext?((uint64_t)v23, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
      if (v14)
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v28, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
        v16 = v26;
      }
      else
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)v26, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
        v16 = &v28;
      }
      outlined init with take of Image.Resolved?((uint64_t)v16, a7, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
    }
    else
    {
      v18 = outlined destroy of AccessibilityTableContext?((uint64_t)v23, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
      *(_QWORD *)&v23[0] = MEMORY[0x1E0DEE9D8];
      MEMORY[0x1E0C80A78](v18, v19);
      MEMORY[0x1E0C80A78](v20, v21);
      static Update.ensure<A>(_:)();
      v22 = *(_QWORD *)&v23[0];
      if (*(_QWORD *)(*(_QWORD *)&v23[0] + 16))
      {
        v23[0] = v36;
        v23[1] = v37;
        v24[0] = v38[0];
        *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)v38 + 9);
        AccessibilityRotorInfo.closestEntry(in:on:going:from:range:)(v22, a1, v14, v15, (char *)a4, a5, a6, a7);
        swift_bridgeObjectRelease();

        outlined destroy of AccessibilityTableContext?((uint64_t)v26, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
        outlined destroy of AccessibilityTableContext?((uint64_t)&v28, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
      }
      else
      {
        swift_bridgeObjectRelease();

        outlined destroy of AccessibilityTableContext?((uint64_t)v26, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
        outlined destroy of AccessibilityTableContext?((uint64_t)&v28, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
        result = 0.0;
        *(_OWORD *)a7 = 0u;
        *(_OWORD *)(a7 + 16) = 0u;
        *(_OWORD *)(a7 + 32) = 0u;
        *(_OWORD *)(a7 + 48) = 0u;
        *(_OWORD *)(a7 + 64) = 0u;
        *(_OWORD *)(a7 + 80) = 0u;
        *(_OWORD *)(a7 + 96) = 0u;
        *(_BYTE *)(a7 + 112) = 0;
      }
    }
  }
  else
  {
    v35 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    MEMORY[0x1E0C80A78](a1, a2);
    outlined retain of AccessibilityRotorInfo((uint64_t *)&v36);
    static Update.ensure<A>(_:)();
    outlined init with take of Image.Resolved?((uint64_t)&v28, a7, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
    outlined release of AccessibilityRotorInfo((uint64_t *)&v36);
  }
  return result;
}

uint64_t AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  _OWORD *v8;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  id v19;
  _OWORD v24[2];
  _OWORD v25[2];
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  char v30;
  _BYTE v31[120];
  _OWORD v32[7];
  char v33;
  _BYTE v34[120];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  _OWORD v43[2];
  _OWORD v44[3];

  outlined destroy of AccessibilityTableContext?(a7, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  outlined destroy of AccessibilityTableContext?(a6, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  v15 = v8[1];
  v43[0] = *v8;
  v43[1] = v15;
  v17 = *v8;
  v16 = v8[1];
  v44[0] = v8[2];
  *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v8 + 41);
  memset(v31, 0, 113);
  memset(v32, 0, sizeof(v32));
  memset(v34, 0, 113);
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v35 = 0u;
  v33 = 0;
  v42 = 0;
  v24[0] = v17;
  v24[1] = v16;
  v25[0] = v8[2];
  *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)((char *)v8 + 41);
  v26 = a5;
  v27 = a1;
  v28 = a2;
  v29 = a3;
  v30 = a4;
  outlined retain of AccessibilityRotorInfo((uint64_t *)v43);
  v18 = a5;
  v19 = a1;
  outlined copy of AccessibilityRotorEntryRange?(a2, a3, a4);
  static Update.ensure<A>(_:)();
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v32, a6, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v34, a7, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v31, a8, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  return outlined destroy of MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)((uint64_t)v24);
}

void AccessibilityRotorInfo.closestEntry(in:on:going:from:range:)(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, void *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  __int128 *v8;
  __int128 v9;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  NSString *v23;
  Class v24;
  char v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  void *v50;
  id v51;
  double v52;
  double v53;
  double v54;
  double v55;
  id v56;
  void *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  id v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char *v71;
  uint64_t v72;
  void *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  void *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  char v98;
  BOOL v99;
  id v100;
  CGFloat v101;
  CGFloat v102;
  CGFloat v103;
  CGFloat v104;
  uint64_t v105;
  NSString *v106;
  Class v107;
  uint64_t v108;
  char v109;
  _BOOL4 v110;
  CGFloat v111;
  CGFloat v112;
  CGFloat v113;
  double MinX;
  double v115;
  double MinY;
  double v117;
  int v118;
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  void *v123;
  double v124;
  double v125;
  double v126;
  double v127;
  id v128;
  void *v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  _BOOL4 v137;
  uint64_t v138;
  char v139;
  char *v140;
  unint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  char v144;
  uint64_t v145;
  char v146;
  BOOL v147;
  uint64_t v148;
  char v149;
  double v150;
  uint64_t v151;
  char v152;
  unint64_t v153;
  int v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  void *v162;
  void *v163;
  unsigned __int8 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  int v169;
  char v171;
  uint64_t v172;
  id v173;
  int v174;
  id v175;
  CGFloat recta;
  _OWORD v178[2];
  _OWORD v179[2];
  _OWORD v180[5];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  _OWORD v185[6];
  __int128 v186;
  char v187;
  __int128 v188;
  __int128 v189;
  _OWORD v190[2];
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  _OWORD v207[3];
  CGRect v208;
  CGRect v209;
  CGRect v210;
  CGRect v211;
  CGRect v212;
  CGRect v213;

  v9 = v8[1];
  v205 = *v8;
  v206 = v9;
  v207[0] = v8[2];
  *(_OWORD *)((char *)v207 + 9) = *(__int128 *)((char *)v8 + 41);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_25:
    *(_BYTE *)(a8 + 112) = 0;
    *(_OWORD *)(a8 + 80) = 0u;
    *(_OWORD *)(a8 + 96) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)(a8 + 64) = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)a8 = 0u;
    return;
  }
  v153 = *(_QWORD *)(a1 + 16);
  v157 = a8;
  outlined retain of AccessibilityRotorInfo((uint64_t *)&v205);
  v15 = a2;
  v16 = specialized Sequence.compactMap<A>(_:)(a1, &v205, v15);

  outlined release of AccessibilityRotorInfo((uint64_t *)&v205);
  v17 = *((_QWORD *)v16 + 2);
  if (!v17)
  {
    swift_bridgeObjectRelease();
    v188 = v205;
    v189 = v206;
    v190[0] = v207[0];
    *(_OWORD *)((char *)v190 + 9) = *(_OWORD *)((char *)v207 + 9);
    AccessibilityListRotorEntry.resolveForNavigationOrClosestEntry(for:on:prepare:)((uint64_t *)&v188, v15, 1, (uint64_t)&v196);
    outlined init with take of Image.Resolved?((uint64_t)&v196, (uint64_t)&v188, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
    if (*((_QWORD *)&v192 + 1))
    {
      outlined init with copy of AccessibilityListRotorEntry((uint64_t)&v188, v157);
      outlined destroy of AccessibilityNavigationRotorEntry((uint64_t)&v188);
      return;
    }
    outlined destroy of AccessibilityTableContext?((uint64_t)&v188, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
    a8 = v157;
    goto LABEL_25;
  }
  v18 = v16;
  v151 = a1;
  v155 = v15;
  swift_getObjectType();
  objc_msgSend(a4, sel_accessibilityFrame);
  x = v208.origin.x;
  y = v208.origin.y;
  width = v208.size.width;
  height = v208.size.height;
  if (CGRectIsEmpty(v208))
  {
    v23 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
    v24 = NSClassFromString(v23);

    if (!v24)
    {
      objc_opt_self();
      v49 = swift_dynamicCastObjCClass();
      if (v49)
      {
        v50 = (void *)v49;
        v51 = a4;
        objc_msgSend(v50, sel_frame);
        x = v52;
        y = v53;
        width = v54;
        height = v55;
        v56 = objc_msgSend(v50, sel_window);
        if (v56)
        {
          v57 = v56;
          objc_msgSend(v50, sel_bounds);
          objc_msgSend(v57, sel_convertRect_fromCoordinateSpace_, v50);
          x = v58;
          y = v59;
          width = v60;
          height = v61;

        }
        else
        {

        }
      }
    }
  }
  v204 = 0;
  v202 = 0u;
  v203 = 0u;
  v200 = 0u;
  v201 = 0u;
  v198 = 0u;
  v199 = 0u;
  v196 = 0u;
  v197 = 0u;
  v188 = *(_OWORD *)&v155[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  EnvironmentValues.layoutDirection.getter();
  v25 = v180[0];
  v26 = v18;
  v156 = v18;
  v161 = v17;
  v162 = a4;
  if (!(_BYTE)a7)
  {
    v27 = 0;
    goto LABEL_32;
  }
  if (a7 == 255)
  {
    a5 = 0;
    v27 = 1;
    goto LABEL_32;
  }
  v168 = v180[0];
  v171 = a3;
  v28 = PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter();
  v29 = *((_QWORD *)v28 + 2);
  if (!v29)
  {
    v62 = a4;
    outlined copy of AccessibilityRotorEntryRange?(a5, a6, a7);
    goto LABEL_30;
  }
  v173 = a4;
  outlined copy of AccessibilityRotorEntryRange?(a5, a6, a7);
  v30 = 0;
  v31 = (uint64_t *)(v28 + 40);
  while (1)
  {
    v34 = *v31;
    if (a7 == 2)
    {
      outlined copy of AccessibilityRotorEntryRange?(a5, a6, 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)a5);
      v33 = v32;
      outlined consume of AccessibilityRotorEntryRange?(a5, a6, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v33 & 1) == 0)
        goto LABEL_20;
      goto LABEL_14;
    }
    v35 = v29;
    v36 = a7;
    v37 = *(v31 - 1);
    *(_QWORD *)&v188 = a5;
    *((_QWORD *)&v188 + 1) = a6;
    *(_QWORD *)&v180[0] = v37;
    *((_QWORD *)&v180[0] + 1) = v34;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v38 = _NSRange.init<A, B>(_:in:)();
    v40 = v39;
    if (v38 != NSNotFound.getter())
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = v35;
LABEL_14:
    ++v30;
    v31 += 2;
    if (v29 == v30)
      goto LABEL_30;
  }
  v41 = v38 + v40;
  if (__OFADD__(v38, v40))
  {
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }
  v42 = (void *)MEMORY[0x18D75CC88](v37, v34);
  v43 = objc_msgSend(v42, sel_length);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v44 = (uint64_t)v43 < v41;
  a7 = v36;
  v29 = v35;
  if (v44)
    goto LABEL_14;
LABEL_20:
  if (v29 == v30)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange?(a5, a6, a7);
    a4 = v162;

    a5 = 0;
    v27 = 1;
    v26 = v156;
    v17 = v161;
    goto LABEL_31;
  }
  if (v30 >= *((_QWORD *)v28 + 2))
    goto LABEL_151;
  v45 = *v31;
  v17 = v161;
  a4 = v162;
  if (a7 == 2)
  {
    outlined copy of AccessibilityRotorEntryRange?(a5, a6, 2);
    swift_bridgeObjectRetain();
    v46 = (uint64_t)PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)a5);
    v48 = v47;
    outlined consume of AccessibilityRotorEntryRange?(a5, a6, 2);
  }
  else
  {
    v145 = *(v31 - 1);
    swift_bridgeObjectRetain();
    v46 = specialized String.resolveNSRange(_:in:)((uint64_t)a5, a6, v145, v45);
    v48 = v146;
  }
  swift_bridgeObjectRelease();
  if ((v48 & 1) != 0)
    goto LABEL_159;
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityRotorEntryRange?(a5, a6, a7);

  v27 = 0;
  a5 = (char *)v46;
  v26 = v156;
LABEL_31:
  a3 = v171;
  v25 = v168;
LABEL_32:
  v63 = a3 ^ v25;
  v64 = (uint64_t)(v26 + 32);
  v158 = a3 ^ v25 ^ 1;
  swift_bridgeObjectRetain();
  v65 = 0;
  v152 = 0;
  v154 = 0;
  v167 = 0;
  v66 = 0;
  v150 = 1.79769313e308;
  v149 = 1;
  v169 = 1;
  v160 = v27;
  v159 = v64;
  v164 = v63;
LABEL_33:
  v148 = v65 - (_QWORD)a5;
  v67 = __OFSUB__(v65, a5);
  v147 = v67;
  while (1)
  {
    v68 = v64 + 136 * v66++;
    outlined init with copy of AccessibilityNavigationRotorEntry(v68, (uint64_t)&v188);
    if ((v194 & 1) != 0)
      goto LABEL_82;
    v69 = *((_QWORD *)&v193 + 1);
    if ((v27 & 1) != 0)
      goto LABEL_60;
    v70 = v192;
    if (v192 == 255)
      goto LABEL_60;
    v71 = (char *)v191;
    if (!(_BYTE)v192)
    {
LABEL_59:
      v99 = a5 == v71;
      v63 = v164;
      if (v99)
        goto LABEL_82;
      goto LABEL_60;
    }
    v165 = *((_QWORD *)&v193 + 1);
    v166 = v66;
    v72 = *((_QWORD *)&v191 + 1);
    v73 = (void *)*((_QWORD *)&v194 + 1);
    swift_getObjectType();
    v74 = PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter();
    v75 = *((_QWORD *)v74 + 2);
    v163 = v73;
    if (v75)
      break;
    outlined copy of AccessibilityRotorEntryRange?(v71, v72, v70);
    v96 = v73;
LABEL_55:
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange?(v71, v72, v70);

    v17 = v161;
    a4 = v162;
    v27 = v160;
    v64 = v159;
    v63 = v164;
    v69 = v165;
    v66 = v166;
LABEL_60:
    if (*((void **)&v194 + 1) == a4)
    {
      AccessibilityNavigationRotorEntry.nsRange.getter();
      if ((v109 & 1) != 0)
        goto LABEL_82;
      if (!v27)
      {
        v65 = v108;
        if ((v149 & 1) != 0)
        {
          v110 = (uint64_t)a5 < v108;
          if ((v63 & 1) == 0)
            v110 = v108 < (uint64_t)a5;
          if (v110)
            goto LABEL_107;
        }
        else
        {
          v135 = v108 - (_QWORD)a5;
          if (__OFSUB__(v108, a5))
            goto LABEL_152;
          if (v135 < 0)
          {
            v87 = __OFSUB__(0, v135);
            v135 = (uint64_t)&a5[-v108];
            if (v87)
              goto LABEL_155;
            if (v147)
              goto LABEL_156;
          }
          else if (v147)
          {
            goto LABEL_154;
          }
          v136 = v148;
          if (v148 < 0)
          {
            v136 = -v148;
            if (__OFSUB__(0, v148))
              goto LABEL_157;
          }
          v137 = (uint64_t)a5 < v108;
          if ((v63 & 1) == 0)
            v137 = v108 < (uint64_t)a5;
          if (v137 && v135 < v136)
          {
LABEL_107:
            outlined destroy of AccessibilityTableContext?((uint64_t)&v196, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
            v149 = 0;
            v202 = v193;
            v203 = v194;
            v204 = v195;
            v198 = v190[0];
            v199 = v190[1];
            v200 = v191;
            v201 = v192;
            v152 = 1;
            v154 = 1;
            v196 = v188;
            v197 = v189;
            if (v66 == v17)
            {
              v140 = v156;
              swift_bridgeObjectRelease();
              v152 = 1;
              goto LABEL_130;
            }
            goto LABEL_33;
          }
        }
      }
      outlined destroy of AccessibilityNavigationRotorEntry((uint64_t)&v188);
      v152 = 1;
      if (v66 == v17)
      {
LABEL_109:
        v140 = v156;
        swift_bridgeObjectRelease();
        if (((v169 | v154) & 1) != 0)
          goto LABEL_130;
        if ((v63 & 1) != 0)
        {
          v141 = v167 + 1;
          if (!__OFADD__(v167, 1))
            goto LABEL_115;
          __break(1u);
        }
        v141 = v167 - 1;
        if (!__OFSUB__(v167, 1))
        {
LABEL_115:
          if (v141 >= v153)
          {
            LOBYTE(v194) = 0;
            v192 = 0u;
            v193 = 0u;
            v191 = 0u;
            v189 = 0u;
            memset(v190, 0, sizeof(v190));
            v188 = 0u;
            outlined destroy of AccessibilityTableContext?((uint64_t)&v188, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
            goto LABEL_130;
          }
          outlined init with copy of AccessibilityListRotorEntry(v151 + 120 * v141 + 32, (uint64_t)&v188);
          v185[4] = v191;
          v185[5] = v192;
          v186 = v193;
          v187 = v194;
          v185[0] = v188;
          v185[1] = v189;
          v185[2] = v190[0];
          v185[3] = v190[1];
          v142 = *((_QWORD *)v156 + 2);
          if (v142)
          {
            v143 = v156 + 144;
            do
            {
              if ((*v143 & 1) != 0)
              {
                if (v187)
                  goto LABEL_125;
              }
              else
              {
                if (*((_QWORD *)v143 - 1) == *((_QWORD *)&v186 + 1))
                  v144 = v187;
                else
                  v144 = 1;
                if ((v144 & 1) == 0)
                {
LABEL_125:
                  outlined destroy of AccessibilityListRotorEntry((uint64_t)v185);
                  goto LABEL_130;
                }
              }
              v143 += 136;
              --v142;
            }
            while (v142);
          }
          v178[0] = v205;
          v178[1] = v206;
          v179[0] = v207[0];
          *(_OWORD *)((char *)v179 + 9) = *(_OWORD *)((char *)v207 + 9);
          AccessibilityListRotorEntry.resolveForNavigationOrClosestEntry(for:on:prepare:)((uint64_t *)v178, v155, 1, (uint64_t)v180);
          outlined destroy of AccessibilityListRotorEntry((uint64_t)v185);
          if (!*((_QWORD *)&v181 + 1))
          {
            outlined destroy of AccessibilityTableContext?((uint64_t)v180, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
            v140 = v156;
            goto LABEL_130;
          }
          swift_bridgeObjectRelease();
          v193 = v182;
          v194 = v183;
          v195 = v184;
          v190[0] = v180[2];
          v190[1] = v180[3];
          v191 = v180[4];
          v192 = v181;
          v188 = v180[0];
          v189 = v180[1];
          outlined destroy of AccessibilityTableContext?((uint64_t)&v196, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
          v202 = v193;
          v203 = v194;
          v204 = v195;
          v198 = v190[0];
          v199 = v190[1];
          v200 = v191;
          v201 = v192;
          v196 = v188;
          v197 = v189;
LABEL_138:
          if (*((_QWORD *)&v201 + 1))
          {
            outlined init with copy of AccessibilityListRotorEntry((uint64_t)&v196, v157);
          }
          else
          {
            *(_BYTE *)(v157 + 112) = 0;
            *(_OWORD *)(v157 + 80) = 0u;
            *(_OWORD *)(v157 + 96) = 0u;
            *(_OWORD *)(v157 + 48) = 0u;
            *(_OWORD *)(v157 + 64) = 0u;
            *(_OWORD *)(v157 + 16) = 0u;
            *(_OWORD *)(v157 + 32) = 0u;
            *(_OWORD *)v157 = 0u;
          }
          outlined destroy of AccessibilityTableContext?((uint64_t)&v196, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
          return;
        }
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
    }
    else
    {
      v100 = *((id *)&v194 + 1);
      objc_msgSend(v100, sel_accessibilityFrame);
      v101 = v209.origin.x;
      v102 = v209.origin.y;
      v103 = v209.size.width;
      v104 = v209.size.height;
      if (CGRectIsEmpty(v209))
      {
        v105 = v66;
        v106 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
        v107 = NSClassFromString(v106);

        if (!v107)
        {
          objc_opt_self();
          v122 = swift_dynamicCastObjCClass();
          if (v122)
          {
            v123 = (void *)v122;
            v100 = v100;
            objc_msgSend(v123, sel_frame);
            v101 = v124;
            v102 = v125;
            v103 = v126;
            v104 = v127;
            v128 = objc_msgSend(v123, sel_window);
            if (v128)
            {
              v129 = v128;
              objc_msgSend(v123, sel_bounds);
              objc_msgSend(v129, sel_convertRect_fromCoordinateSpace_, v123);
              v101 = v130;
              v102 = v131;
              v103 = v132;
              v104 = v133;

              goto LABEL_64;
            }

          }
        }

LABEL_64:
        v66 = v105;
        goto LABEL_73;
      }

LABEL_73:
      recta = v104;
      v210.origin.x = v101;
      v210.origin.y = v102;
      v210.size.width = v103;
      v210.size.height = v104;
      v111 = v103;
      v112 = v102;
      v113 = v101;
      MinX = CGRectGetMinX(v210);
      v211.origin.x = x;
      v211.origin.y = y;
      v211.size.width = width;
      v211.size.height = height;
      v115 = MinX - CGRectGetMinX(v211);
      v212.origin.x = v113;
      v212.origin.y = v112;
      v212.size.width = v111;
      v212.size.height = recta;
      MinY = CGRectGetMinY(v212);
      v213.origin.x = x;
      v213.origin.y = y;
      v213.size.width = width;
      v213.size.height = height;
      v117 = CGRectGetMinY(v213);
      if ((v115 <= 0.0) | v63 & 1)
        v118 = (v115 < 0.0) & v63;
      else
        v118 = 1;
      v119 = fabs(v115);
      v120 = vabdd_f64(MinY, v117);
      if (v118 && v120 < v119
        || ((v121 = MinY - v117, !((v121 <= 0.0) | v63 & 1)) || !((v121 >= 0.0) | v158 & 1)) && v120 >= v119)
      {
        v169 = 0;
        v167 = v69;
LABEL_82:
        outlined destroy of AccessibilityNavigationRotorEntry((uint64_t)&v188);
        if (v66 == v17)
          goto LABEL_109;
        continue;
      }
      v134 = v115 * v115 + v121 * v121;
      if (v134 < v150)
      {
        AccessibilityNavigationRotorEntry.nsRange.getter();
        v65 = v138;
        v149 = v139 & 1;
        outlined destroy of AccessibilityTableContext?((uint64_t)&v196, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
        v202 = v193;
        v203 = v194;
        v204 = v195;
        v198 = v190[0];
        v199 = v190[1];
        v200 = v191;
        v201 = v192;
        v154 = 1;
        v150 = v134;
        v196 = v188;
        v197 = v189;
        if (v66 == v17)
        {
LABEL_146:
          v140 = v156;
          swift_bridgeObjectRelease();
LABEL_130:
          outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v196, (uint64_t)&v188, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
          if (*((_QWORD *)&v192 + 1))
          {
            swift_bridgeObjectRelease();
            outlined destroy of AccessibilityTableContext?((uint64_t)&v188, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
            goto LABEL_138;
          }
          outlined destroy of AccessibilityTableContext?((uint64_t)&v188, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
          if ((v152 & 1) == 0 || (v27 & 1) == 0 || (v63 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            goto LABEL_138;
          }
          if (*((_QWORD *)v140 + 2))
          {
            outlined init with copy of AccessibilityNavigationRotorEntry(v64, (uint64_t)&v188);
            swift_bridgeObjectRelease();
            outlined assign with take of AccessibilityNavigationRotorEntry?((uint64_t)&v188, (uint64_t)&v196);
            goto LABEL_138;
          }
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }
        goto LABEL_33;
      }
      outlined destroy of AccessibilityNavigationRotorEntry((uint64_t)&v188);
      v154 = 1;
      if (v66 == v17)
        goto LABEL_146;
    }
  }
  outlined copy of AccessibilityRotorEntryRange?(v71, v72, v70);
  v175 = v73;
  v76 = 0;
  v77 = (uint64_t *)(v74 + 40);
  v174 = v70;
  v172 = v75;
  while (1)
  {
    v80 = *v77;
    if (v70 == 2)
    {
      outlined copy of AccessibilityRotorEntryRange?(v71, v72, 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v71);
      v79 = v78;
      outlined consume of AccessibilityRotorEntryRange?(v71, v72, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v79 & 1) == 0)
        break;
      goto LABEL_44;
    }
    v81 = *(v77 - 1);
    v82 = v71;
    *(_QWORD *)&v180[0] = v71;
    *((_QWORD *)&v180[0] + 1) = v72;
    v83 = v72;
    *(_QWORD *)&v185[0] = v81;
    *((_QWORD *)&v185[0] + 1) = v80;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v84 = _NSRange.init<A, B>(_:in:)();
    v86 = v85;
    if (v84 == NSNotFound.getter())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v70 = v174;
      v72 = v83;
      v71 = v82;
      v75 = v172;
      goto LABEL_44;
    }
    v87 = __OFADD__(v84, v86);
    v88 = v84 + v86;
    if (v87)
    {
      __break(1u);
      goto LABEL_148;
    }
    v89 = (void *)MEMORY[0x18D75CC88](v81, v80);
    v90 = objc_msgSend(v89, sel_length);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v44 = (uint64_t)v90 < v88;
    v70 = v174;
    v72 = v83;
    v71 = v82;
    v75 = v172;
    if (!v44)
      break;
LABEL_44:
    ++v76;
    v77 += 2;
    if (v75 == v76)
      goto LABEL_55;
  }
  if (v75 == v76)
    goto LABEL_55;
  if (v76 >= *((_QWORD *)v74 + 2))
    goto LABEL_149;
  v91 = *v77;
  if (v70 == 2)
  {
    outlined copy of AccessibilityRotorEntryRange?(v71, v72, 2);
    swift_bridgeObjectRetain();
    v92 = (uint64_t)PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v71);
    v94 = v93;
    v95 = v72;
    outlined consume of AccessibilityRotorEntryRange?(v71, v72, 2);
  }
  else
  {
    v97 = *(v77 - 1);
    swift_bridgeObjectRetain();
    v95 = v72;
    v92 = specialized String.resolveNSRange(_:in:)((uint64_t)v71, v72, v97, v91);
    v94 = v98;
  }
  v17 = v161;
  a4 = v162;
  swift_bridgeObjectRelease();
  if ((v94 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange?(v71, v95, v174);

    v71 = (char *)v92;
    v27 = v160;
    v64 = v159;
    v69 = v165;
    v66 = v166;
    goto LABEL_59;
  }
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
}

uint64_t AccessibilityRotorInfo.resolveNamespacedElement(with:in:on:shouldLog:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;

  if (*(_QWORD *)(a3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope))
  {
    swift_retain();
    v7 = specialized AccessibilityRelationshipScope.nodes<A>(for:with:in:)(4u, a1, a2);
    swift_release();
    v8 = v7 >> 62;
    if (!(v7 >> 62))
      goto LABEL_3;
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9D8];
    v8 = MEMORY[0x1E0DEE9D8] >> 62;
    if (!(MEMORY[0x1E0DEE9D8] >> 62))
    {
LABEL_3:
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v9)
        goto LABEL_4;
LABEL_12:
      swift_bridgeObjectRelease_n();
      if ((a4 & 1) != 0)
      {
        _StringGuts.grow(_:)(319);
        v16._object = (void *)0x8000000187BE7D50;
        v16._countAndFlagsBits = 0xD000000000000059;
        String.append(_:)(v16);
        v17._countAndFlagsBits = AnyHashable.description.getter();
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        v18._countAndFlagsBits = 0xD0000000000000E4;
        v18._object = (void *)0x8000000187BE7DB0;
        String.append(_:)(v18);
        MEMORY[0x18D75AC90](0, 0xE000000000000000);
        swift_bridgeObjectRelease();
      }
      return 0;
    }
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_12;
LABEL_4:
  if ((v7 & 0xC000000000000001) != 0)
  {
    v11 = (id)MEMORY[0x18D75E3BC](0, v7);
LABEL_7:
    v12 = v11;
    swift_bridgeObjectRelease();
    AccessibilityNode.platformElement.getter();
    if (v13)
    {
      v14 = v13;
      if (!v8)
      {
LABEL_9:
        v15 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_17:
        swift_bridgeObjectRelease();
        if (v15 >= 2 && (a4 & 1) != 0)
        {
          _StringGuts.grow(_:)(230);
          v19._countAndFlagsBits = 0xD000000000000066;
          v19._object = (void *)0x8000000187BE7C60;
          String.append(_:)(v19);
          v20._countAndFlagsBits = AnyHashable.description.getter();
          String.append(_:)(v20);
          swift_bridgeObjectRelease();
          v21._countAndFlagsBits = 0xD00000000000007ELL;
          v21._object = (void *)0x8000000187BE7CD0;
          String.append(_:)(v21);
          MEMORY[0x18D75AC90](0, 0xE000000000000000);
          swift_bridgeObjectRelease();
        }

        return (uint64_t)v14;
      }
    }
    else
    {
      v14 = v12;
      if (!v8)
        goto LABEL_9;
    }
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v7 + 32);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

void AccessibilityRotorInfo.resolveImplicitElement(with:on:scrollIfNeeded:shouldLog:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t *v4;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t (*v17)(void);
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  void *v35;
  char *v36;
  id v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  void *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int v72;
  __int16 v73;
  char v74;
  _OWORD v75[2];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;
  unsigned __int16 v81;
  unsigned __int8 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88[6];

  v63 = v4[1];
  v64 = *v4;
  v61 = v4[3];
  v62 = v4[2];
  v60 = v4[4];
  v59 = *((_BYTE *)v4 + 40);
  v58 = v4[6];
  v57 = *((_BYTE *)v4 + 56);
  MEMORY[0x18D75B908]();
  AccessibilityNode.attachment.getter(v88);

  v9 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v9, (uint64_t)&v76);
  swift_bridgeObjectRelease_n();
  if (*((_QWORD *)&v77 + 1))
  {
    outlined init with take of OptionalBinaryInteger(&v76, (uint64_t)&v68);
    v10 = specialized AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:)(a1, &v68, a2, a3 & 1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
    if (v10)
      goto LABEL_67;
  }
  else
  {
    outlined destroy of ScrollableCollection?((uint64_t)&v76);
  }
  v54 = a2;
  v11 = (uint64_t *)(a2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
  swift_beginAccess();
  v12 = *v11;
  v65 = a3;
  v56 = a1;
  v55 = a4;
  if ((unint64_t)*v11 >> 62)
  {
LABEL_61:
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    if (!v13)
    {
LABEL_29:
      v87 = 0;
      v85 = 0u;
      v86 = 0u;
      v32 = v56;
      v33 = v55;
      v34 = v65;
      goto LABEL_30;
    }
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v13)
      goto LABEL_29;
  }
  v14 = 0;
  v66 = v12 & 0xC000000000000001;
  v15 = MEMORY[0x1E0DEE9B8] + 8;
  v16 = (unint64_t *)&lazy cache variable for type metadata for Any?;
  v17 = MEMORY[0x1E0DEB940];
  while (1)
  {
    if (v66)
    {
      swift_bridgeObjectRetain();
      v18 = (id)MEMORY[0x18D75E3BC](v14, v12);
    }
    else
    {
      v19 = *(void **)(v12 + 8 * v14 + 32);
      swift_bridgeObjectRetain();
      v18 = v19;
    }
    v67 = v18;
    AccessibilityNode.attachment.getter((uint64_t *)&v68);
    v20 = v68;

    if (*(_QWORD *)(v20 + 16)
      && (v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
          (v22 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v20 + 56) + 40 * v21, (uint64_t)&v68);
      v24 = *((_QWORD *)&v69 + 1);
      v23 = v70;
      __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
      v25 = v16;
      v26 = v12;
      v27 = v13;
      v28 = v15;
      v29 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v23 + 8);
      swift_bridgeObjectRetain();
      v29(v75, v24, v23);
      v15 = v28;
      v13 = v27;
      v12 = v26;
      v16 = v25;
      v17 = MEMORY[0x1E0DEB940];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
    }
    else
    {
      memset(v75, 0, sizeof(v75));
      swift_bridgeObjectRetain();
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, v16, v15, (uint64_t (*)(_QWORD, uint64_t))v17);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t))v17);
    if (swift_dynamicCast())
    {
      outlined init with take of Image.Resolved?((uint64_t)&v68, (uint64_t)&v76, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    }
    else
    {
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v73 = 0;
      v72 = 0;
      v74 = -2;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v81 = 0;
      v80 = 0;
      v82 = -1;
      outlined destroy of AccessibilityScrollableContext??((uint64_t)&v68);
    }
    swift_bridgeObjectRelease_n();
    if (v82 == 255)
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)&v76, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    }
    else
    {
      if ((((unint64_t)((v81 | (v82 << 16)) & 0xFFFFFF) << 32) & 0xFF000000000000) == 0x2000000000000)
      {
        swift_release();
        outlined init with take of OptionalBinaryInteger(&v76, (uint64_t)&v83);
        outlined init with take of OptionalBinaryInteger(&v83, (uint64_t)&v76);
        swift_bridgeObjectRelease();

        goto LABEL_24;
      }
      outlined destroy of AccessibilityScrollableContext((uint64_t)&v76);
    }
    v76 = 0u;
    v77 = 0u;
    *(_QWORD *)&v78 = 0;
    swift_bridgeObjectRelease();

LABEL_24:
    v30 = *((_QWORD *)&v77 + 1);
    outlined destroy of ScrollableCollection?((uint64_t)&v76);
    if (v30)
      break;
    v31 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_61;
    }
    ++v14;
    if (v31 == v13)
      goto LABEL_29;
  }
  if (v13 == v14)
    goto LABEL_29;
  if (v66)
  {
    v49 = (id)MEMORY[0x18D75E3BC](v14, v12);
    goto LABEL_58;
  }
  if ((v14 & 0x8000000000000000) != 0)
    goto LABEL_69;
  if (v14 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_70:
    __break(1u);
  }
  else
  {
    v49 = *(id *)(v12 + 8 * v14 + 32);
LABEL_58:
    v50 = v49;
    v32 = v56;
    v33 = v55;
    *(_QWORD *)&v76 = v49;
    closure #1 in AccessibilityRotorInfo.resolveImplicitElement(with:on:scrollIfNeeded:shouldLog:)((uint64_t)&v68);

    outlined init with copy of ScrollableCollection?((uint64_t)&v68, (uint64_t)&v83);
    v34 = v65;
    if (v84)
    {
      outlined init with take of OptionalBinaryInteger(&v83, (uint64_t)&v76);
      outlined destroy of ScrollableCollection?((uint64_t)&v68);
      outlined init with take of OptionalBinaryInteger(&v76, (uint64_t)&v85);
LABEL_30:
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v86 + 1))
      {
        outlined init with take of OptionalBinaryInteger(&v85, (uint64_t)v88);
        v35 = (void *)v54;
        v36 = specialized AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:)(v32, v88, v54, v34 & 1);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);
        if (v36)
          goto LABEL_67;
      }
      else
      {
        outlined destroy of ScrollableCollection?((uint64_t)&v85);
        v35 = (void *)v54;
      }
      AccessibilityNode.platformElement.getter();
      if (!v37)
        v37 = v35;
      v38 = v37;
      type metadata accessor for HostingScrollView();
      v39 = swift_dynamicCastClass();

      if (!v39)
        goto LABEL_65;
      AccessibilityNode.rotorChildNodes.getter();
      v41 = v40;
      if (!(v40 >> 62))
      {
        v42 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v42)
          goto LABEL_39;
LABEL_64:
        swift_bridgeObjectRelease();
LABEL_65:
        if ((v33 & 1) == 0)
          goto LABEL_67;
        goto LABEL_66;
      }
      v42 = _CocoaArrayWrapper.endIndex.getter();
      if (!v42)
        goto LABEL_64;
LABEL_39:
      if (v42 >= 1)
      {
        v43 = 0;
        v44 = 0;
        while (1)
        {
          if ((v41 & 0xC000000000000001) != 0)
            v46 = (id)MEMORY[0x18D75E3BC](v44, v41);
          else
            v46 = *(id *)(v41 + 8 * v44 + 32);
          v45 = v46;
          type metadata accessor for AccessibilityIncrementalLayoutNode();
          v47 = swift_dynamicCastClass();
          if (v47)
          {
            *(_QWORD *)&v76 = v64;
            *((_QWORD *)&v76 + 1) = v63;
            *(_QWORD *)&v77 = v62;
            *((_QWORD *)&v77 + 1) = v61;
            *(_QWORD *)&v78 = v60;
            BYTE8(v78) = v59;
            *(_QWORD *)&v79 = v58;
            BYTE8(v79) = v57;
            v48 = AccessibilityRotorInfo.resolveImplicitElement(with:on:scrollIfNeeded:shouldLog:)(v32, v47, v65 & 1, v33 & 1);

            if (!v48)
              goto LABEL_43;
            v45 = v43;
            v43 = (void *)v48;
          }

LABEL_43:
          if (v42 == ++v44)
          {
            swift_bridgeObjectRelease();
            if (v43 || (v33 & 1) == 0)
            {
LABEL_67:
              static Update.end()();
              return;
            }
LABEL_66:
            *(_QWORD *)&v76 = 0;
            *((_QWORD *)&v76 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(253);
            v51._object = (void *)0x8000000187BE7EA0;
            v51._countAndFlagsBits = 0xD00000000000004ELL;
            String.append(_:)(v51);
            v52._countAndFlagsBits = AnyHashable.description.getter();
            String.append(_:)(v52);
            swift_bridgeObjectRelease();
            v53._countAndFlagsBits = 0xD0000000000000ADLL;
            v53._object = (void *)0x8000000187BE7EF0;
            String.append(_:)(v53);
            MEMORY[0x18D75AC90](v76, *((_QWORD *)&v76 + 1));
            swift_bridgeObjectRelease();
            goto LABEL_67;
          }
        }
      }
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
  }
  __break(1u);
}

uint64_t *closure #2 in AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:)(uint64_t *result, _BYTE *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[40];

  v4 = result[1];
  if (v4)
  {
    v8 = *result;
    swift_retain();
    AnyHashable2.anyHashable.getter();
    v9 = MEMORY[0x18D75E284](v12, a3);
    swift_release();
    result = (uint64_t *)outlined destroy of AnyHashable((uint64_t)v12);
    if ((v9 & 1) != 0)
    {
      v10 = *a4;
      v11 = a4[1];
      *a4 = v8;
      a4[1] = v4;
      swift_retain();
      result = (uint64_t *)outlined consume of Text.LineStyle?(v10, v11);
      *a2 = 1;
    }
  }
  return result;
}

double closure #1 in AccessibilityRotorInfo.resolveImplicitElement(with:on:scrollIfNeeded:shouldLog:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  uint64_t v4[2];
  __int128 v5[3];
  unsigned __int16 v6;
  unsigned __int8 v7;

  AccessibilityNode.attachment.getter(v4);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v5);
  swift_bridgeObjectRelease_n();
  if (v7 == 255)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  }
  else
  {
    if ((((unint64_t)((v6 | (v7 << 16)) & 0xFFFFFF) << 32) & 0xFF000000000000) == 0x2000000000000)
    {
      swift_release();
      outlined init with take of OptionalBinaryInteger(v5, a1);
      return result;
    }
    outlined destroy of AccessibilityScrollableContext((uint64_t)v5);
  }
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t View.accessibilityRotorEntry<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityRelationship<A>(_:id:in:)(4, a1, a2, a3, a4, a5);
}

uint64_t type metadata completion function for AccessibilityRotorEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for AccessibilityRotorEntryElementSpecifier(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_OWORD *initializeBufferWithCopyOfBuffer for AccessibilityRotorEntry(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6 & 0xF8 | 7;
  v8 = ~v7;
  v9 = *(_QWORD *)(v5 + 64);
  v10 = v9 + 7;
  if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v9)
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 & 0x1000F8) != 0
    || ((v11 + (((v6 & 0xF8) + 56) & ~v7) + 8) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (_OWORD *)(v13 + ((v7 + 16) & v8));
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 24);
    v34 = *(_QWORD *)(a3 + 16);
    if (v14 < 0xFFFFFFFF)
    {
      v18 = *(_OWORD *)(a2 + 16);
      *a1 = *(_OWORD *)a2;
      a1[1] = v18;
    }
    else
    {
      v15 = *(_QWORD *)a2;
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v16, v17);
      *(_QWORD *)v4 = v15;
      *((_QWORD *)v4 + 1) = v16;
      *((_BYTE *)v4 + 16) = v17;
      *((_QWORD *)v4 + 3) = v14;
      swift_bridgeObjectRetain();
    }
    v19 = ((unint64_t)v4 + 39) & 0xFFFFFFFFFFFFFFF8;
    v20 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
    v21 = *(unsigned __int8 *)(v20 + 16);
    if (v21 > 2)
    {
      v24 = *(_OWORD *)v20;
      *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
      *(_OWORD *)v19 = v24;
    }
    else
    {
      v22 = *(_QWORD *)v20;
      v23 = *(_QWORD *)(v20 + 8);
      outlined copy of AccessibilityRotorEntryRange(*(id *)v20, v23, *(_BYTE *)(v20 + 16));
      *(_QWORD *)v19 = v22;
      *(_QWORD *)(v19 + 8) = v23;
      *(_BYTE *)(v19 + 16) = v21;
    }
    v25 = ((unint64_t)v4 + 63) & v8;
    v26 = (a2 + 63) & v8;
    v27 = *(unsigned __int8 *)(v26 + v11);
    if (v27 >= 2)
    {
      if (v11 <= 3)
        v28 = v11;
      else
        v28 = 4;
      __asm { BR              X12 }
    }
    v29 = v11 + 1;
    if (v27 == 1)
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16))(((unint64_t)v4 + 63) & v8, v26, v34);
      *(_QWORD *)((v10 + v25) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v10 + v26) & 0xFFFFFFFFFFFFF8);
      *(_BYTE *)(v25 + v11) = 1;
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16))(((unint64_t)v4 + 63) & v8, v26, v34);
      *(_BYTE *)(v25 + v11) = 0;
    }
    v30 = (_QWORD *)(((v26 | 7) + v29) & 0xFFFFFFFFFFFFFFF8);
    v31 = v30[1];
    v32 = (_QWORD *)(((v25 | 7) + v29) & 0xFFFFFFFFFFFFFFF8);
    *v32 = *v30;
    v32[1] = v31;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AccessibilityRotorEntry(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  v4 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 <= 2)
    outlined consume of AccessibilityRotorEntryRange(*(id *)v4, *(_QWORD *)(v4 + 8), v5);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v8 = (v4 + v7 + 17) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v9)
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (*(unsigned __int8 *)(v8 + v10) >= 2u)
  {
    if (v10 <= 3)
      v11 = v10;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  (*(void (**)(uint64_t))(v6 + 8))(v8);
  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityRotorEntry(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v6 = a2[3];
  if (v6 < 0xFFFFFFFF)
  {
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = *((_BYTE *)a2 + 16);
    outlined copy of Text.Storage(*a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  v11 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned __int8 *)(v12 + 16);
  if (v13 > 2)
  {
    v16 = *(_OWORD *)v12;
    *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
    *(_OWORD *)v11 = v16;
  }
  else
  {
    v14 = *(_QWORD *)v12;
    v15 = *(_QWORD *)(v12 + 8);
    outlined copy of AccessibilityRotorEntryRange(*(id *)v12, v15, *(_BYTE *)(v12 + 16));
    *(_QWORD *)v11 = v14;
    *(_QWORD *)(v11 + 8) = v15;
    *(_BYTE *)(v11 + 16) = v13;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(_DWORD *)(v17 + 80) & 0xF8 | 7;
  v19 = (v11 + v18 + 17) & ~v18;
  v20 = (v12 + v18 + 17) & ~v18;
  v21 = *(_QWORD *)(v17 + 64);
  v22 = v21 + 7;
  if (((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v21)
    v23 = *(_QWORD *)(v17 + 64);
  else
    v23 = ((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v24 = *(unsigned __int8 *)(v20 + v23);
  if (v24 >= 2)
  {
    if (v23 <= 3)
      v25 = v23;
    else
      v25 = 4;
    __asm { BR              X13 }
  }
  if (v24 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v19, v20);
    *(_QWORD *)((v22 + v19) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v22 + v20) & 0xFFFFFFFFFFFFF8);
    *(_BYTE *)(v19 + v23) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v19, v20);
    *(_BYTE *)(v19 + v23) = 0;
  }
  v26 = (uint64_t *)(((v20 | 7) + v23 + 1) & 0xFFFFFFFFFFFFFFF8);
  v28 = *v26;
  v27 = v26[1];
  v29 = (_QWORD *)(((v19 | 7) + v23 + 1) & 0xFFFFFFFFFFFFFFF8);
  *v29 = v28;
  v29[1] = v27;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityRotorEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char v25;
  id v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;

  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      v13 = *(_QWORD *)a2;
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v14, v15);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v14;
      *(_BYTE *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 >= 0xFFFFFFFF)
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v8, v9);
      v10 = *(_QWORD *)a1;
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
LABEL_8:
  v17 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v18 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(unsigned __int8 *)(v17 + 16);
  v20 = *(unsigned __int8 *)(v18 + 16);
  if (v19 > 2)
  {
    if (v20 <= 2)
    {
      v26 = *(id *)v18;
      v27 = *(_QWORD *)(v18 + 8);
      outlined copy of AccessibilityRotorEntryRange(*(id *)v18, v27, *(_BYTE *)(v18 + 16));
      *(_QWORD *)v17 = v26;
      *(_QWORD *)(v17 + 8) = v27;
      *(_BYTE *)(v17 + 16) = v20;
      goto LABEL_15;
    }
  }
  else
  {
    if (v20 <= 2)
    {
      v21 = *(id *)v18;
      v22 = *(_QWORD *)(v18 + 8);
      outlined copy of AccessibilityRotorEntryRange(*(id *)v18, v22, *(_BYTE *)(v18 + 16));
      v23 = *(id *)v17;
      v24 = *(_QWORD *)(v17 + 8);
      *(_QWORD *)v17 = v21;
      *(_QWORD *)(v17 + 8) = v22;
      v25 = *(_BYTE *)(v17 + 16);
      *(_BYTE *)(v17 + 16) = v20;
      outlined consume of AccessibilityRotorEntryRange(v23, v24, v25);
      goto LABEL_15;
    }
    outlined consume of AccessibilityRotorEntryRange(*(id *)v17, *(_QWORD *)(v17 + 8), v19);
  }
  v28 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  *(_OWORD *)v17 = v28;
LABEL_15:
  v29 = *(_QWORD *)(a3 + 16);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_DWORD *)(v30 + 80) & 0xF8 | 7;
  v32 = (v17 + v31 + 17) & ~v31;
  v33 = (v18 + v31 + 17) & ~v31;
  v34 = *(_QWORD *)(v30 + 64);
  if (((v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v34)
    v35 = *(_QWORD *)(v30 + 64);
  else
    v35 = ((v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v32 != v33)
  {
    if (*(unsigned __int8 *)(v32 + v35) >= 2u)
    {
      if (v35 <= 3)
        v36 = v35;
      else
        v36 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v29);
    v37 = *(unsigned __int8 *)(v33 + v35);
    if (v37 >= 2)
    {
      if (v35 <= 3)
        v38 = v35;
      else
        v38 = 4;
      __asm { BR              X12 }
    }
    if (v37 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v32, v33, v29);
      *(_QWORD *)(((v32 | 7) + v34) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v33 | 7) + v34) & 0xFFFFFFFFFFFFF8);
      *(_BYTE *)(v32 + v35) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v32, v33, v29);
      *(_BYTE *)(v32 + v35) = 0;
    }
  }
  v39 = (_QWORD *)(((v32 | 7) + v35 + 1) & 0xFFFFFFFFFFFFFFF8);
  v40 = (_QWORD *)(((v33 | 7) + v35 + 1) & 0xFFFFFFFFFFFFFFF8);
  v41 = v40[1];
  *v39 = *v40;
  v39[1] = v41;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for AccessibilityRotorEntry(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_OWORD *)v6;
  *(_BYTE *)(v5 + 16) = *(_BYTE *)(v6 + 16);
  *(_OWORD *)v5 = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v10 = (v5 + v9 + 17) & ~v9;
  v11 = (v6 + v9 + 17) & ~v9;
  v12 = *(_QWORD *)(v8 + 64);
  v13 = v12 + 7;
  if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v12)
    v14 = *(_QWORD *)(v8 + 64);
  else
    v14 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v15 = *(unsigned __int8 *)(v11 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  if (v15 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
    *(_QWORD *)((v13 + v10) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFF8);
    *(_BYTE *)(v10 + v14) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
    *(_BYTE *)(v10 + v14) = 0;
  }
  *(_OWORD *)(((v10 | 7) + v14 + 1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((v11 | 7) + v14 + 1) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AccessibilityRotorEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(a2 + 24) >= 0xFFFFFFFFuLL)
    {
      v6 = *(_BYTE *)(a2 + 16);
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_BYTE *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
LABEL_6:
  v11 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned __int8 *)(v11 + 16);
  if (v13 <= 2)
  {
    v14 = *(unsigned __int8 *)(v12 + 16);
    v15 = *(void **)v11;
    v16 = *(_QWORD *)(v11 + 8);
    if (v14 <= 2)
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *(_BYTE *)(v11 + 16) = v14;
      outlined consume of AccessibilityRotorEntryRange(v15, v16, v13);
      goto LABEL_11;
    }
    outlined consume of AccessibilityRotorEntryRange(v15, v16, v13);
  }
  v17 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  *(_OWORD *)v11 = v17;
LABEL_11:
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_DWORD *)(v19 + 80) & 0xF8 | 7;
  v21 = v12 + v20;
  v22 = (v11 + v20 + 17) & ~v20;
  v23 = (v21 + 17) & ~v20;
  v24 = *(_QWORD *)(v19 + 64);
  if (((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v24)
    v25 = *(_QWORD *)(v19 + 64);
  else
    v25 = ((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v22 != v23)
  {
    if (*(unsigned __int8 *)(v22 + v25) >= 2u)
    {
      if (v25 <= 3)
        v26 = v25;
      else
        v26 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v18);
    v27 = *(unsigned __int8 *)(v23 + v25);
    if (v27 >= 2)
    {
      if (v25 <= 3)
        v28 = v25;
      else
        v28 = 4;
      __asm { BR              X12 }
    }
    if (v27 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v22, v23, v18);
      *(_QWORD *)(((v22 | 7) + v24) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v23 | 7) + v24) & 0xFFFFFFFFFFFFF8);
      *(_BYTE *)(v22 + v25) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v22, v23, v18);
      *(_BYTE *)(v22 + v25) = 0;
    }
  }
  *(_OWORD *)(((v22 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((v23 | 7) + v25 + 1) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityRotorEntry(int *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v5 <= v4)
    v5 = *(_QWORD *)(v3 + 64);
  if (!a2)
    return 0;
  v6 = *(_DWORD *)(v3 + 80) & 0xF8;
  v7 = v6 | 7;
  v8 = v5 + 8;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_5;
  v11 = ((v8 + ((v6 + 56) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16;
  v12 = v11 & 0xFFFFFFF8;
  v13 = a2 - 2147483646;
  if ((v11 & 0xFFFFFFF8) != 0)
    v13 = 2;
  if (v13 >= 0x10000)
    v14 = 4;
  else
    v14 = 2;
  if (v13 < 0x100)
    v15 = 1;
  else
    v15 = v14;
  if (v15 == 4)
  {
    v16 = *(int *)((char *)a1 + v11);
    if (!v16)
      goto LABEL_5;
  }
  else if (v15 == 2)
  {
    v16 = *(unsigned __int16 *)((char *)a1 + v11);
    if (!v16)
      goto LABEL_5;
  }
  else
  {
    v16 = *((unsigned __int8 *)a1 + v11);
    if (!v16)
    {
LABEL_5:
      v9 = *(_QWORD *)((v8 + (((((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFF8) + v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFF8);
      if (v9 >= 0xFFFFFFFF)
        LODWORD(v9) = -1;
      return (v9 + 1);
    }
  }
  v17 = v16 - 1;
  if (v12)
  {
    v17 = 0;
    v18 = *a1;
  }
  else
  {
    v18 = 0;
  }
  return (v18 | v17) ^ 0x80000000;
}

void storeEnumTagSinglePayload for AccessibilityRotorEntry(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > v6)
    v6 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = ((v6 + 8 + ((v7 + 56) & ~(v7 | 7))) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (a3 < 0)
  {
    v10 = a3 - 2147483646;
    if ((_DWORD)v8)
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v9 = 1;
    else
      v9 = v11;
    if ((a2 & 0x80000000) == 0)
LABEL_5:
      __asm { BR              X13 }
  }
  else
  {
    v9 = 0u;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_5;
  }
  if ((_DWORD)v8)
  {
    v12 = a2 ^ 0x80000000;
    bzero(a1, v8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_187756578(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x187756564);
  JUMPOUT(0x187756540);
}

void sub_187756584()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187756564);
}

void sub_18775658C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187756564);
}

uint64_t type metadata accessor for AccessibilityRotorEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityRotorEntry);
}

uint64_t type metadata completion function for AccessibilityRotorEntryElementSpecifier()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2[4] = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AccessibilityRotorEntryElementSpecifier(_QWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v4 = __dst;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v6)
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || v7 + 1 > 0x18)
  {
    v10 = *(_QWORD *)__src;
    *v4 = *(_QWORD *)__src;
    v4 = (_QWORD *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v11 = __src[v7];
    if (v11 >= 2)
    {
      if (v7 <= 3)
        v12 = v7;
      else
        v12 = 4;
      __asm { BR              X14 }
    }
    if (v11 == 1)
    {
      (*(void (**)(_QWORD *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
      *((_BYTE *)v4 + v7) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      *((_BYTE *)v4 + v7) = 0;
    }
  }
  return v4;
}

uint64_t destroy for AccessibilityRotorEntryElementSpecifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > v3)
    v3 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (*(unsigned __int8 *)(a1 + v3) < 2u)
    return (*(uint64_t (**)(void))(v2 + 8))();
  if (v3 <= 3)
    v4 = v3;
  else
    v4 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1877567E4 + 4 * byte_187C569E7[v4]))();
}

_BYTE *initializeWithCopy for AccessibilityRotorEntryElementSpecifier(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v6)
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = __src[v7];
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  if (v8 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    *(_QWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    __dst[v7] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    __dst[v7] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for AccessibilityRotorEntryElementSpecifier(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v7)
      v8 = *(_QWORD *)(v6 + 64);
    else
      v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (__dst[v8] >= 2u)
    {
      if (v8 <= 3)
        v9 = v8;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v10 = __src[v8];
    if (v10 >= 2)
    {
      if (v8 <= 3)
        v11 = v8;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      *(_QWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      __dst[v8] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v8] = 0;
    }
  }
  return __dst;
}

_BYTE *initializeWithTake for AccessibilityRotorEntryElementSpecifier(_BYTE *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v6)
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = __src[v7];
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X13 }
  }
  if (v8 == 1)
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    *(_QWORD *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFF8);
    __dst[v7] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    __dst[v7] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for AccessibilityRotorEntryElementSpecifier(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v7)
      v8 = *(_QWORD *)(v6 + 64);
    else
      v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (__dst[v8] >= 2u)
    {
      if (v8 <= 3)
        v9 = v8;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v10 = __src[v8];
    if (v10 >= 2)
    {
      if (v8 <= 3)
        v11 = v8;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      *(_QWORD *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFF8);
      __dst[v8] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v8] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for AccessibilityRotorEntryElementSpecifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v4 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v4 <= v3)
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v5 = v4 + 1;
  v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      v7 = *(_DWORD *)(a1 + v5);
      if (!v7)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      v7 = *(unsigned __int16 *)(a1 + v5);
      if (!*(_WORD *)(a1 + v5))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_21:
      v11 = *(unsigned __int8 *)(a1 + v4);
      if (v11 >= 3)
        return (v11 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v7 = *(unsigned __int8 *)(a1 + v5);
  if (!*(_BYTE *)(a1 + v5))
    goto LABEL_21;
LABEL_14:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 254);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187756EF4 + 4 * byte_187C56A0A[(v5 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityRotorEntryElementSpecifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > v5)
    v5 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for AccessibilityRotorEntryElementSpecifier(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v3 = ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v3 <= v2)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v3) < 2u)
    return *(unsigned __int8 *)(a1 + v3);
  if (v3 <= 3)
    v4 = v3;
  else
    v4 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187757140 + 4 * byte_187C56A18[v4]))();
}

void destructiveInjectEnumTag for AccessibilityRotorEntryElementSpecifier(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v4)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  else
    v5 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (a2 > 1)
  {
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t outlined init with take of AccessibilityRotorEntryElementSpecifier<AnyHashable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for AccessibilityRotorEntryElementSpecifier<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityRotorEntryElementSpecifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id outlined copy of AccessibilityRotorEntryRange?(id result, uint64_t a2, char a3)
{
  if (a3 != -1)
    return outlined copy of AccessibilityRotorEntryRange(result, a2, a3);
  return result;
}

uint64_t outlined init with copy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for AccessibilityRotorEntryElementSpecifier<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityRotorEntryElementSpecifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AccessibilityListRotorEntry(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AccessibilityRotorEntry.Generator(a2, a1);
  return a2;
}

void outlined consume of AccessibilityRotorEntryRange?(id a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    outlined consume of AccessibilityRotorEntryRange(a1, a2, a3);
}

uint64_t IndexWrappingVisitor.visit(entry:) in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char v5;
  uint64_t result;
  _BYTE v7[104];
  uint64_t v8;
  char v9;

  v3 = v2;
  outlined init with copy of AccessibilityListRotorEntry(a1, (uint64_t)v7);
  v8 = *v2;
  v9 = 0;
  v5 = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)(a2 + 24) + 8))(v7, *(_QWORD *)(a2 + 16));
  result = outlined destroy of AccessibilityListRotorEntry((uint64_t)v7);
  if (__OFADD__(*v3, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v3;
    return v5 & 1;
  }
  return result;
}

uint64_t visitEntries<A>(applying:from:) in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, double);
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = v3;
  v6 = a2;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for IndexWrappingVisitor in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)(0, v11, v12, v12);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (uint64_t *)((char *)&v23 - v16);
  v18 = *v6;
  v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 32);
  v19(v10, a1, a3, v15);
  *v17 = v18;
  ((void (*)(char *, char *, uint64_t))v19)((char *)v17 + *(int *)(v13 + 36), v10, a3);
  v20 = v4[3];
  v21 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v20);
  LOBYTE(v6) = (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v21 + 8))(v17, v6, v13, &protocol witness table for IndexWrappingVisitor in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)<A>, v20, v21);
  ((void (*)(uint64_t, char *, uint64_t))v19)(a1, (char *)v17 + *(int *)(v13 + 36), a3);
  return v6 & 1;
}

uint64_t protocol witness for AccessibilityRotorEntryGenerator.count.getter in conformance IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t visit(entry:) in AccumulatingVisitor #1 in closure #1 in AccessibilityRotorInfo.resolveAllEntries()(uint64_t a1)
{
  char **v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[7];
  char v14;

  outlined init with copy of AccessibilityListRotorEntry(a1, (uint64_t)v13);
  v2 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v5 = &v2[120 * v4];
  v6 = v13[0];
  v7 = v13[1];
  v8 = v13[3];
  *((_OWORD *)v5 + 4) = v13[2];
  *((_OWORD *)v5 + 5) = v8;
  *((_OWORD *)v5 + 2) = v6;
  *((_OWORD *)v5 + 3) = v7;
  v9 = v13[4];
  v10 = v13[5];
  v11 = v13[6];
  v5[144] = v14;
  *((_OWORD *)v5 + 7) = v10;
  *((_OWORD *)v5 + 8) = v11;
  *((_OWORD *)v5 + 6) = v9;
  *v1 = v2;
  return 1;
}

uint64_t protocol witness for AccessibilityRotorEntryVisitor.visit(entry:) in conformance FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t a1)
{
  uint64_t v1;

  outlined destroy of AccessibilityTableContext?(v1, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  outlined init with copy of AccessibilityListRotorEntry(a1, v1);
  return 0;
}

void visit(entry:) in MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  int v18;
  char *v19;
  int v20;
  id v21;
  unint64_t v22;
  uint64_t *v23;
  char v24;
  char v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  void *v34;
  id v35;
  BOOL v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char v40;
  char v41;
  void *v42;
  int v43;
  char v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t *v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  id v65;
  char v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t v76;
  id v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  void *v85;
  uint64_t v86;
  void *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;

  v2 = v1;
  outlined init with copy of SwiftUIAnySortComparator?(v1 + 104, (uint64_t)&v92, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  v4 = v99;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v92, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  if (v4)
  {
    v5 = v1 + 344;
    goto LABEL_7;
  }
  v90 = v1 + 104;
  v6 = *(_QWORD *)v1;
  v7 = *(_QWORD *)(v1 + 8);
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_BYTE *)(v1 + 40);
  v10 = *(_QWORD *)(v1 + 48);
  v11 = *(_BYTE *)(v1 + 56);
  v92 = v6;
  v93 = v7;
  v94 = v8;
  v95 = *(_OWORD *)(v1 + 24);
  v96 = v9;
  v97 = v10;
  v98 = v11;
  v12 = *(void **)(v1 + 64);
  outlined copy of Text.Suffix.Storage(v6, v7, v8);
  v13 = AccessibilityRotorInfo.resolveElement(with:on:scrollIfNeeded:shouldLog:)(a1, v12, 0, 0);
  outlined consume of Text.Suffix.Storage(v6, v7, v8);
  if (!v13)
    goto LABEL_6;
  swift_getObjectType();
  if (*(id *)(v1 + 72) != v13)
    goto LABEL_5;
  v91 = *(unsigned __int8 *)(a1 + 80);
  if (v91 == 255)
  {
    v42 = v13;
    v43 = *(unsigned __int8 *)(v1 + 96);

    if (v43 == 255)
      goto LABEL_53;
    goto LABEL_6;
  }
  v15 = *(id *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v16 = *(void **)(v1 + 80);
  v17 = *(_QWORD *)(v2 + 88);
  v18 = *(unsigned __int8 *)(v2 + 96);
  v83 = a1;
  v80 = v14;
  v86 = v17;
  v87 = v15;
  v84 = v18;
  v85 = *(void **)(v2 + 80);
  if (!*(_BYTE *)(v2 + 96))
  {
    outlined copy of AccessibilityRotorEntryRange?(v15, v14, v91);
    outlined copy of AccessibilityRotorEntryRange?(v16, v17, 0);
    v44 = 0;
    v76 = v17;
    v77 = v16;
    if (!v91)
      goto LABEL_50;
    goto LABEL_27;
  }
  if (v18 == 255)
  {
LABEL_5:

    goto LABEL_6;
  }
  outlined copy of AccessibilityRotorEntryRange?(v15, v14, v91);
  outlined copy of AccessibilityRotorEntryRange?(v16, v17, v18);
  v19 = PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter();
  v20 = v18;
  v81 = *((_QWORD *)v19 + 2);
  v78 = v13;
  if (!v81)
  {
    outlined copy of AccessibilityRotorEntryRange?(v16, v17, v18);
    v67 = v13;
    goto LABEL_48;
  }
  outlined copy of AccessibilityRotorEntryRange?(v16, v17, v18);
  v21 = v13;
  v22 = 0;
  v23 = (uint64_t *)(v19 + 40);
  v88 = v19;
  while (1)
  {
    v27 = *v23;
    if (v20 == 2)
    {
      outlined copy of AccessibilityRotorEntryRange?(v85, v86, 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v85);
      v25 = v24;
      v20 = v84;
      v26 = v88;
      outlined consume of AccessibilityRotorEntryRange?(v85, v86, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
        goto LABEL_20;
      goto LABEL_14;
    }
    v28 = *(v23 - 1);
    v92 = (uint64_t)v85;
    v93 = v86;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v29 = _NSRange.init<A, B>(_:in:)();
    v31 = v30;
    if (v29 != NSNotFound.getter())
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v83;
    v20 = v84;
LABEL_14:
    ++v22;
    v23 += 2;
    if (v81 == v22)
      goto LABEL_48;
  }
  v32 = __OFADD__(v29, v31);
  v33 = v29 + v31;
  if (v32)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v34 = (void *)MEMORY[0x18D75CC88](v28, v27);
  v35 = objc_msgSend(v34, sel_length);
  v26 = v88;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v36 = (uint64_t)v35 < v33;
  a1 = v83;
  v20 = v84;
  if (v36)
    goto LABEL_14;
LABEL_20:
  if (v81 == v22)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    v16 = v85;
    v17 = v86;
    outlined consume of AccessibilityRotorEntryRange?(v85, v86, v20);
    v13 = v78;

    v76 = 0;
    v77 = 0;
    v44 = 1;
    v14 = v80;
    goto LABEL_49;
  }
  if (v22 >= *((_QWORD *)v26 + 2))
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v37 = *v23;
  v13 = v78;
  if (v20 == 2)
  {
    outlined copy of AccessibilityRotorEntryRange?(v85, v86, 2);
    swift_bridgeObjectRetain();
    v38 = PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v85);
    v76 = v39;
    v77 = v38;
    v41 = v40;
    outlined consume of AccessibilityRotorEntryRange?(v85, v86, 2);
  }
  else
  {
    v71 = *(v23 - 1);
    swift_bridgeObjectRetain();
    v72 = specialized String.resolveNSRange(_:in:)((uint64_t)v85, v86, v71, v37);
    v76 = v73;
    v77 = (id)v72;
    v41 = v74;
  }
  v14 = v80;
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
    goto LABEL_65;
  swift_bridgeObjectRelease();
  v17 = v86;
  outlined consume of AccessibilityRotorEntryRange?(v85, v86, v20);

  v16 = v85;
  v44 = 0;
LABEL_49:
  v15 = v87;
  if (!v91)
  {
LABEL_50:
    outlined consume of AccessibilityRotorEntryRange?(v15, v14, 0);
    outlined consume of AccessibilityRotorEntryRange?(v16, v17, v84);

    if ((v44 & 1) == 0)
    {
LABEL_51:
      if (v77 == v15 && v76 == v14)
      {
LABEL_53:
        outlined destroy of AccessibilityTableContext?(v90, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
        outlined init with copy of AccessibilityListRotorEntry(a1, v90);
        outlined assign with copy of AccessibilityListRotorEntry?(v2 + 464, v2 + 224);
      }
    }
LABEL_6:
    v5 = v2 + 464;
LABEL_7:
    outlined destroy of AccessibilityTableContext?(v5, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
    outlined init with copy of AccessibilityListRotorEntry(a1, v5);
    return;
  }
LABEL_27:
  v75 = v44;
  v45 = PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter();
  v89 = v45;
  v82 = *((_QWORD *)v45 + 2);
  v79 = v13;
  if (!v82)
  {
    outlined copy of AccessibilityRotorEntryRange?(v15, v14, v91);
    v65 = v13;
LABEL_41:
    swift_bridgeObjectRelease();
    v60 = 0;
    v62 = 0;
    v66 = 1;
LABEL_42:
    outlined consume of AccessibilityRotorEntryRange?(v87, v14, v91);

    outlined consume of AccessibilityRotorEntryRange?(v87, v14, v91);
    outlined consume of AccessibilityRotorEntryRange?(v85, v86, v84);

    if ((v75 & 1) != 0)
    {
      if ((v66 & 1) != 0)
        goto LABEL_53;
    }
    else
    {
      v15 = (id)v60;
      v14 = v62;
      if ((v66 & 1) == 0)
        goto LABEL_51;
    }
    goto LABEL_6;
  }
  v46 = v45;
  outlined copy of AccessibilityRotorEntryRange?(v15, v14, v91);
  v13;
  v47 = 0;
  v48 = (uint64_t *)(v46 + 40);
  while (2)
  {
    v51 = *v48;
    if (v91 == 2)
    {
      outlined copy of AccessibilityRotorEntryRange?(v87, v14, 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v87);
      v50 = v49;
      outlined consume of AccessibilityRotorEntryRange?(v87, v14, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v50 & 1) == 0)
        goto LABEL_36;
      goto LABEL_30;
    }
    v52 = *(v48 - 1);
    v92 = (uint64_t)v87;
    v93 = v14;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v53 = _NSRange.init<A, B>(_:in:)();
    v55 = v54;
    if (v53 == NSNotFound.getter())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v83;
      v14 = v80;
LABEL_30:
      ++v47;
      v48 += 2;
      if (v82 == v47)
        goto LABEL_41;
      continue;
    }
    break;
  }
  v32 = __OFADD__(v53, v55);
  v56 = v53 + v55;
  if (v32)
  {
    __break(1u);
    goto LABEL_61;
  }
  v57 = (void *)MEMORY[0x18D75CC88](v52, v51);
  v58 = objc_msgSend(v57, sel_length);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v36 = (uint64_t)v58 < v56;
  a1 = v83;
  v14 = v80;
  if (v36)
    goto LABEL_30;
LABEL_36:
  if (v82 == v47)
    goto LABEL_41;
  if (v47 >= *((_QWORD *)v89 + 2))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v59 = *v48;
  if (v91 == 2)
  {
    outlined copy of AccessibilityRotorEntryRange?(v87, v14, 2);
    swift_bridgeObjectRetain();
    v60 = (uint64_t)PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v87);
    v62 = v61;
    v64 = v63;
    outlined consume of AccessibilityRotorEntryRange?(v87, v14, 2);
  }
  else
  {
    v68 = *(v48 - 1);
    swift_bridgeObjectRetain();
    v60 = specialized String.resolveNSRange(_:in:)((uint64_t)v87, v14, v68, v59);
    v62 = v69;
    v64 = v70;
  }
  swift_bridgeObjectRelease();
  if ((v64 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v66 = 0;
    goto LABEL_42;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
}

uint64_t outlined destroy of AccessibilityScrollableContext??(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for WeakAttribute<AccessibilityRotorEntryList>?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext??, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for WeakAttribute<AccessibilityRotorEntryList>?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, a5);
    v6 = type metadata accessor for Optional();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t outlined init with copy of ScrollableCollection?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ScrollableCollection?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int16 v30;
  char v31;
  _OWORD v32[2];
  _OWORD v33[4];
  int v34;
  __int16 v35;
  unsigned __int8 v36;
  uint64_t v37;

  if (a1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    if (v23)
      goto LABEL_3;
  }
  else
  {
    v23 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v23)
    {
LABEL_3:
      v4 = 4;
      v21 = MEMORY[0x1E0DEE9B8] + 8;
      do
      {
        v5 = v4 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v6 = (id)MEMORY[0x18D75E3BC](v4 - 4, a1);
          v7 = v4 - 3;
          if (__OFADD__(v5, 1))
            goto LABEL_28;
        }
        else
        {
          v6 = *(id *)(a1 + 8 * v4);
          v7 = v4 - 3;
          if (__OFADD__(v5, 1))
          {
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
        }
        v37 = v7;
        v8 = v6;
        AccessibilityNode.attachment.getter((uint64_t *)&v25);
        v9 = v25;

        if (*(_QWORD *)(v9 + 16)
          && (v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
              (v11 & 1) != 0))
        {
          outlined init with copy of TableColumnList(*(_QWORD *)(v9 + 56) + 40 * v10, (uint64_t)&v25);
          v13 = *((_QWORD *)&v26 + 1);
          v12 = v27;
          __swift_project_boxed_opaque_existential_1(&v25, *((uint64_t *)&v26 + 1));
          v14 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v12 + 8);
          swift_bridgeObjectRetain();
          v14(v32, v13, v12);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
        }
        else
        {
          memset(v32, 0, sizeof(v32));
          swift_bridgeObjectRetain();
        }
        v15 = MEMORY[0x1E0DEB940];
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v21, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t))v15);
        if (swift_dynamicCast())
        {
          outlined init with take of Image.Resolved?((uint64_t)&v25, (uint64_t)v33, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
        }
        else
        {
          v27 = 0u;
          v28 = 0u;
          v25 = 0u;
          v26 = 0u;
          v30 = 0;
          v29 = 0;
          v31 = -2;
          memset(v33, 0, sizeof(v33));
          v35 = 0;
          v34 = 0;
          v36 = -1;
          outlined destroy of AccessibilityScrollableContext??((uint64_t)&v25);
        }
        swift_bridgeObjectRelease_n();
        if (v36 == 255)
        {
          outlined destroy of AccessibilityTableContext?((uint64_t)v33, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
          swift_retain();
          outlined consume of Text.LineStyle?(0, 1);
          outlined consume of Text.LineStyle?(a2, a3);
          goto LABEL_5;
        }
        outlined init with copy of AccessibilityScrollableContext((uint64_t)v33, (uint64_t)&v25);
        if (v31)
        {
          if (v31 == 1)
          {
            v16 = v25;
            v17 = DWORD1(v25);
            v18 = *((_QWORD *)&v25 + 1);
            goto LABEL_25;
          }
          v16 = DWORD2(v27);
          v17 = HIDWORD(v27);
          v18 = v28;
        }
        else
        {
          v16 = v28;
          v17 = DWORD1(v28);
          v18 = *((_QWORD *)&v28 + 1);
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
LABEL_25:
        outlined destroy of AccessibilityScrollableContext((uint64_t)v33);
        *(_QWORD *)&v33[0] = v16 | (v17 << 32);
        *((_QWORD *)&v33[0] + 1) = v18;
        *(_QWORD *)&v25 = a2;
        *((_QWORD *)&v25 + 1) = a3;
        swift_retain();
        v19 = MEMORY[0x18D756E68](v33, &v25);
        swift_release();
        swift_release();
        if ((v19 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v8;
        }
LABEL_5:

        ++v4;
      }
      while (v37 != v23);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

char *specialized AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:)(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  char *result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  char *v47;
  uint64_t v48;
  int64_t v49;
  _QWORD *v50;
  void **v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v70)(void);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  void *v83;
  _BYTE *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  _BYTE *v96;
  _QWORD *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int v102;
  __int16 v103;
  char v104;
  _OWORD v105[2];
  _OWORD v106[4];
  int v107;
  __int16 v108;
  unsigned __int8 v109;
  __int128 v110;
  uint64_t v111;

  AccessibilityNode.rotorChildNodes.getter();
  v7 = v6;
  v8 = a2[3];
  v9 = a2[4];
  v97 = a2;
  __swift_project_boxed_opaque_existential_1(a2, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v12 = (uint64_t *)(v10 + 40);
  v13 = (uint64_t *)(v10 + 40);
  while (1)
  {
    v15 = *v13;
    v13 += 2;
    v14 = v15;
    if (!v15)
      goto LABEL_4;
    v16 = *((unsigned int *)v12 - 2);
    v17 = *((unsigned int *)v12 - 1);
    *(_QWORD *)&v98 = v14;
    swift_retain_n();
    AnyHashable2.anyHashable.getter();
    v18 = MEMORY[0x18D75E284](v106, a1);
    swift_release();
    outlined destroy of AnyHashable((uint64_t)v106);
    if ((v18 & 1) != 0)
      break;
    swift_release();
LABEL_4:
    v12 = v13;
    if (!--v11)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_retain();
  v19 = specialized Sequence.first(where:)(v7, v16 | (v17 << 32), v14);
  swift_release();
  if (v19)
  {
    swift_bridgeObjectRelease();
    AccessibilityNode.platformElement.getter();
    v21 = v20;
    swift_release();
    if (v21)
    {

      return (char *)v21;
    }
    return v19;
  }
  swift_release();
LABEL_12:
  v111 = 0;
  v110 = xmmword_187BF9840;
  v22 = v97[4];
  v23 = __swift_project_boxed_opaque_existential_1(v97, v97[3]);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  (*(void (**)(uint64_t *, uint64_t *(*)(uint64_t *, _BYTE *), double))(v22 + 56))(&v111, partial apply for closure #2 in AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:), v25);
  v26 = *((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1) == 1)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v27 = v110;
  swift_retain();
  v19 = specialized Sequence.first(where:)(v7, v27, v26);
  swift_bridgeObjectRelease();
  if (v19)
  {
    if ((a4 & 1) != 0)
      AccessibilityNode.scrollToVisible()();
    AccessibilityNode.platformElement.getter();
    if (v28)
    {
      v29 = v28;

      v19 = v29;
    }
    outlined consume of Text.LineStyle?(v27, v26);
    v30 = v27;
    v31 = v26;
    goto LABEL_21;
  }
  if ((a4 & 1) == 0)
  {
LABEL_81:
    outlined consume of Text.LineStyle?(v27, v26);
    outlined consume of Text.LineStyle?(v110, *((uint64_t *)&v110 + 1));
    return 0;
  }
  v89 = HIDWORD(v27);
  v33 = a3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost;
  v91 = MEMORY[0x1E0DEE9B8] + 8;
  v34 = 1;
  v85 = v27;
  v86 = v26;
  v88 = a3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost;
  while (2)
  {
    v35 = v34;
    v36 = v97[3];
    v37 = v97[4];
    __swift_project_boxed_opaque_existential_1(v97, v36);
    *(_QWORD *)&v106[0] = __PAIR64__(v89, v27);
    *((_QWORD *)&v106[0] + 1) = v26;
    static UnitPoint.center.getter();
    if (((*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 72))(v106, v38, v39, 0, v36, v37) & 1) == 0)goto LABEL_27;
    if (MEMORY[0x18D760234](v33))
    {
      swift_getObjectType();
      *(_QWORD *)&v106[0] = 0;
      BYTE8(v106[0]) = 1;
      ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
      swift_unknownObjectRelease();
    }
    AccessibilityNode.rotorChildNodes.getter();
    v90 = v40;
    if (!(v40 >> 62))
    {
      v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v41)
        goto LABEL_33;
LABEL_26:
      swift_bridgeObjectRelease_n();
LABEL_27:
      v34 = 0;
      if ((v35 & 1) == 0)
        goto LABEL_81;
      continue;
    }
    break;
  }
  swift_bridgeObjectRetain_n();
  v41 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v41)
    goto LABEL_26;
LABEL_33:
  v42 = 0;
  v92 = v41;
  while (2)
  {
    if ((v90 & 0xC000000000000001) != 0)
    {
      result = (char *)MEMORY[0x18D75E3BC](v42, v90);
      v43 = __OFADD__(v42, 1);
      v44 = v42 + 1;
      if (v43)
        goto LABEL_87;
    }
    else
    {
      result = (char *)*(id *)(v90 + 32 + 8 * v42);
      v43 = __OFADD__(v42, 1);
      v44 = v42 + 1;
      if (v43)
      {
LABEL_87:
        __break(1u);
        return result;
      }
    }
    v94 = v44;
    v96 = result;
    v45 = *(_QWORD *)&result[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
    if (v45)
    {
      v46 = *(id *)&result[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
      swift_bridgeObjectRetain();
      goto LABEL_56;
    }
    v87 = (uint64_t *)&result[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
    v26 = v35;
    v47 = &result[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    v48 = *(_QWORD *)v47;
    v49 = *(_QWORD *)(*(_QWORD *)v47 + 16);
    if (v49)
    {
      *(_QWORD *)&v98 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49, 0);
      v50 = (_QWORD *)v98;
      v51 = (void **)(v48 + 40);
      do
      {
        v52 = (uint64_t)*(v51 - 1);
        v53 = *v51;
        *(_QWORD *)&v98 = v50;
        v55 = v50[2];
        v54 = v50[3];
        swift_bridgeObjectRetain();
        v56 = v53;
        if (v55 >= v54 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1);
          v50 = (_QWORD *)v98;
        }
        v50[2] = v55 + 1;
        v57 = &v50[2 * v55];
        v57[4] = v52;
        v57[5] = v53;
        v51 += 5;
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease();
      v27 = v85;
    }
    else
    {
      v50 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v58 = v50[2];
    v59 = v58 - 1;
    v35 = v26;
    if (v58 == 1)
    {
      v60 = (void *)v50[5];
      *(_QWORD *)&v98 = v50[4];
      *((_QWORD *)&v98 + 1) = v60;
      v61 = v60;
      swift_bridgeObjectRetain();
LABEL_54:
      swift_bridgeObjectRelease();
LABEL_55:
      v33 = v88;
      v62 = (void *)*((_QWORD *)&v98 + 1);
      v45 = v98;
      v63 = *v87;
      v64 = (void *)v87[1];
      *v87 = v98;
      v87[1] = (uint64_t)v62;
      v46 = v62;
      swift_bridgeObjectRetain();
      outlined consume of AccessibilityAttachment?(v63, v64);
      v96[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
      v26 = v86;
LABEL_56:

      if (*(_QWORD *)(v45 + 16)
        && (v65 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
            (v66 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v45 + 56) + 40 * v65, (uint64_t)&v98);
        v67 = *((_QWORD *)&v99 + 1);
        v68 = v100;
        __swift_project_boxed_opaque_existential_1(&v98, *((uint64_t *)&v99 + 1));
        v69 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v68 + 8);
        swift_bridgeObjectRetain();
        v69(v105, v67, v68);
        v33 = v88;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
      }
      else
      {
        memset(v105, 0, sizeof(v105));
        swift_bridgeObjectRetain();
      }
      v70 = MEMORY[0x1E0DEB940];
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v91, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t))v70);
      if (swift_dynamicCast())
      {
        outlined init with take of Image.Resolved?((uint64_t)&v98, (uint64_t)v106, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
      }
      else
      {
        v100 = 0u;
        v101 = 0u;
        v98 = 0u;
        v99 = 0u;
        v103 = 0;
        v102 = 0;
        v104 = -2;
        memset(v106, 0, sizeof(v106));
        v108 = 0;
        v107 = 0;
        v109 = -1;
        outlined destroy of AccessibilityScrollableContext??((uint64_t)&v98);
      }
      swift_bridgeObjectRelease_n();
      if (v109 == 255)
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)v106, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
        outlined copy of _ViewList_ID.Canonical?(v27, v26);
        outlined consume of Text.LineStyle?(0, 1);
        outlined consume of Text.LineStyle?(v27, v26);
LABEL_35:

        v42 = v94;
        if (v94 == v92)
          goto LABEL_26;
        continue;
      }
      outlined init with copy of AccessibilityScrollableContext((uint64_t)v106, (uint64_t)&v98);
      if (v104)
      {
        if (v104 == 1)
        {
          v71 = v98;
          v72 = DWORD1(v98);
          v73 = *((_QWORD *)&v98 + 1);
          goto LABEL_70;
        }
        v71 = DWORD2(v100);
        v72 = HIDWORD(v100);
        v73 = v101;
      }
      else
      {
        v71 = v101;
        v72 = DWORD1(v101);
        v73 = *((_QWORD *)&v101 + 1);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
LABEL_70:
      outlined destroy of AccessibilityScrollableContext((uint64_t)v106);
      *(_QWORD *)&v106[0] = v71 | (v72 << 32);
      *((_QWORD *)&v106[0] + 1) = v73;
      *(_QWORD *)&v98 = __PAIR64__(v89, v27);
      *((_QWORD *)&v98 + 1) = v26;
      outlined copy of _ViewList_ID.Canonical?(v27, v26);
      swift_retain();
      v74 = MEMORY[0x18D756E68](v106, &v98);
      swift_release();
      outlined consume of Text.LineStyle?(v27, v26);
      swift_release();
      if ((v74 & 1) != 0)
        goto LABEL_83;
      goto LABEL_35;
    }
    break;
  }
  if (!v58)
  {
    AccessibilityAttachment.init()();
    goto LABEL_54;
  }
  v75 = &v50[2 * v59];
  v77 = v75[4];
  v76 = (void *)v75[5];
  *(_QWORD *)&v105[0] = v77;
  *((_QWORD *)&v105[0] + 1) = v76;
  v78 = v76;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = (unint64_t)&v50[2 * v58 + 1];
  v79 = v58 - 2;
  while (v79 < v59)
  {
    v80 = *(_QWORD *)(v27 - 8);
    v81 = *(void **)v27;
    *(_QWORD *)&v98 = v80;
    v82 = v81;
    swift_bridgeObjectRetain();
    AccessibilityProperties.merge(with:)((uint64_t *)&v98);
    v98 = v105[0];
    v83 = (void *)AccessibilityAttachment.platformElement.getter();

    if (!v83)
    {
      *(_QWORD *)&v98 = v80;
      *((_QWORD *)&v98 + 1) = v81;
      if (AccessibilityAttachment.platformElement.getter())
        AccessibilityAttachment.platformElement.setter();
    }

    swift_bridgeObjectRelease();
    v27 -= 16;
    if (--v79 == -1)
    {
      v35 = v26;
      swift_bridgeObjectRelease_n();
      v98 = v105[0];
      v27 = v85;
      goto LABEL_55;
    }
  }
  __break(1u);
LABEL_83:
  swift_bridgeObjectRelease_n();
  AccessibilityNode.platformElement.getter();
  if (v84)
  {
    v19 = v84;
    outlined consume of Text.LineStyle?(v27, v26);

  }
  else
  {
    v19 = v96;
    outlined consume of Text.LineStyle?(v27, v26);

  }
  v31 = *((_QWORD *)&v110 + 1);
  v30 = v110;
LABEL_21:
  outlined consume of Text.LineStyle?(v30, v31);
  return v19;
}

uint64_t *partial apply for closure #2 in AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:)(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;

  return closure #2 in AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:)(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24));
}

uint64_t partial apply for closure #1 in AccessibilityRotorInfo.entry(at:)()
{
  uint64_t *v0;

  return closure #1 in AccessibilityRotorInfo.entry(at:)(v0[2], v0[3], v0[4]);
}

uint64_t *outlined retain of AccessibilityRotorInfo(uint64_t *a1)
{
  outlined copy of Text.Suffix.Storage(*a1, a1[1], a1[2]);
  return a1;
}

uint64_t *outlined release of AccessibilityRotorInfo(uint64_t *a1)
{
  outlined consume of Text.Suffix.Storage(*a1, a1[1], a1[2]);
  return a1;
}

uint64_t partial apply for closure #1 in AccessibilityRotorInfo.resolveAllEntries()(_QWORD *a1)
{
  return closure #1 in AccessibilityRotorInfo.resolveAllEntries()(a1);
}

uint64_t partial apply for closure #1 in AccessibilityRotorInfo.readEntryList(_:)()
{
  uint64_t v0;

  return closure #1 in AccessibilityRotorInfo.readEntryList(_:)(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *))(v0 + 24));
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, __int128 *a2, char *a3)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[5];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (char *)MEMORY[0x1E0DEE9D8];
  v6 = a1 + 32;
  swift_bridgeObjectRetain();
  v7 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v8 = a2[1];
    v19 = *a2;
    v20 = v8;
    *(_OWORD *)v21 = a2[2];
    *(_OWORD *)&v21[9] = *(__int128 *)((char *)a2 + 41);
    AccessibilityListRotorEntry.resolveForNavigationOrClosestEntry(for:on:prepare:)((uint64_t *)&v19, a3, 0, (uint64_t)v27);
    if (*((_QWORD *)&v28 + 1))
    {
      v24 = v29;
      v25 = v30;
      v26 = v31;
      *(_OWORD *)v21 = v27[2];
      *(_OWORD *)&v21[16] = v27[3];
      v22 = v27[4];
      v23 = v28;
      v19 = v27[0];
      v20 = v27[1];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      v10 = *((_QWORD *)v7 + 2);
      v9 = *((_QWORD *)v7 + 3);
      if (v10 >= v9 >> 1)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = v10 + 1;
      v11 = &v7[136 * v10];
      *((_OWORD *)v11 + 2) = v19;
      v12 = v20;
      v13 = *(_OWORD *)v21;
      v14 = v22;
      *((_OWORD *)v11 + 5) = *(_OWORD *)&v21[16];
      *((_OWORD *)v11 + 6) = v14;
      *((_OWORD *)v11 + 3) = v12;
      *((_OWORD *)v11 + 4) = v13;
      v15 = v23;
      v16 = v24;
      v17 = v25;
      *((_QWORD *)v11 + 20) = v26;
      *((_OWORD *)v11 + 8) = v16;
      *((_OWORD *)v11 + 9) = v17;
      *((_OWORD *)v11 + 7) = v15;
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v27, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
    }
    v6 += 120;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t outlined init with copy of AccessibilityNavigationRotorEntry(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AccessibilityNavigationRotorEntry(a2, a1);
  return a2;
}

uint64_t outlined destroy of AccessibilityNavigationRotorEntry(uint64_t a1)
{
  destroy for AccessibilityNavigationRotorEntry(a1);
  return a1;
}

uint64_t outlined assign with take of AccessibilityNavigationRotorEntry?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AccessibilityListRotorEntry(uint64_t a1)
{
  destroy for AccessibilityRotorEntry.Generator(a1);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEB8A8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A>);
  }
  return result;
}

uint64_t outlined init with take of WeakAttribute<AccessibilityRotorEntryList>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakAttribute<AccessibilityRotorEntryList>?(0, &lazy cache variable for type metadata for WeakAttribute<AccessibilityRotorEntryList>?, &lazy cache variable for type metadata for WeakAttribute<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC40]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187759140()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *(_QWORD *)(v1 + 16);
  v6 = 0;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t *, void *, _UNKNOWN **, uint64_t, uint64_t))(v4 + 8))(v2, &v6, &unk_1E1ADA900, &protocol witness table for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:), v3, v4);
}

uint64_t outlined destroy of MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1)
{
  destroy for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(a1);
  return a1;
}

uint64_t destroy for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t result)
{
  uint64_t v1;
  int v2;

  if (*(_QWORD *)(result + 88))
  {
    v1 = result;
    if (*(unsigned __int8 *)(result + 48) <= 1u)
      __swift_destroy_boxed_opaque_existential_1(result);

    v2 = *(unsigned __int8 *)(v1 + 80);
    if (v2 != 255)
      outlined consume of AccessibilityRotorEntryRange(*(id *)(v1 + 64), *(_QWORD *)(v1 + 72), v2);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  __int128 v10;
  void *v11;
  int v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  if (!*(_QWORD *)(a2 + 88))
  {
    v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    return a1;
  }
  if (*(_BYTE *)(a2 + 48) == 1)
  {
    v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v9 = 1;
LABEL_8:
    *(_BYTE *)(a1 + 48) = v9;
    goto LABEL_9;
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v9 = *(_BYTE *)(a2 + 48);
    goto LABEL_8;
  }
  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  *(_BYTE *)(a1 + 48) = 0;
LABEL_9:
  v11 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  v12 = *(unsigned __int8 *)(a2 + 80);
  v13 = v11;
  if (v12 == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  }
  else
  {
    v14 = *(void **)(a2 + 64);
    v15 = *(_QWORD *)(a2 + 72);
    outlined copy of AccessibilityRotorEntryRange(v14, v15, v12);
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v15;
    *(_BYTE *)(a1 + 80) = v12;
  }
  v16 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  void *v24;
  id v25;
  __int128 *v26;
  __int128 *v27;
  int v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char v33;
  void *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  int v42;
  id v43;
  void *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v4 = *((_QWORD *)a2 + 11);
  if (*(_QWORD *)(a1 + 88))
  {
    if (v4)
    {
      if ((__int128 *)a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1);
        if (*((_BYTE *)a2 + 48) == 1)
        {
          v19 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(a1 + 24) = v19;
          *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v19 - 8))(a1, a2);
          *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
          *(_BYTE *)(a1 + 48) = 1;
        }
        else if (*((_BYTE *)a2 + 48))
        {
          v20 = *a2;
          v21 = a2[1];
          v22 = a2[2];
          *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
          *(_OWORD *)(a1 + 16) = v21;
          *(_OWORD *)(a1 + 32) = v22;
          *(_OWORD *)a1 = v20;
        }
        else
        {
          v5 = *((_QWORD *)a2 + 3);
          *(_QWORD *)(a1 + 24) = v5;
          *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v5 - 8))(a1, a2);
          *(_BYTE *)(a1 + 48) = 0;
        }
      }
      v23 = *(void **)(a1 + 56);
      v24 = (void *)*((_QWORD *)a2 + 7);
      *(_QWORD *)(a1 + 56) = v24;
      v25 = v24;

      v26 = (__int128 *)(a1 + 64);
      v27 = a2 + 4;
      v28 = *((unsigned __int8 *)a2 + 80);
      if (*(unsigned __int8 *)(a1 + 80) == 255)
      {
        if (v28 == 255)
        {
          v49 = *v27;
          *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
          *v26 = v49;
        }
        else
        {
          v34 = (void *)*((_QWORD *)a2 + 8);
          v35 = *((_QWORD *)a2 + 9);
          outlined copy of AccessibilityRotorEntryRange(v34, v35, *((_BYTE *)a2 + 80));
          *(_QWORD *)(a1 + 64) = v34;
          *(_QWORD *)(a1 + 72) = v35;
          *(_BYTE *)(a1 + 80) = v28;
        }
      }
      else if (v28 == 255)
      {
        outlined destroy of AccessibilityRotorEntryRange(a1 + 64);
        v36 = *((_BYTE *)a2 + 80);
        *v26 = *v27;
        *(_BYTE *)(a1 + 80) = v36;
      }
      else
      {
        v29 = (void *)*((_QWORD *)a2 + 8);
        v30 = *((_QWORD *)a2 + 9);
        outlined copy of AccessibilityRotorEntryRange(v29, v30, *((_BYTE *)a2 + 80));
        v31 = *(void **)(a1 + 64);
        v32 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 64) = v29;
        *(_QWORD *)(a1 + 72) = v30;
        v33 = *(_BYTE *)(a1 + 80);
        *(_BYTE *)(a1 + 80) = v28;
        outlined consume of AccessibilityRotorEntryRange(v31, v32, v33);
      }
      v50 = *((_QWORD *)a2 + 12);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
      *(_QWORD *)(a1 + 96) = v50;
      swift_retain();
      swift_release();
      v51 = *((_QWORD *)a2 + 13);
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      *(_QWORD *)(a1 + 104) = v51;
    }
    else
    {
      outlined destroy of AccessibilityListRotorEntry(a1);
      v7 = a2[3];
      v9 = *a2;
      v8 = a2[1];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v8;
      v11 = a2[5];
      v10 = a2[6];
      v12 = a2[4];
      *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 96) = v10;
      *(_OWORD *)(a1 + 64) = v12;
    }
  }
  else if (v4)
  {
    if (*((_BYTE *)a2 + 48) == 1)
    {
      v37 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v37;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v37 - 8))(a1, a2);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_BYTE *)(a1 + 48) = 1;
    }
    else if (*((_BYTE *)a2 + 48))
    {
      v38 = *a2;
      v39 = a2[1];
      v40 = a2[2];
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)(a1 + 16) = v39;
      *(_OWORD *)(a1 + 32) = v40;
      *(_OWORD *)a1 = v38;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 48) = 0;
    }
    v41 = (void *)*((_QWORD *)a2 + 7);
    *(_QWORD *)(a1 + 56) = v41;
    v42 = *((unsigned __int8 *)a2 + 80);
    v43 = v41;
    if (v42 == 255)
    {
      v46 = a2[4];
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *(_OWORD *)(a1 + 64) = v46;
    }
    else
    {
      v44 = (void *)*((_QWORD *)a2 + 8);
      v45 = *((_QWORD *)a2 + 9);
      outlined copy of AccessibilityRotorEntryRange(v44, v45, v42);
      *(_QWORD *)(a1 + 64) = v44;
      *(_QWORD *)(a1 + 72) = v45;
      *(_BYTE *)(a1 + 80) = v42;
    }
    v47 = *((_QWORD *)a2 + 12);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_QWORD *)(a1 + 96) = v47;
    v48 = *((_QWORD *)a2 + 13);
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    *(_QWORD *)(a1 + 104) = v48;
    swift_retain();
  }
  else
  {
    v13 = *a2;
    v14 = a2[1];
    v15 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)a1 = v13;
    *(_OWORD *)(a1 + 16) = v14;
    v16 = a2[4];
    v17 = a2[5];
    v18 = a2[6];
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    *(_OWORD *)(a1 + 80) = v17;
    *(_OWORD *)(a1 + 96) = v18;
    *(_OWORD *)(a1 + 64) = v16;
  }
  return a1;
}

uint64_t assignWithTake for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  _OWORD *v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  if (*(_QWORD *)(a1 + 88))
  {
    if (*(_QWORD *)(a2 + 88))
    {
      if (a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1);
        v4 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v4;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      }
      v5 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

      v6 = (_OWORD *)(a2 + 64);
      v7 = *(unsigned __int8 *)(a1 + 80);
      if (v7 != 255)
      {
        v8 = *(unsigned __int8 *)(a2 + 80);
        if (v8 != 255)
        {
          v9 = *(void **)(a1 + 64);
          v10 = *(_QWORD *)(a1 + 72);
          *(_OWORD *)(a1 + 64) = *v6;
          *(_BYTE *)(a1 + 80) = v8;
          outlined consume of AccessibilityRotorEntryRange(v9, v10, v7);
LABEL_12:
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
          swift_release();
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
          *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
          return a1;
        }
        outlined destroy of AccessibilityRotorEntryRange(a1 + 64);
      }
      *(_OWORD *)(a1 + 64) = *v6;
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      goto LABEL_12;
    }
    outlined destroy of AccessibilityListRotorEntry(a1);
  }
  v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 113) = 0;
    if (a2)
      *(_QWORD *)(result + 88) = a2;
  }
  return result;
}

void *type metadata accessor for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)()
{
  return &unk_1E1ADAAE0;
}

void destroy for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  outlined consume of Text.Suffix.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));

  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 != 255)
    outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 80), *(_QWORD *)(a1 + 88), v2);
  if (*(_QWORD *)(a1 + 192))
  {
    if (*(unsigned __int8 *)(a1 + 152) <= 1u)
      __swift_destroy_boxed_opaque_existential_1(a1 + 104);

    v3 = *(unsigned __int8 *)(a1 + 184);
    if (v3 != 255)
      outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 168), *(_QWORD *)(a1 + 176), v3);
    swift_release();
  }
  if (*(_QWORD *)(a1 + 312))
  {
    if (*(unsigned __int8 *)(a1 + 272) <= 1u)
      __swift_destroy_boxed_opaque_existential_1(a1 + 224);

    v4 = *(unsigned __int8 *)(a1 + 304);
    if (v4 != 255)
      outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 288), *(_QWORD *)(a1 + 296), v4);
    swift_release();
  }
  if (*(_QWORD *)(a1 + 432))
  {
    if (*(unsigned __int8 *)(a1 + 392) <= 1u)
      __swift_destroy_boxed_opaque_existential_1(a1 + 344);

    v5 = *(unsigned __int8 *)(a1 + 424);
    if (v5 != 255)
      outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 408), *(_QWORD *)(a1 + 416), v5);
    swift_release();
  }
  if (*(_QWORD *)(a1 + 552))
  {
    if (*(unsigned __int8 *)(a1 + 512) <= 1u)
      __swift_destroy_boxed_opaque_existential_1(a1 + 464);

    v6 = *(unsigned __int8 *)(a1 + 544);
    if (v6 != 255)
      outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 528), *(_QWORD *)(a1 + 536), v6);
    swift_release();
  }
}

uint64_t initializeWithCopy for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  int v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  int v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  int v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  void *v67;
  int v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  outlined copy of Text.Suffix.Storage(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(void **)(a2 + 64);
  v9 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *(unsigned __int8 *)(a2 + 96);
  v11 = v8;
  v12 = v9;
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  }
  else
  {
    v13 = *(void **)(a2 + 80);
    v14 = *(_QWORD *)(a2 + 88);
    outlined copy of AccessibilityRotorEntryRange(v13, v14, v10);
    *(_QWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 88) = v14;
    *(_BYTE *)(a1 + 96) = v10;
  }
  v15 = (_OWORD *)(a1 + 104);
  v16 = (_OWORD *)(a2 + 104);
  if (*(_QWORD *)(a2 + 192))
  {
    if (*(_BYTE *)(a2 + 152) == 1)
    {
      v21 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 128) = v21;
      (**(void (***)(_OWORD *, _OWORD *))(v21 - 8))(v15, v16);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = 1;
    }
    else if (*(_BYTE *)(a2 + 152))
    {
      v22 = *(_OWORD *)(a2 + 120);
      *v15 = *v16;
      *(_OWORD *)(a1 + 120) = v22;
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    }
    else
    {
      v17 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 128) = v17;
      (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
      *(_BYTE *)(a1 + 152) = 0;
    }
    v23 = *(void **)(a2 + 160);
    *(_QWORD *)(a1 + 160) = v23;
    v24 = *(unsigned __int8 *)(a2 + 184);
    v25 = v23;
    if (v24 == 255)
    {
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    }
    else
    {
      v26 = *(void **)(a2 + 168);
      v27 = *(_QWORD *)(a2 + 176);
      outlined copy of AccessibilityRotorEntryRange(v26, v27, v24);
      *(_QWORD *)(a1 + 168) = v26;
      *(_QWORD *)(a1 + 176) = v27;
      *(_BYTE *)(a1 + 184) = v24;
    }
    v28 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = v28;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    swift_retain();
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v18;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    v19 = *(_OWORD *)(a2 + 120);
    *v15 = *v16;
    *(_OWORD *)(a1 + 120) = v19;
    v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
  }
  v29 = (_OWORD *)(a1 + 224);
  v30 = (_OWORD *)(a2 + 224);
  if (*(_QWORD *)(a2 + 312))
  {
    if (*(_BYTE *)(a2 + 272) == 1)
    {
      v35 = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 248) = v35;
      (**(void (***)(_OWORD *, _OWORD *))(v35 - 8))(v29, v30);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_BYTE *)(a1 + 272) = 1;
    }
    else if (*(_BYTE *)(a2 + 272))
    {
      v36 = *(_OWORD *)(a2 + 240);
      *v29 = *v30;
      *(_OWORD *)(a1 + 240) = v36;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
    }
    else
    {
      v31 = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 248) = v31;
      (**(void (***)(_OWORD *, _OWORD *))(v31 - 8))(v29, v30);
      *(_BYTE *)(a1 + 272) = 0;
    }
    v37 = *(void **)(a2 + 280);
    *(_QWORD *)(a1 + 280) = v37;
    v38 = *(unsigned __int8 *)(a2 + 304);
    v39 = v37;
    if (v38 == 255)
    {
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
      *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
    }
    else
    {
      v40 = *(void **)(a2 + 288);
      v41 = *(_QWORD *)(a2 + 296);
      outlined copy of AccessibilityRotorEntryRange(v40, v41, v38);
      *(_QWORD *)(a1 + 288) = v40;
      *(_QWORD *)(a1 + 296) = v41;
      *(_BYTE *)(a1 + 304) = v38;
    }
    v42 = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 320) = v42;
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
    swift_retain();
  }
  else
  {
    v32 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v32;
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
    v33 = *(_OWORD *)(a2 + 240);
    *v29 = *v30;
    *(_OWORD *)(a1 + 240) = v33;
    v34 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v34;
  }
  v43 = (_OWORD *)(a1 + 344);
  v44 = (_OWORD *)(a2 + 344);
  if (*(_QWORD *)(a2 + 432))
  {
    if (*(_BYTE *)(a2 + 392) == 1)
    {
      v49 = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 368) = v49;
      (**(void (***)(_OWORD *, _OWORD *))(v49 - 8))(v43, v44);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_BYTE *)(a1 + 392) = 1;
    }
    else if (*(_BYTE *)(a2 + 392))
    {
      v50 = *(_OWORD *)(a2 + 360);
      *v43 = *v44;
      *(_OWORD *)(a1 + 360) = v50;
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
      *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
    }
    else
    {
      v45 = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 368) = v45;
      (**(void (***)(_OWORD *, _OWORD *))(v45 - 8))(v43, v44);
      *(_BYTE *)(a1 + 392) = 0;
    }
    v51 = *(void **)(a2 + 400);
    *(_QWORD *)(a1 + 400) = v51;
    v52 = *(unsigned __int8 *)(a2 + 424);
    v53 = v51;
    if (v52 == 255)
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
      *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
    }
    else
    {
      v54 = *(void **)(a2 + 408);
      v55 = *(_QWORD *)(a2 + 416);
      outlined copy of AccessibilityRotorEntryRange(v54, v55, v52);
      *(_QWORD *)(a1 + 408) = v54;
      *(_QWORD *)(a1 + 416) = v55;
      *(_BYTE *)(a1 + 424) = v52;
    }
    v56 = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 440) = v56;
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    swift_retain();
  }
  else
  {
    v46 = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = v46;
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    v47 = *(_OWORD *)(a2 + 360);
    *v43 = *v44;
    *(_OWORD *)(a1 + 360) = v47;
    v48 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v48;
  }
  v57 = (_OWORD *)(a1 + 464);
  v58 = (_OWORD *)(a2 + 464);
  if (*(_QWORD *)(a2 + 552))
  {
    if (*(_BYTE *)(a2 + 512) == 1)
    {
      v64 = *(_QWORD *)(a2 + 488);
      v65 = *(_QWORD *)(a2 + 496);
      *(_QWORD *)(a1 + 488) = v64;
      *(_QWORD *)(a1 + 496) = v65;
      (**(void (***)(_OWORD *, _OWORD *))(v64 - 8))(v57, v58);
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      *(_BYTE *)(a1 + 512) = 1;
    }
    else if (*(_BYTE *)(a2 + 512))
    {
      v66 = *(_OWORD *)(a2 + 480);
      *v57 = *v58;
      *(_OWORD *)(a1 + 480) = v66;
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
      *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
    }
    else
    {
      v59 = *(_QWORD *)(a2 + 488);
      v60 = *(_QWORD *)(a2 + 496);
      *(_QWORD *)(a1 + 488) = v59;
      *(_QWORD *)(a1 + 496) = v60;
      (**(void (***)(_OWORD *, _OWORD *))(v59 - 8))(v57, v58);
      *(_BYTE *)(a1 + 512) = 0;
    }
    v67 = *(void **)(a2 + 520);
    *(_QWORD *)(a1 + 520) = v67;
    v68 = *(unsigned __int8 *)(a2 + 544);
    v69 = v67;
    if (v68 == 255)
    {
      *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
      *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
    }
    else
    {
      v70 = *(void **)(a2 + 528);
      v71 = *(_QWORD *)(a2 + 536);
      outlined copy of AccessibilityRotorEntryRange(v70, v71, v68);
      *(_QWORD *)(a1 + 528) = v70;
      *(_QWORD *)(a1 + 536) = v71;
      *(_BYTE *)(a1 + 544) = v68;
    }
    v72 = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 560) = v72;
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
    swift_retain();
  }
  else
  {
    v61 = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 544) = v61;
    *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
    v62 = *(_OWORD *)(a2 + 480);
    *v57 = *v58;
    *(_OWORD *)(a1 + 480) = v62;
    v63 = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = v63;
  }
  return a1;
}

uint64_t assignWithCopy for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  __int128 *v18;
  __int128 *v19;
  int v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char v25;
  void *v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  void *v52;
  id v53;
  __int128 *v54;
  __int128 *v55;
  int v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char v61;
  void *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *v69;
  int v70;
  id v71;
  void *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  __int128 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  void *v101;
  void *v102;
  id v103;
  __int128 *v104;
  __int128 *v105;
  int v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  char v111;
  void *v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  void *v119;
  int v120;
  id v121;
  void *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  _OWORD *v130;
  __int128 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  void *v151;
  void *v152;
  id v153;
  __int128 *v154;
  __int128 *v155;
  int v156;
  void *v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  char v161;
  void *v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  void *v169;
  int v170;
  id v171;
  void *v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  _OWORD *v180;
  __int128 *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  void *v201;
  void *v202;
  id v203;
  __int128 *v204;
  __int128 *v205;
  int v206;
  void *v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  char v211;
  void *v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  void *v219;
  int v220;
  id v221;
  void *v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  outlined copy of Text.Suffix.Storage(*(_QWORD *)a2, v5, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  outlined consume of Text.Suffix.Storage(v8, v9, v10);
  v11 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v11;
  LOBYTE(v11) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = v11;
  v12 = *(void **)(a2 + 64);
  v13 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  v14 = v12;

  v15 = *(void **)(a2 + 72);
  v16 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v15;
  v17 = v15;

  v18 = (__int128 *)(a1 + 80);
  v19 = (__int128 *)(a2 + 80);
  v20 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v20 == 255)
    {
      v29 = *v19;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *v18 = v29;
    }
    else
    {
      v26 = *(void **)(a2 + 80);
      v27 = *(_QWORD *)(a2 + 88);
      outlined copy of AccessibilityRotorEntryRange(v26, v27, *(_BYTE *)(a2 + 96));
      *(_QWORD *)(a1 + 80) = v26;
      *(_QWORD *)(a1 + 88) = v27;
      *(_BYTE *)(a1 + 96) = v20;
    }
  }
  else if (v20 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 80);
    v28 = *(_BYTE *)(a2 + 96);
    *v18 = *v19;
    *(_BYTE *)(a1 + 96) = v28;
  }
  else
  {
    v21 = *(void **)(a2 + 80);
    v22 = *(_QWORD *)(a2 + 88);
    outlined copy of AccessibilityRotorEntryRange(v21, v22, *(_BYTE *)(a2 + 96));
    v23 = *(void **)(a1 + 80);
    v24 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v21;
    *(_QWORD *)(a1 + 88) = v22;
    v25 = *(_BYTE *)(a1 + 96);
    *(_BYTE *)(a1 + 96) = v20;
    outlined consume of AccessibilityRotorEntryRange(v23, v24, v25);
  }
  v30 = (_OWORD *)(a1 + 104);
  v31 = (__int128 *)(a2 + 104);
  v32 = *(_QWORD *)(a2 + 192);
  if (*(_QWORD *)(a1 + 192))
  {
    if (v32)
    {
      if (a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 104);
        if (*(_BYTE *)(a2 + 152) == 1)
        {
          v47 = *(_QWORD *)(a2 + 128);
          *(_QWORD *)(a1 + 128) = v47;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
          (**(void (***)(uint64_t, uint64_t))(v47 - 8))(a1 + 104, a2 + 104);
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
          *(_BYTE *)(a1 + 152) = 1;
        }
        else if (*(_BYTE *)(a2 + 152))
        {
          v48 = *v31;
          v49 = *(_OWORD *)(a2 + 120);
          v50 = *(_OWORD *)(a2 + 136);
          *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
          *(_OWORD *)(a1 + 120) = v49;
          *(_OWORD *)(a1 + 136) = v50;
          *v30 = v48;
        }
        else
        {
          v33 = *(_QWORD *)(a2 + 128);
          *(_QWORD *)(a1 + 128) = v33;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
          (**(void (***)(uint64_t, uint64_t))(v33 - 8))(a1 + 104, a2 + 104);
          *(_BYTE *)(a1 + 152) = 0;
        }
      }
      v51 = *(void **)(a1 + 160);
      v52 = *(void **)(a2 + 160);
      *(_QWORD *)(a1 + 160) = v52;
      v53 = v52;

      v54 = (__int128 *)(a1 + 168);
      v55 = (__int128 *)(a2 + 168);
      v56 = *(unsigned __int8 *)(a2 + 184);
      if (*(unsigned __int8 *)(a1 + 184) == 255)
      {
        if (v56 == 255)
        {
          v77 = *v55;
          *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
          *v54 = v77;
        }
        else
        {
          v62 = *(void **)(a2 + 168);
          v63 = *(_QWORD *)(a2 + 176);
          outlined copy of AccessibilityRotorEntryRange(v62, v63, *(_BYTE *)(a2 + 184));
          *(_QWORD *)(a1 + 168) = v62;
          *(_QWORD *)(a1 + 176) = v63;
          *(_BYTE *)(a1 + 184) = v56;
        }
      }
      else if (v56 == 255)
      {
        outlined destroy of AccessibilityRotorEntryRange(a1 + 168);
        v64 = *(_BYTE *)(a2 + 184);
        *v54 = *v55;
        *(_BYTE *)(a1 + 184) = v64;
      }
      else
      {
        v57 = *(void **)(a2 + 168);
        v58 = *(_QWORD *)(a2 + 176);
        outlined copy of AccessibilityRotorEntryRange(v57, v58, *(_BYTE *)(a2 + 184));
        v59 = *(void **)(a1 + 168);
        v60 = *(_QWORD *)(a1 + 176);
        *(_QWORD *)(a1 + 168) = v57;
        *(_QWORD *)(a1 + 176) = v58;
        v61 = *(_BYTE *)(a1 + 184);
        *(_BYTE *)(a1 + 184) = v56;
        outlined consume of AccessibilityRotorEntryRange(v59, v60, v61);
      }
      v78 = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = v78;
      swift_retain();
      swift_release();
      v79 = *(_QWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_QWORD *)(a1 + 208) = v79;
    }
    else
    {
      outlined destroy of AccessibilityListRotorEntry(a1 + 104);
      v35 = *(_OWORD *)(a2 + 152);
      v37 = *v31;
      v36 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = v35;
      *v30 = v37;
      *(_OWORD *)(a1 + 120) = v36;
      v39 = *(_OWORD *)(a2 + 184);
      v38 = *(_OWORD *)(a2 + 200);
      v40 = *(_OWORD *)(a2 + 168);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_OWORD *)(a1 + 184) = v39;
      *(_OWORD *)(a1 + 200) = v38;
      *(_OWORD *)(a1 + 168) = v40;
    }
  }
  else if (v32)
  {
    if (*(_BYTE *)(a2 + 152) == 1)
    {
      v65 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 128) = v65;
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      (**(void (***)(uint64_t, uint64_t))(v65 - 8))(a1 + 104, a2 + 104);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = 1;
    }
    else if (*(_BYTE *)(a2 + 152))
    {
      v66 = *v31;
      v67 = *(_OWORD *)(a2 + 120);
      v68 = *(_OWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_OWORD *)(a1 + 120) = v67;
      *(_OWORD *)(a1 + 136) = v68;
      *v30 = v66;
    }
    else
    {
      v34 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 128) = v34;
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      (**(void (***)(uint64_t, uint64_t))(v34 - 8))(a1 + 104, a2 + 104);
      *(_BYTE *)(a1 + 152) = 0;
    }
    v69 = *(void **)(a2 + 160);
    *(_QWORD *)(a1 + 160) = v69;
    v70 = *(unsigned __int8 *)(a2 + 184);
    v71 = v69;
    if (v70 == 255)
    {
      v74 = *(_OWORD *)(a2 + 168);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = v74;
    }
    else
    {
      v72 = *(void **)(a2 + 168);
      v73 = *(_QWORD *)(a2 + 176);
      outlined copy of AccessibilityRotorEntryRange(v72, v73, v70);
      *(_QWORD *)(a1 + 168) = v72;
      *(_QWORD *)(a1 + 176) = v73;
      *(_BYTE *)(a1 + 184) = v70;
    }
    v75 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = v75;
    v76 = *(_QWORD *)(a2 + 208);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = v76;
    swift_retain();
  }
  else
  {
    v41 = *v31;
    v42 = *(_OWORD *)(a2 + 120);
    v43 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v43;
    *v30 = v41;
    *(_OWORD *)(a1 + 120) = v42;
    v44 = *(_OWORD *)(a2 + 168);
    v45 = *(_OWORD *)(a2 + 184);
    v46 = *(_OWORD *)(a2 + 200);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_OWORD *)(a1 + 184) = v45;
    *(_OWORD *)(a1 + 200) = v46;
    *(_OWORD *)(a1 + 168) = v44;
  }
  v80 = (_OWORD *)(a1 + 224);
  v81 = (__int128 *)(a2 + 224);
  v82 = *(_QWORD *)(a2 + 312);
  if (*(_QWORD *)(a1 + 312))
  {
    if (v82)
    {
      if (a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 224);
        if (*(_BYTE *)(a2 + 272) == 1)
        {
          v97 = *(_QWORD *)(a2 + 248);
          *(_QWORD *)(a1 + 248) = v97;
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
          (**(void (***)(uint64_t, uint64_t))(v97 - 8))(a1 + 224, a2 + 224);
          *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
          *(_BYTE *)(a1 + 272) = 1;
        }
        else if (*(_BYTE *)(a2 + 272))
        {
          v98 = *v81;
          v99 = *(_OWORD *)(a2 + 240);
          v100 = *(_OWORD *)(a2 + 256);
          *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
          *(_OWORD *)(a1 + 240) = v99;
          *(_OWORD *)(a1 + 256) = v100;
          *v80 = v98;
        }
        else
        {
          v83 = *(_QWORD *)(a2 + 248);
          *(_QWORD *)(a1 + 248) = v83;
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
          (**(void (***)(uint64_t, uint64_t))(v83 - 8))(a1 + 224, a2 + 224);
          *(_BYTE *)(a1 + 272) = 0;
        }
      }
      v101 = *(void **)(a1 + 280);
      v102 = *(void **)(a2 + 280);
      *(_QWORD *)(a1 + 280) = v102;
      v103 = v102;

      v104 = (__int128 *)(a1 + 288);
      v105 = (__int128 *)(a2 + 288);
      v106 = *(unsigned __int8 *)(a2 + 304);
      if (*(unsigned __int8 *)(a1 + 304) == 255)
      {
        if (v106 == 255)
        {
          v127 = *v105;
          *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
          *v104 = v127;
        }
        else
        {
          v112 = *(void **)(a2 + 288);
          v113 = *(_QWORD *)(a2 + 296);
          outlined copy of AccessibilityRotorEntryRange(v112, v113, *(_BYTE *)(a2 + 304));
          *(_QWORD *)(a1 + 288) = v112;
          *(_QWORD *)(a1 + 296) = v113;
          *(_BYTE *)(a1 + 304) = v106;
        }
      }
      else if (v106 == 255)
      {
        outlined destroy of AccessibilityRotorEntryRange(a1 + 288);
        v114 = *(_BYTE *)(a2 + 304);
        *v104 = *v105;
        *(_BYTE *)(a1 + 304) = v114;
      }
      else
      {
        v107 = *(void **)(a2 + 288);
        v108 = *(_QWORD *)(a2 + 296);
        outlined copy of AccessibilityRotorEntryRange(v107, v108, *(_BYTE *)(a2 + 304));
        v109 = *(void **)(a1 + 288);
        v110 = *(_QWORD *)(a1 + 296);
        *(_QWORD *)(a1 + 288) = v107;
        *(_QWORD *)(a1 + 296) = v108;
        v111 = *(_BYTE *)(a1 + 304);
        *(_BYTE *)(a1 + 304) = v106;
        outlined consume of AccessibilityRotorEntryRange(v109, v110, v111);
      }
      v128 = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 320) = v128;
      swift_retain();
      swift_release();
      v129 = *(_QWORD *)(a2 + 328);
      *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
      *(_QWORD *)(a1 + 328) = v129;
    }
    else
    {
      outlined destroy of AccessibilityListRotorEntry(a1 + 224);
      v85 = *(_OWORD *)(a2 + 272);
      v87 = *v81;
      v86 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = v85;
      *v80 = v87;
      *(_OWORD *)(a1 + 240) = v86;
      v89 = *(_OWORD *)(a2 + 304);
      v88 = *(_OWORD *)(a2 + 320);
      v90 = *(_OWORD *)(a2 + 288);
      *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
      *(_OWORD *)(a1 + 304) = v89;
      *(_OWORD *)(a1 + 320) = v88;
      *(_OWORD *)(a1 + 288) = v90;
    }
  }
  else if (v82)
  {
    if (*(_BYTE *)(a2 + 272) == 1)
    {
      v115 = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 248) = v115;
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      (**(void (***)(uint64_t, uint64_t))(v115 - 8))(a1 + 224, a2 + 224);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_BYTE *)(a1 + 272) = 1;
    }
    else if (*(_BYTE *)(a2 + 272))
    {
      v116 = *v81;
      v117 = *(_OWORD *)(a2 + 240);
      v118 = *(_OWORD *)(a2 + 256);
      *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v117;
      *(_OWORD *)(a1 + 256) = v118;
      *v80 = v116;
    }
    else
    {
      v84 = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 248) = v84;
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      (**(void (***)(uint64_t, uint64_t))(v84 - 8))(a1 + 224, a2 + 224);
      *(_BYTE *)(a1 + 272) = 0;
    }
    v119 = *(void **)(a2 + 280);
    *(_QWORD *)(a1 + 280) = v119;
    v120 = *(unsigned __int8 *)(a2 + 304);
    v121 = v119;
    if (v120 == 255)
    {
      v124 = *(_OWORD *)(a2 + 288);
      *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
      *(_OWORD *)(a1 + 288) = v124;
    }
    else
    {
      v122 = *(void **)(a2 + 288);
      v123 = *(_QWORD *)(a2 + 296);
      outlined copy of AccessibilityRotorEntryRange(v122, v123, v120);
      *(_QWORD *)(a1 + 288) = v122;
      *(_QWORD *)(a1 + 296) = v123;
      *(_BYTE *)(a1 + 304) = v120;
    }
    v125 = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 320) = v125;
    v126 = *(_QWORD *)(a2 + 328);
    *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
    *(_QWORD *)(a1 + 328) = v126;
    swift_retain();
  }
  else
  {
    v91 = *v81;
    v92 = *(_OWORD *)(a2 + 240);
    v93 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v93;
    *v80 = v91;
    *(_OWORD *)(a1 + 240) = v92;
    v94 = *(_OWORD *)(a2 + 288);
    v95 = *(_OWORD *)(a2 + 304);
    v96 = *(_OWORD *)(a2 + 320);
    *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
    *(_OWORD *)(a1 + 304) = v95;
    *(_OWORD *)(a1 + 320) = v96;
    *(_OWORD *)(a1 + 288) = v94;
  }
  v130 = (_OWORD *)(a1 + 344);
  v131 = (__int128 *)(a2 + 344);
  v132 = *(_QWORD *)(a2 + 432);
  if (*(_QWORD *)(a1 + 432))
  {
    if (v132)
    {
      if (a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 344);
        if (*(_BYTE *)(a2 + 392) == 1)
        {
          v147 = *(_QWORD *)(a2 + 368);
          *(_QWORD *)(a1 + 368) = v147;
          *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
          (**(void (***)(uint64_t, uint64_t))(v147 - 8))(a1 + 344, a2 + 344);
          *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
          *(_BYTE *)(a1 + 392) = 1;
        }
        else if (*(_BYTE *)(a2 + 392))
        {
          v148 = *v131;
          v149 = *(_OWORD *)(a2 + 360);
          v150 = *(_OWORD *)(a2 + 376);
          *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
          *(_OWORD *)(a1 + 360) = v149;
          *(_OWORD *)(a1 + 376) = v150;
          *v130 = v148;
        }
        else
        {
          v133 = *(_QWORD *)(a2 + 368);
          *(_QWORD *)(a1 + 368) = v133;
          *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
          (**(void (***)(uint64_t, uint64_t))(v133 - 8))(a1 + 344, a2 + 344);
          *(_BYTE *)(a1 + 392) = 0;
        }
      }
      v151 = *(void **)(a1 + 400);
      v152 = *(void **)(a2 + 400);
      *(_QWORD *)(a1 + 400) = v152;
      v153 = v152;

      v154 = (__int128 *)(a1 + 408);
      v155 = (__int128 *)(a2 + 408);
      v156 = *(unsigned __int8 *)(a2 + 424);
      if (*(unsigned __int8 *)(a1 + 424) == 255)
      {
        if (v156 == 255)
        {
          v177 = *v155;
          *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
          *v154 = v177;
        }
        else
        {
          v162 = *(void **)(a2 + 408);
          v163 = *(_QWORD *)(a2 + 416);
          outlined copy of AccessibilityRotorEntryRange(v162, v163, *(_BYTE *)(a2 + 424));
          *(_QWORD *)(a1 + 408) = v162;
          *(_QWORD *)(a1 + 416) = v163;
          *(_BYTE *)(a1 + 424) = v156;
        }
      }
      else if (v156 == 255)
      {
        outlined destroy of AccessibilityRotorEntryRange(a1 + 408);
        v164 = *(_BYTE *)(a2 + 424);
        *v154 = *v155;
        *(_BYTE *)(a1 + 424) = v164;
      }
      else
      {
        v157 = *(void **)(a2 + 408);
        v158 = *(_QWORD *)(a2 + 416);
        outlined copy of AccessibilityRotorEntryRange(v157, v158, *(_BYTE *)(a2 + 424));
        v159 = *(void **)(a1 + 408);
        v160 = *(_QWORD *)(a1 + 416);
        *(_QWORD *)(a1 + 408) = v157;
        *(_QWORD *)(a1 + 416) = v158;
        v161 = *(_BYTE *)(a1 + 424);
        *(_BYTE *)(a1 + 424) = v156;
        outlined consume of AccessibilityRotorEntryRange(v159, v160, v161);
      }
      v178 = *(_QWORD *)(a2 + 440);
      *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 440) = v178;
      swift_retain();
      swift_release();
      v179 = *(_QWORD *)(a2 + 448);
      *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
      *(_QWORD *)(a1 + 448) = v179;
    }
    else
    {
      outlined destroy of AccessibilityListRotorEntry(a1 + 344);
      v135 = *(_OWORD *)(a2 + 392);
      v137 = *v131;
      v136 = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 392) = v135;
      *v130 = v137;
      *(_OWORD *)(a1 + 360) = v136;
      v139 = *(_OWORD *)(a2 + 424);
      v138 = *(_OWORD *)(a2 + 440);
      v140 = *(_OWORD *)(a2 + 408);
      *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
      *(_OWORD *)(a1 + 424) = v139;
      *(_OWORD *)(a1 + 440) = v138;
      *(_OWORD *)(a1 + 408) = v140;
    }
  }
  else if (v132)
  {
    if (*(_BYTE *)(a2 + 392) == 1)
    {
      v165 = *(_QWORD *)(a2 + 368);
      *(_QWORD *)(a1 + 368) = v165;
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      (**(void (***)(uint64_t, uint64_t))(v165 - 8))(a1 + 344, a2 + 344);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_BYTE *)(a1 + 392) = 1;
    }
    else if (*(_BYTE *)(a2 + 392))
    {
      v166 = *v131;
      v167 = *(_OWORD *)(a2 + 360);
      v168 = *(_OWORD *)(a2 + 376);
      *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
      *(_OWORD *)(a1 + 360) = v167;
      *(_OWORD *)(a1 + 376) = v168;
      *v130 = v166;
    }
    else
    {
      v134 = *(_QWORD *)(a2 + 368);
      *(_QWORD *)(a1 + 368) = v134;
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      (**(void (***)(uint64_t, uint64_t))(v134 - 8))(a1 + 344, a2 + 344);
      *(_BYTE *)(a1 + 392) = 0;
    }
    v169 = *(void **)(a2 + 400);
    *(_QWORD *)(a1 + 400) = v169;
    v170 = *(unsigned __int8 *)(a2 + 424);
    v171 = v169;
    if (v170 == 255)
    {
      v174 = *(_OWORD *)(a2 + 408);
      *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
      *(_OWORD *)(a1 + 408) = v174;
    }
    else
    {
      v172 = *(void **)(a2 + 408);
      v173 = *(_QWORD *)(a2 + 416);
      outlined copy of AccessibilityRotorEntryRange(v172, v173, v170);
      *(_QWORD *)(a1 + 408) = v172;
      *(_QWORD *)(a1 + 416) = v173;
      *(_BYTE *)(a1 + 424) = v170;
    }
    v175 = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 440) = v175;
    v176 = *(_QWORD *)(a2 + 448);
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    *(_QWORD *)(a1 + 448) = v176;
    swift_retain();
  }
  else
  {
    v141 = *v131;
    v142 = *(_OWORD *)(a2 + 360);
    v143 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v143;
    *v130 = v141;
    *(_OWORD *)(a1 + 360) = v142;
    v144 = *(_OWORD *)(a2 + 408);
    v145 = *(_OWORD *)(a2 + 424);
    v146 = *(_OWORD *)(a2 + 440);
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    *(_OWORD *)(a1 + 424) = v145;
    *(_OWORD *)(a1 + 440) = v146;
    *(_OWORD *)(a1 + 408) = v144;
  }
  v180 = (_OWORD *)(a1 + 464);
  v181 = (__int128 *)(a2 + 464);
  v182 = *(_QWORD *)(a2 + 552);
  if (*(_QWORD *)(a1 + 552))
  {
    if (v182)
    {
      if (a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 464);
        if (*(_BYTE *)(a2 + 512) == 1)
        {
          v197 = *(_QWORD *)(a2 + 488);
          *(_QWORD *)(a1 + 488) = v197;
          *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
          (**(void (***)(uint64_t, uint64_t))(v197 - 8))(a1 + 464, a2 + 464);
          *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
          *(_BYTE *)(a1 + 512) = 1;
        }
        else if (*(_BYTE *)(a2 + 512))
        {
          v198 = *v181;
          v199 = *(_OWORD *)(a2 + 480);
          v200 = *(_OWORD *)(a2 + 496);
          *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
          *(_OWORD *)(a1 + 480) = v199;
          *(_OWORD *)(a1 + 496) = v200;
          *v180 = v198;
        }
        else
        {
          v183 = *(_QWORD *)(a2 + 488);
          *(_QWORD *)(a1 + 488) = v183;
          *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
          (**(void (***)(uint64_t, uint64_t))(v183 - 8))(a1 + 464, a2 + 464);
          *(_BYTE *)(a1 + 512) = 0;
        }
      }
      v201 = *(void **)(a1 + 520);
      v202 = *(void **)(a2 + 520);
      *(_QWORD *)(a1 + 520) = v202;
      v203 = v202;

      v204 = (__int128 *)(a1 + 528);
      v205 = (__int128 *)(a2 + 528);
      v206 = *(unsigned __int8 *)(a2 + 544);
      if (*(unsigned __int8 *)(a1 + 544) == 255)
      {
        if (v206 == 255)
        {
          v227 = *v205;
          *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
          *v204 = v227;
        }
        else
        {
          v212 = *(void **)(a2 + 528);
          v213 = *(_QWORD *)(a2 + 536);
          outlined copy of AccessibilityRotorEntryRange(v212, v213, *(_BYTE *)(a2 + 544));
          *(_QWORD *)(a1 + 528) = v212;
          *(_QWORD *)(a1 + 536) = v213;
          *(_BYTE *)(a1 + 544) = v206;
        }
      }
      else if (v206 == 255)
      {
        outlined destroy of AccessibilityRotorEntryRange(a1 + 528);
        v214 = *(_BYTE *)(a2 + 544);
        *v204 = *v205;
        *(_BYTE *)(a1 + 544) = v214;
      }
      else
      {
        v207 = *(void **)(a2 + 528);
        v208 = *(_QWORD *)(a2 + 536);
        outlined copy of AccessibilityRotorEntryRange(v207, v208, *(_BYTE *)(a2 + 544));
        v209 = *(void **)(a1 + 528);
        v210 = *(_QWORD *)(a1 + 536);
        *(_QWORD *)(a1 + 528) = v207;
        *(_QWORD *)(a1 + 536) = v208;
        v211 = *(_BYTE *)(a1 + 544);
        *(_BYTE *)(a1 + 544) = v206;
        outlined consume of AccessibilityRotorEntryRange(v209, v210, v211);
      }
      v228 = *(_QWORD *)(a2 + 560);
      *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
      *(_QWORD *)(a1 + 560) = v228;
      swift_retain();
      swift_release();
      v229 = *(_QWORD *)(a2 + 568);
      *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
      *(_QWORD *)(a1 + 568) = v229;
    }
    else
    {
      outlined destroy of AccessibilityListRotorEntry(a1 + 464);
      v185 = *(_OWORD *)(a2 + 512);
      v187 = *v181;
      v186 = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
      *(_OWORD *)(a1 + 512) = v185;
      *v180 = v187;
      *(_OWORD *)(a1 + 480) = v186;
      v189 = *(_OWORD *)(a2 + 544);
      v188 = *(_OWORD *)(a2 + 560);
      v190 = *(_OWORD *)(a2 + 528);
      *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
      *(_OWORD *)(a1 + 544) = v189;
      *(_OWORD *)(a1 + 560) = v188;
      *(_OWORD *)(a1 + 528) = v190;
    }
  }
  else if (v182)
  {
    if (*(_BYTE *)(a2 + 512) == 1)
    {
      v215 = *(_QWORD *)(a2 + 488);
      *(_QWORD *)(a1 + 488) = v215;
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      (**(void (***)(uint64_t, uint64_t))(v215 - 8))(a1 + 464, a2 + 464);
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      *(_BYTE *)(a1 + 512) = 1;
    }
    else if (*(_BYTE *)(a2 + 512))
    {
      v216 = *v181;
      v217 = *(_OWORD *)(a2 + 480);
      v218 = *(_OWORD *)(a2 + 496);
      *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
      *(_OWORD *)(a1 + 480) = v217;
      *(_OWORD *)(a1 + 496) = v218;
      *v180 = v216;
    }
    else
    {
      v184 = *(_QWORD *)(a2 + 488);
      *(_QWORD *)(a1 + 488) = v184;
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      (**(void (***)(uint64_t, uint64_t))(v184 - 8))(a1 + 464, a2 + 464);
      *(_BYTE *)(a1 + 512) = 0;
    }
    v219 = *(void **)(a2 + 520);
    *(_QWORD *)(a1 + 520) = v219;
    v220 = *(unsigned __int8 *)(a2 + 544);
    v221 = v219;
    if (v220 == 255)
    {
      v224 = *(_OWORD *)(a2 + 528);
      *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
      *(_OWORD *)(a1 + 528) = v224;
    }
    else
    {
      v222 = *(void **)(a2 + 528);
      v223 = *(_QWORD *)(a2 + 536);
      outlined copy of AccessibilityRotorEntryRange(v222, v223, v220);
      *(_QWORD *)(a1 + 528) = v222;
      *(_QWORD *)(a1 + 536) = v223;
      *(_BYTE *)(a1 + 544) = v220;
    }
    v225 = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 560) = v225;
    v226 = *(_QWORD *)(a2 + 568);
    *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
    *(_QWORD *)(a1 + 568) = v226;
    swift_retain();
  }
  else
  {
    v191 = *v181;
    v192 = *(_OWORD *)(a2 + 480);
    v193 = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = v193;
    *v180 = v191;
    *(_OWORD *)(a1 + 480) = v192;
    v194 = *(_OWORD *)(a2 + 528);
    v195 = *(_OWORD *)(a2 + 544);
    v196 = *(_OWORD *)(a2 + 560);
    *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
    *(_OWORD *)(a1 + 544) = v195;
    *(_OWORD *)(a1 + 560) = v196;
    *(_OWORD *)(a1 + 528) = v194;
  }
  return a1;
}

void *__swift_memcpy577_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x241uLL);
}

uint64_t assignWithTake for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  void *v9;
  _OWORD *v10;
  int v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  void *v19;
  _OWORD *v20;
  int v21;
  int v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  void *v31;
  _OWORD *v32;
  int v33;
  int v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  __int128 v42;
  void *v43;
  _OWORD *v44;
  _OWORD *v45;
  int v46;
  int v47;
  void *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD *v53;
  _OWORD *v54;
  __int128 v55;
  void *v56;
  _OWORD *v57;
  int v58;
  int v59;
  void *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  outlined consume of Text.Suffix.Storage(v4, v5, v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

  v9 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);

  v10 = (_OWORD *)(a2 + 80);
  v11 = *(unsigned __int8 *)(a1 + 96);
  if (v11 != 255)
  {
    v12 = *(unsigned __int8 *)(a2 + 96);
    if (v12 != 255)
    {
      v13 = *(void **)(a1 + 80);
      v14 = *(_QWORD *)(a1 + 88);
      *(_OWORD *)(a1 + 80) = *v10;
      *(_BYTE *)(a1 + 96) = v12;
      outlined consume of AccessibilityRotorEntryRange(v13, v14, v11);
      goto LABEL_6;
    }
    outlined destroy of AccessibilityRotorEntryRange(a1 + 80);
  }
  *(_OWORD *)(a1 + 80) = *v10;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
LABEL_6:
  v15 = (_QWORD *)(a2 + 312);
  v16 = (_OWORD *)(a1 + 104);
  v17 = (_OWORD *)(a2 + 104);
  if (!*(_QWORD *)(a1 + 192))
  {
LABEL_14:
    v25 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v25;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    v26 = *(_OWORD *)(a2 + 120);
    *v16 = *v17;
    *(_OWORD *)(a1 + 120) = v26;
    v27 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v27;
    goto LABEL_18;
  }
  if (!*(_QWORD *)(a2 + 192))
  {
    outlined destroy of AccessibilityListRotorEntry(a1 + 104);
    goto LABEL_14;
  }
  if (a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 104);
    v18 = *(_OWORD *)(a2 + 120);
    *v16 = *v17;
    *(_OWORD *)(a1 + 120) = v18;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  }
  v19 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);

  v20 = (_OWORD *)(a2 + 168);
  v21 = *(unsigned __int8 *)(a1 + 184);
  if (v21 == 255)
    goto LABEL_16;
  v22 = *(unsigned __int8 *)(a2 + 184);
  if (v22 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 168);
LABEL_16:
    *(_OWORD *)(a1 + 168) = *v20;
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    goto LABEL_17;
  }
  v23 = *(void **)(a1 + 168);
  v24 = *(_QWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *v20;
  *(_BYTE *)(a1 + 184) = v22;
  outlined consume of AccessibilityRotorEntryRange(v23, v24, v21);
LABEL_17:
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  swift_release();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
LABEL_18:
  v28 = (_OWORD *)(a1 + 224);
  v29 = (_OWORD *)(a2 + 224);
  if (!*(_QWORD *)(a1 + 312))
  {
LABEL_26:
    v37 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v37;
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
    v38 = *(_OWORD *)(a2 + 240);
    *v28 = *v29;
    *(_OWORD *)(a1 + 240) = v38;
    v39 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v39;
    goto LABEL_30;
  }
  if (!*v15)
  {
    outlined destroy of AccessibilityListRotorEntry(a1 + 224);
    goto LABEL_26;
  }
  if (a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 224);
    v30 = *(_OWORD *)(a2 + 240);
    *v28 = *v29;
    *(_OWORD *)(a1 + 240) = v30;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
  }
  v31 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);

  v32 = (_OWORD *)(a2 + 288);
  v33 = *(unsigned __int8 *)(a1 + 304);
  if (v33 == 255)
    goto LABEL_28;
  v34 = *(unsigned __int8 *)(a2 + 304);
  if (v34 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 288);
LABEL_28:
    *(_OWORD *)(a1 + 288) = *v32;
    *(_BYTE *)(a1 + 304) = *(_BYTE *)(a2 + 304);
    goto LABEL_29;
  }
  v35 = *(void **)(a1 + 288);
  v36 = *(_QWORD *)(a1 + 296);
  *(_OWORD *)(a1 + 288) = *v32;
  *(_BYTE *)(a1 + 304) = v34;
  outlined consume of AccessibilityRotorEntryRange(v35, v36, v33);
LABEL_29:
  *(_OWORD *)(a1 + 312) = *(_OWORD *)v15;
  swift_release();
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
LABEL_30:
  v40 = (_OWORD *)(a1 + 344);
  v41 = (_OWORD *)(a2 + 344);
  if (!*(_QWORD *)(a1 + 432))
  {
LABEL_38:
    v50 = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = v50;
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    v51 = *(_OWORD *)(a2 + 360);
    *v40 = *v41;
    *(_OWORD *)(a1 + 360) = v51;
    v52 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v52;
    goto LABEL_42;
  }
  if (!*(_QWORD *)(a2 + 432))
  {
    outlined destroy of AccessibilityListRotorEntry(a1 + 344);
    goto LABEL_38;
  }
  if (a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 344);
    v42 = *(_OWORD *)(a2 + 360);
    *v40 = *v41;
    *(_OWORD *)(a1 + 360) = v42;
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  }
  v43 = *(void **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);

  v44 = (_OWORD *)(a1 + 408);
  v45 = (_OWORD *)(a2 + 408);
  v46 = *(unsigned __int8 *)(a1 + 424);
  if (v46 == 255)
    goto LABEL_40;
  v47 = *(unsigned __int8 *)(a2 + 424);
  if (v47 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 408);
LABEL_40:
    *v44 = *v45;
    *(_BYTE *)(a1 + 424) = *(_BYTE *)(a2 + 424);
    goto LABEL_41;
  }
  v48 = *(void **)(a1 + 408);
  v49 = *(_QWORD *)(a1 + 416);
  *v44 = *v45;
  *(_BYTE *)(a1 + 424) = v47;
  outlined consume of AccessibilityRotorEntryRange(v48, v49, v46);
LABEL_41:
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  swift_release();
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
LABEL_42:
  v53 = (_OWORD *)(a1 + 464);
  v54 = (_OWORD *)(a2 + 464);
  if (*(_QWORD *)(a1 + 552))
  {
    if (*(_QWORD *)(a2 + 552))
    {
      if (a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 464);
        v55 = *(_OWORD *)(a2 + 480);
        *v53 = *v54;
        *(_OWORD *)(a1 + 480) = v55;
        *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
        *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
      }
      v56 = *(void **)(a1 + 520);
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);

      v57 = (_OWORD *)(a2 + 528);
      v58 = *(unsigned __int8 *)(a1 + 544);
      if (v58 != 255)
      {
        v59 = *(unsigned __int8 *)(a2 + 544);
        if (v59 != 255)
        {
          v60 = *(void **)(a1 + 528);
          v61 = *(_QWORD *)(a1 + 536);
          *(_OWORD *)(a1 + 528) = *v57;
          *(_BYTE *)(a1 + 544) = v59;
          outlined consume of AccessibilityRotorEntryRange(v60, v61, v58);
LABEL_53:
          *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
          swift_release();
          *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
          *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
          return a1;
        }
        outlined destroy of AccessibilityRotorEntryRange(a1 + 528);
      }
      *(_OWORD *)(a1 + 528) = *v57;
      *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
      goto LABEL_53;
    }
    outlined destroy of AccessibilityListRotorEntry(a1 + 464);
  }
  v62 = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 544) = v62;
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
  v63 = *(_OWORD *)(a2 + 480);
  *v53 = *v54;
  *(_OWORD *)(a1 + 480) = v63;
  v64 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = v64;
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 577))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 568) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_BYTE *)(result + 576) = 0;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 577) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 2 * -a2;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 577) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)()
{
  return &unk_1E1ADA900;
}

void *type metadata accessor for AccumulatingVisitor #1 in closure #1 in AccessibilityRotorInfo.resolveAllEntries()()
{
  return &unk_1E1ADAAA8;
}

void *type metadata accessor for IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)()
{
  return &unk_1E1ADAA18;
}

void destroy for AccessibilityNavigationRotorEntry(uint64_t a1)
{
  int v2;

  if (*(unsigned __int8 *)(a1 + 48) <= 1u)
    __swift_destroy_boxed_opaque_existential_1(a1);

  v2 = *(unsigned __int8 *)(a1 + 80);
  if (v2 != 255)
    outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 64), *(_QWORD *)(a1 + 72), v2);
  swift_release();

}

uint64_t initializeWithCopy for AccessibilityNavigationRotorEntry(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  char v6;
  __int128 v7;
  void *v8;
  int v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;

  if (*(_BYTE *)(a2 + 48) == 1)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v6 = 1;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(_BYTE *)(a1 + 48) = 0;
      goto LABEL_7;
    }
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    v6 = *(_BYTE *)(a2 + 48);
  }
  *(_BYTE *)(a1 + 48) = v6;
LABEL_7:
  v8 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(unsigned __int8 *)(a2 + 80);
  v10 = v8;
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  }
  else
  {
    v11 = *(void **)(a2 + 64);
    v12 = *(_QWORD *)(a2 + 72);
    outlined copy of AccessibilityRotorEntryRange(v11, v12, v9);
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    *(_BYTE *)(a1 + 80) = v9;
  }
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v15 = *(void **)(a2 + 120);
  v14 = *(void **)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v15;
  *(_QWORD *)(a1 + 128) = v14;
  swift_retain();
  v16 = v15;
  v17 = v14;
  return a1;
}

uint64_t assignWithCopy for AccessibilityNavigationRotorEntry(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  void *v10;
  id v11;
  __int128 *v12;
  __int128 *v13;
  int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1);
    if (*((_BYTE *)a2 + 48) == 1)
    {
      v5 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v5 - 8))(a1, a2);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_BYTE *)(a1 + 48) = 1;
    }
    else if (*((_BYTE *)a2 + 48))
    {
      v6 = *a2;
      v7 = a2[1];
      v8 = a2[2];
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v6;
    }
    else
    {
      v4 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      *(_BYTE *)(a1 + 48) = 0;
    }
  }
  v9 = *(void **)(a1 + 56);
  v10 = (void *)*((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 56) = v10;
  v11 = v10;

  v12 = (__int128 *)(a1 + 64);
  v13 = a2 + 4;
  v14 = *((unsigned __int8 *)a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v14 == 255)
    {
      v23 = *v13;
      *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
      *v12 = v23;
    }
    else
    {
      v20 = (void *)*((_QWORD *)a2 + 8);
      v21 = *((_QWORD *)a2 + 9);
      outlined copy of AccessibilityRotorEntryRange(v20, v21, *((_BYTE *)a2 + 80));
      *(_QWORD *)(a1 + 64) = v20;
      *(_QWORD *)(a1 + 72) = v21;
      *(_BYTE *)(a1 + 80) = v14;
    }
  }
  else if (v14 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 64);
    v22 = *((_BYTE *)a2 + 80);
    *v12 = *v13;
    *(_BYTE *)(a1 + 80) = v22;
  }
  else
  {
    v15 = (void *)*((_QWORD *)a2 + 8);
    v16 = *((_QWORD *)a2 + 9);
    outlined copy of AccessibilityRotorEntryRange(v15, v16, *((_BYTE *)a2 + 80));
    v17 = *(void **)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = v15;
    *(_QWORD *)(a1 + 72) = v16;
    v19 = *(_BYTE *)(a1 + 80);
    *(_BYTE *)(a1 + 80) = v14;
    outlined consume of AccessibilityRotorEntryRange(v17, v18, v19);
  }
  v24 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = v24;
  swift_retain();
  swift_release();
  v25 = *((_QWORD *)a2 + 13);
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_QWORD *)(a1 + 104) = v25;
  v26 = (void *)*((_QWORD *)a2 + 15);
  v27 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v26;
  v28 = v26;

  v29 = *(void **)(a1 + 128);
  v30 = (void *)*((_QWORD *)a2 + 16);
  *(_QWORD *)(a1 + 128) = v30;
  v31 = v30;

  return a1;
}

uint64_t assignWithTake for AccessibilityNavigationRotorEntry(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  _OWORD *v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  if (a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1);
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  }
  v5 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  v6 = (_OWORD *)(a2 + 64);
  v7 = *(unsigned __int8 *)(a1 + 80);
  if (v7 == 255)
    goto LABEL_7;
  v8 = *(unsigned __int8 *)(a2 + 80);
  if (v8 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 64);
LABEL_7:
    *(_OWORD *)(a1 + 64) = *v6;
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    goto LABEL_8;
  }
  v9 = *(void **)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *v6;
  *(_BYTE *)(a1 + 80) = v8;
  outlined consume of AccessibilityRotorEntryRange(v9, v10, v7);
LABEL_8:
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v11 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);

  v12 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityNavigationRotorEntry(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityNavigationRotorEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 88) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityNavigationRotorEntry()
{
  return &type metadata for AccessibilityNavigationRotorEntry;
}

ValueMetadata *type metadata accessor for AccessibilityListRotorEntry()
{
  return &type metadata for AccessibilityListRotorEntry;
}

uint64_t type metadata accessor for IndexWrappingVisitor in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IndexWrappingVisitor in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:));
}

uint64_t outlined assign with copy of AccessibilityListRotorEntry?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for IndexWrappingVisitor in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 8) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 8) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18775B908 + 4 * byte_187C56A1D[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for IndexWrappingVisitor in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t closure #1 in AccessibilityRotorInfo.readEntryList(_:)partial apply()
{
  return partial apply for closure #1 in AccessibilityRotorInfo.readEntryList(_:)();
}

uint64_t specialized closure #1 in ModifierKeySource.values.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;

  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>.Continuation, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DF07E8]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v23 - v6;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8, v11);
  v24 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v23 - v14;
  if (one-time initialization token for monitor != -1)
    swift_once();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  v16 = *(unsigned __int8 *)(v4 + 80);
  v23 = a1;
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v18 + v17, v7, v3);
  swift_retain();
  ModifierKeyMonitor.addObserver(_:)((uint64_t)partial apply for closure #1 in closure #1 in ModifierKeySource.values.getter, v18, (uint64_t)v15);
  swift_release();
  swift_release();
  v19 = v24;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v24, v15, v8);
  v20 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v21 + v20, v19, v8);
  AsyncStream.Continuation.onTermination.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v8);
}

uint64_t closure #1 in closure #1 in ModifierKeySource.values.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>.Continuation.YieldResult, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DF0790]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v9 - v6;
  v9[1] = a1;
  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>.Continuation, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DF07E8]);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t specialized closure #2 in closure #1 in ModifierKeySource.values.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3, v6);
  v7 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a2, v3);
  type metadata accessor for MainActor();
  v13 = static MainActor.shared.getter();
  v14 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v15 = swift_allocObject();
  v16 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v7, v3);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #2 in closure #1 in ModifierKeySource.values.getter, v15);
  return swift_release();
}

uint64_t specialized closure #1 in closure #2 in closure #1 in ModifierKeySource.values.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t specialized closure #1 in closure #2 in closure #1 in ModifierKeySource.values.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_release();
  if (one-time initialization token for monitor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = static DefaultModifierKeySource.monitor;
  v5 = *(_QWORD *)(static DefaultModifierKeySource.monitor + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v3 = specialized Dictionary._Variant.removeValue(forKey:)(v1);
  *(_QWORD *)(v2 + 16) = v5;
  swift_bridgeObjectRelease();
  if (v3)
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ModifierKeyMonitor.value.didset(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t *);
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(v1 + 24) == result)
    return result;
  v2 = *(_QWORD *)(v1 + 16);
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v7)
      return swift_release();
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v7)
        return swift_release();
      v13 = *(_QWORD *)(v3 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v7)
          return swift_release();
        v13 = *(_QWORD *)(v3 + 8 * v8);
        if (!v13)
        {
          v8 = v12 + 3;
          if (v12 + 3 >= v7)
            return swift_release();
          v13 = *(_QWORD *)(v3 + 8 * v8);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_6:
    v11 = *(void (**)(uint64_t *))(*(_QWORD *)(v2 + 56) + 16 * v10);
    v15 = *(_QWORD *)(v1 + 24);
    swift_retain();
    v11(&v15);
    result = swift_release();
  }
  v14 = v12 + 4;
  if (v14 >= v7)
    return swift_release();
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v13 = *(_QWORD *)(v3 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t ModifierKeyMonitor.addObserver(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3, v8);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  v14 = *(_QWORD *)(v4 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v19 = v14;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<AnyHashable>) -> (), v13, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
  v16 = v19;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  *(_QWORD *)(v4 + 16) = v16;
  return swift_bridgeObjectRelease();
}

uint64_t ModifierKeyMonitor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ModifierKeyMonitor()
{
  return objc_opt_self();
}

uint64_t sub_18775C380()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t one-time initialization function for monitor()
{
  uint64_t v0;
  unint64_t result;

  type metadata accessor for ModifierKeyMonitor();
  v0 = swift_allocObject();
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v0 + 16) = result;
  *(_QWORD *)(v0 + 24) = 0;
  static DefaultModifierKeySource.monitor = v0;
  return result;
}

uint64_t protocol witness for ModifierKeySource.current.getter in conformance DefaultModifierKeySource()
{
  if (one-time initialization token for monitor != -1)
    swift_once();
  return *(_QWORD *)(static DefaultModifierKeySource.monitor + 24);
}

uint64_t protocol witness for ModifierKeySource.values.getter in conformance DefaultModifierKeySource@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>.Continuation.BufferingPolicy, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DF07C0]);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  (*(void (**)(char *, _QWORD, double))(v5 + 104))((char *)&v9 - v6, *MEMORY[0x1E0DF07B8], v4);
  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DF0838]);
  a1[3] = v7;
  a1[4] = lazy protocol witness table accessor for type AsyncStream<EventModifiers> and conformance AsyncStream<A>();
  __swift_allocate_boxed_opaque_existential_1(a1);
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

ValueMetadata *type metadata accessor for DefaultModifierKeySource()
{
  return &type metadata for DefaultModifierKeySource;
}

unint64_t lazy protocol witness table accessor for type AsyncStream<EventModifiers> and conformance AsyncStream<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AsyncStream<EventModifiers> and conformance AsyncStream<A>;
  if (!lazy protocol witness table cache variable for type AsyncStream<EventModifiers> and conformance AsyncStream<A>)
  {
    type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(255, &lazy cache variable for type metadata for AsyncStream<EventModifiers>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DF0838]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DF0848], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AsyncStream<EventModifiers> and conformance AsyncStream<A>);
  }
  return result;
}

uint64_t sub_18775C560()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>.Continuation, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DF07E8]);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ModifierKeySource.values.getter(uint64_t a1)
{
  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>.Continuation, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DF07E8]);
  return closure #1 in closure #1 in ModifierKeySource.values.getter(a1);
}

uint64_t sub_18775C61C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in closure #1 in ModifierKeySource.values.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return specialized closure #2 in closure #1 in ModifierKeySource.values.getter(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_18775C6B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #2 in closure #1 in ModifierKeySource.values.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return specialized closure #1 in closure #2 in closure #1 in ModifierKeySource.values.getter(a1, v5, v6, v7);
}

void type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0CE2728]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d4UI17fg29C14updateChildrenyySayACGFAA8H57IDVACcfu_33_2f504ee4f610784b00e9281caac81f7cAcGTf3nnnpk_nTf1cn_nTm(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x1E0DEE9D8];
    if (!v2)
      return (char *)v3;
    v10 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v10;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (char *)MEMORY[0x18D75E3BC](v5, a1);
      else
        v6 = (char *)*(id *)(a1 + 8 * v5 + 32);
      v7 = *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];

      v9 = *(_QWORD *)(v10 + 16);
      v8 = *(_QWORD *)(v10 + 24);
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1);
      ++v5;
      *(_QWORD *)(v10 + 16) = v9 + 1;
      *(_QWORD *)(v10 + 8 * v9 + 32) = v7;
      if (v2 == v5)
        return (char *)v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

_QWORD *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI13ViewResponderCG_AF7WeakBoxVyAHGs5NeverOTg503_s7d4UI13fg6CSgAA7hi16VyACGIeggr_AcGs5j95OIegnrzr_TR03_s7a41UI28AccessibilityGeometryStorageC20updatec20RespondersyySayAA0G9d6CGFAA7eF13O21AFGAFSgcfu_Tf3nnnpf_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  unint64_t v7;
  unint64_t v8;
  _BYTE v9[8];
  uint64_t v10;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x1E0DEE9D8];
    if (!v2)
      return (_QWORD *)v3;
    v10 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v10;
    v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8];
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x18D75E3BC](v5, a1);
      else
        swift_retain();
      swift_weakInit();
      swift_weakAssign();
      swift_release();
      v10 = v3;
      v8 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v3 + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1);
        v3 = v10;
      }
      ++v5;
      *(_QWORD *)(v3 + 16) = v8 + 1;
      outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)v9, v3 + 8 * v8 + 32, &lazy cache variable for type metadata for WeakBox<ViewResponder>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], v6);
      if (v2 == v5)
        return (_QWORD *)v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void AccessibilityNode.representedElement.getter()
{
  uint64_t v0;
  id v1;
  id v2;

  AccessibilityNode.platformElement.getter();
  if (!v0)
    v1 = v2;
}

uint64_t closure #1 in variable initialization expression of AccessibilityNode.environment@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  EnvironmentValues.init()();
  v2 = *a1;
  v3 = one-time initialization token for configuredForPlatform;
  result = swift_retain();
  if (v3 != -1)
    result = swift_once();
  v5 = static EnvironmentValues.configuredForPlatform;
  if (v2)
  {
    result = swift_release();
    if (!v5 || v2 != v5)
      return EnvironmentValues._configureForPlatform(traitCollection:)(0);
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    return EnvironmentValues.plist.setter();
  }
  return result;
}

id AccessibilityNode.__deallocating_deinit()
{
  void *v0;
  void *v1;
  void *v2;
  objc_super v4;

  AccessibilityNode.platformElement.getter();
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, sel_setAccessibilityNodeForPlatformElement_, 0);

  }
  if (objc_msgSend(v0, sel_respondsToSelector_, sel__accessibilityUnregister))
    objc_msgSend(v0, sel__accessibilityUnregister);
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for AccessibilityNode();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

void AccessibilityNode.platformElement.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v2 = *v1;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = v2 + 40 * v3;
    while (v3 <= *(_QWORD *)(v2 + 16))
    {
      v5 = (void *)AccessibilityAttachment.platformElement.getter();

      if (v5)
      {
        if (v3 <= *(_QWORD *)(v2 + 16))
        {
          if (!AccessibilityAttachment.platformElement.getter())
            __break(1u);
          goto LABEL_11;
        }
LABEL_13:
        __break(1u);
        return;
      }
      v4 -= 40;
      if (!--v3)
        goto LABEL_11;
    }
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
LABEL_11:
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall AccessibilityNode.updatePlatformProperties()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  _QWORD v10[4];
  unsigned __int8 v11;

  AccessibilityNode.platformElement.getter();
  if (v1)
  {
    v2 = v1;
    AccessibilityNode.applyProperties(to:includingRelations:)(v1, 1);

  }
  AccessibilityNode.visibility.getter((int *)v10);
  v10[3] = v10[0];
  AccessibilityNullableOptionSet<>.resolved.getter();
  if (v11 <= 4u && ((1 << v11) & 0x16) != 0)
  {
    v4 = (unint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
    swift_beginAccess();
    v5 = *v4;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      if (v6)
        goto LABEL_9;
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v6)
      {
LABEL_9:
        if (v6 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v6; ++i)
        {
          if ((v5 & 0xC000000000000001) != 0)
            v8 = (id)MEMORY[0x18D75E3BC](i, v5);
          else
            v8 = *(id *)(v5 + 8 * i + 32);
          v9 = v8;
          AccessibilityNode.updatePlatformProperties()();

        }
      }
    }
    swift_bridgeObjectRelease_n();
  }
}

void AccessibilityNode.attachment.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t *v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t *v23;
  uint64_t v24[2];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
  if (v4)
  {
    v5 = (void *)v3[1];
    *a1 = v4;
    a1[1] = (uint64_t)v5;
    v6 = v5;
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
    swift_beginAccess();
    v8 = *v7;
    v9 = *(_QWORD *)(*v7 + 16);
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v9)
    {
      v23 = a1;
      v24[0] = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
      v10 = (_QWORD *)v24[0];
      v11 = (void **)(v8 + 40);
      do
      {
        v12 = (uint64_t)*(v11 - 1);
        v13 = *v11;
        v24[0] = (uint64_t)v10;
        v15 = v10[2];
        v14 = v10[3];
        swift_bridgeObjectRetain();
        v16 = v13;
        if (v15 >= v14 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
          v10 = (_QWORD *)v24[0];
        }
        v10[2] = v15 + 1;
        v17 = &v10[2 * v15];
        v17[4] = v12;
        v17[5] = v13;
        v11 += 5;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
      a1 = v23;
    }
    static AccessibilityAttachment.combine(_:)(v10, v24);
    swift_bridgeObjectRelease();
    v18 = v24[0];
    v19 = (void *)v24[1];
    v20 = *v3;
    v21 = (void *)v3[1];
    *v3 = v24[0];
    v3[1] = (uint64_t)v19;
    v22 = v19;
    swift_bridgeObjectRetain();
    outlined consume of AccessibilityAttachment?(v20, v21);
    *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty) = 1;
    *a1 = v18;
    a1[1] = (uint64_t)v19;
  }
}

void AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 aBlock;
  uint64_t (*v20)(uint64_t);
  void *v21;
  uint64_t (*v22)();
  uint64_t v23;
  char v24;
  __int128 v25;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v25 = *a1;
  AccessibilityProperties.traits.getter();
  v25 = aBlock;
  v24 = 14;
  if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) != 0)
  {
    LOBYTE(v25) = 4;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v25, (char *)&aBlock);
    if (aBlock != 3)
    {
      if (MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
      {
        objc_opt_self();
        if (swift_dynamicCastObjCClass())
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
          v18 = static OS_dispatch_queue.main.getter();
          v14 = swift_allocObject();
          *(_QWORD *)(v14 + 16) = 0;
          *(_BYTE *)(v14 + 24) = 0;
          v22 = partial apply for closure #1 in AccessibilityNode.scheduleNotifyForAttachmentAddition(of:);
          v23 = v14;
          *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
          *((_QWORD *)&aBlock + 1) = 1107296256;
          v20 = thunk for @escaping @callee_guaranteed () -> ();
          v21 = &block_descriptor_53;
          v15 = _Block_copy(&aBlock);
          swift_release();
          static DispatchQoS.unspecified.getter();
          *(_QWORD *)&aBlock = MEMORY[0x1E0DEE9D8];
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
          dispatch thunk of SetAlgebra.init<A>(_:)();
          v16 = (void *)v18;
          MEMORY[0x18D75D930](0, v13, v8, v15);
          swift_unknownObjectRelease();
          _Block_release(v15);

          (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
          (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
    }
  }
}

uint64_t AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t aBlock;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t (*v24)();
  uint64_t v25;
  __int128 v26;

  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[1];
  aBlock = *a1;
  v21 = v14;
  v26 = *a2;
  v15 = AccessibilityNode.notifications(from:to:)(&aBlock, (uint64_t *)&v26);
  if (!v15[2])
    return swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v16 = (void *)static OS_dispatch_queue.main.getter();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v15;
  v24 = partial apply for closure #1 in AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:);
  v25 = v17;
  aBlock = MEMORY[0x1E0C809B0];
  v21 = 1107296256;
  v22 = thunk for @escaping @callee_guaranteed () -> ();
  v23 = &block_descriptor_6_0;
  v18 = _Block_copy(&aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x18D75D930](0, v13, v8, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t AccessibilityNode.attachmentIndex(of:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;

  if (*(unsigned __int8 *)(a1 + 8) == 255)
  {
    swift_beginAccess();
    return 0;
  }
  else
  {
    v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
    swift_beginAccess();
    v4 = *v3;
    v5 = *(_QWORD *)(*v3 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      v2 = 0;
      v6 = (unsigned __int8 *)(v4 + 64);
      do
      {
        v7 = *v6;
        v6 += 40;
        if (v7 != 255 && (static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v2;
        }
        ++v2;
      }
      while (v5 != v2);
      swift_bridgeObjectRelease();
    }
    return 0;
  }
}

Swift::Void __swiftcall AccessibilityNode.updateChildren(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  Swift::OpaquePointer v2;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t i;
  uint64_t j;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  Swift::UInt v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  Swift::OpaquePointer *v34;
  unsigned __int8 v35;
  uint64_t v36[9];

  v4 = v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children;
  swift_beginAccess();
  v5 = swift_bridgeObjectRetain();
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d4UI17fg29C14updateChildrenyySayACGFAA8H57IDVACcfu_33_2f504ee4f610784b00e9281caac81f7cAcGTf3nnnpk_nTf1cn_nTm(v5);
  swift_bridgeObjectRelease();
  v7 = specialized Set.init<A>(_:)((uint64_t)v6);
  swift_bridgeObjectRelease();
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d4UI17fg29C14updateChildrenyySayACGFAA8H57IDVACcfu_33_2f504ee4f610784b00e9281caac81f7cAcGTf3nnnpk_nTf1cn_nTm((unint64_t)a1._rawValue);
  v9 = specialized Set.init<A>(_:)((uint64_t)v8);
  swift_bridgeObjectRelease();
  v36[0] = v7;
  specialized Set.formSymmetricDifference(_:)(v9);
  v10 = v7;
  if (*(_QWORD *)v4 >> 62)
    goto LABEL_37;
  v11 = *(_QWORD *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v12 = *(_QWORD *)(v10 + 16);
    v13 = (unint64_t)a1._rawValue >> 62;
    if ((unint64_t)a1._rawValue >> 62)
      break;
    v14 = *(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    v15 = v14 + v11;
    if (__OFADD__(v14, v11))
      goto LABEL_40;
LABEL_5:
    if (v12 == v15)
    {
      v16 = v11 != 0;
      if (v13)
        goto LABEL_7;
    }
    else
    {
      v16 = 0;
      if (v13)
      {
LABEL_7:
        swift_bridgeObjectRetain();
        v17 = _CocoaArrayWrapper.endIndex.getter();
        if (!v17)
          goto LABEL_18;
        goto LABEL_11;
      }
    }
    v17 = *(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v17)
      goto LABEL_18;
LABEL_11:
    if (v17 < 1)
    {
      __break(1u);
      return;
    }
    if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v17; ++i)
      {
        MEMORY[0x18D75E3BC](i, a1._rawValue);
        swift_unknownObjectWeakAssign();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      for (j = 0; j != v17; ++j)
        swift_unknownObjectWeakAssign();
    }
LABEL_18:
    swift_bridgeObjectRelease();
    v33 = v16;
    v34 = (Swift::OpaquePointer *)v4;
    v2._rawValue = *(void **)v4;
    if (*(_QWORD *)v4 >> 62)
      goto LABEL_41;
    v20 = *(_QWORD *)(((unint64_t)v2._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v20)
      goto LABEL_42;
LABEL_20:
    v4 = 0;
    v21 = v10 + 56;
    while (1)
    {
      if (((unint64_t)v2._rawValue & 0xC000000000000001) != 0)
      {
        v22 = (char *)MEMORY[0x18D75E3BC](v4, v2._rawValue);
      }
      else
      {
        if (v4 >= *(_QWORD *)(((unint64_t)v2._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_36;
        v22 = (char *)*((id *)v2._rawValue + v4 + 4);
      }
      v23 = v22;
      if (__OFADD__(v4++, 1))
        break;
      if (*(_QWORD *)(v10 + 16))
      {
        v25 = *(_QWORD *)&v22[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v25);
        v26 = Hasher._finalize()();
        v27 = -1 << *(_BYTE *)(v10 + 32);
        v28 = v26 & ~v27;
        if (((*(_QWORD *)(v21 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
        {
          v29 = *(_QWORD *)(v10 + 48);
          if (*(_QWORD *)(v29 + 8 * v28) == v25)
          {
LABEL_21:
            swift_unknownObjectWeakAssign();
          }
          else
          {
            v30 = ~v27;
            while (1)
            {
              v28 = (v28 + 1) & v30;
              if (((*(_QWORD *)(v21 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
                break;
              if (*(_QWORD *)(v29 + 8 * v28) == v25)
                goto LABEL_21;
            }
          }
        }
      }

      if (v4 == v20)
        goto LABEL_42;
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v31 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v15 = v31 + v11;
  if (!__OFADD__(v31, v11))
    goto LABEL_5;
LABEL_40:
  __break(1u);
LABEL_41:
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  if (v20)
    goto LABEL_20;
LABEL_42:
  swift_bridgeObjectRelease();
  v34->_rawValue = a1._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = 4;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(1, &v35, (char *)v36);
  if (LOBYTE(v36[0]) - 1 > 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v32 = *(_QWORD *)(v10 + 16);
    swift_bridgeObjectRelease();
    if (v32)
      AccessibilityNode.scheduleNotifyForChildrenChange(fullReplacement:)(v33);
  }
}

uint64_t AccessibilityNode.scheduleNotifyForChildrenChange(fullReplacement:)(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];
  __int128 v17[2];
  uint64_t v18;
  char v19;
  ValueMetadata *v20;
  _UNKNOWN **v21;

  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0 && (AccessibilityNode.visibility.getter((int *)aBlock), (aBlock[0] & 0x80) != 0))
  {
    v20 = &type metadata for AccessibilityCore.Notification.ScreenChanged;
    v21 = &protocol witness table for AccessibilityCore.Notification.ScreenChanged;
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v20 = &type metadata for AccessibilityCore.Notification.LayoutChanged;
    v21 = &protocol witness table for AccessibilityCore.Notification.LayoutChanged;
    v18 = 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v12 = (void *)static OS_dispatch_queue.main.getter();
  outlined init with copy of TableColumnList((uint64_t)&v18, (uint64_t)v17);
  v13 = swift_allocObject();
  outlined init with take of OptionalBinaryInteger(v17, v13 + 16);
  aBlock[4] = partial apply for closure #1 in AccessibilityNode.scheduleNotifyForChildrenChange(fullReplacement:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_56;
  v14 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x18D75D930](0, v11, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
}

uint64_t AccessibilityNode.updateSize(_:token:)(uint64_t *a1, double a2, double a3)
{
  uint64_t v3;
  char v6;
  uint64_t result;
  char v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v6 = *((_BYTE *)a1 + 8);
  v15 = *a1;
  v16 = v6;
  result = AccessibilityNode.attachmentIndex(of:)((uint64_t)&v15);
  if ((v8 & 1) != 0)
    return result;
  v9 = result;
  v10 = (uint64_t *)(v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v11 = *v10;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v10 = v11;
  if ((result & 1) != 0)
  {
    if ((v9 & 0x8000000000000000) == 0)
      goto LABEL_4;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
  v11 = result;
  *v10 = result;
  if ((v9 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_4:
  if (v9 >= *(_QWORD *)(v11 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v12 = v11 + 40 * v9;
  v13 = *(_QWORD *)(v12 + 48);
  if (!v13)
  {
    v14 = v12 + 32;
    type metadata accessor for AccessibilityGeometryStorage();
    v13 = swift_allocObject();
    *(_WORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 1;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_BYTE *)(v13 + 80) = 1;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_OWORD *)(v13 + 104) = 0u;
    *(_BYTE *)(v13 + 120) = 1;
    *(_QWORD *)(v13 + 128) = MEMORY[0x1E0DEE9D8];
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_BYTE *)(v13 + 176) = -1;
    *(_QWORD *)(v13 + 168) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    *(_QWORD *)(v14 + 16) = v13;
  }
  *(_BYTE *)(v13 + 17) = 1;
  *(double *)(v13 + 64) = a2;
  *(double *)(v13 + 72) = a3;
  *(_BYTE *)(v13 + 80) = 0;
  return swift_endAccess();
}

uint64_t AccessibilityNode.updateTransform(_:token:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  char v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v3 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = a1[4];
  v8 = *((_BYTE *)a2 + 8);
  v18 = *a2;
  v19 = v8;
  result = AccessibilityNode.attachmentIndex(of:)((uint64_t)&v18);
  if ((v10 & 1) != 0)
    return result;
  v11 = result;
  v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v13 = *v12;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v12 = v13;
  if ((result & 1) != 0)
  {
    if ((v11 & 0x8000000000000000) == 0)
      goto LABEL_4;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
  v13 = result;
  *v12 = result;
  if ((v11 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_4:
  if (v11 >= *(_QWORD *)(v13 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v14 = v13 + 40 * v11;
  v15 = *(_QWORD *)(v14 + 48);
  if (!v15)
  {
    v16 = v14 + 32;
    type metadata accessor for AccessibilityGeometryStorage();
    v15 = swift_allocObject();
    *(_WORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 1;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
    *(_BYTE *)(v15 + 80) = 1;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_OWORD *)(v15 + 104) = 0u;
    *(_BYTE *)(v15 + 120) = 1;
    *(_QWORD *)(v15 + 128) = MEMORY[0x1E0DEE9D8];
    *(_OWORD *)(v15 + 136) = 0u;
    *(_OWORD *)(v15 + 152) = 0u;
    *(_BYTE *)(v15 + 176) = -1;
    *(_QWORD *)(v15 + 168) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    *(_QWORD *)(v16 + 16) = v15;
  }
  *(_BYTE *)(v15 + 17) = 1;
  v17 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v15 + 24) = v3;
  *(_QWORD *)(v15 + 32) = v4;
  *(_QWORD *)(v15 + 40) = v6;
  *(_QWORD *)(v15 + 48) = v5;
  *(_QWORD *)(v15 + 56) = v7;
  swift_retain();
  swift_endAccess();
  return outlined consume of Transaction?(v17);
}

uint64_t AccessibilityNode.updatePath(_:token:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;
  char v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v24;
  CGRect v25;
  CGRect v26;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *((_BYTE *)a2 + 8);
  v23 = *a2;
  v24 = v9;
  result = AccessibilityNode.attachmentIndex(of:)((uint64_t)&v23);
  if ((v11 & 1) != 0)
    return result;
  v12 = result;
  v13 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v14 = *v13;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v13 = v14;
  if ((result & 1) != 0)
  {
    if ((v12 & 0x8000000000000000) == 0)
      goto LABEL_4;
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
  v14 = result;
  *v13 = result;
  if ((v12 & 0x8000000000000000) != 0)
    goto LABEL_13;
LABEL_4:
  if (v12 >= *(_QWORD *)(v14 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v15 = v14 + 40 * v12;
  v16 = *(_QWORD *)(v15 + 48);
  if (!v16)
  {
    v17 = v15 + 32;
    type metadata accessor for AccessibilityGeometryStorage();
    v16 = swift_allocObject();
    *(_WORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 1;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_BYTE *)(v16 + 80) = 1;
    *(_OWORD *)(v16 + 88) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *(_BYTE *)(v16 + 120) = 1;
    *(_QWORD *)(v16 + 128) = MEMORY[0x1E0DEE9D8];
    *(_OWORD *)(v16 + 136) = 0u;
    *(_OWORD *)(v16 + 152) = 0u;
    *(_BYTE *)(v16 + 176) = -1;
    *(_QWORD *)(v16 + 168) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    *(_QWORD *)(v17 + 16) = v16;
  }
  *(_BYTE *)(v16 + 16) = 0;
  if ((Path.isEmpty.getter() & 1) == 0)
  {
    Path.boundingRect.getter();
    v26 = CGRectStandardize(v25);
    if (!CGRectIsEmpty(v26))
    {
      v18 = *(_QWORD *)(v16 + 144);
      v19 = *(_QWORD *)(v16 + 152);
      v20 = *(_QWORD *)(v16 + 160);
      v21 = *(_QWORD *)(v16 + 168);
      *(_QWORD *)(v16 + 144) = v4;
      *(_QWORD *)(v16 + 152) = v5;
      *(_QWORD *)(v16 + 160) = v6;
      *(_QWORD *)(v16 + 168) = v7;
      v22 = *(_BYTE *)(v16 + 176);
      *(_BYTE *)(v16 + 176) = v8;
      outlined consume of Path?(v18, v19, v20, v21, v22);
      outlined init with take of Path.Storage(a1, (uint64_t)&v23);
      outlined retain of TableColumnCustomizationID.Base((uint64_t)&v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    }
  }
  return swift_endAccess();
}

uint64_t AccessibilityNode.updateViewResponders(_:token:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;
  uint64_t result;
  char v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = *((_BYTE *)a2 + 8);
  v13 = *a2;
  v14 = v4;
  result = AccessibilityNode.attachmentIndex(of:)((uint64_t)&v13);
  if ((v6 & 1) != 0)
    return result;
  v7 = result;
  v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v9 = *v8;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v8 = v9;
  if ((result & 1) != 0)
  {
    if ((v7 & 0x8000000000000000) == 0)
      goto LABEL_4;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  v9 = result;
  *v8 = result;
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_4:
  if (v7 >= *(_QWORD *)(v9 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v10 = v9 + 40 * v7;
  v11 = *(_QWORD *)(v10 + 48);
  if (!v11)
  {
    v12 = v10 + 32;
    type metadata accessor for AccessibilityGeometryStorage();
    v11 = swift_allocObject();
    *(_WORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 1;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_BYTE *)(v11 + 80) = 1;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_BYTE *)(v11 + 120) = 1;
    *(_QWORD *)(v11 + 128) = MEMORY[0x1E0DEE9D8];
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_BYTE *)(v11 + 176) = -1;
    *(_QWORD *)(v11 + 168) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    *(_QWORD *)(v12 + 16) = v11;
  }
  *(_BYTE *)(v11 + 16) = 1;
  *(_QWORD *)(v11 + 136) = 0;
  swift_release();
  *(_QWORD *)(v11 + 128) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI13ViewResponderCG_AF7WeakBoxVyAHGs5NeverOTg503_s7d4UI13fg6CSgAA7hi16VyACGIeggr_AcGs5j95OIegnrzr_TR03_s7a41UI28AccessibilityGeometryStorageC20updatec20RespondersyySayAA0G9d6CGFAA7eF13O21AFGAFSgcfu_Tf3nnnpf_nTf1cn_n(a1);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t AccessibilityNode.updateEnvironment(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;

  v2 = v1;
  v3 = *a1;
  v7 = *(_OWORD *)a1;
  v4 = one-time initialization token for configuredForPlatform;
  swift_retain_n();
  swift_retain();
  if (v4 != -1)
    swift_once();
  v5 = static EnvironmentValues.configuredForPlatform;
  if (v3)
  {
    swift_release();
    if (!v5 || v3 != v5)
      EnvironmentValues._configureForPlatform(traitCollection:)(0);
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    EnvironmentValues.plist.setter();
  }
  *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment) = v7;
  swift_release();
  result = swift_release();
  *(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored) = 2;
  return result;
}

uint64_t AccessibilityNode.sendAction<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_OWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if ((EnvironmentValues.isEnabled.getter() & 1) == 0)
    return 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v12 = v31;
    v13 = v32;
    if (v33 == 1)
    {
      AccessibilityNode.attachment.getter((uint64_t *)&v31);

      v14 = swift_bridgeObjectRetain();
      v15 = specialized AccessibilityProperties.subscript.getter(v14);
      swift_bridgeObjectRelease_n();
      v16 = specialized Sequence.reversed()(v15);
      result = outlined consume of AccessibilityActionKind.ActionKind(v12, *((uint64_t *)&v12 + 1), v13, 1uLL);
      v18 = *(_QWORD *)(v16 + 16);
      if (!v18)
        goto LABEL_19;
      goto LABEL_8;
    }
    outlined consume of AccessibilityActionKind.ActionKind(v31, *((uint64_t *)&v31 + 1), v32, v33);
  }
  AccessibilityNode.attachment.getter((uint64_t *)&v31);

  v19 = swift_bridgeObjectRetain();
  v16 = specialized AccessibilityProperties.subscript.getter(v19);
  result = swift_bridgeObjectRelease_n();
  v18 = *(_QWORD *)(v16 + 16);
  if (!v18)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_8:
  v20 = 0;
  v21 = 0;
  v22 = v16 + 32;
  v27 = v16 + 32;
  v28 = v18 - 1;
LABEL_9:
  v29 = v20;
  v23 = v22 + 48 * v21;
  do
  {
    if (v21 >= *(_QWORD *)(v16 + 16))
    {
      __break(1u);
      return result;
    }
    outlined init with copy of AnyAccessibilityAction(v23, (uint64_t)&v31);
    AnyAccessibilityAction.perform<A>(action:value:)(a1, a2, a3, a4);
    result = outlined destroy of AnyAccessibilityAction((uint64_t)&v31);
    if (v30 == 2)
      goto LABEL_18;
    if (v30 == 3)
    {
      v20 = 1;
      v24 = v28 == v21++;
      v22 = v27;
      if (!v24)
        goto LABEL_9;
LABEL_18:
      swift_bridgeObjectRelease();
LABEL_23:
      v25 = 1;
      if (MEMORY[0x18D760234](v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
      {
        swift_getObjectType();
        *(_QWORD *)&v31 = 0;
        BYTE8(v31) = 1;
        ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
        swift_unknownObjectRelease();
      }
      return v25;
    }
    if ((v30 & 1) == 0)
      goto LABEL_19;
    ++v21;
    v23 += 48;
  }
  while (v18 != v21);
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
    goto LABEL_23;
  return 0;
}

Swift::Bool __swiftcall AccessibilityNode.sendAction(named:)(Swift::String named)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Bool result;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Bool v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  _QWORD v42[4];
  char v43;
  _QWORD v44[2];
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  object = named._object;
  countAndFlagsBits = named._countAndFlagsBits;
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  v45 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if ((EnvironmentValues.isEnabled.getter() & 1) == 0)
    return 0;
  v40 = countAndFlagsBits;
  v41 = object;
  AccessibilityNode.attachment.getter((uint64_t *)&v45);

  v5 = swift_bridgeObjectRetain();
  v6 = specialized AccessibilityProperties.subscript.getter(v5);
  result = swift_bridgeObjectRelease_n();
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = 0;
  v10 = 0;
  v33 = v8 - 1;
  v34 = v1;
  v11 = v6 + 32;
  v36 = MEMORY[0x1E0DEE9C0] + 8;
  v37 = *(_QWORD *)(v6 + 16);
  v12 = v37;
  v38 = v6;
  v39 = v4;
  v32 = v6 + 32;
LABEL_4:
  v35 = v10;
  v13 = v11 + 48 * v9;
  do
  {
    if (v9 >= *(_QWORD *)(v6 + 16))
    {
      __break(1u);
      return result;
    }
    outlined init with copy of AnyAccessibilityAction(v13, (uint64_t)&v45);
    v14 = v46;
    v15 = v47;
    __swift_project_boxed_opaque_existential_1(&v45, v46);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
    if (!v19)
    {
      result = outlined destroy of AnyAccessibilityAction((uint64_t)&v45);
      goto LABEL_6;
    }
    v20 = v16;
    v21 = v17;
    v22 = v18;
    v23 = v4[1];
    v42[0] = *v4;
    v42[1] = v23;
    v44[0] = 0;
    v44[1] = 0;
    swift_retain();
    swift_retain();
    v43 = v22 & 1;
    v24 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
    v26 = v25;
    swift_release();
    swift_release();
    v27 = v24 == v40 && v26 == v41;
    if (v27)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
        outlined destroy of AnyAccessibilityAction((uint64_t)&v45);
        outlined consume of Text.Storage(v20, v21, v22 & 1);
        result = swift_bridgeObjectRelease();
        v6 = v38;
        v4 = v39;
        v12 = v37;
        goto LABEL_6;
      }
    }
    v42[3] = v36;
    v29 = v46;
    v30 = v47;
    __swift_project_boxed_opaque_existential_1(&v45, v46);
    (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t, uint64_t))(v30 + 32))(v44, v42, v29, v30);
    outlined consume of Text.Storage(v20, v21, v22 & 1);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    result = outlined destroy of AnyAccessibilityAction((uint64_t)&v45);
    v4 = v39;
    if (LOBYTE(v44[0]) == 2)
      goto LABEL_26;
    v12 = v37;
    if (LOBYTE(v44[0]) == 3)
    {
      v10 = 1;
      v11 = v32;
      v27 = v33 == v9++;
      v6 = v38;
      if (!v27)
        goto LABEL_4;
LABEL_26:
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    if ((v44[0] & 1) == 0)
      goto LABEL_29;
    v6 = v38;
LABEL_6:
    ++v9;
    v13 += 48;
  }
  while (v12 != v9);
  swift_bridgeObjectRelease();
  if ((v35 & 1) == 0)
    return 0;
LABEL_27:
  v31 = 1;
  if (MEMORY[0x18D760234](v34 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
  {
    swift_getObjectType();
    *(_QWORD *)&v45 = 0;
    BYTE8(v45) = 1;
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    swift_unknownObjectRelease();
  }
  return v31;
}

uint64_t AccessibilityNode.traits.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment))
    return AccessibilityProperties.traits.getter();
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v7 = v19;
    v8 = v6 - 1;
    v9 = 40 * v6 - 8;
    while (v8 != -1)
    {
      if (v8 >= *(_QWORD *)(v5 + 16))
        goto LABEL_18;
      result = AccessibilityProperties.traits.getter();
      v10 = v18;
      v12 = *(_QWORD *)(v19 + 16);
      v11 = *(_QWORD *)(v19 + 24);
      if (v12 >= v11 >> 1)
      {
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
        v10 = v18;
      }
      *(_QWORD *)(v19 + 16) = v12 + 1;
      *(_OWORD *)(v19 + 16 * v12 + 32) = v10;
      --v8;
      v9 -= 40;
      if (v8 == -1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_11:
    v13 = *(_QWORD *)(v7 + 16);
    if (v13)
    {
      v14 = 0;
      v15 = 0;
      v16 = (_QWORD *)(v7 + 40);
      do
      {
        v17 = *v16 | v15;
        v14 = (v15 | ~*v16) & v14 | *(v16 - 1) & ~v15;
        v16 += 2;
        v15 = v17;
        --v13;
      }
      while (v13);
    }
    else
    {
      v17 = 0;
      v14 = 0;
    }
    result = swift_bridgeObjectRelease();
    *a1 = v14;
    a1[1] = v17;
  }
  return result;
}

uint64_t AccessibilityNode.impliedTraits.getter()
{
  int8x8_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t *v18;
  uint64_t v19;
  int8x16_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  __int16 v27;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;

  v0 = 0;
  AccessibilityNode.attachment.getter((uint64_t *)&v29);
  v1 = v29;

  *(_QWORD *)&v33 = v1;
  AccessibilityProperties.traits.getter();
  swift_bridgeObjectRelease();
  v2 = v29;
  AccessibilityNode.attachment.getter((uint64_t *)&v29);

  v3 = swift_bridgeObjectRetain();
  v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease_n();
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    v7 = (char *)MEMORY[0x1E0DEE9D8];
    v14 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v14)
      goto LABEL_20;
LABEL_13:
    if (v14 >= 4)
    {
      v15 = v14 & 0x7FFFFFFFFFFFFFFCLL;
      v16 = 0uLL;
      v17 = 0uLL;
      v18 = (int8x16_t *)(v7 + 48);
      v19 = v14 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v17 = vorrq_s8(v18[-1], v17);
        v16 = vorrq_s8(*v18, v16);
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      v20 = vorrq_s8(v16, v17);
      v0 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
      if (v14 == v15)
        goto LABEL_20;
    }
    else
    {
      v15 = 0;
    }
    v21 = v14 - v15;
    v22 = &v7[8 * v15 + 32];
    do
    {
      v23 = *(_QWORD *)v22;
      v22 += 8;
      *(_QWORD *)&v0 |= v23;
      --v21;
    }
    while (v21);
    goto LABEL_20;
  }
  v6 = v4 + 32;
  swift_bridgeObjectRetain();
  v7 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    outlined init with copy of AnyAccessibilityAction(v6, (uint64_t)&v29);
    v8 = v30;
    v9 = v31;
    __swift_project_boxed_opaque_existential_1(&v29, v30);
    v33 = v2;
    v10 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v9 + 48))(&v33, v8, v9);
    LOWORD(v8) = v11;
    outlined destroy of AnyAccessibilityAction((uint64_t)&v29);
    if ((v8 & 0x100) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      v13 = *((_QWORD *)v7 + 2);
      v12 = *((_QWORD *)v7 + 3);
      if (v13 >= v12 >> 1)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = v13 + 1;
      *(_QWORD *)&v7[8 * v13 + 32] = v10;
    }
    v6 += 48;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease_n();
  v14 = *((_QWORD *)v7 + 2);
  if (v14)
    goto LABEL_13;
LABEL_20:
  swift_bridgeObjectRelease();
  AccessibilityNode.attachment.getter((uint64_t *)&v33);

  v24 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v24, &v29);
  swift_bridgeObjectRelease_n();
  if (v32)
  {
    v33 = v2;
    v25 = AccessibilityValueStorage.impliedRole(for:)((uint64_t *)&v33);
    v27 = v26;
    outlined destroy of AccessibilityValueStorage((uint64_t)&v29);
    if ((v27 & 0x100) == 0)
      *(_QWORD *)&v0 |= v25;
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v29, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  }
  return (uint64_t)v0;
}

uint64_t AccessibilityNode.resolvedTraits.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  __int8 v9;
  unsigned int v10;
  int v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  __int8 v19;
  unsigned int v20;
  int v21;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  int8x16_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x16_t v44;
  uint64_t v45;

  v1 = v0;
  v2 = 0;
  v45 = 0;
  AccessibilityNode.attachment.getter(v40.i64);
  v3 = v40.i64[0];

  v44.i64[0] = v3;
  AccessibilityProperties.traits.getter();
  swift_bridgeObjectRelease();
  v4 = v40;
  v44.i8[0] = 4;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(0, (unsigned __int8 *)&v44, v40.i8);
  if (v40.u8[0] - 1 >= 2)
  {
    v15 = AccessibilityNode.impliedTraits.getter();
    v45 = v15;
    v16 = static AccessibilityTrait.allCases.getter();
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = (unsigned __int8 *)(v16 + 32);
      do
      {
        v20 = *v18++;
        v19 = v20;
        v21 = (1 << v20) & 0x39C23FFF;
        if (v20 <= 0x1D && v21 != 0 && (((unint64_t)v4.i64[0] >> v19) & 1) != 0)
        {
          v40.i8[0] = v19;
          v23 = AccessibilityTrait.uiTrait.getter();
          if ((v24 & 1) == 0)
            v2 |= v23;
        }
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease();
    v25 = v2 | v15;
  }
  else
  {
    v5 = static AccessibilityTrait.allCases.getter();
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = (unsigned __int8 *)(v5 + 32);
      v8 = 0;
      do
      {
        v10 = *v7++;
        v9 = v10;
        v11 = (1 << v10) & 0x401404;
        if (v10 <= 0x16 && v11 != 0 && (((unint64_t)v4.i64[0] >> v9) & 1) != 0)
        {
          v40.i8[0] = v9;
          v13 = AccessibilityTrait.uiTrait.getter();
          if ((v14 & 1) == 0)
            v8 |= v13;
        }
        --v6;
      }
      while (v6);
    }
    else
    {
      v8 = 0;
    }
    swift_bridgeObjectRelease();
    v25 = v8;
  }
  v45 = v25;
  v40 = *(int8x16_t *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if ((EnvironmentValues.isEnabled.getter() & 1) == 0)
  {
    v25 |= 0x100uLL;
    v45 = v25;
  }
  v40 = v4;
  v44.i8[0] = 28;
  if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) != 0)
  {
    AccessibilityNode.attachment.getter(v40.i64);

    v26 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v26, &v40);
    swift_bridgeObjectRelease_n();
    v27 = v43;
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v40, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    if (!v27)
    {
      v25 &= ~8uLL;
      v45 = v25;
    }
  }
  AccessibilityNode.attachment.getter(v40.i64);

  v28 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v28, v40.i64);
  swift_bridgeObjectRelease_n();
  if ((v40.i8[0] & 1) != 0 && ((v4.i16[0] & 0x1000) != 0 || (v4.i16[4] & 0x1000) == 0))
    v45 = v25 | 0x2000;
  AccessibilityNode.attachment.getter(v40.i64);

  v29 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v29, (uint64_t)&v40);
  swift_bridgeObjectRelease_n();
  if (v43 == 255)
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v40, &lazy cache variable for type metadata for AccessibilityTableContext?);
  }
  else
  {
    v44 = v4;
    AccessibilityTableContext.resolve(into:for:)(&v45);
    outlined destroy of AccessibilityTableContext((uint64_t)&v40);
  }
  if (MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
  {
    objc_opt_self();
    v30 = (void *)swift_dynamicCastObjCClass();
    if (v30)
    {
      v31 = objc_msgSend(v30, sel__accessibilityCanDrag);
      swift_unknownObjectRelease();
      if ((v31 & 1) != 0)
      {
        AccessibilityNode.attachment.getter(v40.i64);

        v32 = swift_bridgeObjectRetain();
        specialized AccessibilityProperties.subscript.getter(v32, &v40);
        swift_bridgeObjectRelease_n();
        if (v42)
        {
          if (*(_QWORD *)(v42 + 16))
          {
            outlined consume of AccessibilityActivationPointStorage?(v40.i64[0], v40.i64[1], v41, v42);
            v45 |= 0x4000000000uLL;
          }
          else
          {
            outlined consume of AccessibilityActivationPointStorage?(v40.i64[0], v40.i64[1], v41, v42);
          }
        }
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  AccessibilityNode.attachment.getter(v40.i64);

  v33 = swift_bridgeObjectRetain();
  v34 = specialized AccessibilityProperties.subscript.getter(v33);
  v36 = v35;
  v38 = v37;
  swift_bridgeObjectRelease_n();
  if ((v38 & 1) != 0)
    return v45;
  else
    return (v45 | v36) & ~v34;
}

uint64_t AccessibilityNode.resolvedCustomRotors.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  ValueMetadata *v13;
  char *v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  id v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  _QWORD *v22;
  void **v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t *v36;
  ValueMetadata *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  void *v45;
  void *v46;
  id (*v47)(uint64_t);
  void *v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  char isEscapingClosureAtFileLocation;
  unint64_t *v61;
  objc_class *v62;
  uint64_t v63;
  void *v64;
  id v65;
  id v66;
  unint64_t *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  objc_super v72;
  uint64_t aBlock;
  uint64_t v74;
  void *v75;
  void *v76;
  id (*v77)(uint64_t);
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[128];
  _BYTE v82[128];
  unsigned __int8 v83[128];
  _QWORD *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[4];
  uint64_t v89;
  Swift::OpaquePointer_optional v90;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
  swift_retain();
  swift_retain();
  AccessibilityNode.attachment.getter((uint64_t *)&v84);

  v4 = swift_bridgeObjectRetain();
  v5 = specialized AccessibilityProperties.subscript.getter(v4);
  swift_bridgeObjectRelease_n();
  if (*(_QWORD *)(v5 + 16))
  {
    swift_retain();
    swift_retain();
    v6 = (id)v1;
    v7 = specialized Sequence.compactMap<A>(_:)(v5, v2, v3, (uint64_t)v6);
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();

  }
  else
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  v89 = v7;
  v8 = (void *)AccessibilityNode.linkRotor.getter();
  if (v8)
  {
    v9 = v8;
    MEMORY[0x18D75CF58]();
    if (*(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_61;
    goto LABEL_6;
  }
LABEL_7:
  v83[0] = 4;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(1, v83, (char *)&v84);
  if (!(_BYTE)v84)
  {
    v1 += OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children;
    swift_beginAccess();
    v71 = *(_QWORD *)v1;
    if (*(_QWORD *)v1 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      if (v10)
        goto LABEL_10;
    }
    else
    {
      v10 = *(_QWORD *)((*(_QWORD *)v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v10)
      {
LABEL_10:
        v11 = 0;
        v12 = (unint64_t *)&lazy cache variable for type metadata for Any?;
        v9 = &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?;
        v13 = &type metadata for AccessibilityTextLayoutProperties;
        v69 = v10;
        do
        {
          if ((v71 & 0xC000000000000001) != 0)
            v14 = (char *)MEMORY[0x18D75E3BC](v11, v71);
          else
            v14 = (char *)*(id *)(v71 + 32 + 8 * (_QWORD)v11);
          v15 = v14;
          v16 = __OFADD__(v11, 1);
          v11 = (unint64_t *)((char *)v11 + 1);
          if (v16)
          {
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_6:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();

            goto LABEL_7;
          }
          v1 = (uint64_t)&v14[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          v17 = *(_QWORD *)&v14[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          if (v17)
          {
            v18 = *(id *)(v1 + 8);
            swift_bridgeObjectRetain();
          }
          else
          {
            v70 = v14;
            v19 = &v14[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
            swift_beginAccess();
            v20 = *(_QWORD *)v19;
            v21 = *(_QWORD *)(*(_QWORD *)v19 + 16);
            if (v21)
            {
              v68 = v11;
              v84 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
              v22 = v84;
              v23 = (void **)(v20 + 40);
              do
              {
                v25 = (uint64_t)*(v23 - 1);
                v24 = *v23;
                v84 = v22;
                v26 = v22[2];
                v27 = v22[3];
                swift_bridgeObjectRetain();
                v28 = v24;
                if (v26 >= v27 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v26 + 1, 1);
                  v22 = v84;
                }
                v22[2] = v26 + 1;
                v29 = &v22[2 * v26];
                v29[4] = v25;
                v29[5] = v24;
                v23 += 5;
                --v21;
              }
              while (v21);
              swift_bridgeObjectRelease();
              v11 = v68;
              v10 = v69;
              v12 = (unint64_t *)&lazy cache variable for type metadata for Any?;
              v9 = &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?;
              v13 = &type metadata for AccessibilityTextLayoutProperties;
            }
            else
            {
              v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            }
            static AccessibilityAttachment.combine(_:)(v22, (uint64_t *)&v84);
            swift_bridgeObjectRelease();
            v17 = (uint64_t)v84;
            v30 = v85;
            v31 = *(_QWORD *)v1;
            v32 = *(void **)(v1 + 8);
            *(_QWORD *)v1 = v84;
            *(_QWORD *)(v1 + 8) = v30;
            v18 = v30;
            swift_bridgeObjectRetain();
            outlined consume of AccessibilityAttachment?(v31, v32);
            v15 = v70;
            *((_BYTE *)v70 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty) = 1;
          }

          if (*(_QWORD *)(v17 + 16)
            && (v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey),
                (v34 & 1) != 0))
          {
            outlined init with copy of TableColumnList(*(_QWORD *)(v17 + 56) + 40 * v33, (uint64_t)&v84);
            v35 = v86;
            v36 = v12;
            v37 = v13;
            v38 = v10;
            v39 = v15;
            v40 = v87;
            __swift_project_boxed_opaque_existential_1(&v84, v86);
            v1 = *(_QWORD *)(v40 + 8);
            swift_bridgeObjectRetain();
            v41 = v40;
            v15 = v39;
            v10 = v38;
            v13 = v37;
            v12 = v36;
            v9 = &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?;
            ((void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))v1)(v88, v35, v41);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
          }
          else
          {
            memset(v88, 0, sizeof(v88));
            swift_bridgeObjectRetain();
          }
          type metadata accessor for AccessibilityValueStorage?(0, v12);
          type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
          if ((swift_dynamicCast() & 1) != 0)
          {
            destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v84);
            outlined init with take of AccessibilityTextLayoutProperties??((uint64_t)&v84, (uint64_t)v81);
            swift_bridgeObjectRelease_n();
            outlined release of AccessibilityTextLayoutProperties?((uint64_t)v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityTextLayoutProperties??);
            outlined init with take of AccessibilityTextLayoutProperties??((uint64_t)v81, (uint64_t)v82);
            outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v82, (uint64_t)v83, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
            if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v83) != 1)
            {
              AccessibilityNode.attachment.getter(&aBlock);
              v42 = aBlock;

              if (*(_QWORD *)(v42 + 16)
                && (v43 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5888]), (v44 & 1) != 0))
              {
                outlined init with copy of TableColumnList(*(_QWORD *)(v42 + 56) + 40 * v43, (uint64_t)&aBlock);
                v45 = v15;
                v46 = v76;
                v47 = v77;
                __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v76);
                v1 = *((_QWORD *)v47 + 1);
                swift_bridgeObjectRetain();
                v48 = v46;
                v15 = v45;
                ((void (*)(__int128 *__return_ptr, void *, id (*)(uint64_t)))v1)(&v79, v48, v47);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
              }
              else
              {
                v79 = 0u;
                v80 = 0u;
                swift_bridgeObjectRetain();
              }
              type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?);
              v9 = v11;
              if ((swift_dynamicCast() & 1) != 0)
              {
                v49 = (void *)aBlock;
                swift_bridgeObjectRelease_n();
              }
              else
              {
                aBlock = 1;
                LOBYTE(v74) = 0;
                swift_bridgeObjectRelease_n();
                v49 = 0;
              }
              v90.value._rawValue = v49;
              v90.is_nil = 1;
              v51 = 0xE200000000000000;
              v52 = (void *)AccessibilityNode.resolvedAttributedTexts(_:includeDefaultAttributes:separator:)(v90, 44, *(Swift::String *)(&v50 - 1));
              swift_bridgeObjectRelease();
              if (v52)
              {
                v53 = v15;
                LOBYTE(v79) = 0;
                v54 = (void *)static NSAttributedStringKey.coreAXLink.getter();
                v55 = NSAttributedString.range.getter();
                v57 = v56;
                v58 = swift_allocObject();
                *(_QWORD *)(v58 + 16) = &v79;
                v1 = swift_allocObject();
                *(_QWORD *)(v1 + 16) = closure #1 in NSAttributedString.hasAccessibilityLinks.getterpartial apply;
                *(_QWORD *)(v1 + 24) = v58;
                v77 = (id (*)(uint64_t))thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply;
                v78 = v1;
                aBlock = MEMORY[0x1E0C809B0];
                v74 = 1107296256;
                v75 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
                v76 = &block_descriptor_45_1;
                v59 = _Block_copy(&aBlock);
                swift_retain();
                swift_release();
                objc_msgSend(v52, sel_enumerateAttribute_inRange_options_usingBlock_, v54, v55, v57, 0, v59);

                _Block_release(v59);
                isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
                swift_release();
                if ((isEscapingClosureAtFileLocation & 1) != 0)
                  goto LABEL_60;
                v1 = v79;

                swift_release();
                v11 = v9;
                v12 = (unint64_t *)&lazy cache variable for type metadata for Any?;
                v13 = &type metadata for AccessibilityTextLayoutProperties;
                if ((v1 & 1) != 0)
                {
                  v9 = &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?;
                  if (objc_msgSend(v53, sel_accessibilitySwiftUIStoredLinkRotor))
                  {
                    _bridgeAnyObjectToAny(_:)();
                    swift_unknownObjectRelease();
                  }
                  else
                  {
                    v79 = 0u;
                    v80 = 0u;
                  }
                  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v79, (uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for Any?);
                  if (v76)
                  {
                    type metadata accessor for UIKitAccessibilityLinkRotorBridge();
                    if ((swift_dynamicCast() & 1) != 0)
                    {
LABEL_55:
                      MEMORY[0x18D75CF58]();
                      if (*(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();

                      v12 = (unint64_t *)&lazy cache variable for type metadata for Any?;
                      goto LABEL_58;
                    }
                    v61 = v11;
                  }
                  else
                  {
                    v61 = v11;
                    outlined destroy of AccessibilityValueStorage?((uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for Any?);
                  }
                  v62 = (objc_class *)type metadata accessor for UIKitAccessibilityLinkRotorBridge();
                  v1 = (uint64_t)objc_allocWithZone(v62);
                  swift_unknownObjectWeakInit();
                  *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_paragraphHash) = 0;
                  *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_elements) = MEMORY[0x1E0DEE9D8];
                  swift_unknownObjectWeakAssign();
                  v63 = swift_allocObject();
                  swift_unknownObjectWeakInit();
                  v77 = partial apply for closure #1 in UIKitAccessibilityLinkRotorBridge.init(for:);
                  v78 = v63;
                  aBlock = MEMORY[0x1E0C809B0];
                  v74 = 1107296256;
                  v75 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
                  v76 = &block_descriptor_50_0;
                  v64 = _Block_copy(&aBlock);
                  v65 = v53;
                  swift_release();
                  v72.receiver = (id)v1;
                  v72.super_class = v62;
                  v66 = objc_msgSendSuper2(&v72, sel_initWithSystemType_itemSearchBlock_, 1, v64);

                  _Block_release(v64);
                  objc_msgSend(v65, sel_setAccessibilitySwiftUIStoredLinkRotor_, v66);
                  v11 = v61;
                  v9 = &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?;
                  goto LABEL_55;
                }

                v9 = &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?;
              }
              else
              {

                v12 = (unint64_t *)&lazy cache variable for type metadata for Any?;
                v9 = &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?;
                v13 = &type metadata for AccessibilityTextLayoutProperties;
              }
LABEL_58:
              v10 = v69;
              continue;
            }

          }
          else
          {
            _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgSgWOi0_((uint64_t)v83);
            outlined init with take of AccessibilityTextLayoutProperties??((uint64_t)v83, (uint64_t)&v84);

            swift_bridgeObjectRelease_n();
          }
        }
        while (v11 != (unint64_t *)v10);
      }
    }
    swift_bridgeObjectRelease_n();
  }
  return v89;
}

uint64_t AccessibilityNode.linkRotor.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  int v13;
  objc_class *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  objc_super v19;
  uint64_t aBlock;
  uint64_t v21;
  void *v22;
  void *v23;
  id (*v24)(uint64_t);
  uint64_t v25;
  unsigned __int8 v26;
  _BYTE v27[128];
  uint64_t v28[17];

  v1 = v0;
  AccessibilityNode.attachment.getter(v28);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v28);
  swift_bridgeObjectRelease_n();
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v28, (uint64_t)v27, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
  outlined release of AccessibilityTextLayoutProperties?((uint64_t)v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityTextLayoutProperties?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v27, (uint64_t)v28, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
  if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v28) == 1)
    return 0;
  v3 = (void *)AccessibilityNode.resolvedAttributedLabel.getter();
  if (!v3)
    return (uint64_t)v3;
  v26 = 0;
  v4 = static NSAttributedStringKey.coreAXLink.getter();
  v5 = NSAttributedString.range.getter();
  v7 = v6;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = &v26;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in NSAttributedString.hasAccessibilityLinks.getter;
  *(_QWORD *)(v9 + 24) = v8;
  v24 = (id (*)(uint64_t))thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply;
  v25 = v9;
  v10 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v21 = 1107296256;
  v22 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v23 = &block_descriptor_28_1;
  v11 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_enumerateAttribute_inRange_options_usingBlock_, v4, v5, v7, 0, v11);

  _Block_release(v11);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v4 & 1) == 0)
  {
    v13 = v26;

    swift_release();
    if (v13 == 1)
    {
      v3 = (void *)AccessibilityNode.currentLinkRotor.getter();
      if (!v3)
      {
        v14 = (objc_class *)type metadata accessor for UIKitAccessibilityLinkRotorBridge();
        v15 = (char *)objc_allocWithZone(v14);
        swift_unknownObjectWeakInit();
        *(_QWORD *)&v15[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_paragraphHash] = 0;
        *(_QWORD *)&v15[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_elements] = MEMORY[0x1E0DEE9D8];
        swift_unknownObjectWeakAssign();
        v16 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v24 = partial apply for closure #1 in UIKitAccessibilityLinkRotorBridge.init(for:);
        v25 = v16;
        aBlock = v10;
        v21 = 1107296256;
        v22 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
        v23 = &block_descriptor_34_1;
        v17 = _Block_copy(&aBlock);
        v18 = v1;
        swift_release();
        v19.receiver = v15;
        v19.super_class = v14;
        v3 = objc_msgSendSuper2(&v19, sel_initWithSystemType_itemSearchBlock_, 1, v17);

        _Block_release(v17);
        objc_msgSend(v18, sel_setAccessibilitySwiftUIStoredLinkRotor_, v3);
      }
      return (uint64_t)v3;
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityNode.currentLinkRotor.getter()
{
  void *v0;
  uint64_t v2;
  _OWORD v3[2];
  _BYTE v4[24];
  uint64_t v5;

  if (objc_msgSend(v0, sel_accessibilitySwiftUIStoredLinkRotor))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v3, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for Any?);
  if (v5)
  {
    type metadata accessor for UIKitAccessibilityLinkRotorBridge();
    if (swift_dynamicCast())
      return v2;
    else
      return 0;
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t AccessibilityNode.visibilityIgnoringAttachment(with:)@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  id v12;
  void *v13;
  _DWORD *v14;
  uint64_t v15;

  v15 = *a1;
  v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  result = swift_beginAccess();
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (!v7)
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_12;
  }
  v14 = a2;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = v6 + 40 * v7 + 8;
  while (v7 <= *(_QWORD *)(v6 + 16))
  {
    v13 = *(void **)(v11 - 8);
    if (*(unsigned __int8 *)(v11 + 16) == 255)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      v12 = v13;
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      v12 = v13;
      if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
      {
        swift_release();

        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
    }
    AccessibilityProperties.visibility.getter();
    swift_release();

    swift_bridgeObjectRelease();
    v8 = HIDWORD(v15) | v10;
    v9 = (v10 | ~HIDWORD(v15)) & v9 | v15 & ~v10;
    v10 |= HIDWORD(v15);
LABEL_5:
    v11 -= 40;
    if (!--v7)
      goto LABEL_11;
  }
  __break(1u);
LABEL_11:
  result = swift_bridgeObjectRelease();
  a2 = v14;
LABEL_12:
  *a2 = v9;
  a2[1] = v8;
  return result;
}

uint64_t AccessibilityNode.visibility.getter@<X0>(int *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment))
    return AccessibilityProperties.visibility.getter();
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v7 = v19;
    v8 = v6 - 1;
    v9 = 40 * v6 - 8;
    while (v8 != -1)
    {
      if (v8 >= *(_QWORD *)(v5 + 16))
        goto LABEL_18;
      result = AccessibilityProperties.visibility.getter();
      v11 = *(_QWORD *)(v19 + 16);
      v10 = *(_QWORD *)(v19 + 24);
      if (v11 >= v10 >> 1)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
      *(_QWORD *)(v19 + 16) = v11 + 1;
      *(_QWORD *)(v19 + 8 * v11 + 32) = v18;
      --v8;
      v9 -= 40;
      if (v8 == -1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_11:
    v12 = *(_QWORD *)(v7 + 16);
    if (v12)
    {
      v13 = 0;
      v14 = 0;
      v15 = (int *)(v7 + 36);
      do
      {
        v16 = *v15;
        v17 = *v15 | v14;
        v13 = (v14 | ~*v15) & v13 | *(v15 - 1) & ~v14;
        v15 += 2;
        v14 |= v16;
        --v12;
      }
      while (v12);
    }
    else
    {
      v17 = 0;
      v13 = 0;
    }
    result = swift_bridgeObjectRelease();
    *a1 = v13;
    a1[1] = v17;
  }
  return result;
}

void AccessibilityNode.impliedVisibility(consideringParent:with:)(char a1@<W0>, unsigned __int8 *a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23[3];
  int v24[7];
  unsigned __int8 v25;

  v4 = v3;
  v7 = *a2;
  AccessibilityNode.visibility.getter(v24);
  v23[0] = *(_QWORD *)v24;
  AccessibilityNullableOptionSet<>.resolved.getter();
  v8 = v25;
  if (v25 == 3)
    goto LABEL_2;
  v10 = MEMORY[0x18D760234](v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);
  if (v10)
  {
    v11 = (void *)v10;
    if (v7 == 4)
    {
      LOBYTE(v23[0]) = 4;
      AccessibilityNode.impliedVisibility(consideringParent:with:)(v24, a1 & 1, v23);
      v7 = LOBYTE(v24[0]);
    }
    if (v7 == 3)
    {

      v9 = 3;
      goto LABEL_28;
    }
    if (!v7 && (a1 & 1) != 0)
    {
      AccessibilityNode.platformElement.getter();
      v13 = v12;

      if (!v13)
      {
LABEL_2:
        v9 = 3;
        goto LABEL_28;
      }
      v11 = v13;
    }

  }
  v14 = AccessibilityNode.isPlaceholderOrIgnored.getter() & 1;
  if (v14)
    v9 = 3;
  else
    v9 = v8;
  if (!v14 && v8 == 4)
  {
    v15 = (unint64_t *)(v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
    swift_beginAccess();
    v16 = *v15;
    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17)
        goto LABEL_20;
    }
    else if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_20:
      v9 = 2;
      goto LABEL_28;
    }
    v18 = MEMORY[0x18D760234](v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_bridgedChild);
    if (v18)
    {
      v19 = (void *)v18;
      v20 = (unint64_t *)(v18 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
      swift_beginAccess();
      v21 = *v20;
      swift_bridgeObjectRetain();

    }
    else
    {
      v21 = MEMORY[0x1E0DEE9D8];
    }
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain();
      v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v9 = 2 * (v22 != 0);
  }
LABEL_28:
  *a3 = v9;
}

uint64_t AccessibilityNode.resolvedContainerType.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  uint64_t v4;
  id v5;
  unsigned __int8 v6;
  _BYTE v7[312];
  id v8[39];

  AccessibilityNode.attachment.getter((uint64_t *)v8);

  v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)v8);
  swift_bridgeObjectRelease_n();
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v8, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?);
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v7);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v7, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v8) != 1)
    return 13;
  AccessibilityNode.attachment.getter(&v4);

  v1 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v1, (uint64_t)&v4);
  swift_bridgeObjectRelease_n();
  if (v6)
  {
    if (v6 == 255)
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v4, &lazy cache variable for type metadata for AccessibilityTableContext?);
    else
      outlined destroy of AccessibilityTableContext((uint64_t)&v4);
    LOBYTE(v4) = 4;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v4, &v3);
    if (v3 == 1)
    {
      AccessibilityNode.attachment.getter(&v4);

      AccessibilityProperties.traits.getter();
      swift_bridgeObjectRelease();
      if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) != 0)
        return 11;
      else
        return 4;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    outlined destroy of AccessibilityTableContext((uint64_t)&v4);
    return 1;
  }
}

uint64_t AccessibilityNode.isPlaceholderOrIgnored.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  char v3;
  uint64_t result;
  char v5;
  __int128 v6;

  v1 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored;
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored);
  if (v2 != 2)
    return v2 & 1;
  AccessibilityNode.traits.getter((uint64_t *)&v6);
  v3 = AccessibilityNullableOptionSet<>.subscript.getter();
  AccessibilityNode.traits.getter((uint64_t *)&v6);
  v5 = v6;
  if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) != 0 || (result = 0, (v3 & 1) != 0))
  {
    v6 = *(_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    EnvironmentValues.redactionReasons.getter();
    result = v5 & 1;
  }
  *(_BYTE *)(v0 + v1) = result;
  return result;
}

uint64_t AccessibilityNode.contentPath.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  double v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  id v68;
  id v69;
  int v70;
  uint64_t v72;
  unsigned __int8 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  int v80;
  id v81;
  __int128 v82;
  __int128 v83;
  unsigned __int8 v84;
  __int128 v85;
  __int128 v86;
  unsigned __int8 v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;

  v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_isFromDisplayList) != 1)
  {
    swift_beginAccess();
    v55 = *v2;
    v56 = *(_QWORD *)(*v2 + 16);
    if (v56)
    {
      result = swift_bridgeObjectRetain();
      v57 = v55 + 40 * v56;
      while (1)
      {
        if (v56 > *(_QWORD *)(v55 + 16))
          goto LABEL_42;
        v64 = *(_QWORD *)(v57 + 8);
        if (v64)
        {
          v65 = *(unsigned __int8 *)(v64 + 16);
          v81 = *(id *)v57;
          swift_retain_n();
          v66 = v55;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v65 == 1)
            AccessibilityGeometryStorage.updatePath()();
          v59 = *(_QWORD *)(v64 + 144);
          v58 = *(_QWORD *)(v64 + 152);
          v60 = *(_QWORD *)(v64 + 160);
          v61 = *(_QWORD *)(v64 + 168);
          v62 = *(unsigned __int8 *)(v64 + 176);
          outlined copy of Path?(v59, v58, v60, v61, *(_BYTE *)(v64 + 176));
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_release_n();
          v63 = v60;
          v55 = v66;
          result = outlined consume of Path?(v59, v58, v63, v61, v62);
          if (v62 != 255)
            break;
        }
        v57 -= 40;
        if (!--v56)
          goto LABEL_33;
      }
      if (v56 > *(_QWORD *)(v66 + 16))
      {
LABEL_43:
        __break(1u);
        return result;
      }
      v11 = *(_QWORD *)(v57 + 8);
      if (!v11)
        goto LABEL_41;
      v67 = *(unsigned __int8 *)(v11 + 16);
      v68 = *(id *)v57;
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      v69 = v68;
      if (v67 == 1)
        AccessibilityGeometryStorage.updatePath()();
      v6 = *(_QWORD *)(v11 + 144);
      v7 = *(_QWORD *)(v11 + 152);
      v8 = *(_QWORD *)(v11 + 160);
      v9 = *(_QWORD *)(v11 + 168);
      v70 = *(unsigned __int8 *)(v11 + 176);
      outlined copy of Path?(v6, v7, v8, v9, *(_BYTE *)(v11 + 176));

      swift_bridgeObjectRelease_n();
      LOBYTE(v11) = v70;
      result = swift_release_n();
      if (v70 == 255)
      {
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_33:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      LOBYTE(v11) = -1;
    }
LABEL_34:
    result = swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  result = swift_beginAccess();
  v4 = *v2;
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain_n();
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = (uint64_t *)(v4 + 48);
    LODWORD(v11) = 255;
    while (1)
    {
      v12 = *v10;
      if (*v10)
      {
        v80 = v11;
        v13 = *(unsigned __int8 *)(v12 + 16);
        v14 = (id)*(v10 - 1);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v13 == 1)
          AccessibilityGeometryStorage.updatePath()();
        if (*(unsigned __int8 *)(v12 + 176) != 255)
        {
          v77 = v5;
          v78 = v14;
          v15 = v8;
          v16 = *(_QWORD *)(v12 + 144);
          v17 = *(_QWORD *)(v12 + 152);
          v18 = *(_QWORD *)(v12 + 160);
          *(_QWORD *)&v85 = v16;
          *((_QWORD *)&v85 + 1) = v17;
          v19 = v6;
          v20 = v7;
          v21 = *(_QWORD *)(v12 + 168);
          v22 = v20;
          *(_QWORD *)&v86 = v18;
          *((_QWORD *)&v86 + 1) = v21;
          v87 = *(_BYTE *)(v12 + 176);
          v23 = v15;
          v24 = v9;
          v25 = v9;
          v26 = v80;
          if ((_BYTE)v80 == 0xFF)
          {
            v19 = 0;
            v22 = 0;
            v23 = 0;
            v25 = 0;
            v26 = 6;
          }
          *(_QWORD *)&v82 = v19;
          *((_QWORD *)&v82 + 1) = v22;
          *(_QWORD *)&v83 = v23;
          *((_QWORD *)&v83 + 1) = v25;
          v84 = v26;
          v75 = v22;
          v76 = v19;
          v74 = v23;
          v72 = v25;
          v73 = v26;
          v27 = v20;
          v79 = v24;
          outlined copy of Path?(v6, v20, v15, v24, v80);
          outlined copy of Path?(v16, v17, v18, v21, v87);
          if ((Path.isEmpty.getter() & 1) != 0)
          {
            outlined consume of Path?(v16, v17, v18, v21, v87);
            swift_release();
            swift_bridgeObjectRelease();

            v28 = v6;
            v29 = v27;
            v30 = v15;
            goto LABEL_20;
          }
          Path.boundingRect.getter();
          v89 = CGRectStandardize(v88);
          if (!CGRectIsEmpty(v89))
          {
            Path.boundingRect.getter();
            v32 = v31;
            v34 = v33;
            v36 = v35;
            v38 = v37;
            Path.boundingRect.getter();
            v92.origin.x = v39;
            v92.origin.y = v40;
            v92.size.width = v41;
            v92.size.height = v42;
            v90.origin.x = v32;
            v90.origin.y = v34;
            v90.size.width = v36;
            v90.size.height = v38;
            if (CGRectContainsRect(v90, v92))
            {
              outlined consume of Path.Storage(v76, v75, v74, v72, v73);
              swift_release();
              swift_bridgeObjectRelease();

              outlined consume of Path?(v6, v27, v15, v79, v80);
              v82 = v85;
              v83 = v86;
              v84 = v87;
              goto LABEL_21;
            }
            Path.boundingRect.getter();
            v44 = v43;
            v46 = v45;
            v48 = v47;
            v50 = v49;
            Path.boundingRect.getter();
            v93.origin.x = v51;
            v93.origin.y = v52;
            v93.size.width = v53;
            v93.size.height = v54;
            v91.origin.x = v44;
            v91.origin.y = v46;
            v91.size.width = v48;
            v91.size.height = v50;
            if (!CGRectContainsRect(v91, v93))
              Path.formTrivialUnion(_:)();
          }
          outlined consume of Path?(v16, v17, v18, v21, v87);
          swift_release();
          swift_bridgeObjectRelease();

          v28 = v6;
          v30 = v15;
          v29 = v27;
LABEL_20:
          outlined consume of Path?(v28, v29, v30, v79, v80);
LABEL_21:
          v7 = *((_QWORD *)&v82 + 1);
          v6 = v82;
          v9 = *((_QWORD *)&v83 + 1);
          v8 = v83;
          LODWORD(v11) = v84;
          v5 = v77;
          goto LABEL_5;
        }
        swift_release();
        swift_bridgeObjectRelease();

        LODWORD(v11) = v80;
      }
LABEL_5:
      v10 += 5;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
    }
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  LOBYTE(v11) = -1;
LABEL_35:
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v11;
  return result;
}

uint64_t AccessibilityNode.contentFrameFromChildren(with:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  uint64_t v21;
  int v22;
  id v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  double v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t result;
  uint64_t v76;
  int v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  char v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  void *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  char v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  int v110;
  id v111;
  id v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  id v118;
  char v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  id v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  double v146;
  CGFloat v147;
  double v148;
  CGFloat v149;
  double v150;
  CGFloat v151;
  double v152;
  CGFloat v153;
  CGFloat v154;
  CGFloat v155;
  CGFloat v156;
  CGFloat v157;
  double v158;
  CGFloat v159;
  double v160;
  CGFloat v161;
  double v162;
  CGFloat v163;
  double v164;
  CGFloat v165;
  CGFloat v166;
  CGFloat v167;
  CGFloat v168;
  CGFloat v169;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned __int8 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int8 v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 v195;
  id v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  char v203;
  __int128 v204;
  __int128 v205;
  char v206;
  _BYTE v207[40];
  uint64_t v208;
  char v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  _OWORD v217[2];
  unsigned __int8 v218;
  __int128 v219;
  __int128 v220;
  unsigned __int8 v221;
  _OWORD v222[2];
  char v223;
  __int128 v224;
  __int128 v225;
  char v226;
  __int128 v227;
  __int128 v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  CGRect v235;
  CGRect v236;
  CGRect v237;
  CGRect v238;
  CGRect v239;
  CGRect v240;
  CGRect v241;
  CGRect v242;
  CGRect v243;
  CGRect v244;
  CGRect v245;
  CGRect v246;
  CGRect v247;
  CGRect v248;
  CGRect v249;

  v176 = *a1;
  v3 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
  swift_beginAccess();
  v175 = *v3;
  if ((unint64_t)*v3 >> 62)
    goto LABEL_114;
  v4 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  while (v4)
  {
    v5 = 0;
    v6 = (char *)MEMORY[0x1E0DEE9D8];
    v177 = v4;
    while (1)
    {
      v179 = v6;
      if ((v175 & 0xC000000000000001) != 0)
      {
        v8 = v5;
        v9 = (char *)MEMORY[0x18D75E3BC](v5, v175);
        v10 = __OFADD__(v8, 1);
        v11 = v8 + 1;
        if (v10)
          goto LABEL_112;
      }
      else
      {
        v12 = v5;
        v9 = (char *)*(id *)(v175 + 32 + 8 * v5);
        v10 = __OFADD__(v12, 1);
        v11 = v12 + 1;
        if (v10)
        {
LABEL_112:
          __break(1u);
          goto LABEL_113;
        }
      }
      v178 = v11;
      v180 = v9;
      v13 = &v9[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      if (v9[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_isFromDisplayList] != 1)
        break;
      swift_beginAccess();
      v14 = *(_QWORD *)v13;
      v15 = *(_QWORD *)(v14 + 16);
      if (!v15)
        goto LABEL_45;
      swift_bridgeObjectRetain_n();
      v16 = 0;
      v17 = 0;
      v194 = 0;
      v18 = 0;
      v19 = (uint64_t *)(v14 + 48);
      v20 = -1;
      do
      {
        v21 = *v19;
        if (!*v19)
          goto LABEL_15;
        v195 = v20;
        v22 = *(unsigned __int8 *)(v21 + 16);
        v23 = (id)*(v19 - 1);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v22 == 1)
          AccessibilityGeometryStorage.updatePath()();
        v24 = *(unsigned __int8 *)(v21 + 176);
        if (v24 == 255)
        {
          swift_release();
          swift_bridgeObjectRelease();

          goto LABEL_15;
        }
        v188 = v23;
        v25 = v18;
        v26 = *(_QWORD *)(v21 + 144);
        v27 = *(_QWORD *)(v21 + 152);
        v29 = *(_QWORD *)(v21 + 160);
        v28 = *(_QWORD *)(v21 + 168);
        *(_QWORD *)&v227 = v26;
        *((_QWORD *)&v227 + 1) = v27;
        v30 = v16;
        v31 = v17;
        *(_QWORD *)&v228 = v29;
        *((_QWORD *)&v228 + 1) = v28;
        v229 = v24;
        v32 = v17;
        v33 = v194;
        v34 = v25;
        v35 = v16;
        v36 = v25;
        v37 = v195;
        v191 = v24;
        if (v195 == 0xFF)
        {
          v30 = 0;
          v31 = 0;
          v33 = 0;
          v36 = 0;
          v37 = 6;
        }
        *(_QWORD *)&v200 = v30;
        *((_QWORD *)&v200 + 1) = v31;
        *(_QWORD *)&v201 = v33;
        *((_QWORD *)&v201 + 1) = v36;
        LOBYTE(v202) = v37;
        v184 = v31;
        v185 = v30;
        v230 = v30;
        v231 = v31;
        v181 = v36;
        v182 = v33;
        v232 = v33;
        v233 = v36;
        v183 = v37;
        v234 = v37;
        v38 = v16;
        v39 = v32;
        v189 = v34;
        outlined copy of Path?(v38, v32, v194, v34, v195);
        outlined copy of Path?(v26, v27, v29, v28, v191);
        if ((Path.isEmpty.getter() & 1) != 0)
        {
          outlined consume of Path?(v26, v27, v29, v28, v191);
          swift_release();
          swift_bridgeObjectRelease();

          v40 = v35;
          v41 = v39;
          v42 = v194;
        }
        else
        {
          Path.boundingRect.getter();
          v236 = CGRectStandardize(v235);
          if (!CGRectIsEmpty(v236))
          {
            Path.boundingRect.getter();
            v44 = v43;
            v46 = v45;
            v48 = v47;
            v50 = v49;
            Path.boundingRect.getter();
            v246.origin.x = v51;
            v246.origin.y = v52;
            v246.size.width = v53;
            v246.size.height = v54;
            v237.origin.x = v44;
            v237.origin.y = v46;
            v237.size.width = v48;
            v237.size.height = v50;
            if (CGRectContainsRect(v237, v246))
            {
              outlined consume of Path.Storage(v185, v184, v182, v181, v183);
              swift_release();
              swift_bridgeObjectRelease();

              outlined consume of Path?(v35, v39, v194, v189, v195);
              v200 = v227;
              v201 = v228;
              LOBYTE(v202) = v229;
            }
            else
            {
              Path.boundingRect.getter();
              v56 = v55;
              v58 = v57;
              v60 = v59;
              v62 = v61;
              Path.boundingRect.getter();
              v247.origin.x = v63;
              v247.origin.y = v64;
              v247.size.width = v65;
              v247.size.height = v66;
              v238.origin.x = v56;
              v238.origin.y = v58;
              v238.size.width = v60;
              v238.size.height = v62;
              if (!CGRectContainsRect(v238, v247))
                Path.formTrivialUnion(_:)();
              outlined consume of Path?(v26, v27, v29, v28, v191);
              swift_release();
              swift_bridgeObjectRelease();

              outlined consume of Path?(v35, v39, v194, v189, v195);
            }
            goto LABEL_27;
          }
          outlined consume of Path?(v26, v27, v29, v28, v191);
          swift_release();
          swift_bridgeObjectRelease();

          v41 = v39;
          v40 = v35;
          v42 = v194;
        }
        outlined consume of Path?(v40, v41, v42, v189, v195);
LABEL_27:
        v17 = *((_QWORD *)&v200 + 1);
        v16 = v200;
        v18 = *((_QWORD *)&v201 + 1);
        v194 = v201;
        v20 = v202;
LABEL_15:
        v19 += 5;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease_n();
      if (v20 != -1)
      {
        v78 = v16;

        goto LABEL_101;
      }
LABEL_46:
      LOBYTE(v200) = v176;
      AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v200, (char *)v222);
      v79 = v222[0];
      v190 = v18;
      v187 = v16;
      if (LOBYTE(v222[0]) != 2)
      {
        AccessibilityNode.contentPath.getter((uint64_t)v207);
        outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v207, (uint64_t)v217, &lazy cache variable for type metadata for Path?);
        if (v218 != 255)
        {
          v219 = v217[0];
          v220 = v217[1];
          v221 = v218;
          Path.boundingRect.getter();
          CGRectStandardize(v239);
          outlined retain of TableColumnCustomizationID.Base((uint64_t)v207, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path?);
          goto LABEL_100;
        }
        v192 = v79;
        v186 = v17;
        v95 = &v180[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        v96 = *(_QWORD *)v95;
        v97 = *(_QWORD *)(*(_QWORD *)v95 + 16);
        if (v97)
        {
          swift_bridgeObjectRetain();
          v98 = v96 + 40 * v97;
          while (1)
          {
            if (v97 > *(_QWORD *)(v96 + 16))
              goto LABEL_111;
            v101 = *(_QWORD *)(v98 + 8);
            if (v101)
            {
              v102 = *(void **)v98;
              if ((*(_BYTE *)(v101 + 17) & 1) == 0
                || (*(_BYTE *)(v101 + 17) = 0, (*(_BYTE *)(v101 + 80) & 1) != 0)
                || (v103 = *(_QWORD *)(v101 + 24), v103 == 1))
              {
                v99 = v102;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v105 = *(_QWORD *)(v101 + 56);
                v104 = *(_QWORD *)(v101 + 48);
                v106 = *(_QWORD *)(v101 + 32);
                v107 = *(_QWORD *)(v101 + 40);
                v224 = 0uLL;
                v225 = *(_OWORD *)(v101 + 64);
                v202 = 0;
                v200 = 0u;
                v201 = 0u;
                v203 = 2;
                *(_QWORD *)&v197 = v103;
                *((_QWORD *)&v197 + 1) = v106;
                *(_QWORD *)&v198 = v107;
                *((_QWORD *)&v198 + 1) = v104;
                v199 = v105;
                v99 = v102;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Transaction?(v103);
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v200);
                outlined consume of Transaction?(v103);
                v108 = v225;
                *(_OWORD *)(v101 + 88) = v224;
                *(_OWORD *)(v101 + 104) = v108;
                *(_BYTE *)(v101 + 120) = 0;
              }
              v100 = *(_BYTE *)(v101 + 120);
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              result = swift_release_n();
              if ((v100 & 1) == 0)
                break;
            }
            v98 -= 40;
            if (!--v97)
              goto LABEL_89;
          }
          if (v97 <= *(_QWORD *)(v96 + 16))
          {
            v120 = *(_QWORD *)(v98 + 8);
            if (!v120)
              goto LABEL_132;
            v121 = *(void **)v98;
            if (*(_BYTE *)(v120 + 17) != 1
              || (*(_BYTE *)(v120 + 17) = 0, (*(_BYTE *)(v120 + 80) & 1) != 0)
              || (v122 = *(_QWORD *)(v120 + 24), v122 == 1))
            {
              v123 = v121;
              swift_retain_n();
              swift_bridgeObjectRetain();
            }
            else
            {
              v136 = *(_QWORD *)(v120 + 48);
              v135 = *(_QWORD *)(v120 + 56);
              v138 = *(_QWORD *)(v120 + 32);
              v137 = *(_QWORD *)(v120 + 40);
              v224 = 0uLL;
              v225 = *(_OWORD *)(v120 + 64);
              v202 = 0;
              v200 = 0u;
              v201 = 0u;
              v203 = 2;
              *(_QWORD *)&v197 = v122;
              *((_QWORD *)&v197 + 1) = v138;
              *(_QWORD *)&v198 = v137;
              *((_QWORD *)&v198 + 1) = v136;
              v199 = v135;
              v123 = v121;
              swift_retain_n();
              swift_bridgeObjectRetain();
              outlined copy of Transaction?(v122);
              CGRect.convert(to:transform:)();
              outlined destroy of CoordinateSpace((uint64_t)&v200);
              outlined consume of Transaction?(v122);
              v139 = v225;
              *(_OWORD *)(v120 + 88) = v224;
              *(_OWORD *)(v120 + 104) = v139;
              *(_BYTE *)(v120 + 120) = 0;
            }
            v124 = *(_BYTE *)(v120 + 120);

            swift_bridgeObjectRelease();
            result = swift_release_n();
            if ((v124 & 1) != 0)
              goto LABEL_132;
            goto LABEL_98;
          }
          goto LABEL_129;
        }
        swift_bridgeObjectRetain();
LABEL_89:
        swift_bridgeObjectRelease();
        LOBYTE(v200) = v192;
        v94 = v180;
        AccessibilityNode.contentFrameFromChildren(with:)(&v210, &v200);
        if ((v211 & 1) == 0)
          goto LABEL_99;
LABEL_4:
        outlined consume of Path?(v187, v186, v194, v190, 0xFFu);

        v5 = v178;
        v6 = v179;
        v7 = v177;
        goto LABEL_5;
      }
      v186 = v17;
      v80 = &v180[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      swift_beginAccess();
      v81 = *(_QWORD *)v80;
      v82 = *(_QWORD *)(*(_QWORD *)v80 + 16);
      if (!v82)
      {
        swift_bridgeObjectRetain();
LABEL_61:
        swift_bridgeObjectRelease();
        LOBYTE(v200) = 2;
        v94 = v180;
        AccessibilityNode.contentFrameFromChildren(with:)(&v208, &v200);
        if ((v209 & 1) == 0)
          goto LABEL_99;
        goto LABEL_4;
      }
      swift_bridgeObjectRetain();
      v83 = v81 + 40 * v82;
      while (1)
      {
        if (v82 > *(_QWORD *)(v81 + 16))
          goto LABEL_110;
        v86 = *(_QWORD *)(v83 + 8);
        if (v86)
        {
          v87 = *(void **)v83;
          if ((*(_BYTE *)(v86 + 17) & 1) == 0
            || (*(_BYTE *)(v86 + 17) = 0, (*(_BYTE *)(v86 + 80) & 1) != 0)
            || (v88 = *(_QWORD *)(v86 + 24), v88 == 1))
          {
            v84 = v87;
            swift_retain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v90 = *(_QWORD *)(v86 + 56);
            v89 = *(_QWORD *)(v86 + 48);
            v91 = *(_QWORD *)(v86 + 32);
            v92 = *(_QWORD *)(v86 + 40);
            v224 = 0uLL;
            v225 = *(_OWORD *)(v86 + 64);
            v202 = 0;
            v200 = 0u;
            v201 = 0u;
            v203 = 2;
            *(_QWORD *)&v197 = v88;
            *((_QWORD *)&v197 + 1) = v91;
            *(_QWORD *)&v198 = v92;
            *((_QWORD *)&v198 + 1) = v89;
            v199 = v90;
            v84 = v87;
            swift_retain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Transaction?(v88);
            CGRect.convert(to:transform:)();
            outlined destroy of CoordinateSpace((uint64_t)&v200);
            outlined consume of Transaction?(v88);
            v93 = v225;
            *(_OWORD *)(v86 + 88) = v224;
            *(_OWORD *)(v86 + 104) = v93;
            *(_BYTE *)(v86 + 120) = 0;
          }
          v85 = *(_BYTE *)(v86 + 120);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          result = swift_release_n();
          if ((v85 & 1) == 0)
            break;
        }
        v83 -= 40;
        if (!--v82)
          goto LABEL_61;
      }
      if (v82 > *(_QWORD *)(v81 + 16))
      {
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      v115 = *(_QWORD *)(v83 + 8);
      if (!v115)
        goto LABEL_131;
      v116 = *(void **)v83;
      if (*(_BYTE *)(v115 + 17) != 1
        || (*(_BYTE *)(v115 + 17) = 0, (*(_BYTE *)(v115 + 80) & 1) != 0)
        || (v117 = *(_QWORD *)(v115 + 24), v117 == 1))
      {
        v118 = v116;
        swift_retain_n();
        swift_bridgeObjectRetain();
      }
      else
      {
        v131 = *(_QWORD *)(v115 + 48);
        v130 = *(_QWORD *)(v115 + 56);
        v133 = *(_QWORD *)(v115 + 32);
        v132 = *(_QWORD *)(v115 + 40);
        v224 = 0uLL;
        v225 = *(_OWORD *)(v115 + 64);
        v202 = 0;
        v200 = 0u;
        v201 = 0u;
        v203 = 2;
        *(_QWORD *)&v197 = v117;
        *((_QWORD *)&v197 + 1) = v133;
        *(_QWORD *)&v198 = v132;
        *((_QWORD *)&v198 + 1) = v131;
        v199 = v130;
        v118 = v116;
        swift_retain_n();
        swift_bridgeObjectRetain();
        outlined copy of Transaction?(v117);
        CGRect.convert(to:transform:)();
        outlined destroy of CoordinateSpace((uint64_t)&v200);
        outlined consume of Transaction?(v117);
        v134 = v225;
        *(_OWORD *)(v115 + 88) = v224;
        *(_OWORD *)(v115 + 104) = v134;
        *(_BYTE *)(v115 + 120) = 0;
      }
      v119 = *(_BYTE *)(v115 + 120);

      swift_bridgeObjectRelease();
      result = swift_release_n();
      if ((v119 & 1) != 0)
      {
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
        return result;
      }
LABEL_98:
      swift_bridgeObjectRelease();
LABEL_99:
      v17 = v186;
LABEL_100:
      Path.init(_:)();
      v78 = v212;
      v125 = v213;
      v126 = v214;
      v18 = v215;
      v20 = v216;
      outlined consume of Path?(v187, v17, v194, v190, 0xFFu);

      v17 = v125;
      v194 = v126;
LABEL_101:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v6 = v179;
      else
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v179 + 2) + 1, 1, v179);
      v128 = *((_QWORD *)v6 + 2);
      v127 = *((_QWORD *)v6 + 3);
      v7 = v177;
      v5 = v178;
      if (v128 >= v127 >> 1)
      {
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v127 > 1), v128 + 1, 1, v6);
        v5 = v178;
        v7 = v177;
      }
      *((_QWORD *)v6 + 2) = v128 + 1;
      v129 = &v6[40 * v128];
      *((_QWORD *)v129 + 4) = v78;
      *((_QWORD *)v129 + 5) = v17;
      *((_QWORD *)v129 + 6) = v194;
      *((_QWORD *)v129 + 7) = v18;
      v129[64] = v20;
LABEL_5:
      if (v5 == v7)
        goto LABEL_116;
    }
    swift_beginAccess();
    v67 = *(_QWORD *)v13;
    v68 = *(_QWORD *)(*(_QWORD *)v13 + 16);
    if (!v68)
    {
      swift_bridgeObjectRetain();
LABEL_44:
      swift_bridgeObjectRelease();
LABEL_45:
      v16 = 0;
      v17 = 0;
      v194 = 0;
      v18 = 0;
      goto LABEL_46;
    }
    swift_bridgeObjectRetain();
    v69 = v67 + 40 * v68;
    v193 = v67;
    while (1)
    {
      if (v68 > *(_QWORD *)(v67 + 16))
      {
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      v76 = *(_QWORD *)(v69 + 8);
      if (v76)
      {
        v77 = *(unsigned __int8 *)(v76 + 16);
        v196 = *(id *)v69;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v77 == 1)
          AccessibilityGeometryStorage.updatePath()();
        v70 = *(_QWORD *)(v76 + 144);
        v71 = *(_QWORD *)(v76 + 152);
        v73 = *(_QWORD *)(v76 + 160);
        v72 = *(_QWORD *)(v76 + 168);
        v74 = *(unsigned __int8 *)(v76 + 176);
        outlined copy of Path?(v70, v71, v73, v72, *(_BYTE *)(v76 + 176));
        v67 = v193;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_release_n();
        result = outlined consume of Path?(v70, v71, v73, v72, v74);
        if (v74 != 255)
          break;
      }
      v69 -= 40;
      if (!--v68)
        goto LABEL_44;
    }
    if (v68 <= *(_QWORD *)(v193 + 16))
    {
      v109 = *(_QWORD *)(v69 + 8);
      if (v109)
      {
        v110 = *(unsigned __int8 *)(v109 + 16);
        v111 = *(id *)v69;
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        v112 = v111;
        if (v110 == 1)
          AccessibilityGeometryStorage.updatePath()();
        v17 = *(_QWORD *)(v109 + 152);
        v113 = *(unsigned __int8 *)(v109 + 176);
        v78 = *(_QWORD *)(v109 + 144);
        v194 = *(_QWORD *)(v109 + 160);
        v114 = *(_QWORD *)(v109 + 168);
        outlined copy of Path?(v78, v17, v194, v114, *(_BYTE *)(v109 + 176));

        swift_bridgeObjectRelease_n();
        result = swift_release_n();
        if (v113 != 255)
        {
          v20 = v113;

          swift_bridgeObjectRelease();
          v18 = v114;
          goto LABEL_101;
        }
      }
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
LABEL_113:
    __break(1u);
LABEL_114:
    swift_bridgeObjectRetain_n();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v6 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_116:
  v140 = v6;
  swift_bridgeObjectRelease_n();
  v204 = 0u;
  v205 = 0u;
  v206 = 6;
  v141 = *((_QWORD *)v140 + 2);
  if (!v141)
    goto LABEL_127;
  swift_bridgeObjectRetain();
  v142 = v140;
  v143 = 32;
  do
  {
    v144 = *(_OWORD *)&v142[v143];
    v145 = *(_OWORD *)&v142[v143 + 16];
    v226 = v142[v143 + 32];
    v224 = v144;
    v225 = v145;
    outlined init with take of Path.Storage((uint64_t)&v224, (uint64_t)&v200);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)&v200, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path.Storage);
    if ((Path.isEmpty.getter() & 1) != 0)
      goto LABEL_118;
    Path.boundingRect.getter();
    v241 = CGRectStandardize(v240);
    if (CGRectIsEmpty(v241))
      goto LABEL_118;
    Path.boundingRect.getter();
    v147 = v146;
    v149 = v148;
    v151 = v150;
    v153 = v152;
    v197 = v204;
    v198 = v205;
    LOBYTE(v199) = v206;
    Path.boundingRect.getter();
    v248.origin.x = v154;
    v248.origin.y = v155;
    v248.size.width = v156;
    v248.size.height = v157;
    v242.origin.x = v147;
    v242.origin.y = v149;
    v242.size.width = v151;
    v242.size.height = v153;
    if (!CGRectContainsRect(v242, v248))
    {
      Path.boundingRect.getter();
      v159 = v158;
      v161 = v160;
      v163 = v162;
      v165 = v164;
      Path.boundingRect.getter();
      v249.origin.x = v166;
      v249.origin.y = v167;
      v249.size.width = v168;
      v249.size.height = v169;
      v243.origin.x = v159;
      v243.origin.y = v161;
      v243.size.width = v163;
      v243.size.height = v165;
      if (!CGRectContainsRect(v243, v249))
        Path.formTrivialUnion(_:)();
LABEL_118:
      outlined retain of TableColumnCustomizationID.Base((uint64_t)&v224, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
      goto LABEL_119;
    }
    outlined retain of TableColumnCustomizationID.Base((uint64_t)&v197, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
    v204 = v224;
    v205 = v225;
    v206 = v226;
LABEL_119:
    v143 += 40;
    --v141;
    v142 = v140;
  }
  while (v141);
  swift_bridgeObjectRelease();
LABEL_127:
  swift_bridgeObjectRelease();
  v222[0] = v204;
  v222[1] = v205;
  v223 = v206;
  Path.boundingRect.getter();
  v245 = CGRectStandardize(v244);
  x = v245.origin.x;
  y = v245.origin.y;
  width = v245.size.width;
  height = v245.size.height;
  result = outlined retain of TableColumnCustomizationID.Base((uint64_t)v222, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path.Storage);
  *(CGFloat *)a2 = x;
  *(CGFloat *)(a2 + 8) = y;
  *(CGFloat *)(a2 + 16) = width;
  *(CGFloat *)(a2 + 24) = height;
  *(_BYTE *)(a2 + 32) = 0;
  return result;
}

uint64_t AccessibilityNode.contentFrame(with:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned __int8 v8;
  uint64_t result;
  char v10;
  char v11;
  _BYTE v12[40];
  _QWORD v13[4];
  unsigned __int8 v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unsigned __int8 v19;
  __int128 v20;
  __int128 v21;
  unsigned __int8 v22;
  _OWORD v23[2];
  unsigned __int8 v24;
  CGRect v25;
  CGRect v26;

  LOBYTE(v23[0]) = *a1;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)v23, &v11);
  v3 = v11;
  if (v11 == 2)
  {
    AccessibilityNode.globalFrame.getter((uint64_t)&v15);
    x = v15;
    y = v16;
    width = v17;
    height = v18;
    v8 = v19;
    result = outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)&v15, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v24 == 1)
    {
      LOBYTE(v13[0]) = 2;
      result = AccessibilityNode.contentFrameFromChildren(with:)((char *)v13, (uint64_t)&v20);
      y = *((double *)&v20 + 1);
      x = *(double *)&v20;
      height = *((double *)&v21 + 1);
      width = *(double *)&v21;
      v8 = v22;
    }
  }
  else
  {
    AccessibilityNode.contentPath.getter((uint64_t)v12);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)&v20, &lazy cache variable for type metadata for Path?);
    if (v22 == 255)
    {
      AccessibilityNode.globalFrame.getter((uint64_t)v13);
      x = *(double *)v13;
      y = *(double *)&v13[1];
      width = *(double *)&v13[2];
      height = *(double *)&v13[3];
      v8 = v14;
      result = outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)v13, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      if (v24 == 1)
      {
        v10 = v3;
        result = AccessibilityNode.contentFrameFromChildren(with:)(&v10, (uint64_t)&v15);
        x = v15;
        y = v16;
        width = v17;
        height = v18;
        v8 = v19;
      }
    }
    else
    {
      v23[0] = v20;
      v23[1] = v21;
      v24 = v22;
      Path.boundingRect.getter();
      v26 = CGRectStandardize(v25);
      x = v26.origin.x;
      y = v26.origin.y;
      width = v26.size.width;
      height = v26.size.height;
      result = outlined retain of TableColumnCustomizationID.Base((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path?);
      v8 = 0;
    }
  }
  *(CGFloat *)a2 = x;
  *(CGFloat *)(a2 + 8) = y;
  *(CGFloat *)(a2 + 16) = width;
  *(CGFloat *)(a2 + 24) = height;
  *(_BYTE *)(a2 + 32) = v8;
  return result;
}

uint64_t AccessibilityNode.globalFrame.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  id v7;
  int v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  id v20;
  char v21;
  _OWORD v23[2];
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;

  v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 16);
  if (!v4)
  {
    swift_bridgeObjectRetain();
LABEL_13:
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
LABEL_14:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v16;
    *(_BYTE *)(a1 + 32) = v17;
    return result;
  }
  result = swift_bridgeObjectRetain();
  v6 = v3 + 40 * v4;
  while (1)
  {
    if (v4 > *(_QWORD *)(v3 + 16))
    {
      __break(1u);
      goto LABEL_22;
    }
    v9 = *(_QWORD *)(v6 + 8);
    if (v9)
    {
      v10 = *(id *)v6;
      if (*(_BYTE *)(v9 + 17) != 1
        || (*(_BYTE *)(v9 + 17) = 0, (*(_BYTE *)(v9 + 80) & 1) != 0)
        || (v11 = *(_QWORD *)(v9 + 24), v11 == 1))
      {
        v7 = v10;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v26 = 0uLL;
        v27 = *(_OWORD *)(v9 + 64);
        v24 = 0;
        memset(v23, 0, sizeof(v23));
        v25 = 2;
        v7 = v10;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Transaction?(v11);
        CGRect.convert(to:transform:)();
        outlined destroy of CoordinateSpace((uint64_t)v23);
        outlined consume of Transaction?(v11);
        v12 = v27;
        *(_OWORD *)(v9 + 88) = v26;
        *(_OWORD *)(v9 + 104) = v12;
        *(_BYTE *)(v9 + 120) = 0;
      }
      v8 = *(unsigned __int8 *)(v9 + 120);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      result = swift_release_n();
      if (v8 != 1)
        break;
    }
    v6 -= 40;
    if (!--v4)
      goto LABEL_13;
  }
  if (v4 > *(_QWORD *)(v3 + 16))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v18 = *(_QWORD *)(v6 + 8);
  if (v18)
  {
    v19 = *(unsigned __int8 *)(v18 + 17);
    v20 = *(id *)v6;
    swift_retain_n();
    swift_bridgeObjectRetain();
    if (v19 == 1)
      AccessibilityGeometryStorage.updateFrame()();
    v13 = *(_QWORD *)(v18 + 88);
    v14 = *(_QWORD *)(v18 + 96);
    v15 = *(_QWORD *)(v18 + 104);
    v16 = *(_QWORD *)(v18 + 112);
    v21 = *(_BYTE *)(v18 + 120);

    swift_bridgeObjectRelease();
    result = swift_release_n();
    if ((v21 & 1) == 0)
    {
      v17 = 0;
      goto LABEL_14;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t AccessibilityNode.explicitActivationPoint.getter()
{
  void *v0;
  uint64_t v1;
  int8x16_t v2;
  char v3;
  int v4;
  id v5;
  uint64_t v6;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;

  AccessibilityNode.attachment.getter(v8.i64);

  v1 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v1, &v8);
  swift_bridgeObjectRelease();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    return AccessibilityNode.childActivationPoint(implicit:)(0);
  }
  v2 = v8;
  v3 = v9;
  v4 = ~(_BYTE)v9;
  outlined consume of AccessibilityActivationPointStorage?(v8.i64[0], v8.i64[1], v9, v10);
  swift_bridgeObjectRelease();
  if (!v4)
    return AccessibilityNode.childActivationPoint(implicit:)(0);
  v8 = v2;
  LOBYTE(v9) = v3;
  v5 = v0;
  v6 = AccessibilityNode.resolvedActivationPoint(for:)((__int128 *)v8.i8);

  return v6;
}

uint64_t AccessibilityNode.implicitActivationPoint.getter()
{
  uint64_t v0;
  char v1;
  void *v2;
  void *v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t result;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int8x16_t v17;
  uint64_t v18;
  uint64_t v19;

  AccessibilityNode.attachment.getter(v17.i64);

  v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, &v17);
  swift_bridgeObjectRelease();
  if (v19)
  {
    v1 = ~(_BYTE)v18;
    outlined consume of AccessibilityActivationPointStorage?(v17.i64[0], v17.i64[1], v18, v19);
    swift_bridgeObjectRelease();
    if (v1)
      goto LABEL_8;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  AccessibilityNode.platformElement.getter();
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_knownRepresentedElement);
    objc_msgSend(v4, sel_accessibilityActivationPoint);
    v6 = v5;
    v8 = v7;

    if (v6 != 0.0 || v8 != 0.0)
      return *(_QWORD *)&v6;
  }
LABEL_8:
  result = AccessibilityNode.textLinkActivationPoint.getter();
  if (v10 == -1)
  {
    result = AccessibilityNode.childActivationPoint(implicit:)(1);
    if (v11 == -1)
    {
      AccessibilityNode.attachment.getter(v17.i64);
      v12 = v17.i64[0];

      v17.i64[0] = v12;
      v13 = AccessibilityProperties.subscript.getter();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
        return 0;
      static UnitPoint.center.getter();
      v17.i64[0] = v14;
      v17.i64[1] = v15;
      LOBYTE(v18) = 1;
      result = AccessibilityNode.resolvedActivationPoint(for:)((__int128 *)v17.i8);
      if (v16 == -1)
        return 0;
    }
  }
  return result;
}

uint64_t AccessibilityNode.childActivationPoint(implicit:)(int a1)
{
  char *v1;
  void *v2;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  __int128 v23;
  void (*v24)(__int128 *__return_ptr, _QWORD, _QWORD);
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void (*v29)(__int128 *__return_ptr, uint64_t, uint64_t);
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t result;
  _QWORD v52[4];
  __int128 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64[41];

  v2 = v1;
  AccessibilityNode.visibility.getter((int *)&v59);
  *(_QWORD *)&v62 = v59;
  AccessibilityNullableOptionSet<>.resolved.getter();
  if ((v64[9] | 4) == 4)
  {
    v4 = (unint64_t *)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
    swift_beginAccess();
    v12 = *v4;
    v5 = swift_allocObject();
    *(_BYTE *)(v5 + 16) = a1 & 1;
    *(_QWORD *)(v5 + 24) = v2;
    MEMORY[0x1E0C80A78](v5, v6);
    v52[2] = partial apply for closure #1 in AccessibilityNode.childActivationPoint(implicit:);
    v52[3] = v7;
    swift_bridgeObjectRetain_n();
    v8 = v2;
    v9 = 0;
    v10 = specialized Sequence.filter(_:)((uint64_t (*)(id *))partial apply for specialized closure #1 in Collection<>.filterVisible(_:), (uint64_t)v52, v12);
    swift_bridgeObjectRelease();
    swift_release();
    v59 = *(_OWORD *)&v8[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
    EnvironmentValues.layoutDirection.getter();
    LOBYTE(v11) = v62;
    LOBYTE(v59) = 4;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v59, v64);
    LOBYTE(v12) = v64[0];
    if (v10 < 0 || (v10 & 0x4000000000000000) != 0)
    {
LABEL_50:
      v50 = swift_bridgeObjectRetain();
      v13 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v50);
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)&v59 = v13;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v59, 0, v12, v11);
    if (v9)
    {
      result = swift_release();
      __break(1u);
      return result;
    }
    swift_bridgeObjectRelease();
    v9 = v59;
    if ((v59 & 0x8000000000000000) != 0 || (v59 & 0x4000000000000000) != 0)
    {
      swift_retain();
      v57 = _CocoaArrayWrapper.endIndex.getter();
      if (v57)
        goto LABEL_9;
    }
    else
    {
      v14 = *(_QWORD *)(v59 + 16);
      swift_retain();
      v57 = v14;
      if (v14)
      {
LABEL_9:
        v58 = v9 & 0xC000000000000001;
        v15 = 4;
        v55 = MEMORY[0x1E0DEE9B8] + 8;
        v53 = xmmword_187BFE310;
        v54 = a1;
        v56 = v9;
        while (1)
        {
          v12 = v15 - 4;
          if (v58)
            v17 = (id)MEMORY[0x18D75E3BC](v15 - 4, v9);
          else
            v17 = *(id *)(v9 + 8 * v15);
          v18 = v17;
          v19 = v15 - 3;
          if (__OFADD__(v12, 1))
          {
            __break(1u);
            goto LABEL_50;
          }
          if ((a1 & 1) != 0)
          {
            AccessibilityNode.attachment.getter((uint64_t *)&v59);
            v20 = v59;

            if (*(_QWORD *)(v20 + 16)
              && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5788]), (v22 & 1) != 0))
            {
              outlined init with copy of TableColumnList(*(_QWORD *)(v20 + 56) + 40 * v21, (uint64_t)&v59);
              v23 = v61;
              __swift_project_boxed_opaque_existential_1(&v59, v61);
              v24 = *(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(*((_QWORD *)&v23 + 1) + 8);
              swift_bridgeObjectRetain();
              v24(&v62, v23, *((_QWORD *)&v23 + 1));
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
            }
            else
            {
              v62 = 0u;
              v63 = 0u;
              swift_bridgeObjectRetain();
            }
            type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
            type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?);
            if ((swift_dynamicCast() & 1) != 0)
            {
              v30 = v59;
              v31 = v60;
              v32 = v61;
              swift_bridgeObjectRelease();
              if (v32)
              {
                outlined consume of AccessibilityActivationPointStorage??(v30, *((uint64_t *)&v30 + 1), v31, v32);
                swift_bridgeObjectRelease();
                a1 = v54;
                if ((_BYTE)v31 != 0xFF)
                {
LABEL_40:
                  AccessibilityNode.textLinkActivationPoint.getter();
                  if (v42 != -1)
                    goto LABEL_46;
                  AccessibilityNode.childActivationPoint(implicit:)(1);
                  if (v43 != -1)
                    goto LABEL_46;
                  AccessibilityNode.attachment.getter((uint64_t *)&v59);
                  v11 = v59;

                  *(_QWORD *)&v59 = v11;
                  LOBYTE(v62) = 20;
                  v44 = AccessibilityProperties.subscript.getter();
                  swift_bridgeObjectRelease();
                  if ((v44 & 1) != 0)
                  {
                    static UnitPoint.center.getter();
                    *(_QWORD *)&v59 = v45;
                    *((_QWORD *)&v59 + 1) = v46;
                    LOBYTE(v60) = 1;
                    AccessibilityNode.resolvedActivationPoint(for:)(&v59);
                    if (v47 != -1)
                      goto LABEL_46;
                  }
                  goto LABEL_13;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                a1 = v54;
              }
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }
            AccessibilityNode.platformElement.getter();
            if (v35)
            {
              v36 = v35;
              v37 = objc_msgSend(v35, sel_knownRepresentedElement);
              objc_msgSend(v37, sel_accessibilityActivationPoint);
              v39 = v38;
              v41 = v40;

              if (v39 != 0.0 || v41 != 0.0)
              {
LABEL_46:
                swift_release_n();
                v48 = AccessibilityNode.implicitActivationPoint.getter();
LABEL_48:
                v49 = v48;

                return v49;
              }
            }
            goto LABEL_40;
          }
          AccessibilityNode.attachment.getter((uint64_t *)&v59);
          v25 = v59;

          if (*(_QWORD *)(v25 + 16)
            && (v26 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5788]), (v27 & 1) != 0))
          {
            outlined init with copy of TableColumnList(*(_QWORD *)(v25 + 56) + 40 * v26, (uint64_t)&v59);
            v28 = *((_QWORD *)&v61 + 1);
            v11 = v61;
            __swift_project_boxed_opaque_existential_1(&v59, v61);
            v29 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v28 + 8);
            swift_bridgeObjectRetain();
            v29(&v62, v11, v28);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
          }
          else
          {
            v62 = 0u;
            v63 = 0u;
            swift_bridgeObjectRetain();
          }
          type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
          type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?);
          if ((swift_dynamicCast() & 1) == 0)
            break;
          v33 = v59;
          v34 = v60;
          v11 = v61;
          swift_bridgeObjectRelease();
          if (!v11)
          {
            swift_bridgeObjectRelease();
            a1 = v54;
            goto LABEL_11;
          }
          outlined consume of AccessibilityActivationPointStorage??(v33, *((uint64_t *)&v33 + 1), v34, v11);
          swift_bridgeObjectRelease();
          a1 = v54;
          if ((_BYTE)v34 == 0xFF)
            goto LABEL_11;
          v59 = v33;
          LOBYTE(v60) = v34;
          AccessibilityNode.resolvedActivationPoint(for:)(&v59);
LABEL_12:
          v9 = v56;
          if (v16 != -1)
          {
            swift_release_n();
            v48 = AccessibilityNode.explicitActivationPoint.getter();
            goto LABEL_48;
          }
LABEL_13:

          ++v15;
          if (v19 == v57)
            goto LABEL_52;
        }
        v59 = 0uLL;
        v60 = 0;
        v61 = v53;
        swift_bridgeObjectRelease_n();
LABEL_11:
        AccessibilityNode.childActivationPoint(implicit:)(0);
        goto LABEL_12;
      }
    }
LABEL_52:
    swift_release_n();
  }
  return 0;
}

uint64_t closure #1 in AccessibilityNode.childActivationPoint(implicit:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t (*v9)(_OWORD *, ValueMetadata *, unint64_t, _QWORD, _QWORD);
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _OWORD v26[2];
  __int128 v27;
  _BYTE v28[25];
  _OWORD v29[3];
  __int128 v30;
  _BYTE v31[25];

  if ((a2 & 1) == 0)
    return 1;
  AccessibilityNode.attachment.getter((uint64_t *)&v27);

  v4 = swift_bridgeObjectRetain();
  v5 = specialized AccessibilityProperties.subscript.getter(v4);
  swift_bridgeObjectRelease_n();
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
LABEL_7:
    memset(v29, 0, 41);
    swift_bridgeObjectRelease();
LABEL_8:
    outlined destroy of AccessibilityValueStorage?((uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?);
    return 1;
  }
  v7 = v5 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of AnyAccessibilityAction(v7, (uint64_t)&v27);
    memset(v26, 0, sizeof(v26));
    v8 = *(_OWORD *)&v28[8];
    __swift_project_boxed_opaque_existential_1(&v27, *(uint64_t *)&v28[8]);
    v9 = *(uint64_t (**)(_OWORD *, ValueMetadata *, unint64_t, _QWORD, _QWORD))(*((_QWORD *)&v8 + 1)
                                                                                               + 80);
    v10 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
    if ((v9(v26, &type metadata for AccessibilityVoidAction, v10, v8, *((_QWORD *)&v8 + 1)) & 1) != 0)
      break;
    outlined destroy of AnyAccessibilityAction((uint64_t)&v27);
    v7 += 48;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  v29[0] = v27;
  v29[1] = *(_OWORD *)v28;
  *(_OWORD *)((char *)&v29[1] + 9) = *(_OWORD *)&v28[9];
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v29[1] + 1))
    goto LABEL_8;
  *(_OWORD *)&v31[9] = *(_OWORD *)((char *)&v29[1] + 9);
  v30 = v29[0];
  *(_OWORD *)v31 = v29[1];
  v12 = *((_QWORD *)&v29[1] + 1);
  v13 = *(_OWORD *)((char *)&v29[1] + 9) >> 56;
  __swift_project_boxed_opaque_existential_1(&v30, *((uint64_t *)&v29[1] + 1));
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  if (v17)
  {
    v18 = v14;
    v19 = v15;
    v20 = v16 & 1;
    v21 = *(_QWORD *)(a3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
    *(_QWORD *)&v29[0] = *(_QWORD *)(a3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    *((_QWORD *)&v29[0] + 1) = v21;
    swift_retain();
    swift_retain();
    LOBYTE(v27) = v20;
    v22 = static AccessibilityCore.textResolvesToEmpty(_:in:)();
    outlined consume of Text.Storage(v18, v19, v20);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      outlined destroy of AnyAccessibilityAction((uint64_t)&v30);
      return 0;
    }
  }
  AccessibilityNode.attachment.getter((uint64_t *)v29);

  v23 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v23, (uint64_t)v29);
  swift_bridgeObjectRelease_n();
  if (*(_QWORD *)&v29[0])
  {
    v24 = *(_QWORD *)(a3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
    *(_QWORD *)&v29[0] = *(_QWORD *)(a3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    *((_QWORD *)&v29[0] + 1) = v24;
    swift_retain();
    swift_retain();
    v25 = static AccessibilityCore.textsResolveToEmpty(_:in:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of AnyAccessibilityAction((uint64_t)&v30);
    if ((v25 & 1) == 0)
      return 0;
  }
  else
  {
    outlined destroy of AnyAccessibilityAction((uint64_t)&v30);
  }
  return 1;
}

uint64_t AccessibilityNode.resolvedDragPoints(with:)(char a1)
{
  char *v1;
  char *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v2 = v1;
  AccessibilityNode.visibility.getter(v28.i32);
  v31 = v28.i64[0];
  AccessibilityNullableOptionSet<>.resolved.getter();
  if (v32 == 3)
    return 0;
  v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  v6 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
  swift_retain();
  swift_retain();
  AccessibilityNode.attachment.getter(v28.i64);

  v7 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v7, &v28);
  swift_bridgeObjectRelease_n();
  v8 = v30;
  if (v30)
  {
    v10 = v28.i64[1];
    v9 = v29;
    v11 = v28.i64[0];
    swift_bridgeObjectRetain();
    outlined consume of AccessibilityActivationPointStorage?(v11, v10, v9, v8);
    swift_retain();
    swift_retain();
    v12 = v2;
    v4 = specialized Sequence.compactMap<A>(_:)(v8, v5, v6, v12, a1 & 1, 0);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13)
        goto LABEL_6;
    }
    else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      swift_release();
      swift_release();
      return v4;
    }
    swift_bridgeObjectRelease();
  }
  v14 = &v2[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
  swift_beginAccess();
  v15 = *(_QWORD *)v14;
  if (!(*(_QWORD *)v14 >> 62))
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n();
    if (v16)
      goto LABEL_11;
LABEL_24:
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_25:
    swift_bridgeObjectRelease_n();
    v25 = v19[2];
    if (v25)
    {
      swift_bridgeObjectRetain();
      v26 = 0;
      v4 = MEMORY[0x1E0DEE9D8];
      do
      {
        v27 = v19[v26++ + 4];
        v31 = v4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v27);
        swift_bridgeObjectRelease();
        v4 = v31;
      }
      while (v25 != v26);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return MEMORY[0x1E0DEE9D8];
    }
    return v4;
  }
  swift_bridgeObjectRetain_n();
  result = _CocoaArrayWrapper.endIndex.getter();
  v16 = result;
  if (!result)
    goto LABEL_24;
LABEL_11:
  if (v16 >= 1)
  {
    v18 = 0;
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v15 & 0xC000000000000001) != 0)
        v20 = (id)MEMORY[0x18D75E3BC](v18, v15);
      else
        v20 = *(id *)(v15 + 8 * v18 + 32);
      v21 = v20;
      v22 = AccessibilityNode.resolvedDragPoints(with:)(1);

      if (v22)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        v24 = v19[2];
        v23 = v19[3];
        if (v24 >= v23 >> 1)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v19);
        v19[2] = v24 + 1;
        v19[v24 + 4] = v22;
      }
      ++v18;
    }
    while (v16 != v18);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityNode.resolvedDropPoints(with:)(char a1)
{
  char *v1;
  char *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v2 = v1;
  AccessibilityNode.visibility.getter(v29.i32);
  v33 = v29.i64[0];
  AccessibilityNullableOptionSet<>.resolved.getter();
  if (v34 == 3)
    return 0;
  v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  v6 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
  swift_retain();
  swift_retain();
  AccessibilityNode.attachment.getter(v29.i64);

  v7 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v7, &v29);
  swift_bridgeObjectRelease_n();
  v8 = v31;
  if (v31)
  {
    v9 = v32;
    v11 = v29.i64[1];
    v10 = v30;
    v12 = v29.i64[0];
    swift_bridgeObjectRetain();
    outlined consume of AccessibilityActivationPointStorage?(v12, v11, v10, v8);
    swift_retain();
    swift_retain();
    v13 = v2;
    v4 = specialized Sequence.compactMap<A>(_:)(v9, v5, v6, v13, a1 & 1, 1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v14)
        goto LABEL_6;
    }
    else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      swift_release();
      swift_release();
      return v4;
    }
    swift_bridgeObjectRelease();
  }
  v15 = &v2[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
  swift_beginAccess();
  v16 = *(_QWORD *)v15;
  if (!(*(_QWORD *)v15 >> 62))
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n();
    if (v17)
      goto LABEL_11;
LABEL_24:
    v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_25:
    swift_bridgeObjectRelease_n();
    v26 = v20[2];
    if (v26)
    {
      swift_bridgeObjectRetain();
      v27 = 0;
      v4 = MEMORY[0x1E0DEE9D8];
      do
      {
        v28 = v20[v27++ + 4];
        v33 = v4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v28);
        swift_bridgeObjectRelease();
        v4 = v33;
      }
      while (v26 != v27);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return MEMORY[0x1E0DEE9D8];
    }
    return v4;
  }
  swift_bridgeObjectRetain_n();
  result = _CocoaArrayWrapper.endIndex.getter();
  v17 = result;
  if (!result)
    goto LABEL_24;
LABEL_11:
  if (v17 >= 1)
  {
    v19 = 0;
    v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v16 & 0xC000000000000001) != 0)
        v21 = (id)MEMORY[0x18D75E3BC](v19, v16);
      else
        v21 = *(id *)(v16 + 8 * v19 + 32);
      v22 = v21;
      v23 = AccessibilityNode.resolvedDropPoints(with:)(1);

      if (v23)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        v25 = v20[2];
        v24 = v20[3];
        if (v25 >= v24 >> 1)
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v20);
        v20[2] = v25 + 1;
        v20[v25 + 4] = v23;
      }
      ++v19;
    }
    while (v17 != v19);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityNode.resolvedDragDropPoint(for:)(int8x16_t *a1)
{
  void *v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t v7;
  char v8;
  int v9;
  id v10;
  char v11;
  char v12;
  char v13;
  char v15;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  NSString *v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  double v26;
  double v27;
  double v28;
  double v29;
  id v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int8x16_t v36;
  uint64_t v37;
  uint64_t v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;

  v2 = v1;
  v3 = a1[1].u8[0];
  if (v3 <= 1)
  {
    v36 = *a1;
    LOBYTE(v37) = v3;
    return AccessibilityNode.resolvedActivationPoint(for:)((__int128 *)v36.i8);
  }
  AccessibilityNode.attachment.getter(v36.i64);

  v6 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v6, &v36);
  swift_bridgeObjectRelease();
  if (v38)
  {
    v7 = v36;
    v8 = v37;
    v9 = ~(_BYTE)v37;
    outlined consume of AccessibilityActivationPointStorage?(v36.i64[0], v36.i64[1], v37, v38);
    swift_bridgeObjectRelease();
    if (v9)
    {
      v36 = v7;
      LOBYTE(v37) = v8;
      v10 = v1;
      v5 = AccessibilityNode.resolvedActivationPoint(for:)((__int128 *)v36.i8);
      v12 = v11;

      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v5 = AccessibilityNode.childActivationPoint(implicit:)(0);
  v12 = v13;
LABEL_9:
  if (v12 != -1)
    return v5;
  v4 = AccessibilityNode.implicitActivationPoint.getter();
  if (v15 != -1)
    return v4;
  objc_msgSend(v2, sel_accessibilityFrame);
  x = v39.origin.x;
  y = v39.origin.y;
  width = v39.size.width;
  height = v39.size.height;
  if (CGRectIsEmpty(v39))
  {
    v20 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
    v21 = NSClassFromString(v20);

    if (!v21)
    {
      objc_opt_self();
      v23 = swift_dynamicCastObjCClass();
      if (v23)
      {
        v24 = (void *)v23;
        v25 = v2;
        objc_msgSend(v24, sel_frame);
        x = v26;
        y = v27;
        width = v28;
        height = v29;
        v30 = objc_msgSend(v24, sel_window);
        if (v30)
        {
          v31 = v30;
          objc_msgSend(v24, sel_bounds);
          objc_msgSend(v31, sel_convertRect_fromCoordinateSpace_, v24);
          x = v32;
          y = v33;
          width = v34;
          height = v35;

        }
        else
        {

        }
      }
    }
  }
  v40.origin.x = x;
  v40.origin.y = y;
  v40.size.width = width;
  v40.size.height = height;
  *(double *)&v22 = x + CGRectGetWidth(v40) * 0.5;
  v41.origin.x = x;
  v41.origin.y = y;
  v41.size.width = width;
  v41.size.height = height;
  v5 = v22;
  CGRectGetHeight(v41);
  return v5;
}

uint64_t AccessibilityNode.resolvedActivationPoint(for:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  __int128 v11;
  void (*v12)(__int128 *__return_ptr, _QWORD, _QWORD);
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v29;
  uint64_t v30;
  uint64_t result;
  __int128 v32;
  int v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  CGRect v41;
  CGRect v42;
  __C::CGRect v43;

  v32 = *a1;
  v33 = *((unsigned __int8 *)a1 + 16);
  v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 16);
  if (!v4)
  {
    v7 = 0;
    v6 = 0;
    goto LABEL_27;
  }
  swift_bridgeObjectRetain_n();
  v5 = (uint64_t *)(v3 + 40 * v4 + 8);
  v34 = v3;
  while (1)
  {
    if (v4 > *(_QWORD *)(v3 + 16))
    {
      __break(1u);
LABEL_26:
      swift_bridgeObjectRelease_n();
      v7 = 0;
      v6 = 0;
      goto LABEL_27;
    }
    v7 = *(v5 - 2);
    v6 = (void *)*(v5 - 1);
    v8 = *v5;
    if (*(_QWORD *)(v7 + 16)
      && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5788]), (v10 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v7 + 56) + 40 * v9, (uint64_t)&v35);
      v11 = v38;
      __swift_project_boxed_opaque_existential_1(&v35, v38);
      v12 = *(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(*((_QWORD *)&v11 + 1) + 8);
      swift_retain();
      swift_bridgeObjectRetain_n();
      v13 = v6;
      v12(&v39, v11, *((_QWORD *)&v11 + 1));
      v3 = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
    }
    else
    {
      v39 = 0u;
      v40 = 0u;
      swift_retain();
      swift_bridgeObjectRetain_n();
      v14 = v6;
    }
    type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
    type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?);
    if (swift_dynamicCast())
      break;
    v35 = 0.0;
    v36 = 0.0;
    v37 = 0.0;
    v38 = xmmword_187BFE310;
LABEL_4:
    swift_bridgeObjectRelease_n();

    swift_release();
LABEL_5:
    v5 -= 5;
    if (!--v4)
      goto LABEL_26;
  }
  if (!(_QWORD)v38)
    goto LABEL_4;
  *(double *)&v16 = v35;
  v15 = *(_QWORD *)&v36;
  v17 = LOBYTE(v37);
  v18 = ~LOBYTE(v37);
  outlined consume of AccessibilityActivationPointStorage??(*(uint64_t *)&v35, *(uint64_t *)&v36, *(uint64_t *)&v37, v38);
  swift_bridgeObjectRelease();
  if (!v18
    || (v35 = *(double *)&v16,
        v36 = *(double *)&v15,
        LOBYTE(v37) = v17,
        v39 = v32,
        LOBYTE(v40) = v33,
        (MEMORY[0x18D75A8A0](&v35, &v39) & 1) == 0))
  {
    swift_bridgeObjectRelease();

    swift_release();
    v3 = v34;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease_n();
  if (v8)
  {
    v19 = *(_BYTE *)(v8 + 16);
    swift_retain();
    if ((v19 & 1) != 0)
      AccessibilityGeometryStorage.updatePath()();
    v20 = *(uint64_t *)(v8 + 144);
    v21 = *(_QWORD *)(v8 + 152);
    v22 = *(_QWORD *)(v8 + 160);
    v23 = *(_QWORD *)(v8 + 168);
    v24 = *(unsigned __int8 *)(v8 + 176);
    outlined copy of Path?(v20, v21, v22, v23, *(_BYTE *)(v8 + 176));
    swift_release();
    if (v24 != 255)
    {
      v35 = *(double *)&v20;
      v36 = *(double *)&v21;
      v37 = *(double *)&v22;
      *(_QWORD *)&v38 = v23;
      BYTE8(v38) = v24;
      Path.boundingRect.getter();
      v42 = CGRectStandardize(v41);
      x = v42.origin.x;
      y = v42.origin.y;
      width = v42.size.width;
      height = v42.size.height;
      outlined consume of Path?(v20, v21, v22, v23, v24);
      v29 = v33;
      if (!v33)
        goto LABEL_30;
LABEL_21:
      if (v29 == 1)
      {
        v43.origin.x = x;
        v43.origin.y = y;
        v43.size.width = width;
        v43.size.height = height;
        v30 = *(_OWORD *)&UnitPoint.in(_:)(v43);
        outlined consume of AccessibilityAttachmentStorage?(v7, v6);
        return v30;
      }
LABEL_28:
      outlined consume of AccessibilityAttachmentStorage?(v7, v6);
      *(double *)&result = 0.0;
      return result;
    }
  }
LABEL_27:
  LOBYTE(v35) = 4;
  AccessibilityNode.contentFrame(with:)(&v35, (uint64_t)&v39);
  outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)&v39, (uint64_t)&v35, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if ((BYTE8(v38) & 1) != 0)
    goto LABEL_28;
  x = v35;
  y = v36;
  width = v37;
  height = *(double *)&v38;
  v29 = v33;
  if (v33)
    goto LABEL_21;
LABEL_30:
  outlined consume of AccessibilityAttachmentStorage?(v7, v6);
  *(double *)&result = x + *(double *)&v32;
  return result;
}

uint64_t AccessibilityNode.textLinkActivationPoint.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t result;
  CGFloat v17;
  uint64_t v18;
  CGFloat v19;
  CGFloat v20;
  void *v21;
  UIView *v22;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  double aBlock;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  double v34;
  uint64_t (*v35)();
  uint64_t v36;
  _OWORD v37[8];
  id v38[16];
  _QWORD v39[6];
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;

  v1 = v0;
  AccessibilityNode.attachment.getter((uint64_t *)v38);

  AccessibilityProperties.traits.getter();
  swift_bridgeObjectRelease();
  v37[0] = *(_OWORD *)v38;
  LOBYTE(aBlock) = 8;
  if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) == 0)
    return 0;
  AccessibilityNode.attachment.getter((uint64_t *)&aBlock);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)&aBlock);
  swift_bridgeObjectRelease_n();
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&aBlock, (uint64_t)v37, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
  outlined release of AccessibilityTextLayoutProperties?((uint64_t)v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityTextLayoutProperties?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v37, (uint64_t)v38, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
  if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v38) == 1)
    return 0;
  AccessibilityNode.attachment.getter((uint64_t *)&aBlock);

  v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, (uint64_t)&aBlock);
  swift_bridgeObjectRelease_n();
  if (aBlock == 0.0)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)&aBlock + 16) != 1)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v4 = *(_QWORD *)(*(_QWORD *)&aBlock + 32);
  v5 = *(_QWORD *)(*(_QWORD *)&aBlock + 40);
  v6 = *(_BYTE *)(*(_QWORD *)&aBlock + 48);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v4, v5, v6);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
  aBlock = *(double *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  v32 = v7;
  v39[0] = 0;
  v39[1] = 0;
  swift_retain();
  swift_retain();
  default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  v8 = (void *)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  outlined consume of Text.Storage(v4, v5, v6);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (!v8)
    return 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v9 = *MEMORY[0x1E0DC1160];
  v10 = NSAttributedString.range.getter();
  v12 = v11;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = &v28;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = partial apply for closure #1 in AccessibilityNode.textLinkActivationPoint.getter;
  *(_QWORD *)(v14 + 24) = v13;
  v35 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  v36 = v14;
  aBlock = MEMORY[0x1E0C809B0];
  v32 = 1107296256;
  *(double *)&v33 = COERCE_DOUBLE(thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
  v34 = COERCE_DOUBLE(&block_descriptor_15_1);
  v15 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_enumerateAttribute_inRange_options_usingBlock_, v9, v10, v12, 0, v15);
  _Block_release(v15);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v9 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((v30 & 1) != 0)
      goto LABEL_14;
    specialized AccessibilityNode.withLayoutManager<A>(_:_:)(v8, v28, v29, (uint64_t)v39);
    outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)v39, (uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if ((v35 & 1) != 0)
      goto LABEL_14;
    v17 = aBlock;
    v18 = v32;
    v19 = *(double *)&v33;
    v20 = v34;
    if (!MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
      goto LABEL_14;
    objc_opt_self();
    v21 = (void *)swift_dynamicCastObjCClass();
    if (!v21)
      swift_unknownObjectRelease();
    v22 = (UIView *)objc_msgSend(v21, sel_window, v28, v29);

    if (!v22)
      goto LABEL_14;
    v40.origin.x = v17;
    *(_QWORD *)&v40.origin.y = v18;
    v40.size.width = v19;
    v40.size.height = v20;
    v41 = UIAccessibilityConvertFrameToScreenCoordinates(v40, v22);
    x = v41.origin.x;
    y = v41.origin.y;
    width = v41.size.width;
    height = v41.size.height;

    v45.origin.x = 0.0;
    v45.origin.y = 0.0;
    v45.size.width = 0.0;
    v45.size.height = 0.0;
    v42.origin.x = x;
    v42.origin.y = y;
    v42.size.width = width;
    v42.size.height = height;
    if (CGRectEqualToRect(v42, v45))
    {
LABEL_14:
      swift_release();

      return 0;
    }
    v43.origin.x = x;
    v43.origin.y = y;
    v43.size.width = width;
    v43.size.height = height;
    v27 = x + CGRectGetWidth(v43) * 0.5;
    v44.origin.x = x;
    v44.origin.y = y;
    v44.size.width = width;
    v44.size.height = height;
    CGRectGetHeight(v44);
    swift_release();

    return *(_QWORD *)&v27;
  }
  return result;
}

uint64_t closure #1 in AccessibilityNode.textLinkActivationPoint.getter(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[32];

  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v17[-v13];
  outlined init with copy of AccessibilityValueStorage?(a1, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Any?);
  URL.init(urlValue:)();
  v15 = type metadata accessor for URL();
  LODWORD(a1) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15);
  result = outlined destroy of TaskPriority?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for URL?, v10);
  if ((_DWORD)a1 != 1)
  {
    if ((*(_BYTE *)(a5 + 16) & 1) != 0)
    {
      *(_QWORD *)a5 = a2;
      *(_QWORD *)(a5 + 8) = a3;
      *(_BYTE *)(a5 + 16) = 0;
    }
    else
    {
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_BYTE *)(a5 + 16) = 1;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t AccessibilityNode.sortPriority.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void **v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_OWORD *__return_ptr, uint64_t, uint64_t);
  id v17;
  id v18;
  char v19;
  void *v20;
  uint64_t v21;
  id v22;
  char v23;
  char v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
  if (v1)
  {
    v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8);
    outlined copy of AccessibilityAttachment?(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment), v2);
    v3 = swift_bridgeObjectRetain();
    v4 = specialized AccessibilityProperties.subscript.getter(v3);
    outlined consume of AccessibilityAttachment?(v1, v2);
    swift_bridgeObjectRelease();
    return v4;
  }
  v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v6 = *v5;
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
    swift_bridgeObjectRetain();
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  result = swift_bridgeObjectRetain();
  v9 = (void **)(v6 + 40 * v7);
  while (1)
  {
    if (v7 > *(_QWORD *)(v6 + 16))
    {
      __break(1u);
      goto LABEL_21;
    }
    v11 = (uint64_t)*(v9 - 1);
    v10 = *v9;
    if (*(_QWORD *)(v11 + 16)
      && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5750]), (v13 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v11 + 56) + 40 * v12, (uint64_t)&v25);
      v15 = v27;
      v14 = v28;
      __swift_project_boxed_opaque_existential_1(&v25, v27);
      v16 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v14 + 8);
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v17 = v10;
      v16(v29, v15, v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
    }
    else
    {
      memset(v29, 0, sizeof(v29));
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v18 = v10;
    }
    type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
    type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for Double?);
    if ((swift_dynamicCast() & 1) != 0)
      break;
    v25 = 0;
    v26 = 256;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    result = swift_release();
LABEL_6:
    v9 -= 5;
    if (!--v7)
      goto LABEL_18;
  }
  HIBYTE(v26) = 0;
  v19 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  result = swift_release();
  if ((v19 & 1) != 0)
    goto LABEL_6;
  if (v7 > *(_QWORD *)(v6 + 16))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = (uint64_t)*(v9 - 1);
  v20 = *v9;
  swift_retain();
  swift_bridgeObjectRetain_n();
  v22 = v20;
  v4 = specialized AccessibilityProperties.subscript.getter(v21);
  v24 = v23;
  swift_release();

  result = swift_bridgeObjectRelease_n();
  if ((v24 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return v4;
  }
LABEL_22:
  __break(1u);
  return result;
}

unint64_t AccessibilityNode.resolvedAttributedValue.getter()
{
  uint64_t v0;
  char v1;
  Swift::Bool v2;
  unint64_t *v3;
  __int128 *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15[2];
  _OWORD v16[2];
  __int128 v17;
  Swift::OpaquePointer_optional v18;
  Swift::OpaquePointer_optional v19;

  AccessibilityNode.attachment.getter(v15);

  v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, v16);
  swift_bridgeObjectRelease_n();
  if (*((_QWORD *)&v17 + 1))
  {
    outlined init with copy of AccessibilityValueStorage?((uint64_t)v16, (uint64_t)&v12, &lazy cache variable for type metadata for AnyAccessibilityValue?);
    outlined destroy of AccessibilityValueStorage((uint64_t)v16);
    if (*((_QWORD *)&v13 + 1))
    {
      AnyAccessibilityValue.type.getter();
      v1 = v15[0];
      outlined destroy of AnyAccessibilityValue((uint64_t)&v12);
      v2 = (v1 & 0xFE) != 4;
      goto LABEL_7;
    }
    v3 = &lazy cache variable for type metadata for AnyAccessibilityValue?;
    v4 = &v12;
  }
  else
  {
    v3 = &lazy cache variable for type metadata for AccessibilityValueStorage?;
    v4 = v16;
  }
  outlined destroy of AccessibilityValueStorage?((uint64_t)v4, v3);
  v2 = 1;
LABEL_7:
  AccessibilityNode.attachment.getter((uint64_t *)v16);

  v5 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v5, v16);
  swift_bridgeObjectRelease_n();
  if (*((_QWORD *)&v17 + 1))
  {
    v6 = (void *)AccessibilityValueStorage.valueDescription.getter();
    outlined destroy of AccessibilityValueStorage((uint64_t)v16);
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    v6 = 0;
  }
  v18.value._rawValue = v6;
  v18.is_nil = v2;
  v8 = 0xE200000000000000;
  v9 = (unint64_t)AccessibilityNode.resolvedAttributedTexts(_:includeDefaultAttributes:separator:)(v18, 44, *(Swift::String *)(&v7 - 1));
  swift_bridgeObjectRelease();
  if (!v9)
  {
    AccessibilityNode.resolvedToggleValue.getter(&v12);
    if (*((_QWORD *)&v14 + 1))
    {
      v16[0] = v12;
      v16[1] = v13;
      v17 = v14;
      v19.value._rawValue = (void *)AccessibilityValueStorage.valueDescription.getter();
      v19.is_nil = 0;
      v10._countAndFlagsBits = 0xE200000000000000;
      v9 = (unint64_t)AccessibilityNode.resolvedAttributedTexts(_:includeDefaultAttributes:separator:)(v19, 44, v10);
      swift_bridgeObjectRelease();
      outlined destroy of AccessibilityValueStorage((uint64_t)v16);
    }
    else
    {
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v12, &lazy cache variable for type metadata for AccessibilityValueStorage?);
      return 0;
    }
  }
  return v9;
}

uint64_t AccessibilityNode.resolvedPlainTextValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[2];
  __int128 v11;
  _OWORD v12[2];
  __int128 v13;

  v1 = v0;
  AccessibilityNode.attachment.getter((uint64_t *)v10);

  v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, v12);
  swift_bridgeObjectRelease_n();
  if (*((_QWORD *)&v13 + 1))
  {
    v3 = AccessibilityValueStorage.valueDescription.getter();
    outlined destroy of AccessibilityValueStorage((uint64_t)v12);
    if (*(_QWORD *)(v3 + 16))
    {
      v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
      *(_QWORD *)&v12[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
      *((_QWORD *)&v12[0] + 1) = v4;
      swift_retain();
      swift_retain();
      static _GraphInputs.defaultInterfaceIdiom.getter();
      v5 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
      v7 = v6;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if (v7)
        return v5;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v12, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  }
  AccessibilityNode.resolvedToggleValue.getter(v10);
  if (*((_QWORD *)&v11 + 1))
  {
    v12[0] = v10[0];
    v12[1] = v10[1];
    v13 = v11;
    if (*(_QWORD *)(AccessibilityValueStorage.valueDescription.getter() + 16))
    {
      v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
      *(_QWORD *)&v10[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
      *((_QWORD *)&v10[0] + 1) = v8;
      swift_retain();
      swift_retain();
      static _GraphInputs.defaultInterfaceIdiom.getter();
      v5 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      v5 = 0;
    }
    outlined destroy of AccessibilityValueStorage((uint64_t)v12);
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v10, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    return 0;
  }
  return v5;
}

uint64_t AccessibilityNode.resolvedPlainTextHint.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  AccessibilityNode.attachment.getter(&v6);
  v1 = v6;

  v6 = v1;
  v2 = AccessibilityProperties.hints.getter();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    v7 = v3;
    swift_retain();
    swift_retain();
    static _GraphInputs.defaultInterfaceIdiom.getter();
    v4 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v4;
}

unint64_t AccessibilityNode.resolvedAttributedLabel.getter()
{
  uint64_t v0;
  Swift::String v1;
  unint64_t v2;
  uint64_t _[2];
  Swift::OpaquePointer_optional v5;

  AccessibilityNode.attachment.getter(_);

  v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)_);
  swift_bridgeObjectRelease_n();
  v5.value._rawValue = (void *)_[0];
  v5.is_nil = 1;
  v1._countAndFlagsBits = 0xE200000000000000;
  v2 = (unint64_t)AccessibilityNode.resolvedAttributedTexts(_:includeDefaultAttributes:separator:)(v5, 44, v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t AccessibilityNode.resolvedPlainTextLabel.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  id v6;

  AccessibilityNode.attachment.getter(&v5);

  v1 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v1, (uint64_t)&v5);
  swift_bridgeObjectRelease_n();
  if (!v5)
    return 0;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  v6 = v2;
  swift_retain();
  swift_retain();
  static _GraphInputs.defaultInterfaceIdiom.getter();
  v3 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v3;
}

double AccessibilityNode.resolvedToggleValue.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  id v3;
  double result;
  uint64_t v5;
  id v6;

  AccessibilityNode.attachment.getter(&v5);

  AccessibilityProperties.traits.getter();
  swift_bridgeObjectRelease();
  v2 = v5;
  v3 = v6;
  if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) != 0)
  {
    v5 = v2;
    v6 = v3;
    LOBYTE(v5) = AccessibilityNullableOptionSet<>.subscript.getter() & 1;
    lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
    lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
    lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
    AccessibilityValueStorage.init<A>(_:description:)();
  }
  else
  {
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t AccessibilityNode.resolvedAttributedText(_:includeDefaultAttributes:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (!a4)
    return 0;
  v9 = v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage;
  swift_beginAccess();
  v10 = *(_QWORD *)(*(_QWORD *)v9 + 16);
  if (v10)
  {
    v11 = (unsigned __int8 *)(*(_QWORD *)v9 + 64);
    v12 = v10 - 1;
    do
    {
      v13 = v12;
      v14 = *v11;
      v11 += 40;
      if (((v14 != 255) & v14) != 0)
        break;
      --v12;
    }
    while (v13);
  }
  outlined copy of Text?(a1, a2, a3, a4);
  swift_retain();
  swift_retain();
  v15 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

NSAttributedString_optional __swiftcall AccessibilityNode.resolvedAttributedTexts(_:includeDefaultAttributes:separator:)(NSAttributedString_optional _, Swift::Bool includeDefaultAttributes, Swift::String separator)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  objc_class *v11;
  uint64_t v12;
  _OWORD v13[8];
  _BYTE v14[128];
  uint64_t v15[21];

  if (_.value.super.isa)
  {
    v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
    v15[19] = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    v15[20] = v4;
    v5 = v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage;
    swift_beginAccess();
    v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
    if (v6)
    {
      v7 = (unsigned __int8 *)(*(_QWORD *)v5 + 64);
      v8 = v6 - 1;
      do
      {
        v9 = v8;
        v10 = *v7;
        v7 += 40;
        if (((v10 != 255) & v10) != 0)
          break;
        --v8;
      }
      while (v9);
    }
    swift_retain();
    swift_retain();
    AccessibilityNode.attachment.getter(v15);

    v12 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v12, (uint64_t)v13);
    swift_bridgeObjectRelease_n();
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v13, (uint64_t)v14, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v14, (uint64_t)v15, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
    if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v15) != 1)
      outlined release of AccessibilityTextLayoutProperties?((uint64_t)v14, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityTextLayoutProperties?);
    static _GraphInputs.defaultInterfaceIdiom.getter();
    v11 = (objc_class *)static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    swift_release();
    swift_release();
  }
  else
  {
    v11 = 0;
  }
  _.value.super.isa = v11;
  return _;
}

uint64_t AccessibilityNode.resolvedPlainText(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[18];
  _BYTE v13[128];
  uint64_t v14[16];

  if (!a4)
    return 0;
  v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
  v12[16] = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  v12[17] = v8;
  outlined copy of Text?(a1, a2, a3, a4);
  swift_retain();
  swift_retain();
  AccessibilityNode.attachment.getter(v14);

  v9 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v9, (uint64_t)v12);
  swift_bridgeObjectRelease_n();
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v13, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v13, (uint64_t)v14, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
  if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v14) != 1)
    outlined release of AccessibilityTextLayoutProperties?((uint64_t)v13, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityTextLayoutProperties?);
  v12[0] = 0;
  v12[1] = 0;
  v10 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t AccessibilityNode.resolvedIsInteractive.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  AccessibilityNode.attachment.getter((uint64_t *)&v9);
  v1 = v9;

  *(_QWORD *)&v9 = v1;
  v2 = AccessibilityProperties.subscript.getter();
  swift_bridgeObjectRelease();
  if (v2 == 2)
  {
    v9 = *(_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    if ((EnvironmentValues.isEnabled.getter() & 1) != 0)
    {
      AccessibilityNode.attachment.getter((uint64_t *)&v9);

      v3 = swift_bridgeObjectRetain();
      v4 = specialized AccessibilityProperties.subscript.getter(v3);
      swift_bridgeObjectRelease_n();
      v5 = *(_QWORD *)(v4 + 16);
      swift_bridgeObjectRelease();
      v2 = 1;
      if (!v5)
      {
        AccessibilityNode.attachment.getter((uint64_t *)&v9);
        v6 = v9;

        *(_QWORD *)&v9 = v6;
        v7 = AccessibilityProperties.subscript.getter();
        swift_bridgeObjectRelease();
        if ((v7 & 1) != 0)
          return 1;
        else
          return 2;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t AccessibilityNode.next.getter()
{
  uint64_t v0;
  uint64_t result;

  result = MEMORY[0x18D760234](v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);
  if (!result)
  {
    result = MEMORY[0x18D760234](v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost);
    if (result)
    {
      objc_opt_self();
      result = swift_dynamicCastObjCClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityNode()
{
  return objc_opt_self();
}

_QWORD *AccessibilityNode.notifications(from:to:)(uint64_t *a1, uint64_t *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  id v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  _OWORD v37[3];
  _BYTE v38[48];
  __int128 v39;
  ValueMetadata *v40;
  _UNKNOWN **v41;
  uint64_t v42;
  _OWORD v43[2];
  __int128 v44;
  _OWORD v45[3];
  _OWORD v46[3];

  v3 = v2;
  v4 = *a1;
  v5 = *a2;
  AccessibilityNode.platformElement.getter();
  if (!v6)
    v6 = v2;
  v7 = v6;
  v8 = objc_msgSend(v6, sel_knownRepresentedElement);

  LOBYTE(v46[0]) = 4;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)v46, (char *)&v39);
  if (v39 == 3)
  {
    v9 = 0;
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_49;
  }
  v11 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v11, v46);
  swift_bridgeObjectRelease();
  if (v5)
  {
    v12 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v12, v45);
    swift_bridgeObjectRelease();
  }
  else
  {
    memset(v45, 0, sizeof(v45));
  }
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v46, (uint64_t)&v39, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v45, (uint64_t)v43, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  if (v42)
  {
    outlined init with copy of AccessibilityValueStorage?((uint64_t)&v39, (uint64_t)v38, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    if (*((_QWORD *)&v44 + 1))
    {
      v37[0] = v43[0];
      v37[1] = v43[1];
      v37[2] = v44;
      v13 = MEMORY[0x18D75A5F4](v38, v37);
      outlined destroy of AccessibilityValueStorage((uint64_t)v37);
      outlined destroy of AccessibilityValueStorage?((uint64_t)v45, &lazy cache variable for type metadata for AccessibilityValueStorage?);
      outlined destroy of AccessibilityValueStorage?((uint64_t)v46, &lazy cache variable for type metadata for AccessibilityValueStorage?);
      outlined destroy of AccessibilityValueStorage((uint64_t)v38);
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v39, &lazy cache variable for type metadata for AccessibilityValueStorage?);
      if ((v13 & 1) == 0)
        goto LABEL_17;
LABEL_14:
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      goto LABEL_20;
    }
    outlined destroy of AccessibilityValueStorage?((uint64_t)v45, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    outlined destroy of AccessibilityValueStorage?((uint64_t)v46, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    outlined destroy of AccessibilityValueStorage((uint64_t)v38);
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v45, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    outlined destroy of AccessibilityValueStorage?((uint64_t)v46, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    if (!*((_QWORD *)&v44 + 1))
    {
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v39, &lazy cache variable for type metadata for AccessibilityValueStorage?);
      goto LABEL_14;
    }
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v39, (uint64_t (*)(_QWORD))type metadata accessor for (AccessibilityValueStorage?, AccessibilityValueStorage?));
LABEL_17:
  v14 = v8;
  v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v16 = v10[2];
  v15 = v10[3];
  if (v16 >= v15 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v10);
  v40 = &type metadata for AccessibilityCore.Notification.ValueChanged;
  v41 = &protocol witness table for AccessibilityCore.Notification.ValueChanged;
  *(_QWORD *)&v39 = v14;
  v10[2] = v16 + 1;
  outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v10[5 * v16 + 4]);
LABEL_20:
  v17 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v17, (uint64_t)&v39);
  swift_bridgeObjectRelease();
  v18 = v39;
  if (v5)
  {
    v19 = BYTE8(v39);
    v20 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v20, (uint64_t)v46);
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)&v46[0];
    if (v18)
    {
      v22 = BYTE8(v46[0]);
      *(_QWORD *)&v46[0] = v18;
      BYTE8(v46[0]) = v19;
      if (v21)
      {
        *(_QWORD *)&v45[0] = v21;
        BYTE8(v45[0]) = v22;
        swift_bridgeObjectRetain();
        v23 = static AccessibilityLabelStorage.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v23 & 1) != 0)
          goto LABEL_34;
        goto LABEL_29;
      }
    }
    else if (!*(_QWORD *)&v46[0])
    {
      goto LABEL_34;
    }
  }
  else if (!(_QWORD)v39)
  {
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_29:
  v24 = v8;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
  v26 = v10[2];
  v25 = v10[3];
  if (v26 >= v25 >> 1)
    v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v10);
  v40 = &type metadata for AccessibilityCore.Notification.LabelChanged;
  v41 = &protocol witness table for AccessibilityCore.Notification.LabelChanged;
  *(_QWORD *)&v39 = v24;
  v10[2] = v26 + 1;
  outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v10[5 * v26 + 4]);
LABEL_34:
  *(_QWORD *)&v46[0] = v4;
  AccessibilityProperties.traits.getter();
  if ((BYTE1(v39) & 0x40) != 0)
  {
    if (!v5)
      goto LABEL_46;
    v27 = 1;
    goto LABEL_40;
  }
  v27 = ~(DWORD2(v39) >> 13) & 2;
  if (v5)
  {
LABEL_40:
    *(_QWORD *)&v45[0] = v5;
    AccessibilityProperties.traits.getter();
    if ((v46[0] & 0x4000) != 0)
      v28 = 1;
    else
      v28 = ~(DWORD2(v46[0]) >> 13) & 2;
    if (v27 == 2)
      goto LABEL_44;
    if (v28 != 2)
    {
      v29 = (v28 == 0) ^ v27;
      goto LABEL_48;
    }
LABEL_46:
    v29 = 0;
    goto LABEL_48;
  }
  if (!v27)
    goto LABEL_46;
  v28 = 2;
LABEL_44:
  v29 = v28 == 2;
LABEL_48:
  v9 = v29 ^ 1;
LABEL_49:
  *(_QWORD *)&v46[0] = v4;
  AccessibilityProperties.visibility.getter();
  if ((v39 & 4) != 0)
    v30 = 1;
  else
    v30 = ~(BYTE4(v39) >> 1) & 2;
  if (!v5)
  {
    if (v30 != 2)
      goto LABEL_64;
LABEL_60:
    if ((v9 & 1) == 0)
      goto LABEL_70;
    goto LABEL_64;
  }
  *(_QWORD *)&v45[0] = v5;
  AccessibilityProperties.visibility.getter();
  if ((v46[0] & 4) != 0)
    v31 = 1;
  else
    v31 = ~(BYTE4(v46[0]) >> 1) & 2;
  if (v30 != 2)
  {
    if (v31 != 2 && ((v31 ^ v30 | v9) & 1) == 0)
      goto LABEL_70;
    goto LABEL_64;
  }
  if (v31 == 2)
    goto LABEL_60;
LABEL_64:
  v32 = MEMORY[0x18D760234](&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);
  if (v32)
  {
    v33 = (void *)v32;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    v35 = v10[2];
    v34 = v10[3];
    if (v35 >= v34 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v10);
    v40 = &type metadata for AccessibilityCore.Notification.LayoutChanged;
    v41 = &protocol witness table for AccessibilityCore.Notification.LayoutChanged;
    *(_QWORD *)&v39 = 0;
    v10[2] = v35 + 1;
    outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v10[5 * v35 + 4]);

  }
LABEL_70:

  return v10;
}

uint64_t closure #1 in AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = (_QWORD *)(result + 32);
    swift_bridgeObjectRetain();
    do
    {
      __swift_project_boxed_opaque_existential_1(v2, v2[3]);
      AccessibilityCoreNotification.post()();
      v2 += 5;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AccessibilityCoreNotification.post()(void *a1)
{
  UIAccessibilityNotifications v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  __int128 v13;
  __int128 v14;
  _BYTE v15[32];

  if (a1)
  {
    *((_QWORD *)&v14 + 1) = swift_getObjectType();
    *(_QWORD *)&v13 = a1;
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v13, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Any?);
  v2 = *MEMORY[0x1E0DC4578];
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v15, (uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for Any?);
  v3 = *((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v4 = __swift_project_boxed_opaque_existential_1(&v13, *((uint64_t *)&v14 + 1));
    v5 = *(_QWORD *)(v3 - 8);
    v6 = MEMORY[0x1E0C80A78](v4, v4);
    v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v5 + 16))(v8, v6);
    v9 = a1;
    v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    v11 = a1;
    v10 = 0;
  }
  UIAccessibilityPostNotification(v2, v10);
  swift_unknownObjectRelease();
  return outlined destroy of AccessibilityCore.Notification.Info((uint64_t)v15);
}

uint64_t specialized AccessibilityCoreNotification.post()(void *a1, char a2)
{
  UIAccessibilityNotifications v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  void *v9;
  _QWORD v11[3];
  uint64_t v12;
  _BYTE v13[32];

  AccessibilityCore.Notification.ScreenChanged.info.getter(a1, a2, (uint64_t)v13);
  v2 = *MEMORY[0x1E0DC45C0];
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v13, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for Any?);
  v3 = v12;
  if (v12)
  {
    v4 = __swift_project_boxed_opaque_existential_1(v11, v12);
    v5 = *(_QWORD *)(v3 - 8);
    v6 = MEMORY[0x1E0C80A78](v4, v4);
    v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v5 + 16))(v8, v6);
    v9 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    v9 = 0;
  }
  UIAccessibilityPostNotification(v2, v9);
  swift_unknownObjectRelease();
  return outlined destroy of AccessibilityCore.Notification.Info((uint64_t)v13);
}

uint64_t AccessibilityNode.accessibilityCustomAttribute(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE63F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v19 - v8;
  AccessibilityNode.attachment.getter(v19);

  v10 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v10, v19);
  result = swift_bridgeObjectRelease_n();
  v12 = v19[0];
  if (!v19[0])
    goto LABEL_10;
  if (*(_QWORD *)(v19[0] + 16))
  {
    swift_bridgeObjectRetain();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      v16 = *(_QWORD *)(v12 + 56);
      v17 = type metadata accessor for AccessibilityCustomAttributes.Value();
      v18 = *(_QWORD *)(v17 - 8);
      outlined init with copy of AccessibilityCustomAttributes.Value(v16 + *(_QWORD *)(v18 + 72) * v15, (uint64_t)v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v9, 0, 1, v17);
    }
    else
    {
      v17 = type metadata accessor for AccessibilityCustomAttributes.Value();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 1, 1, v17);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = type metadata accessor for AccessibilityCustomAttributes.Value();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 1, 1, v17);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for AccessibilityCustomAttributes.Value();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v9, 1, v17) == 1)
  {
    result = outlined destroy of TaskPriority?((uint64_t)v9, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE63F8]);
LABEL_10:
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  AccessibilityCustomAttributes.Value.axRepresentation()();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE63F8]);
}

uint64_t destroy for AccessibilityAttachmentStorage(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityAttachmentStorage(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityAttachmentStorage(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  return a1;
}

uint64_t assignWithTake for AccessibilityAttachmentStorage(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityAttachmentStorage()
{
  return &type metadata for AccessibilityAttachmentStorage;
}

uint64_t AccessibilityActivationPoint.resolvedDescription(for:in:kind:resolveLabel:)(uint64_t a1, __int128 *a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t ObjCClassFromMetadata;
  void *v22;
  id v24;
  __int128 v25;
  _OWORD v26[5];

  v5 = *(_QWORD *)(v4 + 24);
  v6 = *(_QWORD *)(v4 + 32);
  v7 = *(_BYTE *)(v4 + 40);
  if ((a4 & 1) == 0 || (*(_BYTE *)(v4 + 40) & 1) != 0)
    goto LABEL_17;
  v25 = *a2;
  swift_bridgeObjectRetain();
  if (v5 == static AccessibilityActivationKind.defaultDescriptor.getter() && v6 == v9)
  {
    outlined consume of Text.Storage(v5, v6, 0);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined consume of Text.Storage(v5, v6, 0);
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
      goto LABEL_17;
  }
  AccessibilityNode.attachment.getter((uint64_t *)v26);

  v12 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v12, (uint64_t)v26);
  swift_bridgeObjectRelease_n();
  if (!*(_QWORD *)&v26[0])
  {
LABEL_17:
    outlined copy of Text.Storage(v5, v6, v7);
    swift_bridgeObjectRetain();
    return v5;
  }
  v26[0] = v25;
  static _GraphInputs.defaultInterfaceIdiom.getter();
  v26[2] = v26[3];
  v13 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
  v15 = v14;
  swift_bridgeObjectRelease();
  if (!v15)
  {
LABEL_20:
    outlined copy of Text.Storage(v5, v6, 0);
    swift_bridgeObjectRetain();
    return v5;
  }
  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = v13 & 0xFFFFFFFFFFFFLL;
  if (!v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  if ((a3 & 1) != 0)
    v17 = 0x20706F7244;
  else
    v17 = 0x2067617244;
  v18 = 0xE500000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v17);
  v19._countAndFlagsBits = v13;
  v19._object = (void *)v15;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v20);
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v22 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = objc_msgSend(v22, sel_bundleForClass_, ObjCClassFromMetadata);
  v5 = Text.init(_:tableName:bundle:comment:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

id thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?)(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

Swift::Int specialized Set.formSymmetricDifference(_:)(Swift::Int result)
{
  _QWORD *v1;
  Swift::Int v2;
  int64_t i;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  Swift::UInt v15;
  Swift::UInt v16[2];

  v2 = result;
  i = 0;
  v4 = result + 56;
  v5 = -1 << *(_BYTE *)(result + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(63 - v5) >> 6;
  if (v7)
    goto LABEL_7;
LABEL_8:
  v11 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v11 < v8)
    {
      v12 = *(_QWORD *)(v4 + 8 * v11);
      v13 = i + 1;
      if (v12)
        goto LABEL_21;
      v13 = i + 2;
      if (i + 2 >= v8)
        return outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
      v12 = *(_QWORD *)(v4 + 8 * v13);
      if (v12)
        goto LABEL_21;
      v13 = i + 3;
      if (i + 3 >= v8)
        return outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
      v12 = *(_QWORD *)(v4 + 8 * v13);
      if (v12)
      {
LABEL_21:
        v7 = (v12 - 1) & v12;
        v10 = __clz(__rbit64(v12)) + (v13 << 6);
        for (i = v13; ; v10 = v9 | (i << 6))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10);
          if ((specialized Set.contains(_:)(v15, *v1) & 1) != 0)
          {
            result = specialized Set._Variant.remove(_:)(v15, (uint64_t)v16);
            if (!v7)
              goto LABEL_8;
          }
          else
          {
            result = specialized Set._Variant.insert(_:)(v16, v15);
            if (!v7)
              goto LABEL_8;
          }
LABEL_7:
          v9 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      v14 = i + 4;
      if (i + 4 < v8)
      {
        v12 = *(_QWORD *)(v4 + 8 * v14);
        if (v12)
        {
          v13 = i + 4;
          goto LABEL_21;
        }
        while (1)
        {
          v13 = v14 + 1;
          if (__OFADD__(v14, 1))
            goto LABEL_27;
          if (v13 >= v8)
            return outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
          v12 = *(_QWORD *)(v4 + 8 * v13);
          ++v14;
          if (v12)
            goto LABEL_21;
        }
      }
    }
    return outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized static AccessibilityProperties.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int64_t v23;
  __int128 v24[2];
  _BYTE v25[40];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v2 = *a1;
  v3 = *a2;
  if (*(_QWORD *)(*a1 + 16) != *(_QWORD *)(*a2 + 16))
    return 0;
  v22 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v23 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v6)
    goto LABEL_7;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v8 << 6);
LABEL_6:
  v11 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)&v26 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10);
  outlined init with copy of TableColumnList(v11 + 40 * v10, (uint64_t)&v26 + 8);
  while (1)
  {
    outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)&v26, (uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (!v31)
    {
      swift_release();
      return 1;
    }
    v16 = v29;
    outlined init with take of OptionalBinaryInteger(&v30, (uint64_t)&v26);
    if (!*(_QWORD *)(v3 + 16))
      goto LABEL_33;
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
    if ((v18 & 1) == 0
      || (outlined init with copy of TableColumnList(*(_QWORD *)(v3 + 56) + 40 * v17, (uint64_t)v24),
          outlined init with take of OptionalBinaryInteger(v24, (uint64_t)v25),
          v19 = *((_QWORD *)&v27 + 1),
          v20 = v28,
          __swift_project_boxed_opaque_existential_1(&v26, *((uint64_t *)&v27 + 1)),
          v21 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v20 + 16))(v25, v19, v20),
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v25),
          (v21 & 1) == 0))
    {
LABEL_33:
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      return 0;
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
    if (v6)
      goto LABEL_5;
LABEL_7:
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v12 < v23)
    {
      v13 = *(_QWORD *)(v22 + 8 * v12);
      if (v13)
        goto LABEL_10;
      v14 = v8 + 2;
      ++v8;
      if (v12 + 1 < v23)
      {
        v13 = *(_QWORD *)(v22 + 8 * v14);
        if (v13)
          goto LABEL_13;
        v8 = v12 + 1;
        if (v12 + 2 < v23)
        {
          v13 = *(_QWORD *)(v22 + 8 * (v12 + 2));
          if (v13)
          {
            v12 += 2;
            goto LABEL_10;
          }
          v14 = v12 + 3;
          v8 = v12 + 2;
          if (v12 + 3 < v23)
          {
            v13 = *(_QWORD *)(v22 + 8 * v14);
            if (v13)
            {
LABEL_13:
              v12 = v14;
LABEL_10:
              v6 = (v13 - 1) & v13;
              v10 = __clz(__rbit64(v13)) + (v12 << 6);
              v8 = v12;
              goto LABEL_6;
            }
            v12 += 4;
            v8 = v14;
            if (v12 < v23)
              break;
          }
        }
      }
    }
LABEL_26:
    v6 = 0;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
  }
  v13 = *(_QWORD *)(v22 + 8 * v12);
  v15 = v12;
  if (v13)
    goto LABEL_10;
  while (1)
  {
    v12 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v12 >= v23)
    {
      v8 = v23 - 1;
      goto LABEL_26;
    }
    v13 = *(_QWORD *)(v22 + 8 * v12);
    ++v15;
    if (v13)
      goto LABEL_10;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v19[5];
  __int128 v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  v24 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    swift_bridgeObjectRetain();
    v8 = a1 + 48;
    do
    {
      v9 = *(_BYTE *)(v8 + 40);
      v10 = *(_QWORD *)(v8 + 32);
      v11 = *(_BYTE *)(v8 + 24);
      v13 = *(_QWORD *)(v8 - 8);
      v12 = *(_QWORD *)v8;
      v14 = *(_QWORD *)(v8 - 16);
      v19[2] = v14;
      v19[3] = v13;
      v19[4] = v12;
      v20 = *(_OWORD *)(v8 + 8);
      v21 = v11;
      v22 = v10;
      v23 = v9;
      v19[0] = a2;
      v19[1] = a3;
      outlined copy of Text.Suffix.Storage(v14, v13, v12);
      v15 = AccessibilityRotorInfo.resolve(in:for:)(v19, a4);
      v16 = outlined consume of Text.Suffix.Storage(v14, v13, v12);
      if (v15)
      {
        MEMORY[0x18D75CF58](v16);
        if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += 64;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return v24;
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, char a6)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v24[2];
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  result = MEMORY[0x1E0DEE9D8];
  v31 = MEMORY[0x1E0DEE9D8];
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityLocationDescriptor);
    swift_bridgeObjectRetain();
    v10 = 0;
    v18 = a5 & 1;
    v19 = a1;
    do
    {
      v11 = a1 + v10;
      v12 = *(_QWORD *)(a1 + v10 + 80);
      v13 = *(_BYTE *)(a1 + v10 + 72);
      v15 = *(_QWORD *)(v11 + 56);
      v14 = *(_QWORD *)(v11 + 64);
      v16 = *(_BYTE *)(v11 + 48);
      v25 = *(_OWORD *)(v11 + 32);
      v26 = v16;
      v27 = v15;
      v28 = v14;
      v29 = v13;
      v30 = v12;
      v24[0] = a2;
      v24[1] = a3;
      v17 = a4;
      outlined copy of Text.Storage(v15, v14, v13);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      if (UIAccessibilityLocationDescriptor.init(_:in:for:kind:resolveLabel:)((uint64_t)&v25, v24, v17, a6, v18))
      {
        MEMORY[0x18D75CF58]();
        if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v10 += 56;
      --v8;
      a1 = v19;
    }
    while (v8);
    swift_bridgeObjectRelease();
    return v31;
  }
  return result;
}

id specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  objc_super v13;

  v6 = v3;
  UniqueID.init()();
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_version] = 0;
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children] = MEMORY[0x1E0DEE9D8];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v8 = &v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost];
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost + 8] = 0;
  swift_unknownObjectWeakInit();
  v9 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_isFromDisplayList;
  v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_isFromDisplayList] = 0;
  closure #1 in variable initialization expression of AccessibilityNode.environment((uint64_t *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment]);
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage] = v7;
  v10 = &v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
  *v10 = 0;
  v10[1] = 0;
  v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
  v11 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformRotorStorage;
  *(_QWORD *)&v6[v11] = specialized Dictionary.init(dictionaryLiteral:)(v7);
  v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored] = 2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope] = 0;
  *((_QWORD *)v8 + 1) = a2;
  swift_unknownObjectWeakAssign();
  v6[v9] = a3;

  v13.receiver = v6;
  v13.super_class = (Class)type metadata accessor for AccessibilityNode();
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;
  char **v7;
  char *v8;
  id v9;
  id v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[3];

  v3 = *a1;
  v4 = (void *)a1[1];
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  v19[0] = *a1;
  v19[1] = v4;
  AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(v19);
  v7 = (char **)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  v8 = *v7;
  v9 = v4;
  swift_bridgeObjectRetain_n();
  v10 = v9;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v7 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    *v7 = v8;
  }
  v13 = *((_QWORD *)v8 + 2);
  v12 = *((_QWORD *)v8 + 3);
  if (v13 >= v12 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v8);
    *v7 = v8;
  }
  *((_QWORD *)v8 + 2) = v13 + 1;
  v14 = &v8[40 * v13];
  *((_QWORD *)v14 + 4) = v3;
  *((_QWORD *)v14 + 5) = v4;
  *((_QWORD *)v14 + 6) = 0;
  *((_QWORD *)v14 + 7) = v5;
  v14[64] = v6;
  v15 = (_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
  v17 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8);
  *v15 = 0;
  v15[1] = 0;
  outlined consume of AccessibilityAttachment?(v16, v17);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty) = 1;

  return swift_bridgeObjectRelease();
}

uint64_t sub_187767174()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)()
{
  uint64_t v0;

  return specialized AccessibilityCoreNotification.post()(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t outlined destroy of AccessibilityCore.Notification.Info(uint64_t a1)
{
  destroy for _PresentationTransitionOutputs(a1);
  return a1;
}

uint64_t sub_1877671D8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)()
{
  uint64_t v0;

  return closure #1 in AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)(*(_QWORD *)(v0 + 16));
}

void type metadata accessor for (AccessibilityValueStorage?, AccessibilityValueStorage?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AccessibilityValueStorage?, AccessibilityValueStorage?))
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AccessibilityValueStorage?, AccessibilityValueStorage?));
  }
}

uint64_t specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)(char **a1, uint64_t *a2, char a3)
{
  char *v3;
  char *v4;
  char *v6;
  char *v7;
  char v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  char **v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  void *v38;
  char *v39;
  char isUniquelyReferenced_nonNull_native;
  char *v41;
  void *v42;
  char *v43;
  uint64_t v44;
  void *v45;
  uint64_t result;
  char *v47;
  char *v48;
  void *v49;
  char *v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char v62;

  v4 = v3;
  v7 = *a1;
  v6 = a1[1];
  v8 = *((_BYTE *)a2 + 8);
  v61 = *a2;
  v62 = v8;
  v9 = AccessibilityNode.attachmentIndex(of:)((uint64_t)&v61);
  if ((v10 & 1) != 0)
    return 0;
  v11 = v9;
  v12 = (char **)&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
  swift_beginAccess();
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v11 >= *((_QWORD *)*v12 + 2))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v13 = (uint64_t)&(*v12)[40 * v11];
  v15 = *(_QWORD *)(v13 + 32);
  v14 = *(void **)(v13 + 40);
  v55 = 40 * v11;
  v56 = v15;
  v57 = v14;
  *(_QWORD *)&v60 = v7;
  *((_QWORD *)&v60 + 1) = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  v16 = v14;
  if ((MEMORY[0x18D75A1E0](&v56, &v60) & 1) != 0)
  {
LABEL_5:
    v17 = 0;
LABEL_30:
    swift_release();

    swift_bridgeObjectRelease();
    return v17;
  }
  v54 = v16;
  v58 = v7;
  v59 = v15;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v18 = specialized AccessibilityProperties.subscript.getter(v15);
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRelease();
  v20 = swift_bridgeObjectRetain();
  v21 = specialized AccessibilityProperties.subscript.getter(v20);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v21 + 16);
  swift_bridgeObjectRelease();
  v3 = v7;
  if (v19 != v22)
    goto LABEL_18;
  v23 = swift_bridgeObjectRetain();
  v24 = specialized AccessibilityProperties.subscript.getter(v23);
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(v24 + 16);
  swift_bridgeObjectRelease();
  if (!v25)
  {
    v26 = swift_bridgeObjectRetain();
    v27 = specialized AccessibilityProperties.subscript.getter(v26);
    swift_bridgeObjectRelease();
    v28 = *(_QWORD *)(v27 + 16);
    swift_bridgeObjectRelease();
    v3 = v7;
    if (!v28)
      goto LABEL_18;
  }
  v16 = (id)MEMORY[0x1E0DEE9D8];
  specialized AccessibilityProperties.subscript.setter(MEMORY[0x1E0DEE9D8]);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v16);
  v3 = v58;
  v56 = v59;
  *(_QWORD *)&v60 = v58;
  if ((specialized static AccessibilityProperties.== infix(_:_:)(&v56, (uint64_t *)&v60) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11 < *((_QWORD *)*v12 + 2))
    {
      v32 = (uint64_t)&(*v12)[v55];
      v34 = *(_QWORD *)(v32 + 32);
      v33 = *(void **)(v32 + 40);
      v56 = v34;
      v57 = v33;
      *(_QWORD *)&v60 = v7;
      *((_QWORD *)&v60 + 1) = v6;
      v53 = v33;
      swift_bridgeObjectRetain();
      v35 = v6;
      swift_bridgeObjectRetain();
      AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)(&v56, &v60);

      swift_bridgeObjectRelease();
      if ((a3 & 1) == 0)
      {
        v3 = *v12;
        swift_bridgeObjectRetain();
        v39 = v35;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v12 = v3;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
LABEL_27:
          v16 = v54;
          if (v11 >= *((_QWORD *)v3 + 2))
          {
            __break(1u);
LABEL_43:
            v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
            *v12 = v3;
            goto LABEL_13;
          }
          v41 = &v3[v55];
          v42 = *(void **)&v3[v55 + 40];
          *((_QWORD *)v41 + 4) = v7;
          *((_QWORD *)v41 + 5) = v6;
          swift_bridgeObjectRelease();

LABEL_29:
          v43 = &v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          v44 = *(_QWORD *)&v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          v45 = *(void **)&v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
          *(_QWORD *)v43 = 0;
          *((_QWORD *)v43 + 1) = 0;
          outlined consume of AccessibilityAttachment?(v44, v45);
          v17 = 1;
          v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

          swift_bridgeObjectRelease();
          goto LABEL_30;
        }
LABEL_41:
        v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
        *v12 = v3;
        goto LABEL_27;
      }
      swift_beginAccess();
      v3 = *v12;
      v36 = swift_isUniquelyReferenced_nonNull_native();
      *v12 = v3;
      if ((v36 & 1) != 0)
      {
LABEL_21:
        if (v11 < *((_QWORD *)v3 + 2))
        {
          *(_QWORD *)&v60 = v7;
          AccessibilityProperties.merge(with:)((uint64_t *)&v60);
          v37 = *(_QWORD *)&v3[v55 + 40];
          *(_QWORD *)&v60 = *(_QWORD *)&v3[v55 + 32];
          *((_QWORD *)&v60 + 1) = v37;
          v38 = (void *)AccessibilityAttachment.platformElement.getter();

          if (!v38)
          {
            *(_QWORD *)&v60 = v7;
            *((_QWORD *)&v60 + 1) = v6;
            if (AccessibilityAttachment.platformElement.getter())
              AccessibilityAttachment.platformElement.setter();
          }
          swift_endAccess();
          v16 = v54;
          goto LABEL_29;
        }
        __break(1u);
        goto LABEL_41;
      }
LABEL_39:
      v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
      *v12 = v3;
      goto LABEL_21;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((a3 & 1) == 0)
  {
    v3 = *v12;
    v47 = v6;
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    *v12 = v3;
    v16 = v54;
    if ((result & 1) != 0)
      goto LABEL_33;
    goto LABEL_45;
  }
  swift_beginAccess();
  v3 = *v12;
  v29 = swift_isUniquelyReferenced_nonNull_native();
  *v12 = v3;
  if ((v29 & 1) == 0)
    goto LABEL_43;
LABEL_13:
  if (v11 < *((_QWORD *)v3 + 2))
  {
    *(_QWORD *)&v60 = v7;
    AccessibilityProperties.merge(with:)((uint64_t *)&v60);
    v30 = *(_QWORD *)&v3[v55 + 40];
    *(_QWORD *)&v60 = *(_QWORD *)&v3[v55 + 32];
    *((_QWORD *)&v60 + 1) = v30;
    v31 = (void *)AccessibilityAttachment.platformElement.getter();

    if (!v31)
    {
      *(_QWORD *)&v60 = v7;
      *((_QWORD *)&v60 + 1) = v6;
      if (AccessibilityAttachment.platformElement.getter())
        AccessibilityAttachment.platformElement.setter();
    }
    swift_endAccess();
    v16 = v54;
    goto LABEL_35;
  }
  __break(1u);
LABEL_45:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
  v3 = (char *)result;
  *v12 = (char *)result;
LABEL_33:
  if (v11 < *((_QWORD *)v3 + 2))
  {
    v48 = &v3[v55];
    v49 = *(void **)&v3[v55 + 40];
    *((_QWORD *)v48 + 4) = v7;
    *((_QWORD *)v48 + 5) = v6;
    swift_bridgeObjectRelease();

LABEL_35:
    v50 = &v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
    v51 = *(_QWORD *)&v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
    v52 = *(void **)&v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
    *(_QWORD *)v50 = 0;
    *((_QWORD *)v50 + 1) = 0;
    outlined consume of AccessibilityAttachment?(v51, v52);
    v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t specialized AccessibilityNode.removeAttachment(isInPlatformItemList:token:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char **v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  unsigned __int8 *i;
  uint64_t v10;
  void *v11;
  int v12;
  id v13;
  id v14;
  char **v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  void *v29;
  int v31;
  char *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  char isUniquelyReferenced_nonNull_native;
  char *v41;
  void *v42;
  id v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char **v52;
  uint64_t v53;
  void *v54;
  __int128 v55;

  v2 = v1;
  v3 = *a1;
  v4 = *((unsigned __int8 *)a1 + 8);
  v5 = (char **)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  result = swift_beginAccess();
  v7 = *v5;
  v8 = *((_QWORD *)*v5 + 2);
  if (!v8)
    return result;
  v52 = v5;
  swift_bridgeObjectRetain_n();
  for (i = (unsigned __int8 *)(v7 + 64); ; i += 40)
  {
    v10 = *((_QWORD *)i - 4);
    v11 = (void *)*((_QWORD *)i - 3);
    v12 = *i;
    if (v12 == 255)
      break;
    v53 = *((_QWORD *)i - 1);
    LOBYTE(v54) = v12;
    if (v4 != 255)
    {
      *(_QWORD *)&v55 = v3;
      BYTE8(v55) = v4 & 1;
      swift_retain();
      swift_bridgeObjectRetain();
      v13 = v11;
      if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
        goto LABEL_11;
      swift_release();

      swift_bridgeObjectRelease();
    }
LABEL_4:
    if (!--v8)
      return swift_bridgeObjectRelease_n();
  }
  if (v4 != 255)
    goto LABEL_4;
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = v11;
LABEL_11:
  swift_bridgeObjectRelease_n();
  v53 = v10;
  v54 = v11;
  v55 = 0uLL;
  swift_bridgeObjectRetain();
  v14 = v13;
  AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)(&v53, &v55);

  swift_bridgeObjectRelease();
  v15 = v52;
  swift_beginAccess();
  v16 = *v52;
  v17 = *((_QWORD *)*v52 + 2);
  if (!v17)
  {
    v21 = 0;
    goto LABEL_24;
  }
  v43 = v14;
  swift_bridgeObjectRetain();
  v18 = 0;
  v19 = 0;
  while (2)
  {
    v20 = v16[v18 + 64];
    if (v20 == 255)
    {
      if (v4 == 255)
        goto LABEL_18;
LABEL_14:
      ++v19;
      v18 += 40;
      if (v17 == v19)
      {
        result = swift_bridgeObjectRelease();
        v21 = *((_QWORD *)*v52 + 2);
        goto LABEL_23;
      }
      continue;
    }
    break;
  }
  *(_QWORD *)&v55 = *(_QWORD *)&v16[v18 + 56];
  BYTE8(v55) = v20;
  if (v4 == 255 || (static AccessibilityAttachmentToken.== infix(_:_:)() & 1) == 0)
    goto LABEL_14;
LABEL_18:
  result = swift_bridgeObjectRelease();
  v21 = v19 + 1;
  if (__OFADD__(v19, 1))
    goto LABEL_51;
  v22 = *v52;
  v23 = *((_QWORD *)*v52 + 2);
  if (v21 == v23)
  {
    v17 = v19;
LABEL_23:
    v14 = v43;
    if ((uint64_t)v21 < v17)
      goto LABEL_50;
LABEL_24:
    specialized Array.replaceSubrange<A>(_:with:)(v17, v21);
    swift_endAccess();
    v24 = (_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
    v25 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
    v26 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8);
    *v24 = 0;
    v24[1] = 0;
    outlined consume of AccessibilityAttachment?(v25, v26);
    *(_BYTE *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty) = 1;

    swift_bridgeObjectRelease();
    return swift_release();
  }
  v27 = v18 + 104;
  v17 = v19;
  v44 = v2;
  while (2)
  {
    if (v21 < v23)
    {
      v31 = v22[v27];
      if (v31 == 255)
      {
        if (v4 != 255)
        {
LABEL_36:
          if (v21 != v17)
          {
            if (v17 < 0)
              goto LABEL_46;
            v32 = *v15;
            v33 = *((_QWORD *)v32 + 2);
            if (v17 >= v33)
              goto LABEL_47;
            if (v21 >= v33)
              goto LABEL_48;
            v50 = 40 * v17;
            v34 = &v32[40 * v17];
            v35 = *((_QWORD *)v34 + 4);
            v51 = (void *)*((_QWORD *)v34 + 5);
            v45 = v34[64];
            v37 = *(_QWORD *)&v32[v27 - 32];
            v36 = *(void **)&v32[v27 - 24];
            v47 = v32[v27];
            v46 = *((_OWORD *)v34 + 3);
            v48 = *(_QWORD *)&v32[v27 - 8];
            v49 = *(_QWORD *)&v32[v27 - 16];
            swift_retain();
            swift_bridgeObjectRetain();
            v38 = v51;
            swift_retain();
            swift_bridgeObjectRetain();
            v39 = v36;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *v52 = v32;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
              *v52 = v32;
            }
            v41 = &v32[v50];
            v42 = *(void **)&v32[v50 + 40];
            *((_QWORD *)v41 + 4) = v37;
            *((_QWORD *)v41 + 5) = v36;
            *((_QWORD *)v41 + 6) = v49;
            *((_QWORD *)v41 + 7) = v48;
            v41[64] = v47;
            swift_bridgeObjectRelease();

            result = swift_release();
            if (v21 >= *((_QWORD *)*v52 + 2))
              goto LABEL_49;
            v28 = &(*v52)[v27];
            v29 = (void *)*((_QWORD *)v28 - 3);
            *((_QWORD *)v28 - 4) = v35;
            *((_QWORD *)v28 - 3) = v51;
            *((_OWORD *)v28 - 1) = v46;
            *v28 = v45;
            swift_bridgeObjectRelease();

            v15 = v52;
            result = swift_release();
            v2 = v44;
          }
          if (__OFADD__(v17++, 1))
            goto LABEL_45;
        }
      }
      else
      {
        *(_QWORD *)&v55 = *(_QWORD *)&v22[v27 - 8];
        BYTE8(v55) = v31;
        if (v4 == 255)
          goto LABEL_36;
        result = static AccessibilityAttachmentToken.== infix(_:_:)();
        if ((result & 1) == 0)
          goto LABEL_36;
      }
      ++v21;
      v22 = *v15;
      v23 = *((_QWORD *)*v15 + 2);
      v27 += 40;
      if (v21 == v23)
        goto LABEL_23;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t outlined copy of AccessibilityAttachment?(uint64_t result, void *a2)
{
  id v2;

  if (result)
  {
    v2 = a2;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_187767C94()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityNode.textLinkActivationPoint.getter(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  return closure #1 in AccessibilityNode.textLinkActivationPoint.getter(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_187767CAC()
{
  return swift_deallocObject();
}

uint64_t outlined consume of AccessibilityAttachmentStorage?(uint64_t result, void *a2)
{
  if (result)
  {
    swift_bridgeObjectRelease();

    return swift_release();
  }
  return result;
}

uint64_t outlined consume of AccessibilityActivationPointStorage??(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
    return outlined consume of AccessibilityActivationPointStorage?(a1, a2, a3, a4);
  return a1;
}

uint64_t sub_187767D00()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityNode.childActivationPoint(implicit:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AccessibilityNode.childActivationPoint(implicit:)(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for specialized closure #1 in Collection<>.filterVisible(_:)(uint64_t *a1)
{
  uint64_t v1;

  return specialized closure #1 in Collection<>.filterVisible(_:)(a1, *(uint64_t (**)(uint64_t))(v1 + 16)) & 1;
}

uint64_t sub_187767D4C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSAttributedString.hasAccessibilityLinks.getter(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  return closure #1 in NSAttributedString.hasAccessibilityLinks.getter(a1, a2, a3, a4, *(_BYTE **)(v4 + 16));
}

uint64_t sub_187767D64()
{
  return swift_deallocObject();
}

uint64_t sub_187767D74()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

id partial apply for closure #1 in UIKitAccessibilityLinkRotorBridge.init(for:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in UIKitAccessibilityLinkRotorBridge.init(for:)(a1, v1);
}

double _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 112) = 2;
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

uint64_t outlined init with take of AccessibilityTextLayoutProperties??(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityTextLayoutProperties??();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AccessibilityTextLayoutProperties??()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityTextLayoutProperties??)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextLayoutProperties??);
  }
}

uint64_t outlined release of AccessibilityTextLayoutProperties?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 120);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), v4);
  return a1;
}

uint64_t sub_187767ED0()
{
  return swift_deallocObject();
}

uint64_t sub_187767EE0()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_187767F40()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

void partial apply for closure #1 in AccessibilityNode.scheduleNotifyForChildrenChange(fullReplacement:)()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  AccessibilityCoreNotification.post()();
}

uint64_t NavigationStack.$path.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 48));
  v3 = *v2;
  if ((v2[3] & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.projectedValue.getter();
    return v5;
  }
  return v3;
}

uint64_t NavigationStack.localStateHost.getter()
{
  type metadata accessor for NavigationStateHost();
  lazy protocol witness table accessor for type NavigationStateHost and conformance NavigationStateHost();
  return StateObject.wrappedValue.getter();
}

uint64_t NavigationStack.init<>(root:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v6 = (int *)type metadata accessor for NavigationStack(0, (uint64_t)&type metadata for NavigationPath, a2, a3);
  *(_QWORD *)(a4 + v6[11]) = 0;
  v7 = a4 + v6[13];
  *(_QWORD *)v7 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = 0;
  a1();
  type metadata accessor for AnyNavigationPath.HeterogeneousBoxBase();
  result = swift_allocObject();
  v9 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = v9;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = v9;
  *(_QWORD *)(result + 56) = 0;
  v10 = a4 + v6[12];
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)v10 = result;
  *(_BYTE *)(v10 + 24) = 0;
  return result;
}

uint64_t NavigationStack.init<>(path:root:)@<X0>(uint64_t *a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = *((_BYTE *)a1 + 40);
  v11 = a1[6];
  v18 = a1[7];
  v19 = *a1;
  v12 = (int *)type metadata accessor for NavigationStack(0, (uint64_t)&type metadata for NavigationPath, a3, a4);
  *(_QWORD *)(a5 + v12[11]) = 0;
  v13 = a5 + v12[13];
  *(_QWORD *)v13 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(v13 + 8) = 0;
  *(_BYTE *)(v13 + 16) = 0;
  a2();
  type metadata accessor for AnyNavigationPath.HeterogeneousBoxBase();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v7;
  *(_QWORD *)(v14 + 24) = v8;
  *(_QWORD *)(v14 + 32) = v9;
  *(_BYTE *)(v14 + 40) = v10;
  *(_QWORD *)(v14 + 48) = v11;
  *(_QWORD *)(v14 + 56) = v18;
  outlined copy of NavigationPath.Representation(v7, v8, v9, v10);
  lazy protocol witness table accessor for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous();
  swift_bridgeObjectRetain();
  v15 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_release();
  outlined consume of NavigationPath.Representation(v7, v8, v9, v10);
  result = swift_bridgeObjectRelease();
  v17 = a5 + v12[12];
  *(_QWORD *)v17 = v19;
  *(_QWORD *)(v17 + 8) = v15;
  *(_QWORD *)(v17 + 16) = v14;
  *(_BYTE *)(v17 + 24) = 1;
  return result;
}

void NavigationStack.init<>(path:root:)(void (*a1)(void)@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = type metadata accessor for NavigationStack(0, a2, a3, a5);
  *(_QWORD *)(a4 + *(int *)(v8 + 44)) = 0;
  v9 = a4 + *(int *)(v8 + 52);
  *(_QWORD *)v9 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 16) = 0;
  a1();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2);
  type metadata accessor for Binding();
  type metadata accessor for AnyNavigationPath.ToHomogeneous();
}

double sub_1877683BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  __int128 v8;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationPath.ToHomogeneous<A>, a1);
  Binding.projecting<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  v5 = v1 + *(int *)(v3 + 48);
  *(_QWORD *)v5 = v7;
  result = *(double *)&v8;
  *(_OWORD *)(v5 + 8) = v8;
  *(_BYTE *)(v5 + 24) = 1;
  return result;
}

void NavigationStack.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = type metadata accessor for ModifiedContent();
  v5[0] = *(_QWORD *)(a1 + 32);
  v5[1] = &protocol witness table for StackDepthModifier;
  v3 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v5);
  type metadata accessor for NavigationStackStyledCore(255, v2, v3, v4);
  type metadata accessor for NavigationStackReader();
}

void sub_1877684D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v15 = type metadata accessor for ModifiedContent();
  v16 = lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier();
  *(_QWORD *)(v14 - 144) = &protocol witness table for NavigationStackReader<A, B>;
  *(_QWORD *)(v14 - 136) = v16;
  MEMORY[0x18D75FFDC](v13, v15, v14 - 144);
  v17 = type metadata accessor for _UnaryViewAdaptor();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  closure #1 in NavigationStack.body.getter(v9, *(_QWORD *)(v11 + 16), v10, v12, (uint64_t)v20);
}

uint64_t sub_187768580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4108], v1);
  static ViewBuilder.buildExpression<A>(_:)(v2, v1, v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, v0);
  return v6(v3, v1);
}

uint64_t type metadata accessor for NavigationStackStyledCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackStyledCore);
}

void closure #1 in NavigationStack.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _UNKNOWN **v16;
  uint64_t v17;
  _QWORD v18[2];

  v13 = a5;
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ModifiedContent();
  v18[0] = a4;
  v18[1] = &protocol witness table for StackDepthModifier;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v18);
  v12 = type metadata accessor for NavigationStackStyledCore(255, v8, v9, v10);
  v14 = v12;
  v15 = a3;
  v16 = &protocol witness table for NavigationStackStyledCore<A>;
  v17 = a4;
  type metadata accessor for NavigationStackReader();
}

void sub_1877686D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  *(_QWORD *)(v14 - 168) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (uint64_t *)((char *)&a9 - v15);
  v17 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 160) = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v14 - 184) = (char *)&a9 - v21;
  v22 = type metadata accessor for NavigationStack(0, v13, v10, v11);
  *(_QWORD *)(v14 - 192) = Namespace.wrappedValue.getter();
  v23 = NavigationStack.$path.getter(v22);
  *(_QWORD *)(v14 - 208) = v24;
  *(_QWORD *)(v14 - 200) = v23;
  *(_QWORD *)(v14 - 216) = v25;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 24) - 8) + 16))(v12, v9);
  NavigationStack.localStateHost.getter();
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v13;
  v26[3] = v10;
  v26[4] = v11;
  NavigationStackReader.init(namespace:path:root:hasImplicitState:stateHost:transform:)(*(_QWORD *)(v14 - 192), *(_QWORD *)(v14 - 200), *(_QWORD *)(v14 - 208), *(_QWORD *)(v14 - 216), v16);
}

uint64_t sub_187768830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  MEMORY[0x18D75B4AC](a1, v4, &type metadata for NavigationCommonModifier, &protocol witness table for NavigationStackReader<A, B>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 168) + 8))(v3, v4);
  v6 = lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier();
  *(_QWORD *)(v5 - 144) = &protocol witness table for NavigationStackReader<A, B>;
  *(_QWORD *)(v5 - 136) = v6;
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v5 - 144);
  v8 = *(_QWORD *)(v5 - 184);
  static ViewBuilder.buildExpression<A>(_:)(v1, v2, v7);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 160) + 8);
  v9(v1, v2);
  static ViewBuilder.buildBlock<A>(_:)(v8, v2, *(_QWORD *)(v5 - 152));
  return v9(v8, v2);
}

uint64_t associated type witness table accessor for View.Body : View in NavigationStack<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in closure #1 in NavigationStack.body.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  _QWORD v22[2];

  v12 = type metadata accessor for ModifiedContent();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)v22 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)v22 - v16, a4, v12, v15);
  v22[0] = a5;
  v22[1] = &protocol witness table for StackDepthModifier;
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a6, v17, v12);
  result = type metadata accessor for NavigationStackStyledCore(0, v12, v18, v19);
  v21 = a6 + *(int *)(result + 36);
  *(_QWORD *)v21 = a1;
  *(_BYTE *)(v21 + 8) = a2;
  *(_QWORD *)(v21 + 16) = a3;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationStack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(unsigned __int8 *)(v13 + 24);
    if (v14 >= 2)
      v14 = *(_DWORD *)v13 + 2;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    if (v14 == 1)
    {
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
      swift_retain();
      v15 = 1;
    }
    else
    {
      v15 = 0;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
    }
    swift_retain();
    swift_retain();
    *(_BYTE *)(v12 + 24) = v15;
    v16 = ((unint64_t)v10 + 47) & 0xFFFFFFFFFFFFFFF8;
    v17 = ((unint64_t)v11 + 47) & 0xFFFFFFFFFFFFFFF8;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    outlined copy of HoverCallback();
    *(_QWORD *)v16 = v18;
    *(_QWORD *)(v16 + 8) = v19;
    *(_BYTE *)(v16 + 16) = v20;
  }
  return v4;
}

uint64_t destroy for NavigationStack(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(unsigned __int8 *)(v4 + 24);
  if (v5 >= 2)
    v5 = *(_DWORD *)v4 + 2;
  swift_release();
  if (v5 == 1)
    swift_release();
  swift_release();
  return outlined consume of HoverCallback();
}

uint64_t initializeWithCopy for NavigationStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(unsigned __int8 *)(v10 + 24);
  if (v11 >= 2)
    v11 = *(_DWORD *)v10 + 2;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  if (v11 == 1)
  {
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
    swift_retain();
    v12 = 1;
  }
  else
  {
    v12 = 0;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  }
  swift_retain();
  swift_retain();
  *(_BYTE *)(v9 + 24) = v12;
  v13 = ((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  v16 = *(_QWORD *)(v14 + 8);
  v17 = *(_BYTE *)(v14 + 16);
  outlined copy of HoverCallback();
  *(_QWORD *)v13 = v15;
  *(_QWORD *)(v13 + 8) = v16;
  *(_BYTE *)(v13 + 16) = v17;
  return a1;
}

uint64_t assignWithCopy for NavigationStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v10)
  {
    v11 = *(unsigned __int8 *)(v9 + 24);
    if (v11 >= 2)
      v11 = *(_DWORD *)v9 + 2;
    swift_release();
    if (v11 == 1)
      swift_release();
    swift_release();
    v12 = *(unsigned __int8 *)(v10 + 24);
    if (v12 >= 2)
      v12 = *(_DWORD *)v10 + 2;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
    if (v12 == 1)
    {
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
      *(_BYTE *)(v9 + 24) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)(v9 + 24) = 0;
    }
    swift_retain();
    swift_retain();
  }
  v13 = ((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  v16 = *(_QWORD *)(v14 + 8);
  v17 = *(_BYTE *)(v14 + 16);
  outlined copy of HoverCallback();
  *(_QWORD *)v13 = v15;
  *(_QWORD *)(v13 + 8) = v16;
  *(_BYTE *)(v13 + 16) = v17;
  outlined consume of HoverCallback();
  return a1;
}

uint64_t initializeWithTake for NavigationStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(unsigned __int8 *)(v9 + 24);
  if (v10 >= 2)
    v10 = *(_DWORD *)v9 + 2;
  v11 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v10 == 1)
  {
    v12 = *(_OWORD *)v9;
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  }
  else
  {
    LOBYTE(v10) = 0;
    v12 = *(_OWORD *)v9;
  }
  *(_OWORD *)v11 = v12;
  *(_BYTE *)(v11 + 24) = v10;
  v13 = ((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_OWORD *)v14;
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  *(_OWORD *)v13 = v15;
  return a1;
}

uint64_t assignWithTake for NavigationStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v10)
  {
    v11 = *(unsigned __int8 *)(v9 + 24);
    if (v11 >= 2)
      v11 = *(_DWORD *)v9 + 2;
    swift_release();
    if (v11 == 1)
      swift_release();
    swift_release();
    v12 = *(unsigned __int8 *)(v10 + 24);
    if (v12 >= 2)
      v12 = *(_DWORD *)v10 + 2;
    if (v12 == 1)
    {
      v13 = *(_OWORD *)v10;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
      *(_OWORD *)v9 = v13;
      v14 = 1;
    }
    else
    {
      v14 = 0;
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    *(_BYTE *)(v9 + 24) = v14;
  }
  v15 = ((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_BYTE *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = v17;
  outlined consume of HoverCallback();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStack(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFE)
    {
      v14 = *(unsigned __int8 *)(((((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8) + 0x18);
      if (v14 >= 2)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((((v7 + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) + 17;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187769128 + 4 * byte_187C56D10[v12]))();
  }
}

void storeEnumTagSinglePayload for NavigationStack(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 17;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_1877692E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18776936CLL);
}

void sub_1877692E8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1877692F0);
  JUMPOUT(0x18776936CLL);
}

void sub_18776933C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18776936CLL);
}

void sub_187769344()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18776936CLL);
}

uint64_t sub_18776934C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFE)
  {
    if (a2 > 0xFE)
      JUMPOUT(0x187769358);
    *(_BYTE *)(((((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24) = -(char)a2;
LABEL_6:
    JUMPOUT(0x18776936CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void sub_187769384(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = &protocol witness table for StackDepthModifier;
  v3 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v5);
  type metadata accessor for NavigationStackStyledCore(255, v2, v3, v4);
  type metadata accessor for NavigationStackReader();
}

uint64_t sub_187769404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[14];

  v1 = type metadata accessor for ModifiedContent();
  v4[0] = &protocol witness table for NavigationStackReader<A, B>;
  v4[1] = lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier();
  MEMORY[0x18D75FFDC](v0, v1, v4);
  v2 = type metadata accessor for _UnaryViewAdaptor();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4108], v2);
}

uint64_t type metadata completion function for NavigationStackStyledCore()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationStackStyledCore(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = *(_QWORD *)(v10 + 16);
    v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)v12 = *(_OWORD *)v10;
    *(_QWORD *)(v12 + 16) = v11;
  }
  return v4;
}

uint64_t initializeWithCopy for NavigationStackStyledCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_QWORD *)(v7 + 16) = v9;
  return a1;
}

uint64_t assignWithCopy for NavigationStackStyledCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  return a1;
}

uint64_t assignWithTake for NavigationStackStyledCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackStyledCore(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFA)
    v6 = 250;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFA)
    {
      v12 = *(unsigned __int8 *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 6)
        return v12 - 5;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187769754 + 4 * byte_187C56D1F[v10]))();
  }
}

void storeEnumTagSinglePayload for NavigationStackStyledCore(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFAu)
    v6 = 250;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1877698C4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187769940);
}

void sub_1877698CC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1877698D4);
  JUMPOUT(0x187769940);
}

void sub_187769918()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187769940);
}

void sub_187769920()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187769940);
}

uint64_t sub_187769928(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFA)
  {
    if (a2 > 0xFA)
      JUMPOUT(0x187769934);
    *(_BYTE *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = a2 + 5;
LABEL_6:
    JUMPOUT(0x187769940);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

_UNKNOWN **base witness table accessor for View in NavigationStackStyledCore<A>()
{
  return &protocol witness table for NavigationStackStyledCore<A>;
}

uint64_t static NavigationStackStyledCore._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int OffsetAttribute2;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  _DWORD v45[19];
  uint64_t v46;

  v40 = a5;
  v46 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v8 = *(_QWORD *)a2;
  v39 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a2 + 72);
  v38 = *(_DWORD *)(a2 + 80);
  LODWORD(v43) = v7;
  type metadata accessor for NavigationStackStyledCore(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64))
    closure #1 in static NavigationStackStyledCore._makeView(view:inputs:)(1, a3, a4, v17);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  LODWORD(v43) = v7;
  _GraphValue.value.getter();
  closure #2 in static NavigationStackStyledCore._makeView(view:inputs:)(1, a3, a4, v18);
  v36 = AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  v19 = v43;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  v20 = swift_release_n();
  MEMORY[0x1E0C80A78](v20, v21);
  v34 = type metadata accessor for NavigationStackStyledCore.NavigationStateStructureSeed(0, a3, a4, v22);
  v35 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackStyledCore<A>.NavigationStateStructureSeed, v34);
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for Attribute<UInt32?>, &lazy cache variable for type metadata for UInt32?, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v43, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_26, (uint64_t)&v33, v34, MEMORY[0x1E0DEDCE8], v23, MEMORY[0x1E0DEDD18], v24);
  v25 = v41;
  v27 = type metadata accessor for NavigationStackStyledCore.NavigationStackRepresentableRoot(0, a3, a4, v26);
  v43 = __PAIR64__(v36, OffsetAttribute2);
  v44 = v25;
  *(_QWORD *)v45 = v19;
  v29 = type metadata accessor for NavigationStackStyledCore.Child(0, a3, a4, v28);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackStyledCore<A>.Child, v29);
  _GraphValue.init<A>(_:)();
  v43 = v8;
  v44 = v39;
  *(_QWORD *)&v45[1] = v9;
  *(_QWORD *)&v45[3] = v10;
  *(_QWORD *)&v45[5] = v11;
  *(_QWORD *)&v45[7] = v12;
  *(_QWORD *)&v45[9] = v13;
  *(_QWORD *)&v45[11] = v14;
  *(_QWORD *)&v45[13] = v15;
  *(_QWORD *)&v45[15] = v16;
  v45[17] = v38;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackStyledCore<A>.NavigationStackRepresentableRoot, v27);
  result = static View.makeDebuggableView(view:inputs:)();
  v31 = v42;
  v32 = v40;
  *v40 = v41;
  v32[1] = v31;
  return result;
}

uint64_t closure #1 in static NavigationStackStyledCore._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for NavigationStackStyledCore(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t closure #2 in static NavigationStackStyledCore._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v5 = type metadata accessor for NavigationStackStyledCore(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 36);
  v10[2] = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_15, (uint64_t)v10, (uint64_t)&type metadata for NavigationStackContext, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

unint64_t NavigationStackStyledCore.NavigationStateStructureSeed.value.getter()
{
  unsigned int *WeakValue;
  uint64_t v1;

  WeakValue = (unsigned int *)AGGraphGetWeakValue();
  if (WeakValue)
    v1 = *WeakValue;
  else
    v1 = 0;
  return v1 | ((unint64_t)(WeakValue == 0) << 32);
}

void protocol witness for static Rule.initialValue.getter in conformance NavigationStackStyledCore<A>.NavigationStateStructureSeed(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 4) = 256;
  *(_DWORD *)a1 = 0;
}

unint64_t protocol witness for Rule.value.getter in conformance NavigationStackStyledCore<A>.NavigationStateStructureSeed@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;

  result = NavigationStackStyledCore.NavigationStateStructureSeed.value.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t NavigationStackStyledCore.Child.ensuredAuthority.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  NavigationStackReader.AppliedBody.authority.getter((uint64_t)v7);
  outlined init with copy of NavigationAuthority??((uint64_t)v7, (uint64_t)&v5);
  if (v6 == 2)
  {
    v10 = xmmword_187BF9840;
    v11 = 0;
  }
  else
  {
    outlined init with take of NavigationAuthority?((uint64_t)&v5, (uint64_t)&v10);
  }
  outlined destroy of NavigationAuthority??((uint64_t)v7);
  if (*((_QWORD *)&v10 + 1) != 1)
    return outlined init with take of NavigationAuthority((uint64_t)&v10, a1);
  type metadata accessor for NavigationStateHost();
  swift_allocObject();
  NavigationStateHost.init()();
  EnvironmentValues.init()();
  v2 = v5;
  v3 = v6;
  swift_weakInit();
  swift_weakAssign();
  swift_release();
  v8 = v2;
  v9 = v3;
  outlined init with take of NavigationAuthority((uint64_t)v7, a1);
  return outlined destroy of NavigationAuthority?((uint64_t)&v10);
}

uint64_t NavigationStackStyledCore.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t Value;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v17;
  _BYTE v18[32];

  v17 = a5;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Value = AGGraphGetValue();
  v11 = *(_QWORD *)Value;
  v12 = *(_QWORD *)(Value + 16);
  v13 = *(_BYTE *)(Value + 8);
  NavigationStackStyledCore.Child.ensuredAuthority.getter((uint64_t)v18);
  v14 = AGGraphGetValue();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v14, a3);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for UInt32?, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v15 = (unsigned int *)AGGraphGetValue();
  return NavigationStackStyledCore.NavigationStackRepresentableRoot.init(context:authority:root:structureSeed:)(v11, v13, v12, (uint64_t)v18, (uint64_t)v9, *v15 | ((unint64_t)*((unsigned __int8 *)v15 + 4) << 32), a3, a4, v17);
}

uint64_t NavigationStackStyledCore.NavigationStackRepresentableRoot.init(context:authority:root:structureSeed:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  *(_QWORD *)a9 = a1;
  *(_BYTE *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  outlined init with take of NavigationAuthority(a4, a9 + 24);
  v15 = type metadata accessor for NavigationStackStyledCore.NavigationStackRepresentableRoot(0, a7, a8, v14);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(a9 + *(int *)(v15 + 40), a5, a7);
  v17 = a9 + *(int *)(v15 + 44);
  *(_DWORD *)v17 = a6;
  *(_BYTE *)(v17 + 4) = BYTE4(a6) & 1;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationStackStyledCore<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for NavigationStackStyledCore.NavigationStackRepresentableRoot(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationStackStyledCore<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return NavigationStackStyledCore.Child.value.getter(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void NavigationStackStyledCore.NavigationStackRepresentableRoot.body.getter(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt v3;
  Swift::UInt v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned __int8 v7;
  _BYTE v8[24];
  uint64_t v9;

  outlined init with copy of NavigationAuthority(v1 + 24, (uint64_t)v8);
  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = (unsigned int *)(v1 + *(int *)(a1 + 44));
  v6 = *v5;
  v7 = *(_BYTE *)(v1 + 8);
  LOBYTE(v9) = *((_BYTE *)v5 + 4);
  _NavigationStackStyleConfiguration.init(authority:context:structureSeed:)((uint64_t)v8, v3, v7, v4, v6 | ((unint64_t)v9 << 32), (uint64_t)&v9);
  lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle();
  lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root();
  swift_bridgeObjectRetain();
  swift_retain();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for _NavigationStackStyleConfiguration.Root, (uint64_t)partial apply for closure #1 in NavigationStackStyledCore.NavigationStackRepresentableRoot.body.getter);
}

uint64_t sub_18776A3C0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in NavigationStackStyledCore.NavigationStackRepresentableRoot.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NavigationStackStyledCore.NavigationStackRepresentableRoot(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 40), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance NavigationStackStyledCore<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return static NavigationStackStyledCore._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

void protocol witness for View.body.getter in conformance NavigationStackStyledCore<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackStyledCore<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t type metadata accessor for NavigationStackStyledCore.NavigationStateStructureSeed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackStyledCore.NavigationStateStructureSeed);
}

uint64_t type metadata accessor for NavigationStackStyledCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackStyledCore.NavigationStackRepresentableRoot);
}

uint64_t type metadata accessor for NavigationStackStyledCore.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackStyledCore.Child);
}

uint64_t sub_18776A510()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NavigationStack.body.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  return closure #1 in closure #1 in NavigationStack.body.getter(a1, a2, a3, a4, *(_QWORD *)(v5 + 32), a5);
}

uint64_t type metadata completion function for NavigationStackStyledCore.NavigationStackRepresentableRoot()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for NavigationStackStyledCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = (a1 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_weakDestroy();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v3 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for NavigationStackStyledCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = (a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = swift_weakCopyInit();
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 24 + v6) & ~v9;
  v11 = (v9 + 24 + v5) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v12(v10, v11, v7);
  v13 = *(_QWORD *)(v8 + 64) + 3;
  v14 = (v13 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = (v13 + v11) & 0xFFFFFFFFFFFFFFFCLL;
  v16 = *(_BYTE *)(v15 + 4);
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = v16;
  return a1;
}

uint64_t assignWithCopy for NavigationStackStyledCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = (a1 + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = (a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_weakCopyAssign();
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v6 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v6 + 16);
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 24 + v5) & ~v8;
  v10 = (v8 + 24 + v6) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 3;
  v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  return a1;
}

uint64_t initializeWithTake for NavigationStackStyledCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = (a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = swift_weakTakeInit();
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(v5 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 24 + v6) & ~v8;
  v10 = (v8 + 24 + v5) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 3;
  v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  return a1;
}

uint64_t assignWithTake for NavigationStackStyledCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = (a1 + 31) & 0xFFFFFFFFFFFFFFF8;
  v6 = (a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_weakTakeAssign();
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v6 + 8);
  swift_release();
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v6 + 16);
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 24 + v5) & ~v8;
  v10 = (v8 + 24 + v6) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 3;
  v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackStyledCore.NavigationStackRepresentableRoot(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    v14 = (a1 + 31) & 0xFFFFFFFFFFFFFFF8;
    if (v5 > 0x7FFFFFFE)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((v14 + v7 + 24) & ~v7);
    }
    else
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      v16 = v15 - 1;
      if (v16 < 0)
        v16 = -1;
      return (v16 + 1);
    }
  }
  else
  {
    v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 48) & ~v7) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 5;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18776AA08 + 4 * byte_187C56D2E[v12]))();
  }
}

void storeEnumTagSinglePayload for NavigationStackStyledCore.NavigationStackRepresentableRoot(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 3) & 0xFFFFFFFFFFFFFFFCLL)
     + 5;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_18776ABE4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18776AC6CLL);
}

void sub_18776ABEC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18776ABF4);
  JUMPOUT(0x18776AC6CLL);
}

void sub_18776AC40()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18776AC6CLL);
}

void sub_18776AC48()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18776AC6CLL);
}

uint64_t sub_18776AC50@<X0>(unsigned int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (!a1)
    goto LABEL_6;
  v3 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (a2 <= 0x7FFFFFFE)
  {
    if (a1 > 0x7FFFFFFE)
      JUMPOUT(0x18776AC5CLL);
    *(_QWORD *)(v3 + 8) = a1;
LABEL_6:
    JUMPOUT(0x18776AC6CLL);
  }
  return (*(uint64_t (**)(unint64_t))(v5 + 56))((v3 + v6 + 24) & a3);
}

uint64_t associated type witness table accessor for View.Body : View in NavigationStackStyledCore<A>.NavigationStackRepresentableRoot()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in NavigationStackStyledCore<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in NavigationStackStyledCore<A>.NavigationStateStructureSeed()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in NavigationStackStyledCore.NavigationStackRepresentableRoot.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in NavigationStackStyledCore.NavigationStackRepresentableRoot.body.getter(v1[4], v1[2], v1[3], a1);
}

unint64_t lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root;
  if (!lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationStackStyleConfiguration.Root, &type metadata for _NavigationStackStyleConfiguration.Root);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root;
  if (!lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationStackStyleConfiguration.Root, &type metadata for _NavigationStackStyleConfiguration.Root);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root);
  }
  return result;
}

void sub_18776AD28()
{
  lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_18776AD5C()
{
  uint64_t v0;
  _QWORD v2[10];

  v0 = type metadata accessor for ModifiedContent();
  v2[0] = lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle();
  v2[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v2);
}

void __swiftcall IndirectScrollGesture.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t closure #1 in ScrollGesture.body.getter(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_18776ADF0 + 4 * byte_187C57040[*(unsigned __int8 *)(a2 + 32)]))();
}

uint64_t sub_18776ADF0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (*(_QWORD *)(a1 + 16) == 1)
    return ((uint64_t (*)(void))((char *)&loc_18776AE14 + 4 * byte_187C57044[v2]))();
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v3 ^ 0x8000000000000000;
  *(_OWORD *)(a2 + 16) = xmmword_187C02A60;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

void sub_18776AE84(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = v6;
  a1[1] = v5;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v2;
  a1[5] = v1;
  JUMPOUT(0x18776AE90);
}

double sub_18776AE9C@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = 3;
  return result;
}

void sub_18776AEB4(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = v6;
  a1[1] = v5;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v2;
  a1[5] = v1;
  JUMPOUT(0x18776AEC0);
}

uint64_t protocol witness for Gesture.body.getter in conformance ScrollGesture()
{
  if (one-time initialization token for all != -1)
    swift_once();
  type metadata accessor for EventListener<WheelEvent>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EventListener<WheelEvent> and conformance EventListener<A>, (uint64_t (*)(uint64_t))type metadata accessor for EventListener<WheelEvent>, MEMORY[0x1E0CE1EC0]);
  return Gesture.combined<A, B>(with:body:)();
}

void IndirectScrollGesture.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in IndirectScrollGesture()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnyGesture<CGSize> and conformance AnyGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for AnyGesture<CGSize>, MEMORY[0x1E0CE0AE0]);
}

void type metadata accessor for AnyGesture<CGSize>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnyGesture<CGSize>)
  {
    type metadata accessor for CGSize(255);
    v0 = type metadata accessor for AnyGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyGesture<CGSize>);
  }
}

ValueMetadata *type metadata accessor for IndirectScrollGesture()
{
  return &type metadata for IndirectScrollGesture;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in ScrollGesture()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for EventListener<WheelEvent>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EventListener<WheelEvent>)
  {
    lazy protocol witness table accessor for type WheelEvent and conformance WheelEvent();
    v0 = type metadata accessor for EventListener();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventListener<WheelEvent>);
  }
}

unint64_t lazy protocol witness table accessor for type WheelEvent and conformance WheelEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WheelEvent and conformance WheelEvent;
  if (!lazy protocol witness table cache variable for type WheelEvent and conformance WheelEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WheelEvent, &type metadata for WheelEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WheelEvent and conformance WheelEvent);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollGesture()
{
  return &type metadata for ScrollGesture;
}

uint64_t getEnumTagSinglePayload for ScrollGesture.Value(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24) >> 2;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollGesture.Value(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 4 * -a2;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = 0;
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for ScrollGesture.Value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >> 63;
}

uint64_t destructiveProjectEnumData for ScrollGesture.Value(uint64_t result)
{
  *(_QWORD *)(result + 24) &= ~0x8000000000000000;
  return result;
}

uint64_t destructiveInjectEnumTag for ScrollGesture.Value(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = *(_QWORD *)(result + 24) & 3 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for ScrollGesture.Value()
{
  return &type metadata for ScrollGesture.Value;
}

uint64_t sub_18776B1F8()
{
  type metadata accessor for EventListener<WheelEvent>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EventListener<WheelEvent> and conformance EventListener<A>, (uint64_t (*)(uint64_t))type metadata accessor for EventListener<WheelEvent>, MEMORY[0x1E0CE1EC0]);
  return swift_getOpaqueTypeConformance2();
}

BOOL specialized static ScrollGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  _QWORD v15[3];
  char v16;
  __int128 v17;

  v2 = *(double *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(double *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v3 & 0x8000000000000000) == 0)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(_OWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a1 + 16);
      v15[0] = *(_QWORD *)a1;
      *(double *)&v15[1] = v2;
      v15[2] = v9;
      v16 = v3;
      v17 = *(_OWORD *)(a1 + 32);
      *(double *)v12 = v5;
      v12[1] = v4;
      v12[2] = v7;
      v13 = v6;
      v14 = v8;
      return specialized static PanGesture.Value.== infix(_:_:)((uint64_t)v15, (uint64_t)v12);
    }
    return 0;
  }
  if ((v6 & 0x8000000000000000) == 0)
    return 0;
  return v2 == *(double *)(a2 + 8) && *(double *)a1 == v5;
}

void WidgetConfigurationModifier<>.body(content:)()
{
  specialized WidgetConfigurationModifier<>.body(content:)();
}

uint64_t static EmptyWidgetConfiguration._makeWidgetConfiguration(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 14);
  v7 = *a2;
  v8 = v3;
  v9 = v4;
  v10 = *(_OWORD *)(a2 + 3);
  v11 = *(_OWORD *)(a2 + 5);
  v12 = v5;
  return a3(a1, &v7);
}

void protocol witness for WidgetConfigurationModifier.body(content:) in conformance EmptyWidgetConfiguration()
{
  specialized WidgetConfigurationModifier.widgetBodyError()();
}

uint64_t WidgetConfiguration.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return ModifiedContent.init(content:modifier:)();
}

uint64_t static ModifiedContent<>._makeWidgetConfiguration(widget:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  _BYTE v28[12];

  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = *a1;
  v11 = v21;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  v20 = *(_OWORD *)(a2 + 5);
  v16 = a2[3];
  v17 = a2[4];
  _GraphValue.subscript.getter();
  v21 = v12;
  v22 = v13;
  v23 = v14;
  v24 = v16;
  v25 = v17;
  v26 = v20;
  v27 = v15;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_DWORD *)(v18 + 48) = v11;
  (*(void (**)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a6 + 32))(v28, &v21, partial apply for closure #2 in static ModifiedContent<>._makeScene(scene:inputs:), v18, a4, a6);
  return swift_release();
}

void protocol witness for WidgetConfiguration.body.getter in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  specialized ModifiedContent<>.body.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t protocol witness for static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ModifiedContent<>._makeWidgetConfiguration(widget:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t static ModifiedContent<>._makeWidgetConfiguration(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t);
  __int128 v23;
  int v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  _BYTE v33[12];

  v15 = *a2;
  v16 = *((_DWORD *)a2 + 2);
  v17 = a2[2];
  v24 = *((_DWORD *)a2 + 14);
  LODWORD(v26) = *a1;
  v14 = v26;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  v23 = *(_OWORD *)(a2 + 5);
  v18 = a2[3];
  v19 = a2[4];
  _GraphValue.subscript.getter();
  v26 = v15;
  v27 = v16;
  v28 = v17;
  v29 = v18;
  v30 = v19;
  v31 = v23;
  v32 = v24;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a5;
  *(_QWORD *)(v20 + 24) = a6;
  *(_QWORD *)(v20 + 32) = a7;
  *(_QWORD *)(v20 + 40) = a8;
  *(_DWORD *)(v20 + 48) = v14;
  *(_QWORD *)(v20 + 56) = a3;
  *(_QWORD *)(v20 + 64) = a4;
  v21 = *(void (**)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32);
  swift_retain();
  v21(v33, &v26, partial apply for closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:), v20, a6, a8);
  return swift_release();
}

void protocol witness for WidgetConfigurationModifier.body(content:) in conformance <> ModifiedContent<A, B>()
{
  specialized WidgetConfigurationModifier<>.body(content:)();
}

uint64_t protocol witness for static WidgetConfigurationModifier._makeWidgetConfiguration(modifier:inputs:body:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ModifiedContent<>._makeWidgetConfiguration(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), *(_QWORD *)(a6 - 8), *(_QWORD *)(a6 - 16));
}

uint64_t static WidgetConfigurationModifier_Content._makeWidgetConfiguration(widget:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD);
  uint64_t v11;
  void (*v13)(uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void (*v20)(uint64_t, _QWORD);
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_DWORD *)(a2 + 56);
  v20 = *(void (**)(uint64_t, _QWORD))a2;
  v21 = v4;
  v22 = v5;
  v23 = *(_OWORD *)(a2 + 24);
  v24 = v6;
  v25 = v7;
  v26 = v8;
  v9 = type metadata accessor for WidgetConfigurationModifier_Content.BodyInput(0, a3, a4, a4);
  type metadata accessor for (_:_:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetConfigurationModifier_Content<A>.BodyInput, v9);
  _SceneInputs.popLast<A, B>(_:)();
  v10 = v13;
  if (v13)
  {
    v13 = v20;
    LODWORD(v14) = v21;
    v15 = v22;
    v16 = v23;
    v17 = v24;
    v18 = v25;
    v19 = v26;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
    v10(v11, &v13);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v10);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    PreferencesOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t static WidgetConfigurationModifier_Content.BodyInput.defaultValue.getter()
{
  type metadata accessor for (_:_:)();
  return Stack.init()();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance WidgetConfigurationModifier_Content<A>.BodyInput()
{
  return static WidgetConfigurationModifier_Content.BodyInput.defaultValue.getter();
}

uint64_t protocol witness for static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:) in conformance WidgetConfigurationModifier_Content<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static WidgetConfigurationModifier_Content._makeWidgetConfiguration(widget:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void specialized WidgetConfigurationModifier.widgetBodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x8000000187BE81F0;
  v0._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized WidgetConfigurationModifier<>.body(content:)()
{
  specialized WidgetConfigurationModifier.widgetBodyError()();
}

uint64_t sub_18776BA38()
{
  return swift_deallocObject();
}

uint64_t sub_18776BB54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for WidgetConfigurationModifier_Content.BodyInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WidgetConfigurationModifier_Content.BodyInput);
}

uint64_t dispatch thunk of WidgetConfigurationModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static WidgetConfigurationModifier._makeWidgetConfiguration(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t type metadata accessor for WidgetConfigurationModifier_Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WidgetConfigurationModifier_Content);
}

void base witness table accessor for PropertyKey in WidgetConfigurationModifier_Content<A>.BodyInput()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t instantiation function for generic protocol witness table for WidgetConfigurationModifier_Content<A>.BodyInput(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetConfigurationModifier_Content<A>.BodyInput);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t View.textSelectionMenu(text:isPresented:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v8 = 0;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  return MEMORY[0x18D75B4AC](&v8, a6, &type metadata for TextSelectionMenuModifier, a7);
}

uint64_t assignWithCopy for TextSelectionMenuModifier(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TextSelectionMenuModifier()
{
  return &type metadata for TextSelectionMenuModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TextSelectionMenuModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TextSelectionMenuModifier.body(content:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v2 = v1;
  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v11[0] = v5;
  v11[1] = v4;
  v12 = v6;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18D75B9C8](&v13);
  if (v13 == 1)
    swift_retain();
  v11[0] = v5;
  type metadata accessor for CGRect(0);
  v7 = Anchor.Source.init<A>(_:)();
  v13 = *(_QWORD *)(v2 + 40);
  v8 = (_OWORD *)swift_allocObject();
  v9 = *(_OWORD *)(v2 + 16);
  v8[1] = *(_OWORD *)v2;
  v8[2] = v9;
  v8[3] = *(_OWORD *)(v2 + 32);
  *a1 = v7;
  a1[1] = (uint64_t)partial apply for closure #1 in TextSelectionMenuModifier.body(content:);
  a1[2] = (uint64_t)v8;
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v11);
  swift_retain();
  return outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v13);
}

_QWORD *closure #1 in TextSelectionMenuModifier.body(content:)(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = *((_QWORD *)a3 + 2);
  v9 = *((_QWORD *)a3 + 3);
  v11 = *((unsigned __int8 *)a3 + 32);
  type metadata accessor for Binding<Bool>();
  result = MEMORY[0x18D75B9C8](&v16);
  if (v8)
  {
    result = (_QWORD *)outlined consume of EditMenuPresentation?(v5, v6, v7, v8);
LABEL_6:
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return result;
  }
  if (!(_BYTE)v16)
    goto LABEL_6;
  v13 = *a3;
  if ((_DWORD)v13)
  {
    v14 = *((_QWORD *)a3 + 1);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = a2;
    swift_retain();
    swift_retain();
    swift_retain();
    return (_QWORD *)swift_retain();
  }
  else
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance TextSelectionMenuModifier@<X0>(uint64_t *a1@<X8>)
{
  return TextSelectionMenuModifier.body(content:)(a1);
}

uint64_t sub_18776BFE0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in TextSelectionMenuModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in TextSelectionMenuModifier.body(content:)(a1, a2, (unsigned int *)(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<TextSelectionMenuModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for _AnchorTransformModifier<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>>)
  {
    type metadata accessor for _ViewModifier_Content<TextSelectionMenuModifier>();
    type metadata accessor for _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>>);
  }
}

void type metadata accessor for _ViewModifier_Content<TextSelectionMenuModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<TextSelectionMenuModifier>)
  {
    lazy protocol witness table accessor for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<TextSelectionMenuModifier>);
  }
}

void type metadata accessor for _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>)
  {
    type metadata accessor for CGRect?();
    v3 = type metadata accessor for _AnchorTransformModifier(a1, v2, (uint64_t)&type metadata for EditMenuPresentation.Key, (uint64_t)&protocol witness table for EditMenuPresentation.Key);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<TextSelectionMenuModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<TextSelectionMenuModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<TextSelectionMenuModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<TextSelectionMenuModifier>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<TextSelectionMenuModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t View.groupedFormStyleContext()()
{
  lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();
  return View.styleContext<A>(_:)();
}

void GroupedFormStyle.makeBody(configuration:)(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance GroupedFormStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();
  return specialized static FormStyleContext.accepts<A>(_:at:)(a4, a3);
}

void View.formInsets(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance FormInsetsKey@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t result;

  if (one-time initialization token for defaultValue != -1)
    result = swift_once();
  v2 = byte_1EDEFFB78;
  v3 = qword_1EDEFFB80;
  v4 = byte_1EDEFFB88;
  v5 = qword_1EDEFFB90;
  v6 = byte_1EDEFFB98;
  v7 = qword_1EDEFFBA0;
  v8 = byte_1EDEFFBA8;
  *(_QWORD *)a1 = static FormInsetsKey.defaultValue;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  return result;
}

void static FormContentSizeFittingBehavior.disabled.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void FormContentSizeFittingBehavior.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static FormContentSizeFittingBehavior.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void FormContentSizeFittingBehavior.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.formContentSizeFittingBehavior(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for FormStyle.Body : View in GroupedFormStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for FormStyle.Body : View in InsetGroupedFormStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type FormContentSizeFittingBehavior and conformance FormContentSizeFittingBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormContentSizeFittingBehavior and conformance FormContentSizeFittingBehavior;
  if (!lazy protocol witness table cache variable for type FormContentSizeFittingBehavior and conformance FormContentSizeFittingBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormContentSizeFittingBehavior, &type metadata for FormContentSizeFittingBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentSizeFittingBehavior and conformance FormContentSizeFittingBehavior);
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupedFormStyle()
{
  return &type metadata for GroupedFormStyle;
}

ValueMetadata *type metadata accessor for InsetGroupedFormStyle()
{
  return &type metadata for InsetGroupedFormStyle;
}

ValueMetadata *type metadata accessor for FormContentSizeFittingBehavior()
{
  return &type metadata for FormContentSizeFittingBehavior;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>> and conformance List<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v3[1] = &protocol witness table for ListStyleWriter<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>>)
  {
    type metadata accessor for List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ListStyleWriter<OuterFormListStyle>, (uint64_t)&type metadata for OuterFormListStyle, (uint64_t)&protocol witness table for OuterFormListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>>);
  }
}

uint64_t type metadata accessor for List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>;
  if (!lazy cache variable for type metadata for List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for List();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>)
  {
    type metadata accessor for ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ListStyleWriter<DefaultListStyle>, (uint64_t)&type metadata for DefaultListStyle, (uint64_t)&protocol witness table for DefaultListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>);
  }
}

void type metadata accessor for ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>)
  {
    type metadata accessor for StyleContextWriter<GroupedFormStyleContext>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>);
  }
}

void type metadata accessor for StyleContextWriter<GroupedFormStyleContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StyleContextWriter<GroupedFormStyleContext>)
  {
    lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();
    v0 = type metadata accessor for StyleContextWriter();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<GroupedFormStyleContext>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for ListStyleWriter<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>();
    v2 = v1;
    v3[0] = &protocol witness table for FormStyleConfiguration.Content;
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleContextWriter<GroupedFormStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<GroupedFormStyleContext>, MEMORY[0x1E0CE4530]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_18776C7F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for StyleContextWriter<GroupedFormStyleContext>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleContextWriter<GroupedFormStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<GroupedFormStyleContext>, MEMORY[0x1E0CE4530]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_18776C874(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA04FormE19SizeFittingBehaviorVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<OptionalEdgeInsets>, MEMORY[0x1E0CE4388], &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<OptionalEdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA04FormE19SizeFittingBehaviorVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v6 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, a2);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = v6;
  v9[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>(a4, a2);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v9);
}

uint64_t sub_18776C914(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA04FormE19SizeFittingBehaviorVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<FormContentSizeFittingBehavior>, (uint64_t)&type metadata for FormContentSizeFittingBehavior, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<FormContentSizeFittingBehavior> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t storeEnumTagSinglePayload for FormContentSizeFittingBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18776C97C + 4 * byte_187C57355[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18776C9B0 + 4 * byte_187C57350[v4]))();
}

uint64_t sub_18776C9B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18776C9B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18776C9C0);
  return result;
}

uint64_t sub_18776C9CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18776C9D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18776C9D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18776C9E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormContentSizeFittingBehavior.Role()
{
  return &type metadata for FormContentSizeFittingBehavior.Role;
}

unint64_t instantiation function for generic protocol witness table for GroupedFormStyleContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type FormContentSizeFittingBehavior.Role and conformance FormContentSizeFittingBehavior.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormContentSizeFittingBehavior.Role and conformance FormContentSizeFittingBehavior.Role;
  if (!lazy protocol witness table cache variable for type FormContentSizeFittingBehavior.Role and conformance FormContentSizeFittingBehavior.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormContentSizeFittingBehavior.Role, &type metadata for FormContentSizeFittingBehavior.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentSizeFittingBehavior.Role and conformance FormContentSizeFittingBehavior.Role);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormInsetsKey()
{
  return &type metadata for FormInsetsKey;
}

void static FormContentSizeFittingBehavior.automatic.getter()
{
  static FormContentSizeFittingBehavior.disabled.getter();
}

uint64_t AnyNavigationLinkPresentedView.view<A>(at:applying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 96))(a1, a2, a3, a5, a6);
}

uint64_t AnyNavigationLinkPresentedView.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for AnyNavigationLinkPresentedViewStorage(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 120) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 136), a1);
  return v5;
}

uint64_t AnyNavigationLinkPresentedViewStorage.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 120) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 136), a1);
  return v2;
}

void AnyNavigationLinkPresentedViewStorageBase.view<A>(at:applying:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationLinkPresentedViewStorageBase.equals(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for AnyNavigationLinkPresentedViewStorageBase()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for AnyNavigationLinkPresentedViewStorage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t AnyNavigationLinkPresentedViewStorage.view<A>(at:applying:)(uint64_t *a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v11 = *v5;
  v12 = *(_QWORD *)(*v5 + 120);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, (uint64_t)v5 + *(_QWORD *)(v11 + 136), v12, v14);
  v17 = specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)((uint64_t)v16, a1, a2, a3, v12, a4, *(_QWORD *)(v11 + 128), a5);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  return v17;
}

uint64_t AnyNavigationLinkPresentedViewStorage.equals(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_BYTE *, uint64_t);
  _BYTE v22[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 120);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v22[-v10];
  v12 = swift_dynamicCastClass();
  if (!v12)
    return 0;
  v13 = v12;
  if ((uint64_t *)v12 == v2)
    return 1;
  v14 = (uint64_t)v2 + *(_QWORD *)(v3 + 136);
  v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v15(v11, v14, v4);
  v16 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v15)(v7, v13 + *(_QWORD *)(*(_QWORD *)v13 + 136), v4);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)&v22[-32] = v4;
  *(_QWORD *)&v22[-24] = v7;
  *(_DWORD *)&v22[-16] = 3;
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v11, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)&v22[-48], v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v18);
  swift_release();
  v19 = v22[23];
  v20 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v20(v7, v4);
  v20(v11, v4);
  return v19;
}

uint64_t AnyNavigationLinkPresentedViewStorage.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 120) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
}

uint64_t AnyNavigationLinkPresentedViewStorage.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 120) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyNavigationLinkPresentedViewStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyNavigationLinkPresentedViewStorage);
}

ValueMetadata *type metadata accessor for AnyNavigationLinkPresentedView()
{
  return &type metadata for AnyNavigationLinkPresentedView;
}

void View.formAccessory<A>(accessories:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.formInfoAction(action:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.formRowInfoVisibility(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_18776D004(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for FormAccessoryModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormAccessoryModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

uint64_t type metadata accessor for FormAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormAccessoryModifier);
}

uint64_t sub_18776D088(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type FormInfoActionModifier and conformance FormInfoActionModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type FormInfoActionModifier and conformance FormInfoActionModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormInfoActionModifier and conformance FormInfoActionModifier;
  if (!lazy protocol witness table cache variable for type FormInfoActionModifier and conformance FormInfoActionModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormInfoActionModifier, &type metadata for FormInfoActionModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormInfoActionModifier and conformance FormInfoActionModifier);
  }
  return result;
}

uint64_t sub_18776D120(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyxAA30_EnvironmentKeyWritingModifierVyAA10VisibilityOGGAA06_TraithI0VyAA016FormRowAccessoryjG0VGGAaBHPAjaBHPxAaBHD1__AiA0cI0HPyHCHC_AoaQHPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowAccessoryVisibilityKey>, (uint64_t)&type metadata for FormRowAccessoryVisibilityKey, (uint64_t)&protocol witness table for FormRowAccessoryVisibilityKey, (uint64_t (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<FormRowAccessoryVisibilityKey> and conformance _TraitWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<FormRowAccessoryVisibilityKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowAccessoryVisibilityKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowAccessoryVisibilityKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowAccessoryVisibilityKey>, (uint64_t)&type metadata for FormRowAccessoryVisibilityKey, (uint64_t)&protocol witness table for FormRowAccessoryVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowAccessoryVisibilityKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_18776D1AC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyxAA30_EnvironmentKeyWritingModifierVyAA10VisibilityOGGAA06_TraithI0VyAA016FormRowAccessoryjG0VGGAaBHPAjaBHPxAaBHD1__AiA0cI0HPyHCHC_AoaQHPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowInfoVisibilityKey>, (uint64_t)&type metadata for FormRowInfoVisibilityKey, (uint64_t)&protocol witness table for FormRowInfoVisibilityKey, (uint64_t (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<FormRowInfoVisibilityKey> and conformance _TraitWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyxAA30_EnvironmentKeyWritingModifierVyAA10VisibilityOGGAA06_TraithI0VyAA016FormRowAccessoryjG0VGGAaBHPAjaBHPxAaBHD1__AiA0cI0HPyHCHC_AoaQHPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[2];

  v9 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>);
  v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v11 = type metadata accessor for ModifiedContent();
  v15[0] = v9;
  v15[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>);
  v12 = MEMORY[0x1E0CE2E70];
  v14[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v15);
  v14[1] = a5();
  return MEMORY[0x18D75FFDC](v12, v11, v14);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<FormRowInfoVisibilityKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInfoVisibilityKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInfoVisibilityKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowInfoVisibilityKey>, (uint64_t)&type metadata for FormRowInfoVisibilityKey, (uint64_t)&protocol witness table for FormRowInfoVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInfoVisibilityKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormRowInfoVisibilityKey()
{
  return &type metadata for FormRowInfoVisibilityKey;
}

ValueMetadata *type metadata accessor for FormRowAccessoryVisibilityKey()
{
  return &type metadata for FormRowAccessoryVisibilityKey;
}

uint64_t destroy for FormInfoActionModifier(uint64_t a1)
{
  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for FormInfoActionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v5, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(v2 + 32);
  LOBYTE(v2) = *(_BYTE *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v7, v2);
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v2;
  return a1;
}

uint64_t assignWithCopy for FormInfoActionModifier(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  v5 = v2[2];
  v6 = *((_BYTE *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of Environment<Bool>.Content(v7, v8);
  v9 = v2[4];
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  outlined copy of Environment<Bool>.Content(v9, (char)v2);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = (_BYTE)v2;
  outlined consume of Environment<Bool>.Content(v10, v11);
  return a1;
}

uint64_t assignWithTake for FormInfoActionModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  v7 = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  return a1;
}

ValueMetadata *type metadata accessor for FormInfoActionModifier()
{
  return &type metadata for FormInfoActionModifier;
}

uint64_t type metadata completion function for FormAccessoryModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FormAccessoryModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (char *)v4 + v6;
    v11 = (char *)a2 + v6;
    v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(_QWORD *)v13;
    v15 = *(_BYTE *)(v13 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v13, v15);
    *(_QWORD *)v12 = v14;
    *(_BYTE *)(v12 + 8) = v15;
    v16 = (unint64_t)(v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v17 = (unint64_t)(v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v17, v19);
    *(_QWORD *)v16 = v18;
    *(_BYTE *)(v16 + 8) = v19;
  }
  return v4;
}

uint64_t destroy for FormAccessoryModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64) + a1;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v4 + 7) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)((v4 + 23) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t initializeWithCopy for FormAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  LOBYTE(v5) = *(_BYTE *)(v10 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v10, v5);
  *(_QWORD *)v9 = v11;
  *(_BYTE *)(v9 + 8) = v5;
  v12 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  LOBYTE(v5) = *(_BYTE *)(v13 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v13, v5);
  *(_QWORD *)v12 = v14;
  *(_BYTE *)(v12 + 8) = v5;
  return a1;
}

uint64_t assignWithCopy for FormAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  LOBYTE(v5) = *(_BYTE *)(v10 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v10, v5);
  v12 = *(_QWORD *)v9;
  v13 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v9 = v11;
  *(_BYTE *)(v9 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v12, v13);
  v14 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v5) = *(_BYTE *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v15, v5);
  v17 = *(_QWORD *)v14;
  v18 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v17, v18);
  return a1;
}

uint64_t initializeWithTake for FormAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = v11;
  v12 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = v14;
  return a1;
}

uint64_t assignWithTake for FormAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = *(_BYTE *)(v10 + 8);
  v12 = *(_QWORD *)v9;
  v13 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v9 = v11;
  *(_BYTE *)(v9 + 8) = v10;
  outlined consume of Environment<Bool>.Content(v12, v13);
  v14 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = *(_BYTE *)(v15 + 8);
  v17 = *(_QWORD *)v14;
  v18 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v15;
  outlined consume of Environment<Bool>.Content(v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for FormAccessoryModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFE)
    {
      v14 = *(unsigned __int8 *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 > 1)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((v7 + 23) & 0xFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18776D9EC + 4 * byte_187C57640[v12]))();
  }
}

void storeEnumTagSinglePayload for FormAccessoryModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 23) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_18776DB94()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18776DC10);
}

void sub_18776DB9C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18776DBA4);
  JUMPOUT(0x18776DC10);
}

void sub_18776DBE8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18776DC10);
}

void sub_18776DBF0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18776DC10);
}

uint64_t sub_18776DBF8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFE)
  {
    if (a2 > 0xFE)
      JUMPOUT(0x18776DC04);
    *(_BYTE *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = -(char)a2;
LABEL_6:
    JUMPOUT(0x18776DC10);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance FormInfoActionModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;
  __int16 v11;
  unsigned __int8 v12;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v6 = *((_BYTE *)v1 + 24);
  v7 = v1[4];
  v8 = *((_BYTE *)v1 + 40);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v5, v6);
  v9 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Bool>.Content(v5, v6);
  outlined copy of Environment<Bool>.Content(v7, v8);
  specialized Environment.wrappedValue.getter(v7, v8, &v12);
  result = outlined consume of Environment<Bool>.Content(v7, v8);
  v11 = v9 & 1 | (v12 << 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = v11;
  return result;
}

uint64_t FormAccessoryModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t OpaqueTypeConformance2;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  ValueMetadata *v56;
  uint64_t v57;
  _UNKNOWN **v58;

  v53 = a2;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormAccessoryModifier<A>);
  v48 = type metadata accessor for _ViewModifier_Content();
  v49 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v48);
  v55 = v48;
  v56 = &type metadata for FormRowAccessoryTrait;
  v57 = v49;
  v58 = &protocol witness table for FormRowAccessoryTrait;
  v4 = MEMORY[0x18D75FF88](0, &v55, MEMORY[0x1E0CE6E38], 0);
  v5 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  v52 = v5;
  MEMORY[0x1E0C80A78](v4, v6);
  v47 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v50 = (char *)&v42 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  v43 = v11;
  v12 = type metadata accessor for ModifiedContent();
  v46 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v42 - v14;
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  v45 = type metadata accessor for ModifiedContent();
  v16 = *(_QWORD *)(v45 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x1E0C80A78](v45, v18);
  v44 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v42 - v21;
  v23 = v2 + *(int *)(a1 + 40);
  v24 = *(_QWORD *)v23;
  v25 = *(_BYTE *)(v23 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v23, v25);
  specialized Environment.wrappedValue.getter(v24, v25, &v55);
  outlined consume of Environment<Bool>.Content(v24, v25);
  v26 = *(_QWORD *)(a1 + 24);
  View.controlSize(_:)();
  swift_getKeyPath();
  v27 = v2 + *(int *)(a1 + 36);
  v28 = *(_QWORD *)v27;
  LOBYTE(a1) = *(_BYTE *)(v27 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v27, a1);
  LOBYTE(v11) = specialized Environment.wrappedValue.getter(v28, a1);
  outlined consume of Environment<Bool>.Content(v28, a1);
  LOBYTE(v55) = v11 & 1;
  v29 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  v54[0] = v26;
  v54[1] = v29;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v54);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v15, v12);
  v31 = v44;
  v30 = v45;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v44, v22, v45);
  v32 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = v43;
  *(_QWORD *)(v33 + 24) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v33 + v32, v31, v30);
  v34 = swift_checkMetadataState();
  v35 = v47;
  v36 = v49;
  View.transformTrait<A>(_:transform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v30);
  v55 = v34;
  v56 = &type metadata for FormRowAccessoryTrait;
  v57 = v36;
  v58 = &protocol witness table for FormRowAccessoryTrait;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v39 = (uint64_t)v50;
  v38 = v51;
  static ViewBuilder.buildExpression<A>(_:)(v35, v51, OpaqueTypeConformance2);
  v40 = *(void (**)(char *, uint64_t))(v52 + 8);
  v40(v35, v38);
  static ViewBuilder.buildBlock<A>(_:)(v39, v38, v53);
  return ((uint64_t (*)(uint64_t, uint64_t))v40)(v39, v38);
}

uint64_t closure #1 in FormAccessoryModifier.body(content:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD v31[2];
  _QWORD v32[2];

  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  v9 = type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v10 = type metadata accessor for TupleView();
  v11 = type metadata accessor for Group();
  MEMORY[0x1E0C80A78](v11, v12);
  v19 = MEMORY[0x1E0C80A78](v13, v14);
  v29 = a1;
  v20 = (uint64_t *)*a1;
  if (v20)
  {
    v21 = MEMORY[0x1E0C80A78](v15, v16);
    *(&v29 - 4) = a3;
    *(&v29 - 3) = a4;
    *(&v29 - 2) = v20;
    *(&v29 - 1) = a2;
    v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v10, v21);
    Group<A>.init(content:)();
    v30 = v22;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v11, &v30);
    v23 = AnyView.init<A>(_:)();
    result = swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t, double))(v17 + 16))((char *)&v29 - v18, a2, v9, v19);
    v25 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
    v32[0] = a4;
    v32[1] = v25;
    v26 = MEMORY[0x1E0CE2E70];
    v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v32);
    v28 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
    v31[0] = v27;
    v31[1] = v28;
    MEMORY[0x18D75FFDC](v26, v9, v31);
    result = AnyView.init<A>(_:)();
    v23 = result;
  }
  *v29 = v23;
  return result;
}

uint64_t closure #1 in closure #1 in FormAccessoryModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30[2];
  _QWORD v31[2];
  _QWORD v32[2];

  v24 = a2;
  v25 = a4;
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  v7 = type metadata accessor for ModifiedContent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v23 - v14;
  v16 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  v32[0] = a3;
  v32[1] = v16;
  v17 = MEMORY[0x1E0CE2E70];
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v32);
  v19 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  v31[0] = v18;
  v31[1] = v19;
  v20 = MEMORY[0x18D75FFDC](v17, v7, v31);
  static ViewBuilder.buildExpression<A>(_:)(v24, v7, v20);
  v29 = a1;
  v30[0] = (uint64_t)&v29;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v15, v7);
  v30[1] = (uint64_t)v11;
  swift_retain();
  v28[0] = MEMORY[0x1E0CE7518];
  v28[1] = v7;
  v26 = MEMORY[0x1E0CE7508];
  v27 = v20;
  static ViewBuilder.buildBlock<each A>(_:)(v30, 2uLL, (uint64_t)v28);
  v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v15, v7);
  v21(v11, v7);
  return swift_release();
}

uint64_t FormInfoButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v29;
  __int128 v30;
  uint64_t (**v31)();
  uint64_t v32;
  char *v33;
  uint64_t ObjCClassFromMetadata;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  char v63;

  type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>(0);
  v4 = v3;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (_WORD *)((char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>(0);
  v56 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, v12, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  v55 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v54 - v15;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  v57 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>();
  v59 = *(_QWORD *)(v21 - 8);
  v60 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v58 = (uint64_t)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = *((_BYTE *)v1 + 32);
  v24 = v1[1];
  v61 = *v1;
  v62 = v24;
  v25 = *((_QWORD *)&v24 + 1);
  v26 = v63;
  outlined copy of Environment<Bool>.Content(*((uint64_t *)&v24 + 1), v63);
  v27 = specialized Environment.wrappedValue.getter(v25, v26);
  outlined consume of Environment<Bool>.Content(v25, v26);
  if (v27 == 2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(a1, 1, 1, v60);
  v29 = swift_allocObject();
  v30 = v1[1];
  *(_OWORD *)(v29 + 16) = *v1;
  *(_OWORD *)(v29 + 32) = v30;
  *(_BYTE *)(v29 + 48) = *((_BYTE *)v1 + 32);
  *v7 = 256;
  v31 = (uint64_t (**)())((char *)v7 + *(int *)(v4 + 36));
  *v31 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  v31[1] = (uint64_t (*)())v29;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v32 = *(int *)(v4 + 40);
  v54 = a1;
  v33 = (char *)v7 + v32;
  outlined retain of FormInfoButton((uint64_t)&v61);
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v35 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v36 = Text.init(_:tableName:bundle:comment:)();
  v38 = v37;
  LOBYTE(ObjCClassFromMetadata) = v39;
  v41 = v40;
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = 0x7269632E6F666E69;
  *(_QWORD *)(v42 + 24) = 0xEB00000000656C63;
  *(_DWORD *)(v42 + 32) = 0;
  *(_BYTE *)(v42 + 36) = 1;
  *(_OWORD *)(v42 + 40) = xmmword_187BF9F90;
  *(_OWORD *)(v42 + 56) = xmmword_187C578F0;
  *(_OWORD *)(v42 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v42 + 88) = 0;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v38;
  v33[16] = ObjCClassFromMetadata & 1;
  *((_QWORD *)v33 + 3) = v41;
  *((_QWORD *)v33 + 4) = v42;
  *((_QWORD *)v33 + 5) = KeyPath;
  v33[48] = 2;
  LOBYTE(ObjCClassFromMetadata) = v62;
  LOBYTE(v33) = BYTE1(v62);
  v44 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>);
  v45 = &v11[*(int *)(v56 + 36)];
  *(_QWORD *)v45 = v44;
  v45[8] = (char)v33;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>);
  v46 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>);
  v47 = &v16[*(int *)(v55 + 36)];
  *(_QWORD *)v47 = v46;
  v47[8] = ObjCClassFromMetadata & 1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>);
  v48 = swift_getKeyPath();
  v49 = swift_getKeyPath();
  outlined init with copy of ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>((uint64_t)v16, (uint64_t)v20);
  v50 = &v20[*(int *)(v57 + 36)];
  *(_QWORD *)v50 = v48;
  v50[8] = 0;
  *((_QWORD *)v50 + 2) = v49;
  v50[24] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>((uint64_t)v16);
  v51 = v58;
  specialized View.accessibility<A>(_:_:isEnabled:)(0x747475426F666E69, 0xEA00000000006E6FLL, 2, 1, v58);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  v52 = v51;
  v53 = v54;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>(v52, v54);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v53, 0, 1, v60);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance FormInfoButton()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  static ModifiedContent<>._viewListCount(inputs:)();
  return 0;
}

void protocol witness for static _ViewTraitKey.defaultValue.getter in conformance FormRowInfoAction(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in FormInfoActionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in FormAccessoryModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18776EB78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ModifiedContent() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FormAccessoryModifier.body(content:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(uint64_t **)(v1 + 16);
  v4 = *(uint64_t **)(v1 + 24);
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ModifiedContent() - 8) + 80);
  return closure #1 in FormAccessoryModifier.body(content:)(a1, (uint64_t *)(v1 + ((v5 + 32) & ~v5)), v3, v4);
}

uint64_t partial apply for closure #1 in closure #1 in FormAccessoryModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in closure #1 in FormAccessoryModifier.body(content:)(v1[4], v1[5], v1[3], a1);
}

ValueMetadata *type metadata accessor for FormRowAccessoryTrait()
{
  return &type metadata for FormRowAccessoryTrait;
}

ValueMetadata *type metadata accessor for FormRowInfoAction()
{
  return &type metadata for FormRowInfoAction;
}

uint64_t sub_18776ED2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v4 = type metadata accessor for FormAccessoryModifier(255, *a1, a1[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormAccessoryModifier<A>, v4);
  v6 = type metadata accessor for _ViewModifier_Content();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v6);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18776EDBC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<FormInfoActionModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<FormRowInfoAction> and conformance _TraitWritingModifier<A>);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<FormInfoActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type FormInfoActionModifier and conformance FormInfoActionModifier, (uint64_t)&type metadata for FormInfoActionModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowInfoAction>, (uint64_t)&type metadata for FormRowInfoAction, (uint64_t)&protocol witness table for FormRowInfoAction, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<FormInfoActionModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<FormInfoActionModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<FormInfoActionModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<FormInfoActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type FormInfoActionModifier and conformance FormInfoActionModifier, (uint64_t)&type metadata for FormInfoActionModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<FormInfoActionModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<FormRowInfoAction> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInfoAction> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInfoAction> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowInfoAction>, (uint64_t)&type metadata for FormRowInfoAction, (uint64_t)&protocol witness table for FormRowInfoAction, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInfoAction> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t destroy for FormInfoButton(uint64_t a1)
{
  swift_release();
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for FormInfoButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_BYTE *)(a2 + 32);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return a1;
}

uint64_t assignWithCopy for FormInfoButton(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *((_BYTE *)v2 + 16);
  *(_BYTE *)(a1 + 17) = *((_BYTE *)v2 + 17);
  v5 = v2[3];
  LOBYTE(v2) = *((_BYTE *)v2 + 32);
  outlined copy of Environment<Bool>.Content(v5, (char)v2);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = (_BYTE)v2;
  outlined consume of Environment<Bool>.Content(v6, v7);
  return a1;
}

uint64_t assignWithTake for FormInfoButton(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for FormInfoButton()
{
  return &type metadata for FormInfoButton;
}

uint64_t initializeBufferWithCopyOfBuffer for FormInfoButton.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FormInfoButton.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for FormInfoButton.Configuration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for FormInfoButton.Configuration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 18))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormInfoButton.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 18) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FormInfoButton.Configuration()
{
  return &type metadata for FormInfoButton.Configuration;
}

uint64_t associated type witness table accessor for View.Body : View in FormInfoButton()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>);
    v6 = type metadata accessor for Button(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, a4);
    v6 = type metadata accessor for ModifiedContent();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<Text, Image>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(a1, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>);
  }
}

uint64_t sub_18776F5D0()
{
  uint64_t v0;

  swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t outlined retain of FormInfoButton(uint64_t a1)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 32);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v2, v3);
  return a1;
}

uint64_t sub_18776F64C()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t sub_18776F66C(char *a1)
{
  char v2;

  v2 = *a1;
  return MEMORY[0x18D7587F4](&v2);
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance Button<A>, (uint64_t (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, (uint64_t)&protocol conformance descriptor for Button<A>);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>?();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>?);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void View.formAccessoryVisibility(_:)()
{
  View.formRowInfoVisibility(_:)();
}

uint64_t View.buttonBorderShape(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues._buttonBorderShape.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonBorderShapeKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonBorderShapeKey>);
  }
}

uint64_t key path getter for EnvironmentValues._buttonBorderShape : EnvironmentValues, serialized(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_18776FD00()
{
  return EnvironmentValues._buttonBorderShape.setter();
}

uint64_t EnvironmentValues._buttonBorderShape.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ButtonBorderShape.Guts(uint64_t a1, uint64_t a2)
{
  double v2;

  v2 = *(double *)a1;
  if (*(_BYTE *)(a1 + 8) == 1)
    return ((uint64_t (*)(void))((char *)&loc_18776FE48 + 4 * byte_187C57904[*(_QWORD *)&v2]))();
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    return 0;
  return v2 == *(double *)a2;
}

void static ButtonBorderShape.automatic.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

void static ButtonBorderShape.capsule.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 1;
}

void static ButtonBorderShape.roundedRectangle.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_BYTE *)(a1 + 8) = 1;
}

void static ButtonBorderShape.roundedRectangle(radius:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
}

void static ButtonBorderShape.circle.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 3;
  *(_BYTE *)(a1 + 8) = 1;
}

void ButtonBorderShape.path(in:)(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  char v4;
  __int128 v5;
  __int128 v6;
  char v7;
  char v8;
  uint64_t v9;
  _OWORD v10[2];
  char v11;

  static GeometryProxy.current.getter();
  if ((v8 & 1) != 0)
  {
    Path.init(_:)();
    v2 = v5;
    v3 = v6;
    v4 = v7;
  }
  else
  {
    GeometryProxy.environment.getter();
    EnvironmentValues.controlSize.getter();
    swift_release();
    swift_release();
    GeometryProxy.environment.getter();
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    if (v9)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    static EdgeInsets.zero.getter();
    ResolvedBorderShape.path(in:)((uint64_t)v10);
    v2 = v10[0];
    v3 = v10[1];
    v4 = v11;
  }
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = v4;
}

double protocol witness for Shape.path(in:) in conformance ButtonBorderShape@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  char v5;

  ButtonBorderShape.path(in:)((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

void protocol witness for View.body.getter in conformance ButtonBorderShape(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_WORD *)(a1 + 9) = 256;
}

uint64_t key path getter for EnvironmentValues._buttonBorderShape : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

void (*EnvironmentValues._buttonBorderShape.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues._buttonBorderShape.modify;
}

void EnvironmentValues._buttonBorderShape.modify(_QWORD **a1)
{
  _BYTE *v1;
  uint64_t v2;
  char v3;

  v1 = *a1;
  v2 = (*a1)[4];
  v3 = *((_BYTE *)*a1 + 8);
  (*a1)[2] = **a1;
  v1[24] = v3;
  type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

uint64_t BorderedButtonStyle.buttonStyleRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return BorderedButtonStyle_Phone.init(tint:isProminent:)(0, *(_BYTE *)(v1 + 8), a1);
}

uint64_t protocol witness for ButtonStyleConvertible.buttonStyleRepresentation.getter in conformance BorderedButtonStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return BorderedButtonStyle_Phone.init(tint:isProminent:)(0, *(_BYTE *)(v1 + 8), a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ButtonBorderShape(uint64_t a1, uint64_t a2)
{
  double v2;
  char v3;

  v2 = *(double *)a1;
  v3 = *(_BYTE *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) == 1)
    return ((uint64_t (*)(void))((char *)&loc_18777053C + 4 * byte_187C5790C[*(_QWORD *)&v2]))();
  if (v2 != *(double *)a2)
    v3 = 1;
  return (v3 & 1) == 0;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ButtonContainerIsBorderedInput()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ButtonContainerIsBorderedInput()
{
  lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput();
  return PropertyList.subscript.setter();
}

void static BorderedButtonStyle.BorderShape.automatic.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static BorderedButtonStyle.BorderShape.capsule.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static BorderedButtonStyle.BorderShape.roundedRectangle.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void BorderedButtonStyle.init(shape:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

__n128 protocol witness for View.body.getter in conformance ResolvedBorderShape@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_WORD *)(a1 + 56) = 256;
  return result;
}

void ButtonBorderShape.inset(by:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

void ButtonBorderShape._Inset.amount.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*ButtonBorderShape._Inset.amount.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double ButtonBorderShape._Inset.path(in:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D4>)
{
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  CGRectInset(*(CGRect *)&a2, a3, a3);
  ButtonBorderShape.path(in:)((uint64_t)v9);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

void ButtonBorderShape._Inset.animatableData.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double (*ButtonBorderShape._Inset.animatableData.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance ScrollTransitionProgress;
}

double ButtonBorderShape._Inset.inset(by:)(double a1, double a2)
{
  return a1 + a2;
}

uint64_t instantiation function for generic protocol witness table for ButtonBorderShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ButtonBorderShape(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonBorderShape and conformance ButtonBorderShape, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonBorderShape and conformance ButtonBorderShape);
}

unint64_t lazy protocol witness table accessor for type ButtonBorderShape and conformance ButtonBorderShape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonBorderShape, &type metadata for ButtonBorderShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonBorderShape, &type metadata for ButtonBorderShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonBorderShape, &type metadata for ButtonBorderShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ButtonBorderShape()
{
  return lazy protocol witness table accessor for type _ShapeView<ResolvedBorderShape, ForegroundStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<ButtonBorderShape, ForegroundStyle> and conformance _ShapeView<A, B>, &lazy cache variable for type metadata for _ShapeView<ButtonBorderShape, ForegroundStyle>, (void (*)(void))lazy protocol witness table accessor for type ButtonBorderShape and conformance ButtonBorderShape);
}

uint64_t lazy protocol witness table accessor for type _ShapeView<ResolvedBorderShape, ForegroundStyle> and conformance _ShapeView<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _ShapeView<ButtonBorderShape, ForegroundStyle>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0E50], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for ButtonStyleConvertible.ButtonStyleRepresentation : ButtonStyle in BorderedButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonBorderShape._Inset, &type metadata for ButtonBorderShape._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonBorderShape._Inset, &type metadata for ButtonBorderShape._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonBorderShape._Inset, &type metadata for ButtonBorderShape._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonBorderShape._Inset, &type metadata for ButtonBorderShape._Inset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset);
  }
  return result;
}

double protocol witness for InsettableShape.inset(by:) in conformance ButtonBorderShape._Inset@<D0>(double *a1@<X8>, double a2@<D0>)
{
  double *v2;
  double result;

  result = *v2 + a2;
  *a1 = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ButtonBorderShape._Inset(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double protocol witness for Shape.path(in:) in conformance ButtonBorderShape._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  CGFloat *v5;
  double result;
  __int128 v8;
  _OWORD v9[2];
  char v10;

  CGRectInset(*(CGRect *)&a2, *v5, *v5);
  ButtonBorderShape.path(in:)((uint64_t)v9);
  result = *(double *)v9;
  v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v10;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ButtonBorderShape._Inset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ButtonBorderShape(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset);
}

uint64_t associated type witness table accessor for View.Body : View in ButtonBorderShape._Inset()
{
  return lazy protocol witness table accessor for type _ShapeView<ResolvedBorderShape, ForegroundStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<ButtonBorderShape._Inset, ForegroundStyle> and conformance _ShapeView<A, B>, &lazy cache variable for type metadata for _ShapeView<ButtonBorderShape._Inset, ForegroundStyle>, (void (*)(void))lazy protocol witness table accessor for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset);
}

double protocol witness for View.body.getter in conformance ButtonBorderShape._Inset@<D0>(uint64_t a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *(double *)a1 = *v1;
  *(_WORD *)(a1 + 8) = 256;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in ButtonBorderShape()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for InsettableShape.inset(by:) in conformance ButtonBorderShape(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

unint64_t instantiation function for generic protocol witness table for ButtonBorderShape(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ButtonBorderShape and conformance ButtonBorderShape();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_187770AD0()
{
  return EnvironmentValues._buttonBorderShape.setter();
}

double sub_187770B0C@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_187770B18(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

ValueMetadata *type metadata accessor for BorderedButtonStyle.BorderShape()
{
  return &type metadata for BorderedButtonStyle.BorderShape;
}

ValueMetadata *type metadata accessor for ButtonBorderShape._Inset()
{
  return &type metadata for ButtonBorderShape._Inset;
}

uint64_t sub_187770B44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<ButtonBorderShape>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ButtonBorderShape> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<ButtonBorderShape>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ButtonBorderShape>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ButtonBorderShape>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ButtonBorderShape>);
  }
}

ValueMetadata *type metadata accessor for ButtonContainerIsBorderedInput()
{
  return &type metadata for ButtonContainerIsBorderedInput;
}

ValueMetadata *type metadata accessor for ButtonBorderShapeKey()
{
  return &type metadata for ButtonBorderShapeKey;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ButtonContainerIsBorderedInput()
{
  return &protocol witness table for ButtonContainerIsBorderedInput;
}

uint64_t getEnumTagSinglePayload for ResolvedBorderShape(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && a1[56])
    return (*(_DWORD *)a1 + 252);
  v3 = *a1;
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedBorderShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 4;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedBorderShape()
{
  return lazy protocol witness table accessor for type _ShapeView<ResolvedBorderShape, ForegroundStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<ResolvedBorderShape, ForegroundStyle> and conformance _ShapeView<A, B>, &lazy cache variable for type metadata for _ShapeView<ResolvedBorderShape, ForegroundStyle>, (void (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape);
}

void type metadata accessor for _ShapeView<ButtonBorderShape, ForegroundStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = type metadata accessor for _ShapeView();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t instantiation function for generic protocol witness table for ButtonBorderShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void closure #1 in UIHostingController.updateWindowSceneSizeRestrictions()(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *MEMORY[0x1E0DEEDD8] & *a1;
  v4 = (void *)specialized UIHostingController.host.getter();
  v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  v7 = v4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
  ViewRendererHost.sizeThatFits(_:)();
  v9 = v8;
  v11 = v10;

  *a2 = v9;
  a2[1] = v11;
}

void closure #2 in UIHostingController.updateWindowSceneSizeRestrictions()(char a1, uint64_t a2, uint64_t *a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *a3;
  v8 = *MEMORY[0x1E0DEEDD8];
  if ((a1 & 1) != 0)
  {
    objc_msgSend((id)specialized UIHostingController.host.getter(), sel_sizeThatFits_, 0.0, 0.0);
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v11;
    *(_BYTE *)(a2 + 16) = 0;
  }
  if ((a4 & 1) != 0)
  {
    v12 = (id)specialized UIHostingController.host.getter();
    static _ProposedSize.infinity.getter();
    v14 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v8 & v7) + 0x50), *(_QWORD *)((v8 & v7) + 0x58), v13);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v14);
    ViewRendererHost.sizeThatFits(_:)();
    v16 = v15;
    v18 = v17;

    *(_QWORD *)a5 = v16;
    *(_QWORD *)(a5 + 8) = v18;
    *(_BYTE *)(a5 + 16) = 0;
  }
}

uint64_t UIHostingController._preferredStatusBarUpdateAnimation.getter()
{
  specialized UIHostingController.host.getter();
  return 1;
}

void specialized UIHostingController.prepareForNavigationTransition(_:)()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  UINavigationController *v8;
  UINavigationController *v9;
  NSArray *v10;
  unint64_t v11;
  UINavigationController *v12;
  char v13;
  _QWORD v14[2];

  v1 = v0;
  v2 = *MEMORY[0x1E0DEEDD8] & *v0;
  v3 = (void *)specialized UIHostingController.host.getter();
  v5 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v4);
  v6 = v3;
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 72))(v14, v5, v7);
  LODWORD(v5) = LOBYTE(v14[0]);

  if (!(_DWORD)v5)
  {
    specialized UIHostingController.host.getter();
    swift_retain();
    GraphHost.environment.getter();
    swift_release();
    if (v14[1])
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>, (uint64_t)&type metadata for EnvironmentValues.IsEagerNavigationTransitionEnabled, (uint64_t)&protocol witness table for EnvironmentValues.IsEagerNavigationTransitionEnabled, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>, (uint64_t)&type metadata for EnvironmentValues.IsEagerNavigationTransitionEnabled, (uint64_t)&protocol witness table for EnvironmentValues.IsEagerNavigationTransitionEnabled);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>, (uint64_t)&type metadata for EnvironmentValues.IsEagerNavigationTransitionEnabled, (uint64_t)&protocol witness table for EnvironmentValues.IsEagerNavigationTransitionEnabled, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>, (uint64_t)&type metadata for EnvironmentValues.IsEagerNavigationTransitionEnabled, (uint64_t)&protocol witness table for EnvironmentValues.IsEagerNavigationTransitionEnabled);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (v13 == 1)
    {
      v8 = (UINavigationController *)objc_msgSend(v1, sel_navigationController);
      if (v8)
      {
        v9 = v8;
        v10 = -[UINavigationController viewControllers](v8, sel_viewControllers);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        LOBYTE(v10) = specialized Sequence<>.contains(_:)((uint64_t)v1, v11);
        swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
        {
          UIHostingController.updateIncomingBoundsIfNeeded(navigationController:)(v9);
          v12 = (UINavigationController *)(id)specialized UIHostingController.host.getter();
          _UIHostingView.updatePreferences(renderDisplayList:)(1);

          v9 = v12;
        }

      }
    }
  }
}

void specialized UIHostingController._viewDidAppear(_:)()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v11;

  v1 = v0;
  v11 = xmmword_187BFE310;
  UIHostingController.resolveRequiredBridges(in:allowedActions:)((uint64_t *)&v11, 3);
  v2 = (id)specialized UIHostingController.host.getter();
  v3 = objc_msgSend(v1, sel_transitionCoordinator);
  specialized _UIHostingView.viewControllerDidAppear(transitionCoordinator:animated:)();

  swift_unknownObjectRelease();
  if (specialized UIHostingController.navigationBridge.getter())
  {
    swift_retain();
    NavigationBridge_PhoneTV.hostingControllerDidAppear()();
  }
  specialized UIHostingController.host.getter();
  v4 = _UIHostingView.sceneBridge.getter();
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 136);
    v6 = *(_QWORD *)(v4 + 144);
    v7 = *(_QWORD *)(v4 + 152);
    v8 = *(unsigned __int8 *)(v4 + 160);
    v9 = *(unsigned __int8 *)(v4 + 161);
    swift_release();
    if (v9 == 1 && (v7 | v6 | v5 || v8) && !v8 && v5 == 1 && !(v7 | v6))
    {
      specialized UIHostingController.host.getter();
      v10 = _UIHostingView.sceneBridge.getter();
      if (v10)
      {
        *(_QWORD *)(v10 + 144) = 0;
        *(_QWORD *)(v10 + 152) = 0;
        *(_QWORD *)(v10 + 136) = 2;
        *(_WORD *)(v10 + 160) = 256;
        swift_release();
      }
      UIHostingController.updateWindowSceneSizeRestrictions()();
    }
  }
}

uint64_t specialized UIHostingController._viewWillDisappear(_:)()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  uint64_t result;

  v1 = v0;
  v2 = (id)specialized UIHostingController.host.getter();
  v3 = objc_msgSend(v1, sel_transitionCoordinator);
  specialized _UIHostingView.viewControllerWillDisappear(transitionCoordinator:animated:)();

  swift_unknownObjectRelease();
  v4 = (void *)specialized UIHostingController.toolbarBridge.getter();
  if (v4)
  {
    v5 = v4;
    ToolbarBridge.willDisappear<A>(hostingController:)(v1);

  }
  if (specialized UIHostingController.navigationBridge.getter())
  {
    swift_retain();
    NavigationBridge_PhoneTV.hostingControllerWillDisappear()();
    swift_release();
  }
  result = specialized UIHostingController.alwaysOnBridge.getter();
  if (result)
  {
    swift_retain();
    AlwaysOnBridge.hostingControllerWillDisappear()();
    return swift_release();
  }
  return result;
}

void specialized UIHostingController._viewDidDisappear(_:)()
{
  uint64_t v0;

  UIHostingController.requiredBridges.setter(*(_QWORD *)(v0 + direct field offset for UIHostingController.requiredBridges) & 0xFFFFFFFFFFFFFFFDLL);
}

void partial apply for closure #2 in UIHostingController.updateWindowSceneSizeRestrictions()()
{
  uint64_t v0;

  closure #2 in UIHostingController.updateWindowSceneSizeRestrictions()(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

void partial apply for closure #1 in UIHostingController.updateWindowSceneSizeRestrictions()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  closure #1 in UIHostingController.updateWindowSceneSizeRestrictions()(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_18777164C()
{
  return swift_deallocObject();
}

uint64_t View.accessibility<A>(_:_:isEnabled:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  if ((a3 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)v20 - v13, a2, v14);
    AccessibilityProperties.init<A>(_:_:)();
    v15 = v21;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v15 = Dictionary.init(minimumCapacity:)();
  }
  v20[1] = v15;
  AccessibilityAttachment.init(properties:)();
  v16 = v21;
  v17 = v22;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  *(_QWORD *)(v18 + 24) = v17;
  v21 = v18;
  v22 = 0;
  MEMORY[0x18D75B4AC](&v21, a4, &type metadata for AccessibilityAttachmentModifier, a6);
  return swift_release();
}

uint64_t ModifiedContent<>.update<A>(_:combining:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t *v13;
  uint64_t v15;

  if ((a3 & 1) != 0)
  {
    v13 = (uint64_t *)(*(_QWORD *)(v8 + *(int *)(a4 + 36)) + 16);
    swift_beginAccess();
    v15 = *(_QWORD *)(a4 + 16);
    swift_retain();
    swift_retain();
    closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v13, a1, a2, v15, a5, a6, a7);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a8, v8, a4);
}

uint64_t ModifiedContent<>.update<A>(_:replacing:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;

  if ((a3 & 1) != 0)
  {
    v10 = *(_QWORD *)(v5 + *(int *)(a4 + 36)) + 16;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    closure #1 in ModifiedContent<>.update<A>(_:replacing:isEnabled:)(v10, a1, a2);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a5, v5, a4);
}

uint64_t View.accessibility()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for AnyAccessibilityPropertiesEntry();
  Dictionary.init(minimumCapacity:)();
  AccessibilityAttachment.init(properties:)();
  v4 = v8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 24) = v4;
  v7 = v5;
  v8 = 0;
  MEMORY[0x18D75B4AC](&v7, a1, &type metadata for AccessibilityAttachmentModifier, a2);
  return swift_release();
}

Swift::Bool __swiftcall AccessibilityAttachmentModifier.willCreateNode(for:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(void *);
  char v5;
  char v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
  {
    v4 = *(uint64_t (**)(void *))(*(_QWORD *)v3 + 80);
    swift_retain();
    v5 = v4(a1._rawValue);
    swift_release();
    return v5 & 1;
  }
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_5;
LABEL_7:
    swift_beginAccess();
    v7 = AccessibilityAttachment.isEmpty.getter() ^ 1;
    return v7 & 1;
  }
  if (!*(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_7;
LABEL_5:
  v7 = 0;
  return v7 & 1;
}

void AccessibilityAttachmentModifier.initialAttachment(for:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t);
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[2];
  uint64_t v18;
  void *v19;

  v6 = *v2;
  v5 = v2[1];
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + 16);
  v8 = *(void **)(v6 + 24);
  v18 = v7;
  v19 = v8;
  if (v5)
  {
    v9 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v5 + 88);
    v10 = v8;
    swift_retain_n();
    swift_bridgeObjectRetain();
    v9(v17, a1);
    v11 = v17[0];
    v12 = (void *)v17[1];
    v15 = v17[0];
    AccessibilityProperties.merge(with:)(&v15);
    v7 = v18;
    v8 = v19;
    v15 = v18;
    v16 = v19;
    v13 = (void *)AccessibilityAttachment.platformElement.getter();

    if (v13 || (v15 = v11, v16 = v12, !AccessibilityAttachment.platformElement.getter()))
    {
      swift_bridgeObjectRelease();
      swift_release_n();

    }
    else
    {
      AccessibilityAttachment.platformElement.setter();
      swift_bridgeObjectRelease();
      swift_release_n();

      v7 = v18;
      v8 = v19;
    }
  }
  else
  {
    v14 = v8;
    swift_bridgeObjectRetain();
  }
  *a2 = v7;
  a2[1] = (uint64_t)v8;
}

void AccessibilityAttachmentModifier.updatedAttachment(for:nodes:atIndex:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;

  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  v9 = *v3;
  v8 = v3[1];
  swift_beginAccess();
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(void **)(v9 + 24);
  v22 = v10;
  v23 = v11;
  if (v8)
  {
    v19 = v8;
    v17 = v6;
    LOBYTE(v18) = v7;
    v12 = v11;
    swift_retain_n();
    swift_bridgeObjectRetain();
    AccessibilityContainerModifier.updatedAttachment(for:nodes:atIndex:)(&v17, a2);
    v13 = v20;
    v14 = v21;
    v17 = v20;
    AccessibilityProperties.merge(with:)(&v17);
    v10 = v22;
    v11 = v23;
    v17 = v22;
    v18 = v23;
    v15 = (void *)AccessibilityAttachment.platformElement.getter();

    if (v15 || (v17 = v13, v18 = v14, !AccessibilityAttachment.platformElement.getter()))
    {
      swift_bridgeObjectRelease();
      swift_release_n();

    }
    else
    {
      AccessibilityAttachment.platformElement.setter();
      swift_bridgeObjectRelease();
      swift_release_n();

      v10 = v22;
      v11 = v23;
    }
  }
  else
  {
    v16 = v11;
    swift_bridgeObjectRetain();
  }
  *a3 = v10;
  a3[1] = (uint64_t)v11;
}

uint64_t key path getter for MutableBox.value : MutableBox<AccessibilityAttachment>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 24);
  *a2 = *(_QWORD *)(v3 + 16);
  a2[1] = v4;
  v5 = v4;
  return swift_bridgeObjectRetain();
}

void key path setter for MutableBox.value : MutableBox<AccessibilityAttachment>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *a1;
  v3 = (void *)a1[1];
  v4 = *a2;
  swift_beginAccess();
  v5 = *(void **)(v4 + 24);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();

}

uint64_t protocol witness for static AccessibilityViewModifier.options.getter in conformance AccessibilityAttachmentModifier()
{
  return 3;
}

BOOL protocol witness for AccessibilityViewModifier.supportsPlaceholders.getter in conformance AccessibilityAttachmentModifier()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8) == 0;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityAttachmentModifier(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier();
  result = lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityAttachmentModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityAttachmentModifier()
{
  return &protocol witness table for AccessibilityAttachmentModifier;
}

uint64_t closure #1 in ModifiedContent<>.update<A>(_:replacing:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  (*(void (**)(char *, uint64_t, double))(v7 + 16))((char *)&v10 - v8, a3, v6);
  return AccessibilityProperties.subscript.setter();
}

uint64_t closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;

  v19 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v19 - v16;
  v20 = *a1;
  AccessibilityProperties.subscript.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v19, AssociatedTypeWitness);
  AccessibilityProperties.subscript.setter();
  v20 = *a1;
  AccessibilityProperties.subscript.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(a7 + 8))(v17, AssociatedTypeWitness, a7);
  AccessibilityProperties.subscript.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, AssociatedTypeWitness);
}

void type metadata accessor for Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment>);
  }
}

unint64_t lazy protocol witness table accessor for type Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment> and conformance Focus<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment> and conformance Focus<A, B>)
  {
    type metadata accessor for Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment> and conformance Focus<A, B>);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static AccessibilityAttachmentModifier.makeAccessibilityViewModifier(modifier:inputs:body:)()
{
  return implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)();
}

ValueMetadata *type metadata accessor for CollapsedSplitNavigationStrategy_Phone()
{
  return &type metadata for CollapsedSplitNavigationStrategy_Phone;
}

ValueMetadata *type metadata accessor for SplitColumnNavigationStrategy()
{
  return &type metadata for SplitColumnNavigationStrategy;
}

uint64_t associated type witness table accessor for NavigationStrategy.StackModifier : ViewModifier in SplitColumnNavigationStrategy()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for SplitColumnNavigationStrategy(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for NavigationStrategy.StackModifier : ViewModifier in CollapsedSplitNavigationStrategy_Phone()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for NavigationStrategy.environment.getter in conformance NavigationStrategy_Phone@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

unint64_t instantiation function for generic protocol witness table for CollapsedSplitNavigationStrategy_Phone(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CollapsedSplitNavigationStrategy_Phone and conformance CollapsedSplitNavigationStrategy_Phone();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CollapsedSplitNavigationStrategy_Phone and conformance CollapsedSplitNavigationStrategy_Phone()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollapsedSplitNavigationStrategy_Phone and conformance CollapsedSplitNavigationStrategy_Phone;
  if (!lazy protocol witness table cache variable for type CollapsedSplitNavigationStrategy_Phone and conformance CollapsedSplitNavigationStrategy_Phone)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollapsedSplitNavigationStrategy_Phone, &type metadata for CollapsedSplitNavigationStrategy_Phone);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollapsedSplitNavigationStrategy_Phone and conformance CollapsedSplitNavigationStrategy_Phone);
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationBackgroundReaderModifier()
{
  return &type metadata for NavigationBackgroundReaderModifier;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, &lazy cache variable for type metadata for ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<AnyView, EmptyModifier>(255, &lazy cache variable for type metadata for ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>);
    v2 = v1;
    v3[0] = &protocol witness table for InjectKeyModifier;
    v3[1] = lazy protocol witness table accessor for type NavigationBackgroundReaderModifier and conformance NavigationBackgroundReaderModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationBackgroundReaderModifier and conformance NavigationBackgroundReaderModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationBackgroundReaderModifier and conformance NavigationBackgroundReaderModifier;
  if (!lazy protocol witness table cache variable for type NavigationBackgroundReaderModifier and conformance NavigationBackgroundReaderModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationBackgroundReaderModifier, &type metadata for NavigationBackgroundReaderModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationBackgroundReaderModifier and conformance NavigationBackgroundReaderModifier);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in NavigationBackgroundReaderModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance NavigationBackgroundReaderModifier@<X0>(uint64_t (**a1)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t result;
  uint64_t (*v3)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);

  result = static Alignment.center.getter();
  *a1 = closure #1 in View.renderContainerBackgroundInHostingView<A>(_:);
  a1[1] = 0;
  a1[2] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))result;
  a1[3] = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationBackgroundReaderModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<NavigationBackgroundReaderModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>, MEMORY[0x1E0CE6488]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>>)
  {
    type metadata accessor for _ViewModifier_Content<NavigationBackgroundReaderModifier>();
    type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>>);
  }
}

void type metadata accessor for _ViewModifier_Content<NavigationBackgroundReaderModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<NavigationBackgroundReaderModifier>)
  {
    lazy protocol witness table accessor for type NavigationBackgroundReaderModifier and conformance NavigationBackgroundReaderModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<NavigationBackgroundReaderModifier>);
  }
}

void type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>)
  {
    type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>();
    lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>();
    v0 = type metadata accessor for _BackgroundPreferenceModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>);
  }
}

_QWORD *assignWithCopy for CollapsedSplitNavigationStrategy_Phone(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationStrategy_Phone()
{
  return &type metadata for NavigationStrategy_Phone;
}

unint64_t instantiation function for generic protocol witness table for NavigationStrategy_Phone(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for NavigationStrategy.StackModifier : ViewModifier in NavigationStrategy_Phone()
{
  return swift_getOpaqueTypeConformance2();
}

double AnimatedValueView.init(_:default:track:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_OWORD *__return_ptr, uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  char v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  __int128 v21;
  _QWORD *v22;
  _OWORD v23[2];
  uint64_t v24;

  v15 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(_BYTE *)(a8 + 16) = v15;
  v16 = (int *)type metadata accessor for AnimatedValueView(0, a6, a7, a9);
  v17 = *(_QWORD *)(a6 - 8);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a8 + v16[11], a2, a6);
  a3(v23, v18);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, a6);
  v19 = a8 + v16[12];
  result = *(double *)v23;
  v21 = v23[1];
  *(_OWORD *)v19 = v23[0];
  *(_OWORD *)(v19 + 16) = v21;
  *(_QWORD *)(v19 + 32) = v24;
  v22 = (_QWORD *)(a8 + v16[13]);
  *v22 = a4;
  v22[1] = a5;
  return result;
}

uint64_t type metadata accessor for AnimatedValueView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueView);
}

uint64_t static AnimatedValueView._makeView(view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v28 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 7);
  v11 = *((_DWORD *)a2 + 9);
  v29 = *((_DWORD *)a2 + 6);
  v30 = *((_DWORD *)a2 + 8);
  v21 = a2[6];
  v22 = a2[5];
  v26 = *((_DWORD *)a2 + 15);
  v27 = *((_DWORD *)a2 + 14);
  v19 = *((_DWORD *)a2 + 18);
  v20 = *((_DWORD *)a2 + 16);
  v23 = *((_DWORD *)a2 + 19);
  v24 = *((_DWORD *)a2 + 20);
  v25 = *((_DWORD *)a2 + 17);
  type metadata accessor for AnimatedValueView(255, a3, a4, a5);
  type metadata accessor for _GraphValue();
  v18 = _GraphValue.value.getter();
  _GraphValue.value.getter();
  closure #1 in static AnimatedValueView._makeView(view:inputs:)(1, a3, a4, a5);
  v40 = v30;
  v41 = v11;
  v42 = v22;
  v43 = v21;
  v44 = v27;
  v45 = v26;
  v46 = v20;
  v47 = v25;
  v48 = v19;
  v49 = v23;
  v50 = v24;
  LODWORD(v35) = v18;
  HIDWORD(v35) = AGGraphCreateOffsetAttribute2();
  v36 = _ViewInputs.viewPhase.getter();
  v37 = _ViewInputs.transaction.getter();
  v38 = _ViewInputs.time.getter();
  v39 = 0xC000000000000000;
  v32 = a4;
  v33 = type metadata accessor for AnimatorAttribute(0, a3, a4, a5);
  v34 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatorAttribute<A, B>, v33);
  v12 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v35, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v31, v33, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  swift_release();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  _GraphValue.init(_:)();
  v35 = v28;
  v36 = v8;
  v38 = v9;
  v39 = __PAIR64__(v10, v29);
  v40 = v30;
  v41 = v11;
  v42 = v22;
  v43 = v21;
  v44 = v27;
  v45 = v26;
  v46 = v20;
  v47 = v25;
  v48 = v19;
  v49 = v23;
  v50 = v24;
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t closure #1 in static AnimatedValueView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = type metadata accessor for AnimatedValueView(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, (uint64_t)&type metadata for AnimatedValuePlaybackConfiguration, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[5];
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance AnimatedValueView<A, B>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return static AnimatedValueView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AnimatedValueView<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueView<A, B>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AnimatedValueView<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueView<A, B>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance AnimatedValueView<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueView<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t AnimatorAttribute.updateValue()(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t Value;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  char v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD v63[4];
  uint64_t v64;
  char *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];
  char v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v3 = v2;
  v81 = *MEMORY[0x1E0C80C00];
  v72 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v71 = (char *)v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 16);
  v74 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v65 = (char *)v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = v9;
  v10 = *(_QWORD *)(v9 + 32);
  v64 = v11;
  v69 = v10;
  v12 = type metadata accessor for AnimatedValueView(0, v6, v11, v10);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v63 - v15;
  v63[3] = *(_DWORD *)v2;
  v17 = *((_DWORD *)v2 + 5);
  v63[2] = *((_DWORD *)v2 + 4);
  v20 = *((_QWORD *)v2 + 3);
  v18 = (uint64_t *)v2 + 3;
  v19 = v20;
  v21 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v21 != v17)
  {
    swift_release();
    *((_DWORD *)v3 + 5) = v21;
    v19 = 0xC000000000000000;
    *((_QWORD *)v3 + 3) = 0xC000000000000000;
  }
  Value = AGGraphGetValue();
  v23 = *(_QWORD *)Value;
  v24 = *(_QWORD *)(Value + 8);
  v25 = *(unsigned __int8 *)(Value + 16);
  v73 = v18;
  v68 = v23;
  v67 = v24;
  v66 = v25;
  if ((v26 & 1) != 0 || (AnimatedValueState.isAnimating.getter(v19), (v27 & 1) != 0) || v19 == 0xC000000000000000)
  {
    outlined copy of AnimatedValuePlaybackConfiguration.Mode(v23, v24, v25);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    v18 = v73;
    AGGraphSetUpdate();
    v76[0] = v23;
    v76[1] = v24;
    v77 = v25;
    v75 = *(_QWORD *)AGGraphGetValue();
    v28 = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v28, v12);
    v29 = &v16[*(int *)(v12 + 48)];
    v32 = type metadata accessor for AnimatedValueTrack(0, v6, v30, v31);
    v33 = *(_QWORD *)(v32 - 8);
    (*(void (**)(__int128 *, char *, uint64_t))(v33 + 16))(&v78, v29, v32);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    type metadata accessor for AnimatedValueState(0, v6, v34, v35);
    AnimatedValueState.update(configuration:time:track:transaction:)((uint64_t)v76);
    swift_release();
    (*(void (**)(__int128 *, uint64_t))(v33 + 8))(&v78, v32);
  }
  else
  {
    outlined copy of AnimatedValuePlaybackConfiguration.Mode(v23, v24, v25);
  }
  v36 = v64;
  AnimatedValueState.isAnimating.getter(*v18);
  if ((v37 & 1) != 0)
  {
    type metadata accessor for ViewGraph();
    v38 = MEMORY[0x18D75C5F8]();
    v39 = *(double *)AGGraphGetValue() + 0.00833333333;
    swift_beginAccess();
    v40 = *(double *)(v38 + 376);
    if (v39 < v40)
      v40 = v39;
    *(double *)(v38 + 376) = v40;
    swift_release();
  }
  v41 = AGGraphGetValue();
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v42(v16, v41, v12);
  v43 = v65;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v65, &v16[*(int *)(v12 + 44)], v6);
  v44 = *(void (**)(char *, uint64_t))(v13 + 8);
  v44(v16, v12);
  v75 = *(_QWORD *)AGGraphGetValue();
  v45 = AGGraphGetValue();
  v42(v16, v45, v12);
  v46 = &v16[*(int *)(v12 + 48)];
  v49 = type metadata accessor for AnimatedValueTrack(0, v6, v47, v48);
  v50 = *(_QWORD *)(v49 - 8);
  (*(void (**)(__int128 *, char *, uint64_t))(v50 + 16))(&v78, v46, v49);
  v44(v16, v12);
  type metadata accessor for AnimatedValueState(0, v6, v51, v52);
  AnimatedValueState.update(value:mix:at:currentTrack:)();
  v53 = (*(uint64_t (**)(__int128 *, uint64_t))(v50 + 8))(&v78, v49);
  v54 = *((_QWORD *)v3 + 3);
  v78 = *v3;
  v79 = *((_QWORD *)v3 + 2);
  v80 = v54;
  MEMORY[0x1E0C80A78](v53, v55);
  *(_QWORD *)&v63[-12] = v6;
  *(_QWORD *)&v63[-10] = v36;
  *(_QWORD *)&v63[-8] = v69;
  *(_QWORD *)&v63[-6] = v3;
  *(_QWORD *)&v63[-4] = v43;
  swift_retain();
  v56 = v70;
  v57 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatorAttribute<A, B>, v70);
  v58 = (uint64_t)v71;
  StatefulRule.withObservation<A>(do:)();
  v59 = swift_release();
  MEMORY[0x1E0C80A78](v59, v60);
  *(_QWORD *)&v63[-4] = v56;
  *(_QWORD *)&v63[-2] = v57;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v58, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v63[-8], v36, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v61);
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v68, v67, v66);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v58, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v43, v6);
}

void AnimatedValueState.isAnimating.getter(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_187773438@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 + 24) >> 63;
}

void AnimatedValueState.update(configuration:time:track:transaction:)(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1877734C0()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;

  if (*(_QWORD *)v0 >> 62)
  {
    swift_release();
    result = swift_allocObject();
    *(double *)(result + 16) = v1;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)v0 = result;
  }
  else
  {
    v7 = *(_OWORD *)(*(_QWORD *)v0 + 16);
    outlined copy of AnimatedValueState<A>.PausedState<A>(v7, *((uint64_t *)&v7 + 1));
    type metadata accessor for AnimatedValueState.PausedState(0, *(_QWORD *)(v2 + 16), v3, v4);
    specialized AnimatedValueState.PausedState.update(at:pauseTime:track:transaction:)(v1);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = v7;
    result = swift_release();
    *(_QWORD *)v0 = v5;
  }
  return result;
}

void AnimatedValueState.update(value:mix:at:currentTrack:)()
{
  __asm { BR              X10 }
}

uint64_t sub_187773794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;

  v7 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)&v14 = *(_QWORD *)(v4 + 16);
  *((_QWORD *)&v14 + 1) = v7;
  v13 = v6;
  outlined copy of AnimatedValueState<A>.PausedState<A>(v14, v7);
  v10 = type metadata accessor for AnimatedValueState.PausedState(0, *(_QWORD *)(v1 + 16), v8, v9);
  AnimatedValueState.PausedState.update(value:mix:at:currentTrack:)(v2, v5, (uint64_t)&v13, v0, v10);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = v14;
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t closure #1 in closure #2 in AnimatorAttribute.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *);
  uint64_t v14;

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *))(a1
                                      + *(int *)(type metadata accessor for AnimatedValueView(0, v9, v10, v11) + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, a3);
  v12(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a3);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnimatorAttribute<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatorAttribute<A, B>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t AnimatedValueState.EventDrivenState.update(at:value:track:behavior:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;

  v6 = v5;
  v8 = *a1;
  v9 = *a2;
  v10 = *(_QWORD *)a4;
  v11 = *(_BYTE *)(a4 + 8);
  v27 = *a1;
  v12 = v5 + 1;
  v13 = *(_QWORD *)(a5 + 16);
  v14 = type metadata accessor for AnimatedValueState.EventDrivenState.Phase(0, v13, a3, a4);
  AnimatedValueState.EventDrivenState.Phase.update(at:)((double *)&v27, v14, v15, v16);
  v27 = v9;
  if ((static AnyEquatable.== infix(_:_:)() & 1) == 0)
  {
    v17 = *v12;
    if (*v12 < 0)
    {
      v22 = swift_allocObject();
      v25 = type metadata accessor for AnimatedValueTrack(0, v13, v23, v24);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22 + 16, a3, v25);
      *(_QWORD *)(v22 + 56) = v8;
      goto LABEL_6;
    }
    if ((v11 & 1) == 0)
    {
      v18 = swift_allocObject();
      *(_QWORD *)(v18 + 16) = v17;
      v21 = type metadata accessor for AnimatedValueTrack(0, v13, v19, v20);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18 + 24, a3, v21);
      *(_QWORD *)(v18 + 64) = v8;
      *(_QWORD *)(v18 + 72) = v10;
      v22 = v18 | 0x4000000000000000;
LABEL_6:
      *v12 = v22;
    }
  }
  swift_retain();
  result = swift_release();
  *v6 = v9;
  return result;
}

uint64_t AnimatedValueState.PausedState.update(value:mix:at:currentTrack:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *v5;
  v10 = v5[1];
  if (v10 < 0)
  {
    swift_retain();
    v12 = AnimatorState.update(_:at:environment:)();
    type metadata accessor for AnimatedValueTrack(0, *(_QWORD *)(a5 + 16), v13, v14);
    AnimatedValueTrack.update(value:mix:at:)(a1, a2, *(double *)&v9);
    result = outlined consume of AnimatedValueState<A>.PausedState<A>(v9, v10);
    if ((v12 & 1) != 0)
    {
      result = outlined consume of AnimatedValueState<A>.PausedState<A>(v9, v10);
      *v5 = v9;
      v5[1] = 0;
    }
  }
  else
  {
    type metadata accessor for AnimatedValueTrack(0, *(_QWORD *)(a5 + 16), a4, a5);
    return AnimatedValueTrack.update(value:mix:at:)(a1, a2, *(double *)&v9);
  }
  return result;
}

uint64_t AnimatedValueState.EventDrivenState.Phase.update(value:mix:at:currentTrack:)(uint64_t a1, double *a2, uint64_t a3, unint64_t a4, uint64_t a5, double a6)
{
  double v9;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _BYTE v25[40];

  v9 = *a2;
  if (a4 >> 62)
  {
    if (a4 >> 62 == 1)
    {
      v11 = *(_QWORD *)(a4 + 16);
      v12 = (a4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      v13 = *(double *)(a4 + 64);
      v14 = *(double *)(a4 + 72);
      v15 = type metadata accessor for AnimatedValueTrack(0, a5, a3, a4);
      v16 = *(_QWORD *)(v15 - 8);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 16))(v25, v12, v15);
      v17 = v9 - v13;
      swift_retain();
      static UnitCurve.easeInOut.getter();
      v18 = UnitCurve.value(at:)(v17 / v14);
      *(double *)&v24 = v9;
      AnimatedValueState.EventDrivenState.Phase.update(value:mix:at:currentTrack:)(a1, &v24, a3, v11, a5, a6);
      AnimatedValueTrack.update(value:mix:at:)(a1, v18 * a6, v17);
      swift_release();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v16 + 8))(v25, v15);
    }
    else
    {
      type metadata accessor for AnimatedValueTrack(0, a5, a3, a4);
      return AnimatedValueTrack.update(value:mix:at:)(a1, a6, 0.0);
    }
  }
  else
  {
    v20 = a4 + 16;
    v21 = *(double *)(a4 + 56);
    v22 = type metadata accessor for AnimatedValueTrack(0, a5, a3, a4);
    v23 = *(_QWORD *)(v22 - 8);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v23 + 16))(v25, v20, v22);
    AnimatedValueTrack.update(value:mix:at:)(a1, a6, v9 - v21);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v23 + 8))(v25, v22);
  }
}

double *AnimatedValueState.EventDrivenState.Phase.update(at:)(double *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  _OWORD v21[2];
  uint64_t v22;

  v5 = *result;
  v6 = *v4;
  v7 = (unint64_t)*v4 >> 62;
  if ((_DWORD)v7)
  {
    if ((_DWORD)v7 == 1)
    {
      v8 = (v6 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      v9 = *(double *)(v6 + 64);
      v10 = *(double *)(v6 + 72);
      v11 = type metadata accessor for AnimatedValueTrack(0, *(_QWORD *)(a2 + 16), a3, a4);
      v12 = *(_QWORD *)(v11 - 8);
      (*(void (**)(_OWORD *, uint64_t, uint64_t))(v12 + 16))(v21, v8, v11);
      if (v10 >= v5 - v9)
      {
        return (double *)(*(uint64_t (**)(_OWORD *, uint64_t))(v12 + 8))(v21, v11);
      }
      else
      {
        v13 = swift_allocObject();
        v14 = v21[1];
        *(_OWORD *)(v13 + 16) = v21[0];
        *(_OWORD *)(v13 + 32) = v14;
        *(_QWORD *)(v13 + 48) = v22;
        *(double *)(v13 + 56) = v9;
        result = (double *)swift_release();
        *v4 = v13;
      }
    }
  }
  else
  {
    v15 = *(double *)(v6 + 56);
    v16 = type metadata accessor for AnimatedValueTrack(0, *(_QWORD *)(a2 + 16), a3, a4);
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(_OWORD *, unint64_t, uint64_t))(v17 + 16))(v21, v6 + 16, v16);
    v18 = v5 - v15;
    swift_retain();
    AnimatedValueTrack.duration.getter();
    v20 = v19;
    (*(void (**)(_OWORD *, uint64_t))(v17 + 8))(v21, v16);
    if (v20 >= v18)
    {
      return (double *)swift_release();
    }
    else
    {
      swift_release();
      result = (double *)swift_release();
      *v4 = 0x8000000000000000;
    }
  }
  return result;
}

void View.animatedValue<A, B>(_:default:track:content:)()
{
  type metadata accessor for AnimatedValueModifier();
}

void sub_187774054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t, double);
  uint64_t (*v32)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  uint64_t (**v40)@<X0>(uint64_t@<X0>, uint64_t@<X8>);

  v14 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v13 - 160) = a1;
  *(_QWORD *)(v13 - 152) = v14;
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v13 - 168) = (char *)&a9 - v15;
  v16 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v13 - 248) = v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v13 - 264) = v20;
  *(_QWORD *)(v13 - 280) = v12;
  v21 = type metadata accessor for AnimatedValueView(0, v10, v9, v12);
  *(_QWORD *)(v13 - 256) = v21;
  *(_QWORD *)(v13 - 200) = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  *(_QWORD *)(v13 - 208) = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = (char *)&a9 - v27;
  v29 = *(_QWORD *)v11;
  v30 = *(_QWORD *)(v11 + 8);
  v31 = *(void (**)(char *, _QWORD, uint64_t, double))(v16 + 16);
  *(_QWORD *)(v13 - 272) = v31;
  LOBYTE(v16) = *(_BYTE *)(v11 + 16);
  v31(v20, *(_QWORD *)(v13 - 232), v10, v26);
  v32 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))swift_allocObject();
  v33 = *(_QWORD *)(v13 - 240);
  *((_QWORD *)v32 + 2) = v33;
  *((_QWORD *)v32 + 3) = v10;
  v34 = *(_QWORD *)(v13 - 216);
  *((_QWORD *)v32 + 4) = v9;
  *((_QWORD *)v32 + 5) = v34;
  v35 = *(_QWORD *)(v13 - 192);
  *((_QWORD *)v32 + 6) = v12;
  *((_QWORD *)v32 + 7) = v35;
  *((_QWORD *)v32 + 8) = *(_QWORD *)(v13 - 224);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(v29, v30, v16);
  swift_retain();
  *(_QWORD *)v28 = v29;
  *((_QWORD *)v28 + 1) = v30;
  v28[16] = v16;
  v36 = *(int **)(v13 - 256);
  v37 = *(_QWORD *)(v13 - 264);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 - 272))(&v28[v36[11]], v37, v10);
  closure #1 in View.animatedValue<A, B>(_:default:track:content:)(*(void (**)(_QWORD *__return_ptr))(v13 - 184), *(_QWORD *)(v13 - 176), v33, v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 248) + 8))(v37, v10);
  v38 = &v28[v36[12]];
  v39 = *(_OWORD *)(v13 - 112);
  *(_OWORD *)v38 = *(_OWORD *)(v13 - 128);
  *((_OWORD *)v38 + 1) = v39;
  *((_QWORD *)v38 + 4) = *(_QWORD *)(v13 - 96);
  v40 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))&v28[v36[13]];
  *v40 = partial apply for closure #2 in View.animatedValue<A, B>(_:default:track:content:);
  v40[1] = v32;
  (*(void (**)(_QWORD, char *, int *))(*(_QWORD *)(v13 - 200) + 16))(*(_QWORD *)(v13 - 208), v28, v36);
  AnimatedValueModifier.init(parent:keyframeView:)(v33, *(_QWORD **)(v13 - 168));
}

uint64_t sub_187774284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(_QWORD *)(v6 - 160);
  MEMORY[0x18D75B4AC](v2, v5, v7, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 152) + 8))(v2, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
}

uint64_t closure #1 in View.animatedValue<A, B>(_:default:track:content:)(void (*a1)(_QWORD *__return_ptr), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t);
  _QWORD v10[5];
  _QWORD v11[5];

  a1(v10);
  static AnimatedValueTrackBuilder.buildExpression(_:)(v11, v10, a4);
  v7 = type metadata accessor for AnimatedValueTrack(0, a4, v5, v6);
  v8 = *(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v10, v7);
  static AnimatedValueTrackBuilder.buildPartialBlock(first:)(v11, a4);
  return ((uint64_t (*)(_QWORD *, uint64_t))v8)(v11, v7);
}

uint64_t closure #2 in View.animatedValue<A, B>(_:default:track:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X5>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v20 - v15;
  v17 = PlaceholderContentView.init()();
  a2(v17, a1);
  static ViewBuilder.buildExpression<A>(_:)(v12, a3, a4);
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, a3);
}

void AnimatedValueModifier.init(parent:keyframeView:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for AnimatedValueModifier();
}

uint64_t sub_1877744AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v5 + *(int *)(a1 + 60);
  v7 = type metadata accessor for AnimatedValueView(0, v3, v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v4, v7);
}

void static AnimatedValueModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  type metadata accessor for PlaceholderContentView();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.pushModifierBody<A>(_:body:)();
  type metadata accessor for AnimatedValueView(0, a5, a7, a9);
  type metadata accessor for AnimatedValueModifier();
}

uint64_t sub_187774604()
{
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  static View.makeDebuggableView(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void closure #1 in static AnimatedValueModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for AnimatedValueModifier();
}

uint64_t sub_187774714(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v5 = v4 + *(int *)(a1 + 60);
  v9[2] = a1;
  v10 = type metadata accessor for AnimatedValueView(0, v3, v2, v1);
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v10, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v11;
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AnimatedValueModifier<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  static AnimatedValueModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5], a5[6]);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AnimatedValueModifier<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueModifier<A, B, C>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t VisualEffect.animatedValue<A, B>(progress:default:track:content:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  void (*v25)(_QWORD *__return_ptr, double);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  _QWORD v32[4];
  _QWORD v33[5];

  v32[3] = a7;
  v32[2] = a10;
  v32[0] = a5;
  v32[1] = a11;
  v15 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v18 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25(v33, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v24, a1, a8);
  v28 = type metadata accessor for AnimatedValueTrack(0, a8, v26, v27);
  AnimatedValueTrack.duration.getter();
  v30 = AnimatedValueTrack.update(value:at:)((uint64_t)v24, v29 * a3);
  ((void (*)(uint64_t, char *))v32[0])(v30, v24);
  VisualEffect.concat<A>(_:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a9);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v24, a8);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v33, v28);
}

uint64_t VisualEffect.animatedValue<A, B>(time:default:track:content:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  void (*v25)(_QWORD *__return_ptr, double);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[4];
  _QWORD v32[5];

  v31[3] = a7;
  v31[2] = a10;
  v31[0] = a5;
  v31[1] = a11;
  v15 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v18 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25(v32, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v24, a1, a8);
  v28 = type metadata accessor for AnimatedValueTrack(0, a8, v26, v27);
  v29 = AnimatedValueTrack.update(value:at:)((uint64_t)v24, a3);
  ((void (*)(uint64_t, char *))v31[0])(v29, v24);
  VisualEffect.concat<A>(_:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a9);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v24, a8);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v32, v28);
}

uint64_t type metadata accessor for AnimatorAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatorAttribute);
}

void type metadata accessor for AnimatedValueModifier()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_187774B48()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in View.animatedValue<A, B>(_:default:track:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in View.animatedValue<A, B>(_:default:track:content:)(a1, *(void (**)(uint64_t, uint64_t))(v2 + 56), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 48), a2);
}

uint64_t outlined copy of AnimatedValuePlaybackConfiguration.Mode(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 0xC0) == 0x80)
    return swift_retain();
  return result;
}

_UNKNOWN **base witness table accessor for View in AnimatedValueView<A, B>()
{
  return &protocol witness table for AnimatedValueView<A, B>;
}

uint64_t type metadata completion function for AnimatedValueView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AnimatedValueView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((((v8 + ((v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
  }
  else
  {
    v12 = *(_QWORD *)a2;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(_BYTE *)(a2 + 16);
    outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(_QWORD *)a2, v13, v14);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v13;
    *(_BYTE *)(a1 + 16) = v14;
    v15 = (a2 + v7 + 17) & ~v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))((a1 + v7 + 17) & ~v7, v15, v5);
    v16 = (v8 + ((a1 + v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8;
    v17 = (v8 + v15) & 0xFFFFFFFFFFFFFFF8;
    v18 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v16 + 24) = v18;
    *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
    (**(void (***)(unint64_t, unint64_t))(v18 - 8))(v16, v17);
    v19 = (_QWORD *)((v17 + 47) & 0xFFFFFFFFFFFFFFF8);
    v20 = v19[1];
    v21 = (_QWORD *)((v16 + 47) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v19;
    v21[1] = v20;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AnimatedValueView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  outlined consume of AnimatedValuePlaybackConfiguration.Mode(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  __swift_destroy_boxed_opaque_existential_1((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  return swift_release();
}

uint64_t outlined consume of AnimatedValuePlaybackConfiguration.Mode(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 0xC0) == 0x80)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for AnimatedValueView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 17 + a1) & ~v10;
  v12 = (v10 + 17 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v14 + 24) = v16;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  (**(void (***)(unint64_t, unint64_t))(v16 - 8))(v14, v15);
  v17 = (_QWORD *)((v15 + 47) & 0xFFFFFFFFFFFFFFF8);
  v18 = v17[1];
  v19 = (_QWORD *)((v14 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v17;
  v19[1] = v18;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnimatedValueView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(_QWORD *)a2, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v11 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v8;
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v9, v10, v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 17 + a1) & ~v13;
  v15 = (v13 + 17 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (uint64_t *)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  v18 = (uint64_t *)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v17, v18);
  v19 = (_QWORD *)(((unint64_t)v17 + 47) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v18 + 47) & 0xFFFFFFFFFFFFFFF8);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AnimatedValueView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 17 + a1) & ~v5;
  v7 = (v5 + 17 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (v8 + v6) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + v7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_OWORD *)v10;
  v12 = *(_OWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_OWORD *)v9 = v11;
  *(_OWORD *)(v9 + 16) = v12;
  *(_OWORD *)((v9 + 47) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v10 + 47) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AnimatedValueView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v9 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v7, v8, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 17 + a1) & ~v11;
  v13 = (v11 + 17 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v15);
  v17 = *(_OWORD *)v16;
  v18 = *(_OWORD *)(v16 + 16);
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
  *(_OWORD *)v15 = v17;
  *(_OWORD *)(v15 + 16) = v18;
  *(_OWORD *)((v15 + 47) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v16 + 47) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatedValueView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 17) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)(((v8 + v13) & 0xFFFFFFFFFFFFF8) + 0x18);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((((v8 + ((v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1877751DC + 4 * byte_187C57F48[v11]))();
  }
}

void storeEnumTagSinglePayload for AnimatedValueView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 17) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 17) & ~(_DWORD)v7)) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_18777537C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187775404);
}

void sub_187775384(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18777538CLL);
  JUMPOUT(0x187775404);
}

void sub_1877753D4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187775404);
}

void sub_1877753DC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187775404);
}

uint64_t sub_1877753E4@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    goto LABEL_6;
  v3 = (v8 + v7 + 17) & a3;
  if (a2 < 0x7FFFFFFF)
  {
    if (a1 < 0)
      JUMPOUT(0x1877753F0);
    *(_QWORD *)(((v6 + v3) & 0xFFFFFFFFFFFFFFF8) + 24) = (a1 - 1);
LABEL_6:
    JUMPOUT(0x187775404);
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v3);
}

void sub_18777541C()
{
  type metadata accessor for AnimatedValueModifier();
}

uint64_t sub_187775458()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD v3[10];

  v0 = type metadata accessor for ModifiedContent();
  v3[0] = v2;
  v3[1] = &protocol witness table for AnimatedValueModifier<A, B, C>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v3);
}

uint64_t sub_1877754A0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for AnimatedValueModifier(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  result = type metadata accessor for AnimatedValueView(319, a1[2], a1[4], a1[6]);
  if (v2 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatedValueModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = v6 + 17;
  v10 = *(_QWORD *)(v5 + 64) + 7;
  v11 = v6 & 0x100000;
  v12 = *a2;
  *a1 = *a2;
  if (v7 > 7
    || v11 != 0
    || (v8 & (v7 + 8)) + ((((v10 + ((v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    a1 = (uint64_t *)(v12 + (v8 & (v7 + 16)));
  }
  else
  {
    v15 = ~v7;
    v16 = v8 & ((unint64_t)a1 + 15);
    v17 = v8 & ((unint64_t)a2 + 15);
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 0x10);
    v29 = v4;
    outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(_QWORD *)v17, v19, v20);
    *(_QWORD *)v16 = v18;
    *(_QWORD *)(v16 + 8) = v19;
    *(_BYTE *)(v16 + 16) = v20;
    v21 = (v9 + v17) & v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))((v9 + v16) & v15, v21, v29);
    v22 = (v10 + ((v9 + v16) & v15)) & 0xFFFFFFFFFFFFFFF8;
    v23 = (v10 + v21) & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v22 + 24) = v24;
    *(_QWORD *)(v22 + 32) = *(_QWORD *)(v23 + 32);
    (**(void (***)(unint64_t, unint64_t))(v24 - 8))(v22, v23);
    v25 = (_QWORD *)((v23 + 47) & 0xFFFFFFFFFFFFFFF8);
    v26 = v25[1];
    v27 = (_QWORD *)((v22 + 47) & 0xFFFFFFFFFFFFFFF8);
    *v27 = *v25;
    v27[1] = v26;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AnimatedValueModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (a1 + (v4 | 7) + 8) & ~(v4 | 7);
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 0x10));
  v6 = (v4 + v5 + 17) & ~v4;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  __swift_destroy_boxed_opaque_existential_1((*(_QWORD *)(v3 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return swift_release();
}

_QWORD *initializeWithCopy for AnimatedValueModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 0x10);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(_QWORD *)v9, v11, v12);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 16) = v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))((v6 + 17 + v8) & ~v6, (v6 + 17 + v9) & ~v6, v4);
  v13 = *(_QWORD *)(v5 + 64) + 7;
  v14 = (v13 + ((v6 + 17 + v8) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + ((v6 + 17 + v9) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v14 + 24) = v16;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  (**(void (***)(unint64_t, unint64_t))(v16 - 8))(v14, v15);
  v17 = (_QWORD *)((v15 + 47) & 0xFFFFFFFFFFFFFFF8);
  v18 = v17[1];
  v19 = (_QWORD *)((v14 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v17;
  v19[1] = v18;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AnimatedValueModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 0x10);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(_QWORD *)v9, v11, v12);
  v13 = *(_QWORD *)v8;
  v14 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  v15 = *(_BYTE *)(v8 + 16);
  *(_BYTE *)(v8 + 16) = v12;
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v13, v14, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))((v6 + 17 + v8) & ~v6, (v6 + 17 + v9) & ~v6, v4);
  v16 = *(_QWORD *)(v5 + 64) + 7;
  v17 = (uint64_t *)((v16 + ((v6 + 17 + v8) & ~v6)) & 0xFFFFFFFFFFFFFFF8);
  v18 = (uint64_t *)((v16 + ((v6 + 17 + v9) & ~v6)) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v17, v18);
  v19 = (_QWORD *)(((unint64_t)v17 + 47) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v18 + 47) & 0xFFFFFFFFFFFFFFF8);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for AnimatedValueModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 | 7) + 8;
  v7 = ((unint64_t)a1 + v6) & ~(v5 | 7);
  v8 = ((unint64_t)a2 + v6) & ~(v5 | 7);
  LOBYTE(v6) = *(_BYTE *)(v8 + 0x10);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = v6;
  v9 = (v5 + 17 + v7) & ~v5;
  v10 = (v5 + 17 + v8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v9, v10);
  v11 = *(_QWORD *)(v4 + 64) + 7;
  v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_OWORD *)v13;
  v15 = *(_OWORD *)(v13 + 16);
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  *(_OWORD *)v12 = v14;
  *(_OWORD *)(v12 + 16) = v15;
  *(_OWORD *)((v12 + 47) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v13 + 47) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for AnimatedValueModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 8;
  v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  v10 = *(_BYTE *)(v9 + 0x10);
  v11 = *(_QWORD *)v8;
  v12 = *(_QWORD *)(v8 + 8);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v13 = *(_BYTE *)(v8 + 16);
  *(_BYTE *)(v8 + 16) = v10;
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v11, v12, v13);
  v14 = (v6 + 17 + v8) & ~v6;
  v15 = (v6 + 17 + v9) & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v14, v15, v4);
  v16 = *(_QWORD *)(v5 + 64) + 7;
  v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v17);
  v19 = *(_OWORD *)v18;
  v20 = *(_OWORD *)(v18 + 16);
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
  *(_OWORD *)v17 = v19;
  *(_OWORD *)(v17 + 16) = v20;
  *(_OWORD *)((v17 + 47) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v18 + 47) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatedValueModifier(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  v9 = v7 + 17;
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((v9 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v7);
    }
    else
    {
      v14 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
  }
  else
  {
    if (((((v7 + 8) & ~v8)
         + ((((*(_QWORD *)(v4 + 64) + (v9 & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v10 = 2;
    else
      v10 = a2 - v6 + 1;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187775BCC + 4 * byte_187C57F57[v12]))();
  }
}

void storeEnumTagSinglePayload for AnimatedValueModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if ((((_DWORD)v7 + 8) & ~(v7 | 7))
       + ((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 17) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) == -16)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X15 }
  }
  if ((((_DWORD)v7 + 8) & ~(v7 | 7))
     + ((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 17) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) != -16)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((v7 + 8) & ~(v7 | 7))+ ((((*(_QWORD *)(v5 + 64) + ((v7 + 17) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_187775D7C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187775DECLL);
}

void sub_187775D84(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187775D8CLL);
  JUMPOUT(0x187775DECLL);
}

void sub_187775D9C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187775DECLL);
}

void sub_187775DA4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187775DECLL);
}

void sub_187775DAC(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x187775DE8);
      JUMPOUT(0x187775DE4);
    }
    JUMPOUT(0x187775DB8);
  }
  JUMPOUT(0x187775DECLL);
}

uint64_t destroy for AnimatorAttribute()
{
  return swift_release();
}

uint64_t initializeWithCopy for AnimatorAttribute(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnimatorAttribute(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnimatorAttribute(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatorAttribute(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)(a1 + 24) >> 57) >> 5) | (4
                                                           * ((*(_QWORD *)(a1 + 24) >> 57) & 0x18 | *(_QWORD *)(a1 + 24) & 7))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnimatorAttribute(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 125;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)(result + 24) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

void base witness table accessor for _AttributeBody in AnimatorAttribute<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

_UNKNOWN **base witness table accessor for ViewModifier in AnimatedValueModifier<A, B, C>()
{
  return &protocol witness table for AnimatedValueModifier<A, B, C>;
}

uint64_t type metadata accessor for AnimatedValueState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueState);
}

uint64_t partial apply for closure #2 in AnimatorAttribute.updateValue()()
{
  uint64_t *v0;

  type metadata accessor for AnimatedValueView(0, v0[2], v0[3], v0[4]);
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t sub_187776054()
{
  return swift_deallocObject();
}

uint64_t sub_187776064()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for AnimatedValueState.EventDrivenState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueState.EventDrivenState);
}

uint64_t sub_1877760A0()
{
  uint64_t v0;

  outlined consume of AnimatedValueState<A>.PausedState<A>(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t outlined consume of AnimatedValueState<A>.PausedState<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 < 0)
    return swift_release();
  return result;
}

uint64_t specialized AnimatedValueState.PausedState.update(at:pauseTime:track:transaction:)(double a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;

  v2 = *(double *)v1;
  if (*(double *)v1 != a1)
  {
    v4 = *(_QWORD *)(v1 + 8);
    if (Transaction.animation.getter())
    {
      if ((Transaction.disablesAnimations.getter() & 1) == 0)
      {
        if (v4 < 0)
        {
          AnimatorState.combine(newAnimation:newInterval:at:in:environment:)();
          result = swift_release();
          v6 = v4 | 0x8000000000000000;
        }
        else
        {
          type metadata accessor for AnimatorState<Double>();
          swift_allocObject();
          swift_retain();
          result = AnimatorState.init(animation:interval:at:in:)();
          v6 = result | 0x8000000000000000;
        }
        goto LABEL_10;
      }
      outlined consume of AnimatedValueState<A>.PausedState<A>(*(uint64_t *)&v2, v4);
      result = swift_release();
    }
    else
    {
      result = outlined consume of AnimatedValueState<A>.PausedState<A>(*(uint64_t *)&v2, v4);
    }
    v6 = 0;
LABEL_10:
    *(double *)v1 = a1;
    *(_QWORD *)(v1 + 8) = v6;
  }
  return result;
}

uint64_t outlined copy of AnimatedValueState<A>.PausedState<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 < 0)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for AnimatedValueState.PausedState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueState.PausedState);
}

void type metadata accessor for AnimatorState<Double>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnimatorState<Double>)
  {
    v0 = type metadata accessor for AnimatorState();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<Double>);
  }
}

uint64_t type metadata accessor for AnimatedValueState.EventDrivenState.Phase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnimatedValueState.EventDrivenState.Phase);
}

uint64_t sub_187776294()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

uint64_t sub_1877762C4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in AnimatorAttribute.updateValue()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in AnimatorAttribute.updateValue()(a1, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16));
}

void partial apply for closure #1 in static AnimatedValueModifier._makeView(modifier:inputs:body:)()
{
  closure #1 in static AnimatedValueModifier._makeView(modifier:inputs:body:)();
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatedValueState.PausedState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of AnimatedValueState<A>.PausedState<A>(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for AnimatedValueState.PausedState(uint64_t *a1)
{
  return outlined consume of AnimatedValueState<A>.PausedState<A>(*a1, a1[1]);
}

uint64_t *assignWithCopy for AnimatedValueState.PausedState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of AnimatedValueState<A>.PausedState<A>(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of AnimatedValueState<A>.PausedState<A>(v5, v6);
  return a1;
}

uint64_t *assignWithTake for AnimatedValueState.PausedState(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of AnimatedValueState<A>.PausedState<A>(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatedValueState.PausedState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)(a1 + 8) >> 57) >> 6) | (2
                                                          * ((*(_QWORD *)(a1 + 8) >> 57) & 0x38 | *(_QWORD *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnimatedValueState.PausedState(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_QWORD *)result = a2 - 127;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t destroy for AnimatedValueState.EventDrivenState()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for AnimatedValueState.EventDrivenState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AnimatedValueState.EventDrivenState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for AnimatedValueState.EventDrivenState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

void DefaultNavigationViewStyle._columnBasedBody(configuration:)(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body : View in DefaultNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body2 : View in DefaultNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultNavigationViewStyle()
{
  return &type metadata for DefaultNavigationViewStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for NavigationViewStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>);
    type metadata accessor for NavigationViewStyleModifier<StackNavigationViewStyle>(255, (unint64_t *)&lazy cache variable for type metadata for NavigationViewStyleModifier<ColumnNavigationViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColumnNavigationViewStyle and conformance ColumnNavigationViewStyle, (uint64_t)&type metadata for ColumnNavigationViewStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>);
  }
}

void type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for NavigationView<_NavigationViewStyleConfiguration.Content>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>);
}

void type metadata accessor for NavigationView<_NavigationViewStyleConfiguration.Content>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for NavigationView<_NavigationViewStyleConfiguration.Content>)
  {
    v4 = type metadata accessor for NavigationView(0, (uint64_t)&type metadata for _NavigationViewStyleConfiguration.Content, (uint64_t)&protocol witness table for _NavigationViewStyleConfiguration.Content, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for NavigationView<_NavigationViewStyleConfiguration.Content>);
  }
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SheetStyleContext>);
    type metadata accessor for NavigationViewStyleModifier<StackNavigationViewStyle>(255, &lazy cache variable for type metadata for NavigationViewStyleModifier<StackNavigationViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackNavigationViewStyle and conformance StackNavigationViewStyle, (uint64_t)&type metadata for StackNavigationViewStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SheetStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SheetStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StackNavigationViewStyle and conformance StackNavigationViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StackNavigationViewStyle and conformance StackNavigationViewStyle;
  if (!lazy protocol witness table cache variable for type StackNavigationViewStyle and conformance StackNavigationViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StackNavigationViewStyle, &type metadata for StackNavigationViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackNavigationViewStyle and conformance StackNavigationViewStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<DocumentStyleContext>);
    type metadata accessor for NavigationViewStyleModifier<StackNavigationViewStyle>(255, &lazy cache variable for type metadata for NavigationViewStyleModifier<PassthroughNavigationViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PassthroughNavigationViewStyle and conformance PassthroughNavigationViewStyle, (uint64_t)&type metadata for PassthroughNavigationViewStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<DocumentStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<DocumentStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PassthroughNavigationViewStyle and conformance PassthroughNavigationViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PassthroughNavigationViewStyle and conformance PassthroughNavigationViewStyle;
  if (!lazy protocol witness table cache variable for type PassthroughNavigationViewStyle and conformance PassthroughNavigationViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PassthroughNavigationViewStyle, &type metadata for PassthroughNavigationViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PassthroughNavigationViewStyle and conformance PassthroughNavigationViewStyle);
  }
  return result;
}

void type metadata accessor for NavigationViewStyleModifier<StackNavigationViewStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for NavigationViewStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ColumnNavigationViewStyle and conformance ColumnNavigationViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnNavigationViewStyle and conformance ColumnNavigationViewStyle;
  if (!lazy protocol witness table cache variable for type ColumnNavigationViewStyle and conformance ColumnNavigationViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColumnNavigationViewStyle, &type metadata for ColumnNavigationViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnNavigationViewStyle and conformance ColumnNavigationViewStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = &protocol witness table for NavigationView<A>;
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    v5[0] = &protocol witness table for NavigationViewStyleModifier<A>;
    v5[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v4, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for UIKitResponderEventBindingBridge()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UIKitResponderEventBindingBridge;
  if (!type metadata singleton initialization cache for UIKitResponderEventBindingBridge)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for UIKitResponderEventBindingBridge()
{
  return swift_initClassMetadata2();
}

uint64_t UIKitResponderEventBindingBridge.init(eventBindingManager:responder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;

  v4 = v3;
  *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEE9D8];
  v6 = objc_allocWithZone((Class)type metadata accessor for UIKitResponderGestureRecognizer());
  swift_retain();
  v7 = (char *)objc_msgSend(v6, sel_init);
  *(_QWORD *)(v4 + 48) = v7;
  v8 = &v7[OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder];
  swift_weakLoadStrong();
  *((_QWORD *)v8 + 1) = a3;
  swift_weakAssign();
  v9 = v7;
  swift_retain();
  specialized UIKitResponderGestureRecognizer.responder.didset();

  swift_release();
  swift_release();
  swift_release();
  swift_retain();
  v10 = EventBindingBridge.init(eventBindingManager:)();
  v11 = *(void **)(v10 + 48);
  swift_weakAssign();
  if (swift_weakLoadStrong())
  {
    v12 = swift_dynamicCastClass();
    if (v12)
    {
      v13 = v12;
      swift_retain_n();
      objc_msgSend(v11, sel_addTarget_action_, v13, sel_flushActions);
      swift_release();
    }
    else
    {
      swift_retain_n();
      v15 = v11;
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain_n();
    v14 = v11;
    swift_release();
  }
  swift_release();

  swift_release_n();
  return v10;
}

uint64_t UIKitResponderEventBindingBridge.eventSources.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;

  type metadata accessor for _ContiguousArrayStorage<EventBindingSource>();
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_187BF9830;
  v2 = *(void **)(v0 + 48);
  v3 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIKitResponderGestureRecognizer and conformance UIKitGestureRecognizer, (uint64_t (*)(uint64_t))type metadata accessor for UIKitResponderGestureRecognizer, (uint64_t)&protocol conformance descriptor for UIKitGestureRecognizer);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  v4 = v2;
  return v1;
}

uint64_t UIKitResponderEventBindingBridge.enqueueAction(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = (_QWORD *)(v2 + 56);
  swift_beginAccess();
  v7 = *(_QWORD **)(v2 + 56);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 56) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v11[5] = v5;
  return swift_endAccess();
}

Swift::Void __swiftcall UIKitResponderEventBindingBridge.flushActions()()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v1 + 16))
  {
    *(_QWORD *)(v0 + 56) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(swift_allocObject() + 16) = v1;
    static Update.enqueueAction(_:)();
    swift_release();
  }
  else if (objc_msgSend(*(id *)(v0 + 48), sel_state) == (id)4)
  {
    objc_msgSend(*(id *)(v0 + 48), sel_reset);
  }
}

uint64_t @objc UIKitResponderEventBindingBridge.flushActions()()
{
  swift_retain();
  UIKitResponderEventBindingBridge.flushActions()();
  return swift_release();
}

uint64_t UIKitResponderEventBindingBridge.reset(eventSource:resetForwardedEventDispatchers:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  type metadata accessor for EventBindingBridge();
  v7 = (void (*)(uint64_t, uint64_t, uint64_t))method lookup function for EventBindingBridge();
  v7(a1, a2, a3);
  swift_beginAccess();
  *(_QWORD *)(v3 + 56) = MEMORY[0x1E0DEE9D8];
  return swift_bridgeObjectRelease();
}

void UIKitResponderEventBindingBridge.__allocating_init(eventBindingManager:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void UIKitResponderEventBindingBridge.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t UIKitResponderEventBindingBridge.__ivar_destroyer()
{
  uint64_t v0;

  return swift_bridgeObjectRelease();
}

uint64_t UIKitResponderEventBindingBridge.__deallocating_deinit()
{

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for UIKitResponderEventBindingBridge()
{
  return type metadata accessor for UIKitResponderEventBindingBridge();
}

ValueMetadata *type metadata accessor for UIKitResponderEventBindingBridge.Factory()
{
  return &type metadata for UIKitResponderEventBindingBridge.Factory;
}

uint64_t protocol witness for static EventBindingBridgeFactory.makeEventBindingBridge(bindingManager:responder:) in conformance UIKitResponderEventBindingBridge.Factory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  type metadata accessor for UIKitResponderEventBindingBridge();
  swift_allocObject();
  swift_retain();
  swift_retain();
  v6 = UIKitResponderEventBindingBridge.init(eventBindingManager:responder:)(a1, a2, a3);
  swift_beginAccess();
  *(_QWORD *)(a1 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIKitResponderEventBindingBridge and conformance UIKitResponderEventBindingBridge, (uint64_t (*)(uint64_t))type metadata accessor for UIKitResponderEventBindingBridge, (uint64_t)&protocol conformance descriptor for UIKitResponderEventBindingBridge);
  return v6;
}

uint64_t sub_18777726C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187777290()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void Viewpoint3D.init(orientation:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.squareAzimuth.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static Viewpoint3D.standard.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.debugDescription.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static Viewpoint3D.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SquareAzimuth.orientation.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SquareAzimuth.init(closestToAzimuth:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SquareAzimuth.Set.rawValue.getter()
{
  _diagnoseUnavailableCodeReached()();
}

SwiftUI::SquareAzimuth::Set __swiftcall SquareAzimuth.Set.init(rawValue:)(Swift::Int rawValue)
{
  SwiftUI::SquareAzimuth::Set result;

  result.rawValue = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::SquareAzimuth::Set __swiftcall SquareAzimuth.Set.init(_:)(SwiftUI::SquareAzimuth a1)
{
  SwiftUI::SquareAzimuth::Set result;

  result.rawValue = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

Swift::Bool __swiftcall SquareAzimuth.Set.contains(_:)(SwiftUI::SquareAzimuth a1)
{
  Swift::Bool result;

  result = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static SquareAzimuth.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SquareAzimuth.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static SquareAzimuth.allCases.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SquareAzimuth.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.fourFacetAzimuth.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.description.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.FourFacetAzimuth.description.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.FourFacetAzimuth.angle.getter()
{
  _diagnoseUnavailableCodeReached()();
}

void static Viewpoint3D.FourFacetAzimuth.back.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.FourFacetAzimuth.init(continuousAngle:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.FourFacetAzimuth.Set.rawValue.getter()
{
  _diagnoseUnavailableCodeReached()();
}

SwiftUI::Viewpoint3D::FourFacetAzimuth::Set __swiftcall Viewpoint3D.FourFacetAzimuth.Set.init(rawValue:)(Swift::Int rawValue)
{
  SwiftUI::Viewpoint3D::FourFacetAzimuth::Set result;

  result.rawValue = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void Viewpoint3D.FourFacetAzimuth.Set.init(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static Viewpoint3D.FourFacetAzimuth.Set.all.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.FourFacetAzimuth.Set.contains(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static Viewpoint3D.FourFacetAzimuth.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.FourFacetAzimuth.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.FourFacetAzimuth.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Viewpoint3D.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type SquareAzimuth.Set and conformance SquareAzimuth.Set()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set;
  if (!lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SquareAzimuth.Set, &type metadata for SquareAzimuth.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set;
  if (!lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SquareAzimuth.Set, &type metadata for SquareAzimuth.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set;
  if (!lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SquareAzimuth.Set, &type metadata for SquareAzimuth.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set;
  if (!lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SquareAzimuth.Set, &type metadata for SquareAzimuth.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SquareAzimuth and conformance SquareAzimuth()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SquareAzimuth and conformance SquareAzimuth;
  if (!lazy protocol witness table cache variable for type SquareAzimuth and conformance SquareAzimuth)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SquareAzimuth, &type metadata for SquareAzimuth);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquareAzimuth and conformance SquareAzimuth);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SquareAzimuth] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [SquareAzimuth] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SquareAzimuth] and conformance [A])
  {
    type metadata accessor for [SquareAzimuth]();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SquareAzimuth] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [SquareAzimuth]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [SquareAzimuth])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [SquareAzimuth]);
  }
}

unint64_t lazy protocol witness table accessor for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set;
  if (!lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Viewpoint3D.FourFacetAzimuth.Set, &type metadata for Viewpoint3D.FourFacetAzimuth.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set;
  if (!lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Viewpoint3D.FourFacetAzimuth.Set, &type metadata for Viewpoint3D.FourFacetAzimuth.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set;
  if (!lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Viewpoint3D.FourFacetAzimuth.Set, &type metadata for Viewpoint3D.FourFacetAzimuth.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set;
  if (!lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Viewpoint3D.FourFacetAzimuth.Set, &type metadata for Viewpoint3D.FourFacetAzimuth.Set);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Viewpoint3D.FourFacetAzimuth and conformance Viewpoint3D.FourFacetAzimuth()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth and conformance Viewpoint3D.FourFacetAzimuth;
  if (!lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth and conformance Viewpoint3D.FourFacetAzimuth)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Viewpoint3D.FourFacetAzimuth, &type metadata for Viewpoint3D.FourFacetAzimuth);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth and conformance Viewpoint3D.FourFacetAzimuth);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Viewpoint3D and conformance Viewpoint3D()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Viewpoint3D and conformance Viewpoint3D;
  if (!lazy protocol witness table cache variable for type Viewpoint3D and conformance Viewpoint3D)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Viewpoint3D, &type metadata for Viewpoint3D);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Viewpoint3D and conformance Viewpoint3D);
  }
  return result;
}

ValueMetadata *type metadata accessor for Viewpoint3D()
{
  return &type metadata for Viewpoint3D;
}

uint64_t storeEnumTagSinglePayload for SquareAzimuth(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1877778B8 + 4 * byte_187C58335[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1877778EC + 4 * byte_187C58330[v4]))();
}

uint64_t sub_1877778EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877778F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1877778FCLL);
  return result;
}

uint64_t sub_187777908(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187777910);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_187777914(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18777791C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SquareAzimuth()
{
  return &type metadata for SquareAzimuth;
}

ValueMetadata *type metadata accessor for SquareAzimuth.Set()
{
  return &type metadata for SquareAzimuth.Set;
}

ValueMetadata *type metadata accessor for Viewpoint3D.FourFacetAzimuth()
{
  return &type metadata for Viewpoint3D.FourFacetAzimuth;
}

ValueMetadata *type metadata accessor for Viewpoint3D.FourFacetAzimuth.Set()
{
  return &type metadata for Viewpoint3D.FourFacetAzimuth.Set;
}

void static SquareAzimuth.Set.right.getter()
{
  static Viewpoint3D.FourFacetAzimuth.Set.all.getter();
}

void static SquareAzimuth.Set.front.getter()
{
  static Viewpoint3D.FourFacetAzimuth.Set.all.getter();
}

void static SquareAzimuth.Set.left.getter()
{
  static Viewpoint3D.FourFacetAzimuth.Set.all.getter();
}

void static SquareAzimuth.Set.back.getter()
{
  static Viewpoint3D.FourFacetAzimuth.Set.all.getter();
}

void static Viewpoint3D.FourFacetAzimuth.right.getter()
{
  static Viewpoint3D.FourFacetAzimuth.back.getter();
}

void static Viewpoint3D.FourFacetAzimuth.front.getter()
{
  static Viewpoint3D.FourFacetAzimuth.back.getter();
}

void static Viewpoint3D.FourFacetAzimuth.left.getter()
{
  static Viewpoint3D.FourFacetAzimuth.back.getter();
}

void static SquareAzimuth.Set.all.getter()
{
  static Viewpoint3D.FourFacetAzimuth.Set.all.getter();
}

void static Viewpoint3D.FourFacetAzimuth.Set.right.getter()
{
  static Viewpoint3D.FourFacetAzimuth.Set.all.getter();
}

void static Viewpoint3D.FourFacetAzimuth.Set.front.getter()
{
  static Viewpoint3D.FourFacetAzimuth.Set.all.getter();
}

void static Viewpoint3D.FourFacetAzimuth.Set.left.getter()
{
  static Viewpoint3D.FourFacetAzimuth.Set.all.getter();
}

void static Viewpoint3D.FourFacetAzimuth.Set.back.getter()
{
  static Viewpoint3D.FourFacetAzimuth.Set.all.getter();
}

uint64_t initializeWithCopy for NavigationSplitParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NavigationSplitParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

uint64_t assignWithTake for NavigationSplitParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

ValueMetadata *type metadata accessor for NavigationSplitParameters()
{
  return &type metadata for NavigationSplitParameters;
}

uint64_t storeEnumTagSinglePayload for NavigationSplitColumn(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_187777B68 + 4 * byte_187C588A5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_187777B9C + 4 * asc_187C588A0[v4]))();
}

uint64_t sub_187777B9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187777BA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187777BACLL);
  return result;
}

uint64_t sub_187777BB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187777BC0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_187777BC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187777BCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationSplitColumn()
{
  return &type metadata for NavigationSplitColumn;
}

uint64_t NavigationSplitParameters.addingWidths(_:opaqueSidebar:sidebarDimmingIgnoresSafeArea:extraWidePrimaryColumn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD v26[4];
  char v27;
  _OWORD v28[2];
  char v29;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v10 = *(_BYTE *)(a1 + 64);
    v11 = *(_OWORD *)(a1 + 48);
    v28[0] = *(_OWORD *)(a1 + 32);
    v28[1] = v11;
    v29 = v10;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v28, 0);
    if (v8 == 1)
    {
      v12 = *(_QWORD *)(a7 + 16);
      if (v12)
      {
        v13 = specialized __RawDictionaryStorage.find<A>(_:)(1);
        if ((v14 & 1) != 0)
        {
          v15 = (_QWORD *)(*(_QWORD *)(a7 + 56) + 40 * v13);
          v16 = v15 + 1;
          v17 = v15 + 2;
          v18 = v15 + 3;
          v19 = (char *)(v15 + 4);
LABEL_8:
          v12 = *v18;
          v20 = *v17;
          v21 = *v16;
          v22 = *v15;
          v23 = *v19;
LABEL_12:
          v26[0] = v22;
          v26[1] = v21;
          v26[2] = v20;
          v26[3] = v12;
          v27 = v23;
          specialized Dictionary.subscript.setter((uint64_t)v26, 1u);
          return a5;
        }
        v22 = 0;
        v20 = 0;
        v12 = 0;
      }
      else
      {
        v22 = 0;
        v20 = 0;
      }
      v23 = 0;
      v21 = 0x1FFFFFFFELL;
      goto LABEL_12;
    }
    v15 = (_QWORD *)(a1 + 72);
    v16 = (uint64_t *)(a1 + 80);
    v17 = (uint64_t *)(a1 + 88);
    v18 = (uint64_t *)(a1 + 96);
    v19 = (char *)(a1 + 104);
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  return a5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NavigationSplitColumn()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_187777D90 + 4 * byte_187C588AA[*v0]))(0x72616265646973, 0xE700000000000000);
}

uint64_t sub_187777D90()
{
  return 0x746E65746E6F63;
}

uint64_t sub_187777DA4()
{
  return 0x6C6961746564;
}

uint64_t sub_187777DB8()
{
  return 0x6B63617473;
}

uint64_t sub_187777DCC()
{
  return 0x657370616C6C6F63;
}

uint64_t sub_187777DE8()
{
  return 0x6F74636570736E69;
}

uint64_t storeEnumTagSinglePayload for NavigationSplitLeadingColumnBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187777E9C + 4 * byte_187C588B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187777ED0 + 4 * byte_187C588B0[v4]))();
}

uint64_t sub_187777ED0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187777ED8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187777EE0);
  return result;
}

uint64_t sub_187777EEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187777EF4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187777EF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187777F00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationSplitLeadingColumnBehavior()
{
  return &type metadata for NavigationSplitLeadingColumnBehavior;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitLeadingColumnBehavior and conformance NavigationSplitLeadingColumnBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitLeadingColumnBehavior and conformance NavigationSplitLeadingColumnBehavior;
  if (!lazy protocol witness table cache variable for type NavigationSplitLeadingColumnBehavior and conformance NavigationSplitLeadingColumnBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitLeadingColumnBehavior, &type metadata for NavigationSplitLeadingColumnBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitLeadingColumnBehavior and conformance NavigationSplitLeadingColumnBehavior);
  }
  return result;
}

uint64_t UIHostingController.persistentSystemOverlaysEnvironmentDidChange(environment:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  __int16 v4;
  __int16 v5;
  unsigned __int8 v6;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v2 = v6;
  result = UIHostingController.persistentSystemOverlays.getter(&v5);
  if (result == 3 || v2 != result)
  {
    *(_BYTE *)(v1 + direct field offset for UIHostingController.persistentSystemOverlays + 2) = v2;
    result = UIHostingController.persistentSystemOverlays.getter(&v4);
    if (HIBYTE(v4) << 8 == 512)
      UIHostingController.updateHomeIndicator(animated:)();
  }
  return result;
}

uint64_t UIHostingController._persistentSystemOverlays.getter()
{
  uint64_t result;
  __int16 v1;
  unsigned __int16 v2;

  UIHostingController.persistentSystemOverlays.getter(&v2);
  result = v2;
  if ((v2 & 0xFF00) == 0x200)
  {
    LODWORD(result) = UIHostingController.persistentSystemOverlays.getter(&v1);
    if (result == 3)
      return 0;
    else
      return result;
  }
  return result;
}

uint64_t sub_1877780DC()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in setNeedsHomeIndicatorUpdate #1 <A>(from:animated:) in UIHostingController.updateHomeIndicator(animated:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setNeedsUpdateOfHomeIndicatorAutoHidden);
}

uint64_t outlined destroy of CoordinateSpaceNameModifier(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t _CoordinateSpaceModifier.name.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _CoordinateSpaceModifier.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_CoordinateSpaceModifier.name.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _CoordinateSpaceModifier.init(name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CoordinateSpaceNameModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CoordinateSpaceNameModifier()
{
  lazy protocol witness table accessor for type CoordinateSpaceNameModifier and conformance CoordinateSpaceNameModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance CoordinateSpaceNameModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double CoordinateSpaceNameTransform.value.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  _OWORD v8[2];
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  Value = AGGraphGetValue();
  v13 = *(_QWORD *)Value;
  v14 = *(_OWORD *)(Value + 8);
  v15 = *(_OWORD *)(Value + 24);
  v10[0] = *(_OWORD *)AGGraphGetValue();
  v3 = swift_retain();
  *(double *)&v4 = MEMORY[0x18D755E9C](v3);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v5, v4));
  v6 = AGGraphGetValue();
  outlined init with copy of CoordinateSpace.Name(v6, (uint64_t)v10);
  if ((v12 & 1) != 0)
  {
    *(_QWORD *)&v8[0] = *(_QWORD *)&v10[0];
    type metadata accessor for CGSize(0);
    AGGraphGetValue();
    ViewTransform.appendSizedSpace(id:size:)();
  }
  else
  {
    v8[0] = v10[0];
    v8[1] = v10[1];
    v9 = v11;
    type metadata accessor for CGSize(0);
    AGGraphGetValue();
    ViewTransform.appendSizedSpace(name:size:)();
    outlined destroy of AnyHashable((uint64_t)v8);
  }
  *(_QWORD *)a1 = v13;
  *(_OWORD *)(a1 + 8) = v14;
  result = *(double *)&v15;
  *(_OWORD *)(a1 + 24) = v15;
  return result;
}

double protocol witness for Rule.value.getter in conformance CoordinateSpaceNameTransform@<D0>(uint64_t a1@<X8>)
{
  return CoordinateSpaceNameTransform.value.getter(a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance CoordinateSpaceNameTransform()
{
  lazy protocol witness table accessor for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform();
  return static AsyncAttribute.flags.getter();
}

uint64_t View.coordinateSpace<A>(name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _CoordinateSpaceModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

_UNKNOWN **base witness table accessor for ViewModifier in _CoordinateSpaceModifier<A>()
{
  return &protocol witness table for _CoordinateSpaceModifier<A>;
}

uint64_t getEnumTagSinglePayload for _CoordinateSpaceModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187778610 + 4 * byte_187C58A60[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for _CoordinateSpaceModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_187778810(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for _CoordinateSpaceModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for _CoordinateSpaceModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t sub_187778870(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for CoordinateSpaceNameModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t destroy for CoordinateSpaceNameModifier(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for CoordinateSpaceNameModifier(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for CoordinateSpaceNameModifier(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of CoordinateSpace.Name(a1);
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
      v4 = *a2;
      v5 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t outlined destroy of CoordinateSpace.Name(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE2C80] - 8) + 8))();
  return a1;
}

_OWORD *assignWithTake for CoordinateSpaceNameModifier(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace.Name((uint64_t)a1);
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  return a1;
}

ValueMetadata *type metadata accessor for CoordinateSpaceNameModifier()
{
  return &type metadata for CoordinateSpaceNameModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in CoordinateSpaceNameModifier()
{
  return &protocol witness table for CoordinateSpaceNameModifier;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceNameModifier and conformance CoordinateSpaceNameModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CoordinateSpaceNameModifier and conformance CoordinateSpaceNameModifier;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceNameModifier and conformance CoordinateSpaceNameModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CoordinateSpaceNameModifier, &type metadata for CoordinateSpaceNameModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceNameModifier and conformance CoordinateSpaceNameModifier);
  }
  return result;
}

uint64_t outlined init with copy of CoordinateSpace.Name(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE2C80] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t specialized static CoordinateSpaceNameModifier._makeViewInputs(modifier:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<CoordinateSpaceNameModifier>, (uint64_t)&type metadata for CoordinateSpaceNameModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _ViewInputs.transform.getter();
  _ViewInputs.animatedPosition()();
  _ViewInputs.animatedCGSize()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform();
  Attribute.init<A>(body:value:flags:update:)();
  return _ViewInputs.transform.setter();
}

ValueMetadata *type metadata accessor for CoordinateSpaceNameTransform()
{
  return &type metadata for CoordinateSpaceNameTransform;
}

void ControlGroup.init<A, B>(content:label:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(double);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v21 = a6;
  v22 = a7;
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = *(_QWORD *)(v12 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v19(v16);
  a3(v20);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a8, v18, a4);
  v23 = a4;
  v24 = a5;
  v25 = v21;
  v26 = v22;
  type metadata accessor for LabeledControlGroupContent();
}

void sub_187778E24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1 + *(int *)(a1 + 52), v7, v5);
  *(_QWORD *)(v8 - 112) = v6;
  *(_QWORD *)(v8 - 104) = v5;
  *(_QWORD *)(v8 - 96) = v4;
  *(_QWORD *)(v8 - 88) = v2;
  type metadata accessor for LabeledControlGroupContent();
}

uint64_t sub_187778E50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabeledControlGroupContent<A, B>, a1);
  result = type metadata accessor for ControlGroup(0, a1, v3, v4);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = 1;
  return result;
}

void ControlGroup<>.init(_:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ControlGroup.init(content:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t result;

  a1();
  result = type metadata accessor for ControlGroup(0, a2, a3, v7);
  *(_BYTE *)(a4 + *(int *)(result + 36)) = 0;
  return result;
}

void ControlGroup.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187778F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v16;

  v5 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v5, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = type metadata accessor for _ConditionalContent();
  *(_QWORD *)(v4 - 200) = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v16 - v11;
  if ((*(_BYTE *)(*(_QWORD *)(v4 - 208) + *(int *)(v3 + 36)) & 1) == 0)
    ControlGroup.resolvedBody.getter();
  v13 = *(_QWORD *)(v4 - 192);
  static ViewBuilder.buildExpression<A>(_:)(*(_QWORD *)(v4 - 208), v1, v13);
  static ViewBuilder.buildBlock<A>(_:)(v2, v1, v0);
  *(_QWORD *)(v4 - 128) = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
  *(_QWORD *)(v4 - 120) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v4 - 128);
  static ViewBuilder.buildEither<A, B>(second:)(v0, v5, v1);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 216) + 8);
  v14(v0, v1);
  v14(v2, v1);
  *(_QWORD *)(v4 - 144) = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
  *(_QWORD *)(v4 - 136) = &protocol witness table for StaticSourceWriter<A, B>;
  *(_QWORD *)(v4 - 160) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v4 - 144);
  *(_QWORD *)(v4 - 152) = v13;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v9, v4 - 160);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v12, v9, *(_QWORD *)(v4 - 184));
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v4 - 200) + 8))(v12, v9);
}

void ControlGroup.resolvedBody.getter()
{
  lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
  lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, (uint64_t)partial apply for closure #1 in LabelGroup.body.getter);
}

void LabeledControlGroupContent.body.getter()
{
  lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

void sub_1877792D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v11 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 288) = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  *(_QWORD *)(v10 - 328) = (char *)&a9 - v13;
  v14 = *(_QWORD *)(v9 + 24);
  v15 = lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label();
  *(_QWORD *)(v10 - 312) = v15;
  v16 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v10 - 120) = &type metadata for ControlGroupStyleConfiguration.Label;
  *(_QWORD *)(v10 - 112) = v14;
  *(_QWORD *)(v10 - 104) = v15;
  *(_QWORD *)(v10 - 96) = v16;
  type metadata accessor for StaticSourceWriter();
}

void sub_187779358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v15 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 296) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v14 - 320) = (char *)&a9 - v19;
  *(_QWORD *)(v14 - 192) = v12;
  *(_QWORD *)(v14 - 184) = v13;
  *(_QWORD *)(v14 - 176) = v11;
  *(_QWORD *)(v14 - 168) = v9;
  *(_QWORD *)(v14 - 160) = v10;
  lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, (uint64_t)partial apply for closure #1 in LabeledToolbarItemGroupContent.body.getter);
}

void sub_18777941C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 - 256) = v4;
  *(_QWORD *)(v7 - 248) = v6;
  *(_QWORD *)(v7 - 240) = v2;
  *(_QWORD *)(v7 - 232) = v0;
  *(_QWORD *)(v7 - 224) = v5;
  *(_QWORD *)(v7 - 136) = v3;
  *(_QWORD *)(v7 - 128) = &protocol witness table for StaticSourceWriter<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v7 - 136);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ControlGroupStyleConfiguration.Label, (uint64_t)partial apply for closure #2 in LabeledControlGroupContent.body.getter);
}

uint64_t sub_18777948C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 288) + 8))(v0, v1);
  *(_QWORD *)(v7 - 152) = v5;
  *(_QWORD *)(v7 - 144) = v3;
  v8 = MEMORY[0x18D75FFDC](v4, v2, v7 - 152);
  v9 = *(_QWORD *)(v7 - 320);
  static ViewBuilder.buildExpression<A>(_:)(v6, v2, v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 296) + 8);
  v10(v6, v2);
  static ViewBuilder.buildBlock<A>(_:)(v9, v2, *(_QWORD *)(v7 - 280));
  return v10(v9, v2);
}

void closure #2 in LabeledControlGroupContent.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for LabeledControlGroupContent();
}

uint64_t sub_1877795A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 52), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

void type metadata accessor for LabeledControlGroupContent()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for ControlGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ControlGroup);
}

unint64_t lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlGroupStyleConfiguration.Content, &type metadata for ControlGroupStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlGroupStyleConfiguration.Content, &type metadata for ControlGroupStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlGroupStyleConfiguration.Label, &type metadata for ControlGroupStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlGroupStyleConfiguration.Label, &type metadata for ControlGroupStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label);
  }
  return result;
}

uint64_t partial apply for closure #2 in LabeledControlGroupContent.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in LabeledControlGroupContent.body.getter);
}

void ControlGroup.init<A>(_:image:content:)(uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;

  v9 = type metadata accessor for Label<Text, Image>();
  v10 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  ControlGroup.init<A, B>(content:label:)(a1, a2, (void (*)(uint64_t))partial apply for closure #1 in Toggle<>.init<A>(_:image:sources:isOn:), a3, v9, a5, v10, a4);
}

uint64_t sub_18777972C()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void ControlGroup.init<A, B>(_:image:content:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;

  v10 = type metadata accessor for Label<Text, Image>();
  v11 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  ControlGroup.init<A, B>(content:label:)(a1, a2, (void (*)(uint64_t))partial apply for closure #1 in ControlGroup.init<A, B>(_:image:content:), a3, v10, a4, v11, a5);
}

uint64_t sub_187779800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v2, v0);
}

double partial apply for closure #1 in ControlGroup.init<A, B>(_:image:content:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  double result;

  *(_QWORD *)&result = closure #2 in Menu<>.init<A>(_:image:content:)(v1[6], v1[7], v1[3], a1).n128_u64[0];
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ControlGroup<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in LabeledControlGroupContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for ControlGroup()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ControlGroup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xFE)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(unsigned __int8 *)(v7 + a1);
      if (v15 >= 2)
        return v15 - 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v7 == -1)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187779A04 + 4 * byte_187C58D50[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for ControlGroup(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t getEnumTagSinglePayload for LabeledControlGroupContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187779D14 + 4 * byte_187C58D5E[v17 - 1]))();
}

void storeEnumTagSinglePayload for LabeledControlGroupContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_187779F90()
{
  lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187779FC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[12];

  v1 = type metadata accessor for ModifiedContent();
  v2 = type metadata accessor for _ConditionalContent();
  v6[0] = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
  v6[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v4 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6);
  v5 = v0;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, &v4);
}

void sub_18777A044()
{
  lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

void sub_18777A080()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_18777A0B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[12];

  v1 = type metadata accessor for ModifiedContent();
  v5[0] = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
  v5[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v2 = MEMORY[0x1E0CE2E70];
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v5);
  v4[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](v2, v1, v4);
}

uint64_t storeEnumTagSinglePayload for ControlGroup.BodyMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18777A168 + 4 * byte_187C58D71[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18777A19C + 4 * byte_187C58D6C[v4]))();
}

uint64_t sub_18777A19C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18777A1A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18777A1ACLL);
  return result;
}

uint64_t sub_18777A1B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18777A1C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18777A1C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18777A1CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for ControlGroup.BodyMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ControlGroup.BodyMode);
}

void base witness table accessor for Equatable in ControlGroup<A>.BodyMode()
{
  JUMPOUT(0x18D75FFDCLL);
}

void ControlWidgetConfigurationModifier<>.body(content:)()
{
  specialized ControlWidgetConfigurationModifier<>.body(content:)();
}

uint64_t static EmptyControlWidgetConfiguration._makeWidgetControlConfiguration(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 14);
  v7 = *a2;
  v8 = v3;
  v9 = v4;
  v10 = *(_OWORD *)(a2 + 3);
  v11 = *(_OWORD *)(a2 + 5);
  v12 = v5;
  return a3(a1, &v7);
}

void protocol witness for ControlWidgetConfigurationModifier.body(content:) in conformance EmptyControlWidgetConfiguration()
{
  specialized ControlWidgetConfigurationModifier.controlBodyError()();
}

uint64_t ControlWidgetConfiguration.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return ModifiedContent.init(content:modifier:)();
}

uint64_t static ModifiedContent<>._makeWidgetControlConfiguration(control:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  _BYTE v28[12];

  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v14 = a2[2];
  v15 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = *a1;
  v11 = v21;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  v20 = *(_OWORD *)(a2 + 5);
  v16 = a2[3];
  v17 = a2[4];
  _GraphValue.subscript.getter();
  v21 = v12;
  v22 = v13;
  v23 = v14;
  v24 = v16;
  v25 = v17;
  v26 = v20;
  v27 = v15;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  *(_QWORD *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_DWORD *)(v18 + 48) = v11;
  (*(void (**)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a6 + 32))(v28, &v21, partial apply for closure #2 in static ModifiedContent<>._makeScene(scene:inputs:), v18, a4, a6);
  return swift_release();
}

void protocol witness for ControlWidgetConfiguration.body.getter in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  specialized ModifiedContent<>.body.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t protocol witness for static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ModifiedContent<>._makeWidgetControlConfiguration(control:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t static ModifiedContent<>._makeWidgetControlConfiguration(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t);
  __int128 v23;
  int v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  _BYTE v33[12];

  v15 = *a2;
  v16 = *((_DWORD *)a2 + 2);
  v17 = a2[2];
  v24 = *((_DWORD *)a2 + 14);
  LODWORD(v26) = *a1;
  v14 = v26;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  v23 = *(_OWORD *)(a2 + 5);
  v18 = a2[3];
  v19 = a2[4];
  _GraphValue.subscript.getter();
  v26 = v15;
  v27 = v16;
  v28 = v17;
  v29 = v18;
  v30 = v19;
  v31 = v23;
  v32 = v24;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a5;
  *(_QWORD *)(v20 + 24) = a6;
  *(_QWORD *)(v20 + 32) = a7;
  *(_QWORD *)(v20 + 40) = a8;
  *(_DWORD *)(v20 + 48) = v14;
  *(_QWORD *)(v20 + 56) = a3;
  *(_QWORD *)(v20 + 64) = a4;
  v21 = *(void (**)(_BYTE *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32);
  swift_retain();
  v21(v33, &v26, partial apply for closure #2 in static ModifiedContent<>._makeScene(modifier:inputs:body:), v20, a6, a8);
  return swift_release();
}

void protocol witness for ControlWidgetConfigurationModifier.body(content:) in conformance <> ModifiedContent<A, B>()
{
  specialized ControlWidgetConfigurationModifier<>.body(content:)();
}

uint64_t protocol witness for static ControlWidgetConfigurationModifier._makeWidgetControlConfiguration(modifier:inputs:body:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ModifiedContent<>._makeWidgetControlConfiguration(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), *(_QWORD *)(a6 - 8), *(_QWORD *)(a6 - 16));
}

uint64_t static ControlWidgetConfigurationModifier_Content._makeWidgetControlConfiguration(control:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD);
  uint64_t v11;
  void (*v13)(uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void (*v20)(uint64_t, _QWORD);
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_DWORD *)(a2 + 56);
  v20 = *(void (**)(uint64_t, _QWORD))a2;
  v21 = v4;
  v22 = v5;
  v23 = *(_OWORD *)(a2 + 24);
  v24 = v6;
  v25 = v7;
  v26 = v8;
  v9 = type metadata accessor for ControlWidgetConfigurationModifier_Content.BodyInput(0, a3, a4, a4);
  type metadata accessor for (_:_:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetConfigurationModifier_Content<A>.BodyInput, v9);
  _SceneInputs.popLast<A, B>(_:)();
  v10 = v13;
  if (v13)
  {
    v13 = v20;
    LODWORD(v14) = v21;
    v15 = v22;
    v16 = v23;
    v17 = v24;
    v18 = v25;
    v19 = v26;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v11 = swift_bridgeObjectRetain();
    v10(v11, &v13);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v10);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    PreferencesOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t protocol witness for static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:) in conformance ControlWidgetConfigurationModifier_Content<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ControlWidgetConfigurationModifier_Content._makeWidgetControlConfiguration(control:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void specialized ControlWidgetConfigurationModifier.controlBodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x8000000187BE84A0;
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized ControlWidgetConfigurationModifier<>.body(content:)()
{
  specialized ControlWidgetConfigurationModifier.controlBodyError()();
}

uint64_t sub_18777A934()
{
  return swift_deallocObject();
}

uint64_t sub_18777A944()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for ControlWidgetConfigurationModifier_Content.BodyInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ControlWidgetConfigurationModifier_Content.BodyInput);
}

_UNKNOWN **associated type witness table accessor for ControlWidgetConfigurationModifier.Body : ControlWidgetConfiguration in EmptyControlWidgetConfiguration()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of ControlWidgetConfigurationModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static ControlWidgetConfigurationModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t type metadata accessor for ControlWidgetConfigurationModifier_Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ControlWidgetConfigurationModifier_Content);
}

void base witness table accessor for PropertyKey in ControlWidgetConfigurationModifier_Content<A>.BodyInput()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t instantiation function for generic protocol witness table for ControlWidgetConfigurationModifier_Content<A>.BodyInput(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetConfigurationModifier_Content<A>.BodyInput);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t one-time initialization function for clarityUINavigationTransition()
{
  uint64_t result;

  result = static Animation.coreAnimationDefault(duration:)();
  static Animation.clarityUINavigationTransition = result;
  return result;
}

uint64_t static Animation.clarityUINavigationTransition.getter()
{
  if (one-time initialization token for clarityUINavigationTransition != -1)
    swift_once();
  return swift_retain();
}

uint64_t PrimaryContentStyle._apply(to:)()
{
  return HierarchicalShapeStyle._apply(to:)();
}

_BYTE *static PrimaryContentStyle._apply(to:)(_BYTE *result)
{
  *result = 1;
  return result;
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance PrimaryContentStyle()
{
  return HierarchicalShapeStyle._apply(to:)();
}

uint64_t SecondaryContentStyle._apply(to:)()
{
  return HierarchicalShapeStyle._apply(to:)();
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance SecondaryContentStyle()
{
  return HierarchicalShapeStyle._apply(to:)();
}

uint64_t TertiaryContentStyle._apply(to:)()
{
  return HierarchicalShapeStyle._apply(to:)();
}

uint64_t QuaternaryContentStyle._apply(to:)()
{
  return HierarchicalShapeStyle._apply(to:)();
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance QuaternaryContentStyle()
{
  return HierarchicalShapeStyle._apply(to:)();
}

void __swiftcall QuinaryContentStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
}

void QuinaryContentStyle._apply(to:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

_UNKNOWN **base witness table accessor for ShapeStyle in PrimaryContentStyle()
{
  return &protocol witness table for PrimaryContentStyle;
}

_UNKNOWN **base witness table accessor for ShapeStyle in SecondaryContentStyle()
{
  return &protocol witness table for SecondaryContentStyle;
}

_UNKNOWN **base witness table accessor for ShapeStyle in TertiaryContentStyle()
{
  return &protocol witness table for TertiaryContentStyle;
}

_UNKNOWN **base witness table accessor for ShapeStyle in QuaternaryContentStyle()
{
  return &protocol witness table for QuaternaryContentStyle;
}

_UNKNOWN **base witness table accessor for ShapeStyle in QuinaryContentStyle()
{
  return &protocol witness table for QuinaryContentStyle;
}

ValueMetadata *type metadata accessor for PrimaryContentStyle()
{
  return &type metadata for PrimaryContentStyle;
}

ValueMetadata *type metadata accessor for SecondaryContentStyle()
{
  return &type metadata for SecondaryContentStyle;
}

ValueMetadata *type metadata accessor for TertiaryContentStyle()
{
  return &type metadata for TertiaryContentStyle;
}

ValueMetadata *type metadata accessor for QuaternaryContentStyle()
{
  return &type metadata for QuaternaryContentStyle;
}

ValueMetadata *type metadata accessor for QuinaryContentStyle()
{
  return &type metadata for QuinaryContentStyle;
}

void static QuinaryContentStyle._apply(to:)()
{
  QuinaryContentStyle._apply(to:)();
}

ValueMetadata *type metadata accessor for SelectionPlatformItemListFlags()
{
  return &type metadata for SelectionPlatformItemListFlags;
}

ValueMetadata *type metadata accessor for AllPlatformItemListFlags()
{
  return &type metadata for AllPlatformItemListFlags;
}

ValueMetadata *type metadata accessor for TextPlatformItemListFlags()
{
  return &type metadata for TextPlatformItemListFlags;
}

ValueMetadata *type metadata accessor for LayoutPlatformItemListFlags()
{
  return &type metadata for LayoutPlatformItemListFlags;
}

ValueMetadata *type metadata accessor for PlatformItemListFlagsInput()
{
  return &type metadata for PlatformItemListFlagsInput;
}

_DWORD *protocol witness for OptionSet.init(rawValue:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance PlatformItemListFlagsSet(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance PlatformItemListFlagsSet(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance PlatformItemListFlagsSet@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance PlatformItemListFlagsSet(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance PlatformItemListFlagsSet(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance PlatformItemListFlagsSet(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance PlatformItemListFlagsSet(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance PlatformItemListFlagsSet(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance PlatformItemListFlagsSet(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance PlatformItemListFlagsSet()
{
  _DWORD *v0;

  return *v0 == 0;
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance PlatformItemListFlagsSet(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance PlatformItemListFlagsSet@<X0>(_DWORD *a1@<X8>)
{
  int v2;
  uint64_t result;

  v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for static PlatformItemListFlags.flags.getter in conformance TextPlatformItemListFlags()
{
  return 4;
}

uint64_t protocol witness for static PlatformItemListFlags.flags.getter in conformance LabelPlatformItemListFlags()
{
  return 22;
}

uint64_t protocol witness for static PlatformItemListFlags.flags.getter in conformance ActionPlatformItemListFlags()
{
  return 13;
}

uint64_t protocol witness for static PlatformItemListFlags.flags.getter in conformance SearchTokenPlatformItemListFlags()
{
  return 15;
}

uint64_t protocol witness for static PlatformItemListFlags.flags.getter in conformance AllPlatformItemListFlags()
{
  return 0xFFFFFFFFLL;
}

ValueMetadata *type metadata accessor for ActionPlatformItemListFlags()
{
  return &type metadata for ActionPlatformItemListFlags;
}

ValueMetadata *type metadata accessor for LabelPlatformItemListFlags()
{
  return &type metadata for LabelPlatformItemListFlags;
}

ValueMetadata *type metadata accessor for IncludesStyledTextModifier()
{
  return &type metadata for IncludesStyledTextModifier;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IncludesStyledText()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IncludesStyledText and conformance IncludesStyledText();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IncludesStyledText()
{
  lazy protocol witness table accessor for type IncludesStyledText and conformance IncludesStyledText();
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IncludesStyledTextModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IncludesStyledTextModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance IncludesStyledTextModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IncludesStyledTextModifier()
{
  lazy protocol witness table accessor for type IncludesStyledText and conformance IncludesStyledText();
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for ViewModifier in IncludesStyledTextModifier()
{
  return &protocol witness table for IncludesStyledTextModifier;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet;
  if (!lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListFlagsSet, &type metadata for PlatformItemListFlagsSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet;
  if (!lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListFlagsSet, &type metadata for PlatformItemListFlagsSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet;
  if (!lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListFlagsSet, &type metadata for PlatformItemListFlagsSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet;
  if (!lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListFlagsSet, &type metadata for PlatformItemListFlagsSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListFlagsSet and conformance PlatformItemListFlagsSet);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchTokenPlatformItemListFlags()
{
  return &type metadata for SearchTokenPlatformItemListFlags;
}

ValueMetadata *type metadata accessor for IncludesStyledText()
{
  return &type metadata for IncludesStyledText;
}

ValueMetadata *type metadata accessor for ToolbarPlatformItemListFlags()
{
  return &type metadata for ToolbarPlatformItemListFlags;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IncludesStyledText()
{
  return &protocol witness table for IncludesStyledText;
}

id LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)@<X0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  id result;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v13 = *(_OWORD *)(a2 + 5);
  v14 = *(_OWORD *)(a2 + 3);
  v12 = *(_OWORD *)(a2 + 7);
  v8 = a2[9];
  v9 = *((_DWORD *)a2 + 20);
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    v11 = *MEMORY[0x1E0CFED28];
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 8) = a1;
    *(_QWORD *)(a3 + 16) = v5;
    *(_DWORD *)(a3 + 24) = v6;
    *(_QWORD *)(a3 + 32) = v7;
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 56) = v13;
    *(_OWORD *)(a3 + 72) = v12;
    *(_QWORD *)(a3 + 88) = v8;
    *(_DWORD *)(a3 + 96) = v9;
    *(_DWORD *)(a3 + 100) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, id *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  _OWORD *v75;
  unsigned int (*v76)(id *, uint64_t, uint64_t);
  id *v77;
  id v78;
  id v79;
  uint64_t v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  void **v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  int64_t *v102;
  int64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t *v111;
  char *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(_QWORD);
  uint64_t v124;
  void *v125;
  id v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  _QWORD *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t result;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  int64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  void **v180;
  id *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  int *v186;
  __int128 v187;
  void (*v188)(char *, uint64_t, uint64_t, uint64_t);
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD v198[23];
  uint64_t v199[3];
  int v200;
  char v201;
  char v202;
  char v203;
  id v204;
  int64_t *v205;
  __int128 v206;
  uint64_t v207;

  v167 = a2;
  v168 = a4;
  type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v164 = (uint64_t)&v153 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v192 = (char *)&v153 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v165 = (uint64_t)&v153 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v191 = (char *)&v153 - v19;
  v20 = type metadata accessor for PlatformItemList.Item();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v190 = (char *)&v153 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  v196 = *((_QWORD *)v24 - 1);
  MEMORY[0x1E0C80A78](v24, v25);
  v180 = (void **)((char *)&v153 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v27, v28);
  v193 = (uint64_t)&v153 - v29;
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1E0C80A78](v30, v31);
  v163 = (uint64_t)&v153 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v155 = (uint64_t *)((char *)&v153 - v35);
  type metadata accessor for PlatformItemList.Item?();
  MEMORY[0x1E0C80A78](v36, v37);
  v189 = (char *)&v153 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v40);
  v186 = (int *)((char *)&v153 - v41);
  MEMORY[0x1E0C80A78](v42, v43);
  v154 = (uint64_t)&v153 - v44;
  MEMORY[0x1E0C80A78](v45, v46);
  v185 = (uint64_t)&v153 - v47;
  MEMORY[0x1E0C80A78](v48, v49);
  v51 = (id *)((char *)&v153 - v50);
  MEMORY[0x1E0C80A78](v52, v53);
  v55 = (char *)&v153 - v54;
  MEMORY[0x1E0C80A78](v56, v57);
  v59 = (id *)((char *)&v153 - v58);
  v60 = *a3;
  v175 = a3[1];
  v176 = v60;
  v61 = a3[2];
  v173 = a3[3];
  v174 = v61;
  v62 = a3[4];
  v171 = a3[5];
  v172 = v62;
  v63 = a3[6];
  v169 = a3[7];
  v170 = v63;
  *a5 = 0;
  a5[1] = 0;
  v64 = (uint64_t)a5 + v24[6];
  v65 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  v157 = *(_QWORD *)(v65 - 8);
  v66 = *(uint64_t **)(v157 + 56);
  v177 = v65;
  v178 = (uint64_t *)v64;
  v184 = v66;
  ((void (*)(uint64_t, uint64_t, uint64_t))v66)(v64, 1, 1);
  v166 = v24[7];
  *(id *)((char *)a5 + v166) = 0;
  v67 = (uint64_t)a5 + v24[8];
  v68 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  v158 = *(_QWORD *)(v68 - 8);
  v159 = v68;
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 56);
  v160 = v67;
  v69(v67, 1, 1);
  v70 = (char *)a5 + v24[9];
  v70[48] = 0;
  *((_OWORD *)v70 + 1) = 0u;
  *((_OWORD *)v70 + 2) = 0u;
  v161 = v70;
  *(_OWORD *)v70 = 0u;
  v71 = (uint64_t)a5 + v24[10];
  v72 = type metadata accessor for URL();
  v162 = *(_QWORD *)(v72 - 8);
  v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56);
  v182 = v71;
  v195 = v72;
  v188 = v73;
  ((void (*)(uint64_t, uint64_t, uint64_t))v73)(v71, 1, 1);
  v74 = v24[11];
  v181 = a5;
  v75 = (_OWORD *)((char *)a5 + v74);
  v187 = xmmword_187BF9840;
  *v75 = xmmword_187BF9840;
  v75[1] = 0u;
  v75[2] = 0u;
  v75[3] = 0u;
  v179 = (uint64_t *)((char *)a5 + v74);
  v183 = a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
  v194 = v21;
  v76 = *(unsigned int (**)(id *, uint64_t, uint64_t))(v21 + 48);
  v197 = v20;
  if (v76(v59, 1, v20) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
    v77 = v181;
  }
  else
  {
    v78 = *v59;
    v79 = *v59;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v77 = v181;
    if (v78)
    {

      *v77 = v78;
    }
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v183, (uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
  if (v76((id *)v55, 1, v197) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
    v80 = v197;
  }
  else
  {
    v81 = (void *)*((_QWORD *)v55 + 1);
    v82 = v81;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v80 = v197;
    if (v81)
    {

      v77[1] = v81;
    }
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v183, (uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
  if (v76(v51, 1, v80) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
  }
  else
  {
    v84 = (uint64_t)v51[31];
    v83 = (uint64_t)v51[32];
    v86 = v51[33];
    v85 = v51[34];
    v87 = v51[35];
    v156 = (int64_t *)v51[36];
    outlined copy of Image.NamedResolved?(v84, v83, v86);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    if (v83)
    {
      v199[0] = v84;
      v199[1] = v83;
      v185 = (uint64_t)v86;
      v199[2] = (uint64_t)v86;
      v200 = (int)v85;
      v201 = BYTE4(v85) & 1;
      v202 = BYTE5(v85);
      v203 = BYTE6(v85) & 1;
      v204 = v87;
      v205 = v156;
      v88 = v154;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v183, v154, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
      if (v76((id *)v88, 1, v197) == 1)
      {
        swift_bridgeObjectRetain();
        outlined copy of Image.Location((id)v185);
        swift_retain();
        swift_retain();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v88, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
        _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v198);
        v89 = MEMORY[0x1E0CE7280];
      }
      else
      {
        v99 = MEMORY[0x1E0CE7280];
        outlined init with take of Image.Resolved?(v88 + 64, (uint64_t)v198, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
        outlined copy of Image.NamedResolved?(v84, v83, (void *)v185);
        outlined retain of Image.Resolved?((uint64_t)v198, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v88, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        v89 = v99;
        v77 = v181;
      }
      outlined init with take of Image.Resolved?((uint64_t)v198, (uint64_t)&v206, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v89);
      v93 = v179;
      outlined init with take of Image.Resolved?((uint64_t)&v206, (uint64_t)v198, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
      v100 = v155;
      WidgetAuxiliaryViewMetadata.Graphic.Named.init(_:_:)(v199, (uint64_t)v198, v155);
      outlined consume of Image.NamedResolved?(v84, v83, (void *)v185);
      v101 = v177;
      swift_storeEnumTagMultiPayload();
      ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v184)(v100, 0, 1, v101);
      v95 = v178;
      outlined assign with take of WeakBox<Swift.AnyObject>((uint64_t)v100, (uint64_t)v178, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
      v91 = v197;
      v94 = (uint64_t)v186;
      goto LABEL_20;
    }
  }
  v90 = v185;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v183, v185, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
  v91 = v197;
  v92 = v76((id *)v90, 1, v197);
  v93 = v179;
  if (v92 == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v90, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
    v94 = (uint64_t)v186;
    v95 = v178;
LABEL_20:
    v97 = v180;
    goto LABEL_21;
  }
  v96 = PlatformItemList.Item.image.getter();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v90, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  v94 = (uint64_t)v186;
  v95 = v178;
  v97 = v180;
  if (v96)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v178, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    *v95 = v96;
    v98 = v177;
    swift_storeEnumTagMultiPayload();
    ((void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))v184)(v95, 0, 1, v98);
  }
LABEL_21:
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v183, v94, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
  if (v76((id *)v94, 1, v91) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v94, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
LABEL_32:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v183, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
    v117 = v167;
    v118 = v168;
    v104 = v196;
    goto LABEL_34;
  }
  v102 = *(int64_t **)(v94 + 616);
  swift_bridgeObjectRetain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v94, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if (!v102)
    goto LABEL_32;
  v103 = v102[2];
  v104 = v196;
  if (v103)
  {
    v186 = v24;
    v198[0] = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v103, 0);
    v105 = (*(unsigned __int8 *)(v194 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80);
    v156 = v102;
    v106 = (uint64_t)v102 + v105;
    v107 = *(_QWORD *)(v194 + 72);
    v184 = &v207;
    v185 = v107;
    v109 = (uint64_t)v189;
    v108 = (uint64_t)v190;
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v106, v108, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v108, v109, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v194 + 56))(v109, 0, 1, v197);
      v110 = v191;
      v188(v191, 1, 1, v195);
      v206 = v187;
      v111 = v184;
      *(_OWORD *)v184 = 0u;
      *((_OWORD *)v111 + 1) = 0u;
      *((_OWORD *)v111 + 2) = 0u;
      v112 = v192;
      (*(void (**)(char *, uint64_t, uint64_t, int *))(v104 + 56))(v192, 1, 1, v186);
      WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)(v109, v110, &v206, v112);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v108, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v113 = (unint64_t *)v198[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v113[2] + 1, 1);
        v113 = (unint64_t *)v198[0];
      }
      v115 = v113[2];
      v114 = v113[3];
      if (v115 >= v114 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v114 > 1, v115 + 1, 1);
        v113 = (unint64_t *)v198[0];
      }
      v113[2] = v115 + 1;
      v104 = v196;
      outlined init with take of TableCellFormula(v193, (uint64_t)v113+ ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80))+ *(_QWORD *)(v196 + 72) * v115, type metadata accessor for WidgetAuxiliaryViewMetadata);
      v106 += v185;
      --v103;
    }
    while (v103);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v183, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
    swift_bridgeObjectRelease();
    v77 = v181;
    v116 = v166;
    swift_bridgeObjectRelease();
    *(id *)((char *)v77 + v116) = v113;
    v93 = v179;
    v97 = v180;
    v24 = v186;
    v117 = v167;
    v118 = v168;
    v95 = v178;
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v183, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item?);
    swift_bridgeObjectRelease();
    v117 = v167;
    v118 = v168;
  }
LABEL_34:
  outlined assign with take of WeakBox<Swift.AnyObject>(v117, v182, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(*v93, v93[1]);
  v119 = v175;
  *v93 = v176;
  v93[1] = v119;
  v120 = v173;
  v93[2] = v174;
  v93[3] = v120;
  v121 = v171;
  v93[4] = v172;
  v93[5] = v121;
  v122 = v169;
  v93[6] = v170;
  v93[7] = v122;
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v104 + 48))(v118, 1, v24) == 1)
  {
    v123 = (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?;
    v124 = v118;
  }
  else
  {
    outlined init with take of TableCellFormula(v118, (uint64_t)v97, type metadata accessor for WidgetAuxiliaryViewMetadata);
    if (!*(id *)((char *)v77 + v166))
    {
      *(id *)((char *)v77 + v166) = *(void **)((char *)v97 + v24[7]);
      if (!*v77)
      {
        v125 = *v97;
        *v77 = *v97;
        v126 = v125;
      }
      swift_bridgeObjectRetain();
    }
    v127 = v163;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v95, v163, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    v128 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v157 + 48))(v127, 1, v177);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v127, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    if (v128 == 1)
      outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v97 + v24[6], (uint64_t)v95, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    v129 = v160;
    v130 = v164;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v160, v164, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
    v131 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 48))(v130, 1, v159);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v130, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
    if (v131 == 1)
      outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v97 + v24[8], v129, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
    v132 = v161;
    v133 = v182;
    if (!v161[1])
    {
      v134 = (char *)v97 + v24[9];
      v135 = *(_QWORD *)v134;
      v136 = *((_QWORD *)v134 + 1);
      v137 = *((_QWORD *)v134 + 2);
      v138 = *((_QWORD *)v134 + 3);
      v139 = *((_QWORD *)v134 + 4);
      v140 = *((_QWORD *)v134 + 5);
      *v161 = *(_QWORD *)v134;
      v132[1] = v136;
      v132[2] = v137;
      v132[3] = v138;
      v132[4] = v139;
      v132[5] = v140;
      *((_BYTE *)v132 + 48) = v134[48];
      outlined copy of WidgetAuxiliaryViewMetadata.Gauge?(v135, v136);
    }
    v141 = v165;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v133, v165, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    v142 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v162 + 48))(v141, 1, v195);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v141, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    if (v142 == 1)
      outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v97 + v24[10], v133, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    if (v93[1] == 1)
    {
      v143 = (uint64_t *)((char *)v97 + v24[11]);
      v144 = *v143;
      v145 = v143[1];
      v146 = v143[2];
      v147 = v143[3];
      v148 = v143[4];
      v197 = v143[5];
      v150 = v143[6];
      v149 = v143[7];
      outlined copy of WidgetAuxiliaryViewMetadata.Accessibility?(v144, v145);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v97, type metadata accessor for WidgetAuxiliaryViewMetadata);
      result = outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(*v93, v93[1]);
      *v93 = v144;
      v93[1] = v145;
      v93[2] = v146;
      v93[3] = v147;
      v152 = v197;
      v93[4] = v148;
      v93[5] = v152;
      v93[6] = v150;
      v93[7] = v149;
      return result;
    }
    v123 = type metadata accessor for WidgetAuxiliaryViewMetadata;
    v124 = (uint64_t)v97;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v124, v123);
}

uint64_t static WidgetAuxiliaryViewMetadata.tint(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  result = EnvironmentValues.tint.getter();
  if (result)
  {
    v3 = result;
    ShapeStyle.resolveGradient(in:level:)();
    if (v7)
    {
      result = swift_release();
      *(_QWORD *)a1 = v7;
      *(_BYTE *)(a1 + 8) = v8;
      return result;
    }
    v4 = ShapeStyle.fallbackColor(in:level:)();
    if (v4)
    {
      v5 = v4;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Color>, MEMORY[0x1E0CE7170], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
      *(_QWORD *)(v6 + 32) = v5;
      v9 = v6;
      specialized Array._endMutation()();
      swift_retain();
      MEMORY[0x18D75BC98](v9);
      Gradient.resolve(in:)();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_release();
      *(_QWORD *)a1 = v3;
      *(_BYTE *)(a1 + 8) = v8;
      return result;
    }
    result = swift_release();
  }
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.init(kind:label:currentValueLabel:tint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v32 = a2;
  v33 = a3;
  v31 = a1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v29 - v13;
  v35 = *a4;
  v34 = *((unsigned __int8 *)a4 + 8);
  v15 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  v30 = v15[5];
  v16 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(v14, 1, 1, v16);
  type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
  v18 = (_QWORD *)swift_allocObject();
  v19 = (uint64_t)v18 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v18 + 8);
  outlined init with take of TableCellFormula((uint64_t)v14, v19, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  *(_QWORD *)(a5 + v30) = v18;
  v20 = v15[6];
  v17(v14, 1, 1, v16);
  v21 = (_QWORD *)swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)v21 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v21 + 8), (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  *(_QWORD *)(a5 + v20) = v21;
  v22 = v20;
  v23 = a5 + v15[7];
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v23 + 8) = 0;
  v24 = v31;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v31, a5, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  v25 = v32;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v32, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_beginAccess();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v10, v19, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v26 = v33;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v33, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v27 = *(_QWORD *)(a5 + v22) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(a5 + v22) + 8);
  swift_beginAccess();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v10, v27, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v26, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v25, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v24, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v23 = v35;
  *(_BYTE *)(v23 + 8) = v34;
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.init(progress:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;

  v4 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  *a2 = 0;
  a2[1] = 0;
  v5 = (char *)a2 + v4[6];
  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)((char *)a2 + v4[7]) = 0;
  v7 = (uint64_t)a2 + v4[8];
  v8 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (char *)a2 + v4[9];
  v9[48] = 0;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = (char *)a2 + v4[10];
  v11 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (_OWORD *)((char *)a2 + v4[11]);
  *v12 = xmmword_187BF9840;
  v12[1] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  return outlined assign with take of WeakBox<Swift.AnyObject>(a1, v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Graphic);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Progress);
}

void type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata.Progress?, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.kind.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of WeakBox<Swift.AnyObject>(a1, v1, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
}

uint64_t (*WidgetAuxiliaryViewMetadata.Text.Metadata.kind.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.range.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0) + 20));
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Text.Metadata);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.range.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v6;

  result = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  v6 = (_QWORD *)(v2 + *(int *)(result + 20));
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Text.Metadata.range.modify())(_QWORD)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.color.getter()
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  return swift_retain();
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.color.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0) + 24);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Text.Metadata.color.modify())(_QWORD)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.features.getter()
{
  return WidgetAuxiliaryViewMetadata.Text.Metadata.features.getter((void (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.features.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0) + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Text.Metadata.features.modify())(_QWORD)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.textScale.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.textScale.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Text.Metadata.textScale.modify())(_QWORD)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

id WidgetAuxiliaryViewMetadata.Text.text.getter()
{
  id *v0;

  return *v0;
}

void WidgetAuxiliaryViewMetadata.Text.text.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Text.text.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Text.metadata.getter()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t result;
  uint64_t v15;
  _QWORD aBlock[6];
  uint64_t v18;

  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  v18 = MEMORY[0x1E0DEE9D8];
  v6 = type metadata accessor for ResolvableTextSegmentAttribute.Value();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
  v7 = NSAttributedString.range.getter();
  v9 = v8;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = &v18;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for closure #1 in WidgetAuxiliaryViewMetadata.Text.metadata.getter;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_55;
  v12 = _Block_copy(aBlock);
  v13 = v5;
  swift_retain();
  swift_release();
  objc_msgSend(v13, sel_enumerateAttributesInRange_options_usingBlock_, v7, v9, 0, v12);
  _Block_release(v12);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v13 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v15 = v18;
    swift_bridgeObjectRetain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    swift_release();
    swift_bridgeObjectRelease();
    return v15;
  }
  return result;
}

void type metadata accessor for ResolvableTextSegmentAttribute.Value?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE6560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t closure #1 in WidgetAuxiliaryViewMetadata.Text.metadata.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, _QWORD **a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t (*v55)(void);
  uint64_t v56;
  char v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  char v74;
  void *v75;
  id v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  char v80;
  void *v81;
  id v82;
  id v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  char v91;
  int *v92;
  uint64_t *v93;
  _QWORD *v94;
  _QWORD *v95;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v97;
  unint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  char *v110;
  _QWORD **v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD v117[2];
  __int128 v118;
  __int128 v119;

  v111 = a7;
  v103 = a6;
  v114 = a2;
  v115 = a5;
  v108 = a3;
  v107 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata(0);
  v112 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107, v8);
  v110 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v105 = (uint64_t *)((char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v106 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  v104 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106, v13);
  v113 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v109 = (uint64_t *)((char *)&v101 - v17);
  v18 = type metadata accessor for ResolvableTextSegmentAttribute.Value();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v102 = (uint64_t)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (ResolvableTextSegmentAttribute.Value?, ResolvableTextSegmentAttribute.Value?)(0);
  v23 = v22;
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x1E0C80A78](v27, v28);
  v101 = (uint64_t)&v101 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v101 - v32;
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v101 - v36;
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v101 - v40;
  MEMORY[0x1E0C80A78](v42, v43);
  v116 = (uint64_t)&v101 - v44;
  v45 = static NSAttributedStringKey.resolvableTextSegment.getter();
  v46 = (void *)v45;
  v47 = MEMORY[0x1E0DEE9B8];
  if (*(_QWORD *)(a1 + 16) && (v48 = specialized __RawDictionaryStorage.find<A>(_:)(v45), (v49 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v48, (uint64_t)&v118);

    if (*((_QWORD *)&v119 + 1))
    {
      v50 = v116;
      v51 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v50, v51 ^ 1u, 1, v18);
      goto LABEL_7;
    }
  }
  else
  {
    v118 = 0u;
    v119 = 0u;

  }
  outlined destroy of AccessibilityTableContext?((uint64_t)&v118, (unint64_t *)&lazy cache variable for type metadata for Any?, v47 + 8);
  v50 = v116;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v116, 1, 1, v18);
LABEL_7:
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v115, (uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  v52 = (uint64_t)&v26[*(int *)(v23 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v50, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v41, v52, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v53((uint64_t)v26, 1, v18) != 1)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v26, (uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    if (v53(v52, 1, v18) != 1)
    {
      v55 = MEMORY[0x1E0CE6560];
      v56 = v102;
      outlined init with take of TableCellFormula(v52, v102, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6560]);
      v57 = static UUID.== infix(_:_:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v56, (uint64_t (*)(_QWORD))v55);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v37, (uint64_t (*)(_QWORD))v55);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
      v54 = v116;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v116, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
      if ((v57 & 1) != 0)
        goto LABEL_14;
LABEL_17:
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
      goto LABEL_18;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v37, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6560]);
LABEL_12:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for (ResolvableTextSegmentAttribute.Value?, ResolvableTextSegmentAttribute.Value?));
    v54 = v116;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v116, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    goto LABEL_17;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  if (v53(v52, 1, v18) != 1)
    goto LABEL_12;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  v54 = v116;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v116, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
LABEL_14:
  if (v53((uint64_t)v33, 1, v18) != 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v54, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  }
  v58 = v101;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v115, v101, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  v59 = v53(v58, 1, v18);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v58, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  if (v59 != 1)
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v54, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
LABEL_18:
  outlined assign with copy of ToolbarStorage.NavigationProperties?(v54, v115, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
  v60 = v105;
  static WidgetAuxiliaryViewMetadata.Text.extractSpecialMetadata(from:)(a1, v105);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v104 + 48))(v60, 1, v106) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?);
    v61 = v108;
    v62 = objc_msgSend(v103, sel_attributedSubstringFromRange_, v114, v108);
    v63 = objc_msgSend(v62, sel_string);

    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v66 = v65;

    *(_QWORD *)&v118 = v64;
    *((_QWORD *)&v118 + 1) = v66;
    v67 = String.init<A>(_:)();
    v68 = v109;
    *v109 = v67;
    v68[1] = v69;
    swift_storeEnumTagMultiPayload();
    v70 = (uint64_t)v110;
  }
  else
  {
    v68 = v109;
    outlined init with take of TableCellFormula((uint64_t)v60, (uint64_t)v109, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
    v70 = (uint64_t)v110;
    v61 = v108;
  }
  v71 = MEMORY[0x1E0DEE9B8];
  if (!*(_QWORD *)(a1 + 16))
  {
    v118 = 0u;
    v119 = 0u;
LABEL_30:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v118, (unint64_t *)&lazy cache variable for type metadata for Any?, v71 + 8);
LABEL_31:
    v77 = 0;
    v76 = 0;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_29;
    goto LABEL_32;
  }
  v72 = (id)*MEMORY[0x1E0DC1140];
  v73 = specialized __RawDictionaryStorage.find<A>(_:)(v72);
  if ((v74 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v73, (uint64_t)&v118);
  }
  else
  {
    v118 = 0u;
    v119 = 0u;
  }

  if (!*((_QWORD *)&v119 + 1))
    goto LABEL_30;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_31;
  v75 = *(void **)&v117[0];
  *(_QWORD *)&v118 = *(_QWORD *)&v117[0];
  lazy protocol witness table accessor for type UIColor and conformance UIColor();
  v76 = v75;
  v71 = MEMORY[0x1E0DEE9B8];
  v77 = Color.init<A>(provider:)();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_29:
    v118 = 0u;
    v119 = 0u;
LABEL_40:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v118, (unint64_t *)&lazy cache variable for type metadata for Any?, v71 + 8);
LABEL_41:
    v81 = 0;
    v118 = 0u;
    v119 = 0u;
LABEL_42:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v118, (unint64_t *)&lazy cache variable for type metadata for Any?, v71 + 8);
    v84 = 0;
    goto LABEL_43;
  }
LABEL_32:
  v78 = (id)*MEMORY[0x1E0DC1138];
  v79 = specialized __RawDictionaryStorage.find<A>(_:)(v78);
  if ((v80 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v79, (uint64_t)&v118);
  }
  else
  {
    v118 = 0u;
    v119 = 0u;
  }

  if (!*((_QWORD *)&v119 + 1))
    goto LABEL_40;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_41;
  v81 = *(void **)&v117[0];
  if (!*(_QWORD *)&v117[0])
    goto LABEL_41;
  v82 = objc_msgSend(*(id *)&v117[0], sel_fontDescriptor);
  v83 = objc_msgSend(v82, sel_objectForKey_, *MEMORY[0x1E0DC1380]);

  if (v83)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v117, 0, sizeof(v117));
  }
  outlined init with take of Image.Resolved?((uint64_t)v117, (uint64_t)&v118, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
  if (!*((_QWORD *)&v119 + 1))
  {
    v71 = MEMORY[0x1E0DEE9B8];
    goto LABEL_42;
  }
  type metadata accessor for [NSDictionary]();
  if (swift_dynamicCast())
    v84 = *(_QWORD *)&v117[0];
  else
    v84 = 0;
LABEL_43:
  v85 = static NSAttributedStringKey._textScale.getter();
  v86 = (void *)v85;
  if (*(_QWORD *)(a1 + 16) && (v87 = specialized __RawDictionaryStorage.find<A>(_:)(v85), (v88 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v87, (uint64_t)&v118);
  }
  else
  {
    v118 = 0u;
    v119 = 0u;
  }

  if (!*((_QWORD *)&v119 + 1))
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v118, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
    v90 = (uint64_t)v113;
    goto LABEL_51;
  }
  v89 = swift_dynamicCast();
  v90 = (uint64_t)v113;
  if ((v89 & 1) == 0)
  {
LABEL_51:
    v91 = 2;
    goto LABEL_52;
  }
  Text.Scale.init(_:)();
  v91 = v118;
LABEL_52:
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v68, v90, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
  if (v84)
  {
    if (v84 >> 62)
    {
      type metadata accessor for CFDictionaryRef(0);
      swift_bridgeObjectRetain();
      v90 = (uint64_t)v113;
      v100 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease_n();
      v84 = v100;
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for CFDictionaryRef(0);
      swift_bridgeObjectRelease();
    }
  }
  outlined init with take of TableCellFormula(v90, v70, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
  v92 = (int *)v107;
  v93 = (uint64_t *)(v70 + *(int *)(v107 + 20));
  *v93 = v114;
  v93[1] = v61;
  *(_QWORD *)(v70 + v92[6]) = v77;
  *(_QWORD *)(v70 + v92[7]) = v84;
  *(_BYTE *)(v70 + v92[8]) = v91;
  v94 = v111;
  v95 = *v111;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v94 = v95;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v95 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v95[2] + 1, 1, v95);
    *v94 = v95;
  }
  v98 = v95[2];
  v97 = v95[3];
  if (v98 >= v97 >> 1)
  {
    v95 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1, v95);
    *v94 = v95;
  }
  v95[2] = v98 + 1;
  outlined init with take of TableCellFormula(v70, (uint64_t)v95+ ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80))+ *(_QWORD *)(v112 + 72) * v98, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata);
  swift_release();

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v68, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
  v54 = v116;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v54, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
}

uint64_t sub_18777D778()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in WidgetAuxiliaryViewMetadata.Text.metadata.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in WidgetAuxiliaryViewMetadata.Text.metadata.getter(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void **)(v4 + 24), *(_QWORD ***)(v4 + 32));
}

uint64_t sub_18777D7A8()
{
  return swift_deallocObject();
}

void static WidgetAuxiliaryViewMetadata.Text.extractSpecialMetadata(from:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  uint64_t (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char v56;
  int v57;
  uint64_t (*v58)(void);
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t (*v70)(void);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  char v81;
  int v82;
  uint64_t v83;
  uint64_t (*v84)(void);
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t *boxed_opaque_existential_1;
  __int128 v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116[4];
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;

  v115 = a2;
  type metadata accessor for ResolvableTimer?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v112 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for ResolvableTimer();
  v108 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113, v6);
  v105 = (uint64_t)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ResolvableCurrentDate?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v111 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for ResolvableCurrentDate();
  v109 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110, v11);
  v106 = (uint64_t)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ResolvableDateInterval?(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ResolvableDateInterval();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v107 = (uint64_t)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?(0);
  MEMORY[0x1E0C80A78](v21, v22);
  v114 = (uint64_t *)((char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ResolvableAbsoluteDate?(0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ResolvableAbsoluteDate();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v30);
  v32 = (char *)&v104 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0DEE9B8];
  if (!*(_QWORD *)(a1 + 16))
  {
    v123 = 0u;
    v124 = 0u;
    goto LABEL_8;
  }
  v34 = MEMORY[0x1E0DEE9B8];
  v35 = (id)*MEMORY[0x1E0DC10F8];
  v36 = specialized __RawDictionaryStorage.find<A>(_:)(v35);
  if ((v37 & 1) == 0)
  {
    v123 = 0u;
    v124 = 0u;

    v33 = v34;
    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v36, (uint64_t)&v123);

  v33 = v34;
  if (!*((_QWORD *)&v124 + 1))
  {
LABEL_8:
    v34 = v33;
    outlined destroy of AccessibilityTableContext?((uint64_t)&v123, (unint64_t *)&lazy cache variable for type metadata for Any?, v33 + 8);
    goto LABEL_9;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSTextAttachment);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v38 = (void *)v120;
    static WidgetAuxiliaryViewMetadata.Text.metadataKind(from:)((void *)v120, v115);

    return;
  }
LABEL_9:
  v39 = static ResolvableAbsoluteDate.attribute.getter();
  v40 = (void *)v39;
  if (*(_QWORD *)(a1 + 16) && (v41 = specialized __RawDictionaryStorage.find<A>(_:)(v39), (v42 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v41, (uint64_t)&v123);
  }
  else
  {
    v123 = 0u;
    v124 = 0u;
  }

  if (*((_QWORD *)&v124 + 1))
  {
    v43 = v34;
    v44 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v27, v44 ^ 1u, 1, v28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) != 1)
    {
      v45 = MEMORY[0x1E0CE54A8];
      outlined init with take of TableCellFormula((uint64_t)v27, (uint64_t)v32, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE54A8]);
      type metadata accessor for (NSAttributedStringKey, Any)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
      v47 = (uint64_t)v114;
      v48 = (char *)v114 + *(int *)(v46 + 48);
      ResolvableAbsoluteDate.date.getter();
      v49 = &v32[*(int *)(v28 + 20)];
      v50 = *v49;
      v51 = *((_QWORD *)v49 + 1);
      LOBYTE(v49) = v49[16];
      *v48 = v50;
      *((_QWORD *)v48 + 1) = v51;
      v48[16] = (char)v49;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, (uint64_t (*)(_QWORD))v45);
      v52 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
LABEL_40:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v47, 0, 1, v52);
      outlined init with take of TableCellFormula(v47, (uint64_t)v115, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?);
      return;
    }
  }
  else
  {
    v43 = v34;
    outlined destroy of AccessibilityTableContext?((uint64_t)&v123, (unint64_t *)&lazy cache variable for type metadata for Any?, v34 + 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, 1, 1, v28);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableAbsoluteDate?);
  v53 = static ResolvableDateInterval.attribute.getter();
  v54 = (void *)v53;
  if (*(_QWORD *)(a1 + 16) && (v55 = specialized __RawDictionaryStorage.find<A>(_:)(v53), (v56 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v55, (uint64_t)&v123);
  }
  else
  {
    v123 = 0u;
    v124 = 0u;
  }

  if (*((_QWORD *)&v124 + 1))
  {
    v57 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, v57 ^ 1u, 1, v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    {
      v58 = MEMORY[0x1E0CE54C0];
      v59 = v107;
      outlined init with take of TableCellFormula((uint64_t)v16, v107, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE54C0]);
      v47 = (uint64_t)v114;
      ResolvableDateInterval.interval.getter();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v59, (uint64_t (*)(_QWORD))v58);
      v52 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      goto LABEL_40;
    }
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v123, (unint64_t *)&lazy cache variable for type metadata for Any?, v43 + 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableDateInterval?);
  v60 = static ResolvableCurrentDate.attribute.getter();
  v61 = (void *)v60;
  if (*(_QWORD *)(a1 + 16) && (v62 = specialized __RawDictionaryStorage.find<A>(_:)(v60), (v63 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v62, (uint64_t)&v123);
  }
  else
  {
    v123 = 0u;
    v124 = 0u;
  }
  v64 = v113;
  v65 = (uint64_t)v112;
  v66 = (uint64_t)v111;

  if (*((_QWORD *)&v124 + 1))
  {
    v67 = v110;
    v68 = swift_dynamicCast();
    v69 = v109;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v109 + 56))(v66, v68 ^ 1u, 1, v67);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v66, 1, v67) != 1)
    {
      v70 = MEMORY[0x1E0CE5180];
      v71 = v106;
      outlined init with take of TableCellFormula(v66, v106, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE5180]);
      v72 = *(_QWORD *)v71;
      v73 = *(_QWORD *)(v71 + 8);
      v74 = *(_BYTE *)(v71 + 16);
      type metadata accessor for (String, Bool, TimeZone?)();
      v47 = (uint64_t)v114;
      v76 = (char *)v114 + *(int *)(v75 + 64);
      *v114 = v72;
      *(_QWORD *)(v47 + 8) = v73;
      *(_BYTE *)(v47 + 16) = v74;
      outlined copy of TabCustomizationID.Base();
      ResolvableCurrentDate.timeZone.getter();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v71, (uint64_t (*)(_QWORD))v70);
      v77 = type metadata accessor for TimeZone();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v76, 0, 1, v77);
      v52 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      goto LABEL_40;
    }
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v123, (unint64_t *)&lazy cache variable for type metadata for Any?, v43 + 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 56))(v66, 1, 1, v110);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v66, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableCurrentDate?);
  v78 = static ResolvableTimer.attribute.getter();
  v79 = (void *)v78;
  if (*(_QWORD *)(a1 + 16) && (v80 = specialized __RawDictionaryStorage.find<A>(_:)(v78), (v81 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v80, (uint64_t)&v123);
  }
  else
  {
    v123 = 0u;
    v124 = 0u;
  }

  if (*((_QWORD *)&v124 + 1))
  {
    v82 = swift_dynamicCast();
    v83 = v108;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v108 + 56))(v65, v82 ^ 1u, 1, v64);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v65, 1, v64) != 1)
    {
      v84 = MEMORY[0x1E0CE2F08];
      v85 = v105;
      outlined init with take of TableCellFormula(v65, v105, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2F08]);
      type metadata accessor for (DateInterval, Double?, Bool)();
      v47 = (uint64_t)v114;
      v87 = (char *)v114 + *(int *)(v86 + 48);
      v88 = *(int *)(v86 + 64);
      ResolvableTimer.interval.getter();
      v89 = v85 + *(int *)(v64 + 20);
      v90 = *(_QWORD *)v89;
      LOBYTE(v89) = *(_BYTE *)(v89 + 8);
      *(_QWORD *)v87 = v90;
      v87[8] = v89;
      v91 = *(_BYTE *)(v85 + *(int *)(v64 + 24));
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v85, (uint64_t (*)(_QWORD))v84);
      *(_BYTE *)(v47 + v88) = v91;
      v52 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      goto LABEL_40;
    }
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v123, (unint64_t *)&lazy cache variable for type metadata for Any?, v43 + 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56))(v65, 1, 1, v64);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v65, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableTimer?);
  v92 = static TimeDataFormatting.attribute.getter();
  v93 = (void *)v92;
  if (*(_QWORD *)(a1 + 16) && (v94 = specialized __RawDictionaryStorage.find<A>(_:)(v92), (v95 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v94, (uint64_t)&v117);
  }
  else
  {
    v117 = 0u;
    v118 = 0u;
  }

  if (!*((_QWORD *)&v118 + 1))
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v117, (unint64_t *)&lazy cache variable for type metadata for Any?, v43 + 8);
    v120 = 0u;
    v121 = 0u;
    v122 = 0;
    goto LABEL_53;
  }
  type metadata accessor for ResolvableStringAttribute();
  if ((swift_dynamicCast() & 1) == 0)
  {
    v122 = 0;
    v120 = 0u;
    v121 = 0u;
    goto LABEL_53;
  }
  if (!*((_QWORD *)&v121 + 1))
  {
LABEL_53:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v120, (uint64_t (*)(_QWORD))type metadata accessor for ResolvableStringAttribute?);
    goto LABEL_54;
  }
  outlined init with take of OptionalBinaryInteger(&v120, (uint64_t)&v123);
  v96 = *((_QWORD *)&v124 + 1);
  v97 = __swift_project_boxed_opaque_existential_1(&v123, *((uint64_t *)&v124 + 1));
  v116[3] = v96;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v116);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(boxed_opaque_existential_1, v97, v96);
  TimeDataFormattingContainer.init(resolvable:)();
  if (*((_QWORD *)&v118 + 1))
  {
    v99 = v118;
    v120 = v117;
    v121 = v118;
    v100 = v119;
    v122 = v119;
    v101 = v115;
    *(_OWORD *)v115 = v117;
    *((_OWORD *)v101 + 1) = v99;
    v101[4] = v100;
    v102 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v101, 0, 1, v102);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
    return;
  }
  outlined destroy of AccessibilityTableContext?((uint64_t)&v117, &lazy cache variable for type metadata for TimeDataFormattingContainer?, MEMORY[0x1E0CE6250]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
LABEL_54:
  v103 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56))(v115, 1, 1, v103);
}

uint64_t static WidgetAuxiliaryViewMetadata.Text.metadataKind(from:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v37 = (uint64_t)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = objc_msgSend(a1, sel_contents, v19);
  if (v22)
  {
    v23 = v22;
    v36 = v8;
    v38 = a2;
    v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v25;

    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
    swift_release();
    outlined consume of Data._Representation(v24, v26);
    outlined init with take of TableCellFormula((uint64_t)v15, (uint64_t)v21, type metadata accessor for WidgetAuxiliaryViewMetadata);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v21[*(int *)(v16 + 24)], (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, type metadata accessor for WidgetAuxiliaryViewMetadata);
    v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v36);
    v31 = (uint64_t)v38;
    if (v30 == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
      v32 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
    }
    else
    {
      v34 = v37;
      outlined init with take of TableCellFormula((uint64_t)v7, v37, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
      outlined init with take of TableCellFormula(v34, v31, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
      v35 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v31, 0, 1, v35);
    }
  }
  else
  {
    v27 = objc_msgSend(a1, sel_image);
    if (v27)
    {
      *a2 = v27;
      swift_storeEnumTagMultiPayload();
      v28 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a2, 0, 1, v28);
    }
    else
    {
      static Log.internalWarning(_:)();
      v33 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(a2, 1, 1, v33);
    }
  }
}

unint64_t implicit closure #1 in static WidgetAuxiliaryViewMetadata.Text.metadataKind(from:)()
{
  return 0xD000000000000028;
}

unint64_t implicit closure #2 in static WidgetAuxiliaryViewMetadata.Text.metadataKind(from:)()
{
  return 0xD00000000000002FLL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D6574737973;
  else
    return 0x656C646E7562;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Graphic.Named.name.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + *(int *)(v3 + 20), a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Graphic.Named);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.location.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  return outlined assign with take of WeakBox<Swift.AnyObject>(a1, v1 + *(int *)(v3 + 20), type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
}

uint64_t (*WidgetAuxiliaryViewMetadata.Graphic.Named.location.modify())(_QWORD)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

unint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.value.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0) + 24));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.value.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  v4 = v1 + *(int *)(result + 24);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Graphic.Named.value.modify())(_QWORD)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.isSymbol.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0) + 28));
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.isSymbol.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Graphic.Named.isSymbol.modify())(_QWORD)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.colors.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0) + 32));
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = v1 + 44;
    do
    {
      Color.init(_:)();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 16;
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.tintColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  result = 0;
  if ((*(_BYTE *)(v0 + *(int *)(v1 + 36) + 16) & 1) == 0)
    return Color.init(_:)();
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.symbolRenderingMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.symbolEffects.getter()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  int v17;
  char v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0) + 44));
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v4 = 0;
    v3 = v19;
    v15 = v1;
    do
    {
      v5 = *(_QWORD *)(v1 + v4 + 32);
      v6 = *(_QWORD *)(v1 + v4 + 40);
      v7 = *(_QWORD *)(v1 + v4 + 48);
      v8 = *(_WORD *)(v1 + v4 + 56);
      v9 = *(_DWORD *)(v1 + v4 + 60);
      v10 = *(_DWORD *)(v1 + v4 + 64);
      v17 = *(_DWORD *)(v1 + v4 + 72);
      v18 = *(_BYTE *)(v1 + v4 + 68);
      v16 = *(_BYTE *)(v1 + v4 + 76);
      outlined copy of _SymbolEffect.Storage(v5, v6, v7, v8);
      v12 = *(_QWORD *)(v19 + 16);
      v11 = *(_QWORD *)(v19 + 24);
      if (v12 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
      *(_QWORD *)(v19 + 16) = v12 + 1;
      v13 = v19 + 48 * v12;
      *(_QWORD *)(v13 + 32) = v5;
      *(_QWORD *)(v13 + 40) = v6;
      *(_QWORD *)(v13 + 48) = v7;
      *(_WORD *)(v13 + 56) = v8;
      *(_DWORD *)(v13 + 60) = v9;
      *(_DWORD *)(v13 + 64) = v10;
      *(_BYTE *)(v13 + 68) = v18;
      *(_DWORD *)(v13 + 72) = v17;
      *(_BYTE *)(v13 + 76) = v16;
      v4 += 48;
      --v2;
      v1 = v15;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.contentTransition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0) + 48);
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned __int8 *)(v3 + 12);
  v6 = *(unsigned int *)(v3 + 8);
  v7 = *(_BYTE *)(v3 + 14);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_BYTE *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  v8 = *(_BYTE *)(v3 + 13);
  *(_BYTE *)(a1 + 13) = v8;
  *(_BYTE *)(a1 + 14) = v7;
  return outlined copy of ContentTransition.Storage(v4, v6 | (v5 << 32), v8);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18777ED64 + 4 * byte_187C59910[a1]))(1701667182, 0xE400000000000000);
}

uint64_t sub_18777ED64()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_18777ED7C()
{
  return 0x65756C6176;
}

uint64_t sub_18777ED90()
{
  return 0x6C6F626D79537369;
}

uint64_t sub_18777EDA8()
{
  return 0x73726F6C6F635FLL;
}

uint64_t sub_18777EDC0()
{
  return 0x6C6F43746E69745FLL;
}

uint64_t sub_18777EDDC()
{
  return 0x65646F6D5FLL;
}

uint64_t sub_18777EDF0()
{
  return 0x456C6F626D79735FLL;
}

unint64_t sub_18777EE14()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys()
{
  unsigned __int8 *v0;

  return WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.isSymbol.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v9, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    return 0;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v5, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    v11 = v5[*(int *)(v2 + 28)];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  }
  return v11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 1702125924;
  else
    return 0x6574756C6F736261;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 12639;
  else
    return 12383;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.kind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.kind.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of WeakBox<Swift.AnyObject>(a1, v1, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
}

uint64_t (*WidgetAuxiliaryViewMetadata.Progress.kind.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.label.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 20));
  v4 = (uint64_t)v3 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v3 + 8);
  swift_beginAccess();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v4, a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path getter for WidgetAuxiliaryViewMetadata.Progress.label : WidgetAuxiliaryViewMetadata.Progress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(a1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 20));
  v4 = (uint64_t)v3 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v3 + 8);
  swift_beginAccess();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v4, a2, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path setter for WidgetAuxiliaryViewMetadata.Progress.label : WidgetAuxiliaryViewMetadata.Progress(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v15 - v10;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v15 - v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v12 = *(_QWORD **)(a2 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 20));
  v13 = (uint64_t)v12 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v12 + 8);
  swift_beginAccess();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v7, v13, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.label.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v7 = *(_QWORD **)(v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 20));
  v8 = (uint64_t)v7 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v7 + 8);
  swift_beginAccess();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v6, v8, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t (*WidgetAuxiliaryViewMetadata.Progress.label.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[9] = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  v6 = malloc(v5);
  v3[12] = v6;
  v7 = *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 20);
  *((_DWORD *)v3 + 26) = v7;
  v8 = *(_QWORD *)(v1 + v7) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(v1 + v7) + 8);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v8, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return WidgetAuxiliaryViewMetadata.Progress.label.modify;
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.currentValueLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 24));
  v4 = (uint64_t)v3 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v3 + 8);
  swift_beginAccess();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v4, a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path getter for WidgetAuxiliaryViewMetadata.Progress.currentValueLabel : WidgetAuxiliaryViewMetadata.Progress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(a1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 24));
  v4 = (uint64_t)v3 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v3 + 8);
  swift_beginAccess();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v4, a2, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path setter for WidgetAuxiliaryViewMetadata.Progress.currentValueLabel : WidgetAuxiliaryViewMetadata.Progress(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v15 - v10;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v15 - v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v12 = *(_QWORD **)(a2 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 24));
  v13 = (uint64_t)v12 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v12 + 8);
  swift_beginAccess();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v7, v13, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.currentValueLabel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v7 = *(_QWORD **)(v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 24));
  v8 = (uint64_t)v7 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v7 + 8);
  swift_beginAccess();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v6, v8, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t (*WidgetAuxiliaryViewMetadata.Progress.currentValueLabel.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[9] = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  v6 = malloc(v5);
  v3[12] = v6;
  v7 = *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 24);
  *((_DWORD *)v3 + 26) = v7;
  v8 = *(_QWORD *)(v1 + v7) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(v1 + v7) + 8);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v8, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return WidgetAuxiliaryViewMetadata.Progress.label.modify;
}

void WidgetAuxiliaryViewMetadata.Progress.label.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(*a1 + 96), *(_QWORD *)(*a1 + 88), (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v4 = *(int *)(v3 + 104);
  v5 = *(void **)(v3 + 88);
  v6 = *(void **)(v3 + 96);
  v8 = *(_QWORD *)(v3 + 72);
  v7 = *(void **)(v3 + 80);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(v3 + 88), *(_QWORD *)(v3 + 80), (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v9 = *(_QWORD *)(v8 + v4) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(v8 + v4) + 8);
    swift_beginAccess();
    outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v7, v9, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  else
  {
    v10 = *(_QWORD *)(v8 + v4) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(v8 + v4) + 8);
    swift_beginAccess();
    outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v5, v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  free(v6);
  free(v5);
  free(v7);
  free((void *)v3);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.tint.getter()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0) + 28));
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v12;
    v4 = v1 + 36;
    do
    {
      Color.init(_:)();
      ResolvedGradient.Stop.location.getter();
      v5 = Gradient.Stop.init(color:location:)();
      v7 = v6;
      v9 = *(_QWORD *)(v12 + 16);
      v8 = *(_QWORD *)(v12 + 24);
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1);
      *(_QWORD *)(v12 + 16) = v9 + 1;
      v10 = v12 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v5;
      *(_QWORD *)(v10 + 40) = v7;
      v4 += 48;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x18D75BC8C](v3);
}

void Gradient.init(_:)(uint64_t *a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 16);
  if (v2)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v1 + 36;
    do
    {
      Color.init(_:)();
      ResolvedGradient.Stop.location.getter();
      v4 = Gradient.Stop.init(color:location:)();
      v6 = v5;
      v8 = *(_QWORD *)(v10 + 16);
      v7 = *(_QWORD *)(v10 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      *(_QWORD *)(v10 + 16) = v8 + 1;
      v9 = v10 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v4;
      *(_QWORD *)(v9 + 40) = v6;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x18D75BC8CLL);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18777FD90 + 4 * byte_187C59919[*v0]))(1684957547, 0xE400000000000000);
}

uint64_t sub_18777FD90()
{
  return 0x786F426C6562616CLL;
}

unint64_t sub_18777FDA8()
{
  return 0xD000000000000014;
}

uint64_t sub_18777FDC4()
{
  return 0x746E69745FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized WidgetAuxiliaryViewMetadata.Progress.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys();
  return CodingKey.debugDescription.getter();
}

double WidgetAuxiliaryViewMetadata.Gauge.value.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void WidgetAuxiliaryViewMetadata.Gauge.value.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Gauge.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.label.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(v1 + 8) + 8);
  swift_beginAccess();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path setter for WidgetAuxiliaryViewMetadata.Gauge.label : WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v15 - v10;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v15 - v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v12 = *(_QWORD **)(a2 + 8);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v13 = (uint64_t)v12 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v12 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v7, v13, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.label.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD **)(v1 + 8);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v8 = (uint64_t)v7 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v7 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v6, v8, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void (*WidgetAuxiliaryViewMetadata.Gauge.label.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  v6 = malloc(v5);
  v3[12] = v6;
  v7 = *(_QWORD *)(v1 + 8) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(v1 + 8) + 8);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v7, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return WidgetAuxiliaryViewMetadata.Gauge.label.modify;
}

void WidgetAuxiliaryViewMetadata.Gauge.label.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 88);
  v4 = *(void **)(*(_QWORD *)a1 + 96);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v5 = *(void **)(*(_QWORD *)a1 + 80);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(*(_QWORD *)a1 + 96), (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v7 = *(_QWORD **)(v6 + 8);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v3, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v8 = (uint64_t)v7 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v7 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v5, v8, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  else
  {
    v9 = *(_QWORD **)(v6 + 8);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v4, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v10 = (uint64_t)v9 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v9 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v3, v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(v1 + 16) + 8);
  swift_beginAccess();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path setter for WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel : WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v15 - v10;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v15 - v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v12 = *(_QWORD **)(a2 + 16);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v13 = (uint64_t)v12 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v12 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v7, v13, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD **)(v1 + 16);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v8 = (uint64_t)v7 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v7 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v6, v8, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void (*WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  v6 = malloc(v5);
  v3[12] = v6;
  v7 = *(_QWORD *)(v1 + 16) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(v1 + 16) + 8);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v7, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel.modify;
}

void WidgetAuxiliaryViewMetadata.Gauge.currentValueLabel.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 88);
  v4 = *(void **)(*(_QWORD *)a1 + 96);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v5 = *(void **)(*(_QWORD *)a1 + 80);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(*(_QWORD *)a1 + 96), (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v7 = *(_QWORD **)(v6 + 16);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v3, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v8 = (uint64_t)v7 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v7 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v5, v8, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  else
  {
    v9 = *(_QWORD **)(v6 + 16);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v4, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v10 = (uint64_t)v9 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v9 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v3, v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(v1 + 24) + 8);
  swift_beginAccess();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path setter for WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel : WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v15 - v10;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v15 - v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v12 = *(_QWORD **)(a2 + 24);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v13 = (uint64_t)v12 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v12 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v7, v13, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD **)(v1 + 24);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v8 = (uint64_t)v7 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v7 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v6, v8, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void (*WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  v6 = malloc(v5);
  v3[12] = v6;
  v7 = *(_QWORD *)(v1 + 24) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(v1 + 24) + 8);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v7, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel.modify;
}

void WidgetAuxiliaryViewMetadata.Gauge.minimumValueLabel.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 88);
  v4 = *(void **)(*(_QWORD *)a1 + 96);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if ((a2 & 1) != 0)
  {
    v12 = *(_QWORD *)(*(_QWORD *)a1 + 96);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v12, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v7 = *(_QWORD **)(v5 + 24);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v3, v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v8 = (void *)v6;
    v9 = (uint64_t)v7 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v7 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v8, v9, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v4 = (void *)v12;
    swift_endAccess();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v12, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  else
  {
    v13 = *(void **)(*(_QWORD *)a1 + 80);
    v10 = *(_QWORD **)(v5 + 24);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v4, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v11 = (uint64_t)v10 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v10 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v3, v11, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v8 = v13;
  }
  free(v4);
  free(v3);
  free(v8);
  free(v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(v1 + 32) + 8);
  swift_beginAccess();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t key path setter for WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel : WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v15 - v10;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v15 - v10, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v12 = *(_QWORD **)(a2 + 32);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v13 = (uint64_t)v12 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v12 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v7, v13, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD **)(v1 + 32);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v8 = (uint64_t)v7 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v7 + 8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v6, v8, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void (*WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  v3[11] = malloc(v5);
  v6 = malloc(v5);
  v3[12] = v6;
  v7 = *(_QWORD *)(v1 + 32) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(v1 + 32) + 8);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v7, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel.modify;
}

void WidgetAuxiliaryViewMetadata.Gauge.maximumValueLabel.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 88);
  v4 = *(void **)(*(_QWORD *)a1 + 96);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(*(_QWORD *)(*(_QWORD *)a1 + 96), (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v7 = (void *)v6;
    v8 = *(_QWORD **)(v5 + 32);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v3, v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v9 = (uint64_t)v8 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v8 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of ToolbarStorage.NavigationProperties?(v6, v9, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v6, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  else
  {
    v10 = *(_QWORD **)(v5 + 32);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v4, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    v11 = (uint64_t)v10 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v10 + 8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v3, v11, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_endAccess();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v7 = (void *)v6;
  }
  free(v4);
  free(v3);
  free(v7);
  free(v2);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.tint.getter()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  char v4;

  result = *(_QWORD *)(v0 + 40);
  if (result)
  {
    v2 = *(_BYTE *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 40);
    v4 = v2;
    swift_bridgeObjectRetain();
    Gradient.init(_:)(&v3);
  }
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_187781834 + 4 * byte_187C5991D[a1]))(0x65756C6176, 0xE500000000000000);
}

uint64_t sub_187781834()
{
  return 0x786F426C6562616CLL;
}

unint64_t sub_18778184C()
{
  return 0xD000000000000014;
}

uint64_t sub_187781880()
{
  return 0x746E69745FLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys()
{
  unsigned __int8 *v0;

  return WidgetAuxiliaryViewMetadata.Gauge.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized WidgetAuxiliaryViewMetadata.Gauge.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.label.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.label.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Accessibility.label.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Accessibility.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Accessibility.identifier.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.hint.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.hint.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*WidgetAuxiliaryViewMetadata.Accessibility.hint.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_187781AF8 + 4 * byte_187C59923[*v0]))(0x6C6562616CLL, 0xE500000000000000);
}

uint64_t sub_187781AF8()
{
  return 0x65756C6176;
}

uint64_t sub_187781B08()
{
  return 0x696669746E656469;
}

uint64_t sub_187781B24()
{
  return 1953393000;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id WidgetAuxiliaryViewMetadata.metadataText.getter@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

id WidgetAuxiliaryViewMetadata.metadataSecondaryText.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 8);
  *a1 = v2;
  return v2;
}

uint64_t WidgetAuxiliaryViewMetadata.graphic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
}

uint64_t WidgetAuxiliaryViewMetadata.fallbacks.getter()
{
  return WidgetAuxiliaryViewMetadata.Text.Metadata.features.getter((void (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.Metadata.features.getter(void (*a1)(_QWORD))
{
  a1(0);
  return swift_bridgeObjectRetain();
}

uint64_t WidgetAuxiliaryViewMetadata.progress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
}

uint64_t WidgetAuxiliaryViewMetadata.gauge.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata(0) + 36);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v3 + 48);
  return outlined copy of WidgetAuxiliaryViewMetadata.Gauge?(v4, v5);
}

uint64_t WidgetAuxiliaryViewMetadata.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + *(int *)(v3 + 40), a1, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
}

uint64_t WidgetAuxiliaryViewMetadata.accessibility.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for WidgetAuxiliaryViewMetadata(0) + 44));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = v3[6];
  v11 = v3[7];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  return outlined copy of WidgetAuxiliaryViewMetadata.Accessibility?(v4, v5);
}

__n128 WidgetAuxiliaryViewMetadata.init(gauge:)@<Q0>(__n128 *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 *v11;
  char *v12;
  uint64_t v13;
  _OWORD *v14;
  __n128 result;
  __n128 v16;
  __n128 v17;

  v16 = a1[1];
  v17 = *a1;
  v3 = a1[2].n128_u64[0];
  v4 = a1[2].n128_u64[1];
  v5 = a1[3].n128_i8[0];
  v6 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  *a2 = 0;
  a2[1] = 0;
  v7 = (char *)a2 + v6[6];
  v8 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_QWORD *)((char *)a2 + v6[7]) = 0;
  v9 = (char *)a2 + v6[8];
  v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = (__n128 *)((char *)a2 + v6[9]);
  v12 = (char *)a2 + v6[10];
  v13 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = (_OWORD *)((char *)a2 + v6[11]);
  *v14 = xmmword_187BF9840;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  result = v16;
  *v11 = v17;
  v11[1] = v16;
  v11[2].n128_u64[0] = v3;
  v11[2].n128_u64[1] = v4;
  v11[3].n128_u8[0] = v5;
  return result;
}

double WidgetAuxiliaryViewMetadata.init(fallbacks:)@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _OWORD *v13;
  double result;

  v4 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  *a2 = 0;
  a2[1] = 0;
  v5 = (char *)a2 + v4[6];
  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v4[7];
  v8 = (char *)a2 + v4[8];
  v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = (char *)a2 + v4[9];
  v10[48] = 0;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)v10 = 0u;
  v11 = (char *)a2 + v4[10];
  v12 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = (_OWORD *)((char *)a2 + v4[11]);
  result = 0.0;
  *v13 = xmmword_187BF9840;
  v13[1] = 0u;
  v13[2] = 0u;
  v13[3] = 0u;
  *(_QWORD *)((char *)a2 + v7) = a1;
  return result;
}

uint64_t WidgetAuxiliaryViewMetadata.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_187781F94 + 4 * byte_187C59927[a1]))(0x617461646174656DLL, 0xEC00000074786554);
}

unint64_t sub_187781F94()
{
  return 0xD000000000000015;
}

uint64_t sub_187781FB0()
{
  return 0x63696870617267;
}

uint64_t sub_187781FC8()
{
  return 0x6B6361626C6C6166;
}

uint64_t sub_187781FE4()
{
  return 0x73736572676F7270;
}

uint64_t sub_187781FFC()
{
  return 0x6567756167;
}

uint64_t sub_187782010()
{
  return 7107189;
}

uint64_t sub_187782020()
{
  return 0x6269737365636361;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.CodingKeys()
{
  unsigned __int8 *v0;

  return WidgetAuxiliaryViewMetadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized WidgetAuxiliaryViewMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance WidgetAuxiliaryViewMetadata.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TimeDataFormattingContainer.representation(for:)@<X0>(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v10[2];
  uint64_t v11[3];
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;

  LOBYTE(v11[0]) = *a1;
  TimeDataFormattingContainer.representation(for:)();
  __swift_project_boxed_opaque_existential_1(v13, v14);
  swift_getDynamicType();
  v3 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
  v4 = v14;
  v5 = __swift_project_boxed_opaque_existential_1(v13, v14);
  v12 = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(boxed_opaque_existential_1, v5, v4);
  outlined init with take of Any(v11, v10);
  v7 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  static WidgetAuxiliaryViewMetadata.Text.extractSpecialMetadata(from:)(v7, a2);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t WidgetAuxiliaryViewMetadata.tint.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t v14;

  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0 + *(int *)(v9 + 24), (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
  v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v4, 1, v10) == 1)
  {
    v11 = (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?;
LABEL_5:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, v11);
    return 0;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic;
    goto LABEL_5;
  }
  outlined init with take of TableCellFormula((uint64_t)v4, (uint64_t)v8, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  if ((v8[*(int *)(v5 + 36) + 16] & 1) != 0)
    v12 = 0;
  else
    v12 = Color.init(_:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  return v12;
}

uint64_t WidgetAuxiliaryViewMetadata.resolvedTint.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t v14;

  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0 + *(int *)(v9 + 24), (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
  v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v4, 1, v10) == 1)
  {
    v11 = (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?;
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of TableCellFormula((uint64_t)v4, (uint64_t)v8, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
      v12 = *(_QWORD *)&v8[*(int *)(v5 + 36)];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
      return v12;
    }
    v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, v11);
  return 0;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.init(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int *v8;
  char *v9;
  int8x16_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  char v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t result;
  char *v28;
  void *v29;
  int v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v35;
  int v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int8x16_t v71;
  int8x16_t v72;
  char v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  int8x16_t *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char v82;
  int v83;
  unint64_t v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  char v102;
  void *v103;
  char v104;
  __int128 v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  char v114;
  __int16 v115;
  id v116;
  uint64_t v117;
  unsigned __int16 v118;
  char v119;
  __int128 v120;
  __int128 v121;
  char v122;
  _BYTE v123[200];

  v4 = a1[1];
  v80 = *a1;
  v5 = (void *)a1[2];
  v83 = *((_DWORD *)a1 + 6);
  v82 = *((_BYTE *)a1 + 28);
  v86 = *((unsigned __int8 *)a1 + 29);
  v78 = *((unsigned __int8 *)a1 + 30);
  v6 = (void *)a1[4];
  v7 = a1[5];
  outlined init with take of Image.Resolved?(a2, (uint64_t)v123, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v8 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  v90 = v8[7];
  v9 = (char *)a3 + v8[6];
  v88 = v8[8];
  v10 = (int8x16_t *)((char *)a3 + v8[9]);
  v10->i64[0] = 0;
  v10->i64[1] = 0;
  v77 = v10;
  v10[1].i8[0] = 1;
  v11 = v8[10];
  v116 = v6;
  v117 = v7;
  swift_retain();
  swift_retain();
  v12 = EnvironmentValues.symbolEffects.getter();
  v13 = specialized SymbolEffectArray.init(effects:)(v12);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a3 + v8[11]) = v13;
  v116 = v6;
  v117 = v7;
  EnvironmentValues.contentTransition.getter();
  v14 = DWORD2(v94);
  v15 = WORD6(v94);
  v16 = BYTE14(v94);
  v17 = (char *)a3 + v8[12];
  *(_QWORD *)v17 = v94;
  *((_DWORD *)v17 + 2) = v14;
  *((_WORD *)v17 + 6) = v15;
  v17[14] = v16;
  v116 = v6;
  v117 = v7;
  if ((EnvironmentValues.shouldRedactSymbolImages.getter() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(v5);
    swift_release();
    swift_release();
    outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    *a3 = 0x662E657261757173;
    a3[1] = 0xEB000000006C6C69;
    *((_BYTE *)a3 + v8[5]) = 0;
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    swift_storeEnumTagMultiPayload();
    *(_DWORD *)v9 = 0;
    v9[4] = 1;
    *((_BYTE *)a3 + v11) = 0;
    *((_BYTE *)a3 + v90) = 1;
    v116 = v6;
    v117 = v7;
    if (EnvironmentValues._effectiveForegroundColor.getter())
    {
      v116 = v6;
      v117 = v7;
      dispatch thunk of AnyColorBox.resolve(in:)();
      v19 = v18;
      v21 = v20;
      v23 = v22;
      v25 = v24;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Color.Resolved>, MEMORY[0x1E0CE7110], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_187BF9830;
      *(_DWORD *)(v26 + 32) = v19;
      *(_DWORD *)(v26 + 36) = v21;
      *(_DWORD *)(v26 + 40) = v23;
      *(_DWORD *)(v26 + 44) = v25;
      swift_release();
      swift_release();
      result = swift_release();
      *(_QWORD *)((char *)a3 + v88) = v26;
    }
    else
    {
      swift_release();
      result = swift_release();
      *(_QWORD *)((char *)a3 + v88) = MEMORY[0x1E0DEE9D8];
    }
    return result;
  }
  v28 = v9;
  v75 = v11;
  v76 = v7;
  *a3 = v80;
  a3[1] = v4;
  v29 = v5;
  v81 = a3;
  if (!v5)
  {
    *((_BYTE *)a3 + v8[5]) = 0;
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    swift_storeEnumTagMultiPayload();
    *((_BYTE *)a3 + v90) = 1;
    swift_bridgeObjectRetain();
    v30 = v86;
    v32 = v6;
    v31 = v7;
    goto LABEL_16;
  }
  v30 = v86;
  v31 = v7;
  if (v5 == (void *)1)
  {
    *((_BYTE *)v81 + v8[5]) = 1;
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    swift_storeEnumTagMultiPayload();
    *((_BYTE *)v81 + v90) = 1;
    v30 = v86;
    swift_bridgeObjectRetain();
    v32 = v6;
    goto LABEL_16;
  }
  outlined copy of Image.Location(v5);
  outlined copy of Image.Location(v5);
  swift_bridgeObjectRetain();
  v33 = objc_msgSend(v5, sel_bundleURL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  swift_storeEnumTagMultiPayload();
  outlined init with take of Image.Resolved?((uint64_t)v123, (uint64_t)&v116, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v32 = v6;
  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v116) == 1)
  {
    outlined consume of Image.Location(v29);
    outlined consume of Image.Location(v29);
    v34 = v90;
  }
  else
  {
    v35 = v116;
    v36 = v117;
    outlined copy of GraphicsImage.Contents?(v116, v117);
    outlined copy of GraphicsImage.Contents?(v35, v36);
    outlined consume of Image.Location(v29);
    outlined consume of Image.Location(v29);
    outlined consume of GraphicsImage.Contents?(v35, v36);
    v34 = v90;
    if (v36 != 255)
    {
      if (v36 == 2)
      {
        outlined consume of GraphicsImage.Contents?(v35, 2);
        *((_BYTE *)v81 + v90) = 1;
        goto LABEL_16;
      }
      outlined consume of GraphicsImage.Contents?(v35, v36);
    }
  }
  *((_BYTE *)v81 + v34) = 0;
LABEL_16:
  *(_DWORD *)v28 = v83;
  v28[4] = v82;
  outlined init with take of Image.Resolved?((uint64_t)v123, (uint64_t)&v116, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v116) == 1)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(v29);
    swift_release();
    swift_release();
    if (v78)
      v37 = (char *)MEMORY[0x1E0DEE9D8];
    else
      v37 = 0;
    v38 = v75;
    goto LABEL_59;
  }
  if (v30 == 8)
  {
    if (v117 == 2)
    {
      v39 = *((_BYTE *)v116 + 24);
      v40 = *((_QWORD *)v116 + 4);
      v41 = *((_DWORD *)v116 + 10);
      v42 = *((_BYTE *)v116 + 44);
      v43 = *((_BYTE *)v116 + 45);
      *(_QWORD *)&v94 = *((_QWORD *)v116 + 2);
      BYTE8(v94) = v39;
      *(_QWORD *)&v95 = v40;
      DWORD2(v95) = v41;
      BYTE12(v95) = v42;
      BYTE13(v95) = v43;
      ResolvedVectorGlyph.renderingMode.getter();
      LOBYTE(v30) = v93;
    }
    else
    {
      LOBYTE(v30) = 8;
    }
  }
  v44 = v30;
  if (v118)
    v45 = 1;
  else
    v45 = v78;
  if ((v119 & 1) != 0)
    v46 = v118;
  else
    v46 = v45;
  if (!v46)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(v29);
    swift_release();
    swift_release();
    outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    v37 = 0;
LABEL_39:
    v38 = v75;
    LOBYTE(v30) = v44;
LABEL_59:
    *((_BYTE *)v81 + v38) = v30;
    *(_QWORD *)((char *)v81 + v88) = v37;
    *(_QWORD *)&v94 = v32;
    *((_QWORD *)&v94 + 1) = v31;
    swift_bridgeObjectRetain();
    v66 = EnvironmentValues.tintColor.getter();
    if (v66)
    {
      *(_QWORD *)&v94 = v32;
      *((_QWORD *)&v94 + 1) = v31;
      dispatch thunk of AnyColorBox.resolve(in:)();
      v87 = v67;
      v92 = v68;
      v85 = v69;
      v89 = v70;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      result = swift_release();
      v71.i64[0] = v87;
      v71.i64[1] = v85;
      v72 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(v89, v92), 0x20uLL), v71);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_release();
      v72 = 0uLL;
    }
    *v77 = v72;
    v77[1].i8[0] = v66 == 0;
    return result;
  }
  *(_QWORD *)&v94 = v32;
  *((_QWORD *)&v94 + 1) = v31;
  if (!EnvironmentValues.foregroundStyle.getter())
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(v29);
    swift_release();
    swift_release();
    outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    v37 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_39;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  outlined consume of Image.Location(v29);
  swift_release();
  swift_release();
  v74 = v32;
  v120 = 0u;
  v121 = 0u;
  v122 = 1;
  v104 = 5;
  _ShapeStyle_Shape.init(operation:result:environment:foregroundStyle:bounds:role:)();
  dispatch thunk of AnyShapeStyleBox.apply(to:)();
  v94 = v105;
  *(_QWORD *)&v95 = v106;
  BYTE8(v95) = v107;
  v79 = v108;
  *(_QWORD *)&v96 = v108;
  BYTE8(v96) = v109;
  v97 = v110;
  v98 = v111;
  v99 = v112;
  *(_QWORD *)&v100 = v113;
  BYTE8(v100) = v114;
  *(_WORD *)((char *)&v100 + 9) = v115;
  _ShapeStyle_Shape.stylePack.getter();
  v103 = v32;
  v102 = 0;
  _ShapeStyle_Pack.subscript.getter();
  result = swift_bridgeObjectRelease();
  v91 = v106;
  v84 = *((_QWORD *)&v95 + 1) >> 1;
  v47 = (*((_QWORD *)&v95 + 1) >> 1) - v106;
  if (!__OFSUB__(*((_QWORD *)&v95 + 1) >> 1, v106))
  {
    v48 = v96;
    v49 = v96 + v47;
    v38 = v75;
    if (__OFADD__(v96, v47))
      goto LABEL_66;
    result = v94;
    if (v49 == v96)
    {
      swift_unknownObjectRelease();
      outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
      swift_release();
      outlined consume of _ShapeStyle_Shape.Result(v108, v109);
      swift_release();
      swift_release();
      swift_release();
      v37 = (char *)MEMORY[0x1E0DEE9D8];
      LOBYTE(v30) = v44;
LABEL_58:
      v32 = v74;
      goto LABEL_59;
    }
    v73 = v109;
    if (v106 <= 0 && *((_QWORD *)&v95 + 1) >= 2uLL)
    {
      v50 = (__int128 *)*((_QWORD *)&v94 + 1);
      v37 = (char *)MEMORY[0x1E0DEE9D8];
      v51 = 1;
      while (1)
      {
        v52 = *v50;
        v53 = v50[1];
        v54 = v50[3];
        v96 = v50[2];
        v97 = v54;
        v94 = v52;
        v95 = v53;
        v55 = v50[4];
        v56 = v50[5];
        v57 = v50[6];
        v101 = *((_QWORD *)v50 + 14);
        v99 = v56;
        v100 = v57;
        v98 = v55;
        if (v48 + v51 - 1 >= v49)
          goto LABEL_64;
        outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v94);
        result = _ShapeStyle_Pack.Style.color.getter();
        if ((v59 & 1) != 0)
          break;
        if (!v37)
          goto LABEL_67;
        v60 = result;
        v61 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
        v63 = *((_QWORD *)v37 + 2);
        v62 = *((_QWORD *)v37 + 3);
        if (v63 >= v62 >> 1)
          v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, v37);
        *((_QWORD *)v37 + 2) = v63 + 1;
        v64 = &v37[16 * v63];
        *((_QWORD *)v64 + 4) = v60;
        *((_QWORD *)v64 + 5) = v61;
        result = outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v94);
        if (v47 == v51)
        {
          swift_unknownObjectRelease();
          outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
          goto LABEL_57;
        }
        if (v51 >= v91)
        {
          v50 = (__int128 *)((char *)v50 + 120);
          if (v51++ < v84)
            continue;
        }
        goto LABEL_63;
      }
      swift_unknownObjectRelease();
      outlined retain of Image.Resolved?((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
      outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v94);
LABEL_57:
      swift_release();
      outlined consume of _ShapeStyle_Shape.Result(v79, v73);
      swift_release();
      swift_release();
      swift_release();
      v38 = v75;
      v31 = v76;
      LOBYTE(v30) = v44;
      goto LABEL_58;
    }
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

uint64_t SymbolEffectArray.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (i = 0; ; i += 48)
    {
      v6 = *(_QWORD *)(a2 + i + 32);
      v7 = *(_QWORD *)(a2 + i + 40);
      v8 = *(_QWORD *)(a2 + i + 48);
      v9 = *(_WORD *)(a2 + i + 56);
      outlined copy of _SymbolEffect.Storage(v6, v7, v8, v9);
      ProtobufEncoder.messageField<A>(_:_:)();
      if (v2)
        break;
      outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
      if (!--v3)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return outlined consume of _SymbolEffect.Storage(v6, v7, v8, v9);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SymbolEffectArray()
{
  lazy protocol witness table accessor for type SymbolEffectArray and conformance SymbolEffectArray();
  return CodableByProtobuf.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SymbolEffectArray()
{
  lazy protocol witness table accessor for type SymbolEffectArray and conformance SymbolEffectArray();
  return CodableByProtobuf.encode(to:)();
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance SymbolEffectArray(uint64_t a1)
{
  uint64_t *v1;

  return SymbolEffectArray.encode(to:)(a1, *v1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance SymbolEffectArray@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized SymbolEffectArray.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SymbolEffectArray(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.init(value:label:currentValueLabel:minimumValueLabel:maximumValueLabel:tint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, double *a6@<X8>, double a7@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  double *v41;
  uint64_t v42;
  uint64_t v43;

  v37 = a3;
  v38 = a4;
  v42 = a2;
  v43 = a1;
  v41 = a6;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v35 - v15;
  v40 = *a5;
  v39 = *((unsigned __int8 *)a5 + 8);
  v17 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
  v19 = (_QWORD *)swift_allocObject();
  v20 = (_QWORD *)MEMORY[0x1E0CE0C28];
  v36 = (uint64_t)v19 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v19 + 8);
  outlined init with take of TableCellFormula((uint64_t)v16, v36, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v18(v16, 1, 1, v17);
  v21 = (_QWORD *)swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v21 + *(_QWORD *)(*v20 + *v21 + 8), (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v18(v16, 1, 1, v17);
  v22 = (_QWORD *)swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v22 + *(_QWORD *)(*v20 + *v22 + 8), (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v18(v16, 1, 1, v17);
  v23 = (_QWORD *)swift_allocObject();
  v24 = v20;
  outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v23 + *(_QWORD *)(*v20 + *v23 + 8), (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v43, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v25 = v36;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v12, v25, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v42, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v26 = v24;
  v27 = (uint64_t)v21 + *(_QWORD *)(*v24 + *v21 + 8);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v12, v27, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v28 = v37;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v37, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v29 = (uint64_t)v22 + *(_QWORD *)(*v26 + *v22 + 8);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v12, v29, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v30 = v38;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v38, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v31 = (uint64_t)v23 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v23 + 8);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined assign with copy of ToolbarStorage.NavigationProperties?((uint64_t)v12, v31, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_endAccess();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v30, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v28, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v42, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v43, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  result = swift_bridgeObjectRelease();
  v34 = v40;
  v33 = v41;
  *v41 = a7;
  *((_QWORD *)v33 + 1) = v19;
  *((_QWORD *)v33 + 2) = v21;
  *((_QWORD *)v33 + 3) = v22;
  *((_QWORD *)v33 + 4) = v23;
  *((_QWORD *)v33 + 5) = v34;
  *((_BYTE *)v33 + 48) = v39;
  return result;
}

id WidgetAuxiliaryViewMetadata.text.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t WidgetAuxiliaryViewMetadata.image.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v9;

  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0 + *(int *)(v5 + 24), (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    v7 = (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?;
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return *(_QWORD *)v4;
    v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, v7);
  return 0;
}

uint64_t WidgetAuxiliaryViewMetadata.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  char *v12;
  char v13;
  __int128 v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;

  v3 = v1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys, (uint64_t)&unk_1E1AF4D60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v19 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_QWORD *)&v19 = *v3;
  v23 = 0;
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    *(_QWORD *)&v19 = v3[1];
    v23 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
    LOBYTE(v19) = 2;
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic, (uint64_t)&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(_QWORD *)&v19 = *(_QWORD *)((char *)v3 + v11[7]);
    v23 = 3;
    type metadata accessor for [WidgetAuxiliaryViewMetadata](0);
    lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A], (uint64_t (*)(uint64_t))type metadata accessor for [WidgetAuxiliaryViewMetadata], lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata, MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = 4;
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress and conformance WidgetAuxiliaryViewMetadata.Progress, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress, (uint64_t)&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12 = (char *)v3 + v11[9];
    v13 = v12[48];
    v14 = *((_OWORD *)v12 + 1);
    v19 = *(_OWORD *)v12;
    v20 = v14;
    v21 = *((_OWORD *)v12 + 2);
    LOBYTE(v22) = v13;
    v23 = 5;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = 6;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v15 = (__int128 *)((char *)v3 + v11[11]);
    v16 = v15[1];
    v19 = *v15;
    v20 = v16;
    v17 = v15[3];
    v21 = v15[2];
    v22 = v17;
    v23 = 7;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t WidgetAuxiliaryViewMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  uint64_t *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __int128 v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  _QWORD *v65;
  _QWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char v73;

  v54 = a2;
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v62 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  *(_QWORD *)&v61 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v60 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys, (uint64_t)&unk_1E1AF4D60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  *(_QWORD *)&v64 = v12;
  v59 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v51 - v14;
  v16 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (uint64_t **)((char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v19 = 0;
  v19[1] = 0;
  v21 = (uint64_t)v19 + *(int *)(v20 + 24);
  v22 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v57 = v21;
  v58 = v22;
  v23(v21, 1, 1);
  v56 = v16[7];
  *(_QWORD *)((char *)v19 + v56) = 0;
  v24 = (uint64_t)v19 + v16[8];
  v25 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v55 = v24;
  v26(v24, 1, 1, v25);
  v27 = (char *)v19 + v16[9];
  v27[48] = 0;
  *((_OWORD *)v27 + 1) = 0u;
  *((_OWORD *)v27 + 2) = 0u;
  *(_OWORD *)v27 = 0u;
  v28 = (uint64_t)v19 + v16[10];
  v29 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  v30 = v16[11];
  v66 = v19;
  v31 = (_QWORD *)((char *)v19 + v30);
  *(_OWORD *)v31 = xmmword_187BF9840;
  *((_OWORD *)v31 + 1) = 0u;
  *((_OWORD *)v31 + 2) = 0u;
  *((_OWORD *)v31 + 3) = 0u;
  v32 = a1[3];
  v65 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v32);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys();
  *(_QWORD *)&v63 = v15;
  v33 = v67;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v33)
  {
    v39 = (uint64_t)v66;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  }
  else
  {
    v34 = (uint64_t)v60;
    *(_QWORD *)&v67 = v25;
    v53 = (uint64_t *)v27;
    v52 = v28;
    v35 = v61;
    v51 = v31;
    v36 = v59;
    v37 = (uint64_t)v62;
    v73 = 0;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v39 = (uint64_t)v66;
    *v66 = v68;
    v73 = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_QWORD *)(v39 + 8) = v68;
    LOBYTE(v68) = 2;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic and conformance WidgetAuxiliaryViewMetadata.Graphic, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic, (uint64_t)&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of WeakBox<Swift.AnyObject>(v34, v57, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    type metadata accessor for [WidgetAuxiliaryViewMetadata](0);
    v73 = 3;
    lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A], (uint64_t (*)(uint64_t))type metadata accessor for [WidgetAuxiliaryViewMetadata], lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v40 = v68;
    v41 = v56;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v39 + v41) = v40;
    LOBYTE(v68) = 4;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress and conformance WidgetAuxiliaryViewMetadata.Progress, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress, (uint64_t)&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of WeakBox<Swift.AnyObject>(v35, v55, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
    v73 = 5;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v67 = v68;
    v61 = v69;
    v42 = v70;
    v43 = v71;
    v44 = v53;
    outlined consume of WidgetAuxiliaryViewMetadata.Gauge?(*v53, v53[1]);
    v45 = v61;
    *(_OWORD *)v44 = v67;
    *((_OWORD *)v44 + 1) = v45;
    *((_OWORD *)v44 + 2) = v42;
    *((_BYTE *)v44 + 48) = v43;
    LOBYTE(v68) = 6;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of WeakBox<Swift.AnyObject>(v37, v52, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    v73 = 7;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v46 = (uint64_t)v65;
    (*(void (**)(_QWORD, _QWORD))(v36 + 8))(v63, v64);
    v67 = v68;
    v63 = v70;
    v64 = v69;
    v47 = v71;
    v48 = v72;
    v49 = v51;
    outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(*v51, v51[1]);
    v50 = v64;
    *(_OWORD *)v49 = v67;
    *((_OWORD *)v49 + 1) = v50;
    *((_OWORD *)v49 + 2) = v63;
    v49[6] = v47;
    v49[7] = v48;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v39, v54, type metadata accessor for WidgetAuxiliaryViewMetadata);
    __swift_destroy_boxed_opaque_existential_1(v46);
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v39, type metadata accessor for WidgetAuxiliaryViewMetadata);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata(_QWORD *a1)
{
  return WidgetAuxiliaryViewMetadata.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys()
{
  return 1954047348;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t WidgetAuxiliaryViewMetadata.Text.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  void *v24;

  v20 = a2;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Text.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys, (uint64_t)&unk_1E1AF4F38, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v19 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v10 = v6;
    v11 = v20;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = (uint64_t)v22;
    v13 = v23;
    outlined copy of Data._Representation((uint64_t)v22, v23);
    ProtobufDecoder.init(_:)();
    CodableAttributedString.init(from:)();
    v19 = v5;
    v15 = v10;
    v16 = v24;
    v21 = v24;
    v17 = CodableAttributedString.base.getter();
    outlined consume of Data._Representation(v12, v13);

    v18 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v19);
    *v11 = v17;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.encode(to:)(_QWORD *a1)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[2];
  void *v19;
  unint64_t v20;
  void *v21;

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Text.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys, (uint64_t)&unk_1E1AF4F38, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v18 - v7;
  v9 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v9;
  CodableAttributedString.init(_:)();
  v12 = v18[1];
  v11 = v19;
  v21 = v19;
  v13 = static ProtobufEncoder.encoding<A>(_:)();
  if (v12)
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    v16 = v13;
    v17 = v14;

    v19 = (void *)v16;
    v20 = v17;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return outlined consume of Data._Representation(v16, v17);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Text@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Text.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Text(_QWORD *a1)
{
  return WidgetAuxiliaryViewMetadata.Text.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6567616D69;
  else
    return 0x64656D616ELL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized WidgetAuxiliaryViewMetadata.Graphic.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  void *v46;
  unint64_t v47;
  void *v48;

  v40 = a2;
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v43 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  v41 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v6);
  v39 = (uint64_t)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Graphic.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys, (uint64_t)&unk_1E1AF50B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v42 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v38 - v11;
  v13 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v38 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys();
  v21 = (uint64_t)v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
    goto LABEL_3;
  v22 = v41;
  v38[0] = v16;
  v38[1] = v13;
  v45 = v20;
  v23 = a1;
  LOBYTE(v46) = 0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named and conformance WidgetAuxiliaryViewMetadata.Graphic.Named, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named, (uint64_t)&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  v24 = (uint64_t)v43;
  v25 = v42;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v24, 1, v44) != 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v25);
    v29 = v39;
    outlined init with take of TableCellFormula(v24, v39, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    v30 = v29;
    v31 = (uint64_t)v45;
    outlined init with take of TableCellFormula(v30, (uint64_t)v45, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    swift_storeEnumTagMultiPayload();
LABEL_9:
    outlined init with take of TableCellFormula(v31, v40, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    v26 = (uint64_t)v23;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v24, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named?);
  LOBYTE(v48) = 1;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v28 = v47;
  if (v47 >> 60 != 15)
  {
    v32 = (uint64_t)v46;
    outlined copy of Data._Representation((uint64_t)v46, v47);
    ProtobufDecoder.init(_:)();
    CodablePlatformImage.init(from:)();
    v33 = v25;
    v34 = v48;
    v44 = CodablePlatformImage.kitImage.getter();
    outlined consume of Data?(v32, v28);

    v35 = v46;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v33);
    objc_opt_self();
    v36 = swift_dynamicCastObjCClassUnconditional();
    v37 = v38[0];
    *(_QWORD *)v38[0] = v36;
    swift_storeEnumTagMultiPayload();
    v31 = (uint64_t)v45;
    outlined init with take of TableCellFormula(v37, (uint64_t)v45, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    goto LABEL_9;
  }
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error();
  swift_allocError();
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v25);
  a1 = v23;
LABEL_3:
  v26 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

void WidgetAuxiliaryViewMetadata.Graphic.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  void *v27;

  v21 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1E0C80A78](v21, v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (id *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Graphic.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys, (uint64_t)&unk_1E1AF50B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v10 = v9;
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v21 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, (uint64_t)v8, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = v10;
    v15 = *v8;
    v16 = v23;
    CodablePlatformImage.init(_:)();
    if (v16)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v10);

    }
    else
    {
      v17 = v25;
      v27 = v25;
      v18 = static ProtobufEncoder.encoding<A>(_:)();
      v20 = v19;

      v25 = (void *)v18;
      v26 = v20;
      LOBYTE(v27) = 1;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v14);

      outlined consume of Data._Representation(v18, v20);
    }
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v8, (uint64_t)v4, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    LOBYTE(v25) = 0;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named and conformance WidgetAuxiliaryViewMetadata.Graphic.Named, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named, (uint64_t)&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v10);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Graphic@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Graphic.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Graphic(_QWORD *a1)
{
  WidgetAuxiliaryViewMetadata.Graphic.encode(to:)(a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  char v12;
  __int128 *v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int128 v20;
  char v21;
  char v22;

  v3 = v1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys, (uint64_t)&unk_1E1AF51D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v20 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
    LOBYTE(v20) = 1;
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location, (uint64_t)&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = *(_BYTE *)(v3 + v11[6] + 4);
    LOBYTE(v20) = 2;
    v22 = v12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v20) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(_QWORD *)&v20 = *(_QWORD *)(v3 + v11[8]);
    v22 = 4;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Color.Resolved], MEMORY[0x1E0CE7110], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [Color.Resolved] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [Color.Resolved] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v13 = (__int128 *)(v3 + v11[9]);
    v14 = *((_BYTE *)v13 + 16);
    v20 = *v13;
    v21 = v14;
    v22 = 5;
    lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v20) = *(_BYTE *)(v3 + v11[10]);
    v22 = 6;
    lazy protocol witness table accessor for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(_QWORD *)&v20 = *(_QWORD *)(v3 + v11[11]);
    v22 = 7;
    type metadata accessor for ProtobufCodable<SymbolEffectArray>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ProtobufCodable<SymbolEffectArray> and conformance ProtobufCodable<A>, (uint64_t (*)(uint64_t))type metadata accessor for ProtobufCodable<SymbolEffectArray>, MEMORY[0x1E0CE2EA0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v15 = (uint64_t *)(v3 + v11[12]);
    v16 = *v15;
    v17 = *((_WORD *)v15 + 6);
    v18 = *((_DWORD *)v15 + 2);
    LOBYTE(v15) = *((_BYTE *)v15 + 14);
    *(_QWORD *)&v20 = v16;
    DWORD2(v20) = v18;
    WORD6(v20) = v17;
    BYTE14(v20) = (_BYTE)v15;
    v22 = 8;
    type metadata accessor for ProtobufCodable<ContentTransition>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ProtobufCodable<ContentTransition> and conformance ProtobufCodable<A>, (uint64_t (*)(uint64_t))type metadata accessor for ProtobufCodable<ContentTransition>, MEMORY[0x1E0CE2EA0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  int *v50;
  __int128 v51;
  char v52;
  char v53;

  v41 = a2;
  v43 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  MEMORY[0x1E0C80A78](v43, v3);
  v42 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys, (uint64_t)&unk_1E1AF51D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v44 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v37 - v8;
  v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (uint64_t *)((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (char *)v13 + v14[6];
  *(_DWORD *)v15 = 0;
  v15[4] = 1;
  v16 = v14[7];
  *((_BYTE *)v13 + v16) = 0;
  v46 = v14[8];
  v47 = a1;
  *(uint64_t *)((char *)v13 + v46) = 0;
  v17 = (char *)v13 + v14[9];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  v50 = v14;
  v18 = v14[10];
  v48 = v13;
  *((_BYTE *)v13 + v18) = 8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys();
  v45 = v9;
  v19 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v39 = v17;
    v40 = v15;
    v20 = (uint64_t)v42;
    v38 = v18;
    v49 = v6;
    LOBYTE(v51) = 0;
    v21 = v44;
    v22 = KeyedDecodingContainer.decode(_:forKey:)();
    v23 = (uint64_t)v48;
    *v48 = v22;
    *(_QWORD *)(v23 + 8) = v24;
    LOBYTE(v51) = 1;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location, (uint64_t)&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v25 = v50;
    outlined init with take of TableCellFormula(v20, v23 + v50[5], type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    LOBYTE(v51) = 2;
    v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v27 = v40;
    *(_DWORD *)v40 = v26;
    v27[4] = BYTE4(v26) & 1;
    LOBYTE(v51) = 3;
    *(_BYTE *)(v23 + v16) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Color.Resolved], MEMORY[0x1E0CE7110], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v53 = 4;
    lazy protocol witness table accessor for type [Color.Resolved] and conformance <A> [A](&lazy protocol witness table cache variable for type [Color.Resolved] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v28 = (uint64_t)v47;
    *(_QWORD *)(v23 + v46) = v51;
    v53 = 5;
    lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v29 = v52;
    v30 = v39;
    *(_OWORD *)v39 = v51;
    v30[16] = v29;
    v53 = 6;
    lazy protocol witness table accessor for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_BYTE *)(v23 + v38) = v51;
    type metadata accessor for ProtobufCodable<SymbolEffectArray>();
    v53 = 7;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ProtobufCodable<SymbolEffectArray> and conformance ProtobufCodable<A>, (uint64_t (*)(uint64_t))type metadata accessor for ProtobufCodable<SymbolEffectArray>, MEMORY[0x1E0CE2EA8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v31 = v49;
    *(_QWORD *)(v23 + v25[11]) = v51;
    type metadata accessor for ProtobufCodable<ContentTransition>();
    v53 = 8;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ProtobufCodable<ContentTransition> and conformance ProtobufCodable<A>, (uint64_t (*)(uint64_t))type metadata accessor for ProtobufCodable<ContentTransition>, MEMORY[0x1E0CE2EA8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v45, v21);
    v32 = DWORD2(v51);
    v33 = WORD6(v51);
    v34 = BYTE14(v51);
    v35 = v23 + v25[12];
    *(_QWORD *)v35 = v51;
    *(_DWORD *)(v35 + 8) = v32;
    *(_WORD *)(v35 + 12) = v33;
    *(_BYTE *)(v35 + 14) = v34;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v23, v41, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    __swift_destroy_boxed_opaque_existential_1(v28);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v23, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Graphic.Named.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named(_QWORD *a1)
{
  return WidgetAuxiliaryViewMetadata.Graphic.Named.encode(to:)(a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.Location.encode(to:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys, (uint64_t)&unk_1E1AF5388, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v37 = v3;
  v34 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v32 = (char *)&v29 - v5;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys, (uint64_t)&unk_1E1AF52F8, v2);
  v36 = v6;
  v33 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v31 = (char *)&v29 - v8;
  v35 = type metadata accessor for URL();
  v30 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys, (uint64_t)&unk_1E1AF5268, v2);
  v17 = v16;
  v38 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v29 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v39, (uint64_t)v15, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v41 = 1;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys();
    v21 = v32;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v22 = v37;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v22);
  }
  else
  {
    v23 = v30;
    v24 = v15;
    v25 = v35;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v11, v24, v35);
    v40 = 0;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys();
    v26 = v31;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
    v27 = v36;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v26, v27);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v25);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v20, v17);
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.Location.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  char v61;

  v58 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys, (uint64_t)&unk_1E1AF5388, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v50 = v4;
  v53 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v57 = (char *)&v46 - v6;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys, (uint64_t)&unk_1E1AF52F8, v3);
  v8 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  v52 = v8;
  MEMORY[0x1E0C80A78](v7, v9);
  v54 = (char *)&v46 - v10;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys, (uint64_t)&unk_1E1AF5268, v3);
  v55 = *(_QWORD *)(v11 - 8);
  v56 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v46 - v13;
  v15 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v46 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v46 - v25;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys();
  v27 = v59;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v27)
    goto LABEL_7;
  v46 = v18;
  v47 = v26;
  v48 = v22;
  v49 = v15;
  v29 = v57;
  v28 = v58;
  v59 = a1;
  v30 = v56;
  v31 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v31 + 16) != 1)
  {
    v36 = type metadata accessor for DecodingError();
    swift_allocError();
    v38 = v37;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v38 = v49;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x1E0DEC450], v36);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v30);
    a1 = v59;
LABEL_7:
    v41 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v41);
  }
  if ((*(_BYTE *)(v31 + 32) & 1) != 0)
  {
    v61 = 1;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys();
    v32 = v29;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v33 = v50;
    v34 = KeyedDecodingContainer.decode(_:forKey:)();
    v35 = v55;
    v43 = v34;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v32, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v30);
    v44 = (uint64_t)v46;
    *v46 = v43 & 1;
  }
  else
  {
    v60 = 0;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys();
    v39 = v54;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for URL();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
    v44 = (uint64_t)v48;
    v40 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v40);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v30);
  }
  swift_storeEnumTagMultiPayload();
  v45 = (uint64_t)v47;
  outlined init with take of TableCellFormula(v44, (uint64_t)v47, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  outlined init with take of TableCellFormula(v45, v28, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  v41 = (uint64_t)v59;
  return __swift_destroy_boxed_opaque_existential_1(v41);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Graphic.Named.Location.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location(_QWORD *a1)
{
  return WidgetAuxiliaryViewMetadata.Graphic.Named.Location.encode(to:)(a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v3 = v1;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Progress.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys, (uint64_t)&unk_1E1AF5418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v15 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind and conformance WidgetAuxiliaryViewMetadata.Progress.Kind, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind, (uint64_t)&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
    v15 = *(_QWORD *)(v3 + v11[5]);
    v17 = 1;
    type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?> and conformance <A> MutableBox<A>, (uint64_t (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>, (uint64_t)&protocol conformance descriptor for <A> MutableBox<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v15 = *(_QWORD *)(v3 + v11[6]);
    v17 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = (uint64_t *)(v3 + v11[7]);
    v13 = *v12;
    LOBYTE(v12) = *((_BYTE *)v12 + 8);
    v15 = v13;
    v16 = (char)v12;
    v17 = 3;
    lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  char v43;

  v40 = a1;
  v32 = a2;
  v34 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  MEMORY[0x1E0C80A78](v34, v2);
  v35 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Progress.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys, (uint64_t)&unk_1E1AF5418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v36 = v4;
  v33 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v31 - v6;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(int *)(v16 + 20);
  v18 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v11, 1, 1, v18);
  type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
  v20 = (_QWORD *)swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v20 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v20 + 8), (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v38 = v17;
  *(_QWORD *)&v15[v17] = v20;
  v21 = v7;
  v22 = *(int *)(v12 + 24);
  v19(v11, 1, 1, v18);
  v23 = (_QWORD *)swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v23 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v23 + 8), (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v37 = v22;
  *(_QWORD *)&v15[v22] = v23;
  v24 = &v15[*(int *)(v12 + 28)];
  *(_QWORD *)v24 = 0;
  v24[8] = 0;
  __swift_project_boxed_opaque_existential_1(v40, v40[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys();
  v25 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v39 = v20;
    v26 = v33;
    LOBYTE(v41) = 0;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind and conformance WidgetAuxiliaryViewMetadata.Progress.Kind, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind, (uint64_t)&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    v27 = (uint64_t)v35;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of TableCellFormula(v27, (uint64_t)v15, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    v43 = 1;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?> and conformance <A> MutableBox<A>, (uint64_t (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>, (uint64_t)&protocol conformance descriptor for <A> MutableBox<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_release();
    *(_QWORD *)&v15[v38] = v41;
    v43 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_release();
    *(_QWORD *)&v15[v37] = v41;
    v43 = 3;
    lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v36);
    v28 = v41;
    v29 = v42;
    swift_bridgeObjectRelease();
    *(_QWORD *)v24 = v28;
    v24[8] = v29;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, v32, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Progress@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Progress.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Progress(_QWORD *a1)
{
  return WidgetAuxiliaryViewMetadata.Progress.encode(to:)(a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.Kind.encode(to:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys, (uint64_t)&unk_1E1AF5538, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v36 = v3;
  v31 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v40 = (char *)&v31 - v5;
  type metadata accessor for ClosedRange<Date>();
  v35 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v34 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys, (uint64_t)&unk_1E1AF55C8, v2);
  v33 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v32 = (char *)&v31 - v12;
  v13 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys, (uint64_t)&unk_1E1AF54A8, v2);
  v18 = v17;
  v38 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v31 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v39, (uint64_t)v16, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v22 = v31;
    type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    v23 = (uint64_t)v16;
    v24 = v34;
    outlined init with take of TableCellFormula(v23, v34, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v46 = 1;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v45 = 0;
    lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, lazy protocol witness table accessor for type Date and conformance Date, MEMORY[0x1E0DEA4C8]);
    v25 = v36;
    v26 = v37;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v26)
    {
      v44 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v40, v25);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v24, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    v43 = 0;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys();
    v27 = v32;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v42 = 0;
    v28 = v33;
    v29 = v37;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    if (!v29)
    {
      v41 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v27, v28);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v21, v18);
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.Kind.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;

  v52 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys, (uint64_t)&unk_1E1AF5538, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v56 = v4;
  v54 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v58 = (char *)&v50 - v6;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys, (uint64_t)&unk_1E1AF55C8, v3);
  v55 = v7;
  v53 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v57 = (char *)&v50 - v9;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys, (uint64_t)&unk_1E1AF54A8, v3);
  v59 = *(_QWORD *)(v10 - 8);
  v60 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v50 - v12;
  v14 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (uint64_t *)((char *)&v50 - v20);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v50 - v24;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys();
  v26 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26)
    goto LABEL_7;
  v50 = v21;
  v51 = v17;
  v61 = a1;
  v27 = v60;
  v28 = KeyedDecodingContainer.allKeys.getter();
  v29 = (char *)v28;
  if (*(_QWORD *)(v28 + 16) != 1)
  {
    v32 = type metadata accessor for DecodingError();
    swift_allocError();
    v34 = v33;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v34 = v14;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, *MEMORY[0x1E0DEC450], v32);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v13, v27);
    a1 = v61;
LABEL_7:
    v36 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v36);
  }
  if ((*(_BYTE *)(v28 + 32) & 1) != 0)
  {
    v67 = 1;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys();
    v30 = v58;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v57 = v29;
    type metadata accessor for ClosedRange<Date>();
    v66 = 0;
    lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, lazy protocol witness table accessor for type Date and conformance Date, MEMORY[0x1E0DEA4F0]);
    v31 = v56;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v65 = 1;
    v40 = KeyedDecodingContainer.decode(_:forKey:)();
    v41 = v59;
    LODWORD(v55) = v40;
    type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    v53 = *(int *)(v47 + 48);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v30, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v27);
    v48 = (uint64_t)v51;
    v51[v53] = v55 & 1;
  }
  else
  {
    v64 = 0;
    lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys();
    v35 = v57;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v63 = 0;
    v38 = v55;
    v39 = v35;
    v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LODWORD(v58) = v43;
    v62 = 1;
    v44 = KeyedDecodingContainer.decode(_:forKey:)();
    v45 = v38;
    v46 = v59;
    v49 = *(void (**)(char *, uint64_t))(v53 + 8);
    LODWORD(v56) = v44;
    v49(v39, v45);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v27);
    v48 = (uint64_t)v50;
    *v50 = v42;
    *(_BYTE *)(v48 + 8) = v58 & 1;
    *(_BYTE *)(v48 + 9) = v56 & 1;
  }
  swift_storeEnumTagMultiPayload();
  outlined init with take of TableCellFormula(v48, (uint64_t)v25, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  outlined init with take of TableCellFormula((uint64_t)v25, v52, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
  v36 = (uint64_t)v61;
  return __swift_destroy_boxed_opaque_existential_1(v36);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Progress.Kind@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Progress.Kind.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Progress.Kind(_QWORD *a1)
{
  return WidgetAuxiliaryViewMetadata.Progress.Kind.encode(to:)(a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Gauge.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys, (uint64_t)&unk_1E1AF4FF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v16 - v8;
  v10 = *(_QWORD *)(v1 + 8);
  v20 = *(_QWORD *)(v1 + 16);
  v21 = v10;
  v11 = *(_QWORD *)(v1 + 24);
  v18 = *(_QWORD *)(v1 + 32);
  v19 = v11;
  v16 = *(_QWORD *)(v1 + 40);
  v17 = *(unsigned __int8 *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys();
  v12 = v5;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v22) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v14 = v19;
    v13 = v20;
    v22 = v21;
    v24 = 1;
    type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?> and conformance <A> MutableBox<A>, (uint64_t (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>, (uint64_t)&protocol conformance descriptor for <A> MutableBox<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v22 = v13;
    v24 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v22 = v14;
    v24 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v22 = v18;
    v24 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v22 = v16;
    v23 = v17;
    v24 = 5;
    lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v12);
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  char v55;
  char v56;

  v52 = a1;
  v46 = a2;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Gauge.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys, (uint64_t)&unk_1E1AF4FF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v49 = v2;
  v47 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v46 - v4;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v46 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v46 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v46 - v20;
  v22 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v23(v21, 1, 1, v22);
  type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
  v24 = (_QWORD *)swift_allocObject();
  v25 = (_QWORD *)MEMORY[0x1E0CE0C28];
  v26 = *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v24 + 8);
  v51 = v24;
  outlined init with take of TableCellFormula((uint64_t)v21, (uint64_t)v24 + v26, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v23(v17, 1, 1, v22);
  v27 = (_QWORD *)swift_allocObject();
  v28 = *(_QWORD *)(*v25 + *v27 + 8);
  v50 = v27;
  outlined init with take of TableCellFormula((uint64_t)v17, (uint64_t)v27 + v28, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v23(v13, 1, 1, v22);
  v29 = (_QWORD *)swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v13, (uint64_t)v29 + *(_QWORD *)(*v25 + *v29 + 8), (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v23(v9, 1, 1, v22);
  v30 = v52;
  v31 = (_QWORD *)swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v31 + *(_QWORD *)(*v25 + *v31 + 8), (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  __swift_project_boxed_opaque_existential_1(v30, v30[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys();
  v48 = v5;
  v32 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v32)
  {
    v33 = v47;
    LOBYTE(v54) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v35 = v34;
    v56 = 1;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?> and conformance <A> MutableBox<A>, (uint64_t (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>, (uint64_t)&protocol conformance descriptor for <A> MutableBox<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v37 = v54;
    swift_retain();
    swift_release();
    v56 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v53 = v37;
    v38 = v54;
    swift_retain();
    swift_release();
    v56 = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v51 = v38;
    v39 = v54;
    swift_retain();
    swift_release();
    v56 = 4;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v40 = v54;
    swift_retain();
    swift_release();
    v56 = 5;
    lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v41 = v53;
    v42 = v51;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v48, v49);
    v43 = v54;
    v44 = v41;
    LOBYTE(v41) = v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v45 = v46;
    *v46 = v35;
    v45[1] = v44;
    v45[2] = v42;
    v45[3] = v39;
    v45[4] = v40;
    v45[5] = v43;
    *((_BYTE *)v45 + 48) = (_BYTE)v41;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Gauge@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Gauge.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Gauge(_QWORD *a1)
{
  return WidgetAuxiliaryViewMetadata.Gauge.encode(to:)(a1);
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[8];
  char v15;
  char v16;
  char v17;
  char v18;

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys, (uint64_t)&unk_1E1AF4DF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v14 - v7;
  v9 = v1[2];
  v14[5] = v1[3];
  v14[6] = v9;
  v10 = v1[4];
  v14[3] = v1[5];
  v14[4] = v10;
  v11 = v1[6];
  v14[1] = v1[7];
  v14[2] = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = 0;
  v12 = v14[7];
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v12)
  {
    v17 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v16 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v15 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  char v33;
  char v34;
  char v35;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys, (uint64_t)&unk_1E1AF4DF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v28 - v9;
  v11 = a1[3];
  v31 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
  else
  {
    v30 = v7;
    v35 = 0;
    v12 = v6;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v16 = v15;
    v34 = 1;
    swift_bridgeObjectRetain();
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v19 = v18;
    v29 = v17;
    v33 = 2;
    swift_bridgeObjectRetain();
    v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v22 = v21;
    v28 = v20;
    v32 = 3;
    swift_bridgeObjectRetain();
    v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v25 = v24;
    v26 = *(void (**)(char *, uint64_t))(v30 + 8);
    v30 = v23;
    v26(v10, v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v14;
    a2[1] = v16;
    a2[2] = v29;
    a2[3] = v19;
    a2[4] = v28;
    a2[5] = v22;
    v27 = (uint64_t)v31;
    a2[6] = v30;
    a2[7] = v25;
    __swift_destroy_boxed_opaque_existential_1(v27);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance WidgetAuxiliaryViewMetadata.Accessibility@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return WidgetAuxiliaryViewMetadata.Accessibility.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WidgetAuxiliaryViewMetadata.Accessibility(_QWORD *a1)
{
  return WidgetAuxiliaryViewMetadata.Accessibility.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MutableBox<A><A>.CodingKeys()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (uint64_t (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys, (uint64_t)&protocol conformance descriptor for MutableBox<A><A>.CodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MutableBox<A><A>.CodingKeys()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (uint64_t (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys, (uint64_t)&protocol conformance descriptor for MutableBox<A><A>.CodingKeys);
  return CodingKey.debugDescription.getter();
}

_QWORD *MutableBox<A>.init(from:)(_QWORD *a1)
{
  return specialized MutableBox<A>.init(from:)(a1);
}

uint64_t MutableBox<A>.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = v1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170], v8);
  v10 = v9;
  v19 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v19 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys(0, v14, v15, v16);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (uint64_t (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys, (uint64_t)&protocol conformance descriptor for MutableBox<A><A>.CodingKeys);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17 = (uint64_t)v2 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v2 + 8);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v17, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata? and conformance <A> A?, (uint64_t (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata?, lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata, MEMORY[0x1E0DEE988]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v13, v10);
}

_QWORD *protocol witness for Decodable.init(from:) in conformance <A> MutableBox<A>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = specialized MutableBox<A>.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> MutableBox<A>(_QWORD *a1)
{
  return MutableBox<A>.encode(to:)(a1);
}

unint64_t WidgetAuxiliaryViewMetadata.debugDescription.getter()
{
  id *v0;
  id *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  int *v11;
  uint64_t *v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v26;

  v1 = v0;
  if (*v0)
  {
    v2 = *v0;
    v3 = objc_msgSend(v2, sel_string);
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

    v7._countAndFlagsBits = v4;
    v7._object = v6;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 10530;
    v8._object = (void *)0xE200000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = 0x222874786554;
    v9._object = (void *)0xE600000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v10._countAndFlagsBits = 2314;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_endAccess();

    swift_bridgeObjectRelease();
  }
  v11 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  specialized append #1 <A>(_:) in WidgetAuxiliaryViewMetadata.debugDescription.getter((uint64_t)v1 + v11[6]);
  specialized append #1 <A>(_:) in WidgetAuxiliaryViewMetadata.debugDescription.getter((uint64_t)v1 + v11[10]);
  v12 = (uint64_t *)((char *)v1 + v11[11]);
  v13 = v12[1];
  if (v13 != 1)
  {
    v26 = *v12;
    outlined copy of WidgetAuxiliaryViewMetadata.Accessibility?(*v12, v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = WidgetAuxiliaryViewMetadata.Accessibility.debugDescription.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v15._countAndFlagsBits = 2314;
    v15._object = (void *)0xE200000000000000;
    String.append(_:)(v15);
    swift_endAccess();
    swift_bridgeObjectRelease();
    outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(v26, v13);
    outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(v26, v13);
  }
  v16 = (uint64_t *)((char *)v1 + v11[9]);
  v17 = v16[1];
  if (v17)
  {
    v18 = *v16;
    outlined copy of WidgetAuxiliaryViewMetadata.Gauge?(*v16, v17);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v19._countAndFlagsBits = 0x6176286567756147;
    v19._object = (void *)0xEC0000003A65756CLL;
    String.append(_:)(v19);
    Double.write<A>(to:)();
    v20._countAndFlagsBits = 41;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v22._countAndFlagsBits = 2314;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    swift_endAccess();
    swift_bridgeObjectRelease();
    outlined consume of WidgetAuxiliaryViewMetadata.Gauge?(v18, v17);
    outlined consume of WidgetAuxiliaryViewMetadata.Gauge?(v18, v17);
  }
  specialized append #1 <A>(_:) in WidgetAuxiliaryViewMetadata.debugDescription.getter((uint64_t)v1 + v11[8]);
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 10506;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  return 0xD00000000000001CLL;
}

uint64_t specialized append #1 <A>(_:) in WidgetAuxiliaryViewMetadata.debugDescription.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?;
    v12 = (uint64_t)v5;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)v10, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    v19 = 2314;
    v20 = 0xE200000000000000;
    v13._countAndFlagsBits = WidgetAuxiliaryViewMetadata.Graphic.debugDescription.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14 = v19;
    v15 = (void *)v20;
    swift_beginAccess();
    v16._countAndFlagsBits = v14;
    v16._object = v15;
    String.append(_:)(v16);
    swift_endAccess();
    swift_bridgeObjectRelease();
    v12 = (uint64_t)v10;
    v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v12, v11);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
  v17 = 2314;
  v18 = 0xE200000000000000;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0058]);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13 = v17;
  v14 = (void *)v18;
  swift_beginAccess();
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_endAccess();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  Swift::String v22;

  type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?;
    v12 = (uint64_t)v5;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)v10, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress);
    v20 = 2314;
    v21 = 0xE200000000000000;
    v22._countAndFlagsBits = 0x73736572676F7250;
    v22._object = (void *)0xE900000000000028;
    v13._countAndFlagsBits = WidgetAuxiliaryViewMetadata.Progress.Kind.debugDescription.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v15 = v20;
    v16 = (void *)v21;
    swift_beginAccess();
    v17._countAndFlagsBits = v15;
    v17._object = v16;
    String.append(_:)(v17);
    swift_endAccess();
    swift_bridgeObjectRelease();
    v12 = (uint64_t)v10;
    v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v12, v11);
}

uint64_t WidgetAuxiliaryViewMetadata.Text.debugDescription.getter()
{
  id *v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  v1 = objc_msgSend(*v0, sel_string);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 10530;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  return 0x222874786554;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Text()
{
  id *v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  v1 = objc_msgSend(*v0, sel_string);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 10530;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  return 0x222874786554;
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t (*v10)(_QWORD);
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  _QWORD v20[2];

  v1 = v0;
  v2 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (id *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v9, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = *v9;
    v12 = objc_msgSend(*v9, sel_debugDescription);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v5, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
    v13 = WidgetAuxiliaryViewMetadata.Graphic.Named.debugDescription.getter();
    v15 = v16;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  }
  v20[0] = 0x2863696870617247;
  v20[1] = 0xE800000000000000;
  v17._countAndFlagsBits = v13;
  v17._object = v15;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 41;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  return v20[0];
}

uint64_t WidgetAuxiliaryViewMetadata.Graphic.Named.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v34;
  unint64_t v35;

  v1 = v0;
  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v1 + *(int *)(v11 + 20), (uint64_t)v10, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (*v10)
      v12 = 0x6D6574737973;
    else
      v12 = 0x6C616E7265746E69;
    if (*v10)
      v13 = (void *)0xE600000000000000;
    else
      v13 = (void *)0xE800000000000000;
  }
  else
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v3 + 32))(v6, v10, v2);
    v34 = 0x28656C646E7562;
    v35 = 0xE700000000000000;
    v14._countAndFlagsBits = URL.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 41;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v12 = v34;
    v13 = (void *)v35;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  v34 = 0;
  v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v16._countAndFlagsBits = 0x616E2864656D614ELL;
  v16._object = (void *)0xEC000000203A656DLL;
  String.append(_:)(v16);
  v17 = *v1;
  v18 = (void *)v1[1];
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0xEC000000203A6E6FLL;
  v20._countAndFlagsBits = 0x697461636F6C202CLL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v12;
  v21._object = v13;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x3A65756C6176202CLL;
  v22._object = (void *)0xE900000000000020;
  String.append(_:)(v22);
  if ((*((_BYTE *)v1 + *(int *)(v11 + 24) + 4) & 1) != 0)
  {
    v23 = 0xE200000000000000;
    v24 = 11565;
  }
  else
  {
    v24 = Float.description.getter();
    v23 = v25;
  }
  v26 = v23;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x73726F6C6F63202CLL;
  v27._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v27);
  if (WidgetAuxiliaryViewMetadata.Graphic.Named.colors.getter())
  {
    v28 = MEMORY[0x18D75CFC4]();
    v30 = v29;
    swift_bridgeObjectRelease();
  }
  else
  {
    v30 = (void *)0xE200000000000000;
    v28 = 23899;
  }
  v31._countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 41;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  return v34;
}

uint64_t WidgetAuxiliaryViewMetadata.Accessibility.debugDescription.getter()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;

  v2 = *v0;
  v1 = (void *)v0[1];
  v4 = v0[2];
  v3 = (void *)v0[3];
  v6 = v0[4];
  v5 = (void *)v0[5];
  _StringGuts.grow(_:)(52);
  v7._object = (void *)0x8000000187BE8520;
  v7._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v7);
  if (v1)
  {
    v8 = v1;
  }
  else
  {
    v2 = 7104878;
    v8 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v2;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x3A65756C6176202CLL;
  v10._object = (void *)0xE900000000000020;
  String.append(_:)(v10);
  if (v3)
    v11 = v4;
  else
    v11 = 7104878;
  if (v3)
    v12 = v3;
  else
    v12 = (void *)0xE300000000000000;
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x69746E656469202CLL;
  v14._object = (void *)0xEE00203A72656966;
  String.append(_:)(v14);
  if (v5)
    v15 = v6;
  else
    v15 = 7104878;
  if (v5)
    v16 = v5;
  else
    v16 = (void *)0xE300000000000000;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 10528;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  return 0;
}

uint64_t WidgetAuxiliaryViewMetadata.Gauge.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = 0x6176286567756147;
  v0._object = (void *)0xEC0000003A65756CLL;
  String.append(_:)(v0);
  Double.write<A>(to:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Gauge()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = 0x6176286567756147;
  v0._object = (void *)0xEC0000003A65756CLL;
  String.append(_:)(v0);
  Double.write<A>(to:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t WidgetAuxiliaryViewMetadata.Progress.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = WidgetAuxiliaryViewMetadata.Progress.Kind.debugDescription.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x73736572676F7250;
}

unint64_t WidgetAuxiliaryViewMetadata.Progress.Kind.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  int v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  unint64_t v19;
  char v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String v30;
  unint64_t v32;
  unint64_t v33;

  v1 = v0;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v9, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    v12 = v9[*(int *)(v11 + 48)];
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
    v32 = 0;
    v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v32 = 0x2865746164;
    v33 = 0xE500000000000000;
    v13._countAndFlagsBits = ClosedRange.debugDescription.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0x64746E756F63202CLL;
    v14._object = (void *)0xED0000203A6E776FLL;
    String.append(_:)(v14);
    if (v12)
      v15 = 1702195828;
    else
      v15 = 0x65736C6166;
    if (v12)
      v16 = 0xE400000000000000;
    else
      v16 = 0xE500000000000000;
    v17 = v16;
    String.append(_:)(*(Swift::String *)&v15);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 41;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19 = v32;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    v20 = v9[8];
    v21 = v9[9];
    v32 = 0;
    v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v32 = 0xD000000000000014;
    v33 = 0x8000000187BE8540;
    if ((v20 & 1) != 0)
    {
      v22 = 0xE300000000000000;
      v23 = 7104878;
    }
    else
    {
      v23 = Double.description.getter();
      v22 = v24;
    }
    v25 = v22;
    String.append(_:)(*(Swift::String *)&v23);
    swift_bridgeObjectRelease();
    v26._object = (void *)0x8000000187BE8560;
    v26._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v26);
    if (v21)
      v27 = 1702195828;
    else
      v27 = 0x65736C6166;
    if (v21)
      v28 = 0xE400000000000000;
    else
      v28 = 0xE500000000000000;
    v29 = v28;
    String.append(_:)(*(Swift::String *)&v27);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 8745;
    v30._object = (void *)0xE200000000000000;
    String.append(_:)(v30);
    return v32;
  }
  return v19;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WidgetAuxiliaryViewMetadata.Progress()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = WidgetAuxiliaryViewMetadata.Progress.Kind.debugDescription.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x73736572676F7250;
}

uint64_t static WidgetAuxiliaryViewMetadata.Key.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  return static WidgetAuxiliaryViewMetadata.Key.defaultValue.getter(&one-time initialization token for defaultValue, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?, (uint64_t)static WidgetAuxiliaryViewMetadata.Key.defaultValue, a1);
}

uint64_t static WidgetAuxiliaryViewMetadata.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(double))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v14 - v11;
  a2(v10);
  static WidgetAuxiliaryViewMetadata.reduce(_:_:)(a1, (uint64_t)v7, (uint64_t)v12);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return outlined init with take of TableCellFormula((uint64_t)v12, a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t static WidgetAuxiliaryViewMetadata.reduce(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unsigned int (*v27)(char *, uint64_t, int *);
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;

  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  v55 = *(_QWORD *)(v10 - 8);
  v56 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v54 = (uint64_t)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  v14 = *((_QWORD *)v13 - 1);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (void **)((char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18, v19);
  v58 = (void **)((char *)&v53 - v20);
  type metadata accessor for (WidgetAuxiliaryViewMetadata?, WidgetAuxiliaryViewMetadata?)(0, (unint64_t *)&lazy cache variable for type metadata for (WidgetAuxiliaryViewMetadata?, WidgetAuxiliaryViewMetadata?), type metadata accessor for WidgetAuxiliaryViewMetadata?);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v53 - v23;
  v26 = (char *)&v53 + *(int *)(v25 + 48) - v23;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v53 - v23, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v57 = v14;
  v27 = *(unsigned int (**)(char *, uint64_t, int *))(v14 + 48);
  if (v27(v24, 1, v13) == 1)
    return outlined init with take of TableCellFormula((uint64_t)v26, a3, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v53 = a3;
  if (v27(v26, 1, v13) == 1)
    return outlined init with take of TableCellFormula((uint64_t)v24, v53, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  v29 = v58;
  outlined init with take of TableCellFormula((uint64_t)v24, (uint64_t)v58, type metadata accessor for WidgetAuxiliaryViewMetadata);
  outlined init with take of TableCellFormula((uint64_t)v26, (uint64_t)v17, type metadata accessor for WidgetAuxiliaryViewMetadata);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17 + v13[6], (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
  v31 = v55;
  v30 = v56;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v9, 1, v56) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
  }
  else
  {
    v32 = (uint64_t)v9;
    v33 = v54;
    outlined init with take of TableCellFormula(v32, v54, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    v34 = (uint64_t)v29 + v13[6];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v34, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?);
    outlined init with take of TableCellFormula(v33, v34, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v34, 0, 1, v30);
  }
  v35 = v13[7];
  v36 = *(void **)((char *)v17 + v35);
  if (v36)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void **)((char *)v29 + v35) = v36;
  }
  v37 = *v17;
  if (*v17)
  {
    v38 = *v29;
    v39 = v37;

    *v29 = v37;
  }
  v40 = (uint64_t *)((char *)v17 + v13[11]);
  v41 = *v40;
  v42 = v40[1];
  v43 = v40[2];
  v44 = v40[3];
  v45 = v40[4];
  v46 = v40[5];
  v47 = v40[6];
  v48 = v40[7];
  outlined copy of WidgetAuxiliaryViewMetadata.Accessibility?(*v40, v42);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, type metadata accessor for WidgetAuxiliaryViewMetadata);
  if (v42 != 1)
  {
    v49 = v48;
    v50 = (uint64_t *)((char *)v58 + v13[11]);
    outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(*v50, v50[1]);
    *v50 = v41;
    v50[1] = v42;
    v50[2] = v43;
    v50[3] = v44;
    v50[4] = v45;
    v50[5] = v46;
    v50[6] = v47;
    v50[7] = v49;
  }
  v51 = (uint64_t)v58;
  v52 = v53;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v58, v53, type metadata accessor for WidgetAuxiliaryViewMetadata);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v57 + 56))(v52, 0, 1, v13);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v51, type metadata accessor for WidgetAuxiliaryViewMetadata);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance WidgetAuxiliaryViewMetadata.Key@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.FileDialogDefaultDirectoryKey(&one-time initialization token for defaultValue, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?, (uint64_t)static WidgetAuxiliaryViewMetadata.Key.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance WidgetAuxiliaryViewMetadata.Key(uint64_t a1, void (*a2)(double))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v14 - v11;
  a2(v10);
  static WidgetAuxiliaryViewMetadata.reduce(_:_:)(a1, (uint64_t)v7, (uint64_t)v12);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  return outlined init with take of TableCellFormula((uint64_t)v12, a1, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t WidgetAuxiliaryViewMetadataModifier.init(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  void (*v7)(void);
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = (void (*)(void))MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a4, v9, a3);
}

uint64_t static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *(*a3)(_QWORD *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  _QWORD v63[3];
  __int128 v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  int v72;
  __int128 v73;
  __int128 v74;
  _DWORD v75[4];
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  __int128 v82;
  __int128 v83;
  _DWORD v84[4];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v56 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v53 = a2[2];
  v10 = *((_DWORD *)a2 + 6);
  v11 = *((_DWORD *)a2 + 7);
  v12 = *((_DWORD *)a2 + 8);
  v13 = *((_DWORD *)a2 + 9);
  v14 = a2[5];
  v58 = a2[6];
  v57 = *((_DWORD *)a2 + 14);
  v55 = *((_DWORD *)a2 + 15);
  v62 = *((_DWORD *)a2 + 16);
  v54 = *((_DWORD *)a2 + 17);
  v61 = *((_DWORD *)a2 + 18);
  v60 = *((_DWORD *)a2 + 19);
  v59 = *((_DWORD *)a2 + 20);
  LODWORD(v76) = *a1;
  type metadata accessor for WidgetAuxiliaryViewMetadataModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(a5 - 8) + 64))
    closure #1 in static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)(1, a5, a6, v15);
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.withoutGeometryDependencies.getter();
  PreferenceKeys.init()();
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<WidgetAuxiliaryViewMetadata.Key>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<WidgetAuxiliaryViewMetadata.Key> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<WidgetAuxiliaryViewMetadata.Key>);
  PreferenceKeys.add(_:)();
  _ViewInputs.hasWidgetMetadata.setter();
  v52 = v11;
  v51 = v13;
  *(_QWORD *)&v64 = v63[2];
  LOBYTE(v63[0]) = 0;
  _ViewInputs.intern<A>(_:id:)();
  swift_bridgeObjectRelease();
  PreferencesInputs.init(hostKeys:)();
  swift_bridgeObjectRelease();
  *((_QWORD *)&v82 + 1) = v56;
  LODWORD(v83) = v9;
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
  PreferenceKeys.add(_:)();
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<WidgetAuxiliaryURLPreferenceKey>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<WidgetAuxiliaryURLPreferenceKey> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<WidgetAuxiliaryURLPreferenceKey>);
  PreferenceKeys.add(_:)();
  v81 |= 0x10u;
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItems.Key> and conformance _AnyPreferenceKey<A>((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>);
  PreferenceKeys.add(_:)();
  _GraphValue.init(_:)();
  v46 = v76;
  v67 = v76;
  v45 = v77;
  v68 = v77;
  v44 = v78;
  v69 = v78;
  v43 = v79;
  v70 = v79;
  v42 = HIDWORD(v79);
  v41 = v80;
  v71 = v80;
  v72 = v81;
  v40 = v81;
  v39 = v82;
  v73 = v82;
  v74 = v83;
  v37 = DWORD2(v83);
  v38 = DWORD1(v83);
  v36 = HIDWORD(v83);
  v35 = v84[0];
  v75[0] = v84[0];
  *(_QWORD *)&v75[1] = *(_QWORD *)&v84[1];
  v34 = v84[1];
  v33 = v84[2];
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t *, uint64_t))(a6 + 24))(&v64, v63, &v67, a5);
  v16 = v64;
  v17 = DWORD2(v64);
  v67 = v64;
  v68 = DWORD2(v64);
  v18 = PreferencesOutputs.subscript.getter();
  v67 = v16;
  v68 = v17;
  v19 = PreferencesOutputs.subscript.getter();
  if ((v19 & 0x100000000) != 0)
  {
    v67 = v56;
    v68 = v9;
    v69 = v53;
    v70 = __PAIR64__(v52, v10);
    v71 = v12;
    v72 = v51;
    *(_QWORD *)&v73 = v14;
    *((_QWORD *)&v73 + 1) = v58;
    *(_QWORD *)&v74 = __PAIR64__(v55, v57);
    *((_QWORD *)&v74 + 1) = __PAIR64__(v54, v62);
    v75[0] = v61;
    v75[1] = v60;
    v75[2] = v59;
    *(_QWORD *)&v64 = MEMORY[0x1E0DEE9D8];
    LOBYTE(v63[0]) = 0;
    LODWORD(v19) = _ViewInputs.intern<A>(_:id:)();
  }
  v48 = v19;
  v67 = v16;
  v68 = v17;
  v20 = PreferencesOutputs.subscript.getter();
  v67 = v16;
  v68 = v17;
  v21 = PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  v22 = *MEMORY[0x1E0CFED28];
  if ((v18 & 0x100000000) != 0)
    v23 = *MEMORY[0x1E0CFED28];
  else
    v23 = v18;
  v47 = v23;
  if ((v20 & 0x100000000) != 0)
    v24 = *MEMORY[0x1E0CFED28];
  else
    v24 = v20;
  v32 = v24;
  v67 = v46;
  if ((v21 & 0x100000000) == 0)
    v22 = v21;
  v31 = v22;
  v68 = v45;
  v69 = v44;
  v70 = __PAIR64__(v42, v43);
  v71 = v41;
  v72 = v40;
  *(_QWORD *)&v73 = v39;
  *((_QWORD *)&v73 + 1) = v56;
  *(_QWORD *)&v74 = __PAIR64__(v38, v9);
  *((_QWORD *)&v74 + 1) = __PAIR64__(v36, v37);
  v75[0] = v35;
  v75[1] = v34;
  v75[2] = v33;
  v25 = _ViewInputs.environment.getter();
  v67 = v46;
  v68 = v45;
  v69 = v44;
  v70 = __PAIR64__(v42, v43);
  v71 = v41;
  v72 = v40;
  *(_QWORD *)&v73 = v39;
  v26 = _GraphInputs.interfaceIdiom.getter();
  v27 = v64;
  *(_QWORD *)&v64 = __PAIR64__(v32, v47);
  *((_QWORD *)&v64 + 1) = __PAIR64__(v25, v31);
  v65 = v48;
  v66 = v27;
  v67 = v56;
  v68 = v9;
  v69 = v53;
  v70 = __PAIR64__(v52, v10);
  v71 = v12;
  v72 = v51;
  *(_QWORD *)&v73 = v14;
  *((_QWORD *)&v73 + 1) = v58;
  *(_QWORD *)&v74 = __PAIR64__(v55, v57);
  *((_QWORD *)&v74 + 1) = __PAIR64__(v54, v62);
  v75[0] = v61;
  v75[1] = v60;
  v75[2] = v59;
  v28 = a3(v63, v26, &v67);
  v67 = v58;
  v68 = v57;
  MEMORY[0x1E0C80A78](v28, v29);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *a7 = v63[0];
  a7[1] = v63[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for WidgetAuxiliaryViewMetadataModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t implicit closure #2 in static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  lazy protocol witness table accessor for type AuxiliaryViewMetadataPreferenceWriter and conformance AuxiliaryViewMetadataPreferenceWriter();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance WidgetAuxiliaryViewMetadataModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *(*a3)(_QWORD *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  return static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance WidgetAuxiliaryViewMetadataModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadataModifier<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t AuxiliaryViewMetadataPreferenceWriter.value.getter@<X0>(id *a1@<X8>)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t Value;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id *v31;
  uint64_t v32;
  __int128 v34;
  uint64_t v35;
  id *v36;
  __int128 v37;
  _OWORD v38[2];
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v36 = a1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  v35 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PlatformItemList.Item?();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v15 = v1[1];
  v16 = v1[2];
  v34 = *(_OWORD *)(v1 + 6);
  AGGraphGetValue();
  v17 = swift_bridgeObjectRetain();
  PlatformItemList.mergedContentItem.getter(v17, (uint64_t)v13);
  swift_bridgeObjectRelease();
  v18 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v13, 0, 1, v18);
  v19 = *MEMORY[0x1E0CFED28];
  if (v15 == *MEMORY[0x1E0CFED28])
  {
    v20 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v9, 1, 1, v20);
    if (v16 != v19)
    {
LABEL_3:
      Value = AGGraphGetValue();
      v22 = *(_BYTE *)(Value + 16);
      v38[1] = *(_OWORD *)Value;
      v39 = v22;
      v23 = *(_OWORD *)AGGraphGetValue();
      v37 = v34;
      v38[0] = v23;
      AccessibilityAttachment.Tree.metadataAccessibility(in:idiom:)((uint64_t *)v38, (uint64_t)&v40);
      v24 = v40;
      v25 = v41;
      v26 = v42;
      v27 = v43;
      goto LABEL_6;
    }
  }
  else
  {
    v28 = AGGraphGetValue();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v28, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    if (v16 != v19)
      goto LABEL_3;
  }
  v24 = xmmword_187BF9840;
  v25 = 0uLL;
  v26 = 0uLL;
  v27 = 0uLL;
LABEL_6:
  v40 = v24;
  v41 = v25;
  v42 = v26;
  v43 = v27;
  if (v14 == v19)
  {
    v29 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v5, 1, 1, v29);
  }
  else
  {
    v30 = AGGraphGetValue();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v30, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
  }
  v31 = v36;
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)((uint64_t)v13, (uint64_t)v9, (uint64_t *)&v40, (uint64_t)v5, v36);
  v32 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  return (*(uint64_t (**)(id *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 0, 1, v32);
}

void AccessibilityAttachment.Tree.metadataAccessibility(in:idiom:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unsigned __int8 v28;
  uint64_t v29;

  v5 = *a1;
  v4 = a1[1];
  v7 = *(_QWORD *)v2;
  v6 = *(void **)(v2 + 8);
  if (*(_BYTE *)(v2 + 16))
  {
    if (*(_BYTE *)(v2 + 16) != 1)
    {
      *(_OWORD *)a2 = xmmword_187BF9840;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      return;
    }
    v8 = swift_bridgeObjectRetain();
    v9 = specialized Sequence.compactMap<A>(_:)(v8);
    static AccessibilityAttachment.combine(_:)(v9, (uint64_t *)&v27);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v7, v6, 1);
    v6 = (void *)*((_QWORD *)&v27 + 1);
    v7 = v27;
  }
  else
  {
    v10 = v6;
    swift_bridgeObjectRetain();
  }
  v11 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v11, (uint64_t)&v27);
  swift_bridgeObjectRelease();
  if ((_QWORD)v27)
  {
    *(_QWORD *)&v27 = v5;
    *((_QWORD *)&v27 + 1) = v4;
    v12 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    v25 = v13;
    v26 = v12;
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v14 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v14, &v27);
  swift_bridgeObjectRelease();
  if (v29)
  {
    AccessibilityValueStorage.valueDescription.getter();
    outlined destroy of AccessibilityValueStorage((uint64_t)&v27);
    *(_QWORD *)&v27 = v5;
    *((_QWORD *)&v27 + 1) = v4;
    v24 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    v16 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v27, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
    v24 = 0;
    v16 = 0;
  }
  *(_QWORD *)&v27 = v7;
  if (*(_QWORD *)(AccessibilityProperties.hints.getter() + 16))
  {
    *(_QWORD *)&v27 = v5;
    *((_QWORD *)&v27 + 1) = v4;
    v17 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    v19 = v18;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = 0;
    v19 = 0;
  }
  v20 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v20, (uint64_t)&v27);
  swift_bridgeObjectRelease();
  v21 = *((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v22 = v27;
    v23 = v28;
    swift_bridgeObjectRelease();

    if (v23 >= 2)
    {
      swift_bridgeObjectRelease();
      v22 = 0;
      v21 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();

    v22 = 0;
  }
  *(_QWORD *)a2 = v26;
  *(_QWORD *)(a2 + 8) = v25;
  *(_QWORD *)(a2 + 16) = v24;
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = v22;
  *(_QWORD *)(a2 + 40) = v21;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v19;
}

uint64_t protocol witness for Rule.value.getter in conformance WidgetAuxiliaryMetadataTextImageWriter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  if (AGGraphGetWeakValue())
    result = swift_bridgeObjectRetain();
  else
    result = 1;
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance WidgetAuxiliaryMetadataTextImageWriter()
{
  lazy protocol witness table accessor for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter();
  return static AsyncAttribute.flags.getter();
}

uint64_t LazyWidgetAuxiliaryMetadataTextImage.textImagePref.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_DWORD *)(v0 + 100) == *MEMORY[0x1E0CFED28])
    return 2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryTextImagePreference?, (uint64_t)&type metadata for WidgetAuxiliaryTextImagePreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v1 = *(_QWORD *)AGGraphGetValue();
  outlined copy of WidgetAuxiliaryTextImagePreference?(v1);
  return v1;
}

Swift::Void __swiftcall LazyWidgetAuxiliaryMetadataTextImage.updateValue()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[64];
  unint64_t v44;
  uint64_t v45;

  v2 = v1;
  v3 = v0;
  v45 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryTextImagePreference?, (uint64_t)&type metadata for WidgetAuxiliaryTextImagePreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (AGGraphGetOutputValue())
  {
    v4 = *((_DWORD *)v1 + 25);
  }
  else
  {
    v26 = *v1;
    v5 = *((_DWORD *)v1 + 2);
    v6 = v1[2];
    v7 = *((_DWORD *)v1 + 6);
    v8 = v1[4];
    v9 = *((_DWORD *)v1 + 10);
    v10 = *((_DWORD *)v2 + 11);
    v37 = *((_DWORD *)v2 + 13);
    v38 = *((_DWORD *)v2 + 12);
    v35 = v2[8];
    v36 = v2[7];
    v33 = *((_DWORD *)v2 + 19);
    v34 = *((_DWORD *)v2 + 18);
    v31 = *((_DWORD *)v2 + 21);
    v32 = *((_DWORD *)v2 + 20);
    v29 = *((_DWORD *)v2 + 23);
    v30 = *((_DWORD *)v2 + 22);
    v27 = *((_DWORD *)v2 + 25);
    v28 = *((_DWORD *)v2 + 24);
    v39 = *(_QWORD *)(v3 + 24);
    v40 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)&v41 = v26;
    DWORD2(v41) = v5;
    *(_QWORD *)&v42 = v6;
    DWORD2(v42) = v7;
    *(_QWORD *)v43 = v8;
    *(_DWORD *)&v43[8] = v9;
    *(_DWORD *)&v43[12] = v10;
    *(_DWORD *)&v43[16] = v38;
    *(_DWORD *)&v43[20] = v37;
    *(_QWORD *)&v43[24] = v36;
    *(_QWORD *)&v43[32] = v35;
    *(_DWORD *)&v43[40] = v34;
    *(_DWORD *)&v43[44] = v33;
    *(_DWORD *)&v43[48] = v32;
    *(_DWORD *)&v43[52] = v31;
    *(_DWORD *)&v43[56] = v30;
    *(_DWORD *)&v43[60] = v29;
    v44 = __PAIR64__(v27, v28);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v40;
    *(_QWORD *)(v11 + 24) = v39;
    *(_QWORD *)(v11 + 32) = v26;
    *(_DWORD *)(v11 + 40) = v5;
    *(_QWORD *)(v11 + 48) = v6;
    *(_DWORD *)(v11 + 56) = v7;
    *(_QWORD *)(v11 + 64) = v8;
    *(_DWORD *)(v11 + 72) = v9;
    *(_DWORD *)(v11 + 76) = v10;
    *(_DWORD *)(v11 + 80) = v38;
    *(_DWORD *)(v11 + 84) = v37;
    *(_QWORD *)(v11 + 88) = v36;
    *(_QWORD *)(v11 + 96) = v35;
    *(_DWORD *)(v11 + 104) = v34;
    *(_DWORD *)(v11 + 108) = v33;
    *(_DWORD *)(v11 + 112) = v32;
    *(_DWORD *)(v11 + 116) = v31;
    *(_DWORD *)(v11 + 120) = v30;
    *(_DWORD *)(v11 + 124) = v29;
    *(_DWORD *)(v11 + 128) = v28;
    *(_DWORD *)(v11 + 132) = v27;
    outlined retain of SelectionEditMenuModifier<A>.Child((void **)&v41);
    AGGraphClearUpdate();
    v12 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    v13 = *(_OWORD *)(v11 + 112);
    *(_OWORD *)&v43[32] = *(_OWORD *)(v11 + 96);
    *(_OWORD *)&v43[48] = v13;
    v44 = *(_QWORD *)(v11 + 128);
    v14 = *(_OWORD *)(v11 + 48);
    v41 = *(_OWORD *)(v11 + 32);
    v42 = v14;
    v15 = *(_OWORD *)(v11 + 80);
    *(_OWORD *)v43 = *(_OWORD *)(v11 + 64);
    *(_OWORD *)&v43[16] = v15;
    v17 = type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage(0, v40, v39, v16);
    v4 = LazyWidgetAuxiliaryMetadataTextImage.makeTextImage()(v17);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_release();
    *((_DWORD *)v2 + 25) = v4;
  }
  v18 = *((_DWORD *)v2 + 2);
  v19 = v2[2];
  v20 = *((_DWORD *)v2 + 6);
  v21 = v2[4];
  v22 = *((_DWORD *)v2 + 24);
  *(_QWORD *)&v41 = *v2;
  DWORD2(v41) = v18;
  *(_QWORD *)&v42 = v19;
  DWORD2(v42) = v20;
  *(_QWORD *)v43 = v21;
  *(_OWORD *)&v43[8] = *(_OWORD *)(v2 + 5);
  *(_OWORD *)&v43[24] = *(_OWORD *)(v2 + 7);
  *(_OWORD *)&v43[40] = *(_OWORD *)(v2 + 9);
  *(_QWORD *)&v43[56] = v2[11];
  v44 = __PAIR64__(v4, v22);
  v23 = LazyWidgetAuxiliaryMetadataTextImage.textImagePref.getter();
  v24 = v23;
  if (v23 == 2)
    v25 = 1;
  else
    v25 = v23;
  *(_QWORD *)&v41 = v25;
  AGGraphSetOutputValue();
  outlined consume of WidgetAuxiliaryTextImagePreference??(v24);
}

uint64_t LazyWidgetAuxiliaryMetadataTextImage.makeTextImage()(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[4];
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = *(_DWORD *)(v1 + 96);
  v23 = *(_QWORD *)(v1 + 16);
  v24 = v3;
  v25 = v4;
  v26 = *(_OWORD *)(v1 + 40);
  v27 = v5;
  v28 = v6;
  v29 = *(_OWORD *)(v1 + 72);
  v30 = *(_QWORD *)(v1 + 88);
  v31 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
  v8 = *(_QWORD *)(a1 + 16);
  _GraphValue.init(_:)();
  v14 = v23;
  v15 = v24;
  v16 = v4;
  v17 = v26;
  v18 = v5;
  v19 = v6;
  v20 = v29;
  v21 = v30;
  v22 = v31;
  (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(a1 + 24) + 24))(&v12, v11, &v14, v8);
  v14 = v12;
  v15 = v13;
  PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  v14 = AGCreateWeakAttribute();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryTextImagePreference?, (uint64_t)&type metadata for WidgetAuxiliaryTextImagePreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  lazy protocol witness table accessor for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter();
  v9 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v9;
}

uint64_t static WidgetAuxiliaryURLPreferenceKey.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  return static WidgetAuxiliaryViewMetadata.Key.defaultValue.getter(&one-time initialization token for defaultValue, (uint64_t (*)(_QWORD))type metadata accessor for URL?, (uint64_t)static WidgetAuxiliaryURLPreferenceKey.defaultValue, a1);
}

uint64_t static WidgetAuxiliaryViewMetadata.Key.defaultValue.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = a2(0);
  v8 = __swift_project_value_buffer(v7, a3);
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v8, a4, a2);
}

uint64_t static WidgetAuxiliaryURLPreferenceKey.reduce(value:nextValue:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v16 - v10;
  outlined init with take of TableCellFormula(a1, (uint64_t)v7, v12);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13) == 1)
  {
    a2();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v7, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return outlined init with take of TableCellFormula((uint64_t)v11, a1, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance WidgetAuxiliaryURLPreferenceKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.FileDialogDefaultDirectoryKey(&one-time initialization token for defaultValue, (uint64_t (*)(_QWORD))type metadata accessor for URL?, (uint64_t)static WidgetAuxiliaryURLPreferenceKey.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance WidgetAuxiliaryURLPreferenceKey(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v16 - v10;
  outlined init with take of TableCellFormula(a1, (uint64_t)v7, v12);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13) == 1)
  {
    a2();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v7, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return outlined init with take of TableCellFormula((uint64_t)v11, a1, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for WidgetAuxiliaryViewMetadata.Progress.Kind);
}

void type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata.Graphic?, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t outlined copy of WidgetAuxiliaryViewMetadata.Gauge?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of WidgetAuxiliaryViewMetadata.Accessibility?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.CodingKeys, &unk_1E1AF4D60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.CodingKeys, &unk_1E1AF4D60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.CodingKeys, &unk_1E1AF4D60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.CodingKeys, &unk_1E1AF4D60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.CodingKeys and conformance WidgetAuxiliaryViewMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Text, &type metadata for WidgetAuxiliaryViewMetadata.Text);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Text, &type metadata for WidgetAuxiliaryViewMetadata.Text);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text and conformance WidgetAuxiliaryViewMetadata.Text);
  }
  return result;
}

void type metadata accessor for [WidgetAuxiliaryViewMetadata](uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for [WidgetAuxiliaryViewMetadata], type metadata accessor for WidgetAuxiliaryViewMetadata, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

uint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata, type metadata accessor for WidgetAuxiliaryViewMetadata, (uint64_t)&protocol conformance descriptor for WidgetAuxiliaryViewMetadata);
}

{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata, type metadata accessor for WidgetAuxiliaryViewMetadata, (uint64_t)&protocol conformance descriptor for WidgetAuxiliaryViewMetadata);
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Gauge, &type metadata for WidgetAuxiliaryViewMetadata.Gauge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Gauge, &type metadata for WidgetAuxiliaryViewMetadata.Gauge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge and conformance WidgetAuxiliaryViewMetadata.Gauge);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Accessibility, &type metadata for WidgetAuxiliaryViewMetadata.Accessibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Accessibility, &type metadata for WidgetAuxiliaryViewMetadata.Accessibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility and conformance WidgetAuxiliaryViewMetadata.Accessibility);
  }
  return result;
}

uint64_t outlined consume of WidgetAuxiliaryViewMetadata.Gauge?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of WidgetAuxiliaryViewMetadata.Accessibility?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Text.CodingKeys, &unk_1E1AF4F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Text.CodingKeys, &unk_1E1AF4F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Text.CodingKeys, &unk_1E1AF4F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Text.CodingKeys, &unk_1E1AF4F38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Text.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Text.CodingKeys);
  }
  return result;
}

void type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata.Graphic.Named?, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.CodingKeys, &unk_1E1AF50B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.CodingKeys, &unk_1E1AF50B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.CodingKeys, &unk_1E1AF50B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.CodingKeys, &unk_1E1AF50B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Error, &unk_1E1AF5148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Error, &unk_1E1AF5148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Error and conformance WidgetAuxiliaryViewMetadata.Graphic.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys, &unk_1E1AF51D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys, &unk_1E1AF51D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys, &unk_1E1AF51D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys, &unk_1E1AF51D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Color.Resolved] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [Color.Resolved], MEMORY[0x1E0CE7110], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4A30], MEMORY[0x1E0CE4A28]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage;
  if (!lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4A38], MEMORY[0x1E0CE4A28]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolRenderingMode.Storage and conformance SymbolRenderingMode.Storage);
  }
  return result;
}

void type metadata accessor for ProtobufCodable<SymbolEffectArray>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ProtobufCodable<SymbolEffectArray>)
  {
    lazy protocol witness table accessor for type SymbolEffectArray and conformance SymbolEffectArray();
    lazy protocol witness table accessor for type SymbolEffectArray and conformance SymbolEffectArray();
    v0 = type metadata accessor for ProtobufCodable();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ProtobufCodable<SymbolEffectArray>);
  }
}

unint64_t lazy protocol witness table accessor for type SymbolEffectArray and conformance SymbolEffectArray()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray;
  if (!lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SymbolEffectArray, &unk_1E1AC6E70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray;
  if (!lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SymbolEffectArray, &unk_1E1AC6E70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray;
  if (!lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SymbolEffectArray, &unk_1E1AC6E70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray;
  if (!lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SymbolEffectArray, &unk_1E1AC6E70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray;
  if (!lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SymbolEffectArray, &unk_1E1AC6E70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolEffectArray and conformance SymbolEffectArray);
  }
  return result;
}

void type metadata accessor for ProtobufCodable<ContentTransition>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ProtobufCodable<ContentTransition>)
  {
    v0 = type metadata accessor for ProtobufCodable();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ProtobufCodable<ContentTransition>);
  }
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys, &unk_1E1AF5388);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys, &unk_1E1AF5388);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys, &unk_1E1AF5388);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys, &unk_1E1AF5388);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys, &unk_1E1AF52F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys, &unk_1E1AF52F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys, &unk_1E1AF52F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys, &unk_1E1AF52F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys, &unk_1E1AF5268);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys, &unk_1E1AF5268);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys, &unk_1E1AF5268);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys, &unk_1E1AF5268);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.CodingKeys, &unk_1E1AF5418);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.CodingKeys, &unk_1E1AF5418);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.CodingKeys, &unk_1E1AF5418);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.CodingKeys, &unk_1E1AF5418);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.CodingKeys);
  }
  return result;
}

void type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for MutableBox<WidgetAuxiliaryViewMetadata?>, (uint64_t (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0C18]);
}

unint64_t lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient;
  if (!lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3310], MEMORY[0x1E0CE3308]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient;
  if (!lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3318], MEMORY[0x1E0CE3308]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGradient and conformance ResolvedGradient);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys, &unk_1E1AF5538);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys, &unk_1E1AF5538);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys, &unk_1E1AF5538);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys, &unk_1E1AF5538);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys, &unk_1E1AF55C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys, &unk_1E1AF55C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys, &unk_1E1AF55C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys, &unk_1E1AF55C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys, &unk_1E1AF54A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys, &unk_1E1AF54A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys, &unk_1E1AF54A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys, &unk_1E1AF54A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
}

{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Gauge.CodingKeys, &unk_1E1AF4FF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Gauge.CodingKeys, &unk_1E1AF4FF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Gauge.CodingKeys, &unk_1E1AF4FF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Gauge.CodingKeys, &unk_1E1AF4FF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Gauge.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Gauge.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys, &unk_1E1AF4DF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys, &unk_1E1AF4DF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys, &unk_1E1AF4DF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys, &unk_1E1AF4DF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys and conformance WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys);
  }
  return result;
}

uint64_t specialized static WidgetAuxiliaryViewMetadata.Accessibility.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v3 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v8 = a1[5];
  v7 = a1[6];
  v9 = a1[7];
  v10 = a2[1];
  v11 = a2[2];
  v13 = a2[3];
  v12 = a2[4];
  v15 = a2[5];
  v14 = a2[6];
  v16 = a2[7];
  if (!v3)
  {
    if (v10)
      return 0;
    goto LABEL_8;
  }
  if (!v10)
    return 0;
  if (*a1 == *a2 && v3 == v10)
    goto LABEL_8;
  v33 = a1[5];
  v34 = a2[5];
  v17 = a1[4];
  v18 = a2[6];
  v19 = a2[7];
  v20 = a1[7];
  v21 = a1[6];
  v22 = a2[4];
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v12 = v22;
  v7 = v21;
  v9 = v20;
  v16 = v19;
  v14 = v18;
  v5 = v17;
  v8 = v33;
  v15 = v34;
  v24 = v23;
  result = 0;
  if ((v24 & 1) != 0)
  {
LABEL_8:
    if (v6)
    {
      if (!v13)
        return 0;
      if (v4 != v11 || v6 != v13)
      {
        v26 = v7;
        v27 = v12;
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v12 = v27;
        v7 = v26;
        v29 = v28;
        result = 0;
        if ((v29 & 1) == 0)
          return result;
      }
    }
    else if (v13)
    {
      return 0;
    }
    if (v8)
    {
      if (!v15)
        return 0;
      if (v5 != v12 || v8 != v15)
      {
        v30 = v7;
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v7 = v30;
        v32 = v31;
        result = 0;
        if ((v32 & 1) == 0)
          return result;
      }
    }
    else if (v15)
    {
      return 0;
    }
    if (v9)
    {
      if (v16 && (v7 == v14 && v9 == v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        return 1;
    }
    else if (!v16)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static WidgetAuxiliaryViewMetadata.Graphic.Named.Location.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for URL();
  v28 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v27 - v14;
  type metadata accessor for (WidgetAuxiliaryViewMetadata.Graphic.Named.Location, WidgetAuxiliaryViewMetadata.Graphic.Named.Location)(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = &v19[*(int *)(v20 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v19, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v21, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, (uint64_t)v15, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v24 = v28;
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v7, v21, v4);
      v23 = MEMORY[0x18D754858](v15, v7);
      v25 = *(void (**)(char *, uint64_t))(v24 + 8);
      v25(v7, v4);
      v25(v15, v4);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
      return v23 & 1;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v4);
    goto LABEL_6;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, (uint64_t)v11, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
LABEL_6:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for (WidgetAuxiliaryViewMetadata.Graphic.Named.Location, WidgetAuxiliaryViewMetadata.Graphic.Named.Location));
    v23 = 0;
    return v23 & 1;
  }
  v22 = *v11 ^ *v21;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
  v23 = v22 ^ 1;
  return v23 & 1;
}

uint64_t specialized static WidgetAuxiliaryViewMetadata.Graphic.Named.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  int v6;
  int *v7;
  uint64_t v8;
  float *v9;
  char v10;
  float *v11;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  char v16;
  uint64_t v17;
  float *v18;
  char v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  char v37;
  char *v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  char v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  int v47;
  __int16 v48;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), LOBYTE(v6) = 0, (v5 & 1) != 0))
  {
    v7 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
    if ((specialized static WidgetAuxiliaryViewMetadata.Graphic.Named.Location.== infix(_:_:)((uint64_t)a1 + v7[5], (uint64_t)a2 + v7[5]) & 1) == 0)goto LABEL_14;
    v8 = v7[6];
    v9 = (float *)((char *)a1 + v8);
    v10 = *((_BYTE *)a1 + v8 + 4);
    v11 = (float *)((char *)a2 + v8);
    v6 = *((unsigned __int8 *)a2 + v8 + 4);
    if ((v10 & 1) != 0)
    {
      if (!v6)
        return v6 & 1;
    }
    else
    {
      if (*v9 != *v11)
        LOBYTE(v6) = 1;
      if ((v6 & 1) != 0)
        goto LABEL_14;
    }
    if (*((unsigned __int8 *)a1 + v7[7]) != *((unsigned __int8 *)a2 + v7[7]))
    {
LABEL_14:
      LOBYTE(v6) = 0;
      return v6 & 1;
    }
    v13 = v7[8];
    v14 = *(float32x4_t **)((char *)a1 + v13);
    v15 = *(float32x4_t **)((char *)a2 + v13);
    if (v14)
    {
      if (!v15)
        goto LABEL_14;
      specialized static Array<A>.== infix(_:_:)(v14, v15);
      if ((v16 & 1) == 0)
        goto LABEL_14;
    }
    else if (v15)
    {
      goto LABEL_14;
    }
    v17 = v7[9];
    v18 = (float *)((char *)a1 + v17);
    v19 = *((_BYTE *)a1 + v17 + 16);
    v20 = (char *)a2 + v17;
    if ((v19 & 1) != 0)
    {
      if (!v20[16])
        goto LABEL_14;
    }
    else
    {
      if ((v20[16] & 1) != 0)
        goto LABEL_14;
      v22 = *(_QWORD *)v20;
      v21 = *((_QWORD *)v20 + 1);
      v23 = *v18 == *(float *)&v22 && v18[1] == *((float *)&v22 + 1);
      v24 = v23 && v18[2] == *(float *)&v21;
      if (!v24 || v18[3] != *((float *)&v21 + 1))
        goto LABEL_14;
    }
    v26 = v7[10];
    v27 = *((unsigned __int8 *)a1 + v26);
    v28 = *((unsigned __int8 *)a2 + v26);
    if (v27 == 8)
    {
      if (v28 != 8)
        goto LABEL_14;
LABEL_41:
      v29 = v7[11];
      v30 = *(_QWORD *)((char *)a1 + v29);
      v31 = *(_QWORD *)((char *)a2 + v29);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v32 = specialized static Array<A>.== infix(_:_:)(v30, v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v32 & 1) != 0)
      {
        v33 = v7[12];
        v34 = *(_QWORD *)((char *)a1 + v33);
        v35 = *(_WORD *)((char *)a1 + v33 + 12);
        v36 = *(_DWORD *)((char *)a1 + v33 + 8);
        v37 = *((_BYTE *)a1 + v33 + 14);
        v38 = (char *)a2 + v33;
        v39 = *(_QWORD *)v38;
        v40 = *((_WORD *)v38 + 6);
        v41 = *((_DWORD *)v38 + 2);
        v42 = v38[14];
        v46 = v34;
        v47 = v36;
        v48 = v35;
        v43 = v39;
        v44 = v41;
        v45 = v40;
        LOBYTE(v6) = MEMORY[0x18D758704](&v46, &v43) & (v37 ^ v42 ^ 1);
        return v6 & 1;
      }
      goto LABEL_14;
    }
    LOBYTE(v6) = 0;
    if (v28 != 8 && v27 == v28)
      goto LABEL_41;
  }
  return v6 & 1;
}

uint64_t specialized static WidgetAuxiliaryViewMetadata.Graphic.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void **v21;
  void *v22;
  void *v23;
  char v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v27;

  v4 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (void **)((char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (uint64_t *)((char *)&v27 - v14);
  type metadata accessor for (WidgetAuxiliaryViewMetadata.Graphic, WidgetAuxiliaryViewMetadata.Graphic)(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (void **)&v19[*(int *)(v20 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v19, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v21, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, (uint64_t)v11, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    v22 = *v11;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v23 = *v21;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      v24 = static NSObject.== infix(_:_:)();

LABEL_9:
      v25 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic;
      goto LABEL_10;
    }

  }
  else
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, (uint64_t)v15, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of TableCellFormula((uint64_t)v21, (uint64_t)v7, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
      v24 = specialized static WidgetAuxiliaryViewMetadata.Graphic.Named.== infix(_:_:)(v15, v7);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
      goto LABEL_9;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
  }
  v24 = 0;
  v25 = (uint64_t (*)(_QWORD))type metadata accessor for (WidgetAuxiliaryViewMetadata.Graphic, WidgetAuxiliaryViewMetadata.Graphic);
LABEL_10:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, v25);
  return v24 & 1;
}

uint64_t specialized SymbolEffectArray.init(effects:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v15;
  int v16;
  char v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v18;
    v4 = (_BYTE *)(a1 + 92);
    do
    {
      v5 = *(_QWORD *)(v4 - 44);
      v6 = *(_QWORD *)(v4 - 36);
      v7 = *(_QWORD *)(v4 - 28);
      v8 = *((_WORD *)v4 - 10);
      v9 = *((_DWORD *)v4 - 4);
      v10 = *((_DWORD *)v4 - 3);
      v16 = *((_DWORD *)v4 - 1);
      v17 = *(v4 - 8);
      v15 = *v4;
      outlined copy of _SymbolEffect.Storage(v5, v6, v7, v8);
      v12 = *(_QWORD *)(v18 + 16);
      v11 = *(_QWORD *)(v18 + 24);
      if (v12 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
      *(_QWORD *)(v18 + 16) = v12 + 1;
      v13 = v18 + 48 * v12;
      *(_QWORD *)(v13 + 32) = v5;
      *(_QWORD *)(v13 + 40) = v6;
      *(_QWORD *)(v13 + 48) = v7;
      *(_WORD *)(v13 + 56) = v8;
      *(_DWORD *)(v13 + 60) = v9;
      *(_DWORD *)(v13 + 64) = v10;
      *(_BYTE *)(v13 + 68) = v17;
      *(_DWORD *)(v13 + 72) = v16;
      *(_BYTE *)(v13 + 76) = v15;
      v4 += 64;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *specialized MutableBox<A>.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;

  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v22 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048], v6);
  v21 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v20 - v10;
  v12 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys(0, v13, v14, v15);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (uint64_t (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys, (uint64_t)&protocol conformance descriptor for MutableBox<A><A>.CodingKeys);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v16 = v8;
    lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](&lazy protocol witness table cache variable for type WidgetAuxiliaryViewMetadata? and conformance <A> A?, (uint64_t (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata?, lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata, MEMORY[0x1E0DEE9A0]);
    v17 = (uint64_t)v22;
    v18 = v21;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?>(0);
    v12 = (_QWORD *)swift_allocObject();
    outlined init with take of TableCellFormula(v17, (uint64_t)v12 + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + *v12 + 8), (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v18);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v12;
}

void type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys)
  {
    v4 = type metadata accessor for MutableBox<A>.CodingKeys(0, a2, a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys);
  }
}

uint64_t type metadata accessor for MutableBox<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MutableBox<A>.CodingKeys);
}

uint64_t type metadata accessor for WidgetAuxiliaryViewMetadataModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WidgetAuxiliaryViewMetadataModifier);
}

uint64_t partial apply for implicit closure #2 in static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static WidgetAuxiliaryViewMetadataModifier._makeView(modifier:inputs:body:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in WidgetAuxiliaryViewMetadataModifier<A>()
{
  return &protocol witness table for WidgetAuxiliaryViewMetadataModifier<A>;
}

uint64_t sub_18778CFAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(a1 + 8) + 8);
  swift_beginAccess();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a2, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t sub_18778D01C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(a1 + 16) + 8);
  swift_beginAccess();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a2, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t sub_18778D08C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(a1 + 24) + 8);
  swift_beginAccess();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a2, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

uint64_t sub_18778D0FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32) + *(_QWORD *)(*MEMORY[0x1E0CE0C28] + **(_QWORD **)(a1 + 32) + 8);
  swift_beginAccess();
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a2, (uint64_t (*)(_QWORD))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

char *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(void **, uint64_t, uint64_t);
  char *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, int *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, _QWORD, uint64_t, int *);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  char *__dst;
  unint64_t __dsta;
  uint64_t v79;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    *((_QWORD *)a1 + 1) = v8;
    v9 = a3[6];
    v10 = (void **)&a1[v9];
    v11 = (void **)((char *)a2 + v9);
    v12 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v13 + 48);
    v15 = v4;
    v16 = v8;
    if (v14(v11, 1, v12))
    {
      type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v18 = *v11;
        *v10 = *v11;
        v19 = v18;
      }
      else
      {
        v20 = v11[1];
        *v10 = *v11;
        v10[1] = v20;
        v21 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        v22 = v21[5];
        __dst = (char *)v10 + v22;
        v23 = (char *)v11 + v22;
        v24 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        swift_bridgeObjectRetain();
        v79 = v13;
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          v25 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(__dst, v23, v25);
          swift_storeEnumTagMultiPayload();
        }
        v26 = v21[6];
        v27 = (char *)v10 + v26;
        v28 = (char *)v11 + v26;
        *(_DWORD *)v27 = *(_DWORD *)v28;
        v27[4] = v28[4];
        *((_BYTE *)v10 + v21[7]) = *((_BYTE *)v11 + v21[7]);
        *(void **)((char *)v10 + v21[8]) = *(void **)((char *)v11 + v21[8]);
        v29 = v21[9];
        v30 = (char *)v10 + v29;
        v31 = (char *)v11 + v29;
        *(_OWORD *)v30 = *(_OWORD *)v31;
        v30[16] = v31[16];
        *((_BYTE *)v10 + v21[10]) = *((_BYTE *)v11 + v21[10]);
        *(void **)((char *)v10 + v21[11]) = *(void **)((char *)v11 + v21[11]);
        v32 = v21[12];
        v33 = (char *)v10 + v32;
        v34 = (char *)v11 + v32;
        v35 = *(uint64_t *)((char *)v11 + v32);
        v76 = v34[12];
        __dsta = *((unsigned int *)v34 + 2);
        v36 = v34[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of ContentTransition.Storage(v35, __dsta | (v76 << 32), v36);
        *(_QWORD *)v33 = v35;
        v33[12] = v76;
        *((_DWORD *)v33 + 2) = __dsta;
        v33[13] = v36;
        v33[14] = v34[14];
        v13 = v79;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v37 = a3[8];
    *(_QWORD *)&v7[a3[7]] = *(char **)((char *)a2 + a3[7]);
    v38 = &v7[v37];
    v39 = (char *)a2 + v37;
    v40 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
    v41 = *((_QWORD *)v40 - 1);
    v42 = *(unsigned int (**)(char *, uint64_t, int *))(v41 + 48);
    swift_bridgeObjectRetain();
    if (v42(v39, 1, v40))
    {
      type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      v44 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v45 = type metadata accessor for Date();
        v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16);
        v46(v38, v39, v45);
        type metadata accessor for ClosedRange<Date>();
        v46(&v38[*(int *)(v47 + 36)], &v39[*(int *)(v47 + 36)], v45);
        type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
        v38[*(int *)(v48 + 48)] = v39[*(int *)(v48 + 48)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      *(_QWORD *)&v38[v40[5]] = *(_QWORD *)&v39[v40[5]];
      *(_QWORD *)&v38[v40[6]] = *(_QWORD *)&v39[v40[6]];
      v49 = v40[7];
      v50 = &v38[v49];
      v51 = &v39[v49];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v50[8] = v51[8];
      v52 = *(void (**)(char *, _QWORD, uint64_t, int *))(v41 + 56);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v52(v38, 0, 1, v40);
    }
    v53 = a3[9];
    v54 = &v7[v53];
    v55 = (uint64_t)a2 + v53;
    v56 = *(_QWORD *)(v55 + 8);
    if (v56)
    {
      *(_QWORD *)v54 = *(_QWORD *)v55;
      *((_QWORD *)v54 + 1) = v56;
      v57 = *(_QWORD *)(v55 + 24);
      *((_QWORD *)v54 + 2) = *(_QWORD *)(v55 + 16);
      *((_QWORD *)v54 + 3) = v57;
      v58 = *(_QWORD *)(v55 + 40);
      *((_QWORD *)v54 + 4) = *(_QWORD *)(v55 + 32);
      *((_QWORD *)v54 + 5) = v58;
      v54[48] = *(_BYTE *)(v55 + 48);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v59 = *(_OWORD *)(v55 + 16);
      *(_OWORD *)v54 = *(_OWORD *)v55;
      *((_OWORD *)v54 + 1) = v59;
      *((_OWORD *)v54 + 2) = *(_OWORD *)(v55 + 32);
      v54[48] = *(_BYTE *)(v55 + 48);
    }
    v60 = a3[10];
    v61 = &v7[v60];
    v62 = (char *)a2 + v60;
    v63 = type metadata accessor for URL();
    v64 = *(_QWORD *)(v63 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
    {
      type metadata accessor for URL?(0);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v61, v62, v63);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
    }
    v66 = a3[11];
    v67 = &v7[v66];
    v68 = (uint64_t)a2 + v66;
    v69 = *(_QWORD *)(v68 + 8);
    if (v69 == 1)
    {
      v70 = *(_OWORD *)(v68 + 16);
      *(_OWORD *)v67 = *(_OWORD *)v68;
      *((_OWORD *)v67 + 1) = v70;
      v71 = *(_OWORD *)(v68 + 48);
      *((_OWORD *)v67 + 2) = *(_OWORD *)(v68 + 32);
      *((_OWORD *)v67 + 3) = v71;
    }
    else
    {
      *(_QWORD *)v67 = *(_QWORD *)v68;
      *((_QWORD *)v67 + 1) = v69;
      v72 = *(_QWORD *)(v68 + 24);
      *((_QWORD *)v67 + 2) = *(_QWORD *)(v68 + 16);
      *((_QWORD *)v67 + 3) = v72;
      v73 = *(_QWORD *)(v68 + 40);
      *((_QWORD *)v67 + 4) = *(_QWORD *)(v68 + 32);
      *((_QWORD *)v67 + 5) = v73;
      v74 = *(_QWORD *)(v68 + 56);
      *((_QWORD *)v67 + 6) = *(_QWORD *)(v68 + 48);
      *((_QWORD *)v67 + 7) = v74;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v7;
}

uint64_t destroy for WidgetAuxiliaryViewMetadata(id *a1, int *a2)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v4 = (id *)((char *)a1 + a2[6]);
  v5 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  if (!(*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {

    }
    else
    {
      swift_bridgeObjectRelease();
      v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      v7 = (char *)v4 + *(int *)(v6 + 20);
      type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        v8 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ContentTransition.Storage(*(uint64_t *)((char *)v4 + *(int *)(v6 + 48)), *(unsigned int *)((char *)v4 + *(int *)(v6 + 48) + 8) | ((unint64_t)*((unsigned __int8 *)v4+ *(int *)(v6 + 48)+ 12) << 32), *((_BYTE *)v4 + *(int *)(v6 + 48) + 13));
    }
  }
  swift_bridgeObjectRelease();
  v9 = (char *)a1 + a2[8];
  v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = type metadata accessor for Date();
      v12 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
      v12(v9, v11);
      type metadata accessor for ClosedRange<Date>();
      v12(&v9[*(int *)(v13 + 36)], v11);
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (*(id *)((char *)a1 + a2[9] + 8))
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  v14 = (char *)a1 + a2[10];
  v15 = type metadata accessor for URL();
  v16 = *(_QWORD *)(v15 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  result = *(uint64_t *)((char *)a1 + a2[11] + 8);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for WidgetAuxiliaryViewMetadata(_QWORD *a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(void **, uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int *v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, int *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, _QWORD, uint64_t, int *);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  char *__dst;
  unint64_t __dsta;
  uint64_t v78;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  v8 = a3[6];
  v9 = (void **)((char *)a1 + v8);
  v10 = (void **)(a2 + v8);
  v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v12 + 48);
  v14 = v6;
  v15 = v7;
  if (v13(v10, 1, v11))
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = *v10;
      *v9 = *v10;
      v18 = v17;
    }
    else
    {
      v19 = v10[1];
      *v9 = *v10;
      v9[1] = v19;
      v20 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      v21 = v20[5];
      __dst = (char *)v9 + v21;
      v22 = (char *)v10 + v21;
      v23 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      swift_bridgeObjectRetain();
      v78 = v12;
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        v24 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(__dst, v22, v24);
        swift_storeEnumTagMultiPayload();
      }
      v25 = v20[6];
      v26 = (char *)v9 + v25;
      v27 = (char *)v10 + v25;
      *(_DWORD *)v26 = *(_DWORD *)v27;
      v26[4] = v27[4];
      *((_BYTE *)v9 + v20[7]) = *((_BYTE *)v10 + v20[7]);
      *(void **)((char *)v9 + v20[8]) = *(void **)((char *)v10 + v20[8]);
      v28 = v20[9];
      v29 = (char *)v9 + v28;
      v30 = (char *)v10 + v28;
      *(_OWORD *)v29 = *(_OWORD *)v30;
      v29[16] = v30[16];
      *((_BYTE *)v9 + v20[10]) = *((_BYTE *)v10 + v20[10]);
      *(void **)((char *)v9 + v20[11]) = *(void **)((char *)v10 + v20[11]);
      v31 = v20[12];
      v32 = (char *)v9 + v31;
      v33 = (char *)v10 + v31;
      v34 = *(uint64_t *)((char *)v10 + v31);
      v75 = v33[12];
      __dsta = *((unsigned int *)v33 + 2);
      v35 = v33[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ContentTransition.Storage(v34, __dsta | (v75 << 32), v35);
      *(_QWORD *)v32 = v34;
      v32[12] = v75;
      *((_DWORD *)v32 + 2) = __dsta;
      v32[13] = v35;
      v32[14] = v33[14];
      v12 = v78;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v36 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v37 = (char *)a1 + v36;
  v38 = (char *)(a2 + v36);
  v39 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  v40 = *((_QWORD *)v39 - 1);
  v41 = *(unsigned int (**)(char *, uint64_t, int *))(v40 + 48);
  swift_bridgeObjectRetain();
  if (v41(v38, 1, v39))
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v43 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v44 = type metadata accessor for Date();
      v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
      v45(v37, v38, v44);
      type metadata accessor for ClosedRange<Date>();
      v45(&v37[*(int *)(v46 + 36)], &v38[*(int *)(v46 + 36)], v44);
      type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      v37[*(int *)(v47 + 48)] = v38[*(int *)(v47 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    *(_QWORD *)&v37[v39[5]] = *(_QWORD *)&v38[v39[5]];
    *(_QWORD *)&v37[v39[6]] = *(_QWORD *)&v38[v39[6]];
    v48 = v39[7];
    v49 = &v37[v48];
    v50 = &v38[v48];
    *(_QWORD *)v49 = *(_QWORD *)v50;
    v49[8] = v50[8];
    v51 = *(void (**)(char *, _QWORD, uint64_t, int *))(v40 + 56);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v51(v37, 0, 1, v39);
  }
  v52 = a3[9];
  v53 = (char *)a1 + v52;
  v54 = a2 + v52;
  v55 = *(_QWORD *)(v54 + 8);
  if (v55)
  {
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *((_QWORD *)v53 + 1) = v55;
    v56 = *(_QWORD *)(v54 + 24);
    *((_QWORD *)v53 + 2) = *(_QWORD *)(v54 + 16);
    *((_QWORD *)v53 + 3) = v56;
    v57 = *(_QWORD *)(v54 + 40);
    *((_QWORD *)v53 + 4) = *(_QWORD *)(v54 + 32);
    *((_QWORD *)v53 + 5) = v57;
    v53[48] = *(_BYTE *)(v54 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v58 = *(_OWORD *)(v54 + 16);
    *(_OWORD *)v53 = *(_OWORD *)v54;
    *((_OWORD *)v53 + 1) = v58;
    *((_OWORD *)v53 + 2) = *(_OWORD *)(v54 + 32);
    v53[48] = *(_BYTE *)(v54 + 48);
  }
  v59 = a3[10];
  v60 = (char *)a1 + v59;
  v61 = (const void *)(a2 + v59);
  v62 = type metadata accessor for URL();
  v63 = *(_QWORD *)(v62 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
  {
    type metadata accessor for URL?(0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v63 + 16))(v60, v61, v62);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
  }
  v65 = a3[11];
  v66 = (char *)a1 + v65;
  v67 = a2 + v65;
  v68 = *(_QWORD *)(v67 + 8);
  if (v68 == 1)
  {
    v69 = *(_OWORD *)(v67 + 16);
    *(_OWORD *)v66 = *(_OWORD *)v67;
    *((_OWORD *)v66 + 1) = v69;
    v70 = *(_OWORD *)(v67 + 48);
    *((_OWORD *)v66 + 2) = *(_OWORD *)(v67 + 32);
    *((_OWORD *)v66 + 3) = v70;
  }
  else
  {
    *(_QWORD *)v66 = *(_QWORD *)v67;
    *((_QWORD *)v66 + 1) = v68;
    v71 = *(_QWORD *)(v67 + 24);
    *((_QWORD *)v66 + 2) = *(_QWORD *)(v67 + 16);
    *((_QWORD *)v66 + 3) = v71;
    v72 = *(_QWORD *)(v67 + 40);
    *((_QWORD *)v66 + 4) = *(_QWORD *)(v67 + 32);
    *((_QWORD *)v66 + 5) = v72;
    v73 = *(_QWORD *)(v67 + 56);
    *((_QWORD *)v66 + 6) = *(_QWORD *)(v67 + 48);
    *((_QWORD *)v66 + 7) = v73;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for WidgetAuxiliaryViewMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t, uint64_t);
  int v18;
  int v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  int *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  int *v51;
  uint64_t v52;
  uint64_t (*v53)(_BYTE *, uint64_t, int *);
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  void (*v70)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v71;
  char *v72;
  char *v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  int *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(void *, uint64_t, uint64_t);
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  int v112;
  uint64_t v113;
  char *v114;
  char *v115;
  __int128 v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char *__dst;
  unint64_t __dsta;
  unint64_t __dstb;
  int *v127;
  int *v128;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  v11 = v10;

  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v20 = (void *)*v14;
        *v13 = *v14;
        v21 = v20;
      }
      else
      {
        v127 = a3;
        *v13 = *v14;
        v13[1] = v14[1];
        v25 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        v26 = v25[5];
        __dst = (char *)v13 + v26;
        v27 = (char *)v14 + v26;
        v28 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        swift_bridgeObjectRetain();
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          v34 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(__dst, v27, v34);
          swift_storeEnumTagMultiPayload();
        }
        v35 = v25[6];
        v36 = (char *)v13 + v35;
        v37 = (char *)v14 + v35;
        v38 = *(_DWORD *)v37;
        v36[4] = v37[4];
        *(_DWORD *)v36 = v38;
        *((_BYTE *)v13 + v25[7]) = *((_BYTE *)v14 + v25[7]);
        *(_QWORD *)((char *)v13 + v25[8]) = *(_QWORD *)((char *)v14 + v25[8]);
        v39 = v25[9];
        v40 = (char *)v13 + v39;
        v41 = (char *)v14 + v39;
        v42 = *(_OWORD *)v41;
        v40[16] = v41[16];
        *(_OWORD *)v40 = v42;
        *((_BYTE *)v13 + v25[10]) = *((_BYTE *)v14 + v25[10]);
        *(_QWORD *)((char *)v13 + v25[11]) = *(_QWORD *)((char *)v14 + v25[11]);
        v43 = v25[12];
        v44 = (char *)v13 + v43;
        v45 = (char *)v14 + v43;
        v46 = *(_QWORD *)((char *)v14 + v43);
        v123 = v45[12];
        __dsta = *((unsigned int *)v45 + 2);
        v47 = v45[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of ContentTransition.Storage(v46, __dsta | (v123 << 32), v47);
        *(_QWORD *)v44 = v46;
        v44[12] = v123;
        *((_DWORD *)v44 + 2) = __dsta;
        v44[13] = v47;
        v44[14] = v45[14];
        a3 = v127;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_18;
    }
LABEL_7:
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_18;
  }
  if (v19)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v23 = (void *)*v14;
      *v13 = *v14;
      v24 = v23;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v128 = a3;
      *v13 = *v14;
      v13[1] = v14[1];
      v29 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      v30 = v29[5];
      v31 = (char *)v13 + v30;
      v32 = (char *)v14 + v30;
      v33 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v108 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v108 - 8) + 16))(v31, v32, v108);
        swift_storeEnumTagMultiPayload();
      }
      v109 = v29[6];
      v110 = (char *)v13 + v109;
      v111 = (char *)v14 + v109;
      v112 = *(_DWORD *)v111;
      v110[4] = v111[4];
      *(_DWORD *)v110 = v112;
      *((_BYTE *)v13 + v29[7]) = *((_BYTE *)v14 + v29[7]);
      *(_QWORD *)((char *)v13 + v29[8]) = *(_QWORD *)((char *)v14 + v29[8]);
      v113 = v29[9];
      v114 = (char *)v13 + v113;
      v115 = (char *)v14 + v113;
      v116 = *(_OWORD *)v115;
      v114[16] = v115[16];
      *(_OWORD *)v114 = v116;
      *((_BYTE *)v13 + v29[10]) = *((_BYTE *)v14 + v29[10]);
      *(_QWORD *)((char *)v13 + v29[11]) = *(_QWORD *)((char *)v14 + v29[11]);
      v117 = v29[12];
      v118 = (char *)v13 + v117;
      v119 = (char *)v14 + v117;
      v120 = *(_QWORD *)((char *)v14 + v117);
      v121 = v119[12];
      __dstb = *((unsigned int *)v119 + 2);
      v122 = v119[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ContentTransition.Storage(v120, __dstb | (v121 << 32), v122);
      *(_QWORD *)v118 = v120;
      v118[12] = v121;
      *((_DWORD *)v118 + 2) = __dstb;
      v118[13] = v122;
      v118[14] = v119[14];
      swift_storeEnumTagMultiPayload();
      a3 = v128;
    }
  }
LABEL_18:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v48 = a3[8];
  v49 = (_BYTE *)(a1 + v48);
  v50 = (_BYTE *)(a2 + v48);
  v51 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  v52 = *((_QWORD *)v51 - 1);
  v53 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v52 + 48);
  v54 = v53(v49, 1, v51);
  v55 = v53(v50, 1, v51);
  if (v54)
  {
    if (!v55)
    {
      v56 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v57 = type metadata accessor for Date();
        v58 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v57 - 8) + 16);
        v58(v49, v50, v57);
        type metadata accessor for ClosedRange<Date>();
        v58(&v49[*(int *)(v59 + 36)], &v50[*(int *)(v59 + 36)], v57);
        type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
        v49[*(int *)(v60 + 48)] = v50[*(int *)(v60 + 48)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      *(_QWORD *)&v49[v51[5]] = *(_QWORD *)&v50[v51[5]];
      *(_QWORD *)&v49[v51[6]] = *(_QWORD *)&v50[v51[6]];
      v67 = v51[7];
      v68 = &v49[v67];
      v69 = &v50[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v69[8];
      v70 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v52 + 56);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v70(v49, 0, 1, v51);
      goto LABEL_32;
    }
LABEL_24:
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_32;
  }
  if (v55)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v49, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress);
    goto LABEL_24;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v49, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    v62 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v63 = type metadata accessor for Date();
      v64 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
      v64(v49, v50, v63);
      type metadata accessor for ClosedRange<Date>();
      v64(&v49[*(int *)(v65 + 36)], &v50[*(int *)(v65 + 36)], v63);
      type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      v49[*(int *)(v66 + 48)] = v50[*(int *)(v66 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
  }
  *(_QWORD *)&v49[v51[5]] = *(_QWORD *)&v50[v51[5]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v49[v51[6]] = *(_QWORD *)&v50[v51[6]];
  swift_retain();
  swift_release();
  v71 = v51[7];
  v72 = &v49[v71];
  v73 = &v50[v71];
  *(_QWORD *)&v49[v71] = *(_QWORD *)v73;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v72[8] = v73[8];
LABEL_32:
  v74 = a3;
  v75 = a3[9];
  v76 = a1 + v75;
  v77 = (__int128 *)(a2 + v75);
  v78 = *(_QWORD *)(a1 + v75 + 8);
  v79 = *(_QWORD *)(a2 + v75 + 8);
  if (v78)
  {
    if (v79)
    {
      *(_QWORD *)v76 = *(_QWORD *)v77;
      *(_QWORD *)(v76 + 8) = *((_QWORD *)v77 + 1);
      swift_retain();
      swift_release();
      *(_QWORD *)(v76 + 16) = *((_QWORD *)v77 + 2);
      swift_retain();
      swift_release();
      *(_QWORD *)(v76 + 24) = *((_QWORD *)v77 + 3);
      swift_retain();
      swift_release();
      *(_QWORD *)(v76 + 32) = *((_QWORD *)v77 + 4);
      swift_retain();
      swift_release();
      *(_QWORD *)(v76 + 40) = *((_QWORD *)v77 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v76 + 48) = *((_BYTE *)v77 + 48);
    }
    else
    {
      outlined destroy of WidgetAuxiliaryViewMetadata.Gauge(v76);
      v81 = v77[1];
      v80 = v77[2];
      v82 = *v77;
      *(_BYTE *)(v76 + 48) = *((_BYTE *)v77 + 48);
      *(_OWORD *)(v76 + 16) = v81;
      *(_OWORD *)(v76 + 32) = v80;
      *(_OWORD *)v76 = v82;
    }
  }
  else if (v79)
  {
    *(_QWORD *)v76 = *(_QWORD *)v77;
    *(_QWORD *)(v76 + 8) = *((_QWORD *)v77 + 1);
    *(_QWORD *)(v76 + 16) = *((_QWORD *)v77 + 2);
    *(_QWORD *)(v76 + 24) = *((_QWORD *)v77 + 3);
    *(_QWORD *)(v76 + 32) = *((_QWORD *)v77 + 4);
    *(_QWORD *)(v76 + 40) = *((_QWORD *)v77 + 5);
    *(_BYTE *)(v76 + 48) = *((_BYTE *)v77 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v83 = *v77;
    v84 = v77[1];
    v85 = v77[2];
    *(_BYTE *)(v76 + 48) = *((_BYTE *)v77 + 48);
    *(_OWORD *)(v76 + 16) = v84;
    *(_OWORD *)(v76 + 32) = v85;
    *(_OWORD *)v76 = v83;
  }
  v86 = v74;
  v87 = v74[10];
  v88 = (void *)(a1 + v87);
  v89 = (void *)(a2 + v87);
  v90 = type metadata accessor for URL();
  v91 = *(_QWORD *)(v90 - 8);
  v92 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v91 + 48);
  v93 = v92(v88, 1, v90);
  v94 = v92(v89, 1, v90);
  if (v93)
  {
    if (!v94)
    {
      (*(void (**)(void *, void *, uint64_t))(v91 + 16))(v88, v89, v90);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (v94)
  {
    (*(void (**)(void *, uint64_t))(v91 + 8))(v88, v90);
LABEL_44:
    type metadata accessor for URL?(0);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    goto LABEL_45;
  }
  (*(void (**)(void *, void *, uint64_t))(v91 + 24))(v88, v89, v90);
LABEL_45:
  v96 = v86[11];
  v97 = a1 + v96;
  v98 = (__int128 *)(a2 + v96);
  v99 = *(_QWORD *)(a1 + v96 + 8);
  v100 = *((_QWORD *)v98 + 1);
  if (v99 == 1)
  {
    if (v100 == 1)
    {
      v101 = *v98;
      v102 = v98[1];
      v103 = v98[3];
      *(_OWORD *)(v97 + 32) = v98[2];
      *(_OWORD *)(v97 + 48) = v103;
      *(_OWORD *)v97 = v101;
      *(_OWORD *)(v97 + 16) = v102;
    }
    else
    {
      *(_QWORD *)v97 = *(_QWORD *)v98;
      *(_QWORD *)(v97 + 8) = *((_QWORD *)v98 + 1);
      *(_QWORD *)(v97 + 16) = *((_QWORD *)v98 + 2);
      *(_QWORD *)(v97 + 24) = *((_QWORD *)v98 + 3);
      *(_QWORD *)(v97 + 32) = *((_QWORD *)v98 + 4);
      *(_QWORD *)(v97 + 40) = *((_QWORD *)v98 + 5);
      *(_QWORD *)(v97 + 48) = *((_QWORD *)v98 + 6);
      *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v100 == 1)
  {
    outlined destroy of WidgetAuxiliaryViewMetadata.Accessibility(v97);
    v104 = v98[3];
    v106 = *v98;
    v105 = v98[1];
    *(_OWORD *)(v97 + 32) = v98[2];
    *(_OWORD *)(v97 + 48) = v104;
    *(_OWORD *)v97 = v106;
    *(_OWORD *)(v97 + 16) = v105;
  }
  else
  {
    *(_QWORD *)v97 = *(_QWORD *)v98;
    *(_QWORD *)(v97 + 8) = *((_QWORD *)v98 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v97 + 16) = *((_QWORD *)v98 + 2);
    *(_QWORD *)(v97 + 24) = *((_QWORD *)v98 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v97 + 32) = *((_QWORD *)v98 + 4);
    *(_QWORD *)(v97 + 40) = *((_QWORD *)v98 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v97 + 48) = *((_QWORD *)v98 + 6);
    *(_QWORD *)(v97 + 56) = *((_QWORD *)v98 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t outlined destroy of WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1)
{
  destroy for WidgetAuxiliaryViewMetadata.Gauge();
  return a1;
}

uint64_t outlined destroy of WidgetAuxiliaryViewMetadata.Accessibility(uint64_t a1)
{
  destroy for WidgetAuxiliaryViewMetadata.Accessibility();
  return a1;
}

_OWORD *initializeWithTake for WidgetAuxiliaryViewMetadata(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  char *__dst;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v7, v8, *(_QWORD *)(v10 + 64));
    }
    else
    {
      *v7 = *v8;
      v12 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      v13 = v12[5];
      __dst = (char *)v7 + v13;
      v14 = (char *)v8 + v13;
      v15 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        v16 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(__dst, v14, v16);
        swift_storeEnumTagMultiPayload();
      }
      v17 = v12[6];
      v18 = (char *)v7 + v17;
      v19 = (char *)v8 + v17;
      *(_DWORD *)v18 = *(_DWORD *)v19;
      v18[4] = v19[4];
      *((_BYTE *)v7 + v12[7]) = *((_BYTE *)v8 + v12[7]);
      *(_QWORD *)((char *)v7 + v12[8]) = *(_QWORD *)((char *)v8 + v12[8]);
      v20 = v12[9];
      v21 = (char *)v7 + v20;
      v22 = (char *)v8 + v20;
      *(_OWORD *)v21 = *(_OWORD *)v22;
      v21[16] = v22[16];
      *((_BYTE *)v7 + v12[10]) = *((_BYTE *)v8 + v12[10]);
      *(_QWORD *)((char *)v7 + v12[11]) = *(_QWORD *)((char *)v8 + v12[11]);
      v23 = v12[12];
      v24 = (_QWORD *)((char *)v7 + v23);
      v25 = (_QWORD *)((char *)v8 + v23);
      *v24 = *v25;
      *(_QWORD *)((char *)v24 + 7) = *(_QWORD *)((char *)v25 + 7);
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v26 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v33 = type metadata accessor for Date();
      v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
      v34(v27, v28, v33);
      type metadata accessor for ClosedRange<Date>();
      v34(&v27[*(int *)(v35 + 36)], &v28[*(int *)(v35 + 36)], v33);
      type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      v27[*(int *)(v36 + 48)] = v28[*(int *)(v36 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    *(_QWORD *)&v27[v29[5]] = *(_QWORD *)&v28[v29[5]];
    *(_QWORD *)&v27[v29[6]] = *(_QWORD *)&v28[v29[6]];
    v37 = v29[7];
    v38 = &v27[v37];
    v39 = &v28[v37];
    v38[8] = v39[8];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  v40 = a3[9];
  v41 = a3[10];
  v42 = (char *)a1 + v40;
  v43 = (char *)a2 + v40;
  v44 = *((_OWORD *)v43 + 1);
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *((_OWORD *)v42 + 1) = v44;
  *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
  v42[48] = v43[48];
  v45 = (char *)a1 + v41;
  v46 = (char *)a2 + v41;
  v47 = type metadata accessor for URL();
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    type metadata accessor for URL?(0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v46, v47);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  v50 = a3[11];
  v51 = (_OWORD *)((char *)a1 + v50);
  v52 = (_OWORD *)((char *)a2 + v50);
  v53 = v52[1];
  *v51 = *v52;
  v51[1] = v53;
  v54 = v52[3];
  v51[2] = v52[2];
  v51[3] = v54;
  return a1;
}

void **assignWithTake for WidgetAuxiliaryViewMetadata(void **a1, void **a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_OWORD *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  int *v40;
  uint64_t v41;
  uint64_t (*v42)(_BYTE *, uint64_t, int *);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(char *, uint64_t, uint64_t);
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  char *__dst;

  v6 = *a1;
  *a1 = *a2;

  v7 = a1[1];
  a1[1] = a2[1];

  v8 = a3[6];
  v9 = (_OWORD *)((char *)a1 + v8);
  v10 = (_OWORD *)((char *)a2 + v8);
  v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      if (a1 == a2)
        goto LABEL_19;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
      if (!swift_getEnumCaseMultiPayload())
      {
        *v9 = *v10;
        v22 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        v23 = v22[5];
        v24 = (char *)v9 + v23;
        v25 = (char *)v10 + v23;
        v26 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          v86 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32))(v24, v25, v86);
          swift_storeEnumTagMultiPayload();
        }
        v87 = v22[6];
        v88 = (char *)v9 + v87;
        v89 = (char *)v10 + v87;
        *(_DWORD *)v88 = *(_DWORD *)v89;
        v88[4] = v89[4];
        *((_BYTE *)v9 + v22[7]) = *((_BYTE *)v10 + v22[7]);
        *(_QWORD *)((char *)v9 + v22[8]) = *(_QWORD *)((char *)v10 + v22[8]);
        v90 = v22[9];
        v91 = (char *)v9 + v90;
        v92 = (char *)v10 + v90;
        *(_OWORD *)v91 = *(_OWORD *)v92;
        v91[16] = v92[16];
        *((_BYTE *)v9 + v22[10]) = *((_BYTE *)v10 + v22[10]);
        *(_QWORD *)((char *)v9 + v22[11]) = *(_QWORD *)((char *)v10 + v22[11]);
        v93 = v22[12];
        v94 = (_QWORD *)((char *)v9 + v93);
        v95 = (_QWORD *)((char *)v10 + v93);
        *v94 = *v95;
        *(_QWORD *)((char *)v94 + 7) = *(_QWORD *)((char *)v95 + 7);
        swift_storeEnumTagMultiPayload();
        goto LABEL_19;
      }
      v17 = *(_QWORD *)(v12 + 64);
LABEL_8:
      memcpy(v9, v10, v17);
      goto LABEL_19;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
LABEL_7:
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
    v17 = *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64);
    goto LABEL_8;
  }
  if (v15)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(_QWORD *)(v12 + 64));
  }
  else
  {
    *v9 = *v10;
    v18 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
    v19 = v18[5];
    __dst = (char *)v9 + v19;
    v20 = (char *)v10 + v19;
    v21 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v27 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(__dst, v20, v27);
      swift_storeEnumTagMultiPayload();
    }
    v28 = v18[6];
    v29 = (char *)v9 + v28;
    v30 = (char *)v10 + v28;
    *(_DWORD *)v29 = *(_DWORD *)v30;
    v29[4] = v30[4];
    *((_BYTE *)v9 + v18[7]) = *((_BYTE *)v10 + v18[7]);
    *(_QWORD *)((char *)v9 + v18[8]) = *(_QWORD *)((char *)v10 + v18[8]);
    v31 = v18[9];
    v32 = (char *)v9 + v31;
    v33 = (char *)v10 + v31;
    *(_OWORD *)v32 = *(_OWORD *)v33;
    v32[16] = v33[16];
    *((_BYTE *)v9 + v18[10]) = *((_BYTE *)v10 + v18[10]);
    *(_QWORD *)((char *)v9 + v18[11]) = *(_QWORD *)((char *)v10 + v18[11]);
    v34 = v18[12];
    v35 = (_QWORD *)((char *)v9 + v34);
    v36 = (_QWORD *)((char *)v10 + v34);
    *v35 = *v36;
    *(_QWORD *)((char *)v35 + 7) = *(_QWORD *)((char *)v36 + 7);
    swift_storeEnumTagMultiPayload();
  }
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_19:
  *(void **)((char *)a1 + a3[7]) = *(void **)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  v37 = a3[8];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  v41 = *((_QWORD *)v40 - 1);
  v42 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (v43)
  {
    if (!v44)
    {
      v45 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v46 = type metadata accessor for Date();
        v47 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v46 - 8) + 32);
        v47(v38, v39, v46);
        type metadata accessor for ClosedRange<Date>();
        v47(&v38[*(int *)(v48 + 36)], &v39[*(int *)(v48 + 36)], v46);
        type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
        v38[*(int *)(v49 + 48)] = v39[*(int *)(v49 + 48)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      *(_QWORD *)&v38[v40[5]] = *(_QWORD *)&v39[v40[5]];
      *(_QWORD *)&v38[v40[6]] = *(_QWORD *)&v39[v40[6]];
      v56 = v40[7];
      v57 = &v38[v56];
      v58 = &v39[v56];
      v57[8] = v58[8];
      *(_QWORD *)v57 = *(_QWORD *)v58;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
      goto LABEL_33;
    }
LABEL_25:
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_33;
  }
  if (v44)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v38, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress);
    goto LABEL_25;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v38, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    v51 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v52 = type metadata accessor for Date();
      v53 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v52 - 8) + 32);
      v53(v38, v39, v52);
      type metadata accessor for ClosedRange<Date>();
      v53(&v38[*(int *)(v54 + 36)], &v39[*(int *)(v54 + 36)], v52);
      type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      v38[*(int *)(v55 + 48)] = v39[*(int *)(v55 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
  }
  *(_QWORD *)&v38[v40[5]] = *(_QWORD *)&v39[v40[5]];
  swift_release();
  *(_QWORD *)&v38[v40[6]] = *(_QWORD *)&v39[v40[6]];
  swift_release();
  v59 = v40[7];
  v60 = &v38[v59];
  v61 = &v39[v59];
  *(_QWORD *)v60 = *(_QWORD *)v61;
  swift_bridgeObjectRelease();
  v60[8] = v61[8];
LABEL_33:
  v62 = a3[9];
  v63 = (uint64_t)a1 + v62;
  v64 = (char *)a2 + v62;
  if (*(void **)((char *)a1 + v62 + 8))
  {
    v65 = *((_QWORD *)v64 + 1);
    if (v65)
    {
      *(_QWORD *)v63 = *(_QWORD *)v64;
      *(_QWORD *)(v63 + 8) = v65;
      swift_release();
      *(_QWORD *)(v63 + 16) = *((_QWORD *)v64 + 2);
      swift_release();
      *(_QWORD *)(v63 + 24) = *((_QWORD *)v64 + 3);
      swift_release();
      *(_QWORD *)(v63 + 32) = *((_QWORD *)v64 + 4);
      swift_release();
      *(_QWORD *)(v63 + 40) = *((_QWORD *)v64 + 5);
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    outlined destroy of WidgetAuxiliaryViewMetadata.Gauge(v63);
  }
  v66 = *((_OWORD *)v64 + 1);
  *(_OWORD *)v63 = *(_OWORD *)v64;
  *(_OWORD *)(v63 + 16) = v66;
  *(_OWORD *)(v63 + 32) = *((_OWORD *)v64 + 2);
LABEL_38:
  *(_BYTE *)(v63 + 48) = v64[48];
  v67 = a3[10];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  v70 = type metadata accessor for URL();
  v71 = *(_QWORD *)(v70 - 8);
  v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
  v73 = v72(v68, 1, v70);
  v74 = v72(v69, 1, v70);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v68, v69, v70);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v68, v70);
LABEL_43:
    type metadata accessor for URL?(0);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_44;
  }
  (*(void (**)(char *, char *, uint64_t))(v71 + 40))(v68, v69, v70);
LABEL_44:
  v76 = a3[11];
  v77 = (void **)((char *)a1 + v76);
  v78 = (void **)((char *)a2 + v76);
  if (*(void **)((char *)a1 + v76 + 8) != (void *)1)
  {
    v79 = v78[1];
    if (v79 != 1)
    {
      *v77 = *v78;
      v77[1] = v79;
      swift_bridgeObjectRelease();
      v82 = v78[3];
      v77[2] = v78[2];
      v77[3] = v82;
      swift_bridgeObjectRelease();
      v83 = v78[5];
      v77[4] = v78[4];
      v77[5] = v83;
      swift_bridgeObjectRelease();
      v84 = v78[7];
      v77[6] = v78[6];
      v77[7] = v84;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of WidgetAuxiliaryViewMetadata.Accessibility((uint64_t)v77);
  }
  v80 = *((_OWORD *)v78 + 1);
  *(_OWORD *)v77 = *(_OWORD *)v78;
  *((_OWORD *)v77 + 1) = v80;
  v81 = *((_OWORD *)v78 + 3);
  *((_OWORD *)v77 + 2) = *((_OWORD *)v78 + 2);
  *((_OWORD *)v77 + 3) = v81;
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetAuxiliaryViewMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18778F5FC(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = a3[6];
    }
    else
    {
      type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
      v10 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
      {
        v11 = v13;
        v12 = a3[8];
      }
      else
      {
        type metadata accessor for URL?(0);
        v11 = v14;
        v10 = *(_QWORD *)(v14 - 8);
        v12 = a3[10];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a1[v12], a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18778F6D8(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        type metadata accessor for URL?(0);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a4[10];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for WidgetAuxiliaryViewMetadata()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Progress?(319);
    if (v1 <= 0x3F)
    {
      type metadata accessor for URL?(319);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryViewMetadata.Text()
{
  return &type metadata for WidgetAuxiliaryViewMetadata.Text;
}

uint64_t initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Text.Metadata(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
    v5 = (char *)&loc_18778F8D0 + 4 * byte_187C5992F[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

void type metadata accessor for (String, Bool, TimeZone?)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (String, Bool, TimeZone?))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (String, Bool, TimeZone?));
  }
}

void type metadata accessor for (DateInterval, Double?, Bool)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (DateInterval, Double?, Bool))
  {
    type metadata accessor for DateInterval();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Double?, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (DateInterval, Double?, Bool));
  }
}

uint64_t destroy for WidgetAuxiliaryViewMetadata.Text.Metadata(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      break;
    case 1u:
      type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {

      }
      else
      {
        swift_bridgeObjectRelease();
        v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        v8 = (char *)a1 + *(int *)(v7 + 20);
        type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        if (!swift_getEnumCaseMultiPayload())
        {
          v9 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ContentTransition.Storage(*(uint64_t *)((char *)a1 + *(int *)(v7 + 48)), *(unsigned int *)((char *)a1 + *(int *)(v7 + 48) + 8) | ((unint64_t)*((unsigned __int8 *)a1+ *(int *)(v7 + 48)+ 12) << 32), *((_BYTE *)a1 + *(int *)(v7 + 48) + 13));
      }
      break;
    case 2u:
      v2 = type metadata accessor for Date();
      goto LABEL_7;
    case 3u:
    case 5u:
      v2 = type metadata accessor for DateInterval();
LABEL_7:
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      break;
    case 4u:
      swift_bridgeObjectRelease();
      type metadata accessor for (String, Bool, TimeZone?)();
      v4 = (char *)a1 + *(int *)(v3 + 64);
      v5 = type metadata accessor for TimeZone();
      v6 = *(_QWORD *)(v5 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
        (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
      break;
    case 6u:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      break;
    default:
      break;
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

void initializeWithCopy for WidgetAuxiliaryViewMetadata.Text.Metadata()
{
  char *v0;

  type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  v0 = (char *)sub_187790040 + 4 * byte_187C5993D[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_187790040()
{
  _QWORD *v0;
  _QWORD *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = v1[1];
  *v0 = *v1;
  v0[1] = v3;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  v4 = v2[6];
  *(_OWORD *)((char *)v0 + v2[5]) = *(_OWORD *)((char *)v1 + v2[5]);
  *(_QWORD *)((char *)v0 + v4) = *(_QWORD *)((char *)v1 + v4);
  v5 = v2[8];
  *(_QWORD *)((char *)v0 + v2[7]) = *(_QWORD *)((char *)v1 + v2[7]);
  *((_BYTE *)v0 + v5) = *((_BYTE *)v1 + v5);
  swift_retain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t assignWithCopy for WidgetAuxiliaryViewMetadata.Text.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
    type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
    v6 = (char *)&loc_1877904D4 + 4 * byte_187C59944[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

_BYTE *initializeWithTake for WidgetAuxiliaryViewMetadata.Text.Metadata(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v27 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        v28 = v27[5];
        v29 = &a1[v28];
        v30 = &a2[v28];
        v31 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          v32 = type metadata accessor for URL();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
          swift_storeEnumTagMultiPayload();
        }
        v33 = v27[6];
        v34 = &a1[v33];
        v35 = &a2[v33];
        *(_DWORD *)v34 = *(_DWORD *)v35;
        v34[4] = v35[4];
        a1[v27[7]] = a2[v27[7]];
        *(_QWORD *)&a1[v27[8]] = *(_QWORD *)&a2[v27[8]];
        v36 = v27[9];
        v37 = &a1[v36];
        v38 = &a2[v36];
        *(_OWORD *)v37 = *(_OWORD *)v38;
        v37[16] = v38[16];
        a1[v27[10]] = a2[v27[10]];
        *(_QWORD *)&a1[v27[11]] = *(_QWORD *)&a2[v27[11]];
        v39 = v27[12];
        v40 = &a1[v39];
        v41 = &a2[v39];
        *v40 = *v41;
        *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)v41 + 7);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_16;
    case 2u:
      v8 = type metadata accessor for Date();
      v9 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      type metadata accessor for (NSAttributedStringKey, Any)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), v9);
      v11 = *(int *)(v10 + 48);
      v12 = &a1[v11];
      v13 = &a2[v11];
      *(_OWORD *)v12 = *(_OWORD *)v13;
      v12[16] = v13[16];
      goto LABEL_16;
    case 3u:
      v14 = type metadata accessor for DateInterval();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      goto LABEL_16;
    case 4u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      type metadata accessor for (String, Bool, TimeZone?)();
      v16 = *(int *)(v15 + 64);
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = type metadata accessor for TimeZone();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      goto LABEL_16;
    case 5u:
      v22 = type metadata accessor for DateInterval();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a1, a2, v22);
      type metadata accessor for (DateInterval, Double?, Bool)();
      v24 = *(int *)(v23 + 48);
      v25 = &a1[v24];
      v26 = &a2[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      a1[*(int *)(v23 + 64)] = a2[*(int *)(v23 + 64)];
LABEL_16:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v42 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v42] = *(_QWORD *)&a2[v42];
  v43 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v43] = a2[v43];
  return a1;
}

_BYTE *assignWithTake for WidgetAuxiliaryViewMetadata.Text.Metadata(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
    v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v27 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
          v28 = v27[5];
          v29 = &a1[v28];
          v30 = &a2[v28];
          v31 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
          }
          else
          {
            v32 = type metadata accessor for URL();
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v29, v30, v32);
            swift_storeEnumTagMultiPayload();
          }
          v33 = v27[6];
          v34 = &a1[v33];
          v35 = &a2[v33];
          *(_DWORD *)v34 = *(_DWORD *)v35;
          v34[4] = v35[4];
          a1[v27[7]] = a2[v27[7]];
          *(_QWORD *)&a1[v27[8]] = *(_QWORD *)&a2[v27[8]];
          v36 = v27[9];
          v37 = &a1[v36];
          v38 = &a2[v36];
          *(_OWORD *)v37 = *(_OWORD *)v38;
          v37[16] = v38[16];
          a1[v27[10]] = a2[v27[10]];
          *(_QWORD *)&a1[v27[11]] = *(_QWORD *)&a2[v27[11]];
          v39 = v27[12];
          v40 = &a1[v39];
          v41 = &a2[v39];
          *v40 = *v41;
          *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)v41 + 7);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_17;
      case 2u:
        v8 = type metadata accessor for Date();
        v9 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        type metadata accessor for (NSAttributedStringKey, Any)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), v9);
        v11 = *(int *)(v10 + 48);
        v12 = &a1[v11];
        v13 = &a2[v11];
        *(_OWORD *)v12 = *(_OWORD *)v13;
        v12[16] = v13[16];
        goto LABEL_17;
      case 3u:
        v14 = type metadata accessor for DateInterval();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        goto LABEL_17;
      case 4u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[16] = a2[16];
        type metadata accessor for (String, Bool, TimeZone?)();
        v16 = *(int *)(v15 + 64);
        v17 = &a1[v16];
        v18 = &a2[v16];
        v19 = type metadata accessor for TimeZone();
        v20 = *(_QWORD *)(v19 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 32))(v17, v18, v19);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
        }
        goto LABEL_17;
      case 5u:
        v22 = type metadata accessor for DateInterval();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a1, a2, v22);
        type metadata accessor for (DateInterval, Double?, Bool)();
        v24 = *(int *)(v23 + 48);
        v25 = &a1[v24];
        v26 = &a2[v24];
        *(_QWORD *)v25 = *(_QWORD *)v26;
        v25[8] = v26[8];
        a1[*(int *)(v23 + 64)] = a2[*(int *)(v23 + 64)];
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v42 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v42] = *(_QWORD *)&a2[v42];
  swift_release();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Text.Metadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187791130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Text.Metadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1877911C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
  return result;
}

uint64_t type metadata completion function for WidgetAuxiliaryViewMetadata.Text.Metadata()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_187791324 + 4 * byte_187C59955[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

void destroy for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(id *, uint64_t);
  id *v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      return;
    case 1u:
      type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {

      }
      else
      {
        swift_bridgeObjectRelease();
        v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        v11 = (char *)a1 + *(int *)(v10 + 20);
        type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        if (!swift_getEnumCaseMultiPayload())
        {
          v12 = type metadata accessor for URL();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of ContentTransition.Storage(*(uint64_t *)((char *)a1 + *(int *)(v10 + 48)), *(unsigned int *)((char *)a1 + *(int *)(v10 + 48) + 8) | ((unint64_t)*((unsigned __int8 *)a1+ *(int *)(v10 + 48)+ 12) << 32), *((_BYTE *)a1 + *(int *)(v10 + 48) + 13));
      }
      return;
    case 2u:
      v2 = type metadata accessor for Date();
      goto LABEL_7;
    case 3u:
    case 5u:
      v2 = type metadata accessor for DateInterval();
LABEL_7:
      v3 = v2;
      v4 = *(void (**)(id *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
      v5 = a1;
      goto LABEL_8;
    case 4u:
      swift_bridgeObjectRelease();
      type metadata accessor for (String, Bool, TimeZone?)();
      v7 = (id *)((char *)a1 + *(int *)(v6 + 64));
      v8 = type metadata accessor for TimeZone();
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
        return;
      v4 = *(void (**)(id *, uint64_t))(v9 + 8);
      v5 = v7;
      v3 = v8;
LABEL_8:
      v4(v5, v3);
      return;
    case 6u:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      return;
    default:
      return;
  }
}

void initializeWithCopy for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind()
{
  char *v0;

  v0 = (char *)sub_187791934 + 4 * byte_187C59963[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_187791934()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(result, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
    v2 = (char *)&loc_187791D80 + 4 * byte_187C5996A[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

_BYTE *initializeWithTake for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int *v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v26 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
        v27 = v26[5];
        v28 = &a1[v27];
        v29 = &a2[v27];
        v30 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          v31 = type metadata accessor for URL();
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v28, v29, v31);
          swift_storeEnumTagMultiPayload();
        }
        v32 = v26[6];
        v33 = &a1[v32];
        v34 = &a2[v32];
        *(_DWORD *)v33 = *(_DWORD *)v34;
        v33[4] = v34[4];
        a1[v26[7]] = a2[v26[7]];
        *(_QWORD *)&a1[v26[8]] = *(_QWORD *)&a2[v26[8]];
        v35 = v26[9];
        v36 = &a1[v35];
        v37 = &a2[v35];
        *(_OWORD *)v36 = *(_OWORD *)v37;
        v36[16] = v37[16];
        a1[v26[10]] = a2[v26[10]];
        *(_QWORD *)&a1[v26[11]] = *(_QWORD *)&a2[v26[11]];
        v38 = v26[12];
        v39 = &a1[v38];
        v40 = &a2[v38];
        *v39 = *v40;
        *(_QWORD *)((char *)v39 + 7) = *(_QWORD *)((char *)v40 + 7);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_16;
    case 2u:
      v7 = type metadata accessor for Date();
      v8 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      type metadata accessor for (NSAttributedStringKey, Any)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), v8);
      v10 = *(int *)(v9 + 48);
      v11 = &a1[v10];
      v12 = &a2[v10];
      *(_OWORD *)v11 = *(_OWORD *)v12;
      v11[16] = v12[16];
      goto LABEL_16;
    case 3u:
      v13 = type metadata accessor for DateInterval();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      goto LABEL_16;
    case 4u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      type metadata accessor for (String, Bool, TimeZone?)();
      v15 = *(int *)(v14 + 64);
      v16 = &a1[v15];
      v17 = &a2[v15];
      v18 = type metadata accessor for TimeZone();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      goto LABEL_16;
    case 5u:
      v21 = type metadata accessor for DateInterval();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a1, a2, v21);
      type metadata accessor for (DateInterval, Double?, Bool)();
      v23 = *(int *)(v22 + 48);
      v24 = &a1[v23];
      v25 = &a2[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      a1[*(int *)(v22 + 64)] = a2[*(int *)(v22 + 64)];
LABEL_16:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_BYTE *assignWithTake for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int *v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v26 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
          v27 = v26[5];
          v28 = &a1[v27];
          v29 = &a2[v27];
          v30 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
          if (swift_getEnumCaseMultiPayload())
          {
            memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
          }
          else
          {
            v31 = type metadata accessor for URL();
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v28, v29, v31);
            swift_storeEnumTagMultiPayload();
          }
          v32 = v26[6];
          v33 = &a1[v32];
          v34 = &a2[v32];
          *(_DWORD *)v33 = *(_DWORD *)v34;
          v33[4] = v34[4];
          a1[v26[7]] = a2[v26[7]];
          *(_QWORD *)&a1[v26[8]] = *(_QWORD *)&a2[v26[8]];
          v35 = v26[9];
          v36 = &a1[v35];
          v37 = &a2[v35];
          *(_OWORD *)v36 = *(_OWORD *)v37;
          v36[16] = v37[16];
          a1[v26[10]] = a2[v26[10]];
          *(_QWORD *)&a1[v26[11]] = *(_QWORD *)&a2[v26[11]];
          v38 = v26[12];
          v39 = &a1[v38];
          v40 = &a2[v38];
          *v39 = *v40;
          *(_QWORD *)((char *)v39 + 7) = *(_QWORD *)((char *)v40 + 7);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_17;
      case 2u:
        v7 = type metadata accessor for Date();
        v8 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        type metadata accessor for (NSAttributedStringKey, Any)(0, &lazy cache variable for type metadata for (Date, Text.DateStyle), v8);
        v10 = *(int *)(v9 + 48);
        v11 = &a1[v10];
        v12 = &a2[v10];
        *(_OWORD *)v11 = *(_OWORD *)v12;
        v11[16] = v12[16];
        goto LABEL_17;
      case 3u:
        v13 = type metadata accessor for DateInterval();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        goto LABEL_17;
      case 4u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[16] = a2[16];
        type metadata accessor for (String, Bool, TimeZone?)();
        v15 = *(int *)(v14 + 64);
        v16 = &a1[v15];
        v17 = &a2[v15];
        v18 = type metadata accessor for TimeZone();
        v19 = *(_QWORD *)(v18 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
        {
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v19 + 32))(v16, v17, v18);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
        }
        goto LABEL_17;
      case 5u:
        v21 = type metadata accessor for DateInterval();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a1, a2, v21);
        type metadata accessor for (DateInterval, Double?, Bool)();
        v23 = *(int *)(v22 + 48);
        v24 = &a1[v23];
        v25 = &a2[v23];
        *(_QWORD *)v24 = *(_QWORD *)v25;
        v24[8] = v25[8];
        a1[*(int *)(v22 + 64)] = a2[*(int *)(v22 + 64)];
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void type metadata completion function for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  char v8;
  void *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;

  v9 = &unk_187C5A0F0;
  v0 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(319);
  if (v1 <= 0x3F)
  {
    v10 = *(_QWORD *)(v0 - 8) + 64;
    type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v11 = &v8;
      v3 = type metadata accessor for DateInterval();
      if (v4 <= 0x3F)
      {
        v12 = *(_QWORD *)(v3 - 8) + 64;
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        if (v5 <= 0x3F)
        {
          swift_getTupleTypeLayout3();
          v13 = &v7;
          swift_getTupleTypeLayout3();
          v14 = &v6;
          v15 = &unk_187C5A150;
          swift_initEnumMetadataMultiPayload();
        }
      }
    }
  }
}

char *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Graphic(char *a1, char **a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = *a2;
      *(_QWORD *)a1 = *a2;
      v7 = v6;
    }
    else
    {
      v9 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v9;
      v10 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      v11 = v10[5];
      v12 = &a1[v11];
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        v15 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
        swift_storeEnumTagMultiPayload();
      }
      v16 = v10[6];
      v17 = &a1[v16];
      v18 = (char *)a2 + v16;
      *(_DWORD *)v17 = *(_DWORD *)v18;
      v17[4] = v18[4];
      a1[v10[7]] = *((_BYTE *)a2 + v10[7]);
      *(_QWORD *)&a1[v10[8]] = *(char **)((char *)a2 + v10[8]);
      v19 = v10[9];
      v20 = &a1[v19];
      v21 = (char *)a2 + v19;
      *(_OWORD *)v20 = *(_OWORD *)v21;
      v20[16] = v21[16];
      a1[v10[10]] = *((_BYTE *)a2 + v10[10]);
      *(_QWORD *)&a1[v10[11]] = *(char **)((char *)a2 + v10[11]);
      v22 = v10[12];
      v23 = &a1[v22];
      v24 = (char *)a2 + v22;
      v25 = *(uint64_t *)((char *)a2 + v22);
      v26 = v24[12];
      v27 = *((unsigned int *)v24 + 2);
      v28 = v24[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ContentTransition.Storage(v25, v27 | (v26 << 32), v28);
      *(_QWORD *)v23 = v25;
      v23[12] = v26;
      *((_DWORD *)v23 + 2) = v27;
      v23[13] = v28;
      v23[14] = v24[14];
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for WidgetAuxiliaryViewMetadata.Graphic(id *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
  {

  }
  else
  {
    swift_bridgeObjectRelease();
    v2 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
    v3 = (char *)a1 + *(int *)(v2 + 20);
    type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    if (!swift_getEnumCaseMultiPayload())
    {
      v4 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ContentTransition.Storage(*(uint64_t *)((char *)a1 + *(int *)(v2 + 48)), *(unsigned int *)((char *)a1 + *(int *)(v2 + 48) + 8) | ((unint64_t)*((unsigned __int8 *)a1+ *(int *)(v2 + 48)+ 12) << 32), *((_BYTE *)a1 + *(int *)(v2 + 48) + 13));
  }
}

_QWORD *initializeWithCopy for WidgetAuxiliaryViewMetadata.Graphic(_QWORD *a1, uint64_t a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = *(void **)a2;
    *a1 = *(_QWORD *)a2;
    v5 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    *a1 = *(_QWORD *)a2;
    a1[1] = v6;
    v7 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
    v8 = v7[5];
    v9 = (char *)a1 + v8;
    v10 = (const void *)(a2 + v8);
    v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v12 = type metadata accessor for URL();
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    v13 = v7[6];
    v14 = (char *)a1 + v13;
    v15 = a2 + v13;
    *(_DWORD *)v14 = *(_DWORD *)v15;
    v14[4] = *(_BYTE *)(v15 + 4);
    *((_BYTE *)a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
    *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
    v16 = v7[9];
    v17 = (char *)a1 + v16;
    v18 = a2 + v16;
    *(_OWORD *)v17 = *(_OWORD *)v18;
    v17[16] = *(_BYTE *)(v18 + 16);
    *((_BYTE *)a1 + v7[10]) = *(_BYTE *)(a2 + v7[10]);
    *(_QWORD *)((char *)a1 + v7[11]) = *(_QWORD *)(a2 + v7[11]);
    v19 = v7[12];
    v20 = (char *)a1 + v19;
    v21 = a2 + v19;
    v22 = *(_QWORD *)(a2 + v19);
    v23 = *(unsigned __int8 *)(v21 + 12);
    v24 = *(unsigned int *)(v21 + 8);
    v25 = *(_BYTE *)(v21 + 13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ContentTransition.Storage(v22, v24 | (v23 << 32), v25);
    *(_QWORD *)v20 = v22;
    v20[12] = v23;
    *((_DWORD *)v20 + 2) = v24;
    v20[13] = v25;
    v20[14] = *(_BYTE *)(v21 + 14);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for WidgetAuxiliaryViewMetadata.Graphic(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  id v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = (void *)*a2;
      *a1 = *a2;
      v5 = v4;
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v6 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      v7 = v6[5];
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      swift_bridgeObjectRetain();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        v11 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
        swift_storeEnumTagMultiPayload();
      }
      v12 = v6[6];
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = *(_DWORD *)v14;
      v13[4] = v14[4];
      *(_DWORD *)v13 = v15;
      *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
      *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
      v16 = v6[9];
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = *(_OWORD *)v18;
      v17[16] = v18[16];
      *(_OWORD *)v17 = v19;
      *((_BYTE *)a1 + v6[10]) = *((_BYTE *)a2 + v6[10]);
      *(_QWORD *)((char *)a1 + v6[11]) = *(_QWORD *)((char *)a2 + v6[11]);
      v20 = v6[12];
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = *(_QWORD *)((char *)a2 + v20);
      v24 = v22[12];
      v25 = *((unsigned int *)v22 + 2);
      v26 = v22[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of ContentTransition.Storage(v23, v25 | (v24 << 32), v26);
      *(_QWORD *)v21 = v23;
      v21[12] = v24;
      *((_DWORD *)v21 + 2) = v25;
      v21[13] = v26;
      v21[14] = v22[14];
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for WidgetAuxiliaryViewMetadata.Graphic(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v6 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
    v7 = v6[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    v12 = v6[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
    *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
    v15 = v6[9];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    *(_OWORD *)v16 = *(_OWORD *)v17;
    v16[16] = v17[16];
    *((_BYTE *)a1 + v6[10]) = *((_BYTE *)a2 + v6[10]);
    *(_QWORD *)((char *)a1 + v6[11]) = *(_QWORD *)((char *)a2 + v6[11]);
    v18 = v6[12];
    v19 = (_QWORD *)((char *)a1 + v18);
    v20 = (_QWORD *)((char *)a2 + v18);
    *v19 = *v20;
    *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)((char *)v20 + 7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *assignWithTake for WidgetAuxiliaryViewMetadata.Graphic(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v6 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named(0);
      v7 = v6[5];
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        v11 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
        swift_storeEnumTagMultiPayload();
      }
      v12 = v6[6];
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      *(_DWORD *)v13 = *(_DWORD *)v14;
      v13[4] = v14[4];
      *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
      *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
      v15 = v6[9];
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      *(_OWORD *)v16 = *(_OWORD *)v17;
      v16[16] = v17[16];
      *((_BYTE *)a1 + v6[10]) = *((_BYTE *)a2 + v6[10]);
      *(_QWORD *)((char *)a1 + v6[11]) = *(_QWORD *)((char *)a2 + v6[11]);
      v18 = v6[12];
      v19 = (_QWORD *)((char *)a1 + v18);
      v20 = (_QWORD *)((char *)a2 + v18);
      *v19 = *v20;
      *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)((char *)v20 + 7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for WidgetAuxiliaryViewMetadata.Graphic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for WidgetAuxiliaryViewMetadata.Graphic(a1, a2, a3, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named);
}

_QWORD *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Graphic.Named(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
      swift_storeEnumTagMultiPayload();
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (char *)v4 + v14;
    v17 = (char *)a2 + v14;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    *((_BYTE *)v4 + v15) = *((_BYTE *)a2 + v15);
    v18 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    *(_OWORD *)v19 = *(_OWORD *)v20;
    v19[16] = v20[16];
    v21 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *(_QWORD *)((char *)v4 + v21) = *(_QWORD *)((char *)a2 + v21);
    v22 = a3[12];
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    v25 = *(_QWORD *)((char *)a2 + v22);
    v26 = v24[12];
    v27 = *((unsigned int *)v24 + 2);
    v28 = v24[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ContentTransition.Storage(v25, v27 | (v26 << 32), v28);
    *(_QWORD *)v23 = v25;
    v23[12] = v26;
    *((_DWORD *)v23 + 2) = v27;
    v23[13] = v28;
    v23[14] = v24[14];
  }
  return v4;
}

uint64_t destroy for WidgetAuxiliaryViewMetadata.Graphic.Named(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  if (!swift_getEnumCaseMultiPayload())
  {
    v5 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined consume of ContentTransition.Storage(*(_QWORD *)(a1 + *(int *)(a2 + 48)), *(unsigned int *)(a1 + *(int *)(a2 + 48) + 8) | ((unint64_t)*(unsigned __int8 *)(a1+ *(int *)(a2 + 48)+ 12) << 32), *(_BYTE *)(a1 + *(int *)(a2 + 48) + 13));
}

_QWORD *initializeWithCopy for WidgetAuxiliaryViewMetadata.Graphic.Named(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v16 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_OWORD *)v17 = *(_OWORD *)v18;
  v17[16] = v18[16];
  v19 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  v20 = a3[12];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)((char *)a2 + v20);
  v24 = v22[12];
  v25 = *((unsigned int *)v22 + 2);
  v26 = v22[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ContentTransition.Storage(v23, v25 | (v24 << 32), v26);
  *(_QWORD *)v21 = v23;
  v21[12] = v24;
  *((_DWORD *)v21 + 2) = v25;
  v21[13] = v26;
  v21[14] = v22[14];
  return a1;
}

_QWORD *assignWithCopy for WidgetAuxiliaryViewMetadata.Graphic.Named(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v6, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
  }
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_DWORD *)v13;
  v12[4] = v13[4];
  *(_DWORD *)v12 = v14;
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[9];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_OWORD *)v17;
  v16[16] = v17[16];
  *(_OWORD *)v16 = v18;
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = a3[12];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)((char *)a2 + v19);
  v23 = v21[12];
  v24 = *((unsigned int *)v21 + 2);
  v25 = v21[13];
  outlined copy of ContentTransition.Storage(v22, v24 | (v23 << 32), v25);
  v26 = *(_QWORD *)v20;
  v27 = *((unsigned int *)v20 + 2) | ((unint64_t)v20[12] << 32);
  *(_QWORD *)v20 = v22;
  *((_DWORD *)v20 + 2) = v24;
  v20[12] = v23;
  v28 = v20[13];
  v20[13] = v25;
  outlined consume of ContentTransition.Storage(v26, v27, v28);
  v20[14] = v21[14];
  return a1;
}

_OWORD *initializeWithTake for WidgetAuxiliaryViewMetadata.Graphic.Named(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v13[4] = v14[4];
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  v15 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  v16[16] = v17[16];
  v18 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  v19 = a3[12];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *(_QWORD *)((char *)v20 + 7) = *(_QWORD *)((char *)v21 + 7);
  *v20 = *v21;
  return a1;
}

_QWORD *assignWithTake for WidgetAuxiliaryViewMetadata.Graphic.Named(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v7, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    v10 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  v16 = a3[9];
  v17 = a3[10];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  *(_OWORD *)v18 = *(_OWORD *)v19;
  v18[16] = v19[16];
  *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  v20 = a3[12];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *((_WORD *)v22 + 6);
  v24 = *((_DWORD *)v22 + 2);
  v25 = *(_QWORD *)((char *)a1 + v20);
  v26 = *(unsigned int *)((char *)a1 + v20 + 8) | ((unint64_t)*((unsigned __int8 *)a1 + v20 + 12) << 32);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_DWORD *)v21 + 2) = v24;
  v27 = *((_BYTE *)a1 + v20 + 13);
  *((_WORD *)v21 + 6) = v23;
  outlined consume of ContentTransition.Storage(v25, v26, v27);
  v21[14] = v22[14];
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Graphic.Named()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187793C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Graphic.Named()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187793C8C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for WidgetAuxiliaryViewMetadata.Graphic.Named()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v8 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v3 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *assignWithTake for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for WidgetAuxiliaryViewMetadata.Graphic.Named.Location(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for WidgetAuxiliaryViewMetadata.Graphic(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
}

uint64_t type metadata completion function for WidgetAuxiliaryViewMetadata.Graphic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Progress(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = type metadata accessor for Date();
      v9 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      type metadata accessor for ClosedRange<Date>();
      v9((_QWORD *)((char *)a1 + *(int *)(v10 + 36)), (_QWORD *)((char *)a2 + *(int *)(v10 + 36)), v8);
      type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      *((_BYTE *)a1 + *(int *)(v11 + 48)) = *((_BYTE *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v13 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for WidgetAuxiliaryViewMetadata.Progress(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = type metadata accessor for Date();
    v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
    v3(a1, v2);
    type metadata accessor for ClosedRange<Date>();
    v3(a1 + *(int *)(v4 + 36), v2);
  }
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for WidgetAuxiliaryViewMetadata.Progress(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v11 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for WidgetAuxiliaryViewMetadata.Progress(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Date();
      v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_retain();
  swift_release();
  v11 = a3[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[8] = v13[8];
  return a1;
}

_BYTE *initializeWithTake for WidgetAuxiliaryViewMetadata.Progress(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v11 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  return a1;
}

_BYTE *assignWithTake for WidgetAuxiliaryViewMetadata.Progress(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Date();
      v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_release();
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_release();
  v11 = a3[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)&a1[v11] = *(_QWORD *)v13;
  swift_bridgeObjectRelease();
  v12[8] = v13[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Progress()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18779483C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Progress()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1877948C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for WidgetAuxiliaryViewMetadata.Progress()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for WidgetAuxiliaryViewMetadata.Progress.Kind(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8((_QWORD *)((char *)a1 + *(int *)(v9 + 36)), (_QWORD *)((char *)a2 + *(int *)(v9 + 36)), v7);
    type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    *((_BYTE *)a1 + *(int *)(v10 + 48)) = *((_BYTE *)a2 + *(int *)(v10 + 48));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

_BYTE *initializeWithCopy for WidgetAuxiliaryViewMetadata.Progress.Kind(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Date();
    v7 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    type metadata accessor for ClosedRange<Date>();
    v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
    type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithCopy for WidgetAuxiliaryViewMetadata.Progress.Kind(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Date();
      v7 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      type metadata accessor for ClosedRange<Date>();
      v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
      type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_BYTE *initializeWithTake for WidgetAuxiliaryViewMetadata.Progress.Kind(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Date();
    v7 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    type metadata accessor for ClosedRange<Date>();
    v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
    type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *assignWithTake for WidgetAuxiliaryViewMetadata.Progress.Kind(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Date();
      v7 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      type metadata accessor for ClosedRange<Date>();
      v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
      type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (ClosedRange<Date>, Bool), (void (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
      a1[*(int *)(v9 + 48)] = a2[*(int *)(v9 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for WidgetAuxiliaryViewMetadata.Progress.Kind()
{
  unint64_t v0;
  _QWORD v1[6];

  v1[4] = &unk_187C5A238;
  type metadata accessor for ClosedRange<Date>();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v1[5] = v1;
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t destroy for WidgetAuxiliaryViewMetadata.Gauge()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for WidgetAuxiliaryViewMetadata.Gauge(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryViewMetadata.Gauge()
{
  return &type metadata for WidgetAuxiliaryViewMetadata.Gauge;
}

uint64_t destroy for WidgetAuxiliaryViewMetadata.Accessibility()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for WidgetAuxiliaryViewMetadata.Accessibility(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for WidgetAuxiliaryViewMetadata.Accessibility(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for WidgetAuxiliaryViewMetadata.Accessibility(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Accessibility(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Accessibility(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryViewMetadata.Accessibility()
{
  return &type metadata for WidgetAuxiliaryViewMetadata.Accessibility;
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryViewMetadata.Key()
{
  return &type metadata for WidgetAuxiliaryViewMetadata.Key;
}

uint64_t getEnumTagSinglePayload for WidgetAuxiliaryViewMetadataModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187795434 + 4 * byte_187C5997B[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadataModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryURLPreferenceKey()
{
  return &type metadata for WidgetAuxiliaryURLPreferenceKey;
}

uint64_t type metadata instantiation function for MutableBox<A>.CodingKeys()
{
  return swift_allocateGenericValueMetadata();
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys()
{
  return &unk_1E1AF4DF0;
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Gauge.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1877956B0 + 4 * byte_187C5998E[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1877956E4 + 4 * byte_187C59989[v4]))();
}

uint64_t sub_1877956E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877956EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1877956F4);
  return result;
}

uint64_t sub_187795700(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187795708);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_18779570C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187795714(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Gauge.CodingKeys()
{
  return &unk_1E1AF4FF0;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys()
{
  return &unk_1E1AF54A8;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind.AbsoluteCodingKeys()
{
  return &unk_1E1AF55C8;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys()
{
  return &unk_1E1AF5538;
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1877957B0 + 4 * byte_187C59998[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1877957E4 + 4 * byte_187C59993[v4]))();
}

uint64_t sub_1877957E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877957EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1877957F4);
  return result;
}

uint64_t sub_187795800(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187795808);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_18779580C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187795814(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Progress.CodingKeys()
{
  return &unk_1E1AF5418;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys()
{
  return &unk_1E1AF5268;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.BundleCodingKeys()
{
  return &unk_1E1AF52F8;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location.SystemCodingKeys()
{
  return &unk_1E1AF5388;
}

void *type metadata accessor for SymbolEffectArray()
{
  return &unk_1E1AC6E70;
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1877958BC + 4 * byte_187C599A2[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1877958F0 + 4 * byte_187C5999D[v4]))();
}

uint64_t sub_1877958F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877958F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187795900);
  return result;
}

uint64_t sub_18779590C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187795914);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_187795918(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187795920(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys()
{
  return &unk_1E1AF51D8;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Error()
{
  return &unk_1E1AF5148;
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187795998 + 4 * byte_187C599AC[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1877959CC + 4 * byte_187C599A7[v4]))();
}

uint64_t sub_1877959CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877959D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1877959DCLL);
  return result;
}

uint64_t sub_1877959E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1877959F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1877959F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877959FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.CodingKeys()
{
  return &unk_1E1AF50B8;
}

uint64_t storeEnumTagSinglePayload for MutableBox<A>.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_187795A58 + 4 * byte_187C599B1[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_187795A78 + 4 * byte_187C599B6[v4]))();
}

_BYTE *sub_187795A58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_187795A78(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_187795A80(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_187795A88(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_187795A90(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_187795A98(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.Text.CodingKeys()
{
  return &unk_1E1AF4F38;
}

uint64_t storeEnumTagSinglePayload for WidgetAuxiliaryViewMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_187795B00 + 4 * byte_187C599C0[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_187795B34 + 4 * byte_187C599BB[v4]))();
}

uint64_t sub_187795B34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187795B3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187795B44);
  return result;
}

uint64_t sub_187795B50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187795B58);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_187795B5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187795B64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for WidgetAuxiliaryViewMetadata.CodingKeys()
{
  return &unk_1E1AF4D60;
}

uint64_t base witness table accessor for Equatable in MutableBox<A><A>.CodingKeys()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (uint64_t (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys, (uint64_t)&protocol conformance descriptor for MutableBox<A><A>.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MutableBox<A><A>.CodingKeys()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (uint64_t (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys, (uint64_t)&protocol conformance descriptor for MutableBox<A><A>.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in MutableBox<A><A>.CodingKeys()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (uint64_t (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys, (uint64_t)&protocol conformance descriptor for MutableBox<A><A>.CodingKeys);
}

uint64_t specialized WidgetAuxiliaryViewMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x617461646174656DLL && a2 == 0xEC00000074786554;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000187BE8580
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x63696870617267 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6B6361626C6C6166 && a2 == 0xE900000000000073
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73736572676F7270 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6567756167 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6269737365636361 && a2 == 0xED00007974696C69)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Accessibility.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1953393000 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Gauge.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x786F426C6562616CLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000187BE85C0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000187BE85E0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000187BE8600
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746E69745FLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Graphic.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64656D616ELL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6567616D69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Graphic.Named.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6F626D79537369 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73726F6C6F635FLL && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C6F43746E69745FLL && a2 == 0xEA0000000000726FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x65646F6D5FLL && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x456C6F626D79735FLL && a2 == 0xEE00737463656666
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000187BE85A0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Graphic.Named.Location.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C646E7562 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D6574737973 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Progress.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1684957547 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x786F426C6562616CLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000187BE85C0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E69745FLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Progress.Kind.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574756C6F736261 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized WidgetAuxiliaryViewMetadata.Progress.Kind.DateCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized SymbolEffectArray.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  int v18;
  char v19;
  int v20;
  char v21;

  v3 = specialized SymbolEffectArray.init(effects:)(MEMORY[0x1E0DEE9D8]);
  v4 = a1[1];
  if (v4 >= a1[2])
  {
LABEL_18:
    a1[3] = 0;
    return v3;
  }
  while (1)
  {
    v5 = a1[3];
    if (!v5)
      break;
    v6 = a1[4];
    if (v4 >= v6)
    {
      if (v6 < v4)
        goto LABEL_19;
      a1[3] = 0;
      break;
    }
LABEL_8:
    if ((v5 & 0xFFFFFFFFFFFFFFF8) == 8)
    {
      ProtobufDecoder.messageField<A>(_:)();
      if (v1)
        goto LABEL_20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1, (char *)v3);
      v8 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v3 + 24);
      v9 = v8 + 1;
      if (v8 >= v7 >> 1)
      {
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, (char *)v3);
        v9 = v8 + 1;
        v3 = (uint64_t)v11;
      }
      *(_QWORD *)(v3 + 16) = v9;
      v10 = v3 + 48 * v8;
      *(_QWORD *)(v10 + 32) = v13;
      *(_QWORD *)(v10 + 40) = v14;
      *(_QWORD *)(v10 + 48) = v15;
      *(_WORD *)(v10 + 56) = v16;
      *(_DWORD *)(v10 + 60) = v17;
      *(_DWORD *)(v10 + 64) = v18;
      *(_BYTE *)(v10 + 68) = v19;
      *(_DWORD *)(v10 + 72) = v20;
      *(_BYTE *)(v10 + 76) = v21;
      v4 = a1[1];
      if (v4 >= a1[2])
        goto LABEL_18;
    }
    else
    {
      v13 = v5;
      ProtobufDecoder.skipField(_:)();
      if (v1)
        goto LABEL_20;
      v4 = a1[1];
      if (v4 >= a1[2])
        goto LABEL_18;
    }
  }
  v5 = ProtobufDecoder.decodeVarint()();
  if (v1)
    goto LABEL_20;
  if (v5 >= 8)
    goto LABEL_8;
LABEL_19:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_BYTE *)(a1 + 104);
  outlined copy of _ShapeStyle_Pack.Fill(*(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(void **)(a1 + 24), *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  outlined copy of GraphicsBlendMode?(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of GraphicsBlendMode?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return outlined copy of GraphicsBlendMode(result, a2 & 1);
  return result;
}

uint64_t outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = *(_BYTE *)(a1 + 104);
  outlined consume of _ShapeStyle_Pack.Fill(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  outlined consume of GraphicsBlendMode?(v2, v3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of GraphicsBlendMode?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return outlined consume of GraphicsBlendMode(result, a2 & 1);
  return result;
}

unint64_t lazy protocol witness table accessor for type AuxiliaryViewMetadataPreferenceWriter and conformance AuxiliaryViewMetadataPreferenceWriter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AuxiliaryViewMetadataPreferenceWriter and conformance AuxiliaryViewMetadataPreferenceWriter;
  if (!lazy protocol witness table cache variable for type AuxiliaryViewMetadataPreferenceWriter and conformance AuxiliaryViewMetadataPreferenceWriter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AuxiliaryViewMetadataPreferenceWriter, &unk_1E1B18828);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AuxiliaryViewMetadataPreferenceWriter and conformance AuxiliaryViewMetadataPreferenceWriter);
  }
  return result;
}

void type metadata accessor for (WidgetAuxiliaryViewMetadata.Graphic, WidgetAuxiliaryViewMetadata.Graphic)(uint64_t a1)
{
  type metadata accessor for (WidgetAuxiliaryViewMetadata?, WidgetAuxiliaryViewMetadata?)(a1, &lazy cache variable for type metadata for (WidgetAuxiliaryViewMetadata.Graphic, WidgetAuxiliaryViewMetadata.Graphic), (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
}

void type metadata accessor for (WidgetAuxiliaryViewMetadata?, WidgetAuxiliaryViewMetadata?)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for (WidgetAuxiliaryViewMetadata.Graphic.Named.Location, WidgetAuxiliaryViewMetadata.Graphic.Named.Location)(uint64_t a1)
{
  type metadata accessor for (WidgetAuxiliaryViewMetadata?, WidgetAuxiliaryViewMetadata?)(a1, &lazy cache variable for type metadata for (WidgetAuxiliaryViewMetadata.Graphic.Named.Location, WidgetAuxiliaryViewMetadata.Graphic.Named.Location), (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic.Named.Location);
}

void type metadata accessor for KeyedEncodingContainer<MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys(255, (uint64_t)a2, (uint64_t)a3, a4);
    v8 = v7;
    v9 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys and conformance MutableBox<A><A>.CodingKeys, (uint64_t (*)(uint64_t))type metadata accessor for MutableBox<WidgetAuxiliaryViewMetadata?><A>.CodingKeys, (uint64_t)&protocol conformance descriptor for MutableBox<A><A>.CodingKeys);
    v10 = a3(a1, v8, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t lazy protocol witness table accessor for type [WidgetAuxiliaryViewMetadata] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9 = a3();
    result = MEMORY[0x18D75FFDC](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ResolvableTimer?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ResolvableTimer?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2F08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for ResolvableCurrentDate?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ResolvableCurrentDate?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE5180], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for ResolvableDateInterval?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ResolvableDateInterval?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE54C0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind?, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata.Kind, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for ResolvableAbsoluteDate?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ResolvableAbsoluteDate?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE54A8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for ResolvableStringAttribute?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ResolvableStringAttribute?, (uint64_t (*)(uint64_t))type metadata accessor for ResolvableStringAttribute, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t type metadata accessor for ResolvableStringAttribute()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ResolvableStringAttribute;
  if (!lazy cache variable for type metadata for ResolvableStringAttribute)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ResolvableStringAttribute);
  }
  return result;
}

void type metadata accessor for (ResolvableTextSegmentAttribute.Value?, ResolvableTextSegmentAttribute.Value?)(uint64_t a1)
{
  type metadata accessor for (WidgetAuxiliaryViewMetadata?, WidgetAuxiliaryViewMetadata?)(a1, &lazy cache variable for type metadata for (ResolvableTextSegmentAttribute.Value?, ResolvableTextSegmentAttribute.Value?), type metadata accessor for ResolvableTextSegmentAttribute.Value?);
}

void type metadata accessor for [NSDictionary]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [NSDictionary])
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [NSDictionary]);
  }
}

void *type metadata accessor for AuxiliaryViewMetadataPreferenceWriter()
{
  return &unk_1E1B18828;
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryTextImagePreference()
{
  return &type metadata for WidgetAuxiliaryTextImagePreference;
}

uint64_t initializeWithCopy for LazyWidgetAuxiliaryMetadataTextImage(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v5 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LazyWidgetAuxiliaryMetadataTextImage(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

uint64_t assignWithTake for LazyWidgetAuxiliaryMetadataTextImage(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  return a1;
}

uint64_t type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyWidgetAuxiliaryMetadataTextImage);
}

void base witness table accessor for _AttributeBody in LazyWidgetAuxiliaryMetadataTextImage<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined consume of WidgetAuxiliaryTextImagePreference??(uint64_t result)
{
  if (result != 2)
    return outlined consume of WidgetAuxiliaryTextImagePreference?(result);
  return result;
}

uint64_t sub_18779812C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryMetadataTextImageWriter, &type metadata for WidgetAuxiliaryMetadataTextImageWriter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter;
  if (!lazy protocol witness table cache variable for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetAuxiliaryMetadataTextImageWriter, &type metadata for WidgetAuxiliaryMetadataTextImageWriter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetAuxiliaryMetadataTextImageWriter and conformance WidgetAuxiliaryMetadataTextImageWriter);
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryMetadataTextImageWriter()
{
  return &type metadata for WidgetAuxiliaryMetadataTextImageWriter;
}

void View.accessoryBar<A>(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_187798224()
{
  lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187798260()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[12];

  v1 = type metadata accessor for ModifiedContent();
  v3[0] = v0;
  v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v3);
}

unint64_t lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessoryBarContent and conformance AccessoryBarContent;
  if (!lazy protocol witness table cache variable for type AccessoryBarContent and conformance AccessoryBarContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessoryBarContent, &type metadata for AccessoryBarContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessoryBarContent and conformance AccessoryBarContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessoryBarContent and conformance AccessoryBarContent;
  if (!lazy protocol witness table cache variable for type AccessoryBarContent and conformance AccessoryBarContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessoryBarContent, &type metadata for AccessoryBarContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessoryBarContent and conformance AccessoryBarContent);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryBarContent()
{
  return &type metadata for AccessoryBarContent;
}

_UNKNOWN **base witness table accessor for View in AccessoryBarContent()
{
  return &protocol witness table for AccessoryBarContent;
}

void protocol witness for View.body.getter in conformance AccessoryBarContent()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t instantiation function for generic protocol witness table for AccessoryBarContent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t CustomHoverEffect.hoverEffectDisabled(_:)()
{
  return CustomHoverEffect.concat<A>(_:)();
}

uint64_t sub_187798414(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E68], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect;
  if (!lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CustomDisabledHoverEffect, &unk_1E1AF1478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect;
  if (!lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CustomDisabledHoverEffect, &unk_1E1AF1478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect;
  if (!lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CustomDisabledHoverEffect, &unk_1E1AF1478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect;
  if (!lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CustomDisabledHoverEffect, &unk_1E1AF1478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for _CustomDisabledHoverEffect(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1877984F8 + 4 * byte_187C5B6B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18779852C + 4 * byte_187C5B6B0[v4]))();
}

uint64_t sub_18779852C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187798534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18779853CLL);
  return result;
}

uint64_t sub_187798548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187798550);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187798554(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18779855C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for _CustomDisabledHoverEffect()
{
  return &unk_1E1AF1478;
}

void protocol witness for PrimitiveCustomHoverContextEffect.makeContextValue() in conformance _CustomDisabledHoverEffect(char *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  if (*v1)
    v2 = 1;
  else
    v2 = 3;
  *a1 = v2;
}

void protocol witness for CustomHoverEffect.body(content:) in conformance _CustomDisabledHoverEffect()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:) in conformance _CustomDisabledHoverEffect()
{
  lazy protocol witness table accessor for type _CustomDisabledHoverEffect and conformance _CustomDisabledHoverEffect();
  return static PrimitiveCustomHoverContextEffect._makeCustomHoverEffect(effect:inputs:body:)();
}

void protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance _CustomDisabledHoverEffect(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  BOOL v2;

  v2 = (*v1 & 1) == 0;
  *a1 = 3;
  a1[1] = v2;
}

uint64_t EnvironmentValues.documentConfiguration.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.documentConfiguration : EnvironmentValues(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.documentConfiguration : EnvironmentValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v7 - v4;
  outlined init with copy of PlatformItemList.Item?(a1, (uint64_t)&v7 - v4, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  return EnvironmentValues.documentConfiguration.setter((uint64_t)v5);
}

uint64_t EnvironmentValues.documentConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  MEMORY[0x1E0C80A78](v3, v4);
  outlined init with copy of PlatformItemList.Item?(a1, (uint64_t)&v7 - v5, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  type metadata accessor for EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DocumentConfigurationEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of DocumentConfiguration?(a1);
}

uint64_t DocumentConfiguration.isEditable.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t DocumentConfiguration.fileURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DocumentConfiguration();
  return outlined init with copy of PlatformItemList.Item?(v1 + *(int *)(v3 + 20), a1, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
}

uint64_t type metadata accessor for DocumentConfiguration()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentConfiguration;
  if (!type metadata singleton initialization cache for DocumentConfiguration)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for URL();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

_BYTE *initializeWithCopy for DocumentConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_BYTE *assignWithCopy for DocumentConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v5, v6, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

_BYTE *initializeWithTake for DocumentConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_BYTE *assignWithTake for DocumentConfiguration(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v5, v6, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1877990A8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_187799140(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void type metadata completion function for DocumentConfiguration()
{
  unint64_t v0;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void *type metadata accessor for DocumentConfigurationEnvironmentKey()
{
  return &unk_1E1B05650;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance DocumentConfigurationEnvironmentKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentConfigurationEnvironmentKey.defaultValue);
  return outlined init with copy of PlatformItemList.Item?(v3, a1, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
}

uint64_t outlined destroy of DocumentConfiguration?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DocumentConfiguration?, (void (*)(uint64_t))type metadata accessor for DocumentConfiguration);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Scene.environmentObject<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v9;

  v7 = (_QWORD *)static ObservableObject.environmentStore.getter();
  v9 = a1;
  swift_unknownObjectRetain();
  Scene.environment<A>(_:_:)(v7, (uint64_t)&v9, a2, a4);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_187799434(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for Optional();
  type metadata accessor for _EnvironmentKeyWritingModifier();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

uint64_t type metadata completion function for OscillationDetector()
{
  return swift_initClassMetadata2();
}

uint64_t OscillationDetector.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t OscillationDetector.__deallocating_deinit()
{
  OscillationDetector.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OscillationDetector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OscillationDetector);
}

uint64_t View.accessibilityIntentAction(_:lnAction:perform:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  uint64_t v22;
  char v23;

  v9 = *a1;
  v10 = a1[1];
  v12 = a1[2];
  v11 = a1[3];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_187BF9830;
  KeyPath = swift_getKeyPath();
  v23 = 0;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
  *(_QWORD *)(v13 + 56) = v15;
  *(_QWORD *)(v13 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  v16 = swift_allocObject();
  *(_QWORD *)(v13 + 32) = v16;
  v17 = v23;
  *(_QWORD *)(v16 + 16) = v9;
  *(_QWORD *)(v16 + 24) = v10;
  *(_QWORD *)(v16 + 32) = v12;
  *(_QWORD *)(v16 + 40) = v11;
  *(_QWORD *)(v16 + 48) = KeyPath;
  *(_QWORD *)(v16 + 56) = 0;
  *(_BYTE *)(v16 + 64) = v17;
  *(_QWORD *)(v16 + 72) = a2;
  *(_QWORD *)(v16 + 80) = a3;
  *(_QWORD *)(v16 + 88) = a4;
  *(_QWORD *)(v16 + 96) = 0;
  *(_QWORD *)(v16 + 104) = 0;
  *(_QWORD *)(v16 + 112) = 0;
  *(_QWORD *)(v16 + 120) = 2;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_OWORD *)(v16 + 144) = 0u;
  *(_QWORD *)(v16 + 160) = 0;
  *(_BYTE *)(v16 + 168) = 1;
  *(_BYTE *)(v13 + 72) = 1;
  v22 = v13;
  outlined copy of AccessibilityActionKind.ActionKind(v9, v10, v12, v11);
  lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  v18 = a2;
  swift_retain();
  View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v22, 1, a5, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, a6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_187799708()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));

  swift_release();
  if (*(_QWORD *)(v0 + 120) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 152))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_BYTE *)(v0 + 144));
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t View.accessibilityIntentAction(named:lnAction:perform:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;
  uint64_t v24;
  char v25;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_187BF9830;
  KeyPath = swift_getKeyPath();
  v25 = 0;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
  *(_QWORD *)(v16 + 56) = v18;
  *(_QWORD *)(v16 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  v19 = swift_allocObject();
  *(_QWORD *)(v16 + 32) = v19;
  v20 = v25;
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  *(_QWORD *)(v19 + 32) = a3 & 1;
  *(_QWORD *)(v19 + 40) = a4;
  *(_QWORD *)(v19 + 48) = KeyPath;
  *(_QWORD *)(v19 + 56) = 0;
  *(_BYTE *)(v19 + 64) = v20;
  *(_QWORD *)(v19 + 72) = a5;
  *(_QWORD *)(v19 + 80) = a6;
  *(_QWORD *)(v19 + 88) = a7;
  *(_QWORD *)(v19 + 96) = 0;
  *(_QWORD *)(v19 + 104) = 0;
  *(_QWORD *)(v19 + 112) = 0;
  *(_QWORD *)(v19 + 120) = 2;
  *(_OWORD *)(v19 + 128) = 0u;
  *(_OWORD *)(v19 + 144) = 0u;
  *(_QWORD *)(v19 + 160) = 0;
  *(_BYTE *)(v19 + 168) = 1;
  *(_BYTE *)(v16 + 72) = 1;
  v24 = v16;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  swift_bridgeObjectRetain();
  v21 = a5;
  swift_retain();
  View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v24, 1, a8, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, a9);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityIntentAction<A>(lnAction:perform:label:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void (*v17)(double);
  _QWORD *v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a6;
  v22 = a4;
  v13 = *(_QWORD *)(a5 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17(v14);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  v19 = a1;
  swift_retain();
  View.accessibilityAttachment<A>(content:_:)((uint64_t)v16, (uint64_t)partial apply for closure #1 in View.accessibilityIntentAction<A>(lnAction:perform:label:), (uint64_t)v18, v22, a5, v23, a8, a7);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, a5);
}

void closure #1 in View.accessibilityIntentAction<A>(lnAction:perform:label:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _UNKNOWN **v30;
  char v31;
  char v32;
  uint64_t v33[3];

  v9 = *(_QWORD *)a1;
  v8 = *(void **)(a1 + 8);
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 16) != 1)
    {
      AccessibilityAttachment.init()();
      goto LABEL_11;
    }
    v10 = swift_bridgeObjectRetain();
    v11 = specialized Sequence.compactMap<A>(_:)(v10);
    static AccessibilityAttachment.combine(_:)(v11, &v27);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v9, v8, 1);
    v9 = v27;
    v12 = v28;
    v8 = v28;
  }
  else
  {
    v12 = v8;
    swift_bridgeObjectRetain();
  }
  v27 = v9;
  v28 = v8;
  AccessibilityAttachment.mergedProperties.getter(v33);

  swift_bridgeObjectRelease();
  v13 = v33[0];
  AccessibilityAttachment.init()();
  if (v13)
  {
    v14 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v14, (uint64_t)&v27);
    swift_bridgeObjectRelease_n();
    if (v27)
    {
      if (*(_QWORD *)(v27 + 16))
      {
        v15 = *(_QWORD *)(v27 + 32);
        v16 = *(_QWORD *)(v27 + 40);
        v17 = *(unsigned __int8 *)(v27 + 48);
        v18 = *(_QWORD *)(v27 + 56);
        outlined copy of Text.Storage(v15, v16, *(_BYTE *)(v27 + 48));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        KeyPath = swift_getKeyPath();
        v32 = 0;
        type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
        v29 = v20;
        v30 = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
        v21 = swift_allocObject();
        v27 = v21;
        v22 = v32;
        *(_QWORD *)(v21 + 16) = v15;
        *(_QWORD *)(v21 + 24) = v16;
        *(_QWORD *)(v21 + 32) = v17;
        *(_QWORD *)(v21 + 40) = v18;
        *(_QWORD *)(v21 + 48) = KeyPath;
        *(_QWORD *)(v21 + 56) = 0;
        *(_BYTE *)(v21 + 64) = v22;
        *(_QWORD *)(v21 + 72) = a2;
        *(_QWORD *)(v21 + 80) = a3;
        *(_QWORD *)(v21 + 88) = a4;
        *(_QWORD *)(v21 + 96) = 0;
        *(_QWORD *)(v21 + 104) = 0;
        *(_QWORD *)(v21 + 112) = 0;
        *(_QWORD *)(v21 + 120) = 2;
        *(_OWORD *)(v21 + 128) = 0u;
        *(_OWORD *)(v21 + 144) = 0u;
        *(_QWORD *)(v21 + 160) = 0;
        *(_BYTE *)(v21 + 168) = 1;
        v31 = 1;
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_187BF9830;
        outlined init with copy of AnyAccessibilityAction((uint64_t)&v27, v23 + 32);
        v24 = a2;
        swift_retain();
        specialized AccessibilityProperties.subscript.setter(v23);
        outlined destroy of AnyAccessibilityAction((uint64_t)&v27);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
LABEL_11:
  v25 = v33[0];
  v26 = v33[1];
  outlined consume of AccessibilityAttachment.Tree(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v26;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t sub_187799CC0()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in View.accessibilityIntentAction<A>(lnAction:perform:label:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in View.accessibilityIntentAction<A>(lnAction:perform:label:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t ModifiedContent<>.accessibilityIntentAction(_:lnAction:perform:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v24;
  char v25;

  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  v13 = a1[3];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_187BF9830;
  KeyPath = swift_getKeyPath();
  v25 = 0;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
  *(_QWORD *)(v14 + 56) = v16;
  *(_QWORD *)(v14 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  v17 = swift_allocObject();
  *(_QWORD *)(v14 + 32) = v17;
  v18 = v25;
  *(_QWORD *)(v17 + 16) = v10;
  *(_QWORD *)(v17 + 24) = v11;
  *(_QWORD *)(v17 + 32) = v12;
  *(_QWORD *)(v17 + 40) = v13;
  *(_QWORD *)(v17 + 48) = KeyPath;
  *(_QWORD *)(v17 + 56) = 0;
  *(_BYTE *)(v17 + 64) = v18;
  *(_QWORD *)(v17 + 72) = a2;
  *(_QWORD *)(v17 + 80) = a3;
  *(_QWORD *)(v17 + 88) = a4;
  *(_QWORD *)(v17 + 96) = 0;
  *(_QWORD *)(v17 + 104) = 0;
  *(_QWORD *)(v17 + 112) = 0;
  *(_QWORD *)(v17 + 120) = 2;
  *(_OWORD *)(v17 + 128) = 0u;
  *(_OWORD *)(v17 + 144) = 0u;
  *(_QWORD *)(v17 + 160) = 0;
  *(_BYTE *)(v17 + 168) = 1;
  *(_BYTE *)(v14 + 72) = 1;
  v24 = v14;
  outlined copy of AccessibilityActionKind.ActionKind(v10, v11, v12, v13);
  v19 = lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  v20 = lazy protocol witness table accessor for type [AnyAccessibilityAction] and conformance [A]();
  v21 = a2;
  swift_retain();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v24, 1, a5, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, v19, v20, a6);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityIntentAction(named:lnAction:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v27;
  char v28;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_187BF9830;
  KeyPath = swift_getKeyPath();
  v28 = 0;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
  *(_QWORD *)(v16 + 56) = v18;
  *(_QWORD *)(v16 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  v19 = swift_allocObject();
  *(_QWORD *)(v16 + 32) = v19;
  v20 = v28;
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  *(_QWORD *)(v19 + 32) = a3 & 1;
  *(_QWORD *)(v19 + 40) = a4;
  *(_QWORD *)(v19 + 48) = KeyPath;
  *(_QWORD *)(v19 + 56) = 0;
  *(_BYTE *)(v19 + 64) = v20;
  *(_QWORD *)(v19 + 72) = a5;
  *(_QWORD *)(v19 + 80) = a6;
  *(_QWORD *)(v19 + 88) = a7;
  *(_QWORD *)(v19 + 96) = 0;
  *(_QWORD *)(v19 + 104) = 0;
  *(_QWORD *)(v19 + 112) = 0;
  *(_QWORD *)(v19 + 120) = 2;
  *(_OWORD *)(v19 + 128) = 0u;
  *(_OWORD *)(v19 + 144) = 0u;
  *(_QWORD *)(v19 + 160) = 0;
  *(_BYTE *)(v19 + 168) = 1;
  *(_BYTE *)(v16 + 72) = 1;
  v27 = v16;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  v21 = lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  v22 = lazy protocol witness table accessor for type [AnyAccessibilityAction] and conformance [A]();
  swift_bridgeObjectRetain();
  v23 = a5;
  swift_retain();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v27, 1, a8, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, v21, v22, a9);
  return swift_bridgeObjectRelease();
}

BOOL AccessibilityAppIntentAction.impliedRole(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _BOOL8 result;
  char v5;
  char v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v1 + 24) | v2 & 1)
    return 0;
  v3 = AccessibilityNullableOptionSet<>.subscript.getter();
  result = 0;
  if ((v3 & 1) == 0 && (v2 & 0x20000) == 0)
  {
    v5 = AccessibilityNullableOptionSet<>.subscript.getter();
    result = 0;
    if ((v5 & 1) == 0 && (v2 & 8) == 0)
    {
      v6 = AccessibilityNullableOptionSet<>.subscript.getter();
      result = 0;
      if ((v6 & 1) == 0 && (v2 & 2) == 0)
        return (AccessibilityNullableOptionSet<>.subscript.getter() & 1) == 0;
    }
  }
  return result;
}

uint64_t AccessibilityAppIntentAction.asCodableAction(in:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t result;
  id v12;
  __int128 v13;
  __int128 v14;
  __int16 v15;

  v4 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(unsigned __int8 *)(v1 + 48);
  v7 = *(_OWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 72);
  v13 = v7;
  if (v4 >= 5)
  {
    outlined copy of AccessibilityActionKind.ActionKind(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), v4);
    swift_retain();
    swift_retain();
    result = AccessibilityText.init(_:environment:idiom:)();
    if ((_BYTE)v15 == 0xFF)
    {
      *(_QWORD *)(a1 + 64) = 0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return result;
    }
    v10 = v14;
    v9 = v15 & 0x101;
    v7 = v13;
  }
  else
  {
    v9 = 255 - v4;
    v10 = 0uLL;
  }
  *(_OWORD *)a1 = v10;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  outlined copy of Environment<AppIntentExecutor?>.Content(v3, v5, v6);
  v12 = (id)v13;
  return swift_retain();
}

uint64_t AccessibilityAppIntentAction.matches<A>(_:)(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, double);
  uint64_t v17;
  __int128 v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  id v32;
  __int128 v33;
  char v34;
  void *v35;
  id v36;
  unint64_t v37;
  __int128 v38;
  char v39;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[4];
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unsigned __int8 v67;
  __int128 v68;
  uint64_t v69;

  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v49 = *v2;
  v10 = *((_QWORD *)v2 + 3);
  v50 = *((_QWORD *)v2 + 2);
  v12 = *((_QWORD *)v2 + 4);
  v11 = *((_QWORD *)v2 + 5);
  v13 = *((unsigned __int8 *)v2 + 48);
  v14 = (void *)*((_QWORD *)v2 + 7);
  v47 = *((_QWORD *)v2 + 8);
  v48 = *((_QWORD *)v2 + 9);
  v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16);
  v16((char *)&v41 - v17, a1, a2, v9);
  if (swift_dynamicCast())
  {
    v18 = v51;
    v19 = v52;
    v20 = *((_QWORD *)&v52 + 1);
    switch(*((_QWORD *)&v52 + 1))
    {
      case 0:
        v21 = v10 == 0;
        outlined consume of AccessibilityActionKind.ActionKind(v51, *((uint64_t *)&v51 + 1), v52, 0);
        v23 = *((_QWORD *)&v18 + 1);
        v22 = v18;
        v24 = v19;
        v25 = 0;
        goto LABEL_15;
      case 1:
        v21 = v10 == 1;
        outlined consume of AccessibilityActionKind.ActionKind(v51, *((uint64_t *)&v51 + 1), v52, 1uLL);
        v23 = *((_QWORD *)&v18 + 1);
        v22 = v18;
        v24 = v19;
        v25 = 1;
        goto LABEL_15;
      case 2:
        v21 = v10 == 2;
        outlined consume of AccessibilityActionKind.ActionKind(v51, *((uint64_t *)&v51 + 1), v52, 2uLL);
        v23 = *((_QWORD *)&v18 + 1);
        v22 = v18;
        v24 = v19;
        v25 = 2;
        goto LABEL_15;
      case 3:
        v21 = v10 == 3;
        outlined consume of AccessibilityActionKind.ActionKind(v51, *((uint64_t *)&v51 + 1), v52, 3uLL);
        v23 = *((_QWORD *)&v18 + 1);
        v22 = v18;
        v24 = v19;
        v25 = 3;
        goto LABEL_15;
      case 4:
        v21 = v10 == 4;
        outlined consume of AccessibilityActionKind.ActionKind(v51, *((uint64_t *)&v51 + 1), v52, 4uLL);
        v23 = *((_QWORD *)&v18 + 1);
        v22 = v18;
        v24 = v19;
        v25 = 4;
        goto LABEL_15;
      default:
        if (v10 < 5)
        {
          outlined consume of AccessibilityActionKind.ActionKind(v51, *((uint64_t *)&v51 + 1), v52, *((unint64_t *)&v52 + 1));
          goto LABEL_7;
        }
        v37 = v10;
        v38 = v49;
        v39 = v50;
        outlined copy of AccessibilityActionKind.ActionKind(v49, *((uint64_t *)&v49 + 1), v50, v10);
        outlined copy of AccessibilityActionKind.ActionKind(v18, *((uint64_t *)&v18 + 1), v19, v20);
        LOBYTE(v51) = v39 & 1;
        v21 = static Text.== infix(_:_:)();
        outlined consume of AccessibilityActionKind.ActionKind(v18, *((uint64_t *)&v18 + 1), v19, v20);
        outlined consume of AccessibilityActionKind.ActionKind(v38, *((uint64_t *)&v38 + 1), v39, v37);
        v23 = *((_QWORD *)&v18 + 1);
        v22 = v18;
        v24 = v19;
        v25 = v20;
LABEL_15:
        outlined consume of AccessibilityActionKind.ActionKind(v22, v23, v24, v25);
        break;
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v16)(v6, a1, a2);
    if (swift_dynamicCast())
    {
      v26 = *((_QWORD *)&v64 + 1);
      v27 = v66;
      v28 = v67;
      v41 = v68;
      v51 = v64;
      v29 = v64;
      v42 = v64;
      v52 = v65;
      v30 = v65;
      v43 = v65;
      v53 = v66;
      v45 = *((_QWORD *)&v66 + 1);
      v46 = v66;
      v54[0] = v67;
      v44 = v67;
      *(_OWORD *)&v54[1] = v68;
      v54[3] = v69;
      v64 = v49;
      *(_QWORD *)&v65 = v50;
      *((_QWORD *)&v65 + 1) = v10;
      *(_QWORD *)&v66 = v12;
      *((_QWORD *)&v66 + 1) = v11;
      v67 = v13;
      *(_QWORD *)&v68 = v14;
      *((_QWORD *)&v68 + 1) = v47;
      v69 = v48;
      v31 = *((_QWORD *)&v52 + 1);
      outlined copy of AccessibilityActionKind.ActionKind(v29, *((uint64_t *)&v51 + 1), v30, *((unint64_t *)&v52 + 1));
      outlined copy of Environment<AppIntentExecutor?>.Content(v27, *((uint64_t *)&v27 + 1), v28);
      v32 = (id)v41;
      swift_retain();
      v21 = specialized static AccessibilityAppIntentAction.== infix(_:_:)((uint64_t *)&v51, (uint64_t *)&v64);
      v33 = v53;
      v34 = v54[0];
      v35 = (void *)v54[1];
      outlined consume of AccessibilityActionKind.ActionKind(v51, *((uint64_t *)&v51 + 1), v52, *((unint64_t *)&v52 + 1));
      outlined consume of Environment<AppIntentExecutor?>.Content(v33, *((uint64_t *)&v33 + 1), v34);
      swift_release();

      outlined consume of AccessibilityActionKind.ActionKind(v42, v26, v43, v31);
      outlined consume of Environment<AppIntentExecutor?>.Content(v46, v45, v44);
      swift_release();

    }
    else
    {
      memset(v54, 0, sizeof(v54));
      v53 = 0u;
      v52 = 0u;
      v51 = 0u;
      v55 = v49;
      v56 = v50;
      v57 = v10;
      v58 = v12;
      v59 = v11;
      v60 = v13;
      v61 = v14;
      v62 = v47;
      v63 = v48;
      outlined copy of AccessibilityActionKind.ActionKind(v49, *((uint64_t *)&v49 + 1), v50, v10);
      outlined copy of Environment<AppIntentExecutor?>.Content(v12, v11, v13);
      v36 = v14;
      swift_retain();
      outlined release of (AccessibilityAppIntentAction?, AccessibilityAppIntentAction?)((uint64_t)&v51);
LABEL_7:
      v21 = 0;
    }
  }
  return v21 & 1;
}

uint64_t CodableAccessibilityAction.ActionKind.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  char v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char v65;
  char v66;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.CustomCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys, (uint64_t)&unk_1E1AED9B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v59 = v4;
  v55 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v58 = (char *)&v43 - v6;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys, (uint64_t)&unk_1E1AEDAC8, v3);
  v56 = *(_QWORD *)(v7 - 8);
  v57 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v54 = (char *)&v43 - v9;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.DeleteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys, (uint64_t)&unk_1E1AEDA48, v3);
  v52 = *(_QWORD *)(v10 - 8);
  v53 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v51 = (char *)&v43 - v12;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.MagicTapCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys, (uint64_t)&unk_1E1AEDAA8, v3);
  v49 = *(_QWORD *)(v13 - 8);
  v50 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v48 = (char *)&v43 - v15;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.EscapeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys, (uint64_t)&unk_1E1AEDA68, v3);
  v46 = *(_QWORD *)(v16 - 8);
  v47 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v45 = (char *)&v43 - v18;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.DefaultCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys, (uint64_t)&unk_1E1AEDA88, v3);
  v44 = v19;
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v43 - v22;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.ActionKind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys, (uint64_t)&unk_1E1AED928, v3);
  v61 = *(_QWORD *)(v24 - 8);
  v62 = v24;
  MEMORY[0x1E0C80A78](v24, v25);
  v26 = *(_QWORD *)(v1 + 8);
  v60 = *(void **)v1;
  v27 = *(_WORD *)(v1 + 16);
  v28 = a1[3];
  v29 = a1;
  v31 = (char *)&v43 - v30;
  __swift_project_boxed_opaque_existential_1(v29, v28);
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v27)
  {
    case -5:
      LOBYTE(v63) = 4;
      lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys();
      v32 = v54;
      v33 = v62;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v35 = v56;
      v34 = v57;
      goto LABEL_7;
    case -4:
      LOBYTE(v63) = 3;
      lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys();
      v32 = v51;
      v33 = v62;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v35 = v52;
      v34 = v53;
      goto LABEL_7;
    case -3:
      LOBYTE(v63) = 2;
      lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys();
      v32 = v48;
      v33 = v62;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v35 = v49;
      v34 = v50;
      goto LABEL_7;
    case -2:
      LOBYTE(v63) = 1;
      lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys();
      v32 = v45;
      v33 = v62;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v35 = v46;
      v34 = v47;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
      goto LABEL_9;
    case -1:
      LOBYTE(v63) = 0;
      lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys();
      v33 = v62;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v44);
LABEL_9:
      result = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v31, v33);
      break;
    default:
      v36 = v27;
      LOBYTE(v63) = 5;
      v37 = v27 & 1;
      v38 = v60;
      outlined copy of AccessibilityText.Storage(v60, v26, v27 & 1);
      lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys();
      v39 = v58;
      v40 = v62;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v63 = v38;
      v64 = v26;
      v65 = v37;
      v66 = HIBYTE(v36) & 1;
      lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
      v41 = v59;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v41);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v31, v40);
      result = outlined copy of CodableAccessibilityAction.ActionKind((uint64_t)v60, v26, v36, (uint64_t (*)(uint64_t, uint64_t, _QWORD))outlined consume of AccessibilityText.Storage);
      break;
  }
  return result;
}

uint64_t CodableAccessibilityAction.ActionKind.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v50 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.CustomCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys, (uint64_t)&unk_1E1AED9B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v46 = v4;
  v53 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v49 = (char *)&v34 - v6;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys, (uint64_t)&unk_1E1AEDAC8, v3);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v52 = (char *)&v34 - v9;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.DeleteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys, (uint64_t)&unk_1E1AEDA48, v3);
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v48 = (char *)&v34 - v12;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.MagicTapCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys, (uint64_t)&unk_1E1AEDAA8, v3);
  v40 = *(_QWORD *)(v13 - 8);
  v41 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v51 = (char *)&v34 - v15;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.EscapeCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys, (uint64_t)&unk_1E1AEDA68, v3);
  v38 = *(_QWORD *)(v16 - 8);
  v39 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v47 = (char *)&v34 - v18;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.DefaultCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys, (uint64_t)&unk_1E1AEDA88, v3);
  v36 = *(_QWORD *)(v19 - 8);
  v37 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.ActionKind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys, (uint64_t)&unk_1E1AED928, v3);
  v22 = v21;
  v23 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v24);
  v26 = (char *)&v34 - v25;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys();
  v27 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v28 = (uint64_t)a1;
  if (!v27)
  {
    v54 = v23;
    v35 = a1;
    v29 = KeyedDecodingContainer.allKeys.getter();
    if (*(_QWORD *)(v29 + 16) == 1)
      __asm { BR              X10 }
    v30 = type metadata accessor for DecodingError();
    swift_allocError();
    v32 = v31;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v32 = &type metadata for CodableAccessibilityAction.ActionKind;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x1E0DEC450], v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v26, v22);
    v28 = (uint64_t)v35;
  }
  return __swift_destroy_boxed_opaque_existential_1(v28);
}

uint64_t CodableAccessibilityAction.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  char v28;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityAction.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys, (uint64_t)&unk_1E1AEDB08, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v20 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v15 - v6;
  v8 = *v1;
  v9 = v1[1];
  v10 = *((_WORD *)v1 + 8);
  v11 = v1[3];
  v17 = v1[4];
  v18 = v11;
  v27 = *((unsigned __int8 *)v1 + 40);
  v19 = *((_OWORD *)v1 + 3);
  v16 = v1[8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v22 = v8;
  v23 = v9;
  v24 = v10;
  v28 = 0;
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind();
  v12 = v21;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v12)
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v7, v4);
  v14 = v20;
  v22 = v18;
  v23 = v17;
  LOBYTE(v24) = v27;
  v25 = v19;
  v26 = v16;
  v28 = 1;
  lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v7, v4);
}

void CodableAccessibilityAction.init(from:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  char v35;

  v28 = a2;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityAction.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys, (uint64_t)&unk_1E1AEDB08, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v23 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v10 = v6;
    v35 = 0;
    lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v30;
    v12 = v31;
    v35 = 1;
    v13 = v29;
    outlined copy of CodableAccessibilityAction.ActionKind(v29, v30, v31, (uint64_t (*)(uint64_t, uint64_t, _QWORD))outlined copy of AccessibilityText.Storage);
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
    v15 = v29;
    v14 = v30;
    v16 = v31;
    v34 = v31;
    v24 = v33;
    v25 = v29;
    v27 = v32;
    v17 = v13;
    outlined copy of CodableAccessibilityAction.ActionKind(v13, v11, v12, (uint64_t (*)(uint64_t, uint64_t, _QWORD))outlined copy of AccessibilityText.Storage);
    v18 = v15;
    v19 = v14;
    v23 = v14;
    outlined copy of Environment<AppIntentExecutor?>.Content(v18, v14, v16);
    v26 = (id)v27;
    v20 = v24;
    swift_retain();
    outlined copy of CodableAccessibilityAction.ActionKind(v13, v11, v12, (uint64_t (*)(uint64_t, uint64_t, _QWORD))outlined consume of AccessibilityText.Storage);
    v21 = v28;
    *v28 = v17;
    v21[1] = v11;
    *((_WORD *)v21 + 8) = v12;
    v22 = v25;
    v21[3] = v25;
    v21[4] = v19;
    LOBYTE(v19) = v34;
    *((_BYTE *)v21 + 40) = v34;
    *((_OWORD *)v21 + 3) = v27;
    v21[8] = v20;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined copy of CodableAccessibilityAction.ActionKind(v17, v11, v12, (uint64_t (*)(uint64_t, uint64_t, _QWORD))outlined consume of AccessibilityText.Storage);
    outlined consume of Environment<AppIntentExecutor?>.Content(v22, v23, v19);
    swift_release();

  }
}

uint64_t protocol witness for AccessibilityKindActionProvider.kind.getter in conformance AccessibilityAppIntentAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of AccessibilityActionKind.ActionKind(v2, v3, v4, v5);
}

BOOL protocol witness for AccessibilityAction.impliedRole(for:) in conformance AccessibilityAppIntentAction(uint64_t a1)
{
  return AccessibilityAppIntentAction.impliedRole(for:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityAction.ActionKind.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18779BA74 + 4 * byte_187C5B8E0[*v0]))(0x746C7561666564, 0xE700000000000000);
}

uint64_t sub_18779BA74()
{
  return 0x657061637365;
}

uint64_t sub_18779BA88()
{
  return 0x706154636967616DLL;
}

uint64_t sub_18779BAA0()
{
  return 0x6574656C6564;
}

uint64_t sub_18779BAB4()
{
  return 0x756E654D776F6873;
}

uint64_t sub_18779BACC()
{
  return 0x6D6F74737563;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityAction.ActionKind.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CodableAccessibilityAction.ActionKind.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAccessibilityAction.ActionKind@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CodableAccessibilityAction.ActionKind.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityAction.ActionKind(_QWORD *a1)
{
  return CodableAccessibilityAction.ActionKind.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityAction.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E65746E69;
  else
    return 1684957547;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CodableAccessibilityAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityAction.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityAction.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance CodableAccessibilityAction(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  CodableAccessibilityAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityAction(_QWORD *a1)
{
  return CodableAccessibilityAction.encode(to:)(a1);
}

double AccessibilityAppIntentHandler.asCustomAction(category:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  double result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 40);
  v7 = *(_BYTE *)(v2 + 48);
  v8 = *(_QWORD *)(v2 + 72);
  if (v4 >= 5)
  {
    v21 = *(_OWORD *)(v2 + 56);
    v16 = *(_QWORD *)(v2 + 144);
    v17 = a1[3];
    v18 = a1[2];
    v19 = a1[1];
    v20 = *a1;
    v10 = *(_QWORD *)(v2 + 8);
    v9 = *(_QWORD *)v2;
    v11 = *(_QWORD *)(v2 + 16) & 1;
    outlined copy of AccessibilityActionKind.ActionKind(*(_QWORD *)v2, v10, *(_QWORD *)(v2 + 16), v4);
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(v2 + 136);
  if (v4)
  {
    v21 = *(_OWORD *)(v2 + 56);
    v16 = *(_QWORD *)(v2 + 144);
    v17 = a1[3];
    v18 = a1[2];
    v19 = a1[1];
    v20 = *a1;
    v9 = *(_QWORD *)(v2 + 112);
    v10 = *(_QWORD *)(v2 + 120);
    v11 = *(_QWORD *)(v2 + 128) & 1;
    outlined copy of Text.Storage(v9, v10, *(_BYTE *)(v2 + 128) & 1);
    swift_bridgeObjectRetain();
LABEL_5:
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
    *(_QWORD *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    v13 = swift_allocObject();
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(v13 + 16) = v9;
    *(_QWORD *)(v13 + 24) = v10;
    *(_QWORD *)(v13 + 32) = v11;
    *(_QWORD *)(v13 + 40) = v4;
    *(_QWORD *)(v13 + 48) = v5;
    *(_QWORD *)(v13 + 56) = v6;
    *(_BYTE *)(v13 + 64) = v7;
    *(_OWORD *)(v13 + 72) = v21;
    *(_QWORD *)(v13 + 88) = v8;
    *(_QWORD *)(v13 + 96) = v20;
    *(_QWORD *)(v13 + 104) = v19;
    *(_QWORD *)(v13 + 112) = v18;
    *(_QWORD *)(v13 + 120) = v17;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    *(_QWORD *)(v13 + 160) = v16;
    *(_BYTE *)(v13 + 168) = 1;
    *(_BYTE *)(a2 + 40) = 1;
    outlined copy of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
    v14 = (id)v21;
    swift_retain();
    outlined copy of AccessibilityActionCategory?(v20, v19, v18, v17);
    swift_retain();
    return result;
  }
  result = 0.0;
  *(_OWORD *)(a2 + 25) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t AccessibilityAppIntentHandler.asCombinedAction(name:properties:child:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  char v35;

  v7 = a3 & 1;
  v8 = *(_QWORD *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 40);
  v10 = *(_BYTE *)(v5 + 48);
  v34 = *(_OWORD *)(v5 + 56);
  v11 = *(_QWORD *)(v5 + 72);
  v12 = *(_QWORD *)(v5 + 88);
  v32 = *(_QWORD *)(v5 + 96);
  v33 = *(_QWORD *)(v5 + 80);
  v13 = *(_QWORD *)(v5 + 104);
  v14 = *(_QWORD *)(v5 + 144);
  if (v14)
  {
    v15 = a1;
    v16 = v7;
    outlined copy of Text.Storage(a1, a2, v7);
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v8, v9, v10);
    v17 = (id)v34;
    swift_retain();
    outlined copy of AccessibilityActionCategory?(v33, v12, v32, v13);
    v29 = v14;
    v18 = v10;
    v19 = v13;
  }
  else
  {
    v15 = a1;
    v27 = v7;
    outlined copy of Text.Storage(a1, a2, v7);
    v28 = a4;
    swift_bridgeObjectRetain();
    v26 = v10;
    outlined copy of Environment<AppIntentExecutor?>.Content(v8, v9, v10);
    v20 = (id)v34;
    swift_retain();
    v19 = v13;
    outlined copy of AccessibilityActionCategory?(v33, v12, v32, v13);
    v21 = swift_bridgeObjectRetain();
    v22 = specialized AccessibilityProperties.subscript.getter(v21);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v22 + 16))
    {
      v29 = *(_QWORD *)(v22 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v29 = 0;
    }
    a4 = v28;
    v16 = v27;
    v18 = v26;
  }
  v35 = v18;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
  *(_QWORD *)(a5 + 24) = v23;
  *(_QWORD *)(a5 + 32) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  v24 = swift_allocObject();
  *(_QWORD *)a5 = v24;
  *(_QWORD *)(v24 + 16) = v15;
  *(_QWORD *)(v24 + 24) = a2;
  *(_QWORD *)(v24 + 32) = v16;
  *(_QWORD *)(v24 + 40) = a4;
  *(_QWORD *)(v24 + 48) = v8;
  *(_QWORD *)(v24 + 56) = v9;
  *(_BYTE *)(v24 + 64) = v35;
  *(_OWORD *)(v24 + 72) = v34;
  *(_QWORD *)(v24 + 88) = v11;
  *(_QWORD *)(v24 + 96) = v33;
  *(_QWORD *)(v24 + 104) = v12;
  *(_QWORD *)(v24 + 112) = v32;
  *(_QWORD *)(v24 + 120) = v19;
  *(_OWORD *)(v24 + 128) = 0u;
  *(_OWORD *)(v24 + 144) = 0u;
  *(_QWORD *)(v24 + 160) = v29;
  *(_BYTE *)(v24 + 168) = 1;
  *(_BYTE *)(a5 + 40) = 1;
  return swift_retain();
}

uint64_t AccessibilityAppIntentHandler.matches<A>(_:)(uint64_t a1, uint64_t a2)
{
  return AccessibilityAppIntentAction.matches<A>(_:)(a1, a2) & 1;
}

uint64_t protocol witness for AccessibilityActionHandler.action.getter in conformance AccessibilityAppIntentHandler@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  __int128 v12;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  v12 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 72) = v9;
  outlined copy of AccessibilityActionKind.ActionKind(v2, v3, v4, v5);
  outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
  v10 = (id)v12;
  return swift_retain();
}

uint64_t protocol witness for AccessibilityActionHandler.category.getter in conformance AccessibilityAppIntentHandler@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = v1[10];
  v3 = v1[11];
  v4 = v1[12];
  v5 = v1[13];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of AccessibilityActionCategory?(v2, v3, v4, v5);
}

uint64_t protocol witness for AccessibilityActionHandler.label.getter in conformance AccessibilityAppIntentHandler()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[14];
  outlined copy of Text?(v1, v0[15], v0[16], v0[17]);
  return v1;
}

uint64_t protocol witness for AccessibilityActionHandler.image.getter in conformance AccessibilityAppIntentHandler()
{
  return swift_retain();
}

uint64_t protocol witness for AccessibilityActionHandler.perform(value:) in conformance AccessibilityAppIntentHandler@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_BYTE *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  v7 = *(uint64_t (**)(uint64_t))(v1 + 64);
  outlined copy of Environment<AppIntentExecutor?>.Content(v3, v4, v5);
  v8 = (void (*)(uint64_t))specialized Environment.wrappedValue.getter(v3, v4, v5);
  v9 = outlined consume of Environment<AppIntentExecutor?>.Content(v3, v4, v5);
  if (v8)
  {
    v8(v6);
    result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
  }
  else
  {
    result = v7(v9);
  }
  *a1 = 2;
  return result;
}

uint64_t protocol witness for AccessibilityActionHandler.asCombinedAction(name:properties:child:) in conformance AccessibilityAppIntentHandler@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return AccessibilityAppIntentHandler.asCombinedAction(name:properties:child:)(a1, a2, a3 & 1, a4, a5);
}

double protocol witness for AccessibilityActionHandler.asCodableAction(in:) in conformance AccessibilityAppIntentHandler@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  if (*(_BYTE *)(v1 + 152) == 1)
  {
    AccessibilityAppIntentAction.asCodableAction(in:)(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t View.accessibilityAction(_:lnAction:perform:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v20;

  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  v12 = a1[3];
  KeyPath = swift_getKeyPath();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAppIntentAction>, (uint64_t)&type metadata for AccessibilityAppIntentAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v14 + 32) = v9;
  *(_QWORD *)(v14 + 40) = v10;
  *(_QWORD *)(v14 + 48) = v11;
  *(_QWORD *)(v14 + 56) = v12;
  *(_QWORD *)(v14 + 64) = KeyPath;
  *(_QWORD *)(v14 + 72) = 0;
  *(_BYTE *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 88) = a2;
  *(_QWORD *)(v14 + 96) = a3;
  *(_QWORD *)(v14 + 104) = a4;
  type metadata accessor for MutableBox<[AccessibilityAppIntentAction]>(0, &lazy cache variable for type metadata for MutableBox<[AccessibilityAppIntentAction]>, &lazy cache variable for type metadata for [AccessibilityAppIntentAction], (uint64_t)&type metadata for AccessibilityAppIntentAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0C18]);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  v20 = v15;
  outlined copy of AccessibilityActionKind.ActionKind(v9, v10, v11, v12);
  v16 = a2;
  swift_retain();
  MEMORY[0x18D75B4AC](&v20, a5, &type metadata for AccessibilityArchivableAttachmentModifier, a6);
  return swift_release();
}

uint64_t View.accessibilityAction(named:lnAction:perform:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v23;

  v16 = a3 & 1;
  KeyPath = swift_getKeyPath();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAppIntentAction>, (uint64_t)&type metadata for AccessibilityAppIntentAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v18 + 32) = a1;
  *(_QWORD *)(v18 + 40) = a2;
  *(_QWORD *)(v18 + 48) = v16;
  *(_QWORD *)(v18 + 56) = a4;
  *(_QWORD *)(v18 + 64) = KeyPath;
  *(_QWORD *)(v18 + 72) = 0;
  *(_BYTE *)(v18 + 80) = 0;
  *(_QWORD *)(v18 + 88) = a5;
  *(_QWORD *)(v18 + 96) = a6;
  *(_QWORD *)(v18 + 104) = a7;
  type metadata accessor for MutableBox<[AccessibilityAppIntentAction]>(0, &lazy cache variable for type metadata for MutableBox<[AccessibilityAppIntentAction]>, &lazy cache variable for type metadata for [AccessibilityAppIntentAction], (uint64_t)&type metadata for AccessibilityAppIntentAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0C18]);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v18;
  v23 = v19;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  v20 = a5;
  swift_retain();
  MEMORY[0x18D75B4AC](&v23, a8, &type metadata for AccessibilityArchivableAttachmentModifier, a9);
  return swift_release();
}

uint64_t ModifiedContent<>.accessibilityAction(_:lnAction:perform:)@<X0>(_OWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v11;
  id v12;
  _OWORD v14[2];
  uint64_t v15[2];
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v11 = a1[1];
  v14[0] = *a1;
  v14[1] = v11;
  v15[0] = swift_getKeyPath();
  v15[1] = 0;
  v16 = 0;
  v17 = a2;
  v18 = a3;
  v19 = a4;
  v12 = a2;
  swift_retain();
  ModifiedContent<>.append(kind:intent:)((uint64_t *)v14, v15, a5, a6);
  swift_release();

  return swift_release();
}

uint64_t ModifiedContent<>.append(kind:intent:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char **v12;
  char *v13;
  id v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char **v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  char v28;

  v22 = a2[1];
  v23 = *a2;
  v21 = *((_BYTE *)a2 + 16);
  v26 = *(_OWORD *)(a2 + 3);
  v7 = a2[5];
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v12 = (char **)(*(_QWORD *)(v4 + *(int *)(a3 + 36)) + 16);
  swift_beginAccess();
  v28 = *((_BYTE *)a2 + 16);
  v27 = *(_OWORD *)a2;
  v13 = *v12;
  swift_retain();
  outlined copy of AccessibilityActionKind.ActionKind(v8, v9, v10, v11);
  outlined retain of Environment<AppIntentExecutor?>((uint64_t)&v27);
  v14 = (id)v26;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v12 = v13;
  v20 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    *v12 = v13;
  }
  v17 = *((_QWORD *)v13 + 2);
  v16 = *((_QWORD *)v13 + 3);
  if (v17 >= v16 >> 1)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v13);
    *v20 = v13;
  }
  *((_QWORD *)v13 + 2) = v17 + 1;
  v18 = &v13[80 * v17];
  *((_QWORD *)v18 + 4) = v8;
  *((_QWORD *)v18 + 5) = v9;
  *((_QWORD *)v18 + 6) = v10;
  *((_QWORD *)v18 + 7) = v11;
  *((_QWORD *)v18 + 8) = v23;
  *((_QWORD *)v18 + 9) = v22;
  v18[80] = v21 & 1;
  *(_OWORD *)(v18 + 88) = v26;
  *((_QWORD *)v18 + 13) = v7;
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, v25, a3);
}

uint64_t ModifiedContent<>.accessibilityAction(named:lnAction:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v17;
  id v18;
  uint64_t v21[4];
  uint64_t v22[2];
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v21[0] = a1;
  v21[1] = a2;
  v17 = a3 & 1;
  v21[2] = a3 & 1;
  v21[3] = a4;
  v22[0] = swift_getKeyPath();
  v22[1] = 0;
  v23 = 0;
  v24 = a5;
  v25 = a6;
  v26 = a7;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  v18 = a5;
  swift_retain();
  ModifiedContent<>.append(kind:intent:)(v21, v22, a8, a9);
  swift_release();

  swift_release();
  return outlined consume of AccessibilityActionKind.ActionKind(a1, a2, v17, a4);
}

void static AccessibilityArchivableAttachmentModifier._makeView(modifier:inputs:body:)(__int128 *a1@<X1>, void (*a2)(__int128 *__return_ptr, uint64_t, __int128 *)@<X2>, _QWORD *a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = a1[3];
  v26 = a1[2];
  v27 = v6;
  v28 = a1[4];
  v29 = *((_DWORD *)a1 + 20);
  v7 = a1[1];
  v24 = *a1;
  v25 = v7;
  *(_QWORD *)&v18 = v6;
  DWORD2(v18) = DWORD2(v6);
  v8 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v8 & 1) != 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityArchivableAttachmentModifier>, (uint64_t)&type metadata for AccessibilityArchivableAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    v15 = _GraphValue.value.getter();
    v20 = v26;
    v21 = v27;
    v22 = v28;
    v23 = v29;
    *((_QWORD *)&v18 + 1) = *((_QWORD *)&v24 + 1);
    v19 = v25;
    DWORD1(v18) = _ViewInputs.environment.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AccessibilityArchivableAttachmentModifier.ArchivableTransform and conformance AccessibilityArchivableAttachmentModifier.ArchivableTransform();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    specialized static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:)(v15, (uint64_t)&v24, a2, a3);
  }
  else
  {
    v16 = a1[3];
    v20 = a1[2];
    v21 = v16;
    v22 = a1[4];
    v23 = *((_DWORD *)a1 + 20);
    v17 = a1[1];
    v18 = *a1;
    v19 = v17;
    ((void (*)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2)(v8, &v18, v9, v10, v11, v12, v13, v14);
  }
}

uint64_t AccessibilityArchivableAttachmentModifier.ArchivableTransform.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  id v14;
  __int16 v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  char v21;
  char v22;
  uint64_t v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  char *v28;
  char *v29;
  char v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;

  AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) != 0)
  {
    v0 = *(_QWORD *)AGGraphGetValue();
    swift_beginAccess();
    v1 = *(_QWORD *)(v0 + 16);
    v2 = *(_QWORD *)(v1 + 16);
    if (v2)
    {
      swift_bridgeObjectRetain_n();
      v3 = v1 + 56;
      v4 = (char *)MEMORY[0x1E0DEE9D8];
      while (2)
      {
        v36 = v4;
        v5 = *(_QWORD *)(v3 - 24);
        v6 = *(_QWORD *)(v3 - 16);
        v7 = *(_QWORD *)(v3 - 8);
        v8 = *(_QWORD *)v3;
        v10 = *(_QWORD *)(v3 + 8);
        v9 = *(_QWORD *)(v3 + 16);
        v11 = *(_BYTE *)(v3 + 24);
        v37 = *(_OWORD *)(v3 + 32);
        v12 = *(_QWORD *)(v3 + 48);
        AGGraphGetValue();
        v35 = v2;
        switch(v8)
        {
          case 0uLL:
            v13 = v11;
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, 0);
            outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v11);
            swift_retain();
            v14 = (id)v37;
            swift_retain();
            swift_retain();
            v33 = 0;
            v34 = 0;
            v15 = 255;
            goto LABEL_12;
          case 1uLL:
            v13 = v11;
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, 1uLL);
            outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v11);
            swift_retain();
            v17 = (id)v37;
            swift_retain();
            swift_retain();
            v33 = 0;
            v34 = 0;
            v15 = 254;
            goto LABEL_12;
          case 2uLL:
            v13 = v11;
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, 2uLL);
            outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v11);
            swift_retain();
            v18 = (id)v37;
            swift_retain();
            swift_retain();
            v33 = 0;
            v34 = 0;
            v15 = 253;
            goto LABEL_12;
          case 3uLL:
            v13 = v11;
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, 3uLL);
            outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v11);
            swift_retain();
            v19 = (id)v37;
            swift_retain();
            swift_retain();
            v33 = 0;
            v34 = 0;
            v15 = 252;
            goto LABEL_12;
          case 4uLL:
            v13 = v11;
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, 4uLL);
            outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v11);
            swift_retain();
            v20 = (id)v37;
            swift_retain();
            swift_retain();
            v33 = 0;
            v34 = 0;
            v15 = 251;
LABEL_12:
            v32 = v15;
            v21 = v13;
            goto LABEL_13;
          default:
            swift_retain();
            swift_retain();
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, v8);
            v31 = v11;
            outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v11);
            v16 = (id)v37;
            swift_retain();
            swift_retain();
            swift_retain();
            outlined copy of AccessibilityActionKind.ActionKind(v5, v6, v7, v8);
            AccessibilityText.init(_:environment:idiom:)();
            if ((_BYTE)v40 == 0xFF)
            {
              swift_release();
              swift_release();
              outlined consume of AccessibilityActionKind.ActionKind(v5, v6, v7, v8);
              outlined consume of Environment<AppIntentExecutor?>.Content(v10, v9, v31);
              swift_release();

              v4 = v36;
            }
            else
            {
              v33 = v38;
              v34 = v39;
              v32 = v40 & 0x101;
              v21 = v31;
LABEL_13:
              v22 = v7;
              v23 = v6;
              outlined copy of Environment<AppIntentExecutor?>.Content(v10, v9, v21);
              v24 = (id)v37;
              swift_retain();
              swift_release();
              swift_release();
              outlined consume of AccessibilityActionKind.ActionKind(v5, v23, v22, v8);
              outlined consume of Environment<AppIntentExecutor?>.Content(v10, v9, v21);
              swift_release();

              v4 = v36;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
              v2 = v35;
              v26 = *((_QWORD *)v4 + 2);
              v25 = *((_QWORD *)v4 + 3);
              v27 = v37;
              if (v26 >= v25 >> 1)
              {
                v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v4);
                v27 = v37;
                v4 = v29;
              }
              *((_QWORD *)v4 + 2) = v26 + 1;
              v28 = &v4[72 * v26];
              *((_QWORD *)v28 + 4) = v33;
              *((_QWORD *)v28 + 5) = v34;
              *((_WORD *)v28 + 24) = v32;
              *((_QWORD *)v28 + 7) = v10;
              *((_QWORD *)v28 + 8) = v9;
              v28[72] = v21;
              *((_OWORD *)v28 + 5) = v27;
              *((_QWORD *)v28 + 12) = v12;
            }
            v3 += 80;
            if (--v2)
              continue;
            swift_bridgeObjectRelease_n();
            break;
        }
        break;
      }
    }
  }
  return swift_getKeyPath();
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityArchivableAttachmentModifier.ArchivableTransform@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  result = AccessibilityArchivableAttachmentModifier.ArchivableTransform.value.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityArchivableAttachmentModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CodableAccessibilityActionList.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CodableAccessibilityActionList.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodableAccessibilityActionList.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CodableAccessibilityActionList.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance CodableAccessibilityActionList.CodingKeys, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CodableAccessibilityActionList.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = 0x656761726F7473;
  a1[1] = 0xE700000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableAccessibilityActionList.CodingKeys()
{
  return 0x656761726F7473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityActionList.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance CodableAccessibilityActionList.CodingKeys, v3);
  result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAccessibilityActionList.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAccessibilityActionList.CodingKeys()
{
  lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAccessibilityActionList@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  result = specialized CodableAccessibilityActionList.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityActionList(_QWORD *a1)
{
  uint64_t v1;

  return specialized CodableAccessibilityActionList.encode(to:)(a1, *(_QWORD *)(v1 + 24));
}

uint64_t ArchivableAccessibilityActionModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[7];

  v9 = a3 & 1;
  outlined copy of Environment<AppIntentExecutor?>.Content(a1, a2, a3 & 1);
  v10 = swift_bridgeObjectRetain();
  v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI26CodableAccessibilityActionVG_AF03AnygH0Vs5NeverOTg503_s7d4UI30fgh36ListV7actionsSayAA03AnydE0VGvgAfA0cdR6VXEfU_AF0fghM0VTf1cn_nTf4ng_n(v10, a1, a2, v9, a4);
  outlined consume of Environment<AppIntentExecutor?>.Content(a1, a2, v9);
  swift_bridgeObjectRelease();
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v15[5] = Dictionary.init(minimumCapacity:)();
  type metadata accessor for MutableBox<[AccessibilityAppIntentAction]>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  v15[3] = v12;
  v15[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>();
  v15[0] = v11;
  specialized Dictionary.subscript.setter((uint64_t)v15, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
  result = AccessibilityAttachment.init(properties:)();
  v14 = v15[1];
  *a5 = v15[0];
  a5[1] = v14;
  return result;
}

uint64_t ArchivableAccessibilityActionModifier.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v16 = a5;
  HIDWORD(v15) = a4;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableAccessibilityActionModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys, (uint64_t)&unk_1E1B06E70, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v15 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17 = a2;
  v18 = a3;
  v19 = BYTE4(v15) & 1;
  v20 = v16;
  lazy protocol witness table accessor for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableAccessibilityActionModifier.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableAccessibilityActionModifier.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ArchivableAccessibilityActionModifier@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return ArchivableAccessibilityActionModifier.body(content:)(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

_QWORD *protocol witness for Decodable.init(from:) in conformance ArchivableAccessibilityActionModifier@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  result = specialized ArchivableAccessibilityActionModifier.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableAccessibilityActionModifier(_QWORD *a1)
{
  uint64_t v1;

  return ArchivableAccessibilityActionModifier.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

double specialized static _ArchivableViewModifier.makeArchivableView(modifier:inputs:body:)@<D0>(int a1@<W0>, uint64_t a2@<X1>, void (*a3)(__int128 *__return_ptr, uint64_t, __int128 *)@<X2>, _QWORD *a4@<X8>)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];
  _BYTE v36[32];
  int v37;
  __int128 v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v38 & 1) != 0)
  {
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    v38 = *(_OWORD *)a2;
    v14 = *(_OWORD *)a2;
    v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)v36 = v40[0];
    *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
    v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(_QWORD *)&v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(_QWORD *)v35 = *(_QWORD *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(_QWORD *)&v35[24] = *((_QWORD *)&v39[1] + 1);
    *(_QWORD *)v36 = *(_QWORD *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(_QWORD *)&v36[24] = *((_QWORD *)&v40[1] + 1);
    v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)&v34 = *(_QWORD *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v17 = v34;
      v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v18;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, (uint64_t)&type metadata for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v32 = _GraphValue.value.getter();
      v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v20;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v21 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v21;
      v31 = _ViewInputs.animatedPosition()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v22;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v23 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v23;
      v24 = _ViewInputs.animatedSize()();
      v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v25;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v26 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v26;
      v27 = _ViewInputs.containerPosition.getter();
      v34 = v33;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      v30 = v34;
      *(_QWORD *)&v34 = __PAIR64__(v32, v17);
      *((_QWORD *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableDisplayList<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance ArchivableDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableDisplayList<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, (uint64_t)&protocol conformance descriptor for ArchivableDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    result = *((double *)&v33 + 1);
    a4[1] = *((_QWORD *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    v8 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    v41 = *(_DWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];
  _BYTE v36[32];
  int v37;
  __int128 v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v38 & 1) != 0)
  {
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    v38 = *(_OWORD *)a2;
    v14 = *(_OWORD *)a2;
    v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)v36 = v40[0];
    *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
    v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(_QWORD *)&v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(_QWORD *)v35 = *(_QWORD *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(_QWORD *)&v35[24] = *((_QWORD *)&v39[1] + 1);
    *(_QWORD *)v36 = *(_QWORD *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(_QWORD *)&v36[24] = *((_QWORD *)&v40[1] + 1);
    v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)&v34 = *(_QWORD *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v17 = v34;
      v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v18;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<ArchivablePlaybackButtonViewModifier>, (void (*)(uint64_t))type metadata accessor for ArchivablePlaybackButtonViewModifier);
      v32 = _GraphValue.value.getter();
      v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v20;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v21 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v21;
      v31 = _ViewInputs.animatedPosition()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v22;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v23 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v23;
      v24 = _ViewInputs.animatedSize()();
      v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v25;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v26 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v26;
      v27 = _ViewInputs.containerPosition.getter();
      v34 = v33;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      v30 = v34;
      *(_QWORD *)&v34 = __PAIR64__(v32, v17);
      *((_QWORD *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivablePlaybackButtonViewModifier>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivablePlaybackButtonViewModifier> and conformance ArchivableDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivablePlaybackButtonViewModifier>, (uint64_t)&protocol conformance descriptor for ArchivableDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    result = *((double *)&v33 + 1);
    a4[1] = *((_QWORD *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    v8 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    v41 = *(_DWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    type metadata accessor for ArchivablePlaybackButtonViewModifier(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t)&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier);
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];
  _BYTE v36[32];
  int v37;
  __int128 v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v38 & 1) != 0)
  {
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    v38 = *(_OWORD *)a2;
    v14 = *(_OWORD *)a2;
    v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)v36 = v40[0];
    *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
    v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(_QWORD *)&v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(_QWORD *)v35 = *(_QWORD *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(_QWORD *)&v35[24] = *((_QWORD *)&v39[1] + 1);
    *(_QWORD *)v36 = *(_QWORD *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(_QWORD *)&v36[24] = *((_QWORD *)&v40[1] + 1);
    v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)&v34 = *(_QWORD *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v17 = v34;
      v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v18;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<InvalidatableContentModifier>, (uint64_t)&type metadata for InvalidatableContentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v32 = _GraphValue.value.getter();
      v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v20;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v21 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v21;
      v31 = _ViewInputs.animatedPosition()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v22;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v23 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v23;
      v24 = _ViewInputs.animatedSize()();
      v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v25;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v26 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v26;
      v27 = _ViewInputs.containerPosition.getter();
      v34 = v33;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      v30 = v34;
      *(_QWORD *)&v34 = __PAIR64__(v32, v17);
      *((_QWORD *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<InvalidatableContentModifier>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableDisplayList<InvalidatableContentModifier> and conformance ArchivableDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableDisplayList<InvalidatableContentModifier>, (uint64_t)&protocol conformance descriptor for ArchivableDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    result = *((double *)&v33 + 1);
    a4[1] = *((_QWORD *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    v8 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    v41 = *(_DWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];
  _BYTE v36[32];
  int v37;
  __int128 v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v38 & 1) != 0)
  {
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    v38 = *(_OWORD *)a2;
    v14 = *(_OWORD *)a2;
    v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)v36 = v40[0];
    *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
    v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(_QWORD *)&v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(_QWORD *)v35 = *(_QWORD *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(_QWORD *)&v35[24] = *((_QWORD *)&v39[1] + 1);
    *(_QWORD *)v36 = *(_QWORD *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(_QWORD *)&v36[24] = *((_QWORD *)&v40[1] + 1);
    v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)&v34 = *(_QWORD *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v17 = v34;
      v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v18;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<ArchivableLinkModifier>, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
      v32 = _GraphValue.value.getter();
      v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v20;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v21 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v21;
      v31 = _ViewInputs.animatedPosition()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v22;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v23 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v23;
      v24 = _ViewInputs.animatedSize()();
      v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v25;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v26 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v26;
      v27 = _ViewInputs.containerPosition.getter();
      v34 = v33;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      v30 = v34;
      *(_QWORD *)&v34 = __PAIR64__(v32, v17);
      *((_QWORD *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivableLinkModifier>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivableLinkModifier> and conformance ArchivableDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivableLinkModifier>, (uint64_t)&protocol conformance descriptor for ArchivableDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    result = *((double *)&v33 + 1);
    a4[1] = *((_QWORD *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    v8 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    v41 = *(_DWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    type metadata accessor for ArchivableLinkModifier(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];
  _BYTE v36[32];
  int v37;
  __int128 v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v38 & 1) != 0)
  {
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    v38 = *(_OWORD *)a2;
    v14 = *(_OWORD *)a2;
    v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)v36 = v40[0];
    *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
    v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(_QWORD *)&v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(_QWORD *)v35 = *(_QWORD *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(_QWORD *)&v35[24] = *((_QWORD *)&v39[1] + 1);
    *(_QWORD *)v36 = *(_QWORD *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(_QWORD *)&v36[24] = *((_QWORD *)&v40[1] + 1);
    v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)&v34 = *(_QWORD *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v17 = v34;
      v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v18;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ArchivableButtonAppIntentModifier>, (uint64_t)&type metadata for ArchivableButtonAppIntentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v32 = _GraphValue.value.getter();
      v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v20;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v21 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v21;
      v31 = _ViewInputs.animatedPosition()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v22;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v23 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v23;
      v24 = _ViewInputs.animatedSize()();
      v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v25;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v26 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v26;
      v27 = _ViewInputs.containerPosition.getter();
      v34 = v33;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      v30 = v34;
      *(_QWORD *)&v34 = __PAIR64__(v32, v17);
      *((_QWORD *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivableButtonAppIntentModifier>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivableButtonAppIntentModifier> and conformance ArchivableDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivableButtonAppIntentModifier>, (uint64_t)&protocol conformance descriptor for ArchivableDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    result = *((double *)&v33 + 1);
    a4[1] = *((_QWORD *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    v8 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    v41 = *(_DWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];
  _BYTE v36[32];
  int v37;
  __int128 v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v38 & 1) != 0)
  {
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    v38 = *(_OWORD *)a2;
    v14 = *(_OWORD *)a2;
    v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)v36 = v40[0];
    *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
    v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(_QWORD *)&v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(_QWORD *)v35 = *(_QWORD *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(_QWORD *)&v35[24] = *((_QWORD *)&v39[1] + 1);
    *(_QWORD *)v36 = *(_QWORD *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(_QWORD *)&v36[24] = *((_QWORD *)&v40[1] + 1);
    v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)&v34 = *(_QWORD *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v17 = v34;
      v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v18;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ArchivableToggleAppIntentModifier>, (uint64_t)&type metadata for ArchivableToggleAppIntentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v32 = _GraphValue.value.getter();
      v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v20;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v21 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v21;
      v31 = _ViewInputs.animatedPosition()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v22;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v23 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v23;
      v24 = _ViewInputs.animatedSize()();
      v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v25;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v26 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v26;
      v27 = _ViewInputs.containerPosition.getter();
      v34 = v33;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      v30 = v34;
      *(_QWORD *)&v34 = __PAIR64__(v32, v17);
      *((_QWORD *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivableToggleAppIntentModifier>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivableToggleAppIntentModifier> and conformance ArchivableDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivableToggleAppIntentModifier>, (uint64_t)&protocol conformance descriptor for ArchivableDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    result = *((double *)&v33 + 1);
    a4[1] = *((_QWORD *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    v8 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    v41 = *(_DWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];
  _BYTE v36[32];
  int v37;
  __int128 v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v38 & 1) != 0)
  {
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    v38 = *(_OWORD *)a2;
    v14 = *(_OWORD *)a2;
    v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)v36 = v40[0];
    *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
    v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(_QWORD *)&v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(_QWORD *)v35 = *(_QWORD *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(_QWORD *)&v35[24] = *((_QWORD *)&v39[1] + 1);
    *(_QWORD *)v36 = *(_QWORD *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(_QWORD *)&v36[24] = *((_QWORD *)&v40[1] + 1);
    v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)&v34 = *(_QWORD *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v17 = v34;
      v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v18;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ArchivableAccessibilityViewModifier>, (uint64_t)&type metadata for ArchivableAccessibilityViewModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v32 = _GraphValue.value.getter();
      v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v20;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v21 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v21;
      v31 = _ViewInputs.animatedPosition()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v22;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v23 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v23;
      v24 = _ViewInputs.animatedSize()();
      v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v25;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v26 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v26;
      v27 = _ViewInputs.containerPosition.getter();
      v34 = v33;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      v30 = v34;
      *(_QWORD *)&v34 = __PAIR64__(v32, v17);
      *((_QWORD *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityViewModifier>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivableAccessibilityViewModifier> and conformance ArchivableDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityViewModifier>, (uint64_t)&protocol conformance descriptor for ArchivableDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    result = *((double *)&v33 + 1);
    a4[1] = *((_QWORD *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    v8 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    v41 = *(_DWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];
  _BYTE v36[32];
  int v37;
  __int128 v38;
  _OWORD v39[2];
  _OWORD v40[2];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v38 & 1) != 0)
  {
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v13;
    v38 = *(_OWORD *)a2;
    v14 = *(_OWORD *)a2;
    v15 = *(_OWORD *)(a2 + 32);
    v39[0] = *(_OWORD *)(a2 + 16);
    v39[1] = v15;
    *(_OWORD *)&v35[16] = v12;
    *(_OWORD *)v36 = v40[0];
    *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
    v41 = *(_DWORD *)(a2 + 80);
    HIDWORD(v34) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(_QWORD *)&v34 = v38;
    DWORD2(v34) = DWORD2(v38);
    *(_QWORD *)v35 = *(_QWORD *)&v39[0];
    *(_OWORD *)&v35[8] = *(_OWORD *)((char *)v39 + 8);
    *(_QWORD *)&v35[24] = *((_QWORD *)&v39[1] + 1);
    *(_QWORD *)v36 = *(_QWORD *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(_QWORD *)&v36[24] = *((_QWORD *)&v40[1] + 1);
    v37 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    a3(&v33, v16, &v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)&v34 = *(_QWORD *)(a2 + 48);
    DWORD2(v34) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v17 = v34;
      v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v18;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v34) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ArchivableAccessibilityActionModifier>, (uint64_t)&type metadata for ArchivableAccessibilityActionModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v32 = _GraphValue.value.getter();
      v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v20;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v21 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v21;
      v31 = _ViewInputs.animatedPosition()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v22;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v23 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v23;
      v24 = _ViewInputs.animatedSize()();
      v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v35[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v36 = v25;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 64);
      v37 = *(_DWORD *)(a2 + 80);
      v26 = *(_OWORD *)(a2 + 16);
      v34 = *(_OWORD *)a2;
      *(_OWORD *)v35 = v26;
      v27 = _ViewInputs.containerPosition.getter();
      v34 = v33;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      v30 = v34;
      *(_QWORD *)&v34 = __PAIR64__(v32, v17);
      *((_QWORD *)&v34 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)v35 = v27;
      *(_DWORD *)&v35[4] = v29;
      v35[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityActionModifier>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivableAccessibilityActionModifier> and conformance ArchivableDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityActionModifier>, (uint64_t)&protocol conformance descriptor for ArchivableDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v34) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a4 = v33;
    result = *((double *)&v33 + 1);
    a4[1] = *((_QWORD *)&v33 + 1);
  }
  else
  {
    LODWORD(v34) = a1;
    v8 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 64);
    v40[0] = *(_OWORD *)(a2 + 48);
    v40[1] = v9;
    v41 = *(_DWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    v38 = *(_OWORD *)a2;
    v39[0] = v10;
    v39[1] = v8;
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[32];
  _BYTE v37[32];
  int v38;
  __int128 v39;
  _OWORD v40[2];
  _OWORD v41[2];
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if ((v39 & 1) != 0)
  {
    v33 = a4;
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 64);
    v41[0] = *(_OWORD *)(a2 + 48);
    v41[1] = v13;
    v39 = *(_OWORD *)a2;
    v14 = *(_OWORD *)a2;
    v15 = *(_OWORD *)(a2 + 32);
    v40[0] = *(_OWORD *)(a2 + 16);
    v40[1] = v15;
    *(_OWORD *)&v36[16] = v12;
    *(_OWORD *)v37 = v41[0];
    *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 64);
    v42 = *(_DWORD *)(a2 + 80);
    HIDWORD(v35) = HIDWORD(v14);
    outlined retain of _ViewInputs(a2);
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
    *(_QWORD *)&v35 = v39;
    DWORD2(v35) = DWORD2(v39);
    *(_QWORD *)v36 = *(_QWORD *)&v40[0];
    *(_OWORD *)&v36[8] = *(_OWORD *)((char *)v40 + 8);
    *(_QWORD *)&v36[24] = *((_QWORD *)&v40[1] + 1);
    *(_QWORD *)v37 = *(_QWORD *)&v41[0];
    *(_OWORD *)&v37[8] = *(_OWORD *)((char *)v41 + 8);
    *(_QWORD *)&v37[24] = *((_QWORD *)&v41[1] + 1);
    v38 = v42;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = swift_bridgeObjectRetain();
    a3(&v34, v16, &v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(_QWORD *)&v35 = *(_QWORD *)(a2 + 48);
    DWORD2(v35) = *(_DWORD *)(a2 + 56);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      _DisplayList_Identity.init()();
      v17 = v35;
      v18 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v37 = v18;
      *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 64);
      v38 = *(_DWORD *)(a2 + 80);
      v19 = *(_OWORD *)(a2 + 16);
      v35 = *(_OWORD *)a2;
      *(_OWORD *)v36 = v19;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v35) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ArchivableAccessibilityActionModifier>, (uint64_t)&type metadata for ArchivableAccessibilityActionModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v32 = _GraphValue.value.getter();
      v20 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v37 = v20;
      *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 64);
      v38 = *(_DWORD *)(a2 + 80);
      v21 = *(_OWORD *)(a2 + 16);
      v35 = *(_OWORD *)a2;
      *(_OWORD *)v36 = v21;
      v31 = _ViewInputs.animatedPosition()();
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v37 = v22;
      *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 64);
      v38 = *(_DWORD *)(a2 + 80);
      v23 = *(_OWORD *)(a2 + 16);
      v35 = *(_OWORD *)a2;
      *(_OWORD *)v36 = v23;
      v24 = _ViewInputs.animatedSize()();
      v25 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v36[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)v37 = v25;
      *(_OWORD *)&v37[16] = *(_OWORD *)(a2 + 64);
      v38 = *(_DWORD *)(a2 + 80);
      v26 = *(_OWORD *)(a2 + 16);
      v35 = *(_OWORD *)a2;
      *(_OWORD *)v36 = v26;
      v27 = _ViewInputs.containerPosition.getter();
      v35 = v34;
      v28 = _ViewOutputs.subscript.getter();
      if ((v28 & 0x100000000) != 0)
        v29 = *MEMORY[0x1E0CFED28];
      else
        v29 = v28;
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      v30 = v35;
      *(_QWORD *)&v35 = __PAIR64__(v32, v17);
      *((_QWORD *)&v35 + 1) = __PAIR64__(v24, v31);
      *(_DWORD *)v36 = v27;
      *(_DWORD *)&v36[4] = v29;
      v36[8] = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityActionModifier>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableDisplayList<ArchivableAccessibilityActionModifier> and conformance ArchivableDisplayList<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityActionModifier>, (uint64_t)&protocol conformance descriptor for ArchivableDisplayList<A>);
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v35) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *v33 = v34;
    result = *((double *)&v34 + 1);
    v33[1] = *((_QWORD *)&v34 + 1);
  }
  else
  {
    LODWORD(v35) = a1;
    v8 = *(_OWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 64);
    v41[0] = *(_OWORD *)(a2 + 48);
    v41[1] = v9;
    v42 = *(_DWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    v39 = *(_OWORD *)a2;
    v40[0] = v10;
    v40[1] = v8;
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    static ViewModifier.makeView(modifier:inputs:body:)();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityArchivableAttachmentModifier.ArchivableTransform and conformance AccessibilityArchivableAttachmentModifier.ArchivableTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityArchivableAttachmentModifier.ArchivableTransform and conformance AccessibilityArchivableAttachmentModifier.ArchivableTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityArchivableAttachmentModifier.ArchivableTransform and conformance AccessibilityArchivableAttachmentModifier.ArchivableTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityArchivableAttachmentModifier.ArchivableTransform, &unk_1E1B08F30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityArchivableAttachmentModifier.ArchivableTransform and conformance AccessibilityArchivableAttachmentModifier.ArchivableTransform);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityArchivableAttachmentModifier()
{
  return &protocol witness table for AccessibilityArchivableAttachmentModifier;
}

ValueMetadata *type metadata accessor for AccessibilityArchivableAttachmentModifier()
{
  return &type metadata for AccessibilityArchivableAttachmentModifier;
}

uint64_t sub_1877A0084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[3];

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>();
  v8 = type metadata accessor for ModifiedContent();
  v25[0] = v1;
  v25[1] = &protocol witness table for DetachedGeometryModifier;
  v9 = MEMORY[0x1E0CE2E70];
  v24[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v25);
  v24[1] = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v23[0] = MEMORY[0x18D75FFDC](v9, v5, v24);
  v23[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v22[0] = MEMORY[0x18D75FFDC](v9, v6, v23);
  v22[1] = &protocol witness table for _HiddenModifier;
  v21[0] = MEMORY[0x18D75FFDC](v9, v7, v22);
  v21[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>, MEMORY[0x1E0CE63D0]);
  MEMORY[0x18D75FFDC](v9, v8, v21);
  v10 = type metadata accessor for _BackgroundModifier();
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for ModifiedContent();
  v14 = type metadata accessor for ModifiedContent();
  v20[0] = v2;
  v20[1] = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  v19[0] = MEMORY[0x18D75FFDC](v9, v3, v20);
  v19[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v10);
  v18[0] = MEMORY[0x18D75FFDC](v9, v11, v19);
  v18[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v17[0] = MEMORY[0x18D75FFDC](v9, v12, v18);
  v17[1] = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  v16[0] = MEMORY[0x18D75FFDC](v9, v13, v17);
  v16[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  return MEMORY[0x18D75FFDC](v9, v14, v16);
}

void *type metadata accessor for AccessibilityArchivableAttachmentModifier.ArchivableTransform()
{
  return &unk_1E1B08F30;
}

ValueMetadata *type metadata accessor for ArchivableAccessibilityActionModifier()
{
  return &type metadata for ArchivableAccessibilityActionModifier;
}

uint64_t destroy for AccessibilityAppIntentAction(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));

  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityAppIntentAction(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  id v14;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4 >= 5)
  {
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v7, v8);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_BYTE *)(a2 + 48);
  outlined copy of Environment<AppIntentExecutor?>.Content(v9, v10, v11);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = v12;
  v14 = (id)v13;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityAppIntentAction(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >= 5uLL)
  {
    if (v4 >= 5)
    {
      v10 = *(_QWORD *)a2;
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v11, v12);
      v13 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_BYTE *)(a1 + 16) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }
  }
  else if (v4 >= 5)
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  v16 = *(_QWORD *)(a2 + 32);
  v17 = *(_QWORD *)(a2 + 40);
  v18 = *(_BYTE *)(a2 + 48);
  outlined copy of Environment<AppIntentExecutor?>.Content(v16, v17, v18);
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v17;
  *(_BYTE *)(a1 + 48) = v18;
  outlined consume of Environment<AppIntentExecutor?>.Content(v19, v20, v21);
  v22 = *(void **)(a2 + 56);
  v23 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v22;
  v24 = v22;

  v25 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v25;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AccessibilityAppIntentAction(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;

  if (*(_QWORD *)(a1 + 24) >= 5uLL)
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (v4 >= 5)
    {
      v6 = *(_BYTE *)(a2 + 16);
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_BYTE *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(_QWORD *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1);
  }
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
LABEL_6:
  v10 = *(_BYTE *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_BYTE *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v10;
  outlined consume of Environment<AppIntentExecutor?>.Content(v11, v12, v13);
  v14 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityAppIntentAction()
{
  return &type metadata for AccessibilityAppIntentAction;
}

uint64_t destroy for AccessibilityAppIntentHandler(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));

  swift_release();
  if (*(_QWORD *)(a1 + 104) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 136))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityAppIntentHandler(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  id v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4 >= 5)
  {
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v7, v8);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_BYTE *)(a2 + 48);
  outlined copy of Environment<AppIntentExecutor?>.Content(v9, v10, v11);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = v12;
  v14 = *(_QWORD *)(a2 + 104);
  v15 = (id)v13;
  swift_retain();
  if (v14 <= 2)
  {
    v16 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v16;
    v17 = *(_QWORD *)(a2 + 136);
    if (!v17)
    {
LABEL_9:
      v24 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v24;
      goto LABEL_10;
    }
  }
  else
  {
    v21 = *(_QWORD *)(a2 + 80);
    v22 = *(_QWORD *)(a2 + 88);
    v23 = *(_BYTE *)(a2 + 96);
    outlined copy of Text.Storage(v21, v22, v23);
    *(_QWORD *)(a1 + 80) = v21;
    *(_QWORD *)(a1 + 88) = v22;
    *(_BYTE *)(a1 + 96) = v23;
    *(_QWORD *)(a1 + 104) = v14;
    swift_bridgeObjectRetain();
    v17 = *(_QWORD *)(a2 + 136);
    if (!v17)
      goto LABEL_9;
  }
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_BYTE *)(a2 + 128);
  outlined copy of Text.Storage(v18, v19, v20);
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_BYTE *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v17;
  swift_bridgeObjectRetain();
LABEL_10:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityAppIntentHandler(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >= 5uLL)
  {
    if (v4 >= 5)
    {
      v10 = *(_QWORD *)a2;
      v11 = *(_QWORD *)(a2 + 8);
      v12 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v11, v12);
      v13 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = v11;
      *(_BYTE *)(a1 + 16) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }
  }
  else if (v4 >= 5)
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  v16 = *(_QWORD *)(a2 + 32);
  v17 = *(_QWORD *)(a2 + 40);
  v18 = *(_BYTE *)(a2 + 48);
  outlined copy of Environment<AppIntentExecutor?>.Content(v16, v17, v18);
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v16;
  *(_QWORD *)(a1 + 40) = v17;
  *(_BYTE *)(a1 + 48) = v18;
  outlined consume of Environment<AppIntentExecutor?>.Content(v19, v20, v21);
  v22 = *(void **)(a2 + 56);
  v23 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v22;
  v24 = v22;

  v25 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v25;
  swift_retain();
  swift_release();
  v26 = (_OWORD *)(a1 + 80);
  v27 = (_OWORD *)(a2 + 80);
  v28 = *(_QWORD *)(a1 + 104);
  v29 = *(_QWORD *)(a2 + 104);
  if (v28 == 2)
  {
    if (v29 <= 2)
    {
LABEL_10:
      v30 = *(_OWORD *)(a2 + 96);
      *v26 = *v27;
      *(_OWORD *)(a1 + 96) = v30;
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  if (v29 == 2)
  {
    outlined destroy of AccessibilityActionCategory(a1 + 80);
LABEL_18:
    v34 = *(_OWORD *)(a2 + 96);
    *v26 = *v27;
    *(_OWORD *)(a1 + 96) = v34;
    goto LABEL_19;
  }
  if (v28 < 2)
  {
    if (v29 < 2)
      goto LABEL_10;
LABEL_15:
    v31 = *(_QWORD *)(a2 + 80);
    v32 = *(_QWORD *)(a2 + 88);
    v33 = *(_BYTE *)(a2 + 96);
    outlined copy of Text.Storage(v31, v32, v33);
    *(_QWORD *)(a1 + 80) = v31;
    *(_QWORD *)(a1 + 88) = v32;
    *(_BYTE *)(a1 + 96) = v33;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
  if (v29 < 2)
  {
    outlined destroy of Text(a1 + 80);
    goto LABEL_18;
  }
  v50 = *(_QWORD *)(a2 + 80);
  v51 = *(_QWORD *)(a2 + 88);
  v52 = *(_BYTE *)(a2 + 96);
  outlined copy of Text.Storage(v50, v51, v52);
  v53 = *(_QWORD *)(a1 + 80);
  v54 = *(_QWORD *)(a1 + 88);
  v55 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 80) = v50;
  *(_QWORD *)(a1 + 88) = v51;
  *(_BYTE *)(a1 + 96) = v52;
  outlined consume of Text.Storage(v53, v54, v55);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_19:
  v35 = (_OWORD *)(a1 + 112);
  v36 = (_OWORD *)(a2 + 112);
  v37 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v37)
    {
      v38 = *(_QWORD *)(a2 + 112);
      v39 = *(_QWORD *)(a2 + 120);
      v40 = *(_BYTE *)(a2 + 128);
      outlined copy of Text.Storage(v38, v39, v40);
      v41 = *(_QWORD *)(a1 + 112);
      v42 = *(_QWORD *)(a1 + 120);
      v43 = *(_BYTE *)(a1 + 128);
      *(_QWORD *)(a1 + 112) = v38;
      *(_QWORD *)(a1 + 120) = v39;
      *(_BYTE *)(a1 + 128) = v40;
      outlined consume of Text.Storage(v41, v42, v43);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 112);
      v47 = *(_OWORD *)(a2 + 128);
      *v35 = *v36;
      *(_OWORD *)(a1 + 128) = v47;
    }
  }
  else if (v37)
  {
    v44 = *(_QWORD *)(a2 + 112);
    v45 = *(_QWORD *)(a2 + 120);
    v46 = *(_BYTE *)(a2 + 128);
    outlined copy of Text.Storage(v44, v45, v46);
    *(_QWORD *)(a1 + 112) = v44;
    *(_QWORD *)(a1 + 120) = v45;
    *(_BYTE *)(a1 + 128) = v46;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_bridgeObjectRetain();
  }
  else
  {
    v48 = *(_OWORD *)(a2 + 128);
    *v35 = *v36;
    *(_OWORD *)(a1 + 128) = v48;
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t outlined destroy of AccessibilityActionCategory(uint64_t a1)
{
  destroy for AccessibilityActionCategory(a1);
  return a1;
}

uint64_t assignWithTake for AccessibilityAppIntentHandler(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  if (*(_QWORD *)(a1 + 24) < 5uLL)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 < 5)
  {
    outlined destroy of Text(a1);
LABEL_4:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    goto LABEL_6;
  }
  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
LABEL_6:
  v10 = *(_BYTE *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_BYTE *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v10;
  outlined consume of Environment<AppIntentExecutor?>.Content(v11, v12, v13);
  v14 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  v15 = *(_QWORD *)(a1 + 104);
  if (v15 == 2)
  {
LABEL_12:
    v17 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v17;
    goto LABEL_13;
  }
  v16 = *(_QWORD *)(a2 + 104);
  if (v16 == 2)
  {
    outlined destroy of AccessibilityActionCategory(a1 + 80);
    goto LABEL_12;
  }
  if (v15 < 2)
    goto LABEL_12;
  if (v16 < 2)
  {
    outlined destroy of Text(a1 + 80);
    goto LABEL_12;
  }
  v25 = *(_BYTE *)(a2 + 96);
  v26 = *(_QWORD *)(a1 + 80);
  v27 = *(_QWORD *)(a1 + 88);
  v28 = *(_BYTE *)(a1 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = v25;
  outlined consume of Text.Storage(v26, v27, v28);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRelease();
LABEL_13:
  if (!*(_QWORD *)(a1 + 136))
  {
LABEL_17:
    v23 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v23;
    goto LABEL_18;
  }
  v18 = *(_QWORD *)(a2 + 136);
  if (!v18)
  {
    outlined destroy of Text(a1 + 112);
    goto LABEL_17;
  }
  v19 = *(_BYTE *)(a2 + 128);
  v20 = *(_QWORD *)(a1 + 112);
  v21 = *(_QWORD *)(a1 + 120);
  v22 = *(_BYTE *)(a1 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = v19;
  outlined consume of Text.Storage(v20, v21, v22);
  *(_QWORD *)(a1 + 136) = v18;
  swift_bridgeObjectRelease();
LABEL_18:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityAppIntentHandler(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 153))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityAppIntentHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 153) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityAppIntentHandler()
{
  return &type metadata for AccessibilityAppIntentHandler;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityAppIntentHandler(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityAppIntentAction(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction;
  if (!lazy protocol witness table cache variable for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAppIntentAction, &type metadata for AccessibilityAppIntentAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction;
  if (!lazy protocol witness table cache variable for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityAppIntentAction, &type metadata for AccessibilityAppIntentAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAppIntentAction and conformance AccessibilityAppIntentAction);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ArchivableAccessibilityActionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for ArchivableAccessibilityActionModifier(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
  a1[2] = lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
  result = lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
  a1[3] = result;
  return result;
}

void type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for _GraphValue();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata accessor for ArchivableDisplayList<ArchivableLinkModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableDisplayList<ArchivableLinkModifier>;
  if (!lazy cache variable for type metadata for ArchivableDisplayList<ArchivableLinkModifier>)
  {
    type metadata accessor for ArchivableLinkModifier(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
    type metadata accessor for ArchivableDisplayList();
  }
  return result;
}

uint64_t outlined copy of AccessibilityActionCategory?(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 != 2)
    return outlined copy of AccessibilityActionCategory.Category(result, a2, a3, a4);
  return result;
}

uint64_t type metadata accessor for ArchivableDisplayList<ArchivablePlaybackButtonViewModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableDisplayList<ArchivablePlaybackButtonViewModifier>;
  if (!lazy cache variable for type metadata for ArchivableDisplayList<ArchivablePlaybackButtonViewModifier>)
  {
    type metadata accessor for ArchivablePlaybackButtonViewModifier(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t)&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t)&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t)&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier);
    type metadata accessor for ArchivableDisplayList();
  }
  return result;
}

uint64_t type metadata accessor for ArchivableDisplayList<InvalidatableContentModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableDisplayList<InvalidatableContentModifier>;
  if (!lazy cache variable for type metadata for ArchivableDisplayList<InvalidatableContentModifier>)
  {
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    type metadata accessor for ArchivableDisplayList();
  }
  return result;
}

uint64_t specialized static AccessibilityAppIntentAction.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  char v14;
  char v16;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = (void *)a1[7];
  v7 = a2[3];
  v8 = (void *)a2[7];
  switch(v5)
  {
    case 0uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 0);
      if (v7)
        return 0;
      goto LABEL_14;
    case 1uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 1uLL);
      if (v7 != 1)
        return 0;
      goto LABEL_14;
    case 2uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 2uLL);
      if (v7 != 2)
        return 0;
      goto LABEL_14;
    case 3uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 3uLL);
      if (v7 != 3)
        return 0;
      goto LABEL_14;
    case 4uLL:
      outlined consume of AccessibilityActionKind.ActionKind(*a1, v2, v4, 4uLL);
      if (v7 != 4)
        return 0;
      goto LABEL_14;
    default:
      if (v7 < 5)
        return 0;
      v9 = *a2;
      v10 = a2[1];
      v11 = a2[2];
      outlined copy of AccessibilityActionKind.ActionKind(*a2, v10, v11, v7);
      outlined copy of AccessibilityActionKind.ActionKind(v3, v2, v4, v5);
      v16 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionKind.ActionKind(v9, v10, v11, v7);
      outlined consume of AccessibilityActionKind.ActionKind(v3, v2, v4, v5);
      if ((v16 & 1) == 0)
        return 0;
LABEL_14:
      type metadata accessor for NSObject();
      v12 = v6;
      v13 = v8;
      v14 = static NSObject.== infix(_:_:)();

      return v14 & 1;
  }
}

uint64_t specialized static AccessibilityAppIntentHandler.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char v20;
  char v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[3];
  char v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[3];
  char v37;
  __int128 v38;
  uint64_t v39;

  v2 = *(_BYTE *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v30 = *(_QWORD *)(a1 + 120);
  v31 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 136);
  v29 = *(_QWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 144);
  v23 = *(unsigned __int8 *)(a1 + 152);
  v9 = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  v27 = *(_QWORD *)(a2 + 120);
  v28 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 136);
  v26 = *(_QWORD *)(a2 + 128);
  v24 = *(_QWORD *)(a2 + 144);
  v22 = *(unsigned __int8 *)(a2 + 152);
  v16 = *(_OWORD *)(a1 + 16);
  v36[0] = *(_OWORD *)a1;
  v36[1] = v16;
  v36[2] = *(_OWORD *)(a1 + 32);
  v37 = v2;
  v38 = *(_OWORD *)(a1 + 56);
  v39 = v3;
  v17 = *(_OWORD *)(a2 + 16);
  v32[0] = *(_OWORD *)a2;
  v32[1] = v17;
  v32[2] = *(_OWORD *)(a2 + 32);
  v33 = v9;
  v34 = *(_OWORD *)(a2 + 56);
  v35 = v10;
  if ((specialized static AccessibilityAppIntentAction.== infix(_:_:)((uint64_t *)v36, (uint64_t *)v32) & 1) == 0)
    return 0;
  if (v7 == 2)
  {
    if (v14 == 2)
      goto LABEL_4;
LABEL_10:
    outlined copy of AccessibilityActionCategory?(v11, v13, v12, v14);
    outlined consume of AccessibilityActionCategory?(v4, v5, v6, v7);
    outlined consume of AccessibilityActionCategory?(v11, v13, v12, v14);
    return 0;
  }
  if (v14 == 2)
  {
    outlined copy of AccessibilityActionCategory.Category(v4, v5, v6, v7);
    outlined copy of AccessibilityActionCategory.Category(v4, v5, v6, v7);
    outlined consume of AccessibilityActionCategory.Category(v4, v5, v6, v7);
    goto LABEL_10;
  }
  if (v7)
  {
    if (v7 == 1)
    {
      outlined copy of AccessibilityActionCategory.Category(v4, v5, v6, 1uLL);
      if (v14 != 1)
        return 0;
    }
    else
    {
      if (v14 < 2)
      {
        outlined copy of AccessibilityActionCategory?(v4, v5, v6, v7);
        outlined consume of AccessibilityActionCategory.Category(v4, v5, v6, v7);
        return 0;
      }
      outlined copy of AccessibilityActionCategory?(v4, v5, v6, v7);
      outlined copy of AccessibilityActionCategory?(v4, v5, v6, v7);
      outlined copy of AccessibilityActionCategory?(v11, v13, v12, v14);
      outlined copy of AccessibilityActionCategory.Category(v4, v5, v6, v7);
      LOBYTE(v36[0]) = v12 & 1;
      v21 = static Text.== infix(_:_:)();
      outlined consume of AccessibilityActionCategory.Category(v4, v5, v6, v7);
      outlined consume of AccessibilityActionCategory?(v11, v13, v12, v14);
      outlined consume of AccessibilityActionCategory.Category(v4, v5, v6, v7);
      outlined consume of AccessibilityActionCategory?(v4, v5, v6, v7);
      if ((v21 & 1) == 0)
        return 0;
    }
  }
  else
  {
    outlined copy of AccessibilityActionCategory.Category(v4, v5, v6, 0);
    if (v14)
      return 0;
  }
LABEL_4:
  if (v8)
  {
    if (!v15)
      return 0;
    outlined copy of Text?(v31, v30, v29, v8);
    outlined copy of Text?(v31, v30, v29, v8);
    outlined copy of Text?(v28, v27, v26, v15);
    LOBYTE(v36[0]) = v26 & 1;
    v18 = static Text.== infix(_:_:)();
    outlined consume of Text.Storage(v28, v27, v26 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v31, v30, v29 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text?(v31, v30, v29, v8);
    if ((v18 & 1) == 0)
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  if (v25)
  {
    if (v24)
    {
      swift_retain();
      swift_retain();
      v20 = static Image.== infix(_:_:)();
      swift_release();
      swift_release();
      if ((v20 & 1) != 0)
        return v23 ^ v22 ^ 1u;
    }
    return 0;
  }
  if (v24)
    return 0;
  return v23 ^ v22 ^ 1u;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI26CodableAccessibilityActionVG_AF03AnygH0Vs5NeverOTg503_s7d4UI30fgh36ListV7actionsSayAA03AnydE0VGvgAfA0cdR6VXEfU_AF0fghM0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  Swift::UInt32 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  __n128 v37;
  __n128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __n128 v43;
  __n128 v44;
  __int16 v45;
  uint64_t v46;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v46 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v9 = a1 + 32;
    v6 = v46;
    v27 = a4 & 1;
    do
    {
      v10 = *(_OWORD *)(v9 + 48);
      v40 = *(_OWORD *)(v9 + 32);
      v41 = v10;
      v42 = *(_QWORD *)(v9 + 64);
      v11 = *(_OWORD *)(v9 + 16);
      v38 = *(__n128 *)v9;
      v39 = v11;
      outlined init with take of CodableAccessibilityAction.ActionKind(&v38, &v43);
      outlined init with take of CodableAccessibilityAction.ActionKind(&v43, &v44);
      v35 = v6;
      v36 = v5;
      switch((char)v45)
      {
        case -5:
          outlined retain of CodableAccessibilityAction((uint64_t)&v38);
          v33 = 0;
          v34 = 0;
          v31 = 4;
          v32 = 0;
          break;
        case -4:
          outlined retain of CodableAccessibilityAction((uint64_t)&v38);
          v33 = 0;
          v34 = 0;
          v31 = 3;
          v32 = 0;
          break;
        case -3:
          outlined retain of CodableAccessibilityAction((uint64_t)&v38);
          v33 = 0;
          v34 = 0;
          v31 = 2;
          v32 = 0;
          break;
        case -2:
          outlined retain of CodableAccessibilityAction((uint64_t)&v38);
          v33 = 0;
          v34 = 0;
          v31 = 1;
          v32 = 0;
          break;
        case -1:
          outlined retain of CodableAccessibilityAction((uint64_t)&v38);
          v33 = 0;
          v34 = 0;
          v31 = 0;
          v32 = 0;
          break;
        default:
          v37 = v44;
          outlined retain of CodableAccessibilityAction((uint64_t)&v38);
          v12 = AccessibilityText.text.getter();
          v33 = v13;
          v34 = v12;
          v31 = v15;
          v32 = v14 & 1;
          break;
      }
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = a2;
      *(_QWORD *)(v16 + 24) = a3;
      *(_BYTE *)(v16 + 32) = v27;
      *(_QWORD *)(v16 + 40) = a5;
      v17 = v41;
      *(_OWORD *)(v16 + 80) = v40;
      *(_OWORD *)(v16 + 96) = v17;
      *(_QWORD *)(v16 + 112) = v42;
      v18 = v39;
      *(__n128 *)(v16 + 48) = v38;
      *(_OWORD *)(v16 + 64) = v18;
      v19 = AccessibilityActionHandlerSeed++;
      type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>(0);
      v21 = v20;
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = v34;
      *(_QWORD *)(v22 + 24) = v33;
      *(_QWORD *)(v22 + 32) = v32;
      *(_QWORD *)(v22 + 40) = v31;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_QWORD *)(v22 + 64) = 0;
      *(_QWORD *)(v22 + 72) = 2;
      *(_OWORD *)(v22 + 80) = 0u;
      *(_OWORD *)(v22 + 96) = 0u;
      *(_QWORD *)(v22 + 112) = 0;
      *(_QWORD *)(v22 + 120) = partial apply for closure #1 in closure #1 in AccessibilityArchivableViewAttachment.properties.getter;
      *(_QWORD *)(v22 + 128) = v16;
      *(_DWORD *)(v22 + 136) = v19;
      outlined copy of Environment<AppIntentExecutor?>.Content(a2, a3, v27);
      v6 = v35;
      v46 = v35;
      v24 = *(_QWORD *)(v35 + 16);
      v23 = *(_QWORD *)(v35 + 24);
      swift_bridgeObjectRetain();
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1);
        v6 = v46;
      }
      *(_QWORD *)(v6 + 16) = v24 + 1;
      v25 = v6 + 48 * v24;
      *(_QWORD *)(v25 + 32) = v22;
      *(__n128 *)(v25 + 40) = v37;
      *(_QWORD *)(v25 + 56) = v21;
      *(_QWORD *)(v25 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
      *(_BYTE *)(v25 + 72) = 0;
      v9 += 72;
      v5 = v36 - 1;
    }
    while (v36 != 1);
  }
  return v6;
}

uint64_t specialized CodableAccessibilityActionList.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableAccessibilityActionList.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys, (uint64_t)&type metadata for CodableAccessibilityActionList.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[1] = a2;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [CodableAccessibilityAction], (uint64_t)&type metadata for CodableAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  _sSay7SwiftUI26CodableAccessibilityActionVGSayxGSesSeRzlWlTm_0(&lazy protocol witness table cache variable for type [CodableAccessibilityAction] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction and conformance CodableAccessibilityAction, MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t specialized CodableAccessibilityActionList.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableAccessibilityActionList.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys, (uint64_t)&type metadata for CodableAccessibilityActionList.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v12 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v12 - v6;
  KeyPath = swift_getKeyPath();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys();
  swift_retain();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    swift_release_n();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v9 = v4;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [CodableAccessibilityAction], (uint64_t)&type metadata for CodableAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    _sSay7SwiftUI26CodableAccessibilityActionVGSayxGSesSeRzlWlTm_0(&lazy protocol witness table cache variable for type [CodableAccessibilityAction] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type CodableAccessibilityAction and conformance CodableAccessibilityAction, MEMORY[0x1E0DEAF40]);
    v10 = v12;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v10);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return KeyPath;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityActionList.CodingKeys, &type metadata for CodableAccessibilityActionList.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityActionList.CodingKeys, &type metadata for CodableAccessibilityActionList.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityActionList.CodingKeys, &type metadata for CodableAccessibilityActionList.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityActionList.CodingKeys, &type metadata for CodableAccessibilityActionList.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityActionList.CodingKeys and conformance CodableAccessibilityActionList.CodingKeys);
  }
  return result;
}

uint64_t _sSay7SwiftUI26CodableAccessibilityActionVGSayxGSesSeRzlWlTm_0(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [CodableAccessibilityAction], (uint64_t)&type metadata for CodableAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for MutableBox<[AccessibilityAppIntentAction]>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for MutableBox<[AccessibilityAppIntentAction]>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>, &lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t sub_1877A1FD4()
{
  uint64_t v0;
  __int16 v1;

  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease();
  v1 = *(_WORD *)(v0 + 64);
  if (v1 != 251 && (v1 & 0xFC | 2) != 0xFE)
    outlined consume of AccessibilityText.Storage(*(void **)(v0 + 48), *(_QWORD *)(v0 + 56), v1 & 1);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1877A204C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityActionModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableDisplayList<ArchivableAccessibilityActionModifier>;
  if (!lazy cache variable for type metadata for ArchivableDisplayList<ArchivableAccessibilityActionModifier>)
  {
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    type metadata accessor for ArchivableDisplayList();
  }
  return result;
}

_QWORD *specialized ArchivableAccessibilityActionModifier.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v12;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableAccessibilityActionModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys, (uint64_t)&unk_1E1B06E70, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v12 - v7;
  v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys();
  v10 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = v12;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v10;
}

unint64_t lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityActionModifier.CodingKeys, &unk_1E1B06E70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityActionModifier.CodingKeys, &unk_1E1B06E70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityActionModifier.CodingKeys, &unk_1E1B06E70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityActionModifier.CodingKeys, &unk_1E1B06E70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier.CodingKeys and conformance ArchivableAccessibilityActionModifier.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityActionList, &type metadata for CodableAccessibilityActionList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityActionList, &type metadata for CodableAccessibilityActionList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityActionList and conformance CodableAccessibilityActionList);
  }
  return result;
}

uint64_t outlined release of (AccessibilityAppIntentAction?, AccessibilityAppIntentAction?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;

  v10 = *(_QWORD *)(a1 + 80);
  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(void **)(a1 + 136);
  outlined consume of AccessibilityAppIntentAction?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(void **)(a1 + 56));
  outlined consume of AccessibilityAppIntentAction?(v10, v2, v3, v4, v5, v6, v7, v8);
  return a1;
}

void outlined consume of AccessibilityAppIntentAction?(uint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7, void *a8)
{
  char v10;

  if (a8)
  {
    v10 = a7 & 1;
    outlined consume of AccessibilityActionKind.ActionKind(a1, a2, a3, a4);
    outlined consume of Environment<AppIntentExecutor?>.Content(a5, a6, v10);
    swift_release();

  }
}

void *type metadata accessor for ArchivableAccessibilityActionModifier.CodingKeys()
{
  return &unk_1E1B06E70;
}

void destroy for CodableAccessibilityAction.ActionKind(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 <= 1)
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(_QWORD *)(a1 + 8), v1 != 0);
}

uint64_t initializeBufferWithCopyOfBuffer for CodableAccessibilityAction.ActionKind(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  }
  else
  {
    v5 = v4 != 0;
    v6 = *a2;
    v7 = a2[1];
    outlined copy of AccessibilityText.Storage((void *)*a2, v7, v4 != 0);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = v5;
    *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  }
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityAction.ActionKind(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  __int128 v15;

  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      v12 = v5 != 0;
      v13 = *(void **)a2;
      v14 = *((_QWORD *)a2 + 1);
      outlined copy of AccessibilityText.Storage(*(void **)a2, v14, v5 != 0);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v14;
      *(_BYTE *)(a1 + 16) = v12;
      goto LABEL_6;
    }
LABEL_8:
    v15 = *a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    *(_OWORD *)a1 = v15;
    return a1;
  }
  if (v5 > 1)
  {
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(_QWORD *)(a1 + 8), v4 & 1);
    goto LABEL_8;
  }
  v6 = v5 != 0;
  v7 = *(void **)a2;
  v8 = *((_QWORD *)a2 + 1);
  outlined copy of AccessibilityText.Storage(*(void **)a2, v8, v5 != 0);
  v9 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of AccessibilityText.Storage(v9, v10, v11);
LABEL_6:
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityAction.ActionKind(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  void *v7;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 > 1)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 16);
  v6 = v4 & 1;
  if (v5 > 1)
  {
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(_QWORD *)(a1 + 8), v6);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    return a1;
  }
  v7 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5 != 0;
  outlined consume of AccessibilityText.Storage(v7, v8, v6);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityAction.ActionKind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 > 1)
    v4 = (v3 ^ 0xFF) + 1;
  else
    v4 = 0;
  if (v4 >= 6)
    return v4 - 5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityAction.ActionKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -5 - a2;
  }
  return result;
}

uint64_t getEnumTag for CodableAccessibilityAction.ActionKind(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 > 1)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for CodableAccessibilityAction.ActionKind(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityAction.ActionKind()
{
  return &type metadata for CodableAccessibilityAction.ActionKind;
}

ValueMetadata *type metadata accessor for CodableAccessibilityActionList.CodingKeys()
{
  return &type metadata for CodableAccessibilityActionList.CodingKeys;
}

uint64_t destroy for CodableAccessibilityAction(uint64_t a1)
{
  __int16 v2;

  v2 = *(_WORD *)(a1 + 16);
  if (v2 != 251 && (v2 & 0xFC | 2) != 0xFE)
    outlined consume of AccessibilityText.Storage(*(void **)a1, *(_QWORD *)(a1 + 8), v2 & 1);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));

  return swift_release();
}

uint64_t initializeWithCopy for CodableAccessibilityAction(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  id v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *((unsigned __int16 *)a2 + 8);
  if (*((_WORD *)a2 + 8) == 251 || (v4 & 0xFC | 2) == 0xFE)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  }
  else
  {
    v12 = v4 >> 8;
    v13 = *a2;
    v14 = a2[1];
    v15 = v4 & 1;
    outlined copy of AccessibilityText.Storage((void *)*a2, v14, v4 & 1);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v14;
    *(_BYTE *)(a1 + 16) = v15;
    *(_BYTE *)(a1 + 17) = v12;
  }
  v5 = a2[3];
  v6 = a2[4];
  v7 = *((_BYTE *)a2 + 40);
  outlined copy of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  v8 = a2[8];
  v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 64) = v8;
  v10 = (id)v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityAction(uint64_t a1, uint64_t *a2)
{
  __int16 v4;
  __int16 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  __int16 v18;
  __int16 v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  uint64_t v27;
  char v28;

  v4 = *(_WORD *)(a1 + 16);
  if (v4 != 251 && (v4 & 0xFC | 2) != 0xFE)
  {
    v18 = *((_WORD *)a2 + 8);
    if (v18 == 251 || (v18 & 0xFC | 2) == 0xFE)
    {
      outlined destroy of AccessibilityText(a1);
      v19 = *((_WORD *)a2 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_WORD *)(a1 + 16) = v19;
      goto LABEL_6;
    }
    v23 = *a2;
    v24 = a2[1];
    v25 = v18 & 1;
    outlined copy of AccessibilityText.Storage((void *)*a2, v24, v18 & 1);
    v26 = *(void **)a1;
    v27 = *(_QWORD *)(a1 + 8);
    v28 = *(_BYTE *)(a1 + 16);
    *(_QWORD *)a1 = v23;
    *(_QWORD *)(a1 + 8) = v24;
    *(_BYTE *)(a1 + 16) = v25;
    outlined consume of AccessibilityText.Storage(v26, v27, v28);
LABEL_11:
    *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
    goto LABEL_6;
  }
  v5 = *((_WORD *)a2 + 8);
  if (v5 != 251 && (v5 & 0xFC | 2) != 0xFE)
  {
    v20 = (void *)*a2;
    v21 = a2[1];
    v22 = v5 & 1;
    outlined copy of AccessibilityText.Storage((void *)*a2, v21, v5 & 1);
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v21;
    *(_BYTE *)(a1 + 16) = v22;
    goto LABEL_11;
  }
  v6 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  *(_OWORD *)a1 = v6;
LABEL_6:
  v7 = a2[3];
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 40);
  outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  outlined consume of Environment<AppIntentExecutor?>.Content(v10, v11, v12);
  v13 = (void *)a2[6];
  v14 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  v15 = v13;

  v16 = a2[8];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = v16;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of AccessibilityText(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE36F8] - 8) + 8))();
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityAction(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  void *v12;
  uint64_t v13;

  v4 = *(_WORD *)(a1 + 16);
  if (v4 != 251 && (v4 & 0xFC | 2) != 0xFE)
  {
    v5 = *(_WORD *)(a2 + 16);
    if (v5 != 251 && (v5 & 0xFC | 2) != 0xFE)
    {
      v12 = *(void **)a1;
      v13 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v5 & 1;
      outlined consume of AccessibilityText.Storage(v12, v13, v4 & 1);
      *(_BYTE *)(a1 + 17) = HIBYTE(v5) & 1;
      goto LABEL_8;
    }
    outlined destroy of AccessibilityText(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
LABEL_8:
  v6 = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  v10 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityAction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityAction()
{
  return &type metadata for CodableAccessibilityAction;
}

uint64_t assignWithCopy for ArchivableAccessibilityActionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ArchivableAccessibilityActionModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CodableAccessibilityActionList()
{
  return &type metadata for CodableAccessibilityActionList;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableAccessibilityActionModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for ArchivedAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableAccessibilityActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier, (uint64_t)&type metadata for ArchivableAccessibilityActionModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableAccessibilityActionModifier>, ArchivedAttachmentModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableAccessibilityActionModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableAccessibilityActionModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableAccessibilityActionModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableAccessibilityActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier, (uint64_t)&type metadata for ArchivableAccessibilityActionModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableAccessibilityActionModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.CodingKeys, &unk_1E1AEDB08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.CodingKeys, &unk_1E1AEDB08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.CodingKeys, &unk_1E1AEDB08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.CodingKeys, &unk_1E1AEDB08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.CodingKeys and conformance CodableAccessibilityAction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind, &type metadata for CodableAccessibilityAction.ActionKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind, &type metadata for CodableAccessibilityAction.ActionKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind and conformance CodableAccessibilityAction.ActionKind);
  }
  return result;
}

uint64_t outlined copy of CodableAccessibilityAction.ActionKind(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t (*a4)(uint64_t, uint64_t, _QWORD))
{
  if (a3 != 251 && (a3 & 0xFC | 2) != 0xFE)
    return a4(result, a2, a3 & 1);
  return result;
}

uint64_t type metadata accessor for ArchivableDisplayList<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableDisplayList<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>;
  if (!lazy cache variable for type metadata for ArchivableDisplayList<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>)
  {
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    type metadata accessor for ArchivableDisplayList();
  }
  return result;
}

uint64_t type metadata accessor for ArchivableDisplayList<ArchivableButtonAppIntentModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableDisplayList<ArchivableButtonAppIntentModifier>;
  if (!lazy cache variable for type metadata for ArchivableDisplayList<ArchivableButtonAppIntentModifier>)
  {
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    type metadata accessor for ArchivableDisplayList();
  }
  return result;
}

uint64_t type metadata accessor for ArchivableDisplayList<ArchivableToggleAppIntentModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableDisplayList<ArchivableToggleAppIntentModifier>;
  if (!lazy cache variable for type metadata for ArchivableDisplayList<ArchivableToggleAppIntentModifier>)
  {
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    type metadata accessor for ArchivableDisplayList();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.CustomCodingKeys, &unk_1E1AED9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.CustomCodingKeys, &unk_1E1AED9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.CustomCodingKeys, &unk_1E1AED9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.CustomCodingKeys, &unk_1E1AED9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CustomCodingKeys and conformance CodableAccessibilityAction.ActionKind.CustomCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys, &unk_1E1AEDAC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys, &unk_1E1AEDAC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys, &unk_1E1AEDAC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys and conformance CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.DeleteCodingKeys, &unk_1E1AEDA48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.DeleteCodingKeys, &unk_1E1AEDA48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.DeleteCodingKeys, &unk_1E1AEDA48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DeleteCodingKeys and conformance CodableAccessibilityAction.ActionKind.DeleteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.MagicTapCodingKeys, &unk_1E1AEDAA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.MagicTapCodingKeys, &unk_1E1AEDAA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.MagicTapCodingKeys, &unk_1E1AEDAA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.MagicTapCodingKeys and conformance CodableAccessibilityAction.ActionKind.MagicTapCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.EscapeCodingKeys, &unk_1E1AEDA68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.EscapeCodingKeys, &unk_1E1AEDA68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.EscapeCodingKeys, &unk_1E1AEDA68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.EscapeCodingKeys and conformance CodableAccessibilityAction.ActionKind.EscapeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.DefaultCodingKeys, &unk_1E1AEDA88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.DefaultCodingKeys, &unk_1E1AEDA88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.DefaultCodingKeys, &unk_1E1AEDA88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.DefaultCodingKeys and conformance CodableAccessibilityAction.ActionKind.DefaultCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.CodingKeys, &unk_1E1AED928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.CodingKeys, &unk_1E1AED928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.CodingKeys, &unk_1E1AED928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CodableAccessibilityAction.ActionKind.CodingKeys, &unk_1E1AED928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityAction.ActionKind.CodingKeys and conformance CodableAccessibilityAction.ActionKind.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText;
  if (!lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3708], MEMORY[0x1E0CE36F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText;
  if (!lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3700], MEMORY[0x1E0CE36F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityText and conformance AccessibilityText);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityAction.ActionKind.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1877A351C + 4 * byte_187C5B8FA[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1877A3550 + 4 * byte_187C5B8F5[v4]))();
}

uint64_t sub_1877A3550(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877A3558(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1877A3560);
  return result;
}

uint64_t sub_1877A356C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1877A3574);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1877A3578(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877A3580(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.CodingKeys()
{
  return &unk_1E1AED928;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.DefaultCodingKeys()
{
  return &unk_1E1AEDA88;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.EscapeCodingKeys()
{
  return &unk_1E1AEDA68;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.MagicTapCodingKeys()
{
  return &unk_1E1AEDAA8;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.DeleteCodingKeys()
{
  return &unk_1E1AEDA48;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.ShowMenuCodingKeys()
{
  return &unk_1E1AEDAC8;
}

uint64_t storeEnumTagSinglePayload for ArchivableAccessibilityActionModifier.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1877A362C + 4 * byte_187C5B8FF[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1877A364C + 4 * byte_187C5B904[v4]))();
}

_BYTE *sub_1877A362C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1877A364C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1877A3654(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1877A365C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1877A3664(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1877A366C(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for CodableAccessibilityAction.ActionKind.CustomCodingKeys()
{
  return &unk_1E1AED9B8;
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1877A36D4 + 4 * byte_187C5B90E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1877A3708 + 4 * byte_187C5B909[v4]))();
}

uint64_t sub_1877A3708(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877A3710(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1877A3718);
  return result;
}

uint64_t sub_1877A3724(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1877A372CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1877A3730(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877A3738(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for CodableAccessibilityAction.CodingKeys()
{
  return &unk_1E1AEDB08;
}

uint64_t type metadata accessor for ArchivableDisplayList<ArchivableAccessibilityViewModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableDisplayList<ArchivableAccessibilityViewModifier>;
  if (!lazy cache variable for type metadata for ArchivableDisplayList<ArchivableAccessibilityViewModifier>)
  {
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    type metadata accessor for ArchivableDisplayList();
  }
  return result;
}

uint64_t specialized CodableAccessibilityAction.ActionKind.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746C7561666564 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657061637365 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x706154636967616DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574656C6564 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x756E654D776F6873 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6D6F74737563 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t specialized CodableAccessibilityAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1684957547 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65746E69 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AccessoryLinearGauge.init(configuration:gradient:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t KeyPath;
  char v11;
  char v12;
  char v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v4 = *a1;
  v12 = *((_BYTE *)a1 + 9);
  v13 = *((_BYTE *)a1 + 8);
  v11 = *((_BYTE *)a1 + 10);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:relativeTo:)();
  ScaledMetric.init(wrappedValue:relativeTo:)();
  KeyPath = swift_getKeyPath();
  v9 = swift_getKeyPath();
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  v7 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a3 = v15;
  *(_BYTE *)(a3 + 8) = v16;
  *(_QWORD *)(a3 + 16) = v17;
  *(_BYTE *)(a3 + 24) = v18;
  *(_QWORD *)(a3 + 32) = v19;
  *(_BYTE *)(a3 + 40) = v20;
  *(_QWORD *)(a3 + 48) = v15;
  *(_BYTE *)(a3 + 56) = v16;
  *(_QWORD *)(a3 + 64) = v17;
  *(_BYTE *)(a3 + 72) = v18;
  *(_QWORD *)(a3 + 80) = v19;
  *(_BYTE *)(a3 + 88) = v20;
  *(_QWORD *)(a3 + 96) = v4;
  *(_BYTE *)(a3 + 104) = v13;
  *(_BYTE *)(a3 + 105) = v12;
  *(_BYTE *)(a3 + 106) = v11;
  *(_QWORD *)(a3 + 112) = a2;
  *(_QWORD *)(a3 + 120) = KeyPath;
  *(_BYTE *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = v9;
  *(_QWORD *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = v5;
  *(_BYTE *)(a3 + 168) = 0;
  *(_QWORD *)(a3 + 176) = v6;
  *(_BYTE *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = v7;
  *(_BYTE *)(a3 + 200) = 0;
  *(_QWORD *)(a3 + 208) = result;
  *(_BYTE *)(a3 + 216) = 0;
  return result;
}

uint64_t AccessoryLinearGauge.effectiveTint.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_BYTE *)(v0 + 168);
  if (*(_QWORD *)(v0 + 112))
  {
    v3 = *(_QWORD *)(v0 + 112);
LABEL_3:
    swift_bridgeObjectRetain();
    outlined copy of Environment<Bool>.Content(v1, v2);
    specialized Environment.wrappedValue.getter(v1, v2, v16);
    outlined consume of Environment<Bool>.Content(v1, v2);
    if (LOBYTE(v16[0]) == 1)
    {
      v4 = Gradient.reversed.getter();
      swift_bridgeObjectRelease();
      v3 = v4;
    }
    static UnitPoint.leading.getter();
    v6 = v5;
    v8 = v7;
    static UnitPoint.trailing.getter();
    v16[0] = v3;
    v16[1] = v6;
    v16[2] = v8;
    v16[3] = v9;
    v16[4] = v10;
    return AnyShapeStyle.init<A>(_:)();
  }
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(unsigned __int8 *)(v0 + 128);
  outlined copy of Environment<SceneBridge?>.Content(v13, v14);
  v15 = specialized Environment.wrappedValue.getter(v13, v14);
  outlined consume of Environment<AnyShapeStyle?>.Content(v13, v14);
  if (v15)
  {
    AnyShapeStyle.as<A>(type:)();
    swift_release();
    v3 = v16[0];
    if (v16[0])
      goto LABEL_3;
  }
  outlined copy of Environment<SceneBridge?>.Content(v13, v14);
  v11 = specialized Environment.wrappedValue.getter(v13, v14);
  outlined consume of Environment<AnyShapeStyle?>.Content(v13, v14);
  if (v11)
    return v11;
  v16[0] = static Color.primary.getter();
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t AccessoryLinearGauge.effectiveDotTint.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 112);
  v2 = *(_BYTE *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_BYTE *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 176);
  v7 = *(_BYTE *)(v0 + 184);
  outlined copy of Environment<SceneBridge?>.Content(v6, v7 & 1);
  v8 = specialized Environment.wrappedValue.getter(v6, v7 & 1);
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7 & 1);
  if (v8)
    return AnyShapeStyle.init<A>(_:)();
  v9 = v5 & 1;
  outlined copy of Environment<(Color, Color)?>.Content(v3, v4, v9);
  v10 = specialized Environment.wrappedValue.getter(v3, v4, v9);
  outlined consume of Environment<(Color, Color)?>.Content(v3, v4, v9);
  if (v10)
  {
    swift_release();
    return AnyShapeStyle.init<A>(_:)();
  }
  if (v13
    || (outlined copy of Environment<SceneBridge?>.Content(v1, v2 & 1),
        v12 = specialized Environment.wrappedValue.getter(v1, v2 & 1),
        outlined consume of Environment<AnyShapeStyle?>.Content(v1, v2 & 1),
        v12)
    && (AnyShapeStyle.as<A>(type:)(), swift_release(), v14))
  {
    swift_bridgeObjectRetain();
    Gradient.color(at:)();
    swift_bridgeObjectRelease();
    return AnyShapeStyle.init<A>(_:)();
  }
  return AccessoryLinearGauge.effectiveTint.getter();
}

__n128 AccessoryLinearGauge.body.getter@<Q0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  int v10;
  char v11;
  uint64_t KeyPath;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[7];
  __int128 v36;
  _BYTE v37[32];
  __n128 v38;
  char v39;
  __int128 v40;
  _BYTE v41[32];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[2];
  _QWORD v52[2];
  char v53;
  _BYTE v54[7];
  char v55;
  _BYTE v56[7];
  char v57;
  _BYTE v58[7];
  char v59;
  int v60;
  __int16 v61;
  char v62;
  char v63;
  char v64;
  char v65;

  v3 = v1[11];
  v49 = v1[10];
  v50 = v3;
  v51[0] = v1[12];
  *(_OWORD *)((char *)v51 + 9) = *(__int128 *)((char *)v1 + 201);
  v4 = v1[7];
  v45 = v1[6];
  v46 = v4;
  v5 = v1[9];
  v47 = v1[8];
  v48 = v5;
  v6 = v1[3];
  *(_OWORD *)&v41[16] = v1[2];
  v42 = v6;
  v7 = v1[5];
  v43 = v1[4];
  v44 = v7;
  v8 = v1[1];
  v40 = *v1;
  *(_OWORD *)v41 = v8;
  v27 = static VerticalAlignment.center.getter();
  closure #1 in AccessoryLinearGauge.body.getter((uint64_t)&v40, (uint64_t)&v36);
  v26 = v36;
  v9 = BYTE1(v36);
  v29 = *(_QWORD *)v37;
  v30 = *((_QWORD *)&v36 + 1);
  v28 = v37[8];
  v33 = *(_QWORD *)&v37[16];
  v10 = *(_DWORD *)&v37[24];
  v31 = v37[29];
  v32 = v37[28];
  v11 = v39;
  type metadata accessor for ScaledMetric<CGFloat>();
  v25 = v38;
  v36 = v40;
  *(_OWORD *)v37 = *(_OWORD *)v41;
  *(_OWORD *)&v37[9] = *(_OWORD *)&v41[9];
  ScaledMetric.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v21 = v36;
  v22 = *(_QWORD *)v37;
  v23 = *(_QWORD *)&v37[24];
  v24 = *(_QWORD *)&v37[16];
  v63 = 1;
  v62 = v9;
  v59 = v11;
  v57 = BYTE8(v36);
  v55 = v37[8];
  v34 = v42;
  ScaledMetric.wrappedValue.getter();
  static Font.Weight.semibold.getter();
  LOBYTE(v34) = 2;
  v20 = static Font.system(size:weight:design:)();
  KeyPath = swift_getKeyPath();
  v13 = v63;
  v14 = v62;
  v15 = v59;
  v16 = v57;
  v17 = v55;
  v18 = static VerticalAlignment.center.getter();
  v52[0] = v45;
  *(_DWORD *)((char *)v52 + 7) = *(_DWORD *)((char *)&v45 + 7);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v52[1], (uint64_t)&v53, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v53, (uint64_t)&v64, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
  v65 = 1;
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 17) = v34;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)&v34 + 3);
  *(_BYTE *)(a1 + 24) = v26;
  *(_BYTE *)(a1 + 25) = v14;
  *(_DWORD *)(a1 + 26) = v60;
  *(_WORD *)(a1 + 30) = v61;
  *(_QWORD *)(a1 + 32) = v30;
  *(_QWORD *)(a1 + 40) = v29;
  *(_BYTE *)(a1 + 48) = v28;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v35[3];
  *(_DWORD *)(a1 + 49) = *(_DWORD *)v35;
  *(_QWORD *)(a1 + 56) = v33;
  *(_DWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 68) = v32;
  *(_BYTE *)(a1 + 69) = v31;
  result = v25;
  *(__n128 *)(a1 + 72) = v25;
  *(_BYTE *)(a1 + 88) = v15;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)&v58[3];
  *(_DWORD *)(a1 + 89) = *(_DWORD *)v58;
  *(_QWORD *)(a1 + 96) = v21;
  *(_BYTE *)(a1 + 104) = v16;
  *(_DWORD *)(a1 + 105) = *(_DWORD *)v56;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)&v56[3];
  *(_QWORD *)(a1 + 112) = v22;
  *(_BYTE *)(a1 + 120) = v17;
  *(_DWORD *)(a1 + 121) = *(_DWORD *)v54;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)&v54[3];
  *(_QWORD *)(a1 + 128) = v24;
  *(_QWORD *)(a1 + 136) = v23;
  *(_QWORD *)(a1 + 144) = KeyPath;
  *(_QWORD *)(a1 + 152) = v20;
  *(_QWORD *)(a1 + 160) = v18;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = v65;
  *(_BYTE *)(a1 + 177) = v64;
  return result;
}

float closure #1 in AccessoryLinearGauge.body.getter@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  float result;
  char v12;
  char v13;
  __int128 v14;
  char v15;
  _BYTE v16[8];
  uint64_t v17;
  float v18;
  char v19;
  char v20;
  __int128 v21;
  _BYTE v22[11];
  char v23;
  char v24;

  *(_QWORD *)v22 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)&v22[7] = *(_DWORD *)(a1 + 103);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v22[9], (uint64_t)&v23, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v23, (uint64_t)&v24, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
  v4 = v24;
  v5 = v24 & v22[8];
  v6 = static Alignment.center.getter();
  v8 = v7;
  closure #1 in closure #1 in AccessoryLinearGauge.body.getter(a1, (uint64_t)v16);
  v9 = v16[0];
  v10 = v17;
  result = v18;
  v12 = v19;
  v13 = v20;
  v14 = v21;
  v15 = v22[10];
  *(_BYTE *)a2 = v5;
  *(_BYTE *)(a2 + 1) = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v10;
  *(float *)(a2 + 40) = result;
  *(_BYTE *)(a2 + 44) = v12;
  *(_BYTE *)(a2 + 45) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  *(_BYTE *)(a2 + 64) = v15;
  return result;
}

uint64_t closure #1 in closure #1 in AccessoryLinearGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  float v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v32[12];
  _OWORD v33[2];

  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_BYTE *)(a1 + 152);
  outlined retain of AccessoryLinearGauge(a1);
  outlined copy of Environment<(Color, Color)?>.Content(v4, v5, v6);
  v7 = specialized Environment.wrappedValue.getter(v4, v5, v6);
  v9 = v8;
  outlined consume of Environment<(Color, Color)?>.Content(v4, v5, v6);
  if (v7)
  {
    swift_release();
    *(_QWORD *)&v32[0] = v9;
    v10 = AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    v11 = *(_OWORD *)(a1 + 176);
    v32[10] = *(_OWORD *)(a1 + 160);
    v32[11] = v11;
    v33[0] = *(_OWORD *)(a1 + 192);
    *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(a1 + 201);
    v12 = *(_OWORD *)(a1 + 112);
    v32[6] = *(_OWORD *)(a1 + 96);
    v32[7] = v12;
    v13 = *(_OWORD *)(a1 + 144);
    v32[8] = *(_OWORD *)(a1 + 128);
    v32[9] = v13;
    v14 = *(_OWORD *)(a1 + 48);
    v32[2] = *(_OWORD *)(a1 + 32);
    v32[3] = v14;
    v15 = *(_OWORD *)(a1 + 80);
    v32[4] = *(_OWORD *)(a1 + 64);
    v32[5] = v15;
    v16 = *(_OWORD *)(a1 + 16);
    v32[0] = *(_OWORD *)a1;
    v32[1] = v16;
    v10 = AccessoryLinearGauge.effectiveTint.getter();
  }
  v17 = v10;
  v18 = *(_QWORD *)(a1 + 192);
  v19 = *(_BYTE *)(a1 + 200);
  outlined retain of AccessoryLinearGauge(a1);
  outlined copy of Environment<Bool>.Content(v18, v19);
  specialized Environment.wrappedValue.getter(v18, v19, (uint64_t *)v32);
  outlined consume of Environment<Bool>.Content(v18, v19);
  outlined release of AccessoryLinearGauge(a1);
  if ((v32[0] & 2) == 0)
  {
    outlined release of AccessoryLinearGauge(a1);
LABEL_8:
    v23 = 1.0;
    goto LABEL_9;
  }
  v20 = *(_QWORD *)(a1 + 208);
  v21 = *(_BYTE *)(a1 + 216);
  outlined retain of AccessoryLinearGauge(a1);
  outlined copy of Environment<Bool>.Content(v20, v21);
  v22 = specialized Environment.wrappedValue.getter(v20, v21);
  outlined consume of Environment<Bool>.Content(v20, v21);
  outlined release of AccessoryLinearGauge(a1);
  outlined release of AccessoryLinearGauge(a1);
  if ((v22 & 1) == 0)
    goto LABEL_8;
  v23 = 0.3;
LABEL_9:
  v24 = (_OWORD *)swift_allocObject();
  v25 = *(_OWORD *)(a1 + 176);
  v24[11] = *(_OWORD *)(a1 + 160);
  v24[12] = v25;
  v24[13] = *(_OWORD *)(a1 + 192);
  *(_OWORD *)((char *)v24 + 217) = *(_OWORD *)(a1 + 201);
  v26 = *(_OWORD *)(a1 + 112);
  v24[7] = *(_OWORD *)(a1 + 96);
  v24[8] = v26;
  v27 = *(_OWORD *)(a1 + 144);
  v24[9] = *(_OWORD *)(a1 + 128);
  v24[10] = v27;
  v28 = *(_OWORD *)(a1 + 48);
  v24[3] = *(_OWORD *)(a1 + 32);
  v24[4] = v28;
  v29 = *(_OWORD *)(a1 + 80);
  v24[5] = *(_OWORD *)(a1 + 64);
  v24[6] = v29;
  v30 = *(_OWORD *)(a1 + 16);
  v24[1] = *(_OWORD *)a1;
  v24[2] = v30;
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = v17;
  *(float *)(a2 + 16) = v23;
  *(_WORD *)(a2 + 20) = 256;
  *(_QWORD *)(a2 + 24) = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in AccessoryLinearGauge.body.getter;
  *(_QWORD *)(a2 + 32) = v24;
  return outlined retain of AccessoryLinearGauge(a1);
}

double implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in AccessoryLinearGauge.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;
  __int128 v3;
  double result;
  _OWORD v5[3];
  int v6;

  v2 = *(_DWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = v2;
  *(_QWORD *)&result = AccessoryLinearGauge.content(_:)((uint64_t *)v5, a2).n128_u64[0];
  return result;
}

__n128 AccessoryLinearGauge.content(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int32 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 result;
  double v33;
  __int128 v34;
  _BYTE v35[32];
  __n128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[5];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[25];

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = *((_DWORD *)a1 + 12);
  v11 = v2[11];
  v50 = v2[10];
  v51 = v11;
  *(_OWORD *)v52 = v2[12];
  *(_OWORD *)&v52[9] = *(__int128 *)((char *)v2 + 201);
  v12 = v2[7];
  v46 = v2[6];
  v47 = v12;
  v13 = v2[9];
  v48 = v2[8];
  v49 = v13;
  v14 = v2[3];
  v45[1] = v2[2];
  v45[2] = v14;
  v15 = v2[5];
  v45[3] = v2[4];
  v45[4] = v15;
  v16 = v2[1];
  v44 = *v2;
  v45[0] = v16;
  v17 = *(_QWORD *)v52;
  v18 = v52[8];
  outlined retain of AccessoryLinearGauge((uint64_t)&v44);
  outlined retain of AccessoryLinearGauge((uint64_t)&v44);
  outlined copy of Environment<Bool>.Content(v17, v18);
  specialized Environment.wrappedValue.getter(v17, v18, (uint64_t *)&v34);
  outlined consume of Environment<Bool>.Content(v17, v18);
  if ((v34 & 2) == 0)
  {
    outlined release of AccessoryLinearGauge((uint64_t)&v44);
    outlined release of AccessoryLinearGauge((uint64_t)&v44);
LABEL_4:
    v22 = *(double *)&v46;
    goto LABEL_5;
  }
  v19 = *(_QWORD *)&v52[16];
  v20 = v52[24];
  outlined retain of AccessoryLinearGauge((uint64_t)&v44);
  outlined copy of Environment<Bool>.Content(v19, v20);
  v21 = specialized Environment.wrappedValue.getter(v19, v20);
  outlined consume of Environment<Bool>.Content(v19, v20);
  outlined release of AccessoryLinearGauge((uint64_t)&v44);
  outlined release of AccessoryLinearGauge((uint64_t)&v44);
  outlined release of AccessoryLinearGauge((uint64_t)&v44);
  v22 = 0.0;
  if ((v21 & 1) == 0)
    goto LABEL_4;
LABEL_5:
  *(_QWORD *)&v34 = v4;
  *((_QWORD *)&v34 + 1) = v5;
  *(_QWORD *)v35 = v6;
  *(_QWORD *)&v35[8] = v7;
  *(_QWORD *)&v35[16] = v8;
  *(_QWORD *)&v35[24] = v9;
  v36.n128_u32[0] = v10;
  GeometryProxy.size.getter();
  v24 = v23;
  v34 = v44;
  *(_OWORD *)v35 = v45[0];
  *(_OWORD *)&v35[9] = *(_OWORD *)((char *)v45 + 9);
  type metadata accessor for ScaledMetric<CGFloat>();
  ScaledMetric.wrappedValue.getter();
  v25 = static Alignment.center.getter();
  v27 = v26;
  closure #1 in AccessoryLinearGauge.content(_:)((uint64_t)&v44, (uint64_t)&v34, v22 * (v24 - v33));
  *(_QWORD *)a2 = v25;
  *(_QWORD *)(a2 + 8) = v27;
  v28 = v42;
  *(_OWORD *)(a2 + 144) = v41;
  *(_OWORD *)(a2 + 160) = v28;
  *(_OWORD *)(a2 + 176) = v43;
  v29 = v38;
  *(_OWORD *)(a2 + 80) = v37;
  *(_OWORD *)(a2 + 96) = v29;
  v30 = v40;
  *(_OWORD *)(a2 + 112) = v39;
  *(_OWORD *)(a2 + 128) = v30;
  v31 = *(_OWORD *)v35;
  *(_OWORD *)(a2 + 16) = v34;
  *(_OWORD *)(a2 + 32) = v31;
  result = v36;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)&v35[16];
  *(__n128 *)(a2 + 64) = result;
  return result;
}

double closure #1 in AccessoryLinearGauge.content(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[7];
  _BYTE v36[7];
  char v37;
  _BYTE v38[7];
  char v39;
  _BYTE v40[7];
  _BYTE v41[7];
  int v42;
  __int16 v43;
  __int128 v44;
  _BYTE v45[32];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD v55[2];
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  _OWORD v63[3];

  static Color.black.getter();
  v6 = *(_QWORD *)(a1 + 192);
  v7 = *(_BYTE *)(a1 + 200);
  outlined retain of AccessoryLinearGauge(a1);
  outlined copy of Environment<Bool>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7, (uint64_t *)&v44);
  outlined consume of Environment<Bool>.Content(v6, v7);
  if ((v44 & 2) != 0)
  {
    v8 = *(_QWORD *)(a1 + 208);
    v9 = *(_BYTE *)(a1 + 216);
    outlined retain of AccessoryLinearGauge(a1);
    outlined copy of Environment<Bool>.Content(v8, v9);
    specialized Environment.wrappedValue.getter(v8, v9);
    outlined consume of Environment<Bool>.Content(v8, v9);
    outlined release of AccessoryLinearGauge(a1);
  }
  outlined release of AccessoryLinearGauge(a1);
  v34 = Color.opacity(_:)();
  swift_release();
  v10 = *(_OWORD *)(a1 + 16);
  v62 = *(_OWORD *)a1;
  v63[0] = v10;
  *(_OWORD *)((char *)v63 + 9) = *(_OWORD *)(a1 + 25);
  v11 = *(_OWORD *)(a1 + 16);
  v44 = *(_OWORD *)a1;
  *(_OWORD *)v45 = v11;
  *(_OWORD *)&v45[9] = *(_OWORD *)(a1 + 25);
  type metadata accessor for ScaledMetric<CGFloat>();
  ScaledMetric.wrappedValue.getter();
  v44 = v62;
  *(_OWORD *)v45 = v63[0];
  *(_OWORD *)&v45[9] = *(_OWORD *)((char *)v63 + 9);
  ScaledMetric.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v12 = *(_OWORD *)(a1 + 160);
  v13 = *(_OWORD *)(a1 + 192);
  v54 = *(_OWORD *)(a1 + 176);
  v55[0] = v13;
  *(_OWORD *)((char *)v55 + 9) = *(_OWORD *)(a1 + 201);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 128);
  v16 = *(_OWORD *)(a1 + 144);
  v50 = *(_OWORD *)(a1 + 112);
  v51 = v15;
  v52 = v16;
  v53 = v12;
  v17 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v45[16] = *(_OWORD *)(a1 + 32);
  v46 = v17;
  v18 = *(_OWORD *)(a1 + 80);
  v47 = *(_OWORD *)(a1 + 64);
  v19 = v57;
  v30 = v56;
  v31 = v58;
  v20 = v59;
  v32 = v60;
  v33 = v61;
  v48 = v18;
  v49 = v14;
  v21 = *(_OWORD *)(a1 + 16);
  v44 = *(_OWORD *)a1;
  *(_OWORD *)v45 = v21;
  v22 = AccessoryLinearGauge.effectiveDotTint.getter();
  outlined retain of AccessoryLinearGauge(a1);
  outlined copy of Environment<Bool>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7, (uint64_t *)&v44);
  outlined consume of Environment<Bool>.Content(v6, v7);
  if ((v44 & 2) == 0)
  {
    outlined release of AccessoryLinearGauge(a1);
LABEL_6:
    v26 = 1.0;
    goto LABEL_7;
  }
  v23 = *(_QWORD *)(a1 + 208);
  v24 = *(_BYTE *)(a1 + 216);
  outlined retain of AccessoryLinearGauge(a1);
  outlined copy of Environment<Bool>.Content(v23, v24);
  v25 = specialized Environment.wrappedValue.getter(v23, v24);
  outlined consume of Environment<Bool>.Content(v23, v24);
  outlined release of AccessoryLinearGauge(a1);
  outlined release of AccessoryLinearGauge(a1);
  v26 = 0.0;
  if ((v25 & 1) == 0)
    goto LABEL_6;
LABEL_7:
  v44 = v62;
  *(_OWORD *)v45 = v63[0];
  *(_OWORD *)&v45[9] = *(_OWORD *)((char *)v63 + 9);
  ScaledMetric.wrappedValue.getter();
  v44 = v62;
  *(_OWORD *)v45 = v63[0];
  *(_OWORD *)&v45[9] = *(_OWORD *)((char *)v63 + 9);
  ScaledMetric.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v27 = v44;
  v28 = *(_QWORD *)v45;
  v39 = BYTE8(v44);
  v37 = v45[8];
  *(_DWORD *)(a2 + 18) = v42;
  *(_WORD *)(a2 + 22) = v43;
  *(_DWORD *)(a2 + 33) = *(_DWORD *)v35;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v35[3];
  *(_DWORD *)(a2 + 52) = *(_DWORD *)&v41[3];
  *(_DWORD *)(a2 + 49) = *(_DWORD *)v41;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v40[3];
  *(_DWORD *)(a2 + 89) = *(_DWORD *)v40;
  *(_DWORD *)(a2 + 124) = *(_DWORD *)&v38[3];
  *(_DWORD *)(a2 + 121) = *(_DWORD *)v38;
  *(_DWORD *)(a2 + 137) = *(_DWORD *)v36;
  *(_DWORD *)(a2 + 140) = *(_DWORD *)&v36[3];
  *(_QWORD *)a2 = 0xC010000000000000;
  *(_QWORD *)(a2 + 8) = v34;
  *(_WORD *)(a2 + 16) = 256;
  *(_QWORD *)(a2 + 24) = v30;
  *(_BYTE *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v31;
  *(_BYTE *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v32;
  *(_QWORD *)(a2 + 64) = v33;
  *(double *)(a2 + 72) = a3;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 18;
  *(_QWORD *)(a2 + 96) = v22;
  *(float *)(a2 + 104) = v26;
  *(_WORD *)(a2 + 108) = 256;
  *(_QWORD *)(a2 + 112) = v27;
  *(_BYTE *)(a2 + 120) = v39;
  *(_QWORD *)(a2 + 128) = v28;
  *(_BYTE *)(a2 + 136) = v37;
  result = *(double *)&v45[16];
  *(_OWORD *)(a2 + 144) = *(_OWORD *)&v45[16];
  *(double *)(a2 + 160) = a3;
  *(_QWORD *)(a2 + 168) = 0;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AccessoryLinearGauge()
{
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>>();
  type metadata accessor for AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double AccessoryLinearGaugeStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  char v3;
  char v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  _OWORD v17[12];
  _OWORD v18[2];

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 9);
  v5 = *(_BYTE *)(a1 + 10);
  v13 = *(_QWORD *)a1;
  v14 = v3;
  v15 = v4;
  v16 = v5;
  AccessoryLinearGauge.init(configuration:gradient:)(&v13, 0, (uint64_t)v17);
  v6 = v17[11];
  a2[10] = v17[10];
  a2[11] = v6;
  a2[12] = v18[0];
  *(_OWORD *)((char *)a2 + 201) = *(_OWORD *)((char *)v18 + 9);
  v7 = v17[7];
  a2[6] = v17[6];
  a2[7] = v7;
  v8 = v17[9];
  a2[8] = v17[8];
  a2[9] = v8;
  v9 = v17[3];
  a2[2] = v17[2];
  a2[3] = v9;
  v10 = v17[5];
  a2[4] = v17[4];
  a2[5] = v10;
  result = *(double *)v17;
  v12 = v17[1];
  *a2 = v17[0];
  a2[1] = v12;
  return result;
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in AccessoryLinearGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in LinearDashboardGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AccessoryLinearGaugeStyle()
{
  return &type metadata for AccessoryLinearGaugeStyle;
}

ValueMetadata *type metadata accessor for LinearDashboardGaugeStyle()
{
  return &type metadata for LinearDashboardGaugeStyle;
}

unint64_t lazy protocol witness table accessor for type AccessoryLinearGauge and conformance AccessoryLinearGauge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessoryLinearGauge and conformance AccessoryLinearGauge;
  if (!lazy protocol witness table cache variable for type AccessoryLinearGauge and conformance AccessoryLinearGauge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessoryLinearGauge, &type metadata for AccessoryLinearGauge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessoryLinearGauge and conformance AccessoryLinearGauge);
  }
  return result;
}

uint64_t destroy for AccessoryLinearGauge(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  swift_bridgeObjectRelease();
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(a1 + 120), *(unsigned __int8 *)(a1 + 128));
  outlined consume of Environment<(Color, Color)?>.Content(*(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_BYTE *)(a1 + 152));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 160), *(_BYTE *)(a1 + 168));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(a1 + 176), *(unsigned __int8 *)(a1 + 184));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 192), *(_BYTE *)(a1 + 200));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 208), *(_BYTE *)(a1 + 216));
}

uint64_t initializeWithCopy for AccessoryLinearGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_BYTE *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(v2 + 40);
  v8 = *(_QWORD *)(v2 + 48);
  v9 = *(_BYTE *)(v2 + 56);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v9;
  v10 = *(_QWORD *)(v2 + 64);
  v11 = *(_BYTE *)(v2 + 72);
  outlined copy of Environment<Bool>.Content(v10, v11);
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(v2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(v2 + 96);
  *(_DWORD *)(a1 + 103) = *(_DWORD *)(v2 + 103);
  v12 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v2 + 112);
  v13 = *(unsigned __int8 *)(v2 + 128);
  swift_bridgeObjectRetain();
  outlined copy of Environment<SceneBridge?>.Content(v12, v13);
  *(_QWORD *)(a1 + 120) = v12;
  *(_BYTE *)(a1 + 128) = v13;
  v14 = *(_QWORD *)(v2 + 136);
  v15 = *(_QWORD *)(v2 + 144);
  v16 = *(_BYTE *)(v2 + 152);
  outlined copy of Environment<(Color, Color)?>.Content(v14, v15, v16);
  *(_QWORD *)(a1 + 136) = v14;
  *(_QWORD *)(a1 + 144) = v15;
  *(_BYTE *)(a1 + 152) = v16;
  v17 = *(_QWORD *)(v2 + 160);
  LOBYTE(v15) = *(_BYTE *)(v2 + 168);
  outlined copy of Environment<Bool>.Content(v17, v15);
  *(_QWORD *)(a1 + 160) = v17;
  *(_BYTE *)(a1 + 168) = v15;
  v18 = *(_QWORD *)(v2 + 176);
  LOBYTE(v15) = *(_BYTE *)(v2 + 184);
  outlined copy of Environment<SceneBridge?>.Content(v18, v15);
  *(_QWORD *)(a1 + 176) = v18;
  *(_BYTE *)(a1 + 184) = v15;
  v19 = *(_QWORD *)(v2 + 192);
  LOBYTE(v15) = *(_BYTE *)(v2 + 200);
  outlined copy of Environment<Bool>.Content(v19, v15);
  *(_QWORD *)(a1 + 192) = v19;
  *(_BYTE *)(a1 + 200) = v15;
  v20 = *(_QWORD *)(v2 + 208);
  LOBYTE(v2) = *(_BYTE *)(v2 + 216);
  outlined copy of Environment<Bool>.Content(v20, v2);
  *(_QWORD *)(a1 + 208) = v20;
  *(_BYTE *)(a1 + 216) = v2;
  return a1;
}

uint64_t assignWithCopy for AccessoryLinearGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(_BYTE *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(v2 + 40);
  v12 = *(_QWORD *)(v2 + 48);
  v13 = *(_BYTE *)(v2 + 56);
  outlined copy of Environment<Bool>.Content(v12, v13);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 56) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  v16 = *(_QWORD *)(v2 + 64);
  v17 = *(_BYTE *)(v2 + 72);
  outlined copy of Environment<Bool>.Content(v16, v17);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v16;
  *(_BYTE *)(a1 + 72) = v17;
  outlined consume of Environment<Bool>.Content(v18, v19);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(v2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(v2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(v2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(v2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(v2 + 106);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v2 + 120);
  v21 = *(_BYTE *)(v2 + 128);
  outlined copy of Environment<SceneBridge?>.Content(v20, v21);
  v22 = *(_QWORD *)(a1 + 120);
  v23 = *(unsigned __int8 *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v20;
  *(_BYTE *)(a1 + 128) = v21;
  outlined consume of Environment<AnyShapeStyle?>.Content(v22, v23);
  v24 = *(_QWORD *)(v2 + 136);
  v25 = *(_QWORD *)(v2 + 144);
  v26 = *(_BYTE *)(v2 + 152);
  outlined copy of Environment<(Color, Color)?>.Content(v24, v25, v26);
  v27 = *(_QWORD *)(a1 + 136);
  v28 = *(_QWORD *)(a1 + 144);
  v29 = *(_BYTE *)(a1 + 152);
  *(_QWORD *)(a1 + 136) = v24;
  *(_QWORD *)(a1 + 144) = v25;
  *(_BYTE *)(a1 + 152) = v26;
  outlined consume of Environment<(Color, Color)?>.Content(v27, v28, v29);
  v30 = *(_QWORD *)(v2 + 160);
  LOBYTE(v25) = *(_BYTE *)(v2 + 168);
  outlined copy of Environment<Bool>.Content(v30, v25);
  v31 = *(_QWORD *)(a1 + 160);
  v32 = *(_BYTE *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v30;
  *(_BYTE *)(a1 + 168) = v25;
  outlined consume of Environment<Bool>.Content(v31, v32);
  v33 = *(_QWORD *)(v2 + 176);
  LOBYTE(v25) = *(_BYTE *)(v2 + 184);
  outlined copy of Environment<SceneBridge?>.Content(v33, v25);
  v34 = *(_QWORD *)(a1 + 176);
  v35 = *(unsigned __int8 *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v33;
  *(_BYTE *)(a1 + 184) = v25;
  outlined consume of Environment<AnyShapeStyle?>.Content(v34, v35);
  v36 = *(_QWORD *)(v2 + 192);
  LOBYTE(v25) = *(_BYTE *)(v2 + 200);
  outlined copy of Environment<Bool>.Content(v36, v25);
  v37 = *(_QWORD *)(a1 + 192);
  v38 = *(_BYTE *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v36;
  *(_BYTE *)(a1 + 200) = v25;
  outlined consume of Environment<Bool>.Content(v37, v38);
  v39 = *(_QWORD *)(v2 + 208);
  LOBYTE(v2) = *(_BYTE *)(v2 + 216);
  outlined copy of Environment<Bool>.Content(v39, v2);
  v40 = *(_QWORD *)(a1 + 208);
  v41 = *(_BYTE *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v39;
  *(_BYTE *)(a1 + 216) = v2;
  outlined consume of Environment<Bool>.Content(v40, v41);
  return a1;
}

__n128 __swift_memcpy217_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for AccessoryLinearGauge(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v11 = *((_BYTE *)a2 + 56);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  v14 = *((_BYTE *)a2 + 72);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_BYTE *)(a1 + 72) = v14;
  outlined consume of Environment<Bool>.Content(v15, v16);
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)((char *)a2 + 105);
  *(_QWORD *)(a1 + 112) = a2[14];
  swift_bridgeObjectRelease();
  v17 = *((_BYTE *)a2 + 128);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(unsigned __int8 *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_BYTE *)(a1 + 128) = v17;
  outlined consume of Environment<AnyShapeStyle?>.Content(v18, v19);
  v20 = *((_BYTE *)a2 + 152);
  v21 = *(_QWORD *)(a1 + 136);
  v22 = *(_QWORD *)(a1 + 144);
  v23 = *(_BYTE *)(a1 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(_BYTE *)(a1 + 152) = v20;
  outlined consume of Environment<(Color, Color)?>.Content(v21, v22, v23);
  v24 = *((_BYTE *)a2 + 168);
  v25 = *(_QWORD *)(a1 + 160);
  v26 = *(_BYTE *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = a2[20];
  *(_BYTE *)(a1 + 168) = v24;
  outlined consume of Environment<Bool>.Content(v25, v26);
  v27 = *((_BYTE *)a2 + 184);
  v28 = *(_QWORD *)(a1 + 176);
  v29 = *(unsigned __int8 *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_BYTE *)(a1 + 184) = v27;
  outlined consume of Environment<AnyShapeStyle?>.Content(v28, v29);
  v30 = *((_BYTE *)a2 + 200);
  v31 = *(_QWORD *)(a1 + 192);
  v32 = *(_BYTE *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_BYTE *)(a1 + 200) = v30;
  outlined consume of Environment<Bool>.Content(v31, v32);
  v33 = *((_BYTE *)a2 + 216);
  v34 = *(_QWORD *)(a1 + 208);
  v35 = *(_BYTE *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_BYTE *)(a1 + 216) = v33;
  outlined consume of Environment<Bool>.Content(v34, v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryLinearGauge(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 217))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 112);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryLinearGauge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 216) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 217) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 217) = 0;
    if (a2)
      *(_QWORD *)(result + 112) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLinearGauge()
{
  return &type metadata for AccessoryLinearGauge;
}

uint64_t associated type witness table accessor for View.Body : View in AccessoryLinearGauge()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of AccessoryLinearGauge(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(unsigned __int8 *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(a1 + 136);
  v11 = *(_BYTE *)(a1 + 152);
  v15 = *(_QWORD *)(a1 + 160);
  v14 = *(_BYTE *)(a1 + 168);
  v17 = *(_QWORD *)(a1 + 176);
  v16 = *(unsigned __int8 *)(a1 + 184);
  v19 = *(_QWORD *)(a1 + 192);
  v18 = *(_BYTE *)(a1 + 200);
  v21 = *(_QWORD *)(a1 + 208);
  v20 = *(_BYTE *)(a1 + 216);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<Bool>.Content(v6, v7);
  swift_bridgeObjectRetain();
  outlined copy of Environment<SceneBridge?>.Content(v8, v9);
  outlined copy of Environment<(Color, Color)?>.Content(v13, v12, v11);
  outlined copy of Environment<Bool>.Content(v15, v14);
  outlined copy of Environment<SceneBridge?>.Content(v17, v16);
  outlined copy of Environment<Bool>.Content(v19, v18);
  outlined copy of Environment<Bool>.Content(v21, v20);
  return a1;
}

uint64_t outlined release of AccessoryLinearGauge(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(unsigned __int8 *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(a1 + 136);
  v11 = *(_BYTE *)(a1 + 152);
  v15 = *(_QWORD *)(a1 + 160);
  v14 = *(_BYTE *)(a1 + 168);
  v17 = *(_QWORD *)(a1 + 176);
  v16 = *(unsigned __int8 *)(a1 + 184);
  v19 = *(_QWORD *)(a1 + 192);
  v18 = *(_BYTE *)(a1 + 200);
  v21 = *(_QWORD *)(a1 + 208);
  v20 = *(_BYTE *)(a1 + 216);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined consume of Environment<Bool>.Content(v6, v7);
  swift_bridgeObjectRelease();
  outlined consume of Environment<AnyShapeStyle?>.Content(v8, v9);
  outlined consume of Environment<(Color, Color)?>.Content(v13, v12, v11);
  outlined consume of Environment<Bool>.Content(v15, v14);
  outlined consume of Environment<AnyShapeStyle?>.Content(v17, v16);
  outlined consume of Environment<Bool>.Content(v19, v18);
  outlined consume of Environment<Bool>.Content(v21, v20);
  return a1;
}

uint64_t sub_1877A5ED0()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 88));
  swift_bridgeObjectRelease();
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(v0 + 136), *(unsigned __int8 *)(v0 + 144));
  outlined consume of Environment<(Color, Color)?>.Content(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_BYTE *)(v0 + 168));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 176), *(_BYTE *)(v0 + 184));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)(v0 + 192), *(unsigned __int8 *)(v0 + 200));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 208), *(_BYTE *)(v0 + 216));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 224), *(_BYTE *)(v0 + 232));
  return swift_deallocObject();
}

double partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in AccessoryLinearGauge.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in AccessoryLinearGauge.body.getter(a1, a2);
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, type metadata accessor for HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>);
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>(a1, &lazy cache variable for type metadata for HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, &lazy cache variable for type metadata for TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>, (void (*)(uint64_t))type metadata accessor for (_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>), &lazy protocol witness table cache variable for type TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)> and conformance TupleView<A>);
}

void type metadata accessor for (_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>))
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>);
    type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>));
  }
}

void type metadata accessor for _ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel, MEMORY[0x1E0CE63B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>);
  }
}

void type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for AccessibilityValueStorage?(255, a3);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>(uint64_t a1)
{
  type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>(a1, &lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)> and conformance TupleView<A>);
}

void type metadata accessor for (ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>))
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>();
    type metadata accessor for GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>));
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>)
  {
    type metadata accessor for _ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>(255, &lazy cache variable for type metadata for _ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, (void (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>);
  }
}

void type metadata accessor for GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)
  {
    type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>(255, &lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)> and conformance TupleView<A>);
    lazy protocol witness table accessor for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>> and conformance ZStack<A>();
    v0 = type metadata accessor for GeometryReader();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>);
  }
}

void type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), unint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, a3, a4);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(a5, a3, a4);
    v9 = type metadata accessor for ZStack();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, type metadata accessor for ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>);
}

void type metadata accessor for ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Circle._Inset, Color>);
}

void type metadata accessor for _ShapeView<Circle._Inset, Color>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<Circle._Inset, Color>)
  {
    lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Circle._Inset, Color>);
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>)
  {
    type metadata accessor for _ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>(255, &lazy cache variable for type metadata for _ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, (void (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>);
  }
}

void type metadata accessor for _ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], MEMORY[0x1E0CE4650]);
    a3();
    lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>();
    v5 = type metadata accessor for _ShapeView();
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>> and conformance ZStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>> and conformance ZStack<A>;
  if (!lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>> and conformance ZStack<A>)
  {
    type metadata accessor for ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>(255, &lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)> and conformance TupleView<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>> and conformance ZStack<A>);
  }
  return result;
}

void type metadata accessor for HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), unint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, a3, a4);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(a5, a3, a4);
    v9 = type metadata accessor for HStack();
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout>, type metadata accessor for HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, MEMORY[0x1E0CE73D0]);
    v3[1] = MEMORY[0x1E0CE1A80];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(_ConditionalContent<ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel, _ForegroundLayerViewModifier>, ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel?, _ForegroundLayerViewModifier>>, ModifiedContent<ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, GeometryReader<ZStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle._Inset, Color>, _FrameLayout>, _OffsetEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Circle, _OpacityShapeStyle<AnyShapeStyle>>, _FrameLayout>, _OffsetEffect>)>>>)>>, _CompositingGroupEffect>, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _ForegroundLayerViewModifier>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLinearGauge.Metrics()
{
  return &type metadata for AccessoryLinearGauge.Metrics;
}

void WindowGroup.init<A, B>(id:for:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a6;
  v16[3] = a7;
  v16[4] = a8;
  v16[5] = a9;
  v16[6] = a10;
  v16[7] = a11;
  v16[8] = a4;
  v16[9] = a5;
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A69D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  WindowGroup.init(id:makeContent:)(v22, v24, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:), v5, a1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>, v26);
  v7 = v26[0];
  v6 = v26[1];
  v9 = v27;
  v8 = v28;
  v10 = v30;
  v21 = v29;
  v14 = v30;
  v16 = v32;
  v17 = v31;
  v15 = v33;
  v23 = v35;
  v25 = v27;
  v18 = v36;
  v19 = v34;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v3;
  v11[3] = v2;
  v11[4] = v4;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v12 + 24) = v11;
  outlined copy of Text?(v7, v6, v9, v8);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v21, v10, v17, v16, v15, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
  outlined copy of Text?(v7, v6, v25, v8);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v21, v14, v17, v16, v15, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)partial apply for implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:));
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v21, v14, v17, v16, v15, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v7, v6, v25, v8);
  *(_QWORD *)v1 = v7;
  *(_QWORD *)(v1 + 8) = v6;
  *(_QWORD *)(v1 + 16) = v25;
  *(_QWORD *)(v1 + 24) = v8;
  *(_QWORD *)(v1 + 32) = v21;
  *(_QWORD *)(v1 + 40) = v14;
  *(_QWORD *)(v1 + 48) = v17;
  *(_QWORD *)(v1 + 56) = v16;
  *(_BYTE *)(v1 + 64) = v15;
  *(_QWORD *)(v1 + 72) = v19;
  *(_QWORD *)(v1 + 80) = v23;
  *(_QWORD *)(v1 + 88) = v20;
  *(_QWORD *)(v1 + 96) = partial apply for implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:);
  *(_QWORD *)(v1 + 104) = v12;
  outlined consume of Text?(v7, v6, v25, v8);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v21, v14, v17, v16, v15, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:));
}

uint64_t sub_1877A6C24()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for PresentedWindowContent()
{
  JUMPOUT(0x18D75FF28);
}

double WindowGroup.init<A, B>(id:presenting:content:)@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WindowGroup.init<A, B>(id:presenting:content:)(a1, a2, a3, a4, (void (*)(_OWORD *__return_ptr))WindowGroup.init<A, B>(id:for:content:));
}

void WindowGroup.init<A, B>(_:id:for:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a10;
  v16[3] = a11;
  v16[4] = a12;
  v16[5] = a13;
  v16[6] = a14;
  v16[7] = a15;
  v16[8] = a8;
  v16[9] = a9;
  type metadata accessor for PresentedWindowContent();
}

{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a10;
  v16[3] = a11;
  v16[4] = a12;
  v16[5] = a13;
  v16[6] = a14;
  v16[7] = a15;
  v16[8] = a8;
  v16[9] = a9;
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A6D14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  WindowGroup.init(_:id:makeContent:)(v19, v21, v18 & 1, v24, v26, v28, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:), v4, v30, a1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>);
  v7 = v30[0];
  v6 = v30[1];
  v9 = v30[2];
  v8 = v31;
  v10 = v33;
  v25 = v32;
  v14 = v33;
  v16 = v35;
  v17 = v34;
  v15 = v36;
  v27 = v38;
  v29 = v31;
  v20 = v39;
  v22 = v37;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v3;
  v11[3] = v5;
  v11[4] = v2;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v12 + 24) = v11;
  outlined copy of Text?(v7, v6, v9, v8);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v25, v10, v17, v16, v15, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v20);
  outlined copy of Text?(v7, v6, v9, v29);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v25, v14, v17, v16, v15, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v25, v14, v17, v16, v15, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v7, v6, v9, v29);
  *(_QWORD *)v1 = v7;
  *(_QWORD *)(v1 + 8) = v6;
  *(_QWORD *)(v1 + 16) = v9;
  *(_QWORD *)(v1 + 24) = v29;
  *(_QWORD *)(v1 + 32) = v25;
  *(_QWORD *)(v1 + 40) = v14;
  *(_QWORD *)(v1 + 48) = v17;
  *(_QWORD *)(v1 + 56) = v16;
  *(_BYTE *)(v1 + 64) = v15;
  *(_QWORD *)(v1 + 72) = v22;
  *(_QWORD *)(v1 + 80) = v27;
  *(_QWORD *)(v1 + 88) = v23;
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = v12;
  outlined consume of Text?(v7, v6, v9, v29);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v25, v14, v17, v16, v15, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

void partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:)()
{
  closure #1 in WindowGroup.init<A, B>(id:for:content:)();
}

double WindowGroup.init<A, B>(_:id:presenting:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return WindowGroup.init<A, B>(_:id:presenting:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, _QWORD))WindowGroup.init<A, B>(_:id:for:content:));
}

uint64_t sub_1877A7074(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  WindowGroup.init(_:id:makeContent:)(v22, v24, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:), v5, v26, a1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>);
  v7 = v26[0];
  v6 = v26[1];
  v8 = v26[2];
  v9 = v27;
  v21 = v26[3];
  v23 = v26[4];
  v15 = v27;
  v16 = v29;
  v17 = v28;
  v10 = v30;
  v14 = v30;
  v25 = v32;
  v18 = v33;
  v19 = v31;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v3;
  v11[3] = v2;
  v11[4] = v4;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v12 + 24) = v11;
  outlined copy of Text?(v7, v6, v8, v21);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v9, v17, v16, v10, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
  outlined copy of Text?(v7, v6, v8, v21);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v15, v17, v16, v14, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v15, v17, v16, v14, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v7, v6, v8, v21);
  *(_QWORD *)v1 = v7;
  *(_QWORD *)(v1 + 8) = v6;
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)(v1 + 24) = v21;
  *(_QWORD *)(v1 + 32) = v23;
  *(_QWORD *)(v1 + 40) = v15;
  *(_QWORD *)(v1 + 48) = v17;
  *(_QWORD *)(v1 + 56) = v16;
  *(_BYTE *)(v1 + 64) = v14;
  *(_QWORD *)(v1 + 72) = v19;
  *(_QWORD *)(v1 + 80) = v25;
  *(_QWORD *)(v1 + 88) = v20;
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = v12;
  outlined consume of Text?(v7, v6, v8, v21);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v15, v17, v16, v14, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

double WindowGroup.init<A, B>(_:id:presenting:content:)@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return WindowGroup.init<A, B>(_:id:presenting:content:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(_OWORD *__return_ptr))WindowGroup.init<A, B>(_:id:for:content:));
}

void WindowGroup.init<A, B, C>(_:id:for:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v31 = a8;
  v25 = a6;
  v24 = a5;
  v28 = a4;
  v29 = a2;
  v30 = a3;
  v27 = a1;
  v23 = a12;
  v15 = *(_QWORD *)(a7 - 8);
  v16 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v15 + 16))((char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  v18 = (_QWORD *)swift_allocObject();
  v19 = v31;
  v18[2] = a7;
  v18[3] = v19;
  v18[4] = a9;
  v18[5] = a10;
  v26 = a11;
  v20 = v23;
  v18[6] = a11;
  v18[7] = v20;
  v18[8] = a13;
  v18[9] = a14;
  v21 = v25;
  v18[10] = v24;
  v18[11] = v21;
  v32 = v19;
  v33 = a9;
  v34 = a11;
  v35 = v20;
  v36 = a13;
  v37 = a14;
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A7428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  WindowGroup.init<A>(_:id:makeContent:)(v5, *(_QWORD *)(v7 - 224), *(_QWORD *)(v7 - 216), (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:), v6, a1, v1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>, (_QWORD *)(v7 - 200));
  (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v7 - 240), v1);
  v9 = *(_QWORD *)(v7 - 200);
  v8 = *(_QWORD *)(v7 - 192);
  v11 = *(_QWORD *)(v7 - 184);
  v10 = *(_QWORD *)(v7 - 176);
  *(_QWORD *)(v7 - 216) = v11;
  v13 = *(_QWORD *)(v7 - 168);
  v12 = *(_QWORD *)(v7 - 160);
  *(_QWORD *)(v7 - 320) = v13;
  *(_QWORD *)(v7 - 288) = *(_QWORD *)(v7 - 152);
  *(_QWORD *)(v7 - 272) = *(_QWORD *)(v7 - 144);
  *(_DWORD *)(v7 - 276) = *(unsigned __int8 *)(v7 - 136);
  *(_QWORD *)(v7 - 240) = *(_QWORD *)(v7 - 128);
  *(_QWORD *)(v7 - 224) = *(_QWORD *)(v7 - 120);
  *(_QWORD *)(v7 - 256) = *(_QWORD *)(v7 - 104);
  *(_QWORD *)(v7 - 264) = *(_QWORD *)(v7 - 96);
  v14 = (_QWORD *)swift_allocObject();
  v15 = *(_QWORD *)(v7 - 248);
  v14[2] = *(_QWORD *)(v7 - 208);
  v14[3] = v15;
  v14[4] = v3;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v16 + 24) = v14;
  *(_QWORD *)(v7 - 296) = v8;
  v17 = v11;
  v18 = v10;
  *(_QWORD *)(v7 - 304) = v10;
  outlined copy of Text?(v9, v8, v17, v10);
  v19 = v13;
  v20 = *(_QWORD *)(v7 - 288);
  v21 = *(_QWORD *)(v7 - 272);
  v22 = *(_DWORD *)(v7 - 276);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v19, v12, v20, v21, v22, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v7 - 256));
  outlined copy of Text?(v9, v8, *(_QWORD *)(v7 - 216), v18);
  v23 = *(_QWORD *)(v7 - 320);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v12, v20, v21, v22, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v7 - 208) = v16;
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v12, v20, v21, v22, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  v24 = *(_QWORD *)(v7 - 296);
  v25 = *(_QWORD *)(v7 - 216);
  v26 = *(_QWORD *)(v7 - 304);
  outlined consume of Text?(v9, v24, v25, v26);
  *(_QWORD *)v2 = v9;
  *(_QWORD *)(v2 + 8) = v24;
  *(_QWORD *)(v2 + 16) = v25;
  *(_QWORD *)(v2 + 24) = v26;
  v27 = v25;
  *(_QWORD *)(v2 + 32) = v23;
  *(_QWORD *)(v2 + 40) = v12;
  *(_QWORD *)(v2 + 48) = v20;
  *(_QWORD *)(v2 + 56) = v21;
  *(_BYTE *)(v2 + 64) = v22;
  v28 = *(_QWORD *)(v7 - 224);
  *(_QWORD *)(v2 + 72) = *(_QWORD *)(v7 - 240);
  *(_QWORD *)(v2 + 80) = v28;
  *(_QWORD *)(v2 + 88) = *(_QWORD *)(v7 - 232);
  *(_QWORD *)(v2 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v2 + 104) = *(_QWORD *)(v7 - 208);
  outlined consume of Text?(v9, v24, v27, v26);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v12, v20, v21, v22, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

uint64_t sub_1877A76EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void))
{
  if ((a5 & 1) == 0)
    a6();
  return swift_retain();
}

uint64_t outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void))
{
  if ((a5 & 1) == 0)
    a6();
  return swift_release();
}

double WindowGroup.init<A, B, C>(_:id:presenting:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  return WindowGroup.init<A, B, C>(_:id:presenting:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))WindowGroup.init<A, B, C>(_:id:for:content:));
}

void WindowGroup.init<A, B>(for:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  v16[6] = a8;
  v16[7] = a9;
  v16[8] = a2;
  v16[9] = a3;
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A7834(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  WindowGroup.init(makeContent:)((uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:), v5, a1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>, v24);
  v7 = v24[0];
  v6 = v24[1];
  v9 = v25;
  v8 = v26;
  v10 = v28;
  v21 = v27;
  v14 = v28;
  v16 = v30;
  v17 = v29;
  v15 = v31;
  v22 = v33;
  v23 = v25;
  v18 = v34;
  v19 = v32;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v4;
  v11[3] = v3;
  v11[4] = v2;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v12 + 24) = v11;
  outlined copy of Text?(v7, v6, v9, v8);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v21, v10, v17, v16, v15, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
  outlined copy of Text?(v7, v6, v23, v8);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v21, v14, v17, v16, v15, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v21, v14, v17, v16, v15, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v7, v6, v23, v8);
  *(_QWORD *)v1 = v7;
  *(_QWORD *)(v1 + 8) = v6;
  *(_QWORD *)(v1 + 16) = v23;
  *(_QWORD *)(v1 + 24) = v8;
  *(_QWORD *)(v1 + 32) = v21;
  *(_QWORD *)(v1 + 40) = v14;
  *(_QWORD *)(v1 + 48) = v17;
  *(_QWORD *)(v1 + 56) = v16;
  *(_BYTE *)(v1 + 64) = v15;
  *(_QWORD *)(v1 + 72) = v19;
  *(_QWORD *)(v1 + 80) = v22;
  *(_QWORD *)(v1 + 88) = v20;
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = v12;
  outlined consume of Text?(v7, v6, v23, v8);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v21, v14, v17, v16, v15, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

void WindowGroup.init<A, B>(presenting:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WindowGroup.init<A, B>(for:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

__n128 sub_1877A7AA8()
{
  uint64_t v0;
  __n128 result;
  __n128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  result = v2;
  *(__n128 *)v0 = v2;
  *(_OWORD *)(v0 + 16) = v3;
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = v5;
  *(_BYTE *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 72) = v7;
  *(_OWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v0 + 104) = v9;
  return result;
}

void WindowGroup.init<A, B>(_:for:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a8;
  v16[3] = a9;
  v16[4] = a10;
  v16[5] = a11;
  v16[6] = a12;
  v16[7] = a13;
  v16[8] = a6;
  v16[9] = a7;
  type metadata accessor for PresentedWindowContent();
}

{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a8;
  v16[3] = a9;
  v16[4] = a10;
  v16[5] = a11;
  v16[6] = a12;
  v16[7] = a13;
  v16[8] = a6;
  v16[9] = a7;
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A7B74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  WindowGroup.init(_:makeContent:)(v21, v24, v19 & 1, v26, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:), v4, a1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>, v28);
  v7 = v28[0];
  v6 = v28[1];
  v9 = v28[2];
  v8 = v29;
  v10 = v30;
  v14 = v30;
  v17 = v32;
  v18 = v31;
  v16 = v33;
  v15 = v34;
  v25 = v36;
  v27 = v29;
  v20 = v37;
  v22 = v35;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v5;
  v11[3] = v3;
  v11[4] = v2;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v12 + 24) = v11;
  outlined copy of Text?(v7, v6, v9, v8);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v10, v18, v17, v16, v15, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v20);
  outlined copy of Text?(v7, v6, v9, v27);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v14, v18, v17, v16, v15, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v14, v18, v17, v16, v15, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v7, v6, v9, v27);
  *(_QWORD *)v1 = v7;
  *(_QWORD *)(v1 + 8) = v6;
  *(_QWORD *)(v1 + 16) = v9;
  *(_QWORD *)(v1 + 24) = v27;
  *(_QWORD *)(v1 + 32) = v14;
  *(_QWORD *)(v1 + 40) = v18;
  *(_QWORD *)(v1 + 48) = v17;
  *(_QWORD *)(v1 + 56) = v16;
  *(_BYTE *)(v1 + 64) = v15;
  *(_QWORD *)(v1 + 72) = v22;
  *(_QWORD *)(v1 + 80) = v25;
  *(_QWORD *)(v1 + 88) = v23;
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = v12;
  outlined consume of Text?(v7, v6, v9, v27);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v14, v18, v17, v16, v15, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

void WindowGroup.init<A, B>(_:presenting:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  WindowGroup.init<A, B>(_:for:content:)(a1, a2, a3 & 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

__n128 sub_1877A7E1C()
{
  uint64_t v0;
  __n128 result;
  __n128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  result = v2;
  *(__n128 *)v0 = v2;
  *(_OWORD *)(v0 + 16) = v3;
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = v5;
  *(_BYTE *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 72) = v7;
  *(_OWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v0 + 104) = v9;
  return result;
}

uint64_t sub_1877A7EEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  WindowGroup.init(_:makeContent:)((uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:), v4, a1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>, v24);
  v6 = v24[0];
  v5 = v24[1];
  v8 = v24[2];
  v7 = v25;
  v9 = v26;
  v13 = v26;
  v16 = v28;
  v17 = v27;
  v15 = v29;
  v14 = v30;
  v22 = v32;
  v23 = v25;
  v19 = v33;
  v20 = v31;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v18;
  v10[3] = v3;
  v10[4] = v2;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v11 + 24) = v10;
  outlined copy of Text?(v6, v5, v8, v7);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v9, v17, v16, v15, v14, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
  outlined copy of Text?(v6, v5, v8, v23);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v13, v17, v16, v15, v14, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v13, v17, v16, v15, v14, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v6, v5, v8, v23);
  *(_QWORD *)v1 = v6;
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)(v1 + 24) = v23;
  *(_QWORD *)(v1 + 32) = v13;
  *(_QWORD *)(v1 + 40) = v17;
  *(_QWORD *)(v1 + 48) = v16;
  *(_QWORD *)(v1 + 56) = v15;
  *(_BYTE *)(v1 + 64) = v14;
  *(_QWORD *)(v1 + 72) = v20;
  *(_QWORD *)(v1 + 80) = v22;
  *(_QWORD *)(v1 + 88) = v21;
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = v11;
  outlined consume of Text?(v6, v5, v8, v23);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v13, v17, v16, v15, v14, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

void closure #1 in WindowGroup.init<A, B>(id:for:content:)()
{
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A81A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[12];

  static ViewBuilder.buildExpression<A>(_:)(v8, a1, &protocol witness table for PresentedWindowContent<A, B>);
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  swift_release();
  v8[0] = v4;
  v8[1] = v5;
  v8[2] = v6;
  v8[3] = v7;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v8, a1, v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
  return swift_release();
}

void WindowGroup.init<A, B>(_:presenting:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  WindowGroup.init<A, B>(_:for:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

__n128 sub_1877A8258()
{
  uint64_t v0;
  __n128 result;
  __n128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  result = v2;
  *(__n128 *)v0 = v2;
  *(_OWORD *)(v0 + 16) = v3;
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = v5;
  *(_BYTE *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 72) = v7;
  *(_OWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v0 + 104) = v9;
  return result;
}

void WindowGroup.init<A, B, C>(_:for:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v27 = a2;
  v28 = a4;
  v26 = a3;
  v29 = a1;
  v24 = a10;
  v30 = a9;
  v16 = *(_QWORD *)(a5 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v16 + 16))((char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a5;
  v19[3] = a6;
  v25 = a6;
  v19[4] = a7;
  v19[5] = a8;
  v20 = v30;
  v21 = v24;
  v19[6] = v30;
  v19[7] = v21;
  v19[8] = a11;
  v19[9] = a12;
  v22 = v28;
  v19[10] = v26;
  v19[11] = v22;
  v31 = a6;
  v32 = a7;
  v33 = v20;
  v34 = v21;
  v35 = a11;
  v36 = a12;
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A8390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  WindowGroup.init<A>(_:makeContent:)(v5, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:), v6, a1, v2, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>, (_QWORD *)(v7 - 200));
  (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v7 - 216), v2);
  v9 = *(_QWORD *)(v7 - 200);
  v8 = *(_QWORD *)(v7 - 192);
  v11 = *(_QWORD *)(v7 - 184);
  v10 = *(_QWORD *)(v7 - 176);
  *(_QWORD *)(v7 - 216) = v11;
  v13 = *(_QWORD *)(v7 - 168);
  v12 = *(_QWORD *)(v7 - 160);
  *(_QWORD *)(v7 - 320) = v13;
  *(_QWORD *)(v7 - 288) = *(_QWORD *)(v7 - 152);
  *(_QWORD *)(v7 - 272) = *(_QWORD *)(v7 - 144);
  *(_DWORD *)(v7 - 276) = *(unsigned __int8 *)(v7 - 136);
  *(_QWORD *)(v7 - 240) = *(_QWORD *)(v7 - 128);
  *(_QWORD *)(v7 - 224) = *(_QWORD *)(v7 - 120);
  *(_QWORD *)(v7 - 256) = *(_QWORD *)(v7 - 104);
  *(_QWORD *)(v7 - 264) = *(_QWORD *)(v7 - 96);
  v14 = (_QWORD *)swift_allocObject();
  v15 = *(_QWORD *)(v7 - 208);
  v14[2] = *(_QWORD *)(v7 - 248);
  v14[3] = v15;
  v14[4] = v3;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v16 + 24) = v14;
  v17 = v8;
  *(_QWORD *)(v7 - 296) = v8;
  v18 = v11;
  v19 = v10;
  *(_QWORD *)(v7 - 304) = v10;
  outlined copy of Text?(v9, v8, v18, v10);
  v20 = v13;
  v21 = *(_QWORD *)(v7 - 288);
  v22 = *(_QWORD *)(v7 - 272);
  LODWORD(v8) = *(_DWORD *)(v7 - 276);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v20, v12, v21, v22, v8, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v7 - 256));
  outlined copy of Text?(v9, v17, *(_QWORD *)(v7 - 216), v19);
  v23 = *(_QWORD *)(v7 - 320);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v12, v21, v22, v8, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v7 - 208) = v16;
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v12, v21, v22, v8, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  v24 = *(_QWORD *)(v7 - 296);
  v25 = *(_QWORD *)(v7 - 216);
  v26 = *(_QWORD *)(v7 - 304);
  outlined consume of Text?(v9, v24, v25, v26);
  *(_QWORD *)v1 = v9;
  *(_QWORD *)(v1 + 8) = v24;
  *(_QWORD *)(v1 + 16) = v25;
  *(_QWORD *)(v1 + 24) = v26;
  v27 = v25;
  *(_QWORD *)(v1 + 32) = v23;
  *(_QWORD *)(v1 + 40) = v12;
  *(_QWORD *)(v1 + 48) = v21;
  *(_QWORD *)(v1 + 56) = v22;
  *(_BYTE *)(v1 + 64) = v8;
  v28 = *(_QWORD *)(v7 - 224);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v7 - 240);
  *(_QWORD *)(v1 + 80) = v28;
  *(_QWORD *)(v1 + 88) = *(_QWORD *)(v7 - 232);
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = *(_QWORD *)(v7 - 208);
  outlined consume of Text?(v9, v24, v27, v26);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v12, v21, v22, v8, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

void closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:)()
{
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A8694(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[12];

  static ViewBuilder.buildExpression<A>(_:)(v8, a1, &protocol witness table for PresentedWindowContent<A, B>);
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  swift_release();
  v8[0] = v4;
  v8[1] = v5;
  v8[2] = v6;
  v8[3] = v7;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v8, a1, v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
  return swift_release();
}

void partial apply for closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:)()
{
  closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:)();
}

void WindowGroup.init<A, B, C>(_:presenting:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a7;
  v24 = a8;
  v22 = a6;
  v21 = a9;
  v16 = *(_QWORD *)(a5 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, v20, v17);
  WindowGroup.init<A, B, C>(_:for:content:)((uint64_t)v19, a2, a3, a4, a5, v22, v23, v24, v21, *((uint64_t *)&v21 + 1), a10, a11);
}

__n128 sub_1877A8814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  v5 = *(_BYTE *)(v4 - 144);
  v6 = *(_QWORD *)(v4 - 104);
  result = *(__n128 *)(v4 - 208);
  v8 = *(_OWORD *)(v4 - 192);
  v9 = *(_OWORD *)(v4 - 176);
  v10 = *(_OWORD *)(v4 - 160);
  v11 = *(_OWORD *)(v4 - 136);
  v12 = *(_OWORD *)(v4 - 120);
  *(__n128 *)v0 = result;
  *(_OWORD *)(v0 + 16) = v8;
  *(_OWORD *)(v0 + 32) = v9;
  *(_OWORD *)(v0 + 48) = v10;
  *(_BYTE *)(v0 + 64) = v5;
  *(_OWORD *)(v0 + 72) = v11;
  *(_OWORD *)(v0 + 88) = v12;
  *(_QWORD *)(v0 + 104) = v6;
  return result;
}

void WindowGroup.init<A, B>(id:for:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a8;
  v16[3] = a9;
  v16[4] = a10;
  v16[5] = a11;
  v16[6] = a12;
  v16[7] = a13;
  v16[8] = a4;
  v16[9] = a5;
  v16[10] = a6;
  v16[11] = a7;
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A8910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  WindowGroup.init(id:makeContent:)(v22, v24, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:), v4, a1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>, v26);
  v6 = v26[0];
  v5 = v26[1];
  v8 = v26[2];
  v7 = v27;
  v9 = v28;
  v13 = v28;
  v16 = v30;
  v17 = v29;
  v15 = v31;
  v14 = v32;
  v23 = v34;
  v25 = v27;
  v19 = v35;
  v20 = v33;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v18;
  v10[3] = v3;
  v10[4] = v2;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v11 + 24) = v10;
  outlined copy of Text?(v6, v5, v8, v7);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v9, v17, v16, v15, v14, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
  outlined copy of Text?(v6, v5, v8, v25);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v13, v17, v16, v15, v14, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v13, v17, v16, v15, v14, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v6, v5, v8, v25);
  *(_QWORD *)v1 = v6;
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)(v1 + 24) = v25;
  *(_QWORD *)(v1 + 32) = v13;
  *(_QWORD *)(v1 + 40) = v17;
  *(_QWORD *)(v1 + 48) = v16;
  *(_QWORD *)(v1 + 56) = v15;
  *(_BYTE *)(v1 + 64) = v14;
  *(_QWORD *)(v1 + 72) = v20;
  *(_QWORD *)(v1 + 80) = v23;
  *(_QWORD *)(v1 + 88) = v21;
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = v11;
  outlined consume of Text?(v6, v5, v8, v25);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v13, v17, v16, v15, v14, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

void WindowGroup.init<A, B>(id:presenting:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  WindowGroup.init<A, B>(id:for:content:defaultValue:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

__n128 sub_1877A8BB0()
{
  uint64_t v0;
  __n128 result;
  __n128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  result = v2;
  *(__n128 *)v0 = v2;
  *(_OWORD *)(v0 + 16) = v3;
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = v5;
  *(_BYTE *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 72) = v7;
  *(_OWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v0 + 104) = v9;
  return result;
}

void WindowGroup.init<A, B>(_:id:for:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a11;
  *(_QWORD *)(v17 + 24) = a12;
  *(_QWORD *)(v17 + 32) = a13;
  *(_QWORD *)(v17 + 40) = a14;
  *(_QWORD *)(v17 + 48) = a15;
  *(_QWORD *)(v17 + 56) = a16;
  *(_QWORD *)(v17 + 64) = a8;
  *(_OWORD *)(v17 + 72) = a9;
  *(_QWORD *)(v17 + 88) = a10;
  type metadata accessor for PresentedWindowContent();
}

{
  uint64_t v17;

  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a11;
  *(_QWORD *)(v17 + 24) = a12;
  *(_QWORD *)(v17 + 32) = a13;
  *(_QWORD *)(v17 + 40) = a14;
  *(_QWORD *)(v17 + 48) = a15;
  *(_QWORD *)(v17 + 56) = a16;
  *(_QWORD *)(v17 + 64) = a8;
  *(_OWORD *)(v17 + 72) = a9;
  *(_QWORD *)(v17 + 88) = a10;
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A8C98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  WindowGroup.init(_:id:makeContent:)(v18, v20, v16 & 1, v22, v25, v27, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:), v4, v29, a1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>);
  v6 = v29[0];
  v5 = v29[1];
  v8 = v29[2];
  v7 = v29[3];
  v9 = v30;
  v13 = v30;
  v15 = v32;
  v14 = v33;
  v26 = v35;
  v28 = v29[4];
  v21 = v36;
  v23 = v34;
  v17 = v31;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v2;
  v10[3] = v3;
  v10[4] = v19;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v11 + 24) = v10;
  outlined copy of Text?(v6, v5, v8, v7);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v9, v17, v15, v14, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v21);
  outlined copy of Text?(v6, v5, v8, v7);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v13, v17, v15, v14, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v13, v17, v15, v14, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v6, v5, v8, v7);
  *(_QWORD *)v1 = v6;
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)(v1 + 24) = v7;
  *(_QWORD *)(v1 + 32) = v28;
  *(_QWORD *)(v1 + 40) = v13;
  *(_QWORD *)(v1 + 48) = v17;
  *(_QWORD *)(v1 + 56) = v15;
  *(_BYTE *)(v1 + 64) = v14;
  *(_QWORD *)(v1 + 72) = v23;
  *(_QWORD *)(v1 + 80) = v26;
  *(_QWORD *)(v1 + 88) = v24;
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = v11;
  outlined consume of Text?(v6, v5, v8, v7);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v28, v13, v17, v15, v14, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

void partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:)()
{
  uint64_t *v0;

  closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:)(v0[8], v0[9], v0[10], v0[11], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

void WindowGroup.init<A, B>(_:id:presenting:content:defaultValue:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  WindowGroup.init<A, B>(_:id:for:content:defaultValue:)(a1, a2, a3 & 1, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

__n128 sub_1877A8F8C()
{
  uint64_t v0;
  __n128 result;
  __n128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  result = v2;
  *(__n128 *)v0 = v2;
  *(_OWORD *)(v0 + 16) = v3;
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = v5;
  *(_BYTE *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 72) = v7;
  *(_OWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v0 + 104) = v9;
  return result;
}

uint64_t sub_1877A906C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  WindowGroup.init(_:id:makeContent:)(v22, v24, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:), v5, v26, a1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>);
  v7 = v26[0];
  v6 = v26[1];
  v9 = v26[2];
  v8 = v27;
  v10 = v29;
  v21 = v28;
  v14 = v29;
  v16 = v31;
  v17 = v30;
  v15 = v32;
  v23 = v34;
  v25 = v27;
  v18 = v35;
  v19 = v33;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v3;
  v11[3] = v2;
  v11[4] = v4;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v12 + 24) = v11;
  outlined copy of Text?(v7, v6, v9, v8);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v21, v10, v17, v16, v15, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
  outlined copy of Text?(v7, v6, v9, v25);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v21, v14, v17, v16, v15, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v21, v14, v17, v16, v15, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v7, v6, v9, v25);
  *(_QWORD *)v1 = v7;
  *(_QWORD *)(v1 + 8) = v6;
  *(_QWORD *)(v1 + 16) = v9;
  *(_QWORD *)(v1 + 24) = v25;
  *(_QWORD *)(v1 + 32) = v21;
  *(_QWORD *)(v1 + 40) = v14;
  *(_QWORD *)(v1 + 48) = v17;
  *(_QWORD *)(v1 + 56) = v16;
  *(_BYTE *)(v1 + 64) = v15;
  *(_QWORD *)(v1 + 72) = v19;
  *(_QWORD *)(v1 + 80) = v23;
  *(_QWORD *)(v1 + 88) = v20;
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = v12;
  outlined consume of Text?(v7, v6, v9, v25);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v21, v14, v17, v16, v15, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

void WindowGroup.init<A, B>(_:id:presenting:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  WindowGroup.init<A, B>(_:id:for:content:defaultValue:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

__n128 sub_1877A9314()
{
  uint64_t v0;
  __n128 result;
  __n128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  result = v2;
  *(__n128 *)v0 = v2;
  *(_OWORD *)(v0 + 16) = v3;
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = v5;
  *(_BYTE *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 72) = v7;
  *(_OWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v0 + 104) = v9;
  return result;
}

void WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v28 = a8;
  v27 = a7;
  v26 = a6;
  v25 = a5;
  v31 = a4;
  v32 = a2;
  v30 = a1;
  v35 = a14;
  v33 = a3;
  v34 = a13;
  v16 = *(_QWORD *)(a9 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v16 + 16))((char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a9;
  v19[3] = a10;
  v29 = a10;
  v19[4] = a11;
  v19[5] = a12;
  v21 = v34;
  v20 = v35;
  v19[6] = v34;
  v19[7] = v20;
  v19[8] = a15;
  v19[9] = a16;
  v22 = v26;
  v19[10] = v25;
  v19[11] = v22;
  v23 = v28;
  v19[12] = v27;
  v19[13] = v23;
  v36 = a10;
  v37 = a11;
  v38 = v21;
  v39 = v20;
  v40 = a15;
  v41 = a16;
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A946C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  WindowGroup.init<A>(_:id:makeContent:)(v5, *(_QWORD *)(v6 - 232), *(_QWORD *)(v6 - 224), (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:), v2, a1, v3, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>, (_QWORD *)(v6 - 200));
  (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v6 - 248), v3);
  v8 = *(_QWORD *)(v6 - 200);
  v7 = *(_QWORD *)(v6 - 192);
  v10 = *(_QWORD *)(v6 - 184);
  v9 = *(_QWORD *)(v6 - 176);
  *(_QWORD *)(v6 - 224) = v10;
  v12 = *(_QWORD *)(v6 - 168);
  v11 = *(_QWORD *)(v6 - 160);
  *(_QWORD *)(v6 - 320) = v12;
  *(_QWORD *)(v6 - 296) = *(_QWORD *)(v6 - 152);
  *(_QWORD *)(v6 - 280) = *(_QWORD *)(v6 - 144);
  *(_DWORD *)(v6 - 288) = *(unsigned __int8 *)(v6 - 136);
  *(_QWORD *)(v6 - 248) = *(_QWORD *)(v6 - 128);
  *(_QWORD *)(v6 - 232) = *(_QWORD *)(v6 - 120);
  *(_QWORD *)(v6 - 264) = *(_QWORD *)(v6 - 104);
  *(_QWORD *)(v6 - 272) = *(_QWORD *)(v6 - 96);
  v13 = (_QWORD *)swift_allocObject();
  v14 = *(_QWORD *)(v6 - 216);
  v13[2] = *(_QWORD *)(v6 - 256);
  v13[3] = v14;
  v13[4] = *(_QWORD *)(v6 - 208);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v15 + 24) = v13;
  *(_QWORD *)(v6 - 304) = v7;
  v16 = v10;
  v17 = v9;
  *(_QWORD *)(v6 - 312) = v9;
  outlined copy of Text?(v8, v7, v16, v9);
  v18 = v12;
  v19 = *(_QWORD *)(v6 - 296);
  v20 = *(_QWORD *)(v6 - 280);
  v21 = *(_DWORD *)(v6 - 288);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v18, v11, v19, v20, v21, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v6 - 264));
  outlined copy of Text?(v8, v7, *(_QWORD *)(v6 - 224), v17);
  v22 = *(_QWORD *)(v6 - 320);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v22, v11, v19, v20, v21, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v6 - 208) = v15;
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v22, v11, v19, v20, v21, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  v23 = *(_QWORD *)(v6 - 304);
  v24 = *(_QWORD *)(v6 - 224);
  v25 = *(_QWORD *)(v6 - 312);
  outlined consume of Text?(v8, v23, v24, v25);
  *(_QWORD *)v1 = v8;
  *(_QWORD *)(v1 + 8) = v23;
  *(_QWORD *)(v1 + 16) = v24;
  *(_QWORD *)(v1 + 24) = v25;
  v26 = v24;
  *(_QWORD *)(v1 + 32) = v22;
  *(_QWORD *)(v1 + 40) = v11;
  *(_QWORD *)(v1 + 48) = v19;
  *(_QWORD *)(v1 + 56) = v20;
  *(_BYTE *)(v1 + 64) = v21;
  v27 = *(_QWORD *)(v6 - 232);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v6 - 248);
  *(_QWORD *)(v1 + 80) = v27;
  *(_QWORD *)(v1 + 88) = *(_QWORD *)(v6 - 240);
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = *(_QWORD *)(v6 - 208);
  outlined consume of Text?(v8, v23, v26, v25);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v22, v11, v19, v20, v21, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

void WindowGroup.init<A, B, C>(_:id:presenting:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, __int128 a11, __int128 a12, uint64_t a13)
{
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a7;
  v27 = a8;
  v25 = a6;
  v24 = a10;
  v23 = a11;
  v22 = a12;
  v18 = *(_QWORD *)(a9 - 8);
  v19 = MEMORY[0x1E0C80A78](a1, a2);
  v21 = (char *)&v22 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, a1, a9, v19);
  WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:)((uint64_t)v21, a2, a3, a4, a5, v25, v26, v27, a9, v24, *((uint64_t *)&v24 + 1), v23, *((uint64_t *)&v23 + 1), v22, *((uint64_t *)&v22 + 1), a13);
}

__n128 sub_1877A983C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  v5 = *(_BYTE *)(v4 - 144);
  v6 = *(_QWORD *)(v4 - 104);
  result = *(__n128 *)(v4 - 208);
  v8 = *(_OWORD *)(v4 - 192);
  v9 = *(_OWORD *)(v4 - 176);
  v10 = *(_OWORD *)(v4 - 160);
  v11 = *(_OWORD *)(v4 - 136);
  v12 = *(_OWORD *)(v4 - 120);
  *(__n128 *)v0 = result;
  *(_OWORD *)(v0 + 16) = v8;
  *(_OWORD *)(v0 + 32) = v9;
  *(_OWORD *)(v0 + 48) = v10;
  *(_BYTE *)(v0 + 64) = v5;
  *(_OWORD *)(v0 + 72) = v11;
  *(_OWORD *)(v0 + 88) = v12;
  *(_QWORD *)(v0 + 104) = v6;
  return result;
}

void WindowGroup.init<A, B>(for:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a6;
  v16[3] = a7;
  v16[4] = a8;
  v16[5] = a9;
  v16[6] = a10;
  v16[7] = a11;
  v16[8] = a2;
  v16[9] = a3;
  v16[10] = a4;
  v16[11] = a5;
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A9938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  WindowGroup.init(makeContent:)((uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:), v4, a1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>, v24);
  v6 = v24[0];
  v5 = v24[1];
  v8 = v24[2];
  v7 = v25;
  v9 = v26;
  v13 = v26;
  v16 = v28;
  v17 = v27;
  v15 = v29;
  v14 = v30;
  v22 = v32;
  v23 = v25;
  v19 = v33;
  v20 = v31;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v3;
  v10[3] = v18;
  v10[4] = v2;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v11 + 24) = v10;
  outlined copy of Text?(v6, v5, v8, v7);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v9, v17, v16, v15, v14, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
  outlined copy of Text?(v6, v5, v8, v23);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v13, v17, v16, v15, v14, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v13, v17, v16, v15, v14, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v6, v5, v8, v23);
  *(_QWORD *)v1 = v6;
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)(v1 + 24) = v23;
  *(_QWORD *)(v1 + 32) = v13;
  *(_QWORD *)(v1 + 40) = v17;
  *(_QWORD *)(v1 + 48) = v16;
  *(_QWORD *)(v1 + 56) = v15;
  *(_BYTE *)(v1 + 64) = v14;
  *(_QWORD *)(v1 + 72) = v20;
  *(_QWORD *)(v1 + 80) = v22;
  *(_QWORD *)(v1 + 88) = v21;
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = v11;
  outlined consume of Text?(v6, v5, v8, v23);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v13, v17, v16, v15, v14, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

double WindowGroup.init<A, B>(presenting:content:defaultValue:)@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return WindowGroup.init<A, B>(id:presenting:content:)(a1, a2, a3, a4, (void (*)(_OWORD *__return_ptr))WindowGroup.init<A, B>(for:content:defaultValue:));
}

double WindowGroup.init<A, B>(id:presenting:content:)@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_OWORD *__return_ptr))
{
  char v6;
  uint64_t v7;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  a5(v14);
  v6 = v15;
  v7 = v18;
  result = *(double *)v14;
  v9 = v14[1];
  v10 = v14[2];
  v11 = v14[3];
  v12 = v16;
  v13 = v17;
  *(_OWORD *)a1 = v14[0];
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v11;
  *(_BYTE *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 104) = v7;
  return result;
}

void WindowGroup.init<A, B>(_:for:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a10;
  v16[3] = a11;
  v16[4] = a12;
  v16[5] = a13;
  v16[6] = a14;
  v16[7] = a15;
  v16[8] = a6;
  v16[9] = a7;
  v16[10] = a8;
  v16[11] = a9;
  type metadata accessor for PresentedWindowContent();
}

{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a10;
  v16[3] = a11;
  v16[4] = a12;
  v16[5] = a13;
  v16[6] = a14;
  v16[7] = a15;
  v16[8] = a6;
  v16[9] = a7;
  v16[10] = a8;
  v16[11] = a9;
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877A9CDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  WindowGroup.init(_:makeContent:)(v22, v24, v19 & 1, v26, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:), v4, a1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>, v28);
  v6 = v28[0];
  v5 = v28[1];
  v7 = v28[2];
  v8 = v29;
  v23 = v28[3];
  v25 = v28[4];
  v14 = v29;
  v15 = v31;
  v16 = v30;
  v9 = v32;
  v13 = v32;
  v27 = v34;
  v18 = v35;
  v20 = v33;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v3;
  v10[3] = v2;
  v10[4] = v17;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v11 + 24) = v10;
  outlined copy of Text?(v6, v5, v7, v23);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v25, v8, v16, v15, v9, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
  outlined copy of Text?(v6, v5, v7, v23);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v25, v14, v16, v15, v13, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v25, v14, v16, v15, v13, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v6, v5, v7, v23);
  *(_QWORD *)v1 = v6;
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)(v1 + 24) = v23;
  *(_QWORD *)(v1 + 32) = v25;
  *(_QWORD *)(v1 + 40) = v14;
  *(_QWORD *)(v1 + 48) = v16;
  *(_QWORD *)(v1 + 56) = v15;
  *(_BYTE *)(v1 + 64) = v13;
  *(_QWORD *)(v1 + 72) = v20;
  *(_QWORD *)(v1 + 80) = v27;
  *(_QWORD *)(v1 + 88) = v21;
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = v11;
  outlined consume of Text?(v6, v5, v7, v23);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v25, v14, v16, v15, v13, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

double WindowGroup.init<A, B>(_:presenting:content:defaultValue:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return WindowGroup.init<A, B>(_:id:presenting:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t, _QWORD))WindowGroup.init<A, B>(_:for:content:defaultValue:));
}

double WindowGroup.init<A, B>(_:id:presenting:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(_OWORD *__return_ptr, uint64_t, uint64_t, _QWORD))
{
  char v13;
  uint64_t v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[4];
  char v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  a12(v21, a1, a2, a3 & 1);
  v13 = v22;
  v14 = v25;
  result = *(double *)v21;
  v16 = v21[1];
  v17 = v21[2];
  v18 = v21[3];
  v19 = v23;
  v20 = v24;
  *(_OWORD *)a4 = v21[0];
  *(_OWORD *)(a4 + 16) = v16;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v18;
  *(_BYTE *)(a4 + 64) = v13;
  *(_OWORD *)(a4 + 72) = v19;
  *(_OWORD *)(a4 + 88) = v20;
  *(_QWORD *)(a4 + 104) = v14;
  return result;
}

uint64_t sub_1877AA0A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  WindowGroup.init(_:makeContent:)((uint64_t)partial apply for closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:), v4, a1, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>, v24);
  v6 = v24[0];
  v5 = v24[1];
  v7 = v24[2];
  v8 = v25;
  v21 = v24[3];
  v22 = v24[4];
  v14 = v25;
  v15 = v27;
  v16 = v26;
  v9 = v28;
  v13 = v28;
  v23 = v30;
  v18 = v31;
  v19 = v29;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v3;
  v10[3] = v2;
  v10[4] = v17;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v11 + 24) = v10;
  outlined copy of Text?(v6, v5, v7, v21);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v22, v8, v16, v15, v9, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
  outlined copy of Text?(v6, v5, v7, v21);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v22, v14, v16, v15, v13, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v22, v14, v16, v15, v13, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of Text?(v6, v5, v7, v21);
  *(_QWORD *)v1 = v6;
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)(v1 + 24) = v21;
  *(_QWORD *)(v1 + 32) = v22;
  *(_QWORD *)(v1 + 40) = v14;
  *(_QWORD *)(v1 + 48) = v16;
  *(_QWORD *)(v1 + 56) = v15;
  *(_BYTE *)(v1 + 64) = v13;
  *(_QWORD *)(v1 + 72) = v19;
  *(_QWORD *)(v1 + 80) = v23;
  *(_QWORD *)(v1 + 88) = v20;
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = v11;
  outlined consume of Text?(v6, v5, v7, v21);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v22, v14, v16, v15, v13, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

void closure #1 in WindowGroup.init<A, B>(id:for:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a5;
  v16[3] = a6;
  v16[4] = a7;
  v16[5] = a8;
  v16[6] = a9;
  v16[7] = a10;
  v16[8] = a1;
  v16[9] = a2;
  swift_retain();
  swift_retain();
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877AA3C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[16];

  static ViewBuilder.buildExpression<A>(_:)(v9, a1, &protocol witness table for PresentedWindowContent<A, B>);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  swift_release();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  v9[3] = v8;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v9, a1, v4);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  return swift_release();
}

uint64_t objectdestroy_54Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

double WindowGroup.init<A, B>(_:presenting:content:defaultValue:)@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return WindowGroup.init<A, B>(_:id:presenting:content:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(_OWORD *__return_ptr))WindowGroup.init<A, B>(_:for:content:defaultValue:));
}

double WindowGroup.init<A, B>(_:id:presenting:content:)@<D0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(_OWORD *__return_ptr))
{
  char v10;
  uint64_t v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[4];
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  a9(v18);
  v10 = v19;
  v11 = v22;
  result = *(double *)v18;
  v13 = v18[1];
  v14 = v18[2];
  v15 = v18[3];
  v16 = v20;
  v17 = v21;
  *(_OWORD *)a1 = v18[0];
  *(_OWORD *)(a1 + 16) = v13;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 48) = v15;
  *(_BYTE *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 72) = v16;
  *(_OWORD *)(a1 + 88) = v17;
  *(_QWORD *)(a1 + 104) = v11;
  return result;
}

void WindowGroup.init<A, B, C>(_:for:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v32 = a8;
  v30 = a6;
  v28 = a5;
  v26 = a4;
  v25 = a3;
  v29 = a2;
  v31 = a1;
  v24 = a12;
  v15 = *(_QWORD *)(a7 - 8);
  v16 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v15 + 16))((char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  v18 = (_QWORD *)swift_allocObject();
  v19 = v32;
  v18[2] = a7;
  v18[3] = v19;
  v18[4] = a9;
  v18[5] = a10;
  v27 = a11;
  v20 = v24;
  v18[6] = a11;
  v18[7] = v20;
  v18[8] = a13;
  v18[9] = a14;
  v21 = v26;
  v18[10] = v25;
  v18[11] = v21;
  v22 = v30;
  v18[12] = v28;
  v18[13] = v22;
  v33 = v19;
  v34 = a9;
  v35 = a11;
  v36 = v20;
  v37 = a13;
  v38 = a14;
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877AA644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  WindowGroup.init<A>(_:makeContent:)(v6, (uint64_t)partial apply for closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:), v4, a1, v2, (uint64_t)&protocol witness table for PresentedWindowContent<A, B>, (_QWORD *)(v7 - 200));
  (*(void (**)(_QWORD, uint64_t))(v5 + 8))(*(_QWORD *)(v7 - 216), v2);
  v9 = *(_QWORD *)(v7 - 200);
  v8 = *(_QWORD *)(v7 - 192);
  v11 = *(_QWORD *)(v7 - 184);
  v10 = *(_QWORD *)(v7 - 176);
  *(_QWORD *)(v7 - 216) = v11;
  v13 = *(_QWORD *)(v7 - 168);
  v12 = *(_QWORD *)(v7 - 160);
  *(_QWORD *)(v7 - 320) = v13;
  *(_QWORD *)(v7 - 288) = *(_QWORD *)(v7 - 152);
  *(_QWORD *)(v7 - 272) = *(_QWORD *)(v7 - 144);
  *(_DWORD *)(v7 - 276) = *(unsigned __int8 *)(v7 - 136);
  *(_QWORD *)(v7 - 240) = *(_QWORD *)(v7 - 128);
  *(_QWORD *)(v7 - 224) = *(_QWORD *)(v7 - 120);
  *(_QWORD *)(v7 - 256) = *(_QWORD *)(v7 - 104);
  *(_QWORD *)(v7 - 264) = *(_QWORD *)(v7 - 96);
  v14 = (_QWORD *)swift_allocObject();
  v15 = *(_QWORD *)(v7 - 248);
  v14[2] = *(_QWORD *)(v7 - 208);
  v14[3] = v15;
  v14[4] = v3;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = partial apply for closure #1 in standardDecoder<A>(forType:);
  *(_QWORD *)(v16 + 24) = v14;
  *(_QWORD *)(v7 - 296) = v8;
  v17 = v11;
  v18 = v10;
  *(_QWORD *)(v7 - 304) = v10;
  outlined copy of Text?(v9, v8, v17, v10);
  v19 = v13;
  v20 = *(_QWORD *)(v7 - 288);
  v21 = *(_QWORD *)(v7 - 272);
  v22 = *(_DWORD *)(v7 - 276);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v19, v12, v20, v21, v22, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v7 - 256));
  outlined copy of Text?(v9, v8, *(_QWORD *)(v7 - 216), v18);
  v23 = *(_QWORD *)(v7 - 320);
  outlined copy of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v12, v20, v21, v22, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v7 - 208) = v16;
  outlined copy of AppIntentExecutor?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v12, v20, v21, v22, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  v24 = *(_QWORD *)(v7 - 296);
  v25 = *(_QWORD *)(v7 - 216);
  v26 = *(_QWORD *)(v7 - 304);
  outlined consume of Text?(v9, v24, v25, v26);
  *(_QWORD *)v1 = v9;
  *(_QWORD *)(v1 + 8) = v24;
  *(_QWORD *)(v1 + 16) = v25;
  *(_QWORD *)(v1 + 24) = v26;
  v27 = v25;
  *(_QWORD *)(v1 + 32) = v23;
  *(_QWORD *)(v1 + 40) = v12;
  *(_QWORD *)(v1 + 48) = v20;
  *(_QWORD *)(v1 + 56) = v21;
  *(_BYTE *)(v1 + 64) = v22;
  v28 = *(_QWORD *)(v7 - 224);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v7 - 240);
  *(_QWORD *)(v1 + 80) = v28;
  *(_QWORD *)(v1 + 88) = *(_QWORD *)(v7 - 232);
  *(_QWORD *)(v1 + 96) = implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply;
  *(_QWORD *)(v1 + 104) = *(_QWORD *)(v7 - 208);
  outlined consume of Text?(v9, v24, v27, v26);
  outlined consume of WindowGroupRootContent<PresentedWindowContent<A1, B1>><A><A1, B1>(v23, v12, v20, v21, v22, (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)implicit closure #1 in noteFailedReuse #1 (_:) in IncrementalLayoutViewCache.item(data:)partial apply);
}

void closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v16;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a6;
  v16[3] = a7;
  v16[4] = a9;
  v16[5] = a10;
  v16[6] = a11;
  v16[7] = a12;
  v16[8] = a1;
  v16[9] = a2;
  swift_retain();
  swift_retain();
  type metadata accessor for PresentedWindowContent();
}

uint64_t sub_1877AA9A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[16];

  static ViewBuilder.buildExpression<A>(_:)(v9, a1, &protocol witness table for PresentedWindowContent<A, B>);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  swift_release();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  v9[3] = v8;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v9, a1, v4);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  return swift_release();
}

uint64_t objectdestroy_75Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:)()
{
  uint64_t *v0;

  closure #1 in WindowGroup.init<A, B, C>(_:id:for:content:defaultValue:)(v0[10], v0[11], v0[12], v0[13], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9]);
}

uint64_t sub_1877AAA9C()
{
  swift_release();
  return swift_deallocObject();
}

double WindowGroup.init<A, B, C>(_:presenting:content:defaultValue:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13)
{
  return WindowGroup.init<A, B, C>(_:id:presenting:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))WindowGroup.init<A, B, C>(_:for:content:defaultValue:));
}

double WindowGroup.init<A, B, C>(_:id:presenting:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13, void (*a14)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))
{
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  double result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void (*v34)(_OWORD *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[4];
  char v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v36 = a6;
  v37 = a8;
  v34 = a14;
  v35 = a5;
  v33 = a10;
  v32 = a11;
  v20 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, v23);
  v34(v38, v22, a2, a3, a4, v35, v36, a7, v37, v33, *((_QWORD *)&v33 + 1), v32, *((_QWORD *)&v32 + 1), a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, a7);
  v24 = v39;
  v25 = v42;
  result = *(double *)v38;
  v27 = v38[1];
  v28 = v38[2];
  v29 = v38[3];
  v30 = v40;
  v31 = v41;
  *(_OWORD *)a9 = v38[0];
  *(_OWORD *)(a9 + 16) = v27;
  *(_OWORD *)(a9 + 32) = v28;
  *(_OWORD *)(a9 + 48) = v29;
  *(_BYTE *)(a9 + 64) = v24;
  *(_OWORD *)(a9 + 72) = v30;
  *(_OWORD *)(a9 + 88) = v31;
  *(_QWORD *)(a9 + 104) = v25;
  return result;
}

uint64_t implicit closure #1 in PresentedWindowContent.init(content:defaultValue:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v22[4];

  v22[2] = a7;
  v22[3] = a8;
  v22[0] = a5;
  v22[1] = a6;
  type metadata accessor for Optional();
  v10 = type metadata accessor for Binding();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)v22 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v22 - v18, a1, v10, v17);
  type metadata accessor for Optional();
  v20 = type metadata accessor for Binding();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v14, v19, v20);
  closure #1 in implicit closure #1 in PresentedWindowContent.init(content:defaultValue:)((uint64_t)v14, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t closure #1 in implicit closure #1 in PresentedWindowContent.init(content:defaultValue:)(uint64_t a1, void (*a2)(char *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  void (*v15)(char *);

  v15 = a2;
  type metadata accessor for Optional();
  v2 = type metadata accessor for Binding();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - v5;
  v7 = type metadata accessor for Binding();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v14 - v10;
  Binding.projectedValue.getter();
  v12 = type metadata accessor for BindingOperations.ForceUnwrapping();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE37A8], v12);
  Binding.projecting<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v15(v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void static PresentedWindowContent._makeViewList(view:inputs:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[34];

  v16[11] = a7;
  v16[32] = *MEMORY[0x1E0C80C00];
  v13 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v13, v14);
  v16[4] = (char *)v16 - v15;
  v16[21] = a1;
  v16[22] = a2;
  v16[23] = a3;
  v16[24] = a4;
  v16[25] = a5;
  v16[26] = a6;
  type metadata accessor for PresentedWindowContent.MakeChild();
}

void sub_1877AAF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v17 - 328) = a1;
  *(_QWORD *)(v17 - 320) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v17 - 344) = (char *)&a9 - v18;
  LODWORD(v18) = *v13;
  *(_DWORD *)(v17 - 308) = *(_DWORD *)(v10 + 8);
  *(_QWORD *)(v17 - 272) = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v17 - 288) = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v17 - 296) = *(_QWORD *)(v10 + 56);
  *(_DWORD *)(v17 - 300) = *(_DWORD *)(v10 + 64);
  *(_QWORD *)(v17 - 264) = *(_QWORD *)(v10 + 72);
  *(_DWORD *)(v17 - 304) = *(unsigned __int8 *)(v10 + 80);
  *(_DWORD *)(v17 - 244) = v18;
  *(_QWORD *)(v17 - 200) = v14;
  *(_QWORD *)(v17 - 192) = v12;
  *(_QWORD *)(v17 - 184) = v9;
  *(_QWORD *)(v17 - 176) = v16;
  *(_QWORD *)(v17 - 168) = v15;
  *(_QWORD *)(v17 - 160) = v11;
  *(_QWORD *)(v17 - 360) = v11;
  type metadata accessor for PresentedWindowContent();
}

void sub_1877AB038()
{
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #1 in static PresentedWindowContent._makeViewList(view:inputs:)();
}

void sub_1877AB074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;

  *(_DWORD *)(v2 - 364) = AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type PresentedSceneValueInput and conformance PresentedSceneValueInput();
  swift_retain();
  *(_QWORD *)(v2 - 352) = v0;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v3 = *(_DWORD *)(v2 - 200);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(*(_QWORD *)(v2 - 336), 1, 1, v1);
  PresentedWindowContent.MakeChild.init(windowContentProvider:presentedValue:defaultValue:)(*(_DWORD *)(v2 - 364), v3, *(_DWORD **)(v2 - 344));
}

void sub_1877AB178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 200) = v3;
  *(_QWORD *)(v6 - 192) = v2;
  *(_QWORD *)(v6 - 184) = v0;
  *(_QWORD *)(v6 - 176) = v5;
  *(_QWORD *)(v6 - 168) = v4;
  *(_QWORD *)(v6 - 160) = v1;
  type metadata accessor for PresentedWindowContent.Child();
}

uint64_t sub_1877AB194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(v3 - 328);
  *(_QWORD *)(v3 - 224) = a1;
  *(_QWORD *)(v3 - 216) = v7;
  *(_QWORD *)(v3 - 208) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentedWindowContent<A, B>.MakeChild, v7);
  v8 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, v3 - 240, v7, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 320) + 8))(v1, v7);
  _GraphValue.init(_:)();
  *(_QWORD *)(v3 - 200) = v2;
  *(_DWORD *)(v3 - 192) = *(_DWORD *)(v3 - 308);
  *(_QWORD *)(v3 - 184) = *(_QWORD *)(v3 - 352);
  *(_QWORD *)(v3 - 176) = v4;
  *(_QWORD *)(v3 - 168) = v5;
  v10 = *(_QWORD *)(v3 - 288);
  *(_QWORD *)(v3 - 160) = *(_QWORD *)(v3 - 272);
  *(_QWORD *)(v3 - 152) = v10;
  *(_QWORD *)(v3 - 144) = *(_QWORD *)(v3 - 296);
  *(_DWORD *)(v3 - 136) = *(_DWORD *)(v3 - 300);
  *(_QWORD *)(v3 - 128) = *(_QWORD *)(v3 - 264);
  *(_BYTE *)(v3 - 120) = *(_DWORD *)(v3 - 304);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentedWindowContent<A, B>.Child, a1);
  return static View.makeDebuggableViewList(view:inputs:)();
}

void type metadata accessor for PresentedWindowContent.MakeChild()
{
  JUMPOUT(0x18D75FF28);
}

void closure #1 in static PresentedWindowContent._makeViewList(view:inputs:)()
{
  type metadata accessor for PresentedWindowContent();
}

void sub_1877AB350()
{
  type metadata accessor for PresentedWindowContent.WindowContentProvider();
}

uint64_t sub_1877AB370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[22];

  v6[3] = a1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, a1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v6[6];
}

void PresentedWindowContent.MakeChild.init(windowContentProvider:presentedValue:defaultValue:)(int a1@<W0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for PresentedWindowContent.MakeChild();
}

uint64_t sub_1877AB41C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *(int *)(a1 + 72);
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v1, v4);
}

void PresentedWindowContent.MakeChild.windowContentProvider.getter()
{
  type metadata accessor for PresentedWindowContent.WindowContentProvider();
}

uint64_t sub_1877AB490()
{
  uint64_t v0;

  v0 = *(_QWORD *)AGGraphGetValue();
  outlined copy of AppIntentExecutor?(v0);
  swift_retain();
  return v0;
}

void PresentedWindowContent.MakeChild.updateValue()()
{
  type metadata accessor for PresentedWindowContent.Child();
}

void sub_1877AB540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(v16 - 272) = a1;
  *(_QWORD *)(v16 - 304) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v16 - 312) = (char *)&a9 - v17;
  *(_QWORD *)(v16 - 280) = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  *(_QWORD *)(v16 - 408) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Optional();
  *(_QWORD *)(v16 - 344) = v21;
  *(_QWORD *)(v16 - 320) = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  *(_QWORD *)(v16 - 296) = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  *(_QWORD *)(v16 - 384) = (char *)&a9 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  *(_QWORD *)(v16 - 392) = (char *)&a9 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  *(_QWORD *)(v16 - 368) = (char *)&a9 - v32;
  *(_QWORD *)(v16 - 160) = v11;
  *(_QWORD *)(v16 - 152) = v15;
  *(_QWORD *)(v16 - 328) = v15;
  *(_QWORD *)(v16 - 336) = v14;
  *(_QWORD *)(v16 - 144) = v14;
  *(_QWORD *)(v16 - 136) = v10;
  *(_QWORD *)(v16 - 376) = v10;
  *(_QWORD *)(v16 - 352) = v13;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = v9;
  *(_QWORD *)(v16 - 360) = v9;
  type metadata accessor for PresentedWindowContent.WindowContentProvider();
}

uint64_t sub_1877AB6BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *Value;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  uint64_t OutputValue;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  int v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;

  Value = (uint64_t *)AGGraphGetValue();
  v6 = v5;
  v8 = *Value;
  v7 = Value[1];
  v9 = Value[3];
  *(_QWORD *)(v3 - 288) = v0;
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E0CFED28])
  {
    *(_OWORD *)(v3 - 135) = 0u;
    *(_OWORD *)(v3 - 160) = 0u;
    *(_OWORD *)(v3 - 144) = 0u;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v10 = AGGraphGetValue();
    v12 = v11;
    outlined init with copy of AnyHashable?(v10, v3 - 208);
    *(_BYTE *)(v3 - 168) = v12 & 1;
    outlined init with take of AnyHashable?(v3 - 208, v3 - 160);
    *(_BYTE *)(v3 - 120) = *(_BYTE *)(v3 - 168);
  }
  outlined copy of AppIntentExecutor?(v8);
  swift_retain();
  v13 = *(unsigned __int8 *)(v3 - 120);
  outlined init with take of AnyHashable?(v3 - 160, v3 - 208);
  OutputValue = AGGraphGetOutputValue();
  v15 = *(_QWORD *)(v3 - 280);
  if (!OutputValue || (v6 & 1) != 0 || v13)
  {
    *(_QWORD *)(v3 - 416) = v7;
    outlined init with copy of AnyHashable?(v3 - 208, v3 - 248);
    v17 = *(_QWORD *)(v3 - 224);
    *(_QWORD *)(v3 - 400) = v8;
    *(_QWORD *)(v3 - 424) = v9;
    if (v17)
    {
      v18 = *(_OWORD *)(v3 - 232);
      *(_OWORD *)(v3 - 160) = *(_OWORD *)(v3 - 248);
      *(_OWORD *)(v3 - 144) = v18;
      *(_QWORD *)(v3 - 128) = *(_QWORD *)(v3 - 216);
      AnyHashable.base.getter();
      outlined destroy of AnyHashable(v3 - 160);
      v19 = *(_QWORD *)(v3 - 392);
      v20 = swift_dynamicCast();
      v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v22 = *(_QWORD *)(v3 - 344);
      v23 = *(_QWORD *)(v3 - 368);
      if ((v20 & 1) != 0)
      {
        v21(v19, 0, 1, v2);
        v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
        v25 = *(_QWORD *)(v3 - 408);
        v24(v25, v19, v2);
        v24(v23, v25, v2);
        v21(v23, 0, 1, v2);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 320) + 16))(*(_QWORD *)(v3 - 296), v23, v22);
        goto LABEL_18;
      }
      v21(v19, 1, 1, v2);
      v26 = *(_QWORD *)(v3 - 320);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v19, v22);
    }
    else
    {
      outlined destroy of AnyHashable?(v3 - 248);
      v26 = *(_QWORD *)(v3 - 320);
      v22 = *(_QWORD *)(v3 - 344);
      v23 = *(_QWORD *)(v3 - 368);
    }
    v27 = *(_QWORD *)(v3 - 288) + *(int *)(v1 + 72);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    v29 = *(_QWORD *)(v3 - 384);
    v28(v29, v27, v22);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v29, 1, v2);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v22);
    if (v30 == 1)
    {
      v31 = *(void (**)(uint64_t))(v3 - 400);
      if (!v31)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v23, 1, 1, v2);
        goto LABEL_17;
      }
      v32 = swift_retain();
      v33 = *(_QWORD *)(v3 - 296);
      v31(v32);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v31);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 280) + 56))(v33, 0, 1, v2);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 40))(v27, v33, v22);
    }
    v28(v23, v27, v22);
LABEL_17:
    v28(*(_QWORD *)(v3 - 296), v23, v22);
LABEL_18:
    PresentedWindowContent.MakeChild.windowContentProvider.getter();
  }
  outlined destroy of AnyHashable?(v3 - 208);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v8);
  return swift_release();
}

void PresentedWindowContent.Child.init(presentedValue:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[10];

  v20[0] = a2;
  v20[1] = a3;
  v15 = type metadata accessor for Optional();
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 32))((char *)v20 - v19, a1, v15, v17);
  v20[4] = a4;
  v20[5] = a5;
  v20[6] = a6;
  v20[7] = a7;
  v20[8] = a8;
  v20[9] = a9;
  type metadata accessor for PresentedWindowContent.Child();
}

uint64_t sub_1877ABC3C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v7 = (char *)v2 + *(int *)(a1 + 68);
  *(_QWORD *)(v6 - 136) = v5;
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE9A0], v3, v6 - 136);
  *(_QWORD *)(v6 - 144) = v4;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE988], v3, v6 - 144);
  result = SceneStorage<A>.init(wrappedValue:_:)(v1, 0xD000000000000025, 0x8000000187BE87E0, v3, v8, v9, v7);
  v11 = *(_QWORD *)(v6 - 152);
  *v2 = *(_QWORD *)(v6 - 160);
  v2[1] = v11;
  return result;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance PresentedWindowContent<A, B>.MakeChild()
{
  type metadata accessor for PresentedWindowContent.Child();
}

uint64_t sub_1877ABD04(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

uint64_t PresentedWindowContent.Child.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (**v2)(char *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[16];
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  _BYTE v55[48];

  v47 = a2;
  v43 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for Optional();
  v46 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v41 = (uint64_t)&v36 - v6;
  v36 = v4;
  v39 = type metadata accessor for Binding();
  v38 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v7);
  v9 = (char *)&v36 - v8;
  v10 = *(_QWORD *)(a1 + 24);
  v44 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v37 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _PreferenceWritingModifier<PresentedSceneValueKey>();
  v14 = type metadata accessor for ModifiedContent();
  v45 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v40 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v42 = (char *)&v36 - v19;
  v20 = *v2;
  v23 = type metadata accessor for SceneStorage(0, v4, v21, v22);
  SceneStorage.projectedValue.getter(v23, v24, v9);
  v20(v9);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v39);
  v25 = v41;
  SceneStorage.wrappedValue.getter(v23, v41);
  v49 = v43;
  v50 = v10;
  v51 = *(_OWORD *)(a1 + 32);
  v26 = *(_QWORD *)(a1 + 56);
  v52 = *(_QWORD *)(a1 + 48);
  v53 = v26;
  v27 = v36;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PresentedWindowContent.Child.body.getter, (uint64_t)v48, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEC198], v28, (uint64_t)v55);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v25, v27);
  v29 = v40;
  v30 = v37;
  View.preference<A>(key:value:)();
  outlined destroy of AnyHashable?((uint64_t)v55);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v10);
  v31 = lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentedSceneValueKey> and conformance _PreferenceWritingModifier<A>();
  v54[0] = v26;
  v54[1] = v31;
  v32 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v54);
  v33 = (uint64_t)v42;
  static ViewBuilder.buildExpression<A>(_:)(v29, v14, v32);
  v34 = *(void (**)(char *, uint64_t))(v45 + 8);
  v34(v29, v14);
  static ViewBuilder.buildBlock<A>(_:)(v33, v14, v47);
  return ((uint64_t (*)(uint64_t, uint64_t))v34)(v33, v14);
}

uint64_t closure #1 in PresentedWindowContent.Child.body.getter(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return AnyHashable.init<A>(_:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PresentedWindowContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentedWindowContent<A, B>, a3);
  return static MultiView._makeView(view:inputs:)();
}

void protocol witness for static View._makeViewList(view:inputs:) in conformance PresentedWindowContent<A, B>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  static PresentedWindowContent._makeViewList(view:inputs:)(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a2);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PresentedWindowContent<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentedWindowContent<A, B>);
  return static MultiView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance PresentedWindowContent<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentedWindowContent<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t closure #1 in standardDecoder<A>(forType:)(uint64_t a1, uint64_t a2)
{
  _BYTE v3[48];
  _OWORD v4[2];
  uint64_t v5;

  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if ((swift_dynamicCast() & 1) == 0)
  {
    v5 = 0;
    memset(v4, 0, sizeof(v4));
  }
  outlined init with copy of AnyHashable?((uint64_t)v4, (uint64_t)v3);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  lazy protocol witness table accessor for type AnyHashable? and conformance <A> A?();
  AnyHashable.init<A>(_:)();
  swift_release();
  return outlined destroy of AnyHashable?((uint64_t)v4);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance PresentedSceneValueInputModifier()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<PresentedSceneValueInputModifier>, (uint64_t)&type metadata for PresentedSceneValueInputModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type PresentedSceneValueInput and conformance PresentedSceneValueInput();
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PresentedSceneValueInputModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PresentedSceneValueInputModifier()
{
  lazy protocol witness table accessor for type PresentedSceneValueInputModifier and conformance PresentedSceneValueInputModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance PresentedSceneValueInputModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance PresentedSceneValueKey(uint64_t a1, void (*a2)(_OWORD *__return_ptr, uint64_t))
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;

  v4 = outlined init with take of AnyHashable?(a1, (uint64_t)&v6);
  if (*((_QWORD *)&v7 + 1))
  {
    v9[0] = v6;
    v9[1] = v7;
    v10 = v8;
  }
  else
  {
    a2(v9, v4);
    outlined destroy of AnyHashable?((uint64_t)&v6);
  }
  return outlined init with take of AnyHashable?((uint64_t)v9, a1);
}

void type metadata accessor for PresentedWindowContent.Child()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **base witness table accessor for View in PresentedWindowContent<A, B>()
{
  return &protocol witness table for PresentedWindowContent<A, B>;
}

ValueMetadata *type metadata accessor for PresentedSceneValueKey()
{
  return &type metadata for PresentedSceneValueKey;
}

void type metadata accessor for PresentedWindowContent.WindowContentProvider()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for PresentedWindowContent.Child()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;

  v0 = type metadata accessor for Optional();
  result = type metadata accessor for SceneStorage(319, v0, v1, v2);
  if (v4 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PresentedWindowContent.Child(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  size_t v12;
  int v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  const void *v24;
  unsigned int (*v25)(const void *, uint64_t, uint64_t);
  _QWORD *v26;
  _QWORD *v27;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = v6 + 16;
  v10 = v8 & v9;
  if (*(_DWORD *)(v5 + 84))
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = *(_QWORD *)(v5 + 64) + 1;
  v12 = v11 + 7;
  v13 = v6 & 0x100000;
  v14 = *a2;
  if (v7 > 7
    || v13 != 0
    || v10 + ((((v11 + 7 + ((v7 + 32) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    *a1 = v14;
    v3 = (_QWORD *)(v14 + v10);
  }
  else
  {
    v17 = ~v7;
    v18 = a2[1];
    *v3 = v14;
    v3[1] = v18;
    v19 = (_QWORD *)(v8 & ((unint64_t)v3 + 23));
    v20 = (_QWORD *)(v8 & ((unint64_t)a2 + 23));
    *v19 = *v20;
    v19[1] = v20[1];
    v21 = (_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v22;
    v21[1] = v22[1];
    v23 = (void *)(((unint64_t)v21 + v9) & v17);
    v24 = (const void *)(((unint64_t)v22 + v9) & v17);
    v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v25(v24, 1, v4))
    {
      memcpy(v23, v24, v11);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v23, v24, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v23, 0, 1, v4);
    }
    v26 = (_QWORD *)(((unint64_t)v23 + v12) & 0xFFFFFFFFFFFFF8);
    v27 = (_QWORD *)(((unint64_t)v24 + v12) & 0xFFFFFFFFFFFFFFF8);
    *v26 = *v27;
    *(_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v3;
}

uint64_t destroy for PresentedWindowContent.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (v6 + ((((a1 + (v6 | 7) + 16) & ~(v6 | 7)) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v6;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v7, v4);
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for PresentedWindowContent.Child(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  const void *v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 16;
  v9 = (_QWORD *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  v10 = (_QWORD *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  *v9 = *v10;
  v9[1] = v10[1];
  v11 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v11[1] = v12[1];
  v13 = (void *)(((unint64_t)v11 + v7 + 16) & ~v7);
  v14 = (const void *)(((unint64_t)v12 + v7 + 16) & ~v7);
  v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v14, 1, v5))
  {
    v16 = *(_DWORD *)(v6 + 84);
    v17 = *(_QWORD *)(v6 + 64);
    if (v16)
      v18 = *(_QWORD *)(v6 + 64);
    else
      v18 = v17 + 1;
    memcpy(v13, v14, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v13, v14, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
    v16 = *(_DWORD *)(v6 + 84);
    v17 = *(_QWORD *)(v6 + 64);
  }
  if (v16)
    v19 = v17;
  else
    v19 = v17 + 1;
  v20 = (_QWORD *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  *(_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for PresentedWindowContent.Child(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 | 7) + 16;
  v11 = (_QWORD *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  v12 = (_QWORD *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = (void *)(((unint64_t)v13 + v9 + 16) & ~v9);
  v16 = (void *)(((unint64_t)v14 + v9 + 16) & ~v9);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v13) = v17(v15, 1, v7);
  v18 = v17(v16, 1, v7);
  if ((_DWORD)v13)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v15, v16, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v15, v16, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v15, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v19 = *(_QWORD *)(v8 + 64);
  else
    v19 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v15, v16, v19);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v20 = *(_QWORD *)(v8 + 64);
  else
    v20 = *(_QWORD *)(v8 + 64) + 1;
  v21 = (uint64_t)v15 + v20 + 7;
  v22 = (uint64_t)v16 + v20 + 7;
  v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
  v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for PresentedWindowContent.Child(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  void *v12;
  const void *v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 16;
  v8 = (_OWORD *)(((unint64_t)a1 + v7) & ~(v6 | 7));
  v9 = (_OWORD *)(((unint64_t)a2 + v7) & ~(v6 | 7));
  *v8 = *v9;
  v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_OWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (void *)(((unint64_t)v10 + v6 + 16) & ~v6);
  v13 = (const void *)(((unint64_t)v11 + v6 + 16) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4))
  {
    v14 = *(_DWORD *)(v5 + 84);
    v15 = *(_QWORD *)(v5 + 64);
    if (v14)
      v16 = v15;
    else
      v16 = v15 + 1;
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v12, v13, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
    v14 = *(_DWORD *)(v5 + 84);
    v15 = *(_QWORD *)(v5 + 64);
  }
  if (v14)
    v17 = v15;
  else
    v17 = v15 + 1;
  v18 = (_QWORD *)(((unint64_t)v12 + v17 + 7) & 0xFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  *(_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *assignWithTake for PresentedWindowContent.Child(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 16;
  v10 = (_QWORD *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  v11 = (_QWORD *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRelease();
  v12 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRelease();
  v14 = (void *)(((unint64_t)v12 + v8 + 16) & ~v8);
  v15 = (void *)(((unint64_t)v13 + v8 + 16) & ~v8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v8) = v16(v14, 1, v6);
  v17 = v16(v15, 1, v6);
  if ((_DWORD)v8)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v14, v15, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v14, v15, v6);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v14, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v18 = *(_QWORD *)(v7 + 64);
  else
    v18 = *(_QWORD *)(v7 + 64) + 1;
  memcpy(v14, v15, v18);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v19 = *(_QWORD *)(v7 + 64);
  else
    v19 = *(_QWORD *)(v7 + 64) + 1;
  v20 = (uint64_t)v14 + v19 + 7;
  v21 = (_QWORD *)(((unint64_t)v15 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8) = *v21;
  v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentedWindowContent.Child(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v6 >= 0)
    v8 = 0x7FFFFFFF;
  else
    v8 = v7;
  if (v5)
    v9 = 7;
  else
    v9 = 8;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = v10 | 7;
  v12 = v10 + 16;
  if (v8 < a2)
  {
    if ((((v12 & ~v11)
         + ((((v9 + *(_QWORD *)(v4 + 64) + ((v10 + 32) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v8 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    __asm { BR              X17 }
  }
  if (v8 == 0x7FFFFFFF)
  {
    v17 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    return (v17 + 1);
  }
  else
  {
    v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v12
                                                                 + (((((unint64_t)a1 + v11 + 16) & ~v11) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v10);
    if (v18 >= 2)
      return v18 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for PresentedWindowContent.Child(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  if (v9 >= 0)
    v10 = 0x7FFFFFFF;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if (((*(unsigned __int8 *)(v7 + 80) + 16) & ~(*(unsigned __int8 *)(v7 + 80) | 7))
       + ((((((*(unsigned __int8 *)(v7 + 80) + 32) & ~*(unsigned __int8 *)(v7 + 80)) + (_DWORD)v11 + 7) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == -8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if (((*(unsigned __int8 *)(v7 + 80) + 16) & ~(*(unsigned __int8 *)(v7 + 80) | 7))
       + ((((((*(unsigned __int8 *)(v7 + 80) + 32) & ~*(unsigned __int8 *)(v7 + 80)) + (_DWORD)v11 + 7) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) != -8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(*(unsigned __int8 *)(v7 + 80) | 7))+ ((((((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11 + 7) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

uint64_t sub_1877AD17C@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t result;

  *((_BYTE *)v17 + v18) = 0;
  if (a1)
  {
    if (v13 == 0x7FFFFFFF)
    {
      if ((a1 & 0x80000000) != 0)
      {
        v19 = a1 ^ 0x80000000;
        v17[1] = 0;
      }
      else
      {
        v19 = a1 - 1;
      }
      *v17 = v19;
    }
    else
    {
      v20 = (void *)((v14 + (((((unint64_t)v17 + v15 + 16) & v16) + 23) & 0xFFFFFFFFFFFFFFF8)) & v10);
      if (v11 >= a1)
      {
        return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v20, a1 + 1);
      }
      else if ((_DWORD)a2)
      {
        if (a2 <= 3)
          v21 = a2;
        else
          v21 = 4;
        bzero(v20, a2);
        __asm { BR              X10 }
      }
    }
  }
  return result;
}

void sub_1877AD288()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1877AD298()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1877AD2A0()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

ValueMetadata *type metadata accessor for PresentedSceneValueInput()
{
  return &type metadata for PresentedSceneValueInput;
}

uint64_t type metadata completion function for PresentedWindowContent.MakeChild()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PresentedWindowContent.MakeChild(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 64);
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(v4 + 64) + 1;
  }
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = v7 + ((v8 + 8) & ~v8);
    v11 = 8 * v10;
    if (v10 > 3)
      goto LABEL_7;
    v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (v12)
        goto LABEL_14;
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2)
          goto LABEL_21;
LABEL_7:
        v12 = *(unsigned __int8 *)(a1 + v10);
        if (!*(_BYTE *)(a1 + v10))
          goto LABEL_21;
LABEL_14:
        v14 = (v12 - 1) << v11;
        if (v10 > 3)
          v14 = 0;
        if ((_DWORD)v10)
        {
          if (v10 > 3)
            LODWORD(v10) = 4;
          __asm { BR              X12 }
        }
        return v6 + v14 + 1;
      }
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (*(_WORD *)(a1 + v10))
        goto LABEL_14;
    }
  }
LABEL_21:
  if (v5 < 2)
    return 0;
  v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 4) & ~v8);
  if (v16 >= 2)
    return v16 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for PresentedWindowContent.MakeChild(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v12 = a3 >= v9;
  v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_16;
      goto LABEL_23;
    }
    v14 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_16:
        v15 = ~v9 + a2;
        if (v11 < 4)
        {
          if ((_DWORD)v11)
          {
            v16 = v15 & ~(-1 << (8 * v11));
            bzero(a1, v11);
            if ((_DWORD)v11 == 3)
            {
              *a1 = v16;
              *((_BYTE *)a1 + 2) = BYTE2(v16);
            }
            else if ((_DWORD)v11 == 2)
            {
              *a1 = v16;
            }
            else
            {
              *(_BYTE *)a1 = v16;
            }
          }
        }
        else
        {
          bzero(a1, v11);
          *(_DWORD *)a1 = v15;
        }
        __asm { BR              X10 }
      }
LABEL_23:
      __asm { BR              X13 }
    }
    if (v14 >= 0x100)
      v6 = 2;
    else
      v6 = v14 > 1;
  }
  if (v9 < a2)
    goto LABEL_16;
  goto LABEL_23;
}

void sub_1877AD664()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1877AD66C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t associated type witness table accessor for View.Body : View in PresentedWindowContent<A, B>.Child()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in PresentedWindowContent<A, B>.MakeChild()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined destroy of AnyHashable?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _PreferenceWritingModifier<PresentedSceneValueKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<PresentedSceneValueKey>)
  {
    v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<PresentedSceneValueKey>);
  }
}

uint64_t partial apply for closure #1 in PresentedWindowContent.Child.body.getter(uint64_t a1)
{
  return closure #1 in PresentedWindowContent.Child.body.getter(a1);
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentedSceneValueKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<PresentedSceneValueKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<PresentedSceneValueKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<PresentedSceneValueKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<PresentedSceneValueKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in PresentedWindowContent.init(content:defaultValue:)(uint64_t a1)
{
  uint64_t v1;

  return implicit closure #1 in PresentedWindowContent.init(content:defaultValue:)(a1, *(void (**)(char *))(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1877AD874()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in standardDecoder<A>(forType:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in standardDecoder<A>(forType:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type AnyHashable? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type AnyHashable? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AnyHashable? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0DEC1A0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHashable? and conformance <A> A?);
  }
  return result;
}

uint64_t assignWithTake for PresentedSceneValueInputModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
      __swift_destroy_boxed_opaque_existential_1(a1);
    else
      outlined destroy of AnyHashable(a1);
  }
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for PresentedSceneValueInputModifier()
{
  return &type metadata for PresentedSceneValueInputModifier;
}

uint64_t sub_1877AD968(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 40);
  type metadata accessor for _PreferenceWritingModifier<PresentedSceneValueKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentedSceneValueKey> and conformance _PreferenceWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

_UNKNOWN **base witness table accessor for ViewModifier in PresentedSceneValueInputModifier()
{
  return &protocol witness table for PresentedSceneValueInputModifier;
}

unint64_t lazy protocol witness table accessor for type PresentedSceneValueInputModifier and conformance PresentedSceneValueInputModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentedSceneValueInputModifier and conformance PresentedSceneValueInputModifier;
  if (!lazy protocol witness table cache variable for type PresentedSceneValueInputModifier and conformance PresentedSceneValueInputModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentedSceneValueInputModifier, &type metadata for PresentedSceneValueInputModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentedSceneValueInputModifier and conformance PresentedSceneValueInputModifier);
  }
  return result;
}

uint64_t DefaultMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  KeyPath = swift_getKeyPath();
  v8 = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = KeyPath;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v8;
  *(_BYTE *)(a2 + 72) = 0;
  outlined copy of AppIntentExecutor?(v3);
  return outlined copy of AppIntentExecutor?(v5);
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in DefaultMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance DefaultMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultMenuStyle.makeBody(configuration:)(a1, a2);
}

ValueMetadata *type metadata accessor for DefaultMenuStyle()
{
  return &type metadata for DefaultMenuStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for MenuStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>);
    type metadata accessor for MenuStyleModifier<BorderedButtonMenuStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<PlatformFallbackMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformFallbackMenuStyle and conformance PlatformFallbackMenuStyle, (uint64_t)&type metadata for PlatformFallbackMenuStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, MenuStyleModifier<PlatformFallbackMenuStyle>>);
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>);
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for MenuStyleModifier<BorderedButtonMenuStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<ToolbarMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarMenuStyle and conformance ToolbarMenuStyle, (uint64_t)&type metadata for ToolbarMenuStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarMenuStyle and conformance ToolbarMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarMenuStyle and conformance ToolbarMenuStyle;
  if (!lazy protocol witness table cache variable for type ToolbarMenuStyle and conformance ToolbarMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarMenuStyle, &type metadata for ToolbarMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarMenuStyle and conformance ToolbarMenuStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SwipeActionsStyleContext>);
    type metadata accessor for MenuStyleModifier<BorderedButtonMenuStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<PlatformItemListMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle, (uint64_t)&type metadata for PlatformItemListMenuStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SwipeActionsStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SwipeActionsStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformFallbackMenuStyle and conformance PlatformFallbackMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformFallbackMenuStyle and conformance PlatformFallbackMenuStyle;
  if (!lazy protocol witness table cache variable for type PlatformFallbackMenuStyle and conformance PlatformFallbackMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformFallbackMenuStyle, &type metadata for PlatformFallbackMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformFallbackMenuStyle and conformance PlatformFallbackMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, &lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>);
    v3[1] = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformFallbackMenuStyle()
{
  return &type metadata for PlatformFallbackMenuStyle;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in PlatformFallbackMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PlatformFallbackMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  KeyPath = swift_getKeyPath();
  v8 = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = 2;
  *(_QWORD *)(a2 + 40) = KeyPath;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v8;
  *(_BYTE *)(a2 + 64) = 0;
  outlined copy of AppIntentExecutor?(v3);
  return outlined copy of AppIntentExecutor?(v5);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, &lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>);
    v3[1] = &protocol witness table for MenuStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>(255);
    type metadata accessor for MenuStyleModifier<BorderedButtonMenuStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<BorderlessButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle, (uint64_t)&type metadata for BorderlessButtonMenuStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<BorderlessButtonMenuStyle>>);
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, (void (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>);
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, MenuStyleModifier<ButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for MenuStyleModifier<BorderedButtonMenuStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<ButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle, (uint64_t)&type metadata for ButtonMenuStyle);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<ToolbarMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>();
    v9[1] = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(a3, a4);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

void EnvironmentValues.stepperFieldWidth.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.stepperFieldWidth.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.stepperFieldWidth.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1877AE24C()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1877AE270()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t UISceneAdaptor.init(id:role:content:)@<X0>(uint64_t a1@<X6>, uint64_t a2@<X7>, uint64_t a3@<X8>, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = StaticString.description.getter();
  v9 = v8;
  v10 = StaticString.description.getter();
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = v10;
  *(_QWORD *)(a3 + 32) = v11;
  v13 = a3 + *(int *)(type metadata accessor for UISceneAdaptor(0, a2, a4, v12) + 40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v13, a1, a2);
}

uint64_t UISceneAdaptor.init(id:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10;

  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_BYTE *)(a8 + 16) = 0;
  *(_QWORD *)(a8 + 24) = a3;
  *(_QWORD *)(a8 + 32) = a4;
  v10 = a8 + *(int *)(type metadata accessor for UISceneAdaptor(0, a6, a7, a4) + 40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(v10, a5, a6);
}

uint64_t type metadata accessor for UISceneAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UISceneAdaptor);
}

uint64_t UISceneAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  _OWORD v30[2];
  __n128 v31;
  __n128 v32;
  uint64_t v33;

  v5 = *(_QWORD *)v2;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_BYTE *)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_QWORD *)(v2 + 32);
  outlined copy of SceneID(*(_QWORD *)v2, v6, v7);
  outlined copy of UISceneAdaptorConfiguration.Kind(v8, v9);
  v11 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  specialized ResolvedUISceneAdaptor.init(id:kind:content:)(v5, v6, v7, v8, v9, (uint64_t)&v26);
  v30[0] = v27;
  v30[1] = v28;
  v29 = v26;
  v33 = *((_QWORD *)&v28 + 1);
  outlined init with take of UISceneAdaptorConfiguration.Kind((__n128 *)((char *)v30 + 8), &v32);
  outlined init with take of SceneID(&v29, &v31);
  v19 = v26;
  v20 = v27;
  v21 = v28;
  v13 = type metadata accessor for ResolvedUISceneAdaptor(0, v11, v10, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedUISceneAdaptor<A>, v13);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v19, v13, (uint64_t)&v22);
  outlined release of SceneID((uint64_t)&v31);
  outlined release of UISceneAdaptorConfiguration.Kind((uint64_t)&v32);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v33);
  v14 = v22;
  v15 = v23;
  v16 = v24;
  v17 = v25;
  v19 = v22;
  LOBYTE(v20) = v23;
  *((_QWORD *)&v20 + 1) = v24;
  v21 = v25;
  static SceneBuilder.buildBlock<A>(_:)((uint64_t)&v19, v13, a2);
  outlined consume of SceneID(v14.n128_i64[0], v14.n128_i64[1], v15);
  outlined consume of UISceneAdaptorConfiguration.Kind(v16, v17);
  return swift_release();
}

uint64_t ResolvedUISceneAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __n128 v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  __n128 v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;
  __n128 v38;
  uint64_t v39[3];

  v4 = *(_OWORD *)(v2 + 16);
  v34 = *(__n128 *)v2;
  v35 = v4;
  v36 = *(_OWORD *)(v2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v34;
  v8 = *((_QWORD *)&v4 + 1);
  v9 = v36;
  v10 = v4 & 1;
  v26 = v4 & 1;
  v27 = v34;
  v28 = v4 & 1;
  v29 = *((_QWORD *)&v4 + 1);
  v30 = v36;
  v33 = *((_QWORD *)&v36 + 1);
  outlined init with take of UISceneAdaptorConfiguration.Kind((__n128 *)&v29, &v32);
  outlined init with take of SceneID(&v27, &v31);
  v18 = v7;
  v19 = v10;
  v20 = v8;
  v21 = v9;
  v12 = type metadata accessor for ResolvedUISceneAdaptor.RootViewScene(0, v5, v6, v11);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v18, v12, (uint64_t)&v22);
  outlined init with take of SceneID(&v34, &v37);
  outlined init with take of UISceneAdaptorConfiguration.Kind((__n128 *)((char *)&v35 + 8), &v38);
  v39[0] = *((_QWORD *)&v36 + 1);
  outlined retain of SceneID((uint64_t)&v37);
  outlined retain of UISceneAdaptorConfiguration.Kind((uint64_t)&v38);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v39);
  outlined release of SceneID((uint64_t)&v31);
  outlined release of UISceneAdaptorConfiguration.Kind((uint64_t)&v32);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v33);
  v13 = v22;
  v14 = v23;
  v15 = v24;
  v16 = v25;
  v18 = v22;
  v19 = v23;
  v20 = v24;
  v21 = v25;
  static SceneBuilder.buildBlock<A>(_:)((uint64_t)&v18, v12, a2);
  outlined consume of SceneID(v13.n128_i64[0], v13.n128_i64[1], v14);
  outlined consume of UISceneAdaptorConfiguration.Kind(v15, v16);
  return swift_release();
}

uint64_t static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t result;
  uint64_t v9;
  int v10;

  PreferencesOutputs.init()();
  type metadata accessor for ResolvedUISceneAdaptor.RootViewScene(255, a1, a2, v6);
  type metadata accessor for _GraphValue();
  v7 = MEMORY[0x1E0CE1470];
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<UISceneAdaptorConfiguration>, (uint64_t)&type metadata for UISceneAdaptorConfiguration, (uint64_t (*)(_QWORD, uint64_t))v7);
  _GraphValue.value.getter();
  _GraphInputs.environment.getter();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v9;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t closure #1 in static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = type metadata accessor for ResolvedUISceneAdaptor.RootViewScene(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_16, (uint64_t)v8, (uint64_t)&type metadata for UISceneAdaptorConfiguration, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[5];
}

uint64_t implicit closure #1 in static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  _BYTE v9[16];
  uint64_t List;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  List = type metadata accessor for ResolvedUISceneAdaptor.RootViewScene.MakeList(0, a2, a3, a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedUISceneAdaptor<A>.RootViewScene.MakeList, List);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<SceneList>, (uint64_t)&type metadata for SceneList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)v9, List, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7;
}

uint64_t ResolvedUISceneAdaptor.RootViewScene.MakeList.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)Value;
  v4 = *(_QWORD *)(Value + 8);
  v5 = *(_BYTE *)(Value + 16);
  v6 = *(_QWORD *)(Value + 24);
  v7 = *(_QWORD *)(Value + 32);
  v8 = *(_QWORD *)(Value + 40);
  outlined copy of SceneID(*(_QWORD *)Value, v4, v5);
  outlined copy of UISceneAdaptorConfiguration.Kind(v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  return swift_retain();
}

uint64_t ResolvedUISceneAdaptor.RootViewScene.MakeList.value.getter()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  __n128 __src[17];
  __n128 v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  __n128 v14;

  ResolvedUISceneAdaptor.RootViewScene.MakeList.configuration.getter((uint64_t)__src);
  __src[7].n128_u8[9] = 5;
  ResolvedUISceneAdaptor.RootViewScene.MakeList.configuration.getter((uint64_t)&v9);
  outlined init with take of SceneID(&v9, &v14);
  outlined init with take of UISceneAdaptorConfiguration.Kind(&v10, &v13);
  outlined release of UISceneAdaptorConfiguration.Kind((uint64_t)&v13);
  v12 = v11;
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v12);
  DisplayList.Version.init(forUpdate:)();
  v0 = v7[2];
  _DiscreteSymbolEffectModifier.EffectEnvironment.environment.getter(v7);
  v1 = v7[0];
  v2 = v7[1];
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  outlined init with take of SceneID(&v14, &__src[8]);
  __src[9].n128_u64[1] = v0;
  __src[10].n128_u64[0] = v1;
  __src[10].n128_u64[1] = v2;
  __src[11].n128_u8[0] = 0;
  __src[11].n128_u64[1] = 0;
  __src[12].n128_u64[0] = 0;
  __src[12].n128_u8[8] = 0;
  __src[13] = 0uLL;
  __src[14].n128_u8[0] = 1;
  __src[14].n128_u64[1] = 0;
  __src[15].n128_u64[0] = 0;
  __src[15].n128_u8[8] = 1;
  *(unsigned __int16 *)((char *)&__src[15].n128_u16[4] + 1) = 0;
  __src[16].n128_u64[0] = v3;
  __src[16].n128_u64[1] = v4;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SceneList.Item>, (uint64_t)&type metadata for SceneList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_187BF9830;
  memcpy((void *)(v5 + 32), __src, 0x110uLL);
  return v5;
}

uint64_t protocol witness for Rule.value.getter in conformance ResolvedUISceneAdaptor<A>.RootViewScene.MakeList@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ResolvedUISceneAdaptor.RootViewScene.MakeList.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance ResolvedUISceneAdaptor<A>.RootViewScene@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UISceneAdaptorConfiguration.Kind(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  switch(v3)
  {
    case 0:
      return !v4;
    case 1:
      return v4 == 1;
    case 2:
      return v4 == 2;
  }
  if (v4 < 3)
    return 0;
  if (*a1 == *a2 && v3 == v4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t Scene.safeAreaDisabled()(uint64_t a1, uint64_t a2)
{
  return Scene.modifier<A>(_:)(a1, a1, &unk_1E1AFA960, a2);
}

uint64_t static SceneSafeAreaDisabledModifier._makeScene(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  v5 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v7 = a2[5];
  v8 = a2[6];
  v9 = *((_DWORD *)a2 + 14);
  v12 = *a2;
  v13 = v5;
  v14 = v6;
  v15 = *(_OWORD *)(a2 + 3);
  v16 = v7;
  v17 = v8;
  v18 = v9;
  a3(&v19, a1, &v12);
  v12 = v8;
  v13 = v9;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  result = swift_bridgeObjectRelease();
  v11 = v20;
  *(_QWORD *)a4 = v19;
  *(_DWORD *)(a4 + 8) = v11;
  return result;
}

uint64_t closure #1 in static SceneSafeAreaDisabledModifier._makeScene(modifier:inputs:body:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v2)
  {
    v3 = (_QWORD *)result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_11:
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      v1 = result;
    }
    v4 = 0;
    v5 = *(_QWORD *)(v1 + 16);
    v6 = 208;
    do
    {
      if (v4 >= v5)
      {
        __break(1u);
        goto LABEL_11;
      }
      if ((*(_BYTE *)(v1 + v6) & 2) == 0)
        *(_BYTE *)(v1 + v6) |= 2u;
      ++v4;
      v6 += 272;
    }
    while (v2 != v4);
    *v3 = v1;
  }
  return result;
}

uint64_t implicit closure #1 in static SceneSafeAreaDisabledModifier._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  type metadata accessor for (_:)();
  type metadata accessor for External<(_:)>();
  lazy protocol witness table accessor for type External<(_:)> and conformance External<A>();
  swift_retain();
  v5 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return v5;
}

uint64_t specialized ResolvedUISceneAdaptor.init(id:kind:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v12 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15, v16, v12);
  result = AnyView.init<A>(_:)();
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3 & 1;
  *(_QWORD *)(a6 + 24) = a4;
  *(_QWORD *)(a6 + 32) = a5;
  *(_QWORD *)(a6 + 40) = result;
  return result;
}

uint64_t outlined copy of UISceneAdaptorConfiguration.Kind(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t type metadata accessor for ResolvedUISceneAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResolvedUISceneAdaptor);
}

uint64_t associated type witness table accessor for Scene.Body : Scene in UISceneAdaptor<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for UISceneAdaptor()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UISceneAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _OWORD *v14;
  unint64_t v15;
  _OWORD *v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 40) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_BYTE *)(a2 + 16);
    outlined copy of SceneID(*(_QWORD *)a2, v12, v13);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v13;
    v14 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
    v15 = a2 & 0xFFFFFFFFFFFFFFF8;
    v16 = (_OWORD *)(v15 + 24);
    if (*(_QWORD *)(v15 + 32) < 0xFFFFFFFFuLL)
    {
      *v14 = *v16;
    }
    else
    {
      *(_QWORD *)v14 = *(_QWORD *)v16;
      *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = *(_QWORD *)(v15 + 32);
      swift_bridgeObjectRetain();
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 40) & ~v7, (v15 + v7 + 40) & ~v7, v5);
  }
  return a1;
}

uint64_t destroy for UISceneAdaptor(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  outlined consume of SceneID(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 32) >= 0xFFFFFFFFuLL)
    swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for UISceneAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  _OWORD *v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of SceneID(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v10 = a2 & 0xFFFFFFFFFFFFFFF8;
  v11 = (_OWORD *)(v10 + 24);
  if (*(_QWORD *)(v10 + 32) < 0xFFFFFFFFuLL)
  {
    *v9 = *v11;
  }
  else
  {
    *(_QWORD *)v9 = *(_QWORD *)v11;
    *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = *(_QWORD *)(v10 + 32);
    swift_bridgeObjectRetain();
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (v10 + *(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithCopy for UISceneAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of SceneID(*(_QWORD *)a2, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  outlined consume of SceneID(v9, v10, v11);
  v12 = (_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v13 = (_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v14 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      *v12 = *v13;
      *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }
  if (v14 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *v12 = *v13;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 24))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), ((a2 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t initializeWithTake for UISceneAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((a2 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for UISceneAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _OWORD *v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of SceneID(v7, v8, v9);
  v10 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  v12 = (_OWORD *)(v11 + 24);
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)(v11 + 32) < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *v10 = *v12;
    goto LABEL_6;
  }
  *(_QWORD *)v10 = *(_QWORD *)v12;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = *(_QWORD *)(v11 + 32);
  swift_bridgeObjectRelease();
LABEL_6:
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (v11 + *(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for UISceneAdaptor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFC)
    v6 = 2147483644;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 40) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = a1 & 0xFFFFFFFFFFFFFFF8;
      if (v5 > 0x7FFFFFFC)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v15 + v7 + 40) & ~v7);
      v16 = *(_QWORD *)(v15 + 32);
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      v17 = v16 + 1;
      v18 = v16 - 2;
      if (v17 >= 4)
        return v18;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1877AF5A8 + 4 * byte_187C5CD00[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for UISceneAdaptor(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFCu)
    v6 = 2147483644;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1877AF848(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for SceneSafeAreaDisabledModifier;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

uint64_t outlined destroy of String(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEA968] - 8) + 8))();
  return a1;
}

ValueMetadata *type metadata accessor for UISceneAdaptorConfiguration()
{
  return &type metadata for UISceneAdaptorConfiguration;
}

void *type metadata accessor for SceneSafeAreaDisabledModifier()
{
  return &unk_1E1AFA960;
}

uint64_t getEnumTagSinglePayload for UISceneAdaptorConfiguration.Kind(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for UISceneAdaptorConfiguration.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for UISceneAdaptorConfiguration.Kind()
{
  return &type metadata for UISceneAdaptorConfiguration.Kind;
}

uint64_t associated type witness table accessor for Scene.Body : Scene in ResolvedUISceneAdaptor<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for ResolvedUISceneAdaptor.RootViewScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResolvedUISceneAdaptor.RootViewScene);
}

uint64_t outlined retain of SceneID(uint64_t a1)
{
  outlined copy of SceneID(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t outlined retain of UISceneAdaptorConfiguration.Kind(uint64_t a1)
{
  outlined copy of UISceneAdaptorConfiguration.Kind(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t partial apply for implicit closure #1 in static SceneSafeAreaDisabledModifier._makeScene(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #1 in static SceneSafeAreaDisabledModifier._makeScene(modifier:inputs:body:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1877AFA68()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for External<(_:)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<(_:)>)
  {
    type metadata accessor for (_:)();
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<(_:)>);
  }
}

unint64_t lazy protocol witness table accessor for type External<(_:)> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<(_:)> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<(_:)> and conformance External<A>)
  {
    type metadata accessor for External<(_:)>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<(_:)> and conformance External<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<(_:)> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<(_:)> and conformance External<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for External<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<(_:)> and conformance External<A>);
  }
  return result;
}

uint64_t destroy for UISceneAdaptorConfiguration(uint64_t a1)
{
  outlined consume of SceneID(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  if (*(_QWORD *)(a1 + 32) >= 3uLL)
    swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for UISceneAdaptorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  unint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of SceneID(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = (_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 >= 3)
  {
    *(_QWORD *)(a1 + 24) = *v7;
    *(_QWORD *)(a1 + 32) = v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v7;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UISceneAdaptorConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of SceneID(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of SceneID(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >= 3uLL)
  {
    if (v10 >= 3)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of String(a1 + 24);
    goto LABEL_6;
  }
  if (v10 < 3)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
LABEL_8:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UISceneAdaptorConfiguration(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  unint64_t v9;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of SceneID(v5, v6, v7);
  v8 = (_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 32) >= 3uLL)
  {
    v9 = *(_QWORD *)(a2 + 32);
    if (v9 >= 3)
    {
      *(_QWORD *)(a1 + 24) = *v8;
      *(_QWORD *)(a1 + 32) = v9;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of String(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v8;
LABEL_6:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UISceneAdaptorConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UISceneAdaptorConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_UNKNOWN **sub_1877AFE70()
{
  return &protocol witness table for ResolvedUISceneAdaptor<A>.RootViewScene;
}

uint64_t partial apply for closure #1 in static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t partial apply for implicit closure #1 in static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return implicit closure #1 in static ResolvedUISceneAdaptor.RootViewScene._makeScene(scene:inputs:)(v4[4], v4[2], v4[3], a4);
}

uint64_t type metadata accessor for ResolvedUISceneAdaptor.RootViewScene.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResolvedUISceneAdaptor.RootViewScene.MakeList);
}

void base witness table accessor for _AttributeBody in ResolvedUISceneAdaptor<A>.RootViewScene.MakeList()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t View.listLabeledContentPrefersHorizontalLayout()(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout();
  return View.input<A>(_:)((uint64_t)&type metadata for ListLabeledContentPrefersHorizontalLayout, a1, (uint64_t)&type metadata for ListLabeledContentPrefersHorizontalLayout, a2, v4);
}

uint64_t sub_1877AFEF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<ListLabeledContentPrefersHorizontalLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout, (uint64_t)&type metadata for ListLabeledContentPrefersHorizontalLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for LeadingTrailingLabeledContentStyle()
{
  return &type metadata for LeadingTrailingLabeledContentStyle;
}

ValueMetadata *type metadata accessor for LeadingTrailingLabeledContentStyle_Phone()
{
  return &type metadata for LeadingTrailingLabeledContentStyle_Phone;
}

ValueMetadata *type metadata accessor for LabeledContentUsesLegacyLayout()
{
  return &type metadata for LabeledContentUsesLegacyLayout;
}

ValueMetadata *type metadata accessor for ListLabeledContentPrefersHorizontalLayout()
{
  return &type metadata for ListLabeledContentPrefersHorizontalLayout;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance LabeledContentUsesLegacyLayout()
{
  static Semantics.v6.getter();
  return (isLinkedOnOrAfter(_:)() & 1) == 0;
}

uint64_t LeadingTrailingLabeledContentStyle_Phone._Body.imageScale.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  unsigned __int8 v20;
  unsigned __int8 v21;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 24);
  v18 = v2;
  v16 = *(_BYTE *)(v1 + 32);
  v17 = *(_BYTE *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(unsigned __int8 *)(v1 + 64);
  v6 = *(_BYTE *)(v1 + 65);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = *(unsigned __int8 *)(v1 + 80);
  v9 = *(_BYTE *)(v1 + 81);
  v19 = *(_BYTE *)(v1 + 96);
  v10 = *(_QWORD *)(v1 + 104);
  v11 = *(_BYTE *)(v1 + 112);
  v12 = *(_QWORD *)(v1 + 88);
  outlined copy of Environment<Bool>.Content(v2, v17);
  outlined copy of Environment<Bool>.Content(v3, v16);
  outlined copy of Environment<CGFloat?>.Content(v4, v5, v6);
  outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
  outlined copy of Environment<Bool>.Content(v12, v19);
  outlined copy of Environment<Bool>.Content(v10, v11);
  outlined copy of Environment<Bool>.Content(v10, v11);
  specialized Environment.wrappedValue.getter(v10, v11, &v21);
  outlined consume of Environment<Bool>.Content(v10, v11);
  outlined consume of Environment<Bool>.Content(v18, v17);
  outlined consume of Environment<Bool>.Content(v3, v16);
  outlined consume of Environment<CGFloat?>.Content(v4, v5, v6);
  outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
  outlined consume of Environment<Bool>.Content(v12, v19);
  result = outlined consume of Environment<Bool>.Content(v10, v11);
  if (v21 > 8u)
  {
    v14 = 0;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(v18, v17);
    outlined copy of Environment<Bool>.Content(v3, v16);
    outlined copy of Environment<CGFloat?>.Content(v4, v5, v6);
    outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
    outlined copy of Environment<Bool>.Content(v12, v19);
    outlined copy of Environment<Bool>.Content(v10, v11);
    outlined copy of Environment<Bool>.Content(v10, v11);
    specialized Environment.wrappedValue.getter(v10, v11, &v20);
    outlined consume of Environment<Bool>.Content(v10, v11);
    outlined consume of Environment<Bool>.Content(v18, v17);
    outlined consume of Environment<Bool>.Content(v3, v16);
    outlined consume of Environment<CGFloat?>.Content(v4, v5, v6);
    outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
    outlined consume of Environment<Bool>.Content(v12, v19);
    result = outlined consume of Environment<Bool>.Content(v10, v11);
    if (v20 >= 7u)
      v14 = 1;
    else
      v14 = 2;
  }
  *a1 = v14;
  return result;
}

uint64_t closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v30[4];
  uint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD v34[7];
  unsigned __int8 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  outlined init with copy of SubviewsCollection(a1, (uint64_t)v30);
  v4 = _VariadicView_Children.endIndex.getter();
  outlined init with copy of SubviewsCollection((uint64_t)v30, (uint64_t)&v48);
  v5 = 0;
  if (v4)
  {
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      v38 = v44;
      v39 = v45;
      v40 = v46;
      v41 = v47;
      v36 = v42;
      v37 = v43;
      outlined destroy of SubviewsCollection((uint64_t)&v48);
      v6 = *((_QWORD *)&v41 + 1);
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContainerValueViewTraitKey<LabelItemRole.ContainerKey>, (uint64_t)&type metadata for LabelItemRole.ContainerKey, (uint64_t)&protocol witness table for LabelItemRole.ContainerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContainerValueViewTraitKey);
      v34[0] = v6;
      v35 = 2;
      lazy protocol witness table accessor for type ContainerValueViewTraitKey<LabelItemRole.ContainerKey> and conformance ContainerValueViewTraitKey<A>();
      ViewTraitCollection.value<A>(for:defaultValue:)();
      v7 = v33;
      outlined destroy of Subview((uint64_t)&v36);
      if (v7 == 2 || (v7 & 1) != 0)
        break;
      result = _VariadicView_Children.endIndex.getter();
      if (v5 >= result)
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      ++v5;
      v9 = _VariadicView_Children.endIndex.getter();
      outlined init with copy of SubviewsCollection((uint64_t)v30, (uint64_t)&v48);
      if (v5 == v9)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    outlined destroy of SubviewsCollection((uint64_t)&v48);
  }
  outlined init with copy of SubviewsCollection((uint64_t)v30, (uint64_t)&v50);
  v48 = 0;
  v49 = v5;
  outlined destroy of SubviewsCollection((uint64_t)v30);
  outlined init with copy of SubviewsCollection(a1, (uint64_t)v30);
  v10 = _VariadicView_Children.endIndex.getter();
  outlined init with copy of SubviewsCollection((uint64_t)v30, (uint64_t)v34);
  v11 = 0;
  if (v10)
  {
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      v38 = v44;
      v39 = v45;
      v40 = v46;
      v41 = v47;
      v36 = v42;
      v37 = v43;
      outlined destroy of SubviewsCollection((uint64_t)v34);
      v12 = *((_QWORD *)&v41 + 1);
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContainerValueViewTraitKey<LabelItemRole.ContainerKey>, (uint64_t)&type metadata for LabelItemRole.ContainerKey, (uint64_t)&protocol witness table for LabelItemRole.ContainerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContainerValueViewTraitKey);
      v33 = v12;
      v32 = 2;
      lazy protocol witness table accessor for type ContainerValueViewTraitKey<LabelItemRole.ContainerKey> and conformance ContainerValueViewTraitKey<A>();
      ViewTraitCollection.value<A>(for:defaultValue:)();
      v13 = v35;
      outlined destroy of Subview((uint64_t)&v36);
      if (v13 == 2 || (v13 & 1) != 0)
        break;
      result = _VariadicView_Children.endIndex.getter();
      if (v11 >= result)
        goto LABEL_16;
      ++v11;
      v14 = _VariadicView_Children.endIndex.getter();
      outlined init with copy of SubviewsCollection((uint64_t)v30, (uint64_t)v34);
      if (v11 == v14)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    outlined destroy of SubviewsCollection((uint64_t)v34);
  }
  result = _VariadicView_Children.endIndex.getter();
  if (result < v11)
  {
LABEL_17:
    __break(1u);
  }
  else
  {
    v15 = result;
    outlined init with copy of SubviewsCollection((uint64_t)v30, (uint64_t)&v43);
    *(_QWORD *)&v42 = v11;
    *((_QWORD *)&v42 + 1) = v15;
    outlined destroy of SubviewsCollection((uint64_t)v30);
    v16 = v48 != v49;
    v17 = *(_QWORD *)(a2 + 88);
    v18 = *(_BYTE *)(a2 + 96);
    outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
    outlined copy of Environment<Bool>.Content(v17, v18);
    v19 = specialized Environment.wrappedValue.getter(v17, v18);
    outlined consume of Environment<Bool>.Content(v17, v18);
    outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
    outlined init with copy of SubviewsCollectionSlice((uint64_t)&v42, (uint64_t)&v36);
    outlined init with copy of SubviewsCollectionSlice((uint64_t)&v48, (uint64_t)v30);
    v20 = swift_allocObject();
    v21 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v20 + 88) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v20 + 104) = v21;
    *(_OWORD *)(v20 + 120) = *(_OWORD *)(a2 + 96);
    v22 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v20 + 24) = *(_OWORD *)a2;
    *(_OWORD *)(v20 + 40) = v22;
    v23 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v20 + 56) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v20 + 72) = v23;
    v24 = v39;
    *(_OWORD *)(v20 + 176) = v38;
    *(_OWORD *)(v20 + 192) = v24;
    v25 = v37;
    *(_OWORD *)(v20 + 144) = v36;
    *(_OWORD *)(v20 + 160) = v25;
    v26 = v30[0];
    *(_OWORD *)(v20 + 232) = v30[1];
    v27 = v30[3];
    *(_OWORD *)(v20 + 248) = v30[2];
    *(_OWORD *)(v20 + 264) = v27;
    *(_BYTE *)(v20 + 16) = v16;
    *(_BYTE *)(v20 + 136) = *(_BYTE *)(a2 + 112);
    *(_BYTE *)(v20 + 137) = v19 & v16;
    *(_QWORD *)(v20 + 208) = v40;
    *(_QWORD *)(v20 + 280) = v31;
    *(_OWORD *)(v20 + 216) = v26;
    *(_BYTE *)(a3 + 56) = 1;
    *(_QWORD *)(a3 + 64) = partial apply for closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter;
    *(_QWORD *)(a3 + 72) = v20;
    outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
    outlined destroy of SubviewsCollectionSlice((uint64_t)&v42);
    return outlined destroy of SubviewsCollectionSlice((uint64_t)&v48);
  }
  return result;
}

void *closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t TextLine;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD __src[51];
  _OWORD __dst[39];

  v14 = static HorizontalAlignment.leading.getter();
  TextLine = static VerticalAlignment._firstTextLineCenter.getter();
  v40 = v14;
  v41 = a1;
  v42 = a5;
  if ((a2 & 1) != 0)
  {
    v15 = *(_QWORD *)(a3 + 88);
    v16 = *(_BYTE *)(a3 + 96);
    outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
    outlined copy of Environment<Bool>.Content(v15, v16);
    v17 = specialized Environment.wrappedValue.getter(v15, v16);
    outlined consume of Environment<Bool>.Content(v15, v16);
    outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
    if ((v17 & 1) == 0)
    {
      v18 = *(_OWORD *)(a3 + 24);
      __dst[0] = *(_OWORD *)(a3 + 8);
      __dst[1] = v18;
      *(_OWORD *)((char *)&__dst[1] + 9) = *(_OWORD *)(a3 + 33);
      outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
      type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE18B8]);
      ScaledMetric.wrappedValue.getter();
      v19 = *(_QWORD *)(a3 + 56);
      v20 = *(unsigned __int8 *)(a3 + 64);
      v21 = *(unsigned __int8 *)(a3 + 65);
      outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
      outlined copy of Environment<CGFloat?>.Content(v19, v20, v21);
      specialized Environment.wrappedValue.getter(v19, v20 | (v21 << 8));
      outlined consume of Environment<CGFloat?>.Content(v19, v20, v21);
      outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
      outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
    }
  }
  v22 = *(_QWORD *)(a3 + 88);
  v23 = *(_BYTE *)(a3 + 96);
  outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
  outlined copy of Environment<Bool>.Content(v22, v23);
  v24 = specialized Environment.wrappedValue.getter(v22, v23);
  outlined consume of Environment<Bool>.Content(v22, v23);
  if ((v24 & 1) != 0)
  {
    __dst[0] = (unint64_t)static HorizontalAlignment.leading.getter();
    LOBYTE(__dst[1]) = 1;
    lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout();
  }
  else
  {
    v25 = *(_BYTE *)(a3 + 1);
    __dst[0] = xmmword_187C5CF80;
    LOBYTE(__dst[1]) = v25;
    lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout();
  }
  v26 = AnyLayout.init<A>(_:)();
  outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
  *(_QWORD *)&__dst[0] = v26;
  swift_retain();
  closure #1 in closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter(a4 & 1, a3, v42, v41, (uint64_t)__dst + 8);
  swift_release();
  EdgeInsets.init(_all:)();
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)__dst, (uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>);
  LOBYTE(__src[45]) = 2;
  __src[46] = v28;
  __src[47] = v30;
  __src[48] = v32;
  __src[49] = v34;
  LOBYTE(__src[50]) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>);
  if ((a4 & 1) != 0)
  {
    v36 = TextLine;
    v35 = v40;
  }
  else
  {
    v35 = static Alignment.leading.getter();
    v36 = v37;
  }
  closure #2 in closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter(a2 & 1, a6, a3, (uint64_t)&__dst[25] + 8);
  *((_QWORD *)&__dst[36] + 1) = v35;
  *(_QWORD *)&__dst[37] = v36;
  memcpy(__dst, __src, 0x191uLL);
  return memcpy(a7, __dst, 0x258uLL);
}

uint64_t closure #1 in closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  _BYTE v18[96];
  _OWORD v19[16];
  __int128 v20;
  _OWORD v21[5];
  _OWORD v22[17];

  if ((a1 & 1) != 0)
  {
    v9 = *(_OWORD *)(a2 + 24);
    v22[0] = *(_OWORD *)(a2 + 8);
    v22[1] = v9;
    *(_OWORD *)((char *)&v22[1] + 9) = *(_OWORD *)(a2 + 33);
    outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE18B8]);
    v17 = a5;
    v10 = a4;
    ScaledMetric.wrappedValue.getter();
    v11 = *(_QWORD *)(a2 + 56);
    v12 = *(unsigned __int8 *)(a2 + 64);
    v13 = *(unsigned __int8 *)(a2 + 65);
    outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
    outlined copy of Environment<CGFloat?>.Content(v11, v12, v13);
    specialized Environment.wrappedValue.getter(v11, v12 | (v13 << 8));
    v14 = v11;
    a4 = v10;
    a5 = v17;
    outlined consume of Environment<CGFloat?>.Content(v14, v12, v13);
    outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
    outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
  }
  if (*a3 == a3[1])
  {
    memset(v22, 0, 256);
  }
  else
  {
    v22[0] = (unint64_t)static HorizontalAlignment.leading.getter();
    LOBYTE(v22[1]) = 1;
    closure #1 in closure #1 in closure #1 in closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter(a3, (uint64_t)&v22[1] + 8);
  }
  v20 = (unint64_t)static HorizontalAlignment.leading.getter();
  LOBYTE(v21[0]) = 1;
  outlined init with copy of SubviewsCollection(a4, (uint64_t)v21 + 8);
  static Color.secondary.getter();
  v15 = MEMORY[0x1E0CE74A8];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for VStack<SubviewsCollection>, (uint64_t)&type metadata for SubviewsCollection, (uint64_t)&protocol witness table for SubviewsCollection, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
  lazy protocol witness table accessor for type VStack<SubviewsCollection> and conformance VStack<A>();
  View.defaultForegroundColor(_:)();
  swift_release();
  outlined destroy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>((uint64_t)&v20, &lazy cache variable for type metadata for VStack<SubviewsCollection>, (uint64_t)&type metadata for SubviewsCollection, (uint64_t)&protocol witness table for SubviewsCollection, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v15);
  v21[1] = v19[2];
  v21[2] = v19[3];
  v21[3] = v19[4];
  v21[4] = v19[5];
  v20 = v19[0];
  v21[0] = v19[1];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v20, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, a5, (uint64_t (*)(_QWORD))type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, a5 + 256, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v20, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[72];
  __int128 v21;
  _OWORD v22[3];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[25];
  _OWORD v33[8];
  _OWORD v34[3];

  result = *a1;
  v5 = a1[1];
  if (result == v5)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
  }
  else
  {
    if (result >= v5)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    _VariadicView_Children.subscript.getter();
  }
  v6 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Subview?, (uint64_t)&type metadata for Subview, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  lazy protocol witness table accessor for type Subview? and conformance <A> A?();
  View.bodyHeadOutdent(_:)();
  outlined destroy of TableRowList?((uint64_t)&v24, (uint64_t)&lazy cache variable for type metadata for Subview?, (uint64_t)&type metadata for Subview, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  EdgeInsets.init(_all:)();
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v33, (uint64_t)&v24, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
  LOBYTE(v31) = 2;
  *((_QWORD *)&v31 + 1) = v8;
  *(_QWORD *)v32 = v10;
  *(_QWORD *)&v32[8] = v12;
  *(_QWORD *)&v32[16] = v14;
  v32[24] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
  v33[6] = v30;
  v33[7] = v31;
  v34[0] = *(_OWORD *)v32;
  *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)&v32[9];
  v33[2] = v26;
  v33[3] = v27;
  v33[4] = v28;
  v33[5] = v29;
  v33[0] = v24;
  v33[1] = v25;
  result = outlined init with copy of SubviewsCollectionSlice((uint64_t)a1, (uint64_t)&v21);
  v15 = v21;
  if (*((uint64_t *)&v21 + 1) < (uint64_t)v21)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (__OFSUB__(*((_QWORD *)&v21 + 1), (_QWORD)v21))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (*((_QWORD *)&v21 + 1) == (_QWORD)v21)
  {
    v16 = 0;
LABEL_12:
    outlined init with copy of SubviewsCollectionSlice((uint64_t)&v21, (uint64_t)&v24);
    if (*((_QWORD *)&v15 + 1) == (_QWORD)v15)
      v17 = *((_QWORD *)&v24 + 1);
    else
      v17 = v16;
    result = outlined destroy of SubviewsCollectionSlice((uint64_t)&v24);
    v18 = *((_QWORD *)&v21 + 1);
    if (*((uint64_t *)&v21 + 1) >= v17)
    {
      outlined init with copy of SubviewsCollection((uint64_t)v22, (uint64_t)&v25);
      *(_QWORD *)&v24 = v17;
      *((_QWORD *)&v24 + 1) = v18;
      outlined destroy of SubviewsCollectionSlice((uint64_t)&v21);
      v22[1] = v26;
      v22[2] = v27;
      v23 = v28;
      v21 = v24;
      v22[0] = v25;
      outlined init with copy of ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>((uint64_t)v33, (uint64_t)&v24);
      outlined init with copy of SubviewsCollectionSlice((uint64_t)&v21, (uint64_t)v20);
      outlined init with copy of ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>((uint64_t)&v24, a2);
      outlined init with copy of SubviewsCollectionSlice((uint64_t)v20, a2 + 160);
      outlined destroy of SubviewsCollectionSlice((uint64_t)&v21);
      v19 = MEMORY[0x1E0CE2BD0];
      outlined destroy of TableRowList?((uint64_t)v33, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, (uint64_t)type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>);
      outlined destroy of SubviewsCollectionSlice((uint64_t)v20);
      return outlined destroy of TableRowList?((uint64_t)&v24, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, (uint64_t)type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, v19, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>);
    }
    goto LABEL_19;
  }
  v16 = v21 + 1;
  if (!__OFADD__((_QWORD)v21, 1))
  {
    if (v16 < (uint64_t)v21 || *((uint64_t *)&v21 + 1) < v16)
      goto LABEL_22;
    goto LABEL_12;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

__n128 closure #2 in closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter@<Q0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __n128 result;
  uint64_t (*v12)(void);
  __int128 v13;
  __int128 v14;
  __n128 v15;
  char v16;
  uint64_t KeyPath;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23[2];
  _OWORD v24[7];
  _QWORD v25[15];
  char v26;
  __int128 v27;
  _OWORD v28[2];
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  if ((a1 & 1) != 0)
  {
    v27 = (unint64_t)static VerticalAlignment.center.getter();
    LOBYTE(v28[0]) = 1;
    outlined init with copy of SubviewsCollectionSlice(a2, (uint64_t)v28 + 8);
    v7 = *(_QWORD *)(a3 + 72);
    v8 = *(unsigned __int8 *)(a3 + 80);
    v9 = *(unsigned __int8 *)(a3 + 81);
    outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
    outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
    specialized Environment.wrappedValue.getter(v7, v8 | (v9 << 8), (uint64_t)v25);
    outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
    v10 = v25[0];
    if (v25[0] == 1)
    {
      static Color.accentColor.getter();
    }
    else
    {
      static Color.secondary.getter();
      if (v10)
        swift_release();
    }
    outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a3);
    v12 = MEMORY[0x1E0CE73C0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, (uint64_t)&type metadata for SubviewsCollectionSlice, (uint64_t)&protocol witness table for SubviewsCollectionSlice, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    lazy protocol witness table accessor for type HStack<SubviewsCollectionSlice> and conformance HStack<A>();
    View.defaultForegroundColor(_:)();
    swift_release();
    outlined destroy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>((uint64_t)&v27, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, (uint64_t)&type metadata for SubviewsCollectionSlice, (uint64_t)&protocol witness table for SubviewsCollectionSlice, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v12);
    v13 = *(_OWORD *)(a3 + 80);
    v30 = *(_OWORD *)(a3 + 64);
    v31 = v13;
    v32 = *(_OWORD *)(a3 + 96);
    LOBYTE(v33) = *(_BYTE *)(a3 + 112);
    v14 = *(_OWORD *)(a3 + 16);
    v27 = *(_OWORD *)a3;
    v28[0] = v14;
    v15 = *(__n128 *)(a3 + 48);
    v28[1] = *(_OWORD *)(a3 + 32);
    v29 = v15;
    LeadingTrailingLabeledContentStyle_Phone._Body.imageScale.getter(v23);
    v16 = v23[0];
    KeyPath = swift_getKeyPath();
    outlined init with copy of ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>((uint64_t)v24, (uint64_t)v25);
    v25[14] = KeyPath;
    v26 = v16;
    outlined destroy of ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>((uint64_t)v24);
    v18 = *(_OWORD *)(a3 + 24);
    v27 = *(_OWORD *)(a3 + 8);
    v28[0] = v18;
    *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)(a3 + 33);
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE18B8]);
    ScaledMetric.wrappedValue.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v25, (uint64_t)&v27, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    v34 = v24[0];
    v35 = v24[1];
    v36 = v24[2];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    v19 = v35;
    *(_OWORD *)(a4 + 128) = v34;
    *(_OWORD *)(a4 + 144) = v19;
    *(_OWORD *)(a4 + 160) = v36;
    v20 = v31;
    *(_OWORD *)(a4 + 64) = v30;
    *(_OWORD *)(a4 + 80) = v20;
    v21 = v33;
    *(_OWORD *)(a4 + 96) = v32;
    *(_OWORD *)(a4 + 112) = v21;
    v22 = v28[0];
    *(_OWORD *)a4 = v27;
    *(_OWORD *)(a4 + 16) = v22;
    result = v29;
    *(_OWORD *)(a4 + 32) = v28[1];
    *(__n128 *)(a4 + 48) = result;
  }
  else
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LeadingTrailingLabeledContentStyle_Phone._Body()
{
  return specialized static View._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance LeadingTrailingLabeledContentStyle_Phone._Body@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[7];
  char v12;

  v3 = *(_OWORD *)(v1 + 80);
  v11[4] = *(_OWORD *)(v1 + 64);
  v11[5] = v3;
  v11[6] = *(_OWORD *)(v1 + 96);
  v12 = *(_BYTE *)(v1 + 112);
  v4 = *(_OWORD *)(v1 + 16);
  v11[0] = *(_OWORD *)v1;
  v11[1] = v4;
  v5 = *(_OWORD *)(v1 + 48);
  v11[2] = *(_OWORD *)(v1 + 32);
  v11[3] = v5;
  v6 = swift_allocObject();
  v7 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v6 + 96) = v7;
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(v1 + 96);
  *(_BYTE *)(v6 + 128) = *(_BYTE *)(v1 + 112);
  v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v6 + 32) = v8;
  v9 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v6 + 64) = v9;
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = partial apply for closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter;
  *(_QWORD *)(a1 + 72) = v6;
  return outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body((uint64_t)v11);
}

uint64_t LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, int *a5, double a6, uint64_t a7, char a8)
{
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  double v23;
  char v24;
  uint64_t v25;
  double v26;
  char v27;
  char v28;
  uint64_t v29;
  double v30;
  char v31;
  uint64_t v32;
  double v33;
  char v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  __int128 v51;
  char v52;
  char v53;
  __int128 v54;
  char v55;

  v13 = *a5;
  v14 = *((_QWORD *)a5 + 1);
  v15 = *((_BYTE *)a5 + 16);
  v16 = *((_BYTE *)a5 + 17);
  LODWORD(v51) = *a5;
  *((_QWORD *)&v51 + 1) = v14;
  v52 = v15;
  v53 = v16;
  swift_bridgeObjectRetain();
  v17 = LayoutSubviews.endIndex.getter();
  if (LayoutSubviews.endIndex.getter() < 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18 = LayoutSubviews.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v17 < 0 || v18 < v17)
    goto LABEL_22;
  if (!v17)
    return result;
  if (v17 != 2)
  {
    if (v17 == 1)
    {
      v53 = v16;
      LayoutSubviews.subscript.getter();
      v51 = v54;
      v52 = v55;
      return LayoutSubview.sizeThatFits(_:)();
    }
    goto LABEL_23;
  }
  LayoutSubviews.subscript.getter();
  v49 = a3;
  v47 = a2;
  v48 = HIDWORD(v54);
  LODWORD(v51) = v13;
  *((_QWORD *)&v51 + 1) = v14;
  v52 = v15;
  v53 = v16;
  LayoutSubviews.subscript.getter();
  v43 = DWORD1(v54);
  v44 = v54;
  v42 = DWORD2(v54);
  v46 = v55;
  LOBYTE(v51) = a2 & 1;
  LayoutSubview.dimensions(in:)();
  v20 = v51;
  v40 = DWORD1(v54);
  v41 = v54;
  v45 = v55;
  LOBYTE(v51) = a2 & 1;
  LayoutSubview.dimensions(in:)();
  v21 = v51;
  swift_retain();
  v22 = static VerticalAlignment.firstTextBaseline.getter();
  *(_QWORD *)&v51 = v20;
  v23 = COERCE_DOUBLE(MEMORY[0x18D757C6C](v22));
  if ((v24 & 1) != 0)
    goto LABEL_16;
  v25 = static VerticalAlignment.lastTextBaseline.getter();
  *(_QWORD *)&v51 = v20;
  v26 = COERCE_DOUBLE(MEMORY[0x18D757C6C](v25));
  v28 = v27;
  swift_release();
  if ((v28 & 1) != 0 || vabdd_f64(v23, v26) >= 0.5)
    goto LABEL_17;
  swift_retain();
  v29 = static VerticalAlignment.firstTextBaseline.getter();
  v51 = v21;
  v30 = COERCE_DOUBLE(MEMORY[0x18D757C6C](v29));
  if ((v31 & 1) != 0)
  {
LABEL_16:
    swift_release();
LABEL_17:
    v36 = HIDWORD(v54);
    v37 = DWORD2(v54);
    v38 = static VerticalAlignment.center.getter();
    goto LABEL_18;
  }
  v32 = static VerticalAlignment.lastTextBaseline.getter();
  v51 = v21;
  v33 = COERCE_DOUBLE(MEMORY[0x18D757C6C](v32));
  v35 = v34;
  swift_release();
  if ((v35 & 1) != 0 || vabdd_f64(v30, v33) >= 0.5)
    goto LABEL_17;
  v36 = HIDWORD(v54);
  v37 = DWORD2(v54);
  v38 = static VerticalAlignment.firstTextBaseline.getter();
LABEL_18:
  v51 = v54;
  v52 = v55;
  *((_QWORD *)&v54 + 1) = __PAIR64__(v36, v37);
  LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.fitOnSingleLine(_:_:proposal:alignment:)((unsigned int *)&v51, a6, (uint64_t)&v54, a1, v47 & 1, v49, a4 & 1, v38, a8 & 1);
  if ((v39 & 1) == 0)
  {
    *(_QWORD *)&v51 = __PAIR64__(v43, v44);
    *((_QWORD *)&v51 + 1) = __PAIR64__(v48, v42);
    v52 = v46;
    LOBYTE(v54) = v47 & 1;
    LayoutSubview.sizeThatFits(_:)();
    *(_QWORD *)&v51 = __PAIR64__(v40, v41);
    *((_QWORD *)&v51 + 1) = __PAIR64__(v36, v37);
    v52 = v45;
    LOBYTE(v54) = v47 & 1;
    LayoutSubview.sizeThatFits(_:)();
  }
  swift_release();
  return swift_release();
}

double LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.fitOnSingleLine(_:_:proposal:alignment:)(unsigned int *a1, double a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  double v23;
  double v24;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;

  v11 = *a1;
  v10 = a1[1];
  v13 = a1[2];
  v12 = a1[3];
  v14 = *((_BYTE *)a1 + 16);
  static ProposedViewSize.unspecified.getter();
  LOBYTE(v36) = v15 & 1;
  LayoutSubview.dimensions(in:)();
  v16 = v36;
  static ProposedViewSize.unspecified.getter();
  LOBYTE(v36) = v17 & 1;
  v35 = v18 & 1;
  LayoutSubview.dimensions(in:)();
  v20 = v36;
  v19 = v37;
  v21 = v38;
  v22 = v39;
  v36 = v16;
  v31 = v20;
  v32 = v37;
  v33 = v38;
  v34 = v39;
  v23 = LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.calculateSize(_:_:alignment:)(a2, (uint64_t)&v36, (uint64_t)&v31, a8);
  if ((a5 & 1) != 0)
    v24 = INFINITY;
  else
    v24 = *(double *)&a4;
  if (v23 <= v24)
  {
    swift_release();
  }
  else
  {
    if ((a9 & 1) == 0)
    {
      swift_release();
      swift_release();
      return v23;
    }
    v36 = v20;
    v37 = v19;
    v38 = v21;
    v39 = v22;
    ViewDimensions.width.getter();
    v31 = __PAIR64__(v10, v11);
    v32 = __PAIR64__(v12, v13);
    LOBYTE(v33) = v14;
    LOBYTE(v36) = 0;
    v35 = a7 & 1;
    LayoutSubview.dimensions(in:)();
    v31 = v20;
    v32 = v19;
    v33 = v21;
    v34 = v22;
    v23 = LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.calculateSize(_:_:alignment:)(a2, (uint64_t)&v36, (uint64_t)&v31, a8);
    swift_release();
    swift_release();
  }
  swift_release();
  return v23;
}

uint64_t LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, int *a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10, uint64_t a11, char a12)
{
  int v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  double v32;
  uint64_t v33;
  double v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  double v40;
  uint64_t v41;
  double v42;
  char v43;
  char v44;
  char v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  CGFloat v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  char v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  char v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;

  v20 = *a5;
  v21 = *((_QWORD *)a5 + 1);
  v22 = *((_BYTE *)a5 + 16);
  v23 = *((_BYTE *)a5 + 17);
  LODWORD(v80) = *a5;
  *((_QWORD *)&v80 + 1) = v21;
  LOBYTE(v81) = v22;
  BYTE1(v81) = v23;
  swift_bridgeObjectRetain();
  v24 = LayoutSubviews.endIndex.getter();
  if (LayoutSubviews.endIndex.getter() < 0)
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v25 = LayoutSubviews.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v24 < 0 || v25 < v24)
    goto LABEL_23;
  if (!v24)
    return result;
  if (v24 != 2)
  {
    if (v24 == 1)
    {
      BYTE1(v81) = v23;
      LayoutSubviews.subscript.getter();
      v80 = v85;
      LOBYTE(v81) = v86;
      static UnitPoint.topLeading.getter();
      return LayoutSubview.place(at:anchor:proposal:)();
    }
    goto LABEL_24;
  }
  v63 = a12;
  v68 = a9;
  LayoutSubviews.subscript.getter();
  LODWORD(v80) = v20;
  *((_QWORD *)&v80 + 1) = v21;
  LOBYTE(v81) = v22;
  BYTE1(v81) = v23;
  LayoutSubviews.subscript.getter();
  v77 = v85;
  v72 = v86;
  v73 = HIDWORD(v85);
  v71 = v85;
  v66 = DWORD2(v85);
  v67 = DWORD1(v85);
  v64 = a2;
  v65 = HIDWORD(v85);
  LOBYTE(v80) = a2 & 1;
  LayoutSubview.dimensions(in:)();
  v27 = v80;
  v74 = DWORD2(v85);
  v75 = DWORD1(v85);
  LayoutSubview.dimensions(in:)();
  v70 = v80;
  v69 = v81;
  v58 = v83;
  v59 = v82;
  v57 = v84;
  swift_retain();
  v28 = static VerticalAlignment.firstTextBaseline.getter();
  v60 = v81;
  v61 = v84;
  v29 = v82;
  v62 = v83;
  v30 = MEMORY[0x18D757C6C](v28);
  if ((v31 & 1) != 0)
    goto LABEL_15;
  v32 = *(double *)&v30;
  v33 = static VerticalAlignment.lastTextBaseline.getter();
  v34 = COERCE_DOUBLE(MEMORY[0x18D757C6C](v33));
  v36 = v35;
  swift_release();
  if ((v36 & 1) != 0 || vabdd_f64(v32, v34) >= 0.5)
    goto LABEL_16;
  swift_retain();
  v37 = static VerticalAlignment.firstTextBaseline.getter();
  *((_QWORD *)&v80 + 1) = v21;
  v38 = MEMORY[0x18D757C6C](v37);
  if ((v39 & 1) != 0)
  {
LABEL_15:
    swift_release();
LABEL_16:
    v45 = v86;
    v46 = HIDWORD(v85);
    v47 = static VerticalAlignment.center.getter();
    goto LABEL_17;
  }
  v40 = *(double *)&v38;
  v41 = static VerticalAlignment.lastTextBaseline.getter();
  *((_QWORD *)&v80 + 1) = v21;
  v42 = COERCE_DOUBLE(MEMORY[0x18D757C6C](v41));
  v44 = v43;
  swift_release();
  if ((v44 & 1) != 0 || vabdd_f64(v40, v42) >= 0.5)
    goto LABEL_16;
  v45 = v86;
  v46 = HIDWORD(v85);
  v47 = static VerticalAlignment.firstTextBaseline.getter();
LABEL_17:
  v48 = v85;
  v80 = v85;
  LOBYTE(v81) = v45;
  HIDWORD(v85) = v46;
  v76 = v47;
  LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.fitOnSingleLine(_:_:proposal:alignment:)((unsigned int *)&v80, a10, (uint64_t)&v85, a1, v64 & 1, a3, a4 & 1, v47, v63 & 1);
  if ((v49 & 1) != 0)
  {
    *(_QWORD *)&v80 = v70;
    *((_QWORD *)&v80 + 1) = v21;
    v81 = v69;
    v82 = v59;
    v83 = v58;
    v84 = v57;
    ViewDimensions.width.getter();
    *(_QWORD *)&v85 = __PAIR64__(v67, v48);
    *((_QWORD *)&v85 + 1) = __PAIR64__(v65, v66);
    v86 = v45;
    LOBYTE(v80) = 0;
    LayoutSubview.dimensions(in:)();
    v50 = v80;
    v51 = v81;
    v52 = v82;
    v53 = v83;
    v54 = v84;
    v55 = static VerticalAlignment.center.getter();
    v80 = v50;
    v81 = v51;
    v82 = v52;
    v83 = v53;
    v84 = v54;
    MEMORY[0x18D757C9C](v55);
    v80 = v50;
    v81 = v51;
    v82 = v52;
    v83 = v53;
    v84 = v54;
    MEMORY[0x18D757C9C](v76);
    v56 = static VerticalAlignment.center.getter();
    *(_QWORD *)&v80 = v70;
    *((_QWORD *)&v80 + 1) = v21;
    v81 = v69;
    v82 = v59;
    v83 = v58;
    v84 = v57;
    MEMORY[0x18D757C9C](v56);
    *(_QWORD *)&v80 = v70;
    *((_QWORD *)&v80 + 1) = v21;
    v81 = v69;
    v82 = v59;
    v83 = v58;
    v84 = v57;
    MEMORY[0x18D757C9C](v76);
    *(_QWORD *)&v80 = __PAIR64__(v67, v71);
    *((_QWORD *)&v80 + 1) = __PAIR64__(v65, v66);
    LOBYTE(v81) = v45;
    v87.origin.x = a6;
    v87.origin.y = a7;
    v87.size.width = a8;
    v87.size.height = v68;
    CGRectGetMinX(v87);
    v88.origin.x = a6;
    v88.origin.y = a7;
    v88.size.width = a8;
    v88.size.height = v68;
    CGRectGetMidY(v88);
    static UnitPoint.leading.getter();
    LOBYTE(v85) = 0;
    LayoutSubview.place(at:anchor:proposal:)();
    *(_QWORD *)&v80 = __PAIR64__(v75, v77);
    *((_QWORD *)&v80 + 1) = __PAIR64__(v73, v74);
    LOBYTE(v81) = v72;
    v89.origin.x = a6;
    v89.origin.y = a7;
    v89.size.width = a8;
    v89.size.height = v68;
    CGRectGetMaxX(v89);
    v90.origin.x = a6;
    v90.origin.y = a7;
    v90.size.width = a8;
    v90.size.height = v68;
    CGRectGetMidY(v90);
    static UnitPoint.trailing.getter();
    LOBYTE(v85) = v64 & 1;
    LayoutSubview.place(at:anchor:proposal:)();
    swift_release();
  }
  else
  {
    *(_QWORD *)&v80 = __PAIR64__(v67, v48);
    *((_QWORD *)&v80 + 1) = __PAIR64__(v65, v66);
    LOBYTE(v81) = v45;
    static UnitPoint.topLeading.getter();
    LOBYTE(v85) = v64 & 1;
    LayoutSubview.place(at:anchor:proposal:)();
    *(_QWORD *)&v85 = __PAIR64__(v75, v77);
    *((_QWORD *)&v85 + 1) = __PAIR64__(v73, v74);
    v86 = v72;
    v91.origin.x = a6;
    v91.origin.y = a7;
    v91.size.width = a8;
    v91.size.height = a9;
    CGRectGetMinX(v91);
    v92.origin.x = a6;
    v92.origin.y = a7;
    v92.size.width = a8;
    v92.size.height = a9;
    CGRectGetMinY(v92);
    *(_QWORD *)&v80 = v27;
    *((_QWORD *)&v80 + 1) = v21;
    v81 = v60;
    v82 = v29;
    v83 = v62;
    v84 = v61;
    ViewDimensions.height.getter();
    static UnitPoint.topLeading.getter();
    LOBYTE(v80) = v64 & 1;
    LayoutSubview.place(at:anchor:proposal:)();
  }
  swift_release();
  return swift_release();
}

double LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.calculateSize(_:_:alignment:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v10;
  double v11;

  v5 = static VerticalAlignment.center.getter();
  MEMORY[0x18D757C9C](v5);
  MEMORY[0x18D757C9C](a4);
  v6 = static VerticalAlignment.center.getter();
  MEMORY[0x18D757C9C](v6);
  MEMORY[0x18D757C9C](a4);
  ViewDimensions.width.getter();
  v11 = v7;
  ViewDimensions.width.getter();
  v10 = v8;
  ViewDimensions.height.getter();
  ViewDimensions.height.getter();
  ViewDimensions.height.getter();
  return v11 + v10 + a1;
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout(uint64_t a1, char a2, uint64_t a3, char a4, int *a5, uint64_t a6)
{
  uint64_t v6;

  return LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5, *(double *)v6, a6, *(_BYTE *)(v6 + 16));
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout(uint64_t a1, char a2, uint64_t a3, char a4, int *a5, uint64_t a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  uint64_t v10;

  return LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.placeSubviews(in:proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5, a7, a8, a9, a10, *(double *)v10, a6, *(_BYTE *)(v10 + 16));
}

double protocol witness for LabeledContentStyle.makeBody(configuration:) in conformance LeadingTrailingLabeledContentStyle_Phone@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t KeyPath;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  double v17;
  char v18;

  v11 = *a1;
  KeyPath = swift_getKeyPath();
  v10 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  v8 = swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  v7 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  v3 = swift_getKeyPath();
  v4 = swift_getKeyPath();
  ScaledMetric.init(wrappedValue:)();
  result = v17;
  *(_BYTE *)a2 = v11;
  *(_BYTE *)(a2 + 1) = 1;
  *(_QWORD *)(a2 + 8) = v13;
  *(_BYTE *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v15;
  *(_BYTE *)(a2 + 32) = v16;
  *(double *)(a2 + 40) = v17;
  *(_BYTE *)(a2 + 48) = v18;
  *(_QWORD *)(a2 + 56) = KeyPath;
  *(_WORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = v10;
  *(_WORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = v9;
  *(_BYTE *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = v8;
  *(_BYTE *)(a2 + 112) = 0;
  *(_WORD *)(a2 + 120) = v11;
  *(_QWORD *)(a2 + 128) = v13;
  *(_BYTE *)(a2 + 136) = v14;
  *(_QWORD *)(a2 + 144) = v15;
  *(_BYTE *)(a2 + 152) = v16;
  *(double *)(a2 + 160) = v17;
  *(_BYTE *)(a2 + 168) = v18;
  *(_QWORD *)(a2 + 176) = v7;
  *(_WORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = v6;
  *(_WORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = v3;
  *(_BYTE *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = v4;
  *(_BYTE *)(a2 + 232) = 0;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ListLabeledContentPrefersHorizontalLayout()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ListLabeledContentPrefersHorizontalLayout()
{
  lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout();
  return PropertyList.subscript.setter();
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in LeadingTrailingLabeledContentStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t LeadingTrailingLabeledContentStyle.makeBody(configuration:)(uint64_t a1, unint64_t a2, char a3)
{
  char v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __n128 v15;
  char v16;
  __n128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  __int128 v23;

  v4 = a3 & 1;
  v5 = static VerticalAlignment.center.getter();
  closure #1 in LeadingTrailingLabeledContentStyle.makeBody(configuration:)(a2, v4, &v15);
  v6 = v16;
  v7 = v17.n128_u64[0];
  v8 = v17.n128_u8[8];
  v9 = v18;
  v10 = v20;
  v11 = v21;
  v12 = v15;
  v13 = v19;
  v15 = (__n128)(unint64_t)v5;
  v16 = 1;
  v17 = v12;
  LOBYTE(v18) = v6;
  *(_QWORD *)&v19 = v7;
  BYTE8(v19) = v8;
  v20 = v9;
  v21 = v13;
  v22 = v10;
  v23 = v11;
  Spacing.init()();
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>, MEMORY[0x1E0CE73D0]);
  View.spacing(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

__n128 closure #1 in LeadingTrailingLabeledContentStyle.makeBody(configuration:)@<Q0>(unint64_t a1@<X0>, char a2@<W1>, __n128 *a3@<X8>)
{
  uint64_t v6;
  __n128 result;
  __n128 v8;
  unsigned __int8 v9;
  unint64_t v10;
  unint64_t v11;

  v6 = static HorizontalAlignment.leading.getter();
  static VerticalAlignment.center.getter();
  static Color.secondary.getter();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for HStack<LabeledContentStyleConfiguration.Content>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
  lazy protocol witness table accessor for type HStack<LabeledContentStyleConfiguration.Content> and conformance HStack<A>();
  View.defaultForegroundColor(_:)();
  swift_release();
  result = v8;
  a3->n128_u64[0] = v6;
  a3->n128_u64[1] = a1;
  a3[1].n128_u8[0] = a2 & 1;
  a3[1].n128_u64[1] = 0;
  a3[2].n128_u8[0] = 1;
  a3[2].n128_u64[1] = 0xBFF0000000000000;
  a3[3] = v8;
  a3[4].n128_u8[0] = v9;
  a3[4].n128_u64[1] = v10;
  a3[5].n128_u64[0] = v11;
  return result;
}

uint64_t protocol witness for LabeledContentStyle.makeBody(configuration:) in conformance LeadingTrailingLabeledContentStyle(uint64_t a1)
{
  uint64_t v1;

  return LeadingTrailingLabeledContentStyle.makeBody(configuration:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in LeadingTrailingLabeledContentStyle_Phone()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ListLabeledContentPrefersHorizontalLayout()
{
  return &protocol witness table for ListLabeledContentPrefersHorizontalLayout;
}

uint64_t AdaptiveLeadingTrailingLabeledContentStyle.Body.body.getter()
{
  char *v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;

  v1 = *v0;
  v2 = v0[1];
  static HorizontalAlignment.leading.getter();
  v3 = swift_allocObject();
  *(_BYTE *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 17) = v2;
  static VerticalAlignment.center.getter();
  KeyPath = swift_getKeyPath();
  v6 = swift_getKeyPath();
  Spacing.init()();
  type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance AccessibilityAdaptiveStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>, (uint64_t)&protocol conformance descriptor for AccessibilityAdaptiveStack<A>);
  View.spacing(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool>.Content(KeyPath, 0);
  return outlined consume of Environment<Bool>.Content(v6, 0);
}

uint64_t closure #1 in AdaptiveLeadingTrailingLabeledContentStyle.Body.body.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BOOL8 v3;
  char v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = (a1 & 1) == 0;
  v4 = a1 & 1;
  if ((a1 & 1) != 0)
    v5 = 0;
  else
    v5 = 0xBFF0000000000000;
  static Color.secondary.getter();
  View.defaultForegroundColor(_:)();
  result = swift_release();
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v8;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AdaptiveLeadingTrailingLabeledContentStyle.Body(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  _QWORD v9[2];
  int v10;
  uint64_t v11;

  v1 = *a1;
  v2 = a1[1];
  v3 = *((_DWORD *)a1 + 4);
  v4 = a1[3];
  type metadata accessor for <<opaque return type of View.spacing(_:)>>.0(0);
  v6 = v5;
  v9[0] = v1;
  v9[1] = v2;
  v10 = v3;
  v11 = v4;
  type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>(255);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance AccessibilityAdaptiveStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>, (uint64_t)&protocol conformance descriptor for AccessibilityAdaptiveStack<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(OpaqueTypeConformance2 + 40))(v9, v6, OpaqueTypeConformance2);
}

_BYTE *protocol witness for LabeledContentStyle.makeBody(configuration:) in conformance AdaptiveLeadingTrailingLabeledContentStyle@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  char *v2;
  char v3;

  v3 = *v2;
  *a2 = *result;
  a2[1] = v3;
  return result;
}

unsigned __int8 *sub_1877B2D2C@<X0>(unsigned __int8 *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result - 7 < 5;
  return result;
}

void type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>, &lazy protocol witness table cache variable for type TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
}

void type metadata accessor for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>))
  {
    type metadata accessor for StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>();
    type metadata accessor for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>();
    type metadata accessor for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>, &lazy cache variable for type metadata for HStack<LabeledContentStyleConfiguration.Content>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Content);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>));
  }
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>)
  {
    type metadata accessor for VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LabelGroup<LabeledContentStyleConfiguration.Label>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LabelGroup);
    lazy protocol witness table accessor for type LabelGroup<LabeledContentStyleConfiguration.Label> and conformance LabelGroup<A>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>);
  }
}

unint64_t lazy protocol witness table accessor for type LabelGroup<LabeledContentStyleConfiguration.Label> and conformance LabelGroup<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LabelGroup<LabeledContentStyleConfiguration.Label> and conformance LabelGroup<A>;
  if (!lazy protocol witness table cache variable for type LabelGroup<LabeledContentStyleConfiguration.Label> and conformance LabelGroup<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LabelGroup<LabeledContentStyleConfiguration.Label>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Label, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LabelGroup);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelGroup<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelGroup<LabeledContentStyleConfiguration.Label> and conformance LabelGroup<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<LabeledContentStyleConfiguration.Content> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<LabeledContentStyleConfiguration.Content> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<LabeledContentStyleConfiguration.Content> and conformance HStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<LabeledContentStyleConfiguration.Content>, (uint64_t)&type metadata for LabeledContentStyleConfiguration.Content, (uint64_t)&protocol witness table for LabeledContentStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<LabeledContentStyleConfiguration.Content> and conformance HStack<A>);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AdaptiveLeadingTrailingLabeledContentStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1877B3048 + 4 * byte_187C5CF95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1877B307C + 4 * byte_187C5CF90[v4]))();
}

uint64_t sub_1877B307C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877B3084(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1877B308CLL);
  return result;
}

uint64_t sub_1877B3098(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1877B30A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1877B30A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877B30AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AdaptiveLeadingTrailingLabeledContentStyle()
{
  return &type metadata for AdaptiveLeadingTrailingLabeledContentStyle;
}

uint64_t destroy for LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(_BYTE *)(a1 + 65));
  outlined consume of Environment<ListItemTint?>.Content(*(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), *(_BYTE *)(a1 + 81));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 104), *(_BYTE *)(a1 + 112));
}

uint64_t initializeWithCopy for LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;
  unsigned __int8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v2 = a2;
  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_BYTE *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v2 + 48);
  v8 = *(_QWORD *)(v2 + 56);
  v9 = *(_BYTE *)(v2 + 65);
  v10 = *(_BYTE *)(v2 + 64);
  outlined copy of Environment<CGFloat?>.Content(v8, v10, v9);
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 65) = v9;
  v11 = *(_QWORD *)(v2 + 72);
  v12 = *(_BYTE *)(v2 + 81);
  v13 = *(_BYTE *)(v2 + 80);
  outlined copy of Environment<ListItemTint?>.Content(v11, v13, v12);
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 81) = v12;
  v14 = *(_QWORD *)(v2 + 88);
  v15 = *(_BYTE *)(v2 + 96);
  outlined copy of Environment<Bool>.Content(v14, v15);
  *(_QWORD *)(a1 + 88) = v14;
  *(_BYTE *)(a1 + 96) = v15;
  v16 = *(_QWORD *)(v2 + 104);
  LOBYTE(v2) = *(_BYTE *)(v2 + 112);
  outlined copy of Environment<Bool>.Content(v16, v2);
  *(_QWORD *)(a1 + 104) = v16;
  *(_BYTE *)(a1 + 112) = v2;
  return a1;
}

uint64_t assignWithCopy for LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned __int8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v2 = a2;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(v2 + 24);
  v9 = *(_BYTE *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v2 + 48);
  v12 = *(_QWORD *)(v2 + 56);
  v13 = *(_BYTE *)(v2 + 65);
  v14 = *(_BYTE *)(v2 + 64);
  outlined copy of Environment<CGFloat?>.Content(v12, v14, v13);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_BYTE *)(a1 + 65);
  *(_QWORD *)(a1 + 56) = v12;
  v17 = *(unsigned __int8 *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v14;
  *(_BYTE *)(a1 + 65) = v13;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = *(_QWORD *)(v2 + 72);
  v19 = *(_BYTE *)(v2 + 81);
  v20 = *(_BYTE *)(v2 + 80);
  outlined copy of Environment<ListItemTint?>.Content(v18, v20, v19);
  v21 = *(_QWORD *)(a1 + 72);
  v22 = *(_BYTE *)(a1 + 81);
  *(_QWORD *)(a1 + 72) = v18;
  v23 = *(unsigned __int8 *)(a1 + 80);
  *(_BYTE *)(a1 + 80) = v20;
  *(_BYTE *)(a1 + 81) = v19;
  outlined consume of Environment<ListItemTint?>.Content(v21, v23, v22);
  v24 = *(_QWORD *)(v2 + 88);
  v25 = *(_BYTE *)(v2 + 96);
  outlined copy of Environment<Bool>.Content(v24, v25);
  v26 = *(_QWORD *)(a1 + 88);
  v27 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v24;
  *(_BYTE *)(a1 + 96) = v25;
  outlined consume of Environment<Bool>.Content(v26, v27);
  v28 = *(_QWORD *)(v2 + 104);
  LOBYTE(v2) = *(_BYTE *)(v2 + 112);
  outlined copy of Environment<Bool>.Content(v28, v2);
  v29 = *(_QWORD *)(a1 + 104);
  v30 = *(_BYTE *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v28;
  *(_BYTE *)(a1 + 112) = v2;
  outlined consume of Environment<Bool>.Content(v29, v30);
  return a1;
}

uint64_t assignWithTake for LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v11 = *(_BYTE *)(a2 + 64);
  v12 = *(_BYTE *)(a2 + 65);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_BYTE *)(a1 + 65);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v15 = *(unsigned __int8 *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 65) = v12;
  outlined consume of Environment<CGFloat?>.Content(v13, v15, v14);
  v16 = *(_BYTE *)(a2 + 80);
  v17 = *(_BYTE *)(a2 + 81);
  v18 = *(_QWORD *)(a1 + 72);
  v19 = *(_BYTE *)(a1 + 81);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v20 = *(unsigned __int8 *)(a1 + 80);
  *(_BYTE *)(a1 + 80) = v16;
  *(_BYTE *)(a1 + 81) = v17;
  outlined consume of Environment<ListItemTint?>.Content(v18, v20, v19);
  v21 = *(_BYTE *)(a2 + 96);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = v21;
  outlined consume of Environment<Bool>.Content(v22, v23);
  v24 = *(_BYTE *)(a2 + 112);
  v25 = *(_QWORD *)(a1 + 104);
  v26 = *(_BYTE *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = v24;
  outlined consume of Environment<Bool>.Content(v25, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 113) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for LeadingTrailingLabeledContentStyle_Phone._Body()
{
  return &unk_1E1B43350;
}

uint64_t sub_1877B356C()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>>, MEMORY[0x1E0CE4108]);
}

void type metadata accessor for _UnaryViewAdaptor<StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>>(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for _UnaryViewAdaptor<StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE40F0]);
}

uint64_t type metadata accessor for StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>;
  if (!lazy cache variable for type metadata for StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>)
  {
    lazy protocol witness table accessor for type ListLabeledContentPrefersHorizontalLayout and conformance ListLabeledContentPrefersHorizontalLayout();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body>();
    v2[0] = lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone._Body and conformance LeadingTrailingLabeledContentStyle_Phone._Body();
    v2[1] = v2[0];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ListLabeledContentPrefersHorizontalLayout, LeadingTrailingLabeledContentStyle_Phone._Body, LeadingTrailingLabeledContentStyle_Phone._Body> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone._Body and conformance LeadingTrailingLabeledContentStyle_Phone._Body()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone._Body and conformance LeadingTrailingLabeledContentStyle_Phone._Body;
  if (!lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone._Body and conformance LeadingTrailingLabeledContentStyle_Phone._Body)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LeadingTrailingLabeledContentStyle_Phone._Body, &unk_1E1B43350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone._Body and conformance LeadingTrailingLabeledContentStyle_Phone._Body);
  }
  return result;
}

uint64_t sub_1877B36D0(uint64_t a1)
{
  return get_witness_table_qd__7SwiftUI4ViewHD2_AaBPAAE7spacingyQrAA7SpacingVFQOyAA6HStackVyAA05TupleC0VyAA8StaticIfVyAA19_SemanticFeature_v4VAA6VStackVyAA10LabelGroupVyAA32LabeledContentStyleConfigurationV0N0VGGAVG_AA08ModifiedQ0VyAA6SpacerVAA21_TraitWritingModifierVyAA014LayoutPriorityV3KeyVGGA_yAHyAT0Q0VGAA015_EnvironmentKeywX0VyAA5ColorVSgGGtGG_Qo_HOTm(a1, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>, &lazy protocol witness table cache variable for type HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance HStack<A>, MEMORY[0x1E0CE73D0]);
}

uint64_t associated type witness table accessor for View.Body : View in LeadingTrailingLabeledContentStyle_Phone._Body()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type AdaptiveLeadingTrailingLabeledContentStyle.Body and conformance AdaptiveLeadingTrailingLabeledContentStyle.Body()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AdaptiveLeadingTrailingLabeledContentStyle.Body and conformance AdaptiveLeadingTrailingLabeledContentStyle.Body;
  if (!lazy protocol witness table cache variable for type AdaptiveLeadingTrailingLabeledContentStyle.Body and conformance AdaptiveLeadingTrailingLabeledContentStyle.Body)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AdaptiveLeadingTrailingLabeledContentStyle.Body, &type metadata for AdaptiveLeadingTrailingLabeledContentStyle.Body);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdaptiveLeadingTrailingLabeledContentStyle.Body and conformance AdaptiveLeadingTrailingLabeledContentStyle.Body);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AdaptiveLeadingTrailingLabeledContentStyle.Body()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1877B3754()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AdaptiveLeadingTrailingLabeledContentStyle.Body.body.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return closure #1 in AdaptiveLeadingTrailingLabeledContentStyle.Body.body.getter(a1, a2);
}

void type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>, &lazy protocol witness table cache variable for type TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityAdaptiveStack);
}

void type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!*a2)
  {
    v10 = a3(255);
    v11 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, MEMORY[0x1E0CE7EB8]);
    v12 = a5(a1, v10, v11);
    if (!v13)
      atomic_store(v12, a2);
  }
}

void type metadata accessor for TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>));
  }
}

void type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

uint64_t sub_1877B39AC()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(v0 + 72), *(unsigned __int8 *)(v0 + 80), *(_BYTE *)(v0 + 81));
  outlined consume of Environment<ListItemTint?>.Content(*(_QWORD *)(v0 + 88), *(unsigned __int8 *)(v0 + 96), *(_BYTE *)(v0 + 97));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128));
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter(a1, v2 + 16, a2);
}

uint64_t outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_BYTE *)(a1 + 65);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_BYTE *)(a1 + 81);
  v12 = *(_QWORD *)(a1 + 88);
  v8 = *(_BYTE *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 104);
  v13 = *(_BYTE *)(a1 + 112);
  v9 = *(unsigned __int8 *)(a1 + 64);
  v10 = *(unsigned __int8 *)(a1 + 80);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<CGFloat?>.Content(v4, v9, v5);
  outlined copy of Environment<ListItemTint?>.Content(v6, v10, v7);
  outlined copy of Environment<Bool>.Content(v12, v8);
  outlined copy of Environment<Bool>.Content(v14, v13);
  return a1;
}

uint64_t outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_BYTE *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_BYTE *)(a1 + 65);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_BYTE *)(a1 + 81);
  v12 = *(_QWORD *)(a1 + 88);
  v8 = *(_BYTE *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 104);
  v13 = *(_BYTE *)(a1 + 112);
  v9 = *(unsigned __int8 *)(a1 + 64);
  v10 = *(unsigned __int8 *)(a1 + 80);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<CGFloat?>.Content(v4, v9, v5);
  outlined consume of Environment<ListItemTint?>.Content(v6, v10, v7);
  outlined consume of Environment<Bool>.Content(v12, v8);
  outlined consume of Environment<Bool>.Content(v14, v13);
  return a1;
}

uint64_t sub_1877B3BC8()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(v0 + 80), *(unsigned __int8 *)(v0 + 88), *(_BYTE *)(v0 + 89));
  outlined consume of Environment<ListItemTint?>.Content(*(_QWORD *)(v0 + 96), *(unsigned __int8 *)(v0 + 104), *(_BYTE *)(v0 + 105));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 128), *(_BYTE *)(v0 + 136));
  __swift_destroy_boxed_opaque_existential_1(v0 + 160);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 232);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void *partial apply for closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;

  return closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter(a1, *(_BYTE *)(v2 + 16), v2 + 24, *(_BYTE *)(v2 + 137), (uint64_t *)(v2 + 144), v2 + 216, a2);
}

unint64_t lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout;
  if (!lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout, &type metadata for LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout;
  if (!lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout, &type metadata for LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout);
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _LayoutRoot<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, MEMORY[0x1E0CE7BC8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    type metadata accessor for TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>(255);
    lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>();
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>);
  }
}

void type metadata accessor for TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>))
  {
    type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?(255);
    type metadata accessor for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>));
  }
}

void type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, (uint64_t (*)(uint64_t))type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>)
  {
    type metadata accessor for LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>> and conformance LabelGroup<A>, (uint64_t (*)(uint64_t))type metadata accessor for LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>, (uint64_t)&protocol conformance descriptor for LabelGroup<A>);
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>);
  }
}

void type metadata accessor for LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(StaticIf<_SemanticFeature_v4, VStack<LabelGroup<LabeledContentStyleConfiguration.Label>>, LabeledContentStyleConfiguration.Label>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>)>>(a1, &lazy cache variable for type metadata for LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>, &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)> and conformance TupleView<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelGroup);
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice));
  }
}

void type metadata accessor for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for VStack<SubviewsCollection>, (uint64_t)&type metadata for SubviewsCollection, (uint64_t)&protocol witness table for SubviewsCollection, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

unint64_t lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _LayoutRoot<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, MEMORY[0x1E0CE7BC8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE14B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _LayoutRoot<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, MEMORY[0x1E0CE7BC8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE14C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<SubviewsCollectionSlice> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<SubviewsCollectionSlice> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<SubviewsCollectionSlice> and conformance HStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, (uint64_t)&type metadata for SubviewsCollectionSlice, (uint64_t)&protocol witness table for SubviewsCollectionSlice, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<SubviewsCollectionSlice> and conformance HStack<A>);
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>(0, &lazy cache variable for type metadata for ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, (uint64_t)&type metadata for SubviewsCollectionSlice, (uint64_t)&protocol witness table for SubviewsCollectionSlice);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
    v6 = type metadata accessor for ModifiedContent();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t outlined destroy of ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>(0, &lazy cache variable for type metadata for ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, (uint64_t)&type metadata for SubviewsCollectionSlice, (uint64_t)&protocol witness table for SubviewsCollectionSlice);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>)
  {
    type metadata accessor for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, (uint64_t)&type metadata for SubviewsCollectionSlice, (uint64_t)&protocol witness table for SubviewsCollectionSlice);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E0CE7228], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
  }
}

unint64_t lazy protocol witness table accessor for type VStack<SubviewsCollection> and conformance VStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type VStack<SubviewsCollection> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<SubviewsCollection> and conformance VStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for VStack<SubviewsCollection>, (uint64_t)&type metadata for SubviewsCollection, (uint64_t)&protocol witness table for SubviewsCollection, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<SubviewsCollection> and conformance VStack<A>);
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout()
{
  return &type metadata for LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout;
}

uint64_t storeEnumTagSinglePayload for AdaptiveLeadingTrailingLabeledContentStyle.Body(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1877B4384 + 4 * byte_187C5CF9F[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_1877B43B8 + 4 * byte_187C5CF9A[v4]))();
}

uint64_t sub_1877B43B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1877B43C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1877B43C8);
  return result;
}

uint64_t sub_1877B43D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1877B43DCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1877B43E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1877B43E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AdaptiveLeadingTrailingLabeledContentStyle.Body()
{
  return &type metadata for AdaptiveLeadingTrailingLabeledContentStyle.Body;
}

uint64_t sub_1877B4404(uint64_t a1)
{
  return get_witness_table_qd__7SwiftUI4ViewHD2_AaBPAAE7spacingyQrAA7SpacingVFQOyAA6HStackVyAA05TupleC0VyAA8StaticIfVyAA19_SemanticFeature_v4VAA6VStackVyAA10LabelGroupVyAA32LabeledContentStyleConfigurationV0N0VGGAVG_AA08ModifiedQ0VyAA6SpacerVAA21_TraitWritingModifierVyAA014LayoutPriorityV3KeyVGGA_yAHyAT0Q0VGAA015_EnvironmentKeywX0VyAA5ColorVSgGGtGG_Qo_HOTm(a1, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>, &lazy protocol witness table cache variable for type AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance AccessibilityAdaptiveStack<A>, (uint64_t)&protocol conformance descriptor for AccessibilityAdaptiveStack<A>);
}

uint64_t get_witness_table_qd__7SwiftUI4ViewHD2_AaBPAAE7spacingyQrAA7SpacingVFQOyAA6HStackVyAA05TupleC0VyAA8StaticIfVyAA19_SemanticFeature_v4VAA6VStackVyAA10LabelGroupVyAA32LabeledContentStyleConfigurationV0N0VGGAVG_AA08ModifiedQ0VyAA6SpacerVAA21_TraitWritingModifierVyAA014LayoutPriorityV3KeyVGGA_yAHyAT0Q0VGAA015_EnvironmentKeywX0VyAA5ColorVSgGGtGG_Qo_HOTm(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  a2(255);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a3, a2, a4);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1877B4488()
{
  return lazy protocol witness table accessor for type Group<GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>> and conformance <A> Group<A>(&lazy protocol witness table cache variable for type Group<GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>> and conformance <A> Group<A>, &lazy cache variable for type metadata for Group<GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>, &lazy protocol witness table cache variable for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>);
}

uint64_t type metadata accessor for GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>()
{
  uint64_t result;
  uint64_t (*v1)(uint64_t, uint64_t);

  result = lazy cache variable for type metadata for GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>;
  if (!lazy cache variable for type metadata for GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>)
  {
    v1 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>, v1);
    lazy protocol witness table accessor for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>();
    lazy protocol witness table accessor for type Group<GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>> and conformance <A> Group<A>((unint64_t *)&lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>> and conformance <A> Group<A>, &lazy cache variable for type metadata for Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>, &lazy protocol witness table cache variable for type GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>> and conformance GroupElementsOfContent<A, B>);
    type metadata accessor for GroupElementsOfContent();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>)
  {
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<MultiViewLabel>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultiViewLabel and conformance MultiViewLabel, (uint64_t)&type metadata for MultiViewLabel, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>);
  }
}

void type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle, (uint64_t)&type metadata for TitleAndIconLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>);
  }
}

uint64_t type metadata accessor for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>;
  if (!lazy cache variable for type metadata for GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for GroupElementsOfContent();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>);
    type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>);
  }
}

void type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(a1, &lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>? and conformance <A> A?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3610]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE1A80];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<LabeledContentStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<Color?>>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, &lazy cache variable for type metadata for HStack<SubviewsCollectionSlice>, (uint64_t)&type metadata for SubviewsCollectionSlice, (uint64_t)&protocol witness table for SubviewsCollectionSlice);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type HStack<SubviewsCollectionSlice> and conformance HStack<A>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Color?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?> and conformance _OverlayModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>, MEMORY[0x1E0CE3620]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance <> _VariadicView.Tree<A, B>();
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>, MEMORY[0x1E0CE7EB8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>> and conformance <A> Group<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>();
    v2 = v1;
    v3[0] = &protocol witness table for LabeledContentStyleConfiguration.Label;
    v3[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Group<GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>>> and conformance <A> Group<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    v9 = v8;
    v10 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, (uint64_t)&protocol conformance descriptor for GroupElementsOfContent<A, B>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout and conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

id static UIAlertAction.makeAction<A>(_:title:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v10 = *(_QWORD *)(a4 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v13 + 8);
  swift_bridgeObjectRetain();
  v15 = v14(a4, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = a5;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v17 + v16, v12, a4);
  if (a3)
  {
    v18 = (void *)MEMORY[0x18D75CC88](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = 0;
  }
  aBlock[4] = partial apply for closure #1 in static UIAlertAction.makeAction<A>(_:title:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed _UITabAction) -> ();
  aBlock[3] = &block_descriptor_56;
  v19 = _Block_copy(aBlock);
  swift_release();
  v20 = objc_msgSend((id)objc_opt_self(), sel_actionWithTitle_style_handler_, v18, v15, v19);
  _Block_release(v19);

  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  v22 = v21;
  if (v21)
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v21);
  objc_msgSend(v20, sel_setEnabled_, v22 != 0);
  return v20;
}

uint64_t PlatformAlertController.update<A>(for:with:environmentChanged:)(uint64_t a1, unint64_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  uint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t IsNativeType;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  Class isa;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t (*v97)(uint64_t, char *);
  uint64_t v98;
  char *AssociatedConformanceWitness;
  unint64_t v100;
  uint64_t AssociatedTypeWitness;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;

  v6 = v5;
  LODWORD(v100) = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v103 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v91 = *(_QWORD *)(v103 + 64);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  AssociatedConformanceWitness = (char *)&v90 - v13;
  v15 = *a2;
  v14 = a2[1];
  v93 = v6;
  v16 = objc_msgSend(v6, sel_popoverPresentationController, v12);
  if (v16)
  {
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(a5 + 88))(a4, a5);
    objc_msgSend(v17, sel_setSourceRect_);

  }
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a4, a5);
  v20 = v19;
  v108 = v15;
  v109 = v14;
  v22 = v21 & 1;
  v106 = 0;
  v107 = 0;
  v105 = 0;
  v23 = Text.resolveString(in:with:idiom:)();
  v102 = v14;
  v24 = v23;
  v26 = v25;
  outlined consume of Text.Storage(v18, v20, v22);
  swift_bridgeObjectRelease();
  v27 = (void *)MEMORY[0x18D75CC88](v24, v26);
  swift_bridgeObjectRelease();
  objc_msgSend(v93, sel_setTitle_, v27);

  v28 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 48);
  v92 = a1;
  v94 = a5;
  v95 = a4;
  v29 = v28(a4, a5);
  v33 = v32;
  if (v32)
  {
    v34 = v29;
    v35 = v30;
    v36 = v31 & 1;
    v108 = v15;
    v109 = v102;
    v106 = 0;
    v107 = 0;
    v105 = 0;
    LOBYTE(v104) = v31 & 1;
    v37 = Text.resolveString(in:with:idiom:)();
    v39 = v38;
    outlined consume of Text.Storage(v34, v35, v36);
    swift_bridgeObjectRelease();
    v33 = (void *)MEMORY[0x18D75CC88](v37, v39);
    swift_bridgeObjectRelease();
  }
  v40 = AssociatedTypeWitness;
  v41 = v100;
  v42 = v93;
  objc_msgSend(v93, sel_setMessage_, v33);

  v43 = v94;
  v44 = v95;
  v45 = *(uint64_t (**)(uint64_t, uint64_t))(v94 + 56);
  v108 = v45(v95, v94);
  MEMORY[0x1E0C80A78](v108, v46);
  *(&v90 - 4) = v44;
  *(&v90 - 3) = v43;
  v100 = v15;
  v47 = v102;
  *(&v90 - 2) = v15;
  *(&v90 - 1) = v47;
  v48 = type metadata accessor for Array();
  v49 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v48);
  IsNativeType = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PlatformAlertController.update<A>(for:with:environmentChanged:), (uint64_t)(&v90 - 6), v48, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEDCE8], v49, MEMORY[0x1E0DEDD18], v50);
  swift_bridgeObjectRelease();
  v52 = MEMORY[0x1E0DEE9D8];
  if ((v41 & 1) != 0)
  {
    v53 = objc_msgSend(v42, sel_actions);
    type metadata accessor for UIAlertAction();
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v15 >> 62)
      goto LABEL_39;
    v54 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_8:
    v98 = IsNativeType;
    v55 = (uint64_t)AssociatedConformanceWitness;
    if (v54)
    {
      v108 = MEMORY[0x1E0DEE9D8];
      result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54 & ~(v54 >> 63), 0);
      if (v54 < 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
        return result;
      }
      v57 = 0;
      v58 = v108;
      do
      {
        if ((v15 & 0xC000000000000001) != 0)
          v59 = (id)MEMORY[0x18D75E3BC](v57, v15);
        else
          v59 = *(id *)(v15 + 8 * v57 + 32);
        v60 = v59;
        v61 = objc_msgSend(v59, sel_title);
        if (v61)
        {
          v62 = v61;
          v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v65 = v64;

        }
        else
        {

          v63 = 0;
          v65 = 0;
        }
        v108 = v58;
        v67 = *(_QWORD *)(v58 + 16);
        v66 = *(_QWORD *)(v58 + 24);
        if (v67 >= v66 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v67 + 1, 1);
          v58 = v108;
        }
        ++v57;
        *(_QWORD *)(v58 + 16) = v67 + 1;
        v68 = v58 + 16 * v67;
        *(_QWORD *)(v68 + 32) = v63;
        *(_QWORD *)(v68 + 40) = v65;
      }
      while (v54 != v57);
      swift_bridgeObjectRelease();
      v40 = AssociatedTypeWitness;
      v55 = (uint64_t)AssociatedConformanceWitness;
    }
    else
    {
      swift_bridgeObjectRelease();
      v58 = MEMORY[0x1E0DEE9D8];
    }
    v69 = specialized _arrayForceCast<A, B>(_:)(v98);
    swift_bridgeObjectRelease();
    v70 = specialized static Array<A>.== infix(_:_:)(v58, v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = v95;
    v52 = MEMORY[0x1E0DEE9D8];
    if ((v70 & 1) != 0)
      return result;
  }
  else
  {
    swift_bridgeObjectRelease();
    result = v95;
    v55 = (uint64_t)AssociatedConformanceWitness;
  }
  v105 = v52;
  v71 = v45(result, v94);
  if (MEMORY[0x18D75D06C](v71, v40))
  {
    AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
    v97 = (uint64_t (*)(uint64_t, char *))*((_QWORD *)AssociatedConformanceWitness + 2);
    v96 = type metadata accessor for UIAlertAction();
    v72 = 0;
    v98 = v71;
    do
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if ((IsNativeType & 1) != 0)
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v103 + 16))(v55, v71+ ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80))+ *(_QWORD *)(v103 + 72) * v72, v40);
        v45 = (uint64_t (*)(uint64_t, uint64_t))(v72 + 1);
        if (__OFADD__(v72, 1))
          goto LABEL_38;
      }
      else
      {
        result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v91 != 8)
          goto LABEL_41;
        IsNativeType = result;
        v108 = result;
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v103 + 16))(v55, &v108, v40);
        swift_unknownObjectRelease();
        v45 = (uint64_t (*)(uint64_t, uint64_t))(v72 + 1);
        if (__OFADD__(v72, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          swift_bridgeObjectRetain();
          v54 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_8;
        }
      }
      v73 = (uint64_t)AssociatedConformanceWitness;
      v74 = v97(v40, AssociatedConformanceWitness);
      v76 = v75;
      v15 = v55;
      v108 = v100;
      v109 = v102;
      v78 = v77 & 1;
      v106 = 0;
      v107 = 0;
      v104 = 0;
      v79 = Text.resolveString(in:with:idiom:)();
      v81 = v80;
      outlined consume of Text.Storage(v74, v76, v78);
      swift_bridgeObjectRelease();
      v82 = v79;
      v40 = AssociatedTypeWitness;
      static UIAlertAction.makeAction<A>(_:title:)(v55, v82, v81, AssociatedTypeWitness, v73);
      v83 = swift_bridgeObjectRelease();
      MEMORY[0x18D75CF58](v83);
      if (*(_QWORD *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v55, v40);
      v71 = v98;
      ++v72;
    }
    while (v45 != (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x18D75D06C](v98, v40));
  }
  swift_bridgeObjectRelease();
  v84 = (*(uint64_t (**)(uint64_t))(v94 + 72))(v95);
  v85 = v93;
  v86 = (uint64_t *)&v93[OBJC_IVAR____TtC7SwiftUI23PlatformAlertController_onDismissAction];
  v87 = *(_QWORD *)&v93[OBJC_IVAR____TtC7SwiftUI23PlatformAlertController_onDismissAction];
  *v86 = v84;
  v86[1] = v88;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v87);
  type metadata accessor for UIAlertAction();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v85, sel__setActions_, isa);

  return specialized AccessibilityCoreNotification.post()(0);
}

uint64_t closure #1 in PlatformAlertController.update<A>(for:with:environmentChanged:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  v4 = swift_checkMetadataState();
  v5 = v3(v4, AssociatedConformanceWitness);
  v7 = v6;
  v9 = v8 & 1;
  v10 = Text.resolveString(in:with:idiom:)();
  v12 = v11;
  outlined consume of Text.Storage(v5, v7, v9);
  result = swift_bridgeObjectRelease();
  *a1 = v10;
  a1[1] = v12;
  return result;
}

uint64_t partial apply for closure #1 in PlatformAlertController.update<A>(for:with:environmentChanged:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in PlatformAlertController.update<A>(for:with:environmentChanged:)(a1);
}

unint64_t type metadata accessor for UIAlertAction()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIAlertAction;
  if (!lazy cache variable for type metadata for UIAlertAction)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIAlertAction);
  }
  return result;
}

uint64_t sub_1877B5984()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

void (*partial apply for closure #1 in static UIAlertAction.makeAction<A>(_:title:)())(void)
{
  uint64_t v0;
  void (*result)(void);
  uint64_t v2;

  result = (void (*)(void))(*(uint64_t (**)(void))(*(_QWORD *)(v0 + 24) + 24))();
  if (result)
  {
    v2 = (uint64_t)result;
    result();
    return (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  }
  return result;
}

uint64_t type metadata completion function for ModifiedTabContent()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ModifiedTabContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1877B5BA0 + 4 * byte_187C5D440[v17 - 1]))();
}

void storeEnumTagSinglePayload for ModifiedTabContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata accessor for ModifiedTabContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ModifiedTabContent);
}

uint64_t instantiation function for generic protocol witness table for <> ModifiedTabContent<A, B>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> ModifiedTabContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v4;

  v4 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, a1, &v4);
}

uint64_t associated type witness table accessor for TabContent.TabValue : Hashable in <> ModifiedTabContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> ModifiedTabContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TabContent.modifier<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v14, v12);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v17, v4, a2, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a4, v17, a2);
  v19 = type metadata accessor for ModifiedTabContent(0, a2, a3, v18);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4 + *(int *)(v19 + 36), v11, a3);
}

uint64_t ModifiedTabContent<>._identifiedView.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v11 = (char *)&v16 - v10;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 56))(v5, a2, v9);
  v12 = v2 + *(int *)(a1 + 36);
  v13 = *(_QWORD *)(a1 + 24);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x18D75B4AC](v12, AssociatedTypeWitness, v13, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> ModifiedTabContent<A, B>(uint64_t a1, uint64_t a2)
{
  return ModifiedTabContent<>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_1877B6110(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = swift_getAssociatedConformanceWitness();
  v4[1] = v1;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t View.accessibilityRotor<A>(_:entries:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  char v27;
  uint64_t v28;
  char v29;

  v25 = a6;
  v22 = a5;
  v23 = a8;
  v24 = a9;
  v15 = type metadata accessor for AccessibilityRotorModifier(0, a7, a10, a4);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v21 - v18;
  v26[0] = a1;
  v26[1] = a2;
  v26[2] = a3 & 1;
  v26[3] = a4;
  v26[4] = 0;
  v27 = 1;
  v28 = 0;
  v29 = 1;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  AccessibilityRotorModifier.init(info:entries:)((uint64_t)v26, v22, a7, a10, (uint64_t)v19);
  MEMORY[0x18D75B4AC](v19, v25, v15, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

uint64_t type metadata accessor for AccessibilityRotorModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityRotorModifier);
}

uint64_t AccessibilityRotorModifier.init(info:entries:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v11;
  *(_QWORD *)(a5 + 32) = v7;
  *(_BYTE *)(a5 + 40) = v8;
  *(_QWORD *)(a5 + 48) = v9;
  *(_BYTE *)(a5 + 56) = v10;
  type metadata accessor for AccessibilityRotorModifier(0, a3, a4, a3);
  a2();
  return swift_release();
}

uint64_t View.accessibilityRotor<A>(_:entries:)(unsigned __int8 *a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;

  v18 = a6;
  v12 = type metadata accessor for AccessibilityRotorModifier(0, a5, a7, a4);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v18 - v15;
  v19 = *a1;
  v20 = xmmword_187C02A60;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  v24 = 0;
  v25 = 1;
  swift_retain();
  AccessibilityRotorModifier.init(info:entries:)((uint64_t)&v19, a2, a5, a7, (uint64_t)v16);
  MEMORY[0x18D75B4AC](v16, a4, v12, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t View.accessibilityRotor<A>(_:entries:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v28[6];

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a7;
  v14[3] = a8;
  v14[4] = a10;
  v14[5] = a5;
  v14[6] = a6;
  v15 = type metadata accessor for Array();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = type metadata accessor for AccessibilityRotorEntry(255, AssociatedTypeWitness, AssociatedConformanceWitness, v18);
  swift_bridgeObjectRetain();
  swift_retain();
  v28[1] = v15;
  v28[2] = AssociatedTypeWitness;
  v28[3] = v19;
  v28[4] = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v15);
  v28[5] = AssociatedConformanceWitness;
  v20 = type metadata accessor for ForEach();
  v28[0] = &protocol witness table for AccessibilityRotorEntry<A>;
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v20, v28);
  View.accessibilityRotor<A>(_:entries:)(a1, a2, a3 & 1, a4, (void (*)(void))partial apply for closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:), a7, v20, a9, a8, v21);
  return swift_release();
}

uint64_t sub_1877B6608()
{
  return objectdestroyTm_25((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)((uint64_t)partial apply for closure #1 in closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:), a1);
}

{
  return partial apply for closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)((uint64_t)partial apply for closure #1 in closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:), a1);
}

uint64_t View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v30[6];

  v15 = *a6;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a8;
  v16[3] = a10;
  v16[4] = a11;
  v16[5] = a5;
  v16[6] = a6;
  v16[7] = a7;
  v17 = v15 + *MEMORY[0x1E0DEE2A8];
  v18 = type metadata accessor for Array();
  v19 = *(_QWORD *)(v17 + 8);
  v21 = type metadata accessor for AccessibilityRotorEntry(255, v19, a11, v20);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v30[1] = v18;
  v30[2] = v19;
  v30[3] = v21;
  v30[4] = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v18);
  v30[5] = a11;
  v22 = type metadata accessor for ForEach();
  v30[0] = &protocol witness table for AccessibilityRotorEntry<A>;
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v22, v30);
  View.accessibilityRotor<A>(_:entries:)(a1, a2, a3 & 1, a4, (void (*)(void))partial apply for closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:), a8, v22, a9, a10, v23);
  return swift_release();
}

uint64_t partial apply for closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)((uint64_t)partial apply for closure #1 in closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:), a1);
}

{
  return partial apply for closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)((uint64_t)partial apply for closure #1 in closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:), a1);
}

uint64_t View.accessibilityRotor<A>(_:entries:entryLabel:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[6];
  unsigned __int8 v21;

  v21 = *a1;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = a6;
  v11[5] = a2;
  v11[6] = a3;
  v12 = type metadata accessor for Array();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = type metadata accessor for AccessibilityRotorEntry(255, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  swift_bridgeObjectRetain();
  swift_retain();
  v20[1] = v12;
  v20[2] = AssociatedTypeWitness;
  v20[3] = v16;
  v20[4] = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v12);
  v20[5] = AssociatedConformanceWitness;
  v17 = type metadata accessor for ForEach();
  v20[0] = &protocol witness table for AccessibilityRotorEntry<A>;
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v17, v20);
  View.accessibilityRotor<A>(_:entries:)(&v21, (void (*)(void))partial apply for closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:), (uint64_t)v11, a4, v17, a5, v18);
  return swift_release();
}

uint64_t closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _UNKNOWN **v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  *(_QWORD *)&v32 = a1;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = a5;
  v13[5] = a2;
  v14 = type metadata accessor for Array();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = type metadata accessor for AccessibilityRotorEntry(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  swift_bridgeObjectRetain();
  swift_retain();
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v14);
  ForEach<>.init(_:content:)((uint64_t)&v32, a6, (uint64_t)v13, v14, AssociatedTypeWitness, v18, v19, (uint64_t)&protocol witness table for AccessibilityRotorEntry<A>, a5);
  v24 = v28;
  v25 = v29;
  v26 = v30;
  v27 = v31;
  *(_QWORD *)&v32 = v14;
  *((_QWORD *)&v32 + 1) = AssociatedTypeWitness;
  v33 = v18;
  v34 = v19;
  *(_QWORD *)&v35 = AssociatedConformanceWitness;
  v20 = type metadata accessor for ForEach();
  v23 = &protocol witness table for AccessibilityRotorEntry<A>;
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v20, &v23);
  static ViewBuilder.buildExpression<A>(_:)(&v24, v20, v21);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v28 = v32;
  v29 = v33;
  v30 = v34;
  v31 = v35;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v28, v20, a7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_1877B6B74()
{
  return objectdestroyTm_25((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)(v2[5], v2[6], v2[2], v2[3], v2[4], a1, a2);
}

uint64_t closure #1 in closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = a2;
  v20 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v3);
  v5 = (char *)&v20 - v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for AccessibilityRotorEntry(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v21 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v20 - v14;
  swift_getAtKeyPath();
  v17 = v23;
  v16 = v24;
  dispatch thunk of RawRepresentable.rawValue.getter();
  AccessibilityRotorEntry.init(_:id:textRange:prepare:)(v17, v16, 0, MEMORY[0x1E0DEE9D8], (uint64_t)v5, 0, 0, 1, (uint64_t)v11, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, AssociatedTypeWitness, AssociatedConformanceWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11, v8, &protocol witness table for AccessibilityRotorEntry<A>);
  v18 = *(void (**)(char *, uint64_t))(v21 + 8);
  v18(v11, v8);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, v8, v22);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, v8);
}

uint64_t View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[6];
  unsigned __int8 v24;

  v13 = *a3;
  v24 = *a1;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = a7;
  v14[5] = a2;
  v14[6] = a3;
  v14[7] = a4;
  v15 = v13 + *MEMORY[0x1E0DEE2A8];
  v16 = type metadata accessor for Array();
  v17 = *(_QWORD *)(v15 + 8);
  v19 = type metadata accessor for AccessibilityRotorEntry(255, v17, a7, v18);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v23[1] = v16;
  v23[2] = v17;
  v23[3] = v19;
  v23[4] = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v16);
  v23[5] = a7;
  v20 = type metadata accessor for ForEach();
  v23[0] = &protocol witness table for AccessibilityRotorEntry<A>;
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v20, v23);
  View.accessibilityRotor<A>(_:entries:)(&v24, (void (*)(void))partial apply for closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:), (uint64_t)v14, a5, v20, a6, v21);
  return swift_release();
}

uint64_t closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _UNKNOWN **v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;

  v15 = *a2;
  *(_QWORD *)&v35 = a1;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a3;
  v16[6] = a2;
  v17 = v15 + *MEMORY[0x1E0DEE2A8];
  v18 = type metadata accessor for Array();
  v19 = *(_QWORD *)(v17 + 8);
  v21 = type metadata accessor for AccessibilityRotorEntry(0, v19, a6, v20);
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v18);
  ForEach<>.init(_:id:content:)((uint64_t)&v35, (uint64_t)a2, a7, (uint64_t)v16, v18, v21, v22);
  v27 = v31;
  v28 = v32;
  v29 = v33;
  v30 = v34;
  *(_QWORD *)&v35 = v18;
  *((_QWORD *)&v35 + 1) = v19;
  v36 = v21;
  v37 = v22;
  *(_QWORD *)&v38 = a6;
  v23 = type metadata accessor for ForEach();
  v26 = &protocol witness table for AccessibilityRotorEntry<A>;
  v24 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v23, &v26);
  static ViewBuilder.buildExpression<A>(_:)(&v27, v23, v24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v31 = v35;
  v32 = v36;
  v33 = v37;
  v34 = v38;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v31, v23, a8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t objectdestroy_2Tm_4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)(*(_QWORD *)(v2 + 40), *(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a1, a2);
}

uint64_t closure #1 in closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a4;
  v25 = a5;
  v5 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a3 + 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v23 - v6;
  v10 = type metadata accessor for AccessibilityRotorEntry(0, v5, v9, v8);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v23 - v17;
  swift_getAtKeyPath();
  v20 = v26;
  v19 = v27;
  swift_getAtKeyPath();
  AccessibilityRotorEntry.init(_:id:textRange:prepare:)(v20, v19, 0, MEMORY[0x1E0DEE9D8], (uint64_t)v7, 0, 0, 1, (uint64_t)v14, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, v5, v24);
  static ViewBuilder.buildExpression<A>(_:)(v14, v10, &protocol witness table for AccessibilityRotorEntry<A>);
  v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v14, v10);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, v10, v25);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, v10);
}

uint64_t View.accessibilityRotor(_:textRanges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *(_QWORD *)(swift_allocObject() + 16) = a5;
  type metadata accessor for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>();
  v15 = v14;
  v16 = lazy protocol witness table accessor for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>();
  swift_bridgeObjectRetain();
  View.accessibilityRotor<A>(_:entries:)(a1, a2, a3 & 1, a4, (void (*)(void))partial apply for closure #1 in View.accessibilityRotor(_:textRanges:), a6, v15, a8, a7, v16);
  return swift_release();
}

__n128 closure #1 in View.accessibilityRotor(_:textRanges:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v5;
  __n128 v6;
  __int128 v7;
  uint64_t v8;

  swift_getKeyPath();
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for AccessibilityRotorEntry<Never>, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDCF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityRotorEntry);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  swift_bridgeObjectRetain();
  ForEach.init(_:idGenerator:content:)();
  result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  return result;
}

{
  __n128 result;
  __int128 v5;
  __n128 v6;
  __int128 v7;
  uint64_t v8;

  swift_getKeyPath();
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for AccessibilityRotorEntry<Never>, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDCF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityRotorEntry);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  swift_bridgeObjectRetain();
  ForEach.init(_:idGenerator:content:)();
  result = v6;
  *(_OWORD *)a2 = v5;
  *(__n128 *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  return result;
}

uint64_t sub_1877B7530()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

double partial apply for closure #1 in View.accessibilityRotor(_:textRanges:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = closure #1 in View.accessibilityRotor(_:textRanges:)(*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = closure #1 in View.accessibilityRotor(_:textRanges:)(*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

void type metadata accessor for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for AccessibilityRotorEntry<Never>, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDCF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AccessibilityRotorEntry);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>);
  }
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>();
    v2 = &protocol witness table for AccessibilityRotorEntry<A>;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t View.accessibilityRotor(_:textRanges:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 v12;

  v12 = *a1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  type metadata accessor for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>();
  v9 = v8;
  v10 = lazy protocol witness table accessor for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>();
  swift_bridgeObjectRetain();
  View.accessibilityRotor<A>(_:entries:)(&v12, (void (*)(void))partial apply for closure #1 in View.accessibilityRotor(_:textRanges:), v7, a3, v9, a4, v10);
  return swift_release();
}

unint64_t *closure #1 in closure #1 in View.accessibilityRotor(_:textRanges:)@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;

  v3 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(a2 + 16))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 16 * v3 + 32);
    *(_BYTE *)(a3 + 48) = 1;
    *(_QWORD *)(a3 + 56) = 0;
    *(_BYTE *)(a3 + 64) = 2;
    *(_QWORD *)(a3 + 72) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    *(_QWORD *)(a3 + 80) = 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t View.accessibilityRotor<A>(_:entries:)@<X0>(void (*a1)(void)@<X4>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = Text.init(_:tableName:bundle:comment:)();
  v11 = v10;
  v13 = v12 & 1;
  View.accessibilityRotor<A>(_:entries:)(v9, v10, v12 & 1, v14, a1, a2, a3, a4, a5, a6);
  outlined consume of Text.Storage(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor<A, B>(_:entries:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7)
{
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a4;
  v11 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v13 + 16))((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v14 = Text.init<A>(_:)();
  v16 = v15;
  v18 = v17 & 1;
  View.accessibilityRotor<A>(_:entries:)(v14, v15, v17 & 1, v19, a2, a3, v22, a6, a5, a7);
  outlined consume of Text.Storage(v14, v16, v18);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor<A>(_:entries:entryLabel:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = Text.init(_:tableName:bundle:comment:)();
  v13 = v12;
  v15 = v14 & 1;
  View.accessibilityRotor<A>(_:entries:entryLabel:)(v11, v12, v14 & 1, v16, a1, a2, a3, a4, a5, a6);
  outlined consume of Text.Storage(v11, v13, v15);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor<A, B>(_:entries:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v23;

  v13 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v15 + 16))((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  v16 = Text.init<A>(_:)();
  v18 = v17;
  v20 = v19 & 1;
  View.accessibilityRotor<A>(_:entries:entryLabel:)(v16, v17, v19 & 1, v21, a2, a3, a4, a5, a7, a6);
  outlined consume of Text.Storage(v16, v18, v20);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X4>, uint64_t *a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = Text.init(_:tableName:bundle:comment:)();
  v13 = v12;
  v15 = v14 & 1;
  View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)(v11, v12, v14 & 1, v16, a1, a2, a3, a4, a5, a6, a7);
  outlined consume of Text.Storage(v11, v13, v15);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor<A, B, C>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8)
{
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a5;
  v13 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v15 + 16))((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  v16 = Text.init<A>(_:)();
  v18 = v17;
  v20 = v19 & 1;
  View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)(v16, v17, v19 & 1, v21, a2, a3, a4, v24, a7, a6, a8);
  outlined consume of Text.Storage(v16, v18, v20);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor(_:textRanges:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = Text.init(_:tableName:bundle:comment:)();
  v10 = v9;
  v12 = v11 & 1;
  View.accessibilityRotor(_:textRanges:)(v8, v9, v11 & 1, v13, a1, a2, a3, a4);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityRotor<A>(_:textRanges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v19;

  v9 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v11 + 16))((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v12 = Text.init<A>(_:)();
  v14 = v13;
  v16 = v15 & 1;
  View.accessibilityRotor(_:textRanges:)(v12, v13, v15 & 1, v17, a2, a3, a4, a5);
  outlined consume of Text.Storage(v12, v14, v16);
  return swift_bridgeObjectRelease();
}

uint64_t AccessibilityRotorInfo.Designation.uniqueID(in:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;

  v1 = *v0;
  v2 = v0[2];
  if (v2 < 0)
  {
    v8 = 0;
    v6._countAndFlagsBits = 0x5F6D6574737973;
    v6._object = (void *)0xE700000000000000;
    String.append(_:)(v6);
    _print_unlocked<A, B>(_:_:)();
  }
  else
  {
    v3 = v0[1];
    v4 = v2 & 1;
    outlined copy of Text.Storage(v1, v3, v2 & 1);
    swift_bridgeObjectRetain();
    v5._countAndFlagsBits = Text.resolveString(in:with:idiom:)();
    v8 = 0x5F72657375;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v1, v3, v4);
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t AccessibilityRotorModifier.initialAttachment(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityRotorInfo>, (uint64_t)&type metadata for AccessibilityRotorInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_187BF9830;
  v2 = *(_QWORD *)v0;
  v3 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_BYTE *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_BYTE *)(v0 + 56);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)v0;
  *(_QWORD *)(v1 + 40) = v3;
  *(_QWORD *)(v1 + 48) = v4;
  *(_OWORD *)(v1 + 56) = *(_OWORD *)(v0 + 24);
  *(_BYTE *)(v1 + 72) = v5;
  *(_QWORD *)(v1 + 80) = v6;
  *(_BYTE *)(v1 + 88) = v7;
  outlined copy of Text.Suffix.Storage(v2, v3, v4);
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v11 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>();
  v10[3] = v8;
  v10[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AccessibilityRotorInfo]> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>, MEMORY[0x1E0CE6310]);
  v10[0] = v1;
  specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)&type metadata for AccessibilityProperties.RotorInfoKey);
  v10[0] = v11;
  static AccessibilityAttachment.properties(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t static AccessibilityRotorModifier.makeAccessibilityViewModifier(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X8>)
{
  uint64_t (*v7)(void);
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  char v28;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  __int128 v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  int v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  unsigned int v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unsigned int v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unsigned int v73;
  uint64_t v74;

  v51 = a5;
  v52 = a6;
  v48 = a4;
  v49 = a3;
  v53 = a7;
  v74 = *MEMORY[0x1E0C80C00];
  v50 = *a1;
  v7 = *(uint64_t (**)(void))a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v13 = *(_DWORD *)(a2 + 32);
  v12 = *(_DWORD *)(a2 + 36);
  v14 = *(_QWORD *)(a2 + 48);
  v47 = *(_QWORD *)(a2 + 40);
  v16 = *(_DWORD *)(a2 + 56);
  v15 = *(_DWORD *)(a2 + 60);
  v43 = v12;
  v44 = v15;
  v17 = *(_DWORD *)(a2 + 68);
  LODWORD(v45) = *(_DWORD *)(a2 + 64);
  DWORD1(v45) = v17;
  v18 = *(_DWORD *)(a2 + 76);
  DWORD2(v45) = *(_DWORD *)(a2 + 72);
  HIDWORD(v45) = v18;
  v46 = *(_DWORD *)(a2 + 80);
  *(_QWORD *)&v68 = v14;
  DWORD2(v68) = v16;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    *(_QWORD *)&v62 = v7;
    DWORD2(v62) = v8;
    *(_QWORD *)&v63 = v9;
    *((_QWORD *)&v63 + 1) = __PAIR64__(v11, v10);
    *(_QWORD *)&v64 = __PAIR64__(v43, v13);
    *((_QWORD *)&v64 + 1) = v47;
    *(_QWORD *)&v65 = v14;
    *((_QWORD *)&v65 + 1) = __PAIR64__(v44, v16);
    v66 = v45;
    v67 = v46;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.setter();
    v68 = v62;
    v69 = v63;
    v70 = v64;
    v71 = v65;
    v72 = v45;
    v58 = v64;
    v59 = v65;
    v60 = v45;
    v73 = v46;
    v46 = v16;
    v61 = v67;
    v56 = v62;
    v57 = v63;
    v19 = outlined retain of _ViewInputs((uint64_t)&v68);
    ((void (*)(__int128 *__return_ptr, uint64_t, __int128 *))v49)(&v55, v19, &v56);
    outlined release of _ViewInputs((uint64_t)&v68);
    LODWORD(v56) = v50;
    type metadata accessor for AccessibilityRotorModifier(255, v51, v52, v20);
    type metadata accessor for _GraphValue();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _GraphValue.value.getter();
    AGGraphCreateOffsetAttribute2();
    _GraphValue.init(_:)();
    v48 = v9;
    v49 = v7;
    *(_QWORD *)&v56 = v7;
    DWORD2(v56) = v8;
    *(_QWORD *)&v57 = v9;
    *((_QWORD *)&v57 + 1) = __PAIR64__(v11, v10);
    *(_QWORD *)&v58 = __PAIR64__(v43, v13);
    *((_QWORD *)&v58 + 1) = v47;
    *(_QWORD *)&v59 = v14;
    v21 = v14;
    DWORD2(v59) = v16;
    (*(void (**)(char *__return_ptr, uint64_t *, __int128 *, uint64_t, uint64_t))(v52 + 24))((char *)&v54 + 4, &v54, &v56, v51, v52);
    v22 = HIDWORD(v54);
    v23 = AGMakeUniqueID();
    LODWORD(v56) = v50;
    _GraphValue.value.getter();
    LODWORD(v56) = AGGraphCreateOffsetAttribute2();
    *((_QWORD *)&v56 + 1) = v23;
    LODWORD(v57) = v22;
    v25 = type metadata accessor for AccessibilityRotorModifier.Attachment(0, v51, v52, v24);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRotorModifier<A>.Attachment, v25);
    _GraphValue.init<A>(_:)();
    v26 = HIDWORD(v54);
    v27 = v55;
    *(_QWORD *)&v56 = v21;
    DWORD2(v56) = v16;
    outlined retain of _ViewInputs((uint64_t)&v68);
    swift_bridgeObjectRetain();
    v28 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((v28 & 1) != 0)
      specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v26, &v68, v27, *((unint64_t *)&v27 + 1), 0);
    swift_bridgeObjectRelease();
    outlined release of _ViewInputs((uint64_t)&v68);
    LOBYTE(v56) = (v28 & 1) == 0;
    _ViewOutputs.subscript.setter();
    v58 = v70;
    v59 = v71;
    v60 = v72;
    v61 = v73;
    v56 = v68;
    v57 = v69;
    swift_getKeyPath();
    outlined retain of _ViewInputs((uint64_t)&v68);
    v30 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v56 = v55;
    v31 = _ViewOutputs.subscript.getter();
    if ((v31 & 0x100000000) != 0)
      v32 = *MEMORY[0x1E0CFED28];
    else
      v32 = v31;
    type metadata accessor for AccessibilityRelationshipScope();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityRelationshipScope, (uint64_t)&protocol conformance descriptor for AccessibilityRelationshipScope);
    v33 = PropertyList.subscript.getter();
    v34 = v56;
    *(_QWORD *)&v56 = __PAIR64__(v32, v30);
    *((_QWORD *)&v56 + 1) = v34;
    MEMORY[0x1E0C80A78](v33, v35);
    v41 = type metadata accessor for AccessibilityRotorModifier.RelationshipScope(0, v51, v52, v36);
    v42 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRotorModifier<A>.RelationshipScope, v41);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<AccessibilityNodeList>, (uint64_t)&type metadata for AccessibilityNodeList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    v38 = v37;
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v56, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_27, (uint64_t)&v40, v41, MEMORY[0x1E0DEDCE8], v38, MEMORY[0x1E0DEDD18], v39);
    swift_release();
    LOBYTE(v56) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    *v53 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    *(_QWORD *)&v68 = v7;
    DWORD2(v68) = v8;
    *(_QWORD *)&v69 = v9;
    *((_QWORD *)&v69 + 1) = __PAIR64__(v11, v10);
    *(_QWORD *)&v70 = __PAIR64__(v43, v13);
    *((_QWORD *)&v70 + 1) = v47;
    *(_QWORD *)&v71 = v14;
    *((_QWORD *)&v71 + 1) = __PAIR64__(v44, v16);
    v72 = v45;
    v73 = v46;
    return v49();
  }
}

_BYTE *AccessibilityRotorModifier.RelationshipScope.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD v14[2];

  result = (_BYTE *)AGGraphGetValue();
  if (*result != 1
    || (result = (_BYTE *)AccessibilityFocusStoreListModifier.ItemFilter.accessibilityNodeList.getter(a1, v14),
        (v7 = v14[0]) == 0))
  {
    v8 = 0;
    v7 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    *a3 = v7;
    a3[1] = v8;
    return result;
  }
  v8 = v14[1];
  if (!(v14[0] >> 62))
  {
    v9 = *(_QWORD *)((v14[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = (_BYTE *)swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_5;
LABEL_13:
    result = (_BYTE *)swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  result = (_BYTE *)_CocoaArrayWrapper.endIndex.getter();
  v9 = (uint64_t)result;
  if (!result)
    goto LABEL_13;
LABEL_5:
  if (v9 >= 1)
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x18D75E3BC](v10++, v7);
        *(_QWORD *)(v11 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope) = a2;
        swift_retain();
        swift_unknownObjectRelease();
        swift_release();
      }
      while (v9 != v10);
    }
    else
    {
      v12 = (uint64_t *)(v7 + 32);
      do
      {
        v13 = *v12++;
        *(_QWORD *)(v13 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope) = a2;
        swift_retain();
        swift_release();
        --v9;
      }
      while (v9);
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityRotorModifier.Attachment.rotorInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  Value = AGGraphGetValue();
  v4 = *(_QWORD *)Value;
  v3 = *(_QWORD *)(Value + 8);
  v5 = *(_QWORD *)(Value + 16);
  v6 = *(_BYTE *)(Value + 40);
  v7 = *(_QWORD *)(Value + 48);
  v8 = *(_BYTE *)(Value + 56);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);
  *(_BYTE *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  return outlined copy of Text.Suffix.Storage(v4, v3, v5);
}

_BYTE *protocol witness for Rule.value.getter in conformance AccessibilityRotorModifier<A>.RelationshipScope@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return AccessibilityRotorModifier.RelationshipScope.value.getter(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), a1);
}

uint64_t AccessibilityRotorModifier.Attachment.value.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[6];
  _QWORD v15[8];

  AccessibilityRotorModifier.Attachment.rotorInfo.getter((uint64_t)v15);
  v4 = AGCreateWeakAttribute();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityRotorInfo>, (uint64_t)&type metadata for AccessibilityRotorInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_187BF9830;
  v6 = v15[0];
  v7 = v15[1];
  v8 = v15[2];
  v9 = v15[3];
  *(_QWORD *)(v5 + 32) = v15[0];
  *(_QWORD *)(v5 + 40) = v7;
  *(_QWORD *)(v5 + 48) = v8;
  *(_QWORD *)(v5 + 56) = v9;
  *(_QWORD *)(v5 + 64) = v4;
  *(_BYTE *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = a1;
  *(_BYTE *)(v5 + 88) = 0;
  outlined copy of Text.Suffix.Storage(v6, v7, v8);
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v14[5] = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>();
  v14[3] = v10;
  v14[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AccessibilityRotorInfo]> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>, MEMORY[0x1E0CE6310]);
  v14[0] = v5;
  specialized Dictionary.subscript.setter((uint64_t)v14, (uint64_t)&type metadata for AccessibilityProperties.RotorInfoKey);
  static AccessibilityAttachment.properties(_:)();
  outlined consume of Text.Suffix.Storage(v6, v7, v8);
  swift_bridgeObjectRelease();
  v11 = v14[0];
  v12 = v14[1];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 24) = v12;
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityRotorModifier<A>.Attachment@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return AccessibilityRotorModifier.Attachment.value.getter(*(_QWORD *)(v1 + 8), a1);
}

BOOL protocol witness for AccessibilityViewModifier.willCreateNode(for:) in conformance AccessibilityRotorModifier<A>(unint64_t a1)
{
  uint64_t v1;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return v1 == 0;
}

uint64_t protocol witness for static AccessibilityViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:) in conformance AccessibilityRotorModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X8>)
{
  return static AccessibilityRotorModifier.makeAccessibilityViewModifier(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityRotorModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRotorModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static AccessibilitySystemRotor.links(visited:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static AccessibilitySystemRotor.links.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static AccessibilitySystemRotor.headings(level:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result + 2;
  return result;
}

void static AccessibilitySystemRotor.headings.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static AccessibilitySystemRotor.boldText.getter(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

void static AccessibilitySystemRotor.italicText.getter(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

void static AccessibilitySystemRotor.underlineText.getter(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

void static AccessibilitySystemRotor.misspelledWords.getter(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

void static AccessibilitySystemRotor.images.getter(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

void static AccessibilitySystemRotor.textFields.getter(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

void static AccessibilitySystemRotor.tables.getter(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

void static AccessibilitySystemRotor.lists.getter(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

void static AccessibilitySystemRotor.landmarks.getter(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

ValueMetadata *type metadata accessor for AccessibilitySystemRotor()
{
  return &type metadata for AccessibilitySystemRotor;
}

uint64_t sub_1877B8EA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for AccessibilityRotorModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for AccessibilityRotorModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t sub_1877B8F04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[6];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for Array();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12[1] = v2;
  v12[2] = AssociatedTypeWitness;
  v12[3] = type metadata accessor for AccessibilityRotorEntry(255, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  v12[4] = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v2);
  v12[5] = AssociatedConformanceWitness;
  v6 = type metadata accessor for ForEach();
  v12[0] = &protocol witness table for AccessibilityRotorEntry<A>;
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v6, v12);
  type metadata accessor for AccessibilityRotorModifier(255, v6, v7, v8);
  v9 = type metadata accessor for ModifiedContent();
  v11[0] = v1;
  v11[1] = &protocol witness table for AccessibilityRotorModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v11);
}

uint64_t sub_1877B903C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = a1[2];
  v2 = a1[3];
  v3 = a1[4];
  v12 = type metadata accessor for Array();
  v13 = v1;
  v14 = type metadata accessor for AccessibilityRotorEntry(255, v1, v3, v4);
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v12);
  v16 = v3;
  v5 = type metadata accessor for ForEach();
  v11 = &protocol witness table for AccessibilityRotorEntry<A>;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v5, &v11);
  type metadata accessor for AccessibilityRotorModifier(255, v5, v6, v7);
  v8 = type metadata accessor for ModifiedContent();
  v10[0] = v2;
  v10[1] = &protocol witness table for AccessibilityRotorModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v10);
}

uint64_t sub_1877B9124(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for AccessibilityRotorModifier<ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>>(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for AccessibilityRotorModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for AccessibilityRotorModifier<ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AccessibilityRotorModifier<ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>> and conformance <> ForEach<A, B, C>();
    v6 = type metadata accessor for AccessibilityRotorModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AccessibilityRotorModifier<ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>>);
  }
}

uint64_t sub_1877B91E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[3];
  type metadata accessor for AccessibilityRotorModifier(255, a1[2], a1[5], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for AccessibilityRotorModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t sub_1877B9244(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[6];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = type metadata accessor for Array();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12[1] = v2;
  v12[2] = AssociatedTypeWitness;
  v12[3] = type metadata accessor for AccessibilityRotorEntry(255, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  v12[4] = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v2);
  v12[5] = AssociatedConformanceWitness;
  v6 = type metadata accessor for ForEach();
  v12[0] = &protocol witness table for AccessibilityRotorEntry<A>;
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v6, v12);
  type metadata accessor for AccessibilityRotorModifier(255, v6, v7, v8);
  v9 = type metadata accessor for ModifiedContent();
  v11[0] = v1;
  v11[1] = &protocol witness table for AccessibilityRotorModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v11);
}

uint64_t sub_1877B9380(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = a1[3];
  v2 = a1[4];
  v3 = a1[6];
  v12 = type metadata accessor for Array();
  v13 = v1;
  v14 = type metadata accessor for AccessibilityRotorEntry(255, v1, v3, v4);
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v12);
  v16 = v3;
  v5 = type metadata accessor for ForEach();
  v11 = &protocol witness table for AccessibilityRotorEntry<A>;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v5, &v11);
  type metadata accessor for AccessibilityRotorModifier(255, v5, v6, v7);
  v8 = type metadata accessor for ModifiedContent();
  v10[0] = v2;
  v10[1] = &protocol witness table for AccessibilityRotorModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v10);
}

uint64_t sub_1877B946C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for AccessibilityRotorModifier<ForEach<Range<Int>, Int, AccessibilityRotorEntry<Never>>>(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for AccessibilityRotorModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t getEnumTagSinglePayload for AccessibilitySystemRotor(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilitySystemRotor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1877B95A8 + 4 * byte_187C5D4E5[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1877B95DC + 4 * byte_187C5D4E0[v4]))();
}

uint64_t sub_1877B95DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877B95E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1877B95ECLL);
  return result;
}

uint64_t sub_1877B95F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1877B9600);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1877B9604(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877B960C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilitySystemRotor.RawValue()
{
  return &type metadata for AccessibilitySystemRotor.RawValue;
}

uint64_t type metadata completion function for AccessibilityRotorModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityRotorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 57) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 24);
    outlined copy of Text.Suffix.Storage(*(_QWORD *)a2, v12, v13);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = v14;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))((a1 + v7 + 57) & ~v7, (a2 + v7 + 57) & ~v7, v5);
  }
  return a1;
}

uint64_t destroy for AccessibilityRotorModifier(uint64_t *a1, uint64_t a2)
{
  outlined consume of Text.Suffix.Storage(*a1, a1[1], a1[2]);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for AccessibilityRotorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  outlined copy of Text.Suffix.Storage(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 16))((*(unsigned __int8 *)(v10 + 80) + 57 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 57 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t assignWithCopy for AccessibilityRotorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  outlined copy of Text.Suffix.Storage(*(_QWORD *)a2, v7, v8);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  outlined consume of Text.Suffix.Storage(v10, v11, v12);
  v13 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v13;
  v14 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v14;
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 24))((*(unsigned __int8 *)(v15 + 80) + 57 + a1) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(unsigned __int8 *)(v15 + 80) + 57 + a2) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

_OWORD *initializeWithTake for AccessibilityRotorModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithTake for AccessibilityRotorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  outlined consume of Text.Suffix.Storage(v6, v7, v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 57 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 57 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityRotorModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 57) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 57) & ~v7);
      if ((*(_QWORD *)(a1 + 16) >> 1) > 0x80000000)
        return -(*(_QWORD *)(a1 + 16) >> 1);
      return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1877B9B1C + 4 * byte_187C5D4EA[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityRotorModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityRotorModifier<A>()
{
  return &protocol witness table for AccessibilityRotorModifier<A>;
}

uint64_t instantiation function for generic protocol witness table for AccessibilityRotorModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRotorModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRotorModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AccessibilitySystemRotor.RawValue@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized AccessibilitySystemRotor.RawValue.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilitySystemRotor.RawValue and conformance AccessibilitySystemRotor.RawValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilitySystemRotor.RawValue and conformance AccessibilitySystemRotor.RawValue;
  if (!lazy protocol witness table cache variable for type AccessibilitySystemRotor.RawValue and conformance AccessibilitySystemRotor.RawValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilitySystemRotor.RawValue, &type metadata for AccessibilitySystemRotor.RawValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilitySystemRotor.RawValue and conformance AccessibilitySystemRotor.RawValue);
  }
  return result;
}

unint64_t specialized AccessibilitySystemRotor.RawValue.init(rawValue:)(unint64_t result)
{
  if (result >= 0x12)
    return 18;
  return result;
}

uint64_t type metadata accessor for AccessibilityRotorModifier.Attachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityRotorModifier.Attachment);
}

uint64_t type metadata accessor for AccessibilityRotorModifier.RelationshipScope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityRotorModifier.RelationshipScope);
}

void type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [AccessibilityRotorInfo], (uint64_t)&type metadata for AccessibilityRotorInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>);
  }
}

unint64_t *partial apply for closure #1 in closure #1 in View.accessibilityRotor(_:textRanges:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in View.accessibilityRotor(_:textRanges:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1877B9F14()
{
  return objectdestroyTm_25((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1877B9F24()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in View.accessibilityRotor<A>(_:entries:entryLabel:)(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_1877B9F64()
{
  return objectdestroyTm_25((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in View.accessibilityRotor<A, B>(_:entries:entryID:entryLabel:)(a1, *(_QWORD *)(v2 + 40), *(_QWORD **)(v2 + 48), *(_QWORD *)(v2 + 32), a2);
}

uint64_t initializeWithCopy for AccessibilityRotorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  outlined copy of Text.Suffix.Storage(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for AccessibilityRotorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  outlined copy of Text.Suffix.Storage(*(_QWORD *)a2, v5, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  outlined consume of Text.Suffix.Storage(v8, v9, v10);
  v11 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v11;
  v12 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v12;
  return a1;
}

uint64_t assignWithTake for AccessibilityRotorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  outlined consume of Text.Suffix.Storage(v4, v5, v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityRotorInfo(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityRotorInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 2 * -a2;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityRotorInfo()
{
  return &type metadata for AccessibilityRotorInfo;
}

void base witness table accessor for _AttributeBody in AccessibilityRotorModifier<A>.RelationshipScope()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in AccessibilityRotorModifier<A>.Attachment()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t destroy for AccessibilityRotorInfo.Designation(uint64_t *a1)
{
  return outlined consume of Text.Suffix.Storage(*a1, a1[1], a1[2]);
}

uint64_t *initializeWithCopy for AccessibilityRotorInfo.Designation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of Text.Suffix.Storage(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AccessibilityRotorInfo.Designation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of Text.Suffix.Storage(*a2, v4, v5);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of Text.Suffix.Storage(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for AccessibilityRotorInfo.Designation(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of Text.Suffix.Storage(v3, v5, v4);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityRotorInfo.Designation()
{
  return &type metadata for AccessibilityRotorInfo.Designation;
}

uint64_t closure #1 in FocusBridge.acceptsFirstResponder.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _BYTE *a4@<X8>)
{
  BOOL v6;
  int v7;
  uint64_t result;
  int v9;
  _QWORD v10[4];
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[64];

  (*(void (**)(_QWORD *__return_ptr, _QWORD))(a2 + 16))(v10, *a1);
  if (v12)
    v6 = 0;
  else
    v6 = v13 == 1;
  if (v6)
  {
    result = outlined destroy of FocusItem?((uint64_t)v10);
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v10, (uint64_t)v14);
    outlined init with copy of FocusItem.Base((uint64_t)v14, (uint64_t)v10);
    v7 = v11;
    outlined destroy of FocusItem.Base((uint64_t)v10);
    if (v7)
    {
      result = outlined destroy of FocusItem((uint64_t)v14);
    }
    else
    {
      v9 = FocusItem.isFocusable.getter();
      result = outlined destroy of FocusItem((uint64_t)v14);
      if ((v9 & 1) != 0)
      {
        *a3 = 1;
        *a4 = 2;
        return result;
      }
    }
  }
  *a4 = 0;
  return result;
}

void FocusBridge.firstResponderDidChange(to:rootResponder:)(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v16;
  void *v17;
  uint64_t ObjectType;
  uint64_t (*v19)(uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t Strong;
  uint64_t v25;
  _UNKNOWN **v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  _BYTE v33[48];
  _UNKNOWN **v34;
  int v35;
  _BYTE v36[64];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int v41;

  v4 = (void *)FocusBridge.host.getter();
  if (!v4)
    return;
  v32 = v4;
  v5 = (void *)FocusBridge.host.getter();
  if (!v5)
  {

    return;
  }

  if (!a1 || (objc_opt_self(), (v6 = swift_dynamicCastObjCClass()) == 0))
  {
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    v40 = 1;
    v41 = 0;
    FocusBridge.focusedItem.setter((uint64_t)&v37);

    return;
  }
  v7 = (id)v6;
  v8 = a1;
  FocusBridge.focusedItem.getter((uint64_t)&v37);
  v9 = v32;
  v10 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI9FocusItemV_s5NeverOyXlTg503_s7c4UI11e80BridgeC23firstResponderDidChange2to04rootF0ySo11UIResponderCSg_AA0F4NodeCSgtFyXls2C4F6VXEfU_AD0eJ8Provider_AD0E4HostSo6UIViewCXcTf1cn_nTf4ng_n((uint64_t)&v37, v9);

  outlined destroy of FocusItem?((uint64_t)&v37);
  if (v10)
  {
    swift_unknownObjectRelease();
    if (v7 == (id)v10)
    {
LABEL_22:

      return;
    }
  }
  if (v7 == v9)
  {
    specialized FocusBridge.hostDidBecomeFirstResponder(in:)();
    goto LABEL_22;
  }
  v32 = v9;
  v11 = objc_msgSend(v7, sel_superview);
  if (v11)
  {
    v12 = v11;
    v31 = v8;
    while (1)
    {
      swift_getObjectType();
      v13 = swift_conformsToProtocol2();
      v14 = v13 ? v13 : 0;
      if (v13 ? v12 : 0)
        break;
      v16 = objc_msgSend(v12, sel_superview);

      v12 = v16;
      if (!v16)
      {
        v17 = 0;
        goto LABEL_25;
      }
    }
    ObjectType = swift_getObjectType();
    v19 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
    v20 = v12;
    v17 = (void *)v19(ObjectType, v14);

LABEL_25:
    v8 = v31;
  }
  else
  {
    v17 = 0;
  }
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  v40 = 1;
  v41 = 0;
  swift_getObjectType();
  v21 = swift_conformsToProtocol2();
  if (v21)
    v23 = v7;
  else
    v23 = 0;
  if (v23)
  {
    Strong = swift_weakLoadStrong();
    v34 = 0;
    swift_weakInit();
    v35 = 0;
    swift_unknownObjectWeakInit();
    v25 = swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<UIView>(v25, (uint64_t)v33);
    v33[32] = 2;
    v26 = &protocol witness table for UIViewResponder;
    if (!Strong)
      v26 = 0;
    v34 = v26;
    swift_weakAssign();
    v27 = v8;
    swift_release();
    v33[33] = 0;
    outlined init with take of FocusItem((uint64_t)v33, (uint64_t)v36);
    FocusBridge.focusedItem.setter((uint64_t)v36);

  }
  else
  {
    v28 = v32;
    if (a2)
    {
      v31 = &v31;
      MEMORY[0x1E0C80A78](v21, v22);
      MEMORY[0x1E0C80A78](v29, v30);
      dispatch thunk of ResponderNode.visit(applying:)();
    }
    outlined init with copy of FocusItem?((uint64_t)&v37, (uint64_t)v36);
    FocusBridge.focusedItem.setter((uint64_t)v36);

  }
  outlined destroy of FocusItem?((uint64_t)&v37);
}

void closure #2 in FocusBridge.firstResponderDidChange(to:rootResponder:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, id a4@<X5>, uint64_t a5@<X6>, void *a6@<X7>, _BYTE *a7@<X8>)
{
  BOOL v13;
  char v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  _BYTE v20[48];
  uint64_t v21;
  int v22;
  _QWORD v23[8];
  _BYTE v24[64];

  (*(void (**)(_QWORD *__return_ptr, _QWORD))(a2 + 16))(v23, *a1);
  if (v23[5])
    v13 = 0;
  else
    v13 = v23[6] == 1;
  if (v13)
  {
    outlined destroy of FocusItem?((uint64_t)v23);
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v23, (uint64_t)v24);
    v14 = FocusItem.isFocusable.getter();
    outlined init with copy of FocusItem((uint64_t)v24, (uint64_t)v23);
    if ((v14 & 1) != 0)
    {
      v15 = (id)FocusItem.platformResponder.getter();
      if (!v15)
        v15 = a3;
      v16 = v15;

      outlined destroy of FocusItem((uint64_t)v23);
      if (v16 == a4)
      {
        outlined destroy of FocusItem?(a5);
        outlined init with take of FocusItem((uint64_t)v24, a5);
        *a7 = 2;
        return;
      }
    }
    else
    {
      outlined destroy of FocusItem((uint64_t)v23);
    }
    v17 = FocusItem.platformResponder.getter();
    if (v17)
    {
      v18 = (void *)v17;
      if (a6)
      {
        v19 = a6;
        if ((objc_msgSend(v19, sel_isDescendantOfView_, v18) & 1) != 0)
        {
          v21 = 0;
          swift_weakInit();
          v22 = 0;
          swift_unknownObjectWeakInit();
          swift_unknownObjectWeakAssign();
          outlined init with take of WeakBox<UIView>((uint64_t)v23, (uint64_t)v20);
          v20[32] = 2;
          v21 = a2;
          swift_weakAssign();
          v20[33] = 0;
          outlined init with take of FocusItem((uint64_t)v20, (uint64_t)v23);

          outlined destroy of FocusItem((uint64_t)v24);
          outlined assign with take of FocusItem?((uint64_t)v23, a5);
          *a7 = 2;
          return;
        }
        outlined destroy of FocusItem((uint64_t)v24);

      }
      else
      {
        outlined destroy of FocusItem((uint64_t)v24);

      }
    }
    else
    {
      outlined destroy of FocusItem((uint64_t)v24);
    }
  }
  *a7 = 0;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI9FocusItemV_s5NeverOyXlTg503_s7c4UI11e80BridgeC23firstResponderDidChange2to04rootF0ySo11UIResponderCSg_AA0F4NodeCSgtFyXls2C4F6VXEfU_AD0eJ8Provider_AD0E4HostSo6UIViewCXcTf1cn_nTf4ng_n(uint64_t a1, void *a2)
{
  BOOL v3;
  uint64_t v4;
  id v5;
  _BYTE v7[64];
  _BYTE v8[40];
  uint64_t v9;
  uint64_t v10;

  outlined init with copy of FocusItem?(a1, (uint64_t)v8);
  if (v9)
    v3 = 0;
  else
    v3 = v10 == 1;
  if (v3)
    return 0;
  outlined init with take of FocusItem((uint64_t)v8, (uint64_t)v7);
  v4 = FocusItem.platformResponder.getter();
  if (!v4)
  {
    v5 = a2;
    v4 = (uint64_t)a2;
  }
  outlined destroy of FocusItem((uint64_t)v7);
  return v4;
}

uint64_t specialized FocusBridge.hostDidBecomeFirstResponder(in:)()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v7[8];
  _BYTE v8[64];

  result = FocusBridge.host.getter();
  if (result)
  {
    v2 = (void *)result;
    v3 = (void *)FocusBridge.host.getter();
    if (v3)
    {
      v4 = v3;
      if ((*(_BYTE *)(v0 + 16) & 1) == 0)
      {
        v5 = objc_msgSend(v3, sel_window);
        if (v5)
        {
          v6 = v5;

        }
      }

    }
    FocusBridge.focusedItem.getter((uint64_t)v7);
    if (v7[5] || v7[6] != 1)
    {
      outlined init with take of FocusItem((uint64_t)v7, (uint64_t)v8);
      FocusBridge.moveFocus(to:designatedPlatformResponder:)((uint64_t)v8, 0);

      return outlined destroy of FocusItem((uint64_t)v8);
    }
    else
    {

      return outlined destroy of FocusItem?((uint64_t)v7);
    }
  }
  return result;
}

void partial apply for closure #2 in FocusBridge.firstResponderDidChange(to:rootResponder:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  closure #2 in FocusBridge.firstResponderDidChange(to:rootResponder:)(a1, a2, *(void **)(v3 + 16), *(id *)(v3 + 40), *(_QWORD *)(v3 + 48), *(void **)(v3 + 56), a3);
}

uint64_t __designTimeBoolean<A>(_:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return __designTimeBoolean<A>(_:fallback:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for implicit closure #1 in __designTimeBoolean<A>(_:fallback:), a5);
}

uint64_t __designTimeFloat<A>(_:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return __designTimeBoolean<A>(_:fallback:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for implicit closure #1 in __designTimeFloat<A>(_:fallback:), a5);
}

uint64_t __designTimeBoolean<A>(_:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(char *, char *)@<X7>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *rawValue;
  unint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *);
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;

  v36 = a5;
  v37 = a3;
  v34 = a1;
  v38 = a6;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v32 - v16;
  v18 = type metadata accessor for Optional();
  v32 = *(_QWORD *)(v18 - 8);
  v33 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v32 - v20;
  if (one-time initialization token for __designTimeValues != -1)
    swift_once();
  swift_beginAccess();
  rawValue = __designTimeValues._rawValue;
  if (*((_QWORD *)__designTimeValues._rawValue + 2))
  {
    swift_bridgeObjectRetain();
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v34, a2);
    if ((v24 & 1) != 0)
    {
      outlined init with copy of Any(rawValue[7] + 32 * v23, (uint64_t)&v39);
    }
    else
    {
      v39 = 0u;
      v40 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
  }
  swift_endAccess();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v25 = swift_dynamicCast();
  v26 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v17, v25 ^ 1u, 1, AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = v35;
  v28 = v36;
  *(&v32 - 4) = a4;
  *(&v32 - 3) = v29;
  *(&v32 - 2) = a4;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF(v28, (uint64_t)(&v32 - 6), MEMORY[0x1E0DEDCE8], a4, v30, (uint64_t)v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v37, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v21, 1, a4) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v38, v10, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v21, v33);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a4);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v38, v21, a4);
  }
}

uint64_t __designTimeInteger<A>(_:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return __designTimeBoolean<A>(_:fallback:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for implicit closure #1 in __designTimeInteger<A>(_:fallback:), a5);
}

__n128 __designTimeString(_:fallback:)@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  __int128 v4;
  __n128 result;

  outlined retain of OSLogMessage(a1);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  return result;
}

uint64_t __designTimeString<A>(_:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return __designTimeBoolean<A>(_:fallback:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for implicit closure #1 in __designTimeString<A>(_:fallback:), a5);
}

{
  return __designTimeBoolean<A>(_:fallback:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for implicit closure #1 in __designTimeString<A>(_:fallback:), a5);
}

uint64_t implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v13);
  v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, double))(v17 + 16))((char *)&v19 - v15, a1, v14);
  return a8(v16, a3, a4);
}

Swift::Void __swiftcall __designTimeApplyIncrementalValues(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  _OWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *rawValue;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  __int128 v44;

  v34 = *((_QWORD *)a1._rawValue + 2);
  if (!v34)
    return;
  v33 = (char *)a1._rawValue + 32;
  swift_bridgeObjectRetain();
  v1 = 0;
  while (2)
  {
    v2 = *(_QWORD *)&v33[8 * v1];
    v35 = v1 + 1;
    v36 = v2 + 64;
    v3 = 1 << *(_BYTE *)(v2 + 32);
    if (v3 < 64)
      v4 = ~(-1 << v3);
    else
      v4 = -1;
    v5 = v4 & *(_QWORD *)(v2 + 64);
    v37 = (unint64_t)(v3 + 63) >> 6;
    swift_bridgeObjectRetain();
    v6 = 0;
    while (1)
    {
      if (v5)
      {
        v8 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        v9 = v8 | (v6 << 6);
LABEL_12:
        v10 = *(_QWORD *)(v2 + 56);
        v11 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v9);
        v12 = v11[1];
        *(_QWORD *)&v40 = *v11;
        *((_QWORD *)&v40 + 1) = v12;
        outlined init with copy of Any(v10 + 32 * v9, (uint64_t)v41);
        swift_bridgeObjectRetain();
        goto LABEL_31;
      }
      v13 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_49;
      if (v13 < v37)
      {
        v14 = *(_QWORD *)(v36 + 8 * v13);
        if (v14)
          goto LABEL_16;
        v15 = v6 + 2;
        ++v6;
        if (v13 + 1 < v37)
        {
          v14 = *(_QWORD *)(v36 + 8 * v15);
          if (v14)
            goto LABEL_19;
          v6 = v13 + 1;
          if (v13 + 2 < v37)
          {
            v14 = *(_QWORD *)(v36 + 8 * (v13 + 2));
            if (v14)
            {
              v13 += 2;
LABEL_16:
              v5 = (v14 - 1) & v14;
              v9 = __clz(__rbit64(v14)) + (v13 << 6);
              v6 = v13;
              goto LABEL_12;
            }
            v15 = v13 + 3;
            v6 = v13 + 2;
            if (v13 + 3 < v37)
            {
              v14 = *(_QWORD *)(v36 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v13 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_50;
                  if (v13 >= v37)
                  {
                    v6 = v37 - 1;
                    goto LABEL_30;
                  }
                  v14 = *(_QWORD *)(v36 + 8 * v13);
                  ++v15;
                  if (v14)
                    goto LABEL_16;
                }
              }
LABEL_19:
              v13 = v15;
              goto LABEL_16;
            }
          }
        }
      }
LABEL_30:
      v5 = 0;
      memset(v41, 0, sizeof(v41));
      v40 = 0u;
LABEL_31:
      outlined init with take of TableCellFormula((uint64_t)&v40, (uint64_t)&v42, (uint64_t (*)(_QWORD))type metadata accessor for (key: String, value: Any)?);
      v16 = v43;
      if (!v43)
        break;
      v17 = v42;
      outlined init with take of Any(&v44, &v40);
      if (one-time initialization token for __designTimeValues != -1)
        swift_once();
      swift_beginAccess();
      outlined init with copy of Any((uint64_t)&v40, (uint64_t)v39);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      rawValue = __designTimeValues._rawValue;
      v38 = __designTimeValues._rawValue;
      __designTimeValues._rawValue = (void *)0x8000000000000000;
      v21 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
      v22 = rawValue[2];
      v23 = (v20 & 1) == 0;
      v24 = v22 + v23;
      if (__OFADD__(v22, v23))
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return;
      }
      v25 = v20;
      if (rawValue[3] >= v24)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v28 = v38;
          if ((v20 & 1) != 0)
            goto LABEL_8;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v28 = v38;
          if ((v25 & 1) != 0)
            goto LABEL_8;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
        v26 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
        if ((v25 & 1) != (v27 & 1))
          goto LABEL_51;
        v21 = v26;
        v28 = v38;
        if ((v25 & 1) != 0)
        {
LABEL_8:
          v7 = (_OWORD *)(v28[7] + 32 * v21);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
          outlined init with take of Any(v39, v7);
          goto LABEL_9;
        }
      }
      v28[(v21 >> 6) + 8] |= 1 << v21;
      v29 = (uint64_t *)(v28[6] + 16 * v21);
      *v29 = v17;
      v29[1] = v16;
      outlined init with take of Any(v39, (_OWORD *)(v28[7] + 32 * v21));
      v30 = v28[2];
      v31 = __OFADD__(v30, 1);
      v32 = v30 + 1;
      if (v31)
        goto LABEL_48;
      v28[2] = v32;
      swift_bridgeObjectRetain();
LABEL_9:
      __designTimeValues._rawValue = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
    }
    swift_release();
    v1 = v35;
    if (v35 != v34)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
}

void one-time initialization function for __designTimeValues()
{
  __designTimeValues._rawValue = (void *)MEMORY[0x1E0DEE9E0];
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  int v40;
  _OWORD v41[2];

  v3 = v2;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  type metadata accessor for _DictionaryStorage<CodingUserInfoKey, Any>();
  v40 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v39 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v37 = v2;
  v38 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = v39;
    v25 = v39[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_34;
      v25 = v39[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_34:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v39[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v19 >= v38)
              goto LABEL_34;
            v25 = v39[v19];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v19 = v26;
      }
    }
LABEL_21:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v6 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v9, v28, v5);
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v22), v41);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v28, v5);
      outlined init with copy of Any(*(_QWORD *)(v10 + 56) + 32 * v22, (uint64_t)v41);
    }
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v12 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v17 + 8 * v31);
      }
      while (v35 == -1);
      v20 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v5);
    result = (uint64_t)outlined init with take of Any(v41, (_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v20));
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v37;
  v24 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v10 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  v5 = type metadata accessor for CommandOperation();
  v42 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  type metadata accessor for _DictionaryStorage<UIMenuElement, CommandOperation>();
  v43 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v39 = v2;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v41 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_34;
      v24 = v41[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v40)
              goto LABEL_34;
            v24 = v41[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(void **)(*(_QWORD *)(v9 + 48) + 8 * v21);
    v27 = *(_QWORD *)(v42 + 72);
    v28 = *(_QWORD *)(v9 + 56) + v27 * v21;
    if ((v43 & 1) != 0)
    {
      outlined init with take of TableCellFormula(v28, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    }
    else
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v28, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
      v29 = v26;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v11 + 40));
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      v19 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v19) = v26;
    result = outlined init with take of TableCellFormula((uint64_t)v8, *(_QWORD *)(v11 + 56) + v27 * v19, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v37 = 1 << *(_BYTE *)(v9 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  int v43;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  type metadata accessor for _DictionaryStorage<UUID, PlatformItemList>();
  v43 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v41 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v39 = v2;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_34;
      v25 = v41[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v19 >= v40)
              goto LABEL_34;
            v25 = v41[v19];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v19 = v26;
      }
    }
LABEL_21:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v6 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v43 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v9, v28, v5);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v28, v5);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain();
    }
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v30 = -1 << *(_BYTE *)(v12 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v5);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v37 = 1 << *(_BYTE *)(v10 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  __int128 v42;

  v3 = v2;
  v5 = type metadata accessor for CommandGroupPlacementBox(0);
  v40 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  type metadata accessor for _DictionaryStorage<CommandGroupPlacementBox, CommandAccumulator>();
  v41 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v37 = v2;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v39 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v38)
      break;
    v23 = v39;
    v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_34;
      v24 = v39[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_34:
          swift_release();
          v3 = v37;
          if ((v41 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v38)
              goto LABEL_34;
            v24 = v39[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v40 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v41 & 1) != 0)
    {
      outlined init with take of TableCellFormula(v27, (uint64_t)v8, type metadata accessor for CommandGroupPlacementBox);
      v42 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v21);
    }
    else
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v8, type metadata accessor for CommandGroupPlacementBox);
      v42 = *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v21);
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    type metadata accessor for CommandGroupPlacement(0);
    UUID.hash(into:)();
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = outlined init with take of TableCellFormula((uint64_t)v8, *(_QWORD *)(v11 + 48) + v26 * v19, type metadata accessor for CommandGroupPlacementBox);
    *(_OWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19) = v42;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v37;
  v23 = v39;
  if ((v41 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  void *v36;
  id v37;
  char v38;
  uint64_t v39;
  Swift::UInt v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  int v54;
  Swift::UInt v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  id v60;
  char v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  char v66;
  __int128 v67;
  __int128 v68;
  char v69;
  char v70;
  __int16 v71;
  _BYTE v72[184];
  id v73;
  char v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  char v79;
  __int128 v80;
  __int128 v81;
  char v82;
  char v83;
  __int16 v84;
  uint64_t v85;

  v3 = v2;
  v5 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SystemSegmentItem();
  v53 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v2;
  type metadata accessor for _DictionaryStorage<SystemSegmentItem, Int>();
  v54 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)();
  v15 = v14;
  if (*(_QWORD *)(v13 + 16))
  {
    v16 = 1 << *(_BYTE *)(v13 + 32);
    v17 = *(_QWORD *)(v13 + 64);
    v51 = (_QWORD *)(v13 + 64);
    if (v16 < 64)
      v18 = ~(-1 << v16);
    else
      v18 = -1;
    v19 = v18 & v17;
    v49 = v3;
    v50 = (unint64_t)(v16 + 63) >> 6;
    v52 = v12 + 64;
    v20 = v14 + 64;
    result = swift_retain();
    v22 = 0;
    while (1)
    {
      if (v19)
      {
        v57 = (v19 - 1) & v19;
        v25 = __clz(__rbit64(v19)) | (v22 << 6);
      }
      else
      {
        v26 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
          return result;
        }
        if (v26 >= v50)
          goto LABEL_48;
        v27 = v51[v26];
        ++v22;
        if (!v27)
        {
          v22 = v26 + 1;
          if (v26 + 1 >= v50)
            goto LABEL_48;
          v27 = v51[v22];
          if (!v27)
          {
            v28 = v26 + 2;
            if (v28 >= v50)
            {
LABEL_48:
              swift_release();
              v3 = v49;
              if ((v54 & 1) != 0)
              {
                v48 = 1 << *(_BYTE *)(v13 + 32);
                if (v48 >= 64)
                  bzero(v51, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v51 = -1 << v48;
                *(_QWORD *)(v13 + 16) = 0;
              }
              break;
            }
            v27 = v51[v28];
            if (!v27)
            {
              while (1)
              {
                v22 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_55;
                if (v22 >= v50)
                  goto LABEL_48;
                v27 = v51[v22];
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
            v22 = v28;
          }
        }
LABEL_21:
        v57 = (v27 - 1) & v27;
        v25 = __clz(__rbit64(v27)) + (v22 << 6);
      }
      v29 = *(_QWORD *)(v53 + 72);
      v30 = *(_QWORD *)(v13 + 48) + v29 * v25;
      v59 = v22;
      v56 = v29;
      if ((v54 & 1) != 0)
        outlined init with take of TableCellFormula(v30, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
      else
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v30, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
      v31 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v25);
      Hasher.init(_seed:)();
      v32 = *(void **)v12;
      v58 = v31;
      if (v32)
      {
        v33 = objc_msgSend(v32, sel_string);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v34 = MEMORY[0x1E0CE7280];
      v35 = MEMORY[0x1E0DEB940];
      outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v52, (uint64_t)v72, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v72, (uint64_t)&v73, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v34, (uint64_t (*)(_QWORD, uint64_t))v35);
      if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v73) == 1)
      {
LABEL_29:
        Hasher._combine(_:)(0);
        goto LABEL_36;
      }
      if (v85)
      {
        outlined retain of Image.Resolved?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
        swift_unknownObjectRetain();
        objc_opt_self();
        v36 = (void *)swift_dynamicCastObjCClassUnconditional();
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        if (v36)
        {
          outlined retain of Image.Resolved?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
          outlined destroy of PlatformItemList.Item((uint64_t)v8);
          goto LABEL_35;
        }
      }
      else
      {
        outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v72, (uint64_t)&v60, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined retain of Image.Resolved((uint64_t)&v60);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      }
      v37 = v73;
      v38 = v74;
      v60 = v73;
      v61 = v74;
      v62 = v75;
      v63 = v76;
      v64 = v77;
      v65 = v78;
      v66 = v79;
      v67 = v80;
      v68 = v81;
      v69 = v82;
      v70 = v83;
      v71 = v84;
      v39 = *((_QWORD *)v8 + 6);
      outlined copy of GraphicsImage.Contents?(v73, v74);
      v36 = (void *)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v39);
      outlined retain of Image.Resolved?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
      outlined consume of GraphicsImage.Contents?(v37, v38);
      outlined destroy of PlatformItemList.Item((uint64_t)v8);
      if (!v36)
        goto LABEL_29;
LABEL_35:
      Hasher._combine(_:)(1u);
      NSObject.hash(into:)();

LABEL_36:
      Hasher._combine(_:)(v12[56]);
      if (*((_QWORD *)v12 + 60))
      {
        v55 = v12[496];
        v40 = *((_QWORD *)v12 + 61);
        Hasher._combine(_:)(1u);
        String.hash(into:)();
        Hasher._combine(_:)(v40);
        Hasher._combine(_:)(v55);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      result = Hasher._finalize()();
      v41 = -1 << *(_BYTE *)(v15 + 32);
      v42 = result & ~v41;
      v43 = v42 >> 6;
      if (((-1 << v42) & ~*(_QWORD *)(v20 + 8 * (v42 >> 6))) != 0)
      {
        v23 = __clz(__rbit64((-1 << v42) & ~*(_QWORD *)(v20 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v44 = 0;
        v45 = (unint64_t)(63 - v41) >> 6;
        do
        {
          if (++v43 == v45 && (v44 & 1) != 0)
          {
            __break(1u);
            goto LABEL_54;
          }
          v46 = v43 == v45;
          if (v43 == v45)
            v43 = 0;
          v44 |= v46;
          v47 = *(_QWORD *)(v20 + 8 * v43);
        }
        while (v47 == -1);
        v23 = __clz(__rbit64(~v47)) + (v43 << 6);
      }
      v24 = v56;
      *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      result = outlined init with take of TableCellFormula((uint64_t)v12, *(_QWORD *)(v15 + 48) + v24 * v23, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
      v22 = v59;
      *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v23) = v58;
      ++*(_QWORD *)(v15 + 16);
      v19 = v57;
    }
  }
  result = swift_release();
  *v3 = v15;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;

  v3 = v2;
  v5 = type metadata accessor for ToolbarStorage.Entry(0);
  v43 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  type metadata accessor for _DictionaryStorage<String, ToolbarStorage.Entry>();
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v2;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_34;
      v25 = v42[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_34:
          swift_release();
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v18 >= v41)
              goto LABEL_34;
            v25 = v42[v18];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v18 = v26;
      }
    }
LABEL_21:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    v27 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v43 + 72);
    v31 = *(_QWORD *)(v9 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      outlined init with take of TableCellFormula(v31, (uint64_t)v8, type metadata accessor for ToolbarStorage.Entry);
    }
    else
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v31, (uint64_t)v8, type metadata accessor for ToolbarStorage.Entry);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    result = outlined init with take of TableCellFormula((uint64_t)v8, *(_QWORD *)(v11 + 56) + v30 * v19, type metadata accessor for ToolbarStorage.Entry);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v40;
  v24 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v39 = 1 << *(_BYTE *)(v9 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;
  uint64_t v46;

  v3 = v2;
  v5 = type metadata accessor for UTType();
  v46 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  type metadata accessor for _DictionaryStorage<UTType, String?>();
  v45 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v43 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v41 = v2;
  v42 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_34;
      v25 = v43[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v18 >= v42)
              goto LABEL_34;
            v25 = v43[v18];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v18 = v26;
      }
    }
LABEL_21:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v46 + 72);
    v28 = *(_QWORD *)(v9 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v46 + 32))(v8, v28, v5);
      v29 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v29;
      v30 = v29[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v46 + 16))(v8, v28, v5);
      v32 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v22);
      v31 = *v32;
      v30 = v32[1];
      swift_bridgeObjectRetain();
    }
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0358]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v33 = -1 << *(_BYTE *)(v11 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v46 + 32))(*(_QWORD *)(v11 + 48) + v27 * v19, v8, v5);
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v19);
    *v20 = v31;
    v20[1] = v30;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v40 = 1 << *(_BYTE *)(v9 + 32);
  if (v40 >= 64)
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v40;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  int v42;

  v3 = v2;
  v5 = type metadata accessor for UTType();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  type metadata accessor for _DictionaryStorage<NSFileWrapper, UTType>();
  v42 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v41 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v39 = v2;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_34;
      v25 = v41[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v19 >= v40)
              goto LABEL_34;
            v25 = v41[v19];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v19 = v26;
      }
    }
LABEL_21:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    v27 = *(void **)(*(_QWORD *)(v10 + 48) + 8 * v22);
    v28 = *(_QWORD *)(v6 + 72);
    v29 = *(_QWORD *)(v10 + 56) + v28 * v22;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v9, v29, v5);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v29, v5);
      v30 = v27;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v12 + 40));
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v17 + 8 * v33);
      }
      while (v37 == -1);
      v20 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v20) = v27;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 56) + v28 * v20, v9, v5);
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = v41;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v10 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  int v40;
  __int128 v41;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  type metadata accessor for _DictionaryStorage<UUID, (_:)>();
  v40 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v39 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v37 = v2;
  v38 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = v39;
    v25 = v39[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_34;
      v25 = v39[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_34:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v39[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v19 >= v38)
              goto LABEL_34;
            v25 = v39[v19];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v19 = v26;
      }
    }
LABEL_21:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v6 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v9, v28, v5);
      v41 = *(_OWORD *)(*(_QWORD *)(v10 + 56) + 16 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v28, v5);
      v41 = *(_OWORD *)(*(_QWORD *)(v10 + 56) + 16 * v22);
      swift_retain();
    }
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v12 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v17 + 8 * v31);
      }
      while (v35 == -1);
      v20 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v5);
    *(_OWORD *)(*(_QWORD *)(v12 + 56) + 16 * v20) = v41;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v37;
  v24 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v10 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  char v29;
  uint64_t v30;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, AnyListSelection>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v25 = v3;
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    v12 = 0;
    while (1)
    {
      if (v10)
      {
        v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v14 = v13 | (v12 << 6);
      }
      else
      {
        v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v15 >= v11)
          goto LABEL_22;
        v16 = v8[v15];
        ++v12;
        if (!v16)
        {
          v12 = v15 + 1;
          if (v15 + 1 >= v11)
            goto LABEL_22;
          v16 = v8[v12];
          if (!v16)
          {
            v17 = v15 + 2;
            if (v17 >= v11)
            {
LABEL_22:
              swift_release();
              v3 = v25;
              if ((a2 & 1) != 0)
              {
                v24 = 1 << *(_BYTE *)(v5 + 32);
                if (v24 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v24;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v16 = v8[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_29;
                if (v12 >= v11)
                  goto LABEL_22;
                v16 = v8[v12];
                ++v17;
                if (v16)
                  goto LABEL_19;
              }
            }
            v12 = v17;
          }
        }
LABEL_19:
        v10 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v12 << 6);
      }
      v18 = *(_QWORD *)(v5 + 48) + 48 * v14;
      v20 = *(_OWORD *)v18;
      v19 = *(_OWORD *)(v18 + 16);
      v21 = *(_BYTE *)(v18 + 32);
      v22 = *(_QWORD *)(v18 + 40);
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
      if ((a2 & 1) == 0)
      {
        v26 = *(_OWORD *)v18;
        v27 = *(_OWORD *)(v18 + 16);
        swift_retain();
        v20 = v26;
        v19 = v27;
      }
      v28[0] = v20;
      v28[1] = v19;
      v29 = v21;
      v30 = v22;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v28, v23, v6);
    }
  }
  swift_release();
  *v3 = v6;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  __int128 v32;
  _OWORD v33[2];
  char v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  uint64_t v38;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, NavigationListState.Selection>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  v31 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = 1 << *(_BYTE *)(v5 + 32);
    v27 = v2;
    v28 = (_QWORD *)(v5 + 64);
    v7 = -1;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    v8 = v7 & *(_QWORD *)(v5 + 64);
    v9 = (unint64_t)(v6 + 63) >> 6;
    swift_retain();
    v10 = 0;
    while (1)
    {
      if (v8)
      {
        v11 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v12 = v11 | (v10 << 6);
      }
      else
      {
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v13 >= v9)
          goto LABEL_22;
        v14 = v28[v13];
        ++v10;
        if (!v14)
        {
          v10 = v13 + 1;
          if (v13 + 1 >= v9)
            goto LABEL_22;
          v14 = v28[v10];
          if (!v14)
          {
            v15 = v13 + 2;
            if (v15 >= v9)
            {
LABEL_22:
              swift_release();
              v3 = v27;
              if ((a2 & 1) != 0)
              {
                v26 = 1 << *(_BYTE *)(v5 + 32);
                if (v26 > 63)
                  bzero(v28, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v28 = -1 << v26;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v14 = v28[v15];
            if (!v14)
            {
              while (1)
              {
                v10 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_29;
                if (v10 >= v9)
                  goto LABEL_22;
                v14 = v28[v10];
                ++v15;
                if (v14)
                  goto LABEL_19;
              }
            }
            v10 = v15;
          }
        }
LABEL_19:
        v8 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      v16 = *(_QWORD *)(v5 + 48) + 48 * v12;
      v18 = *(_OWORD *)v16;
      v17 = *(_OWORD *)(v16 + 16);
      v19 = *(_BYTE *)(v16 + 32);
      v20 = *(_QWORD *)(v16 + 40);
      v21 = *(_QWORD *)(v5 + 56) + 40 * v12;
      v23 = *(_QWORD *)v21;
      v22 = *(_QWORD *)(v21 + 8);
      v24 = *(_OWORD *)(v21 + 16);
      v25 = *(_QWORD *)(v21 + 32);
      if ((a2 & 1) == 0)
      {
        v29 = *(_OWORD *)v16;
        v30 = *(_OWORD *)(v16 + 16);
        v32 = *(_OWORD *)(v21 + 16);
        swift_retain();
        swift_retain();
        swift_retain();
        v24 = v32;
        v18 = v29;
        v17 = v30;
      }
      v36[0] = v23;
      v36[1] = v22;
      v37 = v24;
      v38 = v25;
      v33[0] = v18;
      v33[1] = v17;
      v34 = v19;
      v35 = v20;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v33, (uint64_t)v36, v31);
    }
  }
  swift_release();
  *v3 = v31;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  char v25;
  uint64_t v26;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, Bool>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    v12 = 0;
    while (1)
    {
      if (v10)
      {
        v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v14 = v13 | (v12 << 6);
      }
      else
      {
        v20 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return;
        }
        if (v20 >= v11)
          goto LABEL_20;
        v21 = v8[v20];
        ++v12;
        if (!v21)
        {
          v12 = v20 + 1;
          if (v20 + 1 >= v11)
            goto LABEL_20;
          v21 = v8[v12];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v11)
            {
LABEL_20:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v23 = 1 << *(_BYTE *)(v5 + 32);
                if (v23 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v23;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v21 = v8[v22];
            if (!v21)
            {
              while (1)
              {
                v12 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_27;
                if (v12 >= v11)
                  goto LABEL_20;
                v21 = v8[v12];
                ++v22;
                if (v21)
                  goto LABEL_19;
              }
            }
            v12 = v22;
          }
        }
LABEL_19:
        v10 = (v21 - 1) & v21;
        v14 = __clz(__rbit64(v21)) + (v12 << 6);
      }
      v15 = *(_QWORD *)(v5 + 48) + 48 * v14;
      v16 = *(_QWORD *)(v15 + 40);
      v17 = *(_BYTE *)(v15 + 32);
      v18 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v14);
      v19 = *(_OWORD *)(v15 + 16);
      v24[0] = *(_OWORD *)v15;
      v24[1] = v19;
      v25 = v17;
      v26 = v16;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v24, v18, v6);
    }
  }
  swift_release();
  *v3 = v6;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  char v29;
  uint64_t v30;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>, (void (*)(uint64_t))type metadata accessor for [Binding<Bool>], (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v25 = v3;
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    v12 = 0;
    while (1)
    {
      if (v10)
      {
        v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v14 = v13 | (v12 << 6);
      }
      else
      {
        v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v15 >= v11)
          goto LABEL_22;
        v16 = v8[v15];
        ++v12;
        if (!v16)
        {
          v12 = v15 + 1;
          if (v15 + 1 >= v11)
            goto LABEL_22;
          v16 = v8[v12];
          if (!v16)
          {
            v17 = v15 + 2;
            if (v17 >= v11)
            {
LABEL_22:
              swift_release();
              v3 = v25;
              if ((a2 & 1) != 0)
              {
                v24 = 1 << *(_BYTE *)(v5 + 32);
                if (v24 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v24;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v16 = v8[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_29;
                if (v12 >= v11)
                  goto LABEL_22;
                v16 = v8[v12];
                ++v17;
                if (v16)
                  goto LABEL_19;
              }
            }
            v12 = v17;
          }
        }
LABEL_19:
        v10 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v12 << 6);
      }
      v18 = *(_QWORD *)(v5 + 48) + 48 * v14;
      v20 = *(_OWORD *)v18;
      v19 = *(_OWORD *)(v18 + 16);
      v21 = *(_BYTE *)(v18 + 32);
      v22 = *(_QWORD *)(v18 + 40);
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
      if ((a2 & 1) == 0)
      {
        v26 = *(_OWORD *)v18;
        v27 = *(_OWORD *)(v18 + 16);
        swift_bridgeObjectRetain();
        v20 = v26;
        v19 = v27;
      }
      v28[0] = v20;
      v28[1] = v19;
      v29 = v21;
      v30 = v22;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v28, v23, v6);
    }
  }
  swift_release();
  *v3 = v6;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t i;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  _QWORD *v29;
  char v30;
  _QWORD *v31;
  int64_t v32;
  _QWORD v33[4];
  char v34;

  v4 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableColumnCustomizationID, TableColumnCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  v30 = a2;
  v31 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = 1 << *(_BYTE *)(v4 + 32);
    v29 = (_QWORD *)(v4 + 64);
    v6 = -1;
    if (v5 < 64)
      v6 = ~(-1 << v5);
    v7 = v6 & *(_QWORD *)(v4 + 64);
    v28 = (unint64_t)(v5 + 63) >> 6;
    swift_retain();
    for (i = 0; ; i = v32)
    {
      if (v7)
      {
        v9 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v32 = i;
        v10 = v9 | (i << 6);
      }
      else
      {
        v11 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v11 >= v28)
          goto LABEL_22;
        v12 = v29[v11];
        v13 = i + 1;
        if (!v12)
        {
          v13 = i + 2;
          if (i + 2 >= v28)
            goto LABEL_22;
          v12 = v29[v13];
          if (!v12)
          {
            v14 = i + 3;
            if (i + 3 >= v28)
            {
LABEL_22:
              swift_release();
              if ((v30 & 1) != 0)
              {
                v26 = 1 << *(_BYTE *)(v4 + 32);
                if (v26 > 63)
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v26;
                *(_QWORD *)(v4 + 16) = 0;
              }
              break;
            }
            v12 = v29[v14];
            if (!v12)
            {
              while (1)
              {
                v13 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_29;
                if (v13 >= v28)
                  goto LABEL_22;
                v12 = v29[v13];
                ++v14;
                if (v12)
                  goto LABEL_19;
              }
            }
            v13 = i + 3;
          }
        }
LABEL_19:
        v7 = (v12 - 1) & v12;
        v32 = v13;
        v10 = __clz(__rbit64(v12)) + (v13 << 6);
      }
      v15 = v4;
      v16 = *(_QWORD *)(v4 + 48) + 40 * v10;
      v17 = *(_QWORD *)v16;
      v18 = *(_QWORD *)(v16 + 8);
      v20 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v16 + 24);
      v21 = *(_BYTE *)(v16 + 32);
      v22 = *(_QWORD *)(v4 + 56) + 16 * v10;
      v23 = *(_QWORD *)v22;
      v24 = *(unsigned __int8 *)(v22 + 8);
      v25 = *(unsigned __int8 *)(v22 + 9);
      if ((v30 & 1) == 0)
        outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_QWORD *)(v16 + 16), *(_QWORD *)(v16 + 24), *(_BYTE *)(v16 + 32));
      v33[0] = v17;
      v33[1] = v18;
      v33[2] = v20;
      v33[3] = v19;
      v34 = v21;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v33, v23, v24 | (v25 << 8), v31);
      v4 = v15;
    }
  }
  swift_release();
  *v27 = v31;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt32 *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _OWORD v36[12];

  v3 = v2;
  v5 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (Swift::UInt32 *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *v2;
  type metadata accessor for _DictionaryStorage<DisplayList.HostedViewState.Key, DisplayList.HostedViewState.ViewInfo>();
  v11 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v10 + 16))
  {
    v35 = v3;
    v12 = 1 << *(_BYTE *)(v10 + 32);
    v13 = (_QWORD *)(v10 + 64);
    v14 = -1;
    if (v12 < 64)
      v14 = ~(-1 << v12);
    v15 = v14 & *(_QWORD *)(v10 + 64);
    v16 = (unint64_t)(v12 + 63) >> 6;
    swift_retain();
    v17 = 0;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v17 << 6);
      }
      else
      {
        v20 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }
        if (v20 >= v16)
          goto LABEL_23;
        v21 = v13[v20];
        ++v17;
        if (!v21)
        {
          v17 = v20 + 1;
          if (v20 + 1 >= v16)
            goto LABEL_23;
          v21 = v13[v17];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v16)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) == 0)
              {
                swift_release();
                v3 = v35;
                goto LABEL_30;
              }
              v33 = 1 << *(_BYTE *)(v10 + 32);
              if (v33 >= 64)
                bzero((void *)(v10 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v13 = -1 << v33;
              v3 = v35;
              *(_QWORD *)(v10 + 16) = 0;
              break;
            }
            v21 = v13[v22];
            if (!v21)
            {
              while (1)
              {
                v17 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_32;
                if (v17 >= v16)
                  goto LABEL_23;
                v21 = v13[v17];
                ++v22;
                if (v21)
                  goto LABEL_20;
              }
            }
            v17 = v22;
          }
        }
LABEL_20:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v17 << 6);
      }
      v23 = *(_QWORD *)(v10 + 48) + *(_QWORD *)(v6 + 72) * v19;
      if ((a2 & 1) != 0)
      {
        outlined init with take of TableCellFormula(v23, (uint64_t)v9, type metadata accessor for DisplayList.HostedViewState.Key);
        v24 = (_OWORD *)(*(_QWORD *)(v10 + 56) + 176 * v19);
        v25 = v24[7];
        v26 = v24[8];
        v27 = v24[10];
        v36[9] = v24[9];
        v36[10] = v27;
        v36[7] = v25;
        v36[8] = v26;
        v28 = v24[3];
        v29 = v24[4];
        v30 = v24[6];
        v36[5] = v24[5];
        v36[6] = v30;
        v36[3] = v28;
        v36[4] = v29;
        v32 = v24[1];
        v31 = v24[2];
        v36[0] = *v24;
        v36[1] = v32;
        v36[2] = v31;
      }
      else
      {
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v23, (uint64_t)v9, type metadata accessor for DisplayList.HostedViewState.Key);
        outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(_QWORD *)(v10 + 56) + 176 * v19, (uint64_t)v36);
      }
      specialized _NativeDictionary._unsafeInsertNew(key:value:)(v9, (uint64_t)v36, v11);
    }
  }
  swift_release();
LABEL_30:
  *v3 = v11;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarStorage.ID, Int>, (void (*)(void))lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v25 = v3;
    v26 = (_QWORD *)(v5 + 64);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(v5 + 64);
    v10 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v11 << 6);
      }
      else
      {
        v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v14 >= v10)
          goto LABEL_22;
        v15 = v26[v14];
        ++v11;
        if (!v15)
        {
          v11 = v14 + 1;
          if (v14 + 1 >= v10)
            goto LABEL_22;
          v15 = v26[v11];
          if (!v15)
          {
            v16 = v14 + 2;
            if (v16 >= v10)
            {
LABEL_22:
              swift_release();
              v3 = v25;
              if ((a2 & 1) != 0)
              {
                v24 = 1 << *(_BYTE *)(v5 + 32);
                if (v24 > 63)
                  bzero(v26, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v26 = -1 << v24;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v15 = v26[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_29;
                if (v11 >= v10)
                  goto LABEL_22;
                v15 = v26[v11];
                ++v16;
                if (v15)
                  goto LABEL_19;
              }
            }
            v11 = v16;
          }
        }
LABEL_19:
        v9 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v11 << 6);
      }
      v17 = *(_QWORD *)(v5 + 48) + 48 * v13;
      v18 = *(_QWORD *)v17;
      v19 = *(_QWORD *)(v17 + 8);
      v20 = *(_OWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 32);
      v22 = *(_QWORD *)(v17 + 40);
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v13);
      if ((a2 & 1) == 0)
      {
        v27 = *(_OWORD *)(v17 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20 = v27;
      }
      v28[0] = v18;
      v28[1] = v19;
      v29 = v20;
      v30 = v21;
      v31 = v22;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v28, v23, v6);
    }
  }
  swift_release();
  *v3 = v6;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[5];
  char v25;

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<ToolbarStorage.Entry.ID, Int>, (void (*)(void))lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    v12 = 0;
    while (1)
    {
      if (v10)
      {
        v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v14 = v13 | (v12 << 6);
      }
      else
      {
        v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return;
        }
        if (v15 >= v11)
          goto LABEL_23;
        v16 = v8[v15];
        ++v12;
        if (!v16)
        {
          v12 = v15 + 1;
          if (v15 + 1 >= v11)
            goto LABEL_23;
          v16 = v8[v12];
          if (!v16)
          {
            v17 = v15 + 2;
            if (v17 >= v11)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v23 = 1 << *(_BYTE *)(v5 + 32);
                if (v23 >= 64)
                  bzero((void *)(v5 + 64), ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v23;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v16 = v8[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_30;
                if (v12 >= v11)
                  goto LABEL_23;
                v16 = v8[v12];
                ++v17;
                if (v16)
                  goto LABEL_20;
              }
            }
            v12 = v17;
          }
        }
LABEL_20:
        v10 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v12 << 6);
      }
      v18 = *(_QWORD *)(v5 + 48) + 88 * v14;
      if ((a2 & 1) != 0)
      {
        v19 = *(_OWORD *)(v18 + 16);
        v24[0] = *(_OWORD *)v18;
        v24[1] = v19;
        v20 = *(_OWORD *)(v18 + 32);
        v21 = *(_OWORD *)(v18 + 48);
        v22 = *(_OWORD *)(v18 + 64);
        v25 = *(_BYTE *)(v18 + 80);
        v24[3] = v21;
        v24[4] = v22;
        v24[2] = v20;
      }
      else
      {
        outlined init with copy of ToolbarStorage.Entry.ID(v18, (uint64_t)v24);
      }
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v24, *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14), v6);
    }
  }
  swift_release();
  *v3 = v6;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[6];
  _BYTE v28[25];

  v3 = v2;
  v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, [WeakBox<DocumentViewController>]>, type metadata accessor for [WeakBox<DocumentViewController>], (void (*)(void))lazy protocol witness table accessor for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    v12 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return;
        }
        if (v16 >= v11)
          goto LABEL_23;
        v17 = v8[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_23;
          v17 = v8[v12];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v26 = 1 << *(_BYTE *)(v5 + 32);
                if (v26 >= 64)
                  bzero((void *)(v5 + 64), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v26;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                v12 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_30;
                if (v12 >= v11)
                  goto LABEL_23;
                v17 = v8[v12];
                ++v18;
                if (v17)
                  goto LABEL_20;
              }
            }
            v12 = v18;
          }
        }
LABEL_20:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = (__int128 *)(*(_QWORD *)(v5 + 48) + (v15 << 7));
      if ((a2 & 1) != 0)
      {
        v20 = *v19;
        v21 = v19[1];
        v22 = v19[2];
        v27[3] = v19[3];
        v23 = v19[4];
        v24 = v19[5];
        v25 = v19[6];
        *(_OWORD *)&v28[9] = *(__int128 *)((char *)v19 + 105);
        v27[5] = v24;
        *(_OWORD *)v28 = v25;
        v27[4] = v23;
        v27[1] = v21;
        v27[2] = v22;
        v27[0] = v20;
        v13 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
      }
      else
      {
        outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v19, (uint64_t)v27);
        v13 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
        swift_bridgeObjectRetain();
      }
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v27, v13, v6);
    }
  }
  swift_release();
  *v3 = v6;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  a3(0);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;

  v4 = v3;
  v6 = *v3;
  a3(0);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v36 = a2;
    v35 = v4;
    v9 = 0;
    v10 = (uint64_t *)(v6 + 64);
    v11 = 1 << *(_BYTE *)(v6 + 32);
    v33 = -1 << v11;
    v34 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v20 >= v14)
          goto LABEL_31;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_31;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_31:
              if ((v36 & 1) == 0)
              {
                result = swift_release();
                v4 = v35;
                goto LABEL_38;
              }
              if (v34 >= 64)
                bzero((void *)(v6 + 64), 8 * v14);
              else
                *v10 = v33;
              v4 = v35;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_40;
                if (v9 >= v14)
                  goto LABEL_31;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v9 = v22;
          }
        }
LABEL_21:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = 8 * v19;
      v24 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v23);
      v25 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v23);
      result = static Hasher._hash(seed:_:)();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v15 + 8 * v28);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v4 = v8;
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  Swift::UInt v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __n128 result;

  v7 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  if (v8 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)(v9);
  }
  Hasher._combine(_:)(*(_BYTE *)(a1 + 32) & 1);
  Hasher._finalize()();
  v10 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
  v11 = a3[6] + 48 * v10;
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 16) = v12;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v11 + 32) = result;
  *(_QWORD *)(a3[7] + 8 * v10) = a2;
  ++a3[2];
  return result;
}

{
  Swift::UInt v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  __n128 result;

  v7 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  if (v8 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)(v9);
  }
  Hasher._combine(_:)(*(_BYTE *)(a1 + 32) & 1);
  Hasher._finalize()();
  v10 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
  v11 = (_OWORD *)(a3[6] + 48 * v10);
  v12 = *(_OWORD *)(a1 + 16);
  *v11 = *(_OWORD *)a1;
  v11[1] = v12;
  v11[2] = *(_OWORD *)(a1 + 32);
  v13 = a3[7] + 40 * v10;
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(a2 + 32);
  result = *(__n128 *)(a2 + 16);
  *(_OWORD *)v13 = *(_OWORD *)a2;
  *(__n128 *)(v13 + 16) = result;
  ++a3[2];
  return result;
}

{
  Swift::UInt v6;
  Swift::UInt v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __n128 result;

  Hasher.init(_seed:)();
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  _ViewList_ID.hash(into:)();
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._finalize()();
  v9 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
  v10 = a3[6] + 48 * v9;
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 16) = v11;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v10 + 32) = result;
  *(_QWORD *)(a3[7] + 8 * v9) = a2;
  ++a3[2];
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  _BYTE v12[48];
  _BYTE v13[48];

  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  outlined init with copy of AccessibilityScrollableContext?(a1 + 40, (uint64_t)v13, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (v13[40] == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v13, (uint64_t)v12);
    Hasher._combine(_:)(1u);
    ToolbarItemPlacement.Role.hash(into:)();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v12);
  }
  Hasher._finalize()();
  v6 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
  v7 = a3[6] + 88 * v6;
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 16) = v8;
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  v11 = *(_OWORD *)(a1 + 64);
  *(_BYTE *)(v7 + 80) = *(_BYTE *)(a1 + 80);
  *(_OWORD *)(v7 + 48) = v10;
  *(_OWORD *)(v7 + 64) = v11;
  *(__n128 *)(v7 + 32) = result;
  *(_QWORD *)(a3[7] + 8 * v6) = a2;
  ++a3[2];
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  Hasher.init(_seed:)();
  v7 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  if ((*(_BYTE *)(a1 + 120) & 1) != 0)
  {
    Hasher._combine(_:)(*(_QWORD *)(a1 + 104));
    Hasher._combine(_:)(v6);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of SceneID(v7, v6, 0);
  }
  Hasher._finalize()();
  v8 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  v9 = a3[6] + (v8 << 7);
  v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v9 + 80) = v10;
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v9 + 105) = *(_OWORD *)(a1 + 105);
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 16) = v11;
  result = *(__n128 *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v9 + 32) = result;
  *(_OWORD *)(v9 + 48) = v13;
  *(_QWORD *)(a3[7] + 8 * v8) = a2;
  ++a3[2];
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, char a2, _QWORD *a3)
{
  Swift::UInt v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __n128 result;

  v7 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  if (v8 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)(v9);
  }
  Hasher._combine(_:)(*(_BYTE *)(a1 + 32) & 1);
  Hasher._finalize()();
  v10 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v10;
  v11 = a3[6] + 48 * v10;
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 16) = v12;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v11 + 32) = result;
  *(_BYTE *)(a3[7] + v10) = a2 & 1;
  ++a3[2];
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, __int16 a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  char v10;
  __n128 result;
  uint64_t v12;

  Hasher.init(_seed:)();
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  outlined release of TableColumnCustomizationID(a1);
  Hasher._finalize()();
  v8 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  v9 = a4[6] + 40 * v8;
  v10 = *(_BYTE *)(a1 + 32);
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a1;
  *(__n128 *)(v9 + 16) = result;
  *(_BYTE *)(v9 + 32) = v10;
  v12 = a4[7] + 16 * v8;
  *(_QWORD *)v12 = a2;
  *(_BYTE *)(v12 + 8) = a3 & 1;
  *(_BYTE *)(v12 + 9) = HIBYTE(a3);
  ++a4[2];
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(Swift::UInt32 *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 result;
  __int128 v24;
  uint64_t v25;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UUID?(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*a1);
  Hasher._combine(_:)(a1[1]);
  v15 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a1 + *(int *)(v15 + 24), (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v14, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v14, v6);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  Hasher._finalize()();
  v16 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v16;
  outlined init with take of TableCellFormula((uint64_t)a1, a3[6] + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v16, type metadata accessor for DisplayList.HostedViewState.Key);
  v17 = a3[7] + 176 * v16;
  v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v17 = *(_OWORD *)a2;
  *(_OWORD *)(v17 + 16) = v18;
  v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v17 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v17 + 80) = v19;
  v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v17 + 48) = v20;
  v21 = *(_OWORD *)(a2 + 160);
  v22 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v17 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v17 + 160) = v21;
  result = *(__n128 *)(a2 + 96);
  v24 = *(_OWORD *)(a2 + 112);
  *(__n128 *)(v17 + 96) = result;
  *(_OWORD *)(v17 + 112) = v24;
  *(_OWORD *)(v17 + 128) = v22;
  ++a3[2];
  return result;
}

uint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t result;

  Hasher.init(_seed:)();
  v7 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  if ((*(_BYTE *)(a1 + 120) & 1) != 0)
  {
    Hasher._combine(_:)(*(_QWORD *)(a1 + 104));
    Hasher._combine(_:)(v6);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of SceneID(v7, v6, 0);
  }
  Hasher._finalize()();
  v8 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  v9 = (_OWORD *)(a3[6] + (v8 << 7));
  v10 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v10;
  v9[6] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)((char *)v9 + 105) = *(_OWORD *)(a1 + 105);
  v11 = *(_OWORD *)(a1 + 16);
  *v9 = *(_OWORD *)a1;
  v9[1] = v11;
  v12 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v12;
  result = outlined init with take of TableCellFormula(a2, a3[7] + 8 * v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<PlatformDocument>);
  ++a3[2];
  return result;
}

{
  Swift::UInt v6;
  unint64_t v7;
  uint64_t result;
  _OWORD v9[2];
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  char v13;

  Hasher.init(_seed:)();
  outlined init with copy of TableRowID(a1, (uint64_t)v11);
  if ((v13 & 1) != 0)
  {
    v9[0] = v11[0];
    v9[1] = v11[1];
    v10 = v12;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v9);
  }
  else
  {
    v6 = *(_QWORD *)&v11[0];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v6);
  }
  Hasher._finalize()();
  v7 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v7;
  result = outlined init with take of TableRowID(a1, a3[6] + 48 * v7);
  *(_QWORD *)(a3[7] + 8 * v7) = a2;
  ++a3[2];
  return result;
}

uint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  char v20;

  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = *((_BYTE *)a2 + 24);
  v9 = a2[4];
  v10 = a2[5];
  v15 = *((_BYTE *)a2 + 48);
  Hasher.init(_seed:)();
  outlined init with copy of TableRowID(a1, (uint64_t)v18);
  if ((v20 & 1) != 0)
  {
    v16[0] = v18[0];
    v16[1] = v18[1];
    v17 = v19;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v16);
  }
  else
  {
    v11 = *(_QWORD *)&v18[0];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v11);
  }
  Hasher._finalize()();
  v12 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v12;
  result = outlined init with take of TableRowID(a1, a3[6] + 48 * v12);
  v14 = a3[7] + 56 * v12;
  *(_QWORD *)v14 = v5;
  *(_QWORD *)(v14 + 8) = v6;
  *(_QWORD *)(v14 + 16) = v7;
  *(_BYTE *)(v14 + 24) = v8;
  *(_QWORD *)(v14 + 32) = v9;
  *(_QWORD *)(v14 + 40) = v10;
  *(_BYTE *)(v14 + 48) = v15;
  ++a3[2];
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  v4 = a4[7] + 72 * result;
  *(_BYTE *)(v4 + 64) = *(_BYTE *)(a3 + 64);
  v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 48) = v5;
  v6 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v6;
  v7 = a4[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a4[2] = v9;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, uint64_t a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = (_OWORD *)(a4[6] + 48 * result);
  v5 = a2[1];
  *v4 = *a2;
  v4[1] = v5;
  v4[2] = a2[2];
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = (_OWORD *)(a4[6] + 48 * result);
  v5 = a2[1];
  *v4 = *a2;
  v4[1] = v5;
  v4[2] = a2[2];
  v6 = a4[7] + 40 * result;
  v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a3 + 32);
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = (_OWORD *)(a4[6] + (result << 7));
  v5 = a2[5];
  v4[4] = a2[4];
  v4[5] = v5;
  v4[6] = a2[6];
  *(_OWORD *)((char *)v4 + 105) = *(_OWORD *)((char *)a2 + 105);
  v6 = a2[1];
  *v4 = *a2;
  v4[1] = v6;
  v7 = a2[3];
  v4[2] = a2[2];
  v4[3] = v7;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  v4 = (_OWORD *)(a4[7] + (result << 6));
  v5 = a3[1];
  *v4 = *a3;
  v4[1] = v5;
  v6 = a3[3];
  v4[2] = a3[2];
  v4[3] = v6;
  v7 = a4[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a4[2] = v9;
  return result;
}

{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  v4 = (_OWORD *)(a4[7] + 240 * result);
  v5 = a3[13];
  v4[12] = a3[12];
  v4[13] = v5;
  v4[14] = a3[14];
  v6 = a3[9];
  v4[8] = a3[8];
  v4[9] = v6;
  v7 = a3[11];
  v4[10] = a3[10];
  v4[11] = v7;
  v8 = a3[5];
  v4[4] = a3[4];
  v4[5] = v8;
  v9 = a3[7];
  v4[6] = a3[6];
  v4[7] = v9;
  v10 = a3[1];
  *v4 = *a3;
  v4[1] = v10;
  v11 = a3[3];
  v4[2] = a3[2];
  v4[3] = v11;
  v12 = a4[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a4[2] = v14;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v10 = *(_QWORD *)(a4 + 24);
  v11 = *(_QWORD *)(a4 + 32);
  v12 = __swift_mutable_project_boxed_opaque_existential_1(a4, v10);
  v13 = MEMORY[0x1E0C80A78](v12, v12);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v15, v13);
  specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, (uint64_t)v15, a5, v10, v11);
  return __swift_destroy_boxed_opaque_existential_1(a4);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for CommandGroupPlacementBox(0);
  result = outlined init with take of TableCellFormula(a2, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, type metadata accessor for CommandGroupPlacementBox);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  result = outlined init with take of HashableWeakBox<UIViewController>(a2, a4[6] + 16 * a1);
  *(_BYTE *)(a4[7] + a1) = a3;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, char a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = (_OWORD *)(a4[6] + 48 * result);
  v5 = a2[1];
  *v4 = *a2;
  v4[1] = v5;
  v4[2] = a2[2];
  *(_BYTE *)(a4[7] + result) = a3;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 32 * result);
  *v7 = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  *(_QWORD *)(a7[7] + 8 * result) = a6;
  v8 = a7[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a7[2] = v10;
  return result;
}

void *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, char a3, uint64_t a4, void *__src, _QWORD *a6)
{
  uint64_t v7;
  void *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  v7 = a6[6] + 24 * a1;
  *(_QWORD *)v7 = a2;
  *(_BYTE *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 16) = a4;
  result = memcpy((void *)(a6[7] + 304 * a1), __src, 0x12BuLL);
  v9 = a6[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a6[2] = v11;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a3[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a3[6] + result) = a2 & 1;
  *(double *)(a3[7] + 8 * result) = a4;
  v4 = a3[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a3[2] = v6;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, __int16 a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  result = outlined init with take of ToolbarPlacement.Role(a2, a4[6] + 40 * a1);
  *(_WORD *)(a4[7] + 2 * a1) = a3;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t result;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  result = outlined init with take of ToolbarPlacement.Role(a2, a4[6] + 40 * a1);
  v8 = (_OWORD *)(a4[7] + 80 * a1);
  *(_OWORD *)((char *)v8 + 57) = *(_OWORD *)((char *)a3 + 57);
  v9 = a3[3];
  v8[2] = a3[2];
  v8[3] = v9;
  v10 = a3[1];
  *v8 = *a3;
  v8[1] = v10;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  result = outlined init with take of TableCellFormula(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for DisplayList.HostedViewState.Key);
  v11 = (_OWORD *)(a4[7] + 176 * a1);
  v12 = a3[1];
  *v11 = *a3;
  v11[1] = v12;
  v13 = a3[5];
  v11[4] = a3[4];
  v11[5] = v13;
  v14 = a3[3];
  v11[2] = a3[2];
  v11[3] = v14;
  v15 = a3[10];
  v16 = a3[8];
  v11[9] = a3[9];
  v11[10] = v15;
  v17 = a3[7];
  v11[6] = a3[6];
  v11[7] = v17;
  v11[8] = v16;
  v18 = a4[2];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    a4[2] = v20;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_DWORD *)(a4[6] + 4 * a1) = a2;
  result = outlined init with take of ConfirmationDialog(a3, a4[7] + 176 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_DWORD *)(a4[6] + 4 * a1) = a2;
  result = outlined init with take of ScrollViewCommitInfo(a3, a4[7] + 80 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = (_QWORD *)(a8[6] + 16 * result);
  *v8 = a2;
  v8[1] = a3;
  v9 = (_QWORD *)(a8[7] + 32 * result);
  *v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = a7;
  v10 = a8[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a8[2] = v12;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = a6[6] + 24 * result;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_BYTE *)(v6 + 16) = a4 & 1;
  *(_QWORD *)(a6[7] + 8 * result) = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, char a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = a6[6] + 24 * result;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_BYTE *)(v6 + 16) = a4 & 1;
  *(_BYTE *)(a6[7] + result) = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, _QWORD *a3, double a4, double a5)
{
  double *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a3[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a3[6] + 8 * result) = a2;
  v5 = (double *)(a3[7] + 16 * result);
  *v5 = a4;
  v5[1] = a5;
  v6 = a3[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a3[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v4 = (_OWORD *)(a4[7] + 48 * result);
  v5 = a3[1];
  *v4 = *a3;
  v4[1] = v5;
  v4[2] = a3[2];
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v4 = (_OWORD *)(a4[7] + 80 * result);
  *(_OWORD *)((char *)v4 + 57) = *(_OWORD *)((char *)a3 + 57);
  v5 = a3[3];
  v4[2] = a3[2];
  v4[3] = v5;
  v6 = a3[1];
  *v4 = *a3;
  v4[1] = v6;
  v7 = a4[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a4[2] = v9;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a6[6] + 8 * result) = a2;
  v6 = a6[7] + 24 * result;
  *(_QWORD *)v6 = a3;
  *(_QWORD *)(v6 + 8) = a4;
  *(_WORD *)(v6 + 20) = WORD2(a5);
  *(_DWORD *)(v6 + 16) = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 12 * result;
  *(_QWORD *)v5 = a2;
  *(_BYTE *)(v5 + 8) = a3 & 1;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a5[6] + 4 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = (_OWORD *)(a5[7] + 112 * result);
  v7 = a4[1];
  *v6 = *a4;
  v6[1] = v7;
  *(_OWORD *)((char *)v6 + 89) = *(_OWORD *)((char *)a4 + 89);
  v8 = a4[5];
  v6[4] = a4[4];
  v6[5] = v8;
  v9 = a4[3];
  v6[2] = a4[2];
  v6[3] = v9;
  v10 = a5[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a5[2] = v12;
  return result;
}

{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = (_OWORD *)(a5[7] + 48 * result);
  v7 = a4[1];
  *v6 = *a4;
  v6[1] = v7;
  *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)a4 + 25);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, char a2, __int128 *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  result = outlined init with take of NavigationSplitViewColumnWidth(a3, a4[7] + 40 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, __int16 a4, _QWORD *a5)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 40 * result;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_BYTE *)(v5 + 32) = *(_BYTE *)(a2 + 32);
  v7 = a5[7] + 16 * result;
  *(_QWORD *)v7 = a3;
  *(_BYTE *)(v7 + 8) = a4 & 1;
  *(_BYTE *)(v7 + 9) = HIBYTE(a4);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_BYTE *)(a4[7] + result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a5[6] + 4 * result) = a2;
  v5 = a5[7] + 16 * result;
  *(_QWORD *)v5 = a3;
  *(_WORD *)(v5 + 8) = a4;
  *(_BYTE *)(v5 + 10) = BYTE2(a4);
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

void *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, const void *a4, _QWORD *a5)
{
  _QWORD *v6;
  void *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of TabEntry(a4, (void *)(a5[7] + 272 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a6[(a1 >> 6) + 8] |= 1 << a1;
  result = outlined init with take of Toolbar.BarLocation(a2, a6[6] + 40 * a1);
  v12 = (_QWORD *)(a6[7] + 24 * a1);
  *v12 = a3;
  v12[1] = a4;
  v12[2] = a5;
  v13 = a6[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a6[2] = v15;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of OptionalBinaryInteger(a3, a4[7] + 40 * a1);
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  v16 = *a3;
  v6 = *((_QWORD *)a3 + 2);
  v7 = *((_BYTE *)a3 + 24);
  v8 = *((_QWORD *)a3 + 4);
  v9 = *((_QWORD *)a3 + 5);
  v10 = *((_BYTE *)a3 + 48);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  result = outlined init with take of TableRowID(a2, a4[6] + 48 * a1);
  v12 = a4[7] + 56 * a1;
  *(_OWORD *)v12 = v16;
  *(_QWORD *)(v12 + 16) = v6;
  *(_BYTE *)(v12 + 24) = v7;
  *(_QWORD *)(v12 + 32) = v8;
  *(_QWORD *)(v12 + 40) = v9;
  *(_BYTE *)(v12 + 48) = v10;
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  v4 = a4[7] + 120 * result;
  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v5;
  v6 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 48) = v6;
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(a3 + 112);
  v7 = *(_OWORD *)(a3 + 96);
  v8 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v4 + 96) = v7;
  *(_OWORD *)(v4 + 64) = v8;
  v9 = a4[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a4[2] = v11;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, _QWORD *a3, double a4, double a5, double a6, double a7)
{
  double *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a3[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a3[6] + result) = a2 & 1;
  v7 = (double *)(a3[7] + 32 * result);
  *v7 = a4;
  v7[1] = a5;
  v7[2] = a6;
  v7[3] = a7;
  v8 = a3[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a3[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a9[(result >> 6) + 8] |= 1 << result;
  v9 = a9[6] + 32 * result;
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = a3;
  *(_QWORD *)(v9 + 16) = a4;
  *(_BYTE *)(v9 + 24) = a5;
  v10 = (_QWORD *)(a9[7] + 24 * result);
  *v10 = a6;
  v10[1] = a7;
  v10[2] = a8;
  v11 = a9[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a9[2] = v13;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, _OWORD *a2, uint64_t a3, _QWORD *a4)
{
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = (_OWORD *)(a4[6] + (a1 << 7));
  v6 = a2[5];
  v5[4] = a2[4];
  v5[5] = v6;
  v5[6] = a2[6];
  *(_OWORD *)((char *)v5 + 105) = *(_OWORD *)((char *)a2 + 105);
  v7 = a2[1];
  *v5 = *a2;
  v5[1] = v7;
  v8 = a2[3];
  v5[2] = a2[2];
  v5[3] = v8;
  result = outlined init with take of TableCellFormula(a3, a4[7] + 8 * a1, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<PlatformDocument>);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 16 * result;
  *(_BYTE *)v5 = a2;
  *(_QWORD *)(v5 + 8) = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a7[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a7[6] + 8 * result) = a2;
  v7 = a7[7] + 32 * result;
  *(_QWORD *)v7 = a3;
  *(_QWORD *)(v7 + 8) = a4;
  *(_QWORD *)(v7 + 16) = a5;
  *(_BYTE *)(v7 + 24) = a6 & 1;
  v8 = a7[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a7[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = (_OWORD *)(a4[6] + 48 * result);
  v5 = a2[1];
  *v4 = *a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)((char *)a2 + 25);
  v6 = (_OWORD *)(a4[7] + 144 * result);
  v7 = a3[3];
  v6[2] = a3[2];
  v6[3] = v7;
  v8 = a3[1];
  *v6 = *a3;
  v6[1] = v8;
  *(_OWORD *)((char *)v6 + 124) = *(_OWORD *)((char *)a3 + 124);
  v9 = a3[7];
  v6[6] = a3[6];
  v6[7] = v9;
  v10 = a3[5];
  v6[4] = a3[4];
  v6[5] = v10;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, int a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = (_OWORD *)(a4[6] + 48 * result);
  v5 = a2[1];
  *v4 = *a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)((char *)a2 + 25);
  *(_DWORD *)(a4[7] + 4 * result) = a3;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t partial apply for implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(a1, v2[4], v2[2], v2[3], a2, MEMORY[0x1E0DED5B8], MEMORY[0x1E0DE9C68], MEMORY[0x1E0DED5B0]);
}

uint64_t partial apply for implicit closure #1 in __designTimeFloat<A>(_:fallback:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(a1, v2[4], v2[2], v2[3], a2, MEMORY[0x1E0DED4D0], MEMORY[0x1E0DE9C50], MEMORY[0x1E0DED4C0]);
}

uint64_t partial apply for implicit closure #1 in __designTimeInteger<A>(_:fallback:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(a1, v2[4], v2[2], v2[3], a2, MEMORY[0x1E0DED5D0], MEMORY[0x1E0DE9C70], (uint64_t (*)(char *, uint64_t, uint64_t))MEMORY[0x1E0DED5C0]);
}

uint64_t outlined retain of OSLogMessage(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for implicit closure #1 in __designTimeString<A>(_:fallback:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(a1, v2[4], v2[2], v2[3], a2, MEMORY[0x1E0DED598], MEMORY[0x1E0DE9C58], MEMORY[0x1E0DED590]);
}

{
  uint64_t *v2;

  return implicit closure #1 in __designTimeBoolean<A>(_:fallback:)(a1, v2[4], v2[2], v2[3], a2, MEMORY[0x1E0DEDA40], MEMORY[0x1E0DE9C88], MEMORY[0x1E0DEDA38]);
}

void type metadata accessor for (key: String, value: Any)?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for (key: String, value: Any)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: String, value: Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for (key: String, value: Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: String, value: Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: Any));
  }
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a6;
  v21 = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a4, a6);
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v14 = (_QWORD *)(a5[6] + 16 * a1);
  *v14 = a2;
  v14[1] = a3;
  result = outlined init with take of OptionalBinaryInteger(&v19, a5[7] + 40 * a1);
  v16 = a5[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    a5[2] = v18;
  return result;
}

void type metadata accessor for UUID?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for UUID?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for [WeakBox<DocumentViewController>](uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for [WeakBox<DocumentViewController>], (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<DocumentViewController>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

uint64_t outlined init with take of ScrollViewCommitInfo(uint64_t a1, uint64_t a2)
{
  __swift_memcpy80_8(a2, a1);
  return a2;
}

void View.resetFormEnvironment()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t View.formStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FormStyleWritingModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for FormStyleWritingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormStyleWritingModifier);
}

unint64_t instantiation function for generic protocol witness table for FormStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in FormStyleConfiguration.Content()
{
  return &protocol witness table for FormStyleConfiguration.Content;
}

unint64_t instantiation function for generic protocol witness table for FormStyleConfiguration.Footer(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in FormStyleConfiguration.Footer()
{
  return &protocol witness table for FormStyleConfiguration.Footer;
}

uint64_t dispatch thunk of FormStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for FormStyleConfiguration()
{
  return &type metadata for FormStyleConfiguration;
}

ValueMetadata *type metadata accessor for FormStyleConfiguration.Content()
{
  return &type metadata for FormStyleConfiguration.Content;
}

ValueMetadata *type metadata accessor for FormStyleConfiguration.Footer()
{
  return &type metadata for FormStyleConfiguration.Footer;
}

uint64_t sub_1877D5068(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for FormStyleWritingModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormStyleWritingModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

ValueMetadata *type metadata accessor for ResolvedFormStyle()
{
  return &type metadata for ResolvedFormStyle;
}

unint64_t lazy protocol witness table accessor for type FormStyleModifier<AutomaticFormStyle> and conformance FormStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type FormStyleModifier<AutomaticFormStyle> and conformance FormStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type FormStyleModifier<AutomaticFormStyle> and conformance FormStyleModifier<A>)
  {
    type metadata accessor for FormStyleModifier<AutomaticFormStyle>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormStyleModifier<AutomaticFormStyle> and conformance FormStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for FormStyleModifier<AutomaticFormStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for FormStyleModifier<AutomaticFormStyle>)
  {
    v2 = lazy protocol witness table accessor for type AutomaticFormStyle and conformance AutomaticFormStyle();
    v4 = type metadata accessor for FormStyleModifier(a1, (uint64_t)&type metadata for AutomaticFormStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for FormStyleModifier<AutomaticFormStyle>);
  }
}

uint64_t type metadata accessor for FormStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FormStyleModifier);
}

unint64_t instantiation function for generic protocol witness table for ResolvedFormStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in FormStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t FormStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedConformanceWitness;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v17 - v12;
  (*(void (**)(double))(v3 + 24))(v11);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v13, AssociatedTypeWitness, a2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for FormStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in FormStyleModifier<A>()
{
  return &protocol witness table for FormStyleModifier<A>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in FormStyleWritingModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance AnyFormStyleContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static AnyFormStyleContext.accepts<A>(_:at:)(a3);
}

uint64_t FormStyleWritingModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v32 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FormStyleModifier(0, v4, *(_QWORD *)(v8 + 24), v9);
  v31 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)v30 - v13;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormStyleWritingModifier<A>, a2, v12);
  v15 = type metadata accessor for _ViewModifier_Content();
  v16 = type metadata accessor for ModifiedContent();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)v30 - v24;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v5 + 16))(v7, v30[1], v4, v23);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v14, v7, v4);
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v15);
  MEMORY[0x18D75B4AC](v14, v15, v10, v26);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v10);
  v33[0] = v26;
  v33[1] = &protocol witness table for FormStyleModifier<A>;
  v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v33);
  static ViewBuilder.buildExpression<A>(_:)(v20, v16, v27);
  v28 = *(void (**)(char *, uint64_t))(v17 + 8);
  v28(v20, v16);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v25, v16, v32);
  return ((uint64_t (*)(char *, uint64_t))v28)(v25, v16);
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedFormStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResetFormEnvironmentModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetFormEnvironmentModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ResetFormEnvironmentModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance ResetFormEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  return specialized static ResetFormEnvironmentModifier.makeEnvironment(modifier:environment:)(a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ResetFormEnvironmentModifier()
{
  lazy protocol witness table accessor for type ResetFormEnvironmentModifier and conformance ResetFormEnvironmentModifier();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

BOOL specialized static FormStyleContext.accepts<A>(_:at:)(ValueMetadata *a1, ValueMetadata *a2)
{
  return a2 == &type metadata for AnyFormStyleContext || a2 == a1;
}

ValueMetadata *type metadata accessor for AnyFormStyleContext()
{
  return &type metadata for AnyFormStyleContext;
}

uint64_t getEnumTagSinglePayload for FormStyleWritingModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1877D57FC + 4 * byte_187C5D930[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for FormStyleWritingModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1877D5A00(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for FormStyleWritingModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormStyleWritingModifier<A>, v6);
  v7 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for FormStyleModifier(255, v4, v5, v8);
  v9 = type metadata accessor for ModifiedContent();
  v11[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v7);
  v11[1] = &protocol witness table for FormStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v11);
}

uint64_t sub_1877D5AB8()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

unint64_t instantiation function for generic protocol witness table for AnyFormStyleContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AnyFormStyleContext and conformance AnyFormStyleContext();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyFormStyleContext and conformance AnyFormStyleContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyFormStyleContext and conformance AnyFormStyleContext;
  if (!lazy protocol witness table cache variable for type AnyFormStyleContext and conformance AnyFormStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyFormStyleContext, &type metadata for AnyFormStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyFormStyleContext and conformance AnyFormStyleContext);
  }
  return result;
}

BOOL specialized static AnyFormStyleContext.accepts<A>(_:at:)(uint64_t a1)
{
  uint64_t v2;

  if (swift_conformsToProtocol2())
    v2 = a1;
  else
    v2 = 0;
  return v2 != 0;
}

ValueMetadata *type metadata accessor for ResetFormEnvironmentModifier()
{
  return &type metadata for ResetFormEnvironmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ResetFormEnvironmentModifier()
{
  return &protocol witness table for ResetFormEnvironmentModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ResetFormEnvironmentModifier()
{
  return &protocol witness table for ResetFormEnvironmentModifier;
}

uint64_t specialized static ResetFormEnvironmentModifier.makeEnvironment(modifier:environment:)(uint64_t a1)
{
  uint64_t v2;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FormInsetsKey>, (uint64_t)&type metadata for FormInsetsKey, (uint64_t)&protocol witness table for FormInsetsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FormInsetsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FormInsetsKey>, (uint64_t)&type metadata for FormInsetsKey, (uint64_t)&protocol witness table for FormInsetsKey);
  swift_retain();
  PropertyList.subscript.setter();
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FormRowInfoVisibilityKey>, (uint64_t)&type metadata for FormRowInfoVisibilityKey, (uint64_t)&protocol witness table for FormRowInfoVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FormRowInfoVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FormRowInfoVisibilityKey>, (uint64_t)&type metadata for FormRowInfoVisibilityKey, (uint64_t)&protocol witness table for FormRowInfoVisibilityKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FormRowAccessoryVisibilityKey>, (uint64_t)&type metadata for FormRowAccessoryVisibilityKey, (uint64_t)&protocol witness table for FormRowAccessoryVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FormRowAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FormRowAccessoryVisibilityKey>, (uint64_t)&type metadata for FormRowAccessoryVisibilityKey, (uint64_t)&protocol witness table for FormRowAccessoryVisibilityKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveFormStyleKey>, (uint64_t)&type metadata for EffectiveFormStyleKey, (uint64_t)&protocol witness table for EffectiveFormStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EffectiveFormStyleKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveFormStyleKey>, (uint64_t)&type metadata for EffectiveFormStyleKey, (uint64_t)&protocol witness table for EffectiveFormStyleKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type ResetFormEnvironmentModifier and conformance ResetFormEnvironmentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResetFormEnvironmentModifier and conformance ResetFormEnvironmentModifier;
  if (!lazy protocol witness table cache variable for type ResetFormEnvironmentModifier and conformance ResetFormEnvironmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResetFormEnvironmentModifier, &type metadata for ResetFormEnvironmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetFormEnvironmentModifier and conformance ResetFormEnvironmentModifier);
  }
  return result;
}

uint64_t TabContent.swipeActions<A>(edge:allowsFullSwipe:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, _BYTE *a5@<X8>)
{
  char v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void (*v20)(double);
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v7 = a2;
  v9 = a1 & 1;
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 16))(v12, v24[1], a3);
  *a5 = v9;
  a5[1] = v7;
  v22 = type metadata accessor for SwipeActionTabs(0, a3, a4, v21);
  (*(void (**)(_BYTE *, char *, uint64_t))(v14 + 32))(&a5[*(int *)(v22 + 40)], v19, a4);
  return (*(uint64_t (**)(_BYTE *, char *, uint64_t))(v10 + 32))(&a5[*(int *)(v22 + 44)], v12, a3);
}

uint64_t SwipeActionTabs<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t AssociatedConformanceWitness;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t IsSharingPicker;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[16];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[3];

  v5 = v4;
  v8 = a1;
  v44 = a4;
  v9 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v13 = (char *)&v39 - v12;
  v42 = *(_QWORD *)(v8 + 24);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E0CE2A78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v14 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E0CE5CE0], MEMORY[0x1E0CE5CD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v15 = type metadata accessor for ModifiedContent();
  v16 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>();
  v55[0] = a3;
  v55[1] = v16;
  v17 = MEMORY[0x1E0CE2E70];
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v55);
  v19 = lazy protocol witness table accessor for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>();
  v54[0] = v18;
  v54[1] = v19;
  v20 = MEMORY[0x18D75FFDC](v17, v15, v54);
  type metadata accessor for SwipeActionsModifier(255, v15, v20, v21);
  v39 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SwipeActionsArePresent>, (uint64_t)&type metadata for SwipeActionsArePresent, (uint64_t)&protocol witness table for SwipeActionsArePresent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v40 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  v22 = type metadata accessor for ModifiedContent();
  v41 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v39 - v25;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 56))(v9, a2, v24);
  LOBYTE(v8) = *v5;
  v27 = v5[1];
  v28 = v5;
  v29 = v42;
  v46 = v9;
  v47 = v42;
  v48 = a2;
  v49 = a3;
  v50 = v28;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  View.swipeActions<A>(edge:allowsFullSwipe:content:)(v8, v27, (void (*)(double))partial apply for closure #1 in SwipeActionTabs<>._identifiedView.getter, (uint64_t)v45, AssociatedTypeWitness, v29, AssociatedConformanceWitness, a3, (uint64_t)v26);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v13, AssociatedTypeWitness);
  v53[0] = AssociatedConformanceWitness;
  v53[1] = &protocol witness table for SwipeActionsModifier<A>;
  v31 = MEMORY[0x1E0CE2E70];
  v32 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v39, v53);
  v33 = lazy protocol witness table accessor for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>();
  v52[0] = v32;
  v52[1] = v33;
  v34 = MEMORY[0x18D75FFDC](v31, v40, v52);
  IsSharingPicker = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v51[0] = v34;
  v51[1] = IsSharingPicker;
  v36 = MEMORY[0x18D75FFDC](v31, v22, v51);
  v37 = lazy protocol witness table accessor for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput();
  View.input<A>(_:)((uint64_t)&type metadata for SwipeActionsUseTraitKeyInput, v22, (uint64_t)&type metadata for SwipeActionsUseTraitKeyInput, v36, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v26, v22);
}

uint64_t closure #1 in SwipeActionTabs<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SwipeActionTabs(0, v12, v13, v14);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v15 + 40), a3, a4);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v11, a3, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> SwipeActionTabs<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SwipeActionTabs<>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), a3);
}

uint64_t TabContent.contextMenu<A>(menuItems:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  void (*v19)(double);
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19(v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v5, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a5, v18, a4);
  v21 = type metadata accessor for ContextMenuTabs(0, a4, a3, v20);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a5 + *(int *)(v21 + 36), v11, a3);
}

uint64_t sub_1877D6618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v7;

  v5 = type metadata accessor for SwipeActionTabs(255, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), a4);
  v7 = *(_OWORD *)(a1 + 16);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> SwipeActionTabs<A, B>, v5, &v7);
}

uint64_t type metadata accessor for SwipeActionTabs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SwipeActionTabs);
}

uint64_t sub_1877D6670(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int8x16_t v7;

  v5 = type metadata accessor for ContextMenuTabs(255, a1->i64[1], a1->i64[0], a4);
  v7 = vextq_s8(a1[1], a1[1], 8uLL);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ContextMenuTabs<A, B>, v5, &v7);
}

uint64_t type metadata accessor for ContextMenuTabs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContextMenuTabs);
}

uint64_t getEnumTagSinglePayload for ContextMenuTabs(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1877D67A8 + 4 * byte_187C5DCC0[v17 - 1]))();
}

void storeEnumTagSinglePayload for ContextMenuTabs(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata completion function for SwipeActionTabs()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SwipeActionTabs(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v4 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v5 + 64) + v8;
  if ((v8 | v6) > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((v9 + ((v6 + 2) & ~v6)) & ~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + (((v8 | v6) + 16) & ~(v8 | v6)));
    swift_retain();
  }
  else
  {
    v13 = ~v8;
    *a1 = *(_BYTE *)a2;
    a1[1] = *((_BYTE *)a2 + 1);
    v14 = (unint64_t)&a1[v6 + 2] & ~v6;
    v15 = ((unint64_t)a2 + v6 + 2) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v14, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v14 + v9) & v13, (v15 + v9) & v13, v4);
  }
  return v3;
}

uint64_t destroy for SwipeActionTabs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v4);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *initializeWithCopy for SwipeActionTabs(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 2] & ~v6;
  v8 = (unint64_t)&a2[v6 + 2] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v7, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 16))((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *assignWithCopy for SwipeActionTabs(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 2] & ~v6;
  v8 = (unint64_t)&a2[v6 + 2] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v7, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *initializeWithTake for SwipeActionTabs(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 2] & ~v6;
  v8 = (unint64_t)&a2[v6 + 2] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 32))((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *assignWithTake for SwipeActionTabs(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)&a1[v6 + 2] & ~v6;
  v8 = (unint64_t)&a2[v6 + 2] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v7, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SwipeActionTabs(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v7)
    goto LABEL_27;
  v11 = ((v9 + v10 + ((v8 + 2) & ~v8)) & ~v10) + *(_QWORD *)(v5 + 64);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((a2 - v7 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)&a1[v11];
      if (!v13)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)&a1[v11];
      if (!*(_WORD *)&a1[v11])
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_27:
      if (v6 > 0xFE)
      {
        v19 = (unint64_t)&a1[v8 + 2] & ~v8;
        if (v4 == v7)
          return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 48))(v19, *(unsigned int *)(v3 + 84));
        else
          return (*(uint64_t (**)(uint64_t))(v5 + 48))((v19 + v9 + v10) & ~v10);
      }
      else
      {
        v18 = *a1;
        if (v18 >= 2)
          return v18 - 1;
        else
          return 0;
      }
    }
  }
  v13 = a1[v11];
  if (!a1[v11])
    goto LABEL_27;
LABEL_18:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v7 + v16 + 1;
  if (v11 <= 3)
    v17 = ((v9 + v10 + ((v8 + 2) & ~(_DWORD)v8)) & ~(_DWORD)v10) + *(_DWORD *)(v5 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1877D6FB4 + 4 * byte_187C5DCCE[v17 - 1]))();
}

void storeEnumTagSinglePayload for SwipeActionTabs(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = v7;
  v9 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

uint64_t instantiation function for generic protocol witness table for <> ContextMenuTabs<A, B>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ContextMenuTabs<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> ContextMenuTabs<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v4;

  v4 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ContextMenuTabs<A, B>, a1, &v4);
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> ContextMenuTabs<A, B>()
{
  return associated type witness table accessor for TabContent._IdentifiedView : View in <> ContextMenuTabs<A, B>();
}

{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ContextMenuTabs<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t AssociatedConformanceWitness;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD v50[3];

  v36 = a2;
  v44 = a4;
  v39 = *(_QWORD *)(a1 + 16);
  v33 = a1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE3238], MEMORY[0x1E0CE3228], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v7 = type metadata accessor for ModifiedContent();
  v50[0] = a2;
  v50[1] = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v43 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v50);
  v34 = v7;
  v8 = type metadata accessor for ZStack();
  v41 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v38 = (char *)&v33 - v11;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v8, v10);
  v40 = type metadata accessor for PlatformItemContextMenuModifier(0, v8, v12, v13);
  v42 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v14);
  v16 = (char *)&v33 - v15;
  v17 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v19);
  v21 = (char *)&v33 - v20;
  v35 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v33 - v24;
  v26 = v39;
  v27 = v36;
  View.styleContext<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(a3 + 56))(v17, a3);
  v45 = v26;
  v46 = v17;
  v47 = v27;
  v48 = a3;
  v49 = v25;
  static Alignment.center.getter();
  v28 = v38;
  v29 = v34;
  ZStack.init(alignment:content:)();
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v16, v28, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v31 = v40;
  MEMORY[0x18D75B4AC](v16, AssociatedTypeWitness, v40, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v31);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v21, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v25, v29);
}

uint64_t closure #1 in ContextMenuTabs<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE3238], MEMORY[0x1E0CE3228], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v6 = type metadata accessor for ModifiedContent();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v14 - v9;
  v11 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v14[0] = a2;
  v14[1] = v11;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v14);
  static ViewBuilder.buildExpression<A>(_:)(a1, v6, v12);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, v6, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> ContextMenuTabs<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContextMenuTabs<>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), a3);
}

uint64_t instantiation function for generic protocol witness table for <> SwipeActionTabs<A, B>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> SwipeActionTabs<A, B>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> SwipeActionTabs<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v4;

  v4 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> SwipeActionTabs<A, B>, a1, &v4);
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> SwipeActionTabs<A, B>()
{
  return associated type witness table accessor for TabContent._IdentifiedView : View in <> ContextMenuTabs<A, B>();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E0CE2A78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E0CE5CE0], MEMORY[0x1E0CE5CD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in SwipeActionTabs<>._identifiedView.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in SwipeActionTabs<>._identifiedView.getter);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SwipeActionsArePresent>, (uint64_t)&type metadata for SwipeActionsArePresent, (uint64_t)&protocol witness table for SwipeActionsArePresent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput;
  if (!lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeActionsUseTraitKeyInput, &type metadata for SwipeActionsUseTraitKeyInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput;
  if (!lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeActionsUseTraitKeyInput, &type metadata for SwipeActionsUseTraitKeyInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput;
  if (!lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeActionsUseTraitKeyInput, &type metadata for SwipeActionsUseTraitKeyInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput;
  if (!lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeActionsUseTraitKeyInput, &type metadata for SwipeActionsUseTraitKeyInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput;
  if (!lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeActionsUseTraitKeyInput, &type metadata for SwipeActionsUseTraitKeyInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput);
  }
  return result;
}

uint64_t type metadata accessor for PlatformItemContextMenuModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformItemContextMenuModifier);
}

uint64_t partial apply for closure #1 in ContextMenuTabs<>._identifiedView.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in ContextMenuTabs<>._identifiedView.getter);
}

uint64_t getEnumTagSinglePayload for PlatformItemContextMenuModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1877D7A08 + 4 * byte_187C5DCDC[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PlatformItemContextMenuModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1877D7C08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];

  v1 = *(_QWORD *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E0CE2A78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E0CE5CE0], MEMORY[0x1E0CE5CD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v3 = type metadata accessor for ModifiedContent();
  v17[0] = v1;
  v17[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>();
  v4 = MEMORY[0x1E0CE2E70];
  v16[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v17);
  v16[1] = lazy protocol witness table accessor for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>();
  v5 = MEMORY[0x18D75FFDC](v4, v3, v16);
  type metadata accessor for SwipeActionsModifier(255, v3, v5, v6);
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SwipeActionsArePresent>, (uint64_t)&type metadata for SwipeActionsArePresent, (uint64_t)&protocol witness table for SwipeActionsArePresent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<SwipeActionsUseTraitKeyInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput, (uint64_t)&type metadata for SwipeActionsUseTraitKeyInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v10 = type metadata accessor for ModifiedContent();
  v15[0] = swift_getAssociatedConformanceWitness();
  v15[1] = &protocol witness table for SwipeActionsModifier<A>;
  v14[0] = MEMORY[0x18D75FFDC](v4, v7, v15);
  v14[1] = lazy protocol witness table accessor for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>();
  v13[0] = MEMORY[0x18D75FFDC](v4, v8, v14);
  v13[1] = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v12[0] = MEMORY[0x18D75FFDC](v4, v9, v13);
  v12[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](v4, v10, v12);
}

uint64_t sub_1877D7E68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v1 = *(_QWORD *)(a1 + 16);
  swift_getAssociatedTypeWitness();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE3238], MEMORY[0x1E0CE3228], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v2 = type metadata accessor for ModifiedContent();
  v10[0] = v1;
  v10[1] = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v3 = MEMORY[0x1E0CE2E70];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v10);
  v4 = type metadata accessor for ZStack();
  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v4);
  type metadata accessor for PlatformItemContextMenuModifier(255, v4, v5, v6);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = swift_getAssociatedConformanceWitness();
  v9[1] = &protocol witness table for PlatformItemContextMenuModifier<A>;
  return MEMORY[0x18D75FFDC](v3, v7, v9);
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance TabContextMenuKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for TabContextMenuKey.Storage?, (void (*)(uint64_t))type metadata accessor for TabContextMenuKey.Storage);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static TabContextMenuKey.defaultValue);
  return outlined init with copy of TabContextMenuKey.Storage?(v3, a1);
}

void static PlatformItemContextMenuModifier._makeViewList(modifier:inputs:body:)(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v9;
  ValueMetadata *v10;
  int v11;
  _UNKNOWN **v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int OffsetAttribute2;
  id v20;
  uint64_t v21;
  _QWORD v22[10];
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  ValueMetadata *v31;
  int v32;
  _UNKNOWN **v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  char v40;
  int v41;
  ValueMetadata *v42;
  uint64_t v43;
  _UNKNOWN **v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  ValueMetadata *v50;
  int v51;
  _UNKNOWN **v52;
  int v53;
  int v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  char v61;
  int v62;
  uint64_t v63;

  v22[7] = a4;
  v22[8] = a3;
  v22[6] = a7;
  v63 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = *(ValueMetadata **)a2;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_UNKNOWN ***)(a2 + 16);
  v28 = *(_DWORD *)(a2 + 24);
  v29 = v11;
  v13 = *(_DWORD *)(a2 + 32);
  v30 = *(_DWORD *)(a2 + 28);
  v27 = *(_DWORD *)(a2 + 36);
  v15 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v24 = *(_QWORD *)(a2 + 56);
  v25 = v14;
  v23 = *(_DWORD *)(a2 + 64);
  v22[9] = *(_QWORD *)(a2 + 72);
  v16 = *(unsigned __int8 *)(a2 + 80);
  LODWORD(v50) = v9;
  type metadata accessor for PlatformItemContextMenuModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v18 = *(_QWORD *)(*(_QWORD *)(a5 - 8) + 64);
  v26 = v16;
  if (v18)
    closure #1 in static PlatformItemContextMenuModifier._makeViewList(modifier:inputs:body:)(1, a5, a6, v17);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v50 = v10;
  v51 = v29;
  v52 = v12;
  v53 = v28;
  v54 = v30;
  v55 = __PAIR64__(v27, v13);
  *(_QWORD *)&v56 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewInputs.init(withoutGeometry:)();
  v42 = v31;
  LODWORD(v43) = v32;
  v44 = v33;
  v45 = v34;
  v46 = v35;
  v47 = v36;
  v48 = v37;
  v49 = DWORD2(v37);
  v20 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v42, 1, (uint64_t)&v50);
  v22[2] = v22;
  v35 = v56;
  v36 = v57;
  v31 = v50;
  v32 = v51;
  v33 = v52;
  LODWORD(v34) = v53;
  *((_QWORD *)&v34 + 1) = v55;
  v37 = v58;
  v38 = v59;
  v39 = v60;
  v40 = v61;
  v41 = v62;
  MEMORY[0x1E0C80A78](v20, v21);
  v42 = &type metadata for AllPlatformItemListFlags;
  v43 = a5;
  v22[4] = a5;
  v44 = &protocol witness table for AllPlatformItemListFlags;
  *(_QWORD *)&v45 = a6;
  v22[5] = a6;
  type metadata accessor for PlatformItemListGenerator();
}

uint64_t sub_1877D82D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _BYTE v42[96];

  *(_QWORD *)(v4 - 16) = a1;
  *(_QWORD *)(v4 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListGenerator<A, B>, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 136, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1, v2, a1, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  *(_QWORD *)(v1 + 24) = 0;
  v12 = *(void **)(v1 + 136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  *(_DWORD *)(v1 + 16) = *(_DWORD *)(v1 + 248);
  *(_QWORD *)(v8 - 208) = v6;
  *(_DWORD *)(v8 - 200) = *(_DWORD *)(v1 + 120);
  *(_QWORD *)(v8 - 192) = v7;
  v13 = *(_DWORD *)(v1 + 124);
  *(_DWORD *)(v8 - 184) = *(_DWORD *)(v1 + 116);
  *(_DWORD *)(v8 - 180) = v13;
  v14 = *(_DWORD *)(v1 + 112);
  *(_DWORD *)(v8 - 176) = v5;
  *(_DWORD *)(v8 - 172) = v14;
  v15 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v8 - 168) = v3;
  *(_QWORD *)(v8 - 160) = v15;
  *(_QWORD *)(v8 - 152) = *(_QWORD *)(v1 + 88);
  *(_DWORD *)(v8 - 144) = *(_DWORD *)(v1 + 84);
  v16 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v8 - 136) = v16;
  v17 = *(_DWORD *)(v1 + 108);
  *(_BYTE *)(v8 - 128) = v17;
  v18 = v5;
  if (v16)
  {
    *(_QWORD *)(v1 + 136) = v16;
    *(_BYTE *)(v1 + 144) = v17 & 1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((uint64_t *)(v1 + 248), (uint64_t)&type metadata for TabContextMenuKey);
    v19 = *(_BYTE *)(v1 + 144);
    *(_QWORD *)(v8 - 136) = *(_QWORD *)(v1 + 136);
    *(_BYTE *)(v8 - 128) = v19;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(v1 + 136) = v6;
  v21 = *(_DWORD *)(v1 + 116);
  v20 = *(_DWORD *)(v1 + 120);
  *(_DWORD *)(v1 + 144) = v20;
  *(_QWORD *)(v1 + 152) = v7;
  v22 = *(_DWORD *)(v1 + 124);
  *(_DWORD *)(v1 + 160) = v21;
  *(_DWORD *)(v1 + 164) = v22;
  v23 = *(_DWORD *)(v1 + 112);
  *(_DWORD *)(v1 + 168) = v18;
  *(_DWORD *)(v1 + 172) = v23;
  *(_QWORD *)(v1 + 176) = v3;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  *(_DWORD *)(v1 + 12) = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)(v1 + 136) = v6;
  *(_DWORD *)(v1 + 144) = v20;
  *(_QWORD *)(v1 + 152) = v7;
  v24 = *(_DWORD *)(v1 + 124);
  *(_DWORD *)(v1 + 160) = v21;
  *(_DWORD *)(v1 + 164) = v24;
  *(_DWORD *)(v1 + 168) = v18;
  *(_DWORD *)(v1 + 172) = v23;
  v25 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 176) = v3;
  *(_QWORD *)(v1 + 184) = v25;
  *(_QWORD *)(v1 + 192) = *(_QWORD *)(v1 + 88);
  *(_DWORD *)(v1 + 200) = *(_DWORD *)(v1 + 84);
  *(_QWORD *)(v1 + 208) = *(_QWORD *)(v1 + 72);
  *(_BYTE *)(v1 + 216) = *(_DWORD *)(v1 + 108);
  v26 = _ViewListInputs.traits.getter();
  v28 = *MEMORY[0x1E0CFED28];
  if ((v26 & 0x100000000) == 0)
    v28 = v26;
  v29 = *(_DWORD *)(v1 + 12);
  *(_DWORD *)(v1 + 136) = *(_DWORD *)(v1 + 16);
  *(_DWORD *)(v1 + 140) = v29;
  *(_DWORD *)(v1 + 144) = v28;
  MEMORY[0x1E0C80A78](v26, v27);
  v31 = type metadata accessor for PlatformItemContextMenuModifier.WriteTrait(0, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), v30);
  *(_QWORD *)&v42[-16] = v31;
  *(_QWORD *)&v42[-8] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemContextMenuModifier<A>.WriteTrait, v31);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, MEMORY[0x1E0CE4B38], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 136, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_21, (uint64_t)&v42[-32], v31, MEMORY[0x1E0DEDCE8], v32, MEMORY[0x1E0DEDD18], v33);
  *(_BYTE *)(v1 + 136) = 0;
  _ViewListInputs.traits.setter();
  v34 = *(_DWORD *)(v8 - 200);
  v35 = *(_QWORD *)(v8 - 192);
  v36 = *(_QWORD *)(v8 - 168);
  v37 = *(_DWORD *)(v8 - 144);
  v38 = *(_QWORD *)(v8 - 136);
  v39 = *(_BYTE *)(v8 - 128);
  *(_QWORD *)(v1 + 136) = *(_QWORD *)(v8 - 208);
  *(_DWORD *)(v1 + 144) = v34;
  *(_QWORD *)(v1 + 152) = v35;
  *(_OWORD *)(v1 + 160) = *(_OWORD *)(v1 + 360);
  *(_QWORD *)(v1 + 176) = v36;
  *(_OWORD *)(v1 + 184) = *(_OWORD *)(v8 - 160);
  *(_DWORD *)(v1 + 200) = v37;
  *(_QWORD *)(v1 + 208) = v38;
  *(_BYTE *)(v1 + 216) = v39;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v40 = swift_bridgeObjectRetain();
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(v40, v1 + 136);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t closure #1 in static PlatformItemContextMenuModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for PlatformItemContextMenuModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t PlatformItemContextMenuModifier.WriteTrait.value.getter@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  __int128 v20[4];
  char v21;
  _QWORD v22[23];
  _BYTE v23[192];

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for TabContextMenuKey.Storage?, (void (*)(uint64_t))type metadata accessor for TabContextMenuKey.Storage);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v17 - v6;
  v8 = type metadata accessor for PlatformItemList.Item();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)AGGraphGetValue();
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v23);
  outlined init with take of Image.Resolved?((uint64_t)v23, (uint64_t)v22);
  v20[0] = xmmword_187BF9840;
  memset(&v20[1], 0, 48);
  v21 = 0;
  v18 = 0uLL;
  v19 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v22, v20, &v18, 0, 0, (uint64_t)v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 77) = v13;
  v12[632] = 0;
  outlined consume of PlatformItemList.Item.SystemItem?(*((void **)v12 + 37), *((_QWORD *)v12 + 38), *((_QWORD *)v12 + 39), *((_QWORD *)v12 + 40), *((_QWORD *)v12 + 41), *((_QWORD *)v12 + 42), *((_QWORD *)v12 + 43), *((_QWORD *)v12 + 44), *((_QWORD *)v12 + 45), *((_QWORD *)v12 + 46), *((_QWORD *)v12 + 47), *((_QWORD *)v12 + 48), *((_QWORD *)v12 + 49));
  *(_OWORD *)(v12 + 296) = 0u;
  *(_OWORD *)(v12 + 312) = 0u;
  *((_QWORD *)v12 + 41) = 0x3FFFFFFFCLL;
  *((_OWORD *)v12 + 21) = 0u;
  *((_OWORD *)v12 + 22) = 0u;
  *((_OWORD *)v12 + 23) = 0u;
  *((_OWORD *)v12 + 24) = 0u;
  v12[*(int *)(v8 + 128)] = *(_BYTE *)AGGraphGetValue();
  if (*MEMORY[0x1E0CFED28] == a1 || (AGGraphGetValue(), (v14 = swift_bridgeObjectRetain()) == 0))
    ViewTraitCollection.init()();
  else
    v22[0] = v14;
  outlined init with copy of PlatformItemList.Item((uint64_t)v12, (uint64_t)v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  swift_storeEnumTagMultiPayload();
  v15 = type metadata accessor for TabContextMenuKey.Storage(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 0, 1, v15);
  ViewTraitCollection.subscript.setter();
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  *a2 = v22[0];
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemContextMenuModifier<A>.WriteTrait@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return PlatformItemContextMenuModifier.WriteTrait.value.getter(*(_DWORD *)(v1 + 8), a1);
}

void protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PlatformItemContextMenuModifier<A>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  static PlatformItemContextMenuModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformItemContextMenuModifier<A>()
{
  return &protocol witness table for PlatformItemContextMenuModifier<A>;
}

uint64_t type metadata accessor for PlatformItemContextMenuModifier.WriteTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformItemContextMenuModifier.WriteTrait);
}

ValueMetadata *type metadata accessor for TabContextMenuKey()
{
  return &type metadata for TabContextMenuKey;
}

void base witness table accessor for _AttributeBody in PlatformItemContextMenuModifier<A>.WriteTrait()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for TabContextMenuKey.Storage(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TabContextMenuKey.Storage);
}

uint64_t type metadata accessor for TabContextMenuKey.Storage.Guts(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TabContextMenuKey.Storage.Guts);
}

uint64_t outlined init with copy of TabContextMenuKey.Storage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for TabContextMenuKey.Storage?, (void (*)(uint64_t))type metadata accessor for TabContextMenuKey.Storage);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for TabContextMenuKey.Storage.Guts(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  unint64_t v16;
  id v17;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  int v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  __int128 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  void (*v82)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (*v87)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *__dsta;
  _BYTE *__dst;
  uint64_t v96;
  uint64_t v97;
  unsigned int (*v98)(_BYTE *, uint64_t, uint64_t);
  uint64_t v99;
  int *v100;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
LABEL_51:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    v7 = type metadata accessor for PlatformItemList.Item();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      goto LABEL_51;
    }
    v96 = v8;
    v100 = (int *)v7;
    v10 = (void *)*a2;
    v11 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = v11;
    v12 = a2[3];
    a1[2] = a2[2];
    a1[3] = v12;
    *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    v13 = a2[6];
    a1[5] = a2[5];
    a1[6] = v13;
    *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
    v14 = a1 + 8;
    v15 = a2 + 8;
    v16 = a2[23];
    v17 = v10;
    v18 = v11;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v16 >> 1 == 4294967294)
    {
      v19 = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 13) = v19;
      *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
      *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      v20 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v20;
      v21 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v21;
      v22 = *((_OWORD *)a2 + 5);
      *v14 = *v15;
      *((_OWORD *)a1 + 5) = v22;
      v23 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v23;
      v24 = a2[32];
      if (v24)
      {
LABEL_9:
        a1[31] = a2[31];
        a1[32] = v24;
        v25 = (void *)a2[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v25 >= 2)
          v26 = v25;
        a1[33] = v25;
        *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
        *((_BYTE *)a1 + 276) = *((_BYTE *)a2 + 276);
        *(_WORD *)((char *)a1 + 277) = *(_WORD *)((char *)a2 + 277);
        v27 = a2[36];
        a1[35] = a2[35];
        a1[36] = v27;
        swift_retain();
        swift_retain();
LABEL_20:
        v39 = a2[41];
        if (v39 >> 2 == 0xFFFFFFFF)
        {
          v40 = *(_OWORD *)(a2 + 47);
          *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
          *(_OWORD *)(a1 + 47) = v40;
          a1[49] = a2[49];
          v41 = *(_OWORD *)(a2 + 39);
          *(_OWORD *)(a1 + 37) = *(_OWORD *)(a2 + 37);
          *(_OWORD *)(a1 + 39) = v41;
          v42 = *(_OWORD *)(a2 + 43);
          *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 43) = v42;
        }
        else
        {
          v43 = (void *)a2[37];
          v44 = a2[38];
          v45 = a2[39];
          v46 = a2[42];
          v47 = a2[43];
          v48 = a2[44];
          v89 = a2[40];
          v90 = a2[45];
          v91 = a2[46];
          v92 = a2[47];
          __dsta = (void *)a2[48];
          v97 = a2[49];
          outlined copy of PlatformItemList.Item.SystemItem(v43, v44, v45, v89, v39, v46, v47, v48, v90, v91, v92, (char)__dsta, v97);
          a1[37] = v43;
          a1[38] = v44;
          a1[39] = v45;
          a1[40] = v89;
          a1[41] = v39;
          a1[42] = v46;
          a1[43] = v47;
          a1[44] = v48;
          a1[45] = v90;
          a1[46] = v91;
          a1[47] = v92;
          a1[48] = __dsta;
          a1[49] = v97;
        }
        v49 = a2[51];
        if (v49 == 1)
        {
          v50 = *((_OWORD *)a2 + 28);
          *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
          *((_OWORD *)a1 + 28) = v50;
          *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
          v51 = *((_OWORD *)a2 + 26);
          *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
          *((_OWORD *)a1 + 26) = v51;
LABEL_33:
          v57 = a2[60];
          a1[59] = a2[59];
          a1[60] = v57;
          a1[61] = a2[61];
          *((_BYTE *)a1 + 496) = *((_BYTE *)a2 + 496);
          v58 = a2[63];
          swift_bridgeObjectRetain();
          if (v58)
          {
            v59 = a2[64];
            a1[63] = v58;
            a1[64] = v59;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
          }
          *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
          v60 = a2[66];
          if (v60)
          {
            a1[66] = v60;
            a1[67] = a2[67];
            a1[68] = a2[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
            a1[68] = a2[68];
          }
          v61 = a2[69];
          if (v61 == 1)
          {
            *(_OWORD *)(a1 + 69) = *(_OWORD *)(a2 + 69);
            a1[71] = a2[71];
          }
          else
          {
            a1[69] = v61;
            v62 = a2[70];
            swift_retain();
            if (v62)
            {
              v63 = a2[71];
              a1[70] = v62;
              a1[71] = v63;
              swift_retain();
            }
            else
            {
              *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
            }
          }
          v64 = (void *)a2[72];
          a1[72] = v64;
          a1[73] = a2[73];
          a1[74] = a2[74];
          a1[75] = a2[75];
          a1[76] = a2[76];
          a1[77] = a2[77];
          a1[78] = a2[78];
          *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
          *((_BYTE *)a1 + 634) = *((_BYTE *)a2 + 634);
          v65 = v100[28];
          __dst = (char *)a1 + v65;
          v66 = (char *)a2 + v65;
          v67 = type metadata accessor for CommandOperation();
          v93 = *(_QWORD *)(v67 - 8);
          v98 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v93 + 48);
          v68 = v64;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v98(v66, 1, v67))
          {
            type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(__dst, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
            v70 = v100;
            v71 = v96;
          }
          else
          {
            *__dst = *v66;
            v72 = *(int *)(v67 + 20);
            v73 = &__dst[v72];
            v74 = &v66[v72];
            v99 = v67;
            v75 = *(_QWORD *)&v66[v72];
            v76 = *(_QWORD *)&v66[v72 + 8];
            v77 = v66[v72 + 16];
            outlined copy of Text.Storage(v75, *((_QWORD *)v74 + 1), v74[16]);
            *(_QWORD *)v73 = v75;
            *((_QWORD *)v73 + 1) = v76;
            v73[16] = v77;
            *((_QWORD *)v73 + 3) = *((_QWORD *)v74 + 3);
            v78 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v79 = &v73[v78];
            v80 = &v74[v78];
            v81 = type metadata accessor for UUID();
            v82 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v81 - 8) + 16);
            swift_bridgeObjectRetain();
            v82(v79, v80, v81);
            v83 = *(int *)(v99 + 24);
            v84 = &__dst[v83];
            v85 = &v66[v83];
            if (*v85)
            {
              v86 = v85[1];
              *v84 = *v85;
              v84[1] = v86;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v84 = *(_OWORD *)v85;
            }
            v70 = v100;
            v71 = v96;
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v93 + 56))(__dst, 0, 1, v99);
          }
          *((_BYTE *)a1 + v70[29]) = *((_BYTE *)a2 + v70[29]);
          *((_BYTE *)a1 + v70[30]) = *((_BYTE *)a2 + v70[30]);
          *((_BYTE *)a1 + v70[31]) = *((_BYTE *)a2 + v70[31]);
          *((_BYTE *)a1 + v70[32]) = *((_BYTE *)a2 + v70[32]);
          *(_QWORD *)((char *)a1 + v70[33]) = *(_QWORD *)((char *)a2 + v70[33]);
          v87 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v71 + 56);
          swift_retain();
          v87(a1, 0, 1, v70);
          goto LABEL_51;
        }
        *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
        *((_BYTE *)a1 + 404) = *((_BYTE *)a2 + 404);
        if (v49)
        {
          v52 = a2[52];
          a1[51] = v49;
          a1[52] = v52;
          swift_retain();
          v53 = a2[53];
          if (v53)
            goto LABEL_27;
        }
        else
        {
          *(_OWORD *)(a1 + 51) = *(_OWORD *)(a2 + 51);
          v53 = a2[53];
          if (v53)
          {
LABEL_27:
            v54 = a2[54];
            a1[53] = v53;
            a1[54] = v54;
            swift_retain();
            v55 = a2[55];
            if (v55)
            {
LABEL_28:
              v56 = a2[56];
              a1[55] = v55;
              a1[56] = v56;
              swift_retain();
LABEL_32:
              a1[57] = a2[57];
              *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
              goto LABEL_33;
            }
LABEL_31:
            *(_OWORD *)(a1 + 55) = *(_OWORD *)(a2 + 55);
            goto LABEL_32;
          }
        }
        *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
        v55 = a2[55];
        if (v55)
          goto LABEL_28;
        goto LABEL_31;
      }
    }
    else
    {
      v28 = *((unsigned __int8 *)a2 + 72);
      if (v28 == 255)
      {
        *(_QWORD *)v14 = *(_QWORD *)v15;
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
      }
      else
      {
        v29 = (void *)a2[8];
        outlined copy of GraphicsImage.Contents(v29, *((_BYTE *)a2 + 72));
        a1[8] = v29;
        *((_BYTE *)a1 + 72) = v28;
        v16 = a2[23];
      }
      a1[10] = a2[10];
      *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
      *((_BYTE *)a1 + 104) = *((_BYTE *)a2 + 104);
      *(_OWORD *)((char *)a1 + 108) = *(_OWORD *)((char *)a2 + 108);
      *((_BYTE *)a1 + 124) = *((_BYTE *)a2 + 124);
      v30 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v30;
      *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
      *((_BYTE *)a1 + 162) = *((_BYTE *)a2 + 162);
      *((_BYTE *)a1 + 163) = *((_BYTE *)a2 + 163);
      if (v16 >> 1 == 0xFFFFFFFF)
      {
        v31 = *(_OWORD *)(a2 + 23);
        *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
        *(_OWORD *)(a1 + 23) = v31;
      }
      else
      {
        v32 = a2[21];
        v33 = a2[22];
        v34 = a2[24];
        outlined copy of AccessibilityImageLabel(v32, v33, v16);
        a1[21] = v32;
        a1[22] = v33;
        a1[23] = v16;
        a1[24] = v34;
      }
      v35 = a2[26];
      a1[25] = a2[25];
      a1[26] = v35;
      *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
      *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
      *((_BYTE *)a1 + 224) = *((_BYTE *)a2 + 224);
      v36 = (void *)a2[29];
      a1[29] = v36;
      *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
      *((_BYTE *)a1 + 242) = *((_BYTE *)a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v37 = v36;
      v24 = a2[32];
      if (v24)
        goto LABEL_9;
    }
    v38 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 33) = v38;
    *(_OWORD *)(a1 + 35) = *(_OWORD *)(a2 + 35);
    goto LABEL_20;
  }
  v6 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for TabContextMenuKey.Storage.Guts(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  int v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v2 = type metadata accessor for PlatformItemList.Item();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
    if ((_DWORD)result)
      return result;

    swift_bridgeObjectRelease();
    swift_release();
    v4 = *(_QWORD *)(a1 + 184);
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v6 = *(unsigned __int8 *)(a1 + 72);
      if (v6 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v6);
        v4 = *(_QWORD *)(a1 + 184);
        v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v5 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v4);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(a1 + 256))
    {
      swift_bridgeObjectRelease();
      v7 = *(void **)(a1 + 264);
      if ((unint64_t)v7 >= 2)

      swift_release();
      swift_release();
    }
    v8 = *(_QWORD *)(a1 + 328);
    if (v8 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 320), v8, *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392));
    v9 = *(_QWORD *)(a1 + 408);
    if (v9)
    {
      if (v9 == 1)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 504))
          swift_release();
        if (*(_QWORD *)(a1 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(a1 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(a1 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = a1 + *(int *)(v2 + 112);
        v11 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
        {
          v12 = v10 + *(int *)(v11 + 20);
          outlined consume of Text.Storage(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
          swift_bridgeObjectRelease();
          v13 = v12 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v14 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
          if (*(_QWORD *)(v10 + *(int *)(v11 + 24)))
            swift_release();
        }
        return swift_release();
      }
      swift_release();
    }
    if (*(_QWORD *)(a1 + 424))
      swift_release();
    if (*(_QWORD *)(a1 + 440))
      swift_release();
    goto LABEL_22;
  }
  return swift_release();
}

_QWORD *initializeWithCopy for TabContextMenuKey.Storage.Guts(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  id v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  int v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  __int128 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  void (*v82)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (*v87)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *__dsta;
  _BYTE *__dst;
  uint64_t v95;
  unsigned int (*v96)(_BYTE *, uint64_t, uint64_t);
  uint64_t v97;
  int *v98;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_retain();
    goto LABEL_49;
  }
  v4 = type metadata accessor for PlatformItemList.Item();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    goto LABEL_49;
  }
  v92 = v5;
  v98 = (int *)v4;
  v7 = (void *)*a2;
  v8 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v8;
  v9 = a2[3];
  a1[2] = a2[2];
  a1[3] = v9;
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  v11 = a1 + 8;
  v12 = a2 + 8;
  v13 = a2[23];
  v14 = v7;
  v15 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v13 >> 1 != 4294967294)
  {
    v25 = *((unsigned __int8 *)a2 + 72);
    if (v25 == 255)
    {
      *v11 = *v12;
      *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
    }
    else
    {
      v26 = (void *)a2[8];
      outlined copy of GraphicsImage.Contents(v26, *((_BYTE *)a2 + 72));
      a1[8] = v26;
      *((_BYTE *)a1 + 72) = v25;
      v13 = a2[23];
    }
    a1[10] = a2[10];
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
    *((_BYTE *)a1 + 104) = *((_BYTE *)a2 + 104);
    *(_OWORD *)((char *)a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    *((_BYTE *)a1 + 124) = *((_BYTE *)a2 + 124);
    v27 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v27;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    *((_BYTE *)a1 + 162) = *((_BYTE *)a2 + 162);
    *((_BYTE *)a1 + 163) = *((_BYTE *)a2 + 163);
    if (v13 >> 1 == 0xFFFFFFFF)
    {
      v28 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 23) = v28;
    }
    else
    {
      v29 = a2[21];
      v30 = a2[22];
      v31 = a2[24];
      outlined copy of AccessibilityImageLabel(v29, v30, v13);
      a1[21] = v29;
      a1[22] = v30;
      a1[23] = v13;
      a1[24] = v31;
    }
    v32 = a2[26];
    a1[25] = a2[25];
    a1[26] = v32;
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
    *((_BYTE *)a1 + 224) = *((_BYTE *)a2 + 224);
    v33 = (void *)a2[29];
    a1[29] = v33;
    *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
    *((_BYTE *)a1 + 242) = *((_BYTE *)a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v34 = v33;
    v21 = a2[32];
    if (v21)
      goto LABEL_7;
LABEL_17:
    v35 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 33) = v35;
    *(_OWORD *)(a1 + 35) = *(_OWORD *)(a2 + 35);
    goto LABEL_18;
  }
  v16 = *((_OWORD *)a2 + 13);
  *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
  *((_OWORD *)a1 + 13) = v16;
  *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
  *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
  v17 = *((_OWORD *)a2 + 9);
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)a1 + 9) = v17;
  v18 = *((_OWORD *)a2 + 11);
  *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)a1 + 11) = v18;
  v19 = *((_OWORD *)a2 + 5);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)a1 + 5) = v19;
  v20 = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 7) = v20;
  v21 = a2[32];
  if (!v21)
    goto LABEL_17;
LABEL_7:
  a1[31] = a2[31];
  a1[32] = v21;
  v22 = (void *)a2[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v22 >= 2)
    v23 = v22;
  a1[33] = v22;
  *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
  *((_BYTE *)a1 + 276) = *((_BYTE *)a2 + 276);
  *(_WORD *)((char *)a1 + 277) = *(_WORD *)((char *)a2 + 277);
  v24 = a2[36];
  a1[35] = a2[35];
  a1[36] = v24;
  swift_retain();
  swift_retain();
LABEL_18:
  v36 = a2[41];
  if (v36 >> 2 == 0xFFFFFFFF)
  {
    v37 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 47) = v37;
    a1[49] = a2[49];
    v38 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 37) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 39) = v38;
    v39 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 43) = v39;
  }
  else
  {
    v40 = (void *)a2[37];
    v41 = a2[38];
    v42 = a2[39];
    v43 = a2[40];
    v45 = a2[42];
    v44 = a2[43];
    v46 = a2[44];
    v89 = a2[45];
    v90 = a2[46];
    v91 = a2[47];
    __dsta = (void *)a2[48];
    v95 = a2[49];
    outlined copy of PlatformItemList.Item.SystemItem(v40, v41, v42, v43, v36, v45, v44, v46, v89, v90, v91, (char)__dsta, v95);
    a1[37] = v40;
    a1[38] = v41;
    a1[39] = v42;
    a1[40] = v43;
    a1[41] = v36;
    a1[42] = v45;
    a1[43] = v44;
    a1[44] = v46;
    a1[45] = v89;
    a1[46] = v90;
    a1[47] = v91;
    a1[48] = __dsta;
    a1[49] = v95;
  }
  v47 = a2[51];
  if (v47 != 1)
  {
    *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
    *((_BYTE *)a1 + 404) = *((_BYTE *)a2 + 404);
    if (v47)
    {
      v50 = a2[52];
      a1[51] = v47;
      a1[52] = v50;
      swift_retain();
      v51 = a2[53];
      if (v51)
        goto LABEL_25;
    }
    else
    {
      *(_OWORD *)(a1 + 51) = *(_OWORD *)(a2 + 51);
      v51 = a2[53];
      if (v51)
      {
LABEL_25:
        v52 = a2[54];
        a1[53] = v51;
        a1[54] = v52;
        swift_retain();
        v53 = a2[55];
        if (v53)
        {
LABEL_26:
          v54 = a2[56];
          a1[55] = v53;
          a1[56] = v54;
          swift_retain();
LABEL_30:
          a1[57] = a2[57];
          *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
          goto LABEL_31;
        }
LABEL_29:
        *(_OWORD *)(a1 + 55) = *(_OWORD *)(a2 + 55);
        goto LABEL_30;
      }
    }
    *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
    v53 = a2[55];
    if (v53)
      goto LABEL_26;
    goto LABEL_29;
  }
  v48 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v48;
  *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
  v49 = *((_OWORD *)a2 + 26);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 26) = v49;
LABEL_31:
  v55 = a2[60];
  a1[59] = a2[59];
  a1[60] = v55;
  a1[61] = a2[61];
  *((_BYTE *)a1 + 496) = *((_BYTE *)a2 + 496);
  v56 = a2[63];
  swift_bridgeObjectRetain();
  if (v56)
  {
    v57 = a2[64];
    a1[63] = v56;
    a1[64] = v57;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
  }
  *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
  v58 = a2[66];
  if (v58)
  {
    a1[66] = v58;
    a1[67] = a2[67];
    a1[68] = a2[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    a1[68] = a2[68];
  }
  v59 = a2[69];
  if (v59 == 1)
  {
    *(_OWORD *)(a1 + 69) = *(_OWORD *)(a2 + 69);
    a1[71] = a2[71];
  }
  else
  {
    a1[69] = v59;
    v60 = a2[70];
    swift_retain();
    if (v60)
    {
      v61 = a2[71];
      a1[70] = v60;
      a1[71] = v61;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
    }
  }
  v62 = (void *)a2[72];
  a1[72] = v62;
  a1[73] = a2[73];
  a1[74] = a2[74];
  a1[75] = a2[75];
  a1[76] = a2[76];
  a1[77] = a2[77];
  a1[78] = a2[78];
  *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
  *((_BYTE *)a1 + 634) = *((_BYTE *)a2 + 634);
  v63 = v98[28];
  __dst = (char *)a1 + v63;
  v64 = (char *)a2 + v63;
  v65 = type metadata accessor for CommandOperation();
  v66 = *(_QWORD *)(v65 - 8);
  v96 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v66 + 48);
  v67 = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v96(v64, 1, v65))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
    memcpy(__dst, v64, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    v69 = v92;
    v70 = v98;
  }
  else
  {
    v97 = v66;
    *__dst = *v64;
    v71 = *(int *)(v65 + 20);
    v72 = &__dst[v71];
    v73 = &v64[v71];
    v74 = *(_QWORD *)&v64[v71];
    v75 = *(_QWORD *)&v64[v71 + 8];
    v76 = v65;
    v77 = v64[v71 + 16];
    outlined copy of Text.Storage(v74, v75, v77);
    *(_QWORD *)v72 = v74;
    *((_QWORD *)v72 + 1) = v75;
    v72[16] = v77;
    *((_QWORD *)v72 + 3) = *((_QWORD *)v73 + 3);
    v78 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v79 = &v72[v78];
    v80 = &v73[v78];
    v81 = type metadata accessor for UUID();
    v82 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v81 - 8) + 16);
    swift_bridgeObjectRetain();
    v82(v79, v80, v81);
    v83 = *(int *)(v76 + 24);
    v84 = &__dst[v83];
    v85 = &v64[v83];
    if (*v85)
    {
      v86 = v85[1];
      *v84 = *v85;
      v84[1] = v86;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v84 = *(_OWORD *)v85;
    }
    v69 = v92;
    v70 = v98;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v97 + 56))(__dst, 0, 1, v76);
  }
  *((_BYTE *)a1 + v70[29]) = *((_BYTE *)a2 + v70[29]);
  *((_BYTE *)a1 + v70[30]) = *((_BYTE *)a2 + v70[30]);
  *((_BYTE *)a1 + v70[31]) = *((_BYTE *)a2 + v70[31]);
  *((_BYTE *)a1 + v70[32]) = *((_BYTE *)a2 + v70[32]);
  *(_QWORD *)((char *)a1 + v70[33]) = *(_QWORD *)((char *)a2 + v70[33]);
  v87 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v69 + 56);
  swift_retain();
  v87(a1, 0, 1, v70);
LABEL_49:
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for TabContextMenuKey.Storage.Guts(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _OWORD *v9;
  id *v10;
  unint64_t v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  id v24;
  int v25;
  int v26;
  id v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *v38;
  id v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  void (*v93)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  void (*v98)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int (*v104)(_BYTE *, uint64_t, uint64_t);
  uint64_t v105;
  void *__dsta;
  _BYTE *__dst;
  uint64_t v108;
  int *v109;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for TabContextMenuKey.Storage.Guts);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
LABEL_51:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    v4 = type metadata accessor for PlatformItemList.Item();
    v5 = *(_QWORD *)(v4 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_51;
    }
    v108 = v5;
    v109 = (int *)v4;
    v7 = (void *)*a2;
    *a1 = *a2;
    v8 = (void *)a2[1];
    a1[1] = v8;
    a1[2] = a2[2];
    a1[3] = a2[3];
    *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    a1[5] = a2[5];
    a1[6] = a2[6];
    *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
    v9 = a1 + 8;
    v10 = (id *)(a2 + 8);
    v11 = a2[23];
    v12 = v7;
    v13 = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v11 >> 1 == 4294967294)
    {
      v14 = *(_OWORD *)v10;
      v15 = *((_OWORD *)a2 + 5);
      v16 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v16;
      *v9 = v14;
      *((_OWORD *)a1 + 5) = v15;
      v17 = *((_OWORD *)a2 + 8);
      v18 = *((_OWORD *)a2 + 9);
      v19 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v19;
      *((_OWORD *)a1 + 8) = v17;
      *((_OWORD *)a1 + 9) = v18;
      v20 = *((_OWORD *)a2 + 12);
      v21 = *((_OWORD *)a2 + 13);
      v22 = *((_OWORD *)a2 + 14);
      *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      *((_OWORD *)a1 + 13) = v21;
      *((_OWORD *)a1 + 14) = v22;
      *((_OWORD *)a1 + 12) = v20;
      if (a2[32])
      {
LABEL_8:
        a1[31] = a2[31];
        a1[32] = a2[32];
        v23 = (void *)a2[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v23 >= 2)
          v24 = v23;
        a1[33] = v23;
        v25 = *((_DWORD *)a2 + 68);
        *((_BYTE *)a1 + 276) = *((_BYTE *)a2 + 276);
        *((_DWORD *)a1 + 68) = v25;
        *((_BYTE *)a1 + 277) = *((_BYTE *)a2 + 277);
        *((_BYTE *)a1 + 278) = *((_BYTE *)a2 + 278);
        a1[35] = a2[35];
        a1[36] = a2[36];
        swift_retain();
        swift_retain();
LABEL_19:
        v42 = a2[41];
        if (v42 >> 2 == 0xFFFFFFFF)
        {
          v43 = *(_OWORD *)(a2 + 37);
          v44 = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 39) = *(_OWORD *)(a2 + 39);
          *(_OWORD *)(a1 + 41) = v44;
          *(_OWORD *)(a1 + 37) = v43;
          v45 = *(_OWORD *)(a2 + 43);
          v46 = *(_OWORD *)(a2 + 45);
          v47 = *(_OWORD *)(a2 + 47);
          a1[49] = a2[49];
          *(_OWORD *)(a1 + 45) = v46;
          *(_OWORD *)(a1 + 47) = v47;
          *(_OWORD *)(a1 + 43) = v45;
        }
        else
        {
          v48 = (void *)a2[37];
          v49 = a2[38];
          v50 = a2[39];
          v51 = a2[40];
          v53 = a2[42];
          v52 = a2[43];
          v54 = a2[44];
          v100 = a2[45];
          v101 = a2[46];
          v102 = a2[47];
          v103 = a2[48];
          __dsta = (void *)a2[49];
          outlined copy of PlatformItemList.Item.SystemItem(v48, v49, v50, v51, v42, v53, v52, v54, v100, v101, v102, v103, (uint64_t)__dsta);
          a1[37] = v48;
          a1[38] = v49;
          a1[39] = v50;
          a1[40] = v51;
          a1[41] = v42;
          a1[42] = v53;
          a1[43] = v52;
          a1[44] = v54;
          a1[45] = v100;
          a1[46] = v101;
          a1[47] = v102;
          a1[48] = v103;
          a1[49] = __dsta;
        }
        if (a2[51] == 1)
        {
          *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
          v55 = *((_OWORD *)a2 + 26);
          v56 = *((_OWORD *)a2 + 27);
          v57 = *((_OWORD *)a2 + 28);
          *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
          *((_OWORD *)a1 + 27) = v56;
          *((_OWORD *)a1 + 28) = v57;
          *((_OWORD *)a1 + 26) = v55;
          goto LABEL_32;
        }
        *((_BYTE *)a1 + 400) = *((_BYTE *)a2 + 400);
        *((_BYTE *)a1 + 401) = *((_BYTE *)a2 + 401);
        *((_BYTE *)a1 + 402) = *((_BYTE *)a2 + 402);
        *((_BYTE *)a1 + 403) = *((_BYTE *)a2 + 403);
        *((_BYTE *)a1 + 404) = *((_BYTE *)a2 + 404);
        v58 = a2[51];
        if (v58)
        {
          v59 = a2[52];
          a1[51] = v58;
          a1[52] = v59;
          swift_retain();
          v60 = a2[53];
          if (v60)
            goto LABEL_26;
        }
        else
        {
          *(_OWORD *)(a1 + 51) = *(_OWORD *)(a2 + 51);
          v60 = a2[53];
          if (v60)
          {
LABEL_26:
            v61 = a2[54];
            a1[53] = v60;
            a1[54] = v61;
            swift_retain();
            v62 = a2[55];
            if (v62)
            {
LABEL_27:
              v63 = a2[56];
              a1[55] = v62;
              a1[56] = v63;
              swift_retain();
LABEL_31:
              a1[57] = a2[57];
              *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
LABEL_32:
              a1[59] = a2[59];
              a1[60] = a2[60];
              a1[61] = a2[61];
              *((_BYTE *)a1 + 496) = *((_BYTE *)a2 + 496);
              v64 = a2[63];
              swift_bridgeObjectRetain();
              if (v64)
              {
                v65 = a2[64];
                a1[63] = v64;
                a1[64] = v65;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
              }
              *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
              v66 = a2[66];
              if (v66)
              {
                a1[66] = v66;
                a1[67] = a2[67];
                a1[68] = a2[68];
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                v67 = *((_OWORD *)a2 + 33);
                a1[68] = a2[68];
                *((_OWORD *)a1 + 33) = v67;
              }
              v68 = a2[69];
              if (v68 == 1)
              {
                v69 = a1 + 69;
                v70 = *(_OWORD *)(a2 + 69);
                a1[71] = a2[71];
              }
              else
              {
                a1[69] = v68;
                v71 = a2[70];
                swift_retain();
                if (v71)
                {
                  v72 = a2[71];
                  a1[70] = v71;
                  a1[71] = v72;
                  swift_retain();
LABEL_44:
                  v73 = (void *)a2[72];
                  a1[72] = v73;
                  a1[73] = a2[73];
                  a1[74] = a2[74];
                  a1[75] = a2[75];
                  a1[76] = a2[76];
                  a1[77] = a2[77];
                  a1[78] = a2[78];
                  *((_BYTE *)a1 + 632) = *((_BYTE *)a2 + 632);
                  *((_BYTE *)a1 + 633) = *((_BYTE *)a2 + 633);
                  *((_BYTE *)a1 + 634) = *((_BYTE *)a2 + 634);
                  v74 = v109[28];
                  __dst = (char *)a1 + v74;
                  v75 = (char *)a2 + v74;
                  v76 = type metadata accessor for CommandOperation();
                  v77 = *(_QWORD *)(v76 - 8);
                  v104 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v77 + 48);
                  v78 = v73;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v104(v75, 1, v76))
                  {
                    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
                    memcpy(__dst, v75, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
                    v80 = v109;
                    v81 = v108;
                  }
                  else
                  {
                    v105 = v77;
                    *__dst = *v75;
                    v82 = v76;
                    v83 = *(int *)(v76 + 20);
                    v84 = &__dst[v83];
                    v85 = &v75[v83];
                    v86 = *(_QWORD *)&v75[v83];
                    v87 = *(_QWORD *)&v75[v83 + 8];
                    v88 = v75[v83 + 16];
                    outlined copy of Text.Storage(v86, v87, v88);
                    *(_QWORD *)v84 = v86;
                    *((_QWORD *)v84 + 1) = v87;
                    v84[16] = v88;
                    *((_QWORD *)v84 + 3) = *((_QWORD *)v85 + 3);
                    v89 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    v90 = &v84[v89];
                    v91 = &v85[v89];
                    v92 = type metadata accessor for UUID();
                    v93 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v92 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v93(v90, v91, v92);
                    v94 = *(int *)(v82 + 24);
                    v95 = &__dst[v94];
                    v96 = &v75[v94];
                    if (*v96)
                    {
                      v97 = v96[1];
                      *v95 = *v96;
                      v95[1] = v97;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)v95 = *(_OWORD *)v96;
                    }
                    v80 = v109;
                    v81 = v108;
                    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v105 + 56))(__dst, 0, 1, v82);
                  }
                  *((_BYTE *)a1 + v80[29]) = *((_BYTE *)a2 + v80[29]);
                  *((_BYTE *)a1 + v80[30]) = *((_BYTE *)a2 + v80[30]);
                  *((_BYTE *)a1 + v80[31]) = *((_BYTE *)a2 + v80[31]);
                  *((_BYTE *)a1 + v80[32]) = *((_BYTE *)a2 + v80[32]);
                  *(_QWORD *)((char *)a1 + v80[33]) = *(_QWORD *)((char *)a2 + v80[33]);
                  v98 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v81 + 56);
                  swift_retain();
                  v98(a1, 0, 1, v80);
                  goto LABEL_51;
                }
                v69 = a1 + 70;
                v70 = *((_OWORD *)a2 + 35);
              }
              *v69 = v70;
              goto LABEL_44;
            }
LABEL_30:
            *(_OWORD *)(a1 + 55) = *(_OWORD *)(a2 + 55);
            goto LABEL_31;
          }
        }
        *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
        v62 = a2[55];
        if (v62)
          goto LABEL_27;
        goto LABEL_30;
      }
    }
    else
    {
      v26 = *((unsigned __int8 *)a2 + 72);
      if (v26 == 255)
      {
        v28 = *v10;
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        *(_QWORD *)v9 = v28;
      }
      else
      {
        v27 = *v10;
        outlined copy of GraphicsImage.Contents(*v10, *((_BYTE *)a2 + 72));
        a1[8] = v27;
        *((_BYTE *)a1 + 72) = v26;
      }
      a1[10] = a2[10];
      *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
      *((_BYTE *)a1 + 104) = *((_BYTE *)a2 + 104);
      v29 = *(_OWORD *)((char *)a2 + 108);
      *((_BYTE *)a1 + 124) = *((_BYTE *)a2 + 124);
      *(_OWORD *)((char *)a1 + 108) = v29;
      v30 = *((_OWORD *)a2 + 8);
      v31 = *((_OWORD *)a2 + 9);
      *((_BYTE *)a1 + 160) = *((_BYTE *)a2 + 160);
      *((_OWORD *)a1 + 8) = v30;
      *((_OWORD *)a1 + 9) = v31;
      *((_BYTE *)a1 + 161) = *((_BYTE *)a2 + 161);
      *((_BYTE *)a1 + 162) = *((_BYTE *)a2 + 162);
      *((_BYTE *)a1 + 163) = *((_BYTE *)a2 + 163);
      v32 = a2[23];
      if (v32 >> 1 == 0xFFFFFFFF)
      {
        v33 = *(_OWORD *)(a2 + 23);
        *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
        *(_OWORD *)(a1 + 23) = v33;
      }
      else
      {
        v34 = a2[21];
        v35 = a2[22];
        v36 = a2[24];
        outlined copy of AccessibilityImageLabel(v34, v35, a2[23]);
        a1[21] = v34;
        a1[22] = v35;
        a1[23] = v32;
        a1[24] = v36;
      }
      a1[25] = a2[25];
      a1[26] = a2[26];
      *((_BYTE *)a1 + 216) = *((_BYTE *)a2 + 216);
      *((_BYTE *)a1 + 217) = *((_BYTE *)a2 + 217);
      v37 = *((_DWORD *)a2 + 55);
      *((_BYTE *)a1 + 224) = *((_BYTE *)a2 + 224);
      *((_DWORD *)a1 + 55) = v37;
      v38 = (void *)a2[29];
      a1[29] = v38;
      *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
      *((_BYTE *)a1 + 242) = *((_BYTE *)a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v39 = v38;
      if (a2[32])
        goto LABEL_8;
    }
    v40 = *(_OWORD *)(a2 + 31);
    v41 = *(_OWORD *)(a2 + 35);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 35) = v41;
    *(_OWORD *)(a1 + 31) = v40;
    goto LABEL_19;
  }
  return a1;
}

_OWORD *initializeWithTake for TabContextMenuKey.Storage.Guts(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _BYTE *v32;
  __int128 v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  uint64_t v44;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = (int *)type metadata accessor for PlatformItemList.Item();
    v7 = *((_QWORD *)v6 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      v10 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v10;
      *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
      v11 = a2[13];
      a1[12] = a2[12];
      a1[13] = v11;
      a1[14] = a2[14];
      *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      v12 = a2[9];
      a1[8] = a2[8];
      a1[9] = v12;
      v13 = a2[11];
      a1[10] = a2[10];
      a1[11] = v13;
      v14 = a2[5];
      a1[4] = a2[4];
      a1[5] = v14;
      v15 = a2[7];
      a1[6] = a2[6];
      a1[7] = v15;
      *(_OWORD *)((char *)a1 + 248) = *(_OWORD *)((char *)a2 + 248);
      v16 = *(_OWORD *)((char *)a2 + 280);
      *(_OWORD *)((char *)a1 + 264) = *(_OWORD *)((char *)a2 + 264);
      *(_OWORD *)((char *)a1 + 280) = v16;
      v17 = *(_OWORD *)((char *)a2 + 376);
      *(_OWORD *)((char *)a1 + 360) = *(_OWORD *)((char *)a2 + 360);
      *(_OWORD *)((char *)a1 + 376) = v17;
      *((_QWORD *)a1 + 49) = *((_QWORD *)a2 + 49);
      v18 = *(_OWORD *)((char *)a2 + 312);
      *(_OWORD *)((char *)a1 + 296) = *(_OWORD *)((char *)a2 + 296);
      *(_OWORD *)((char *)a1 + 312) = v18;
      v19 = *(_OWORD *)((char *)a2 + 344);
      *(_OWORD *)((char *)a1 + 328) = *(_OWORD *)((char *)a2 + 328);
      *(_OWORD *)((char *)a1 + 344) = v19;
      v20 = a2[28];
      a1[27] = a2[27];
      a1[28] = v20;
      *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
      v21 = a2[26];
      a1[25] = a2[25];
      a1[26] = v21;
      *(_OWORD *)((char *)a1 + 472) = *(_OWORD *)((char *)a2 + 472);
      *(_OWORD *)((char *)a1 + 481) = *(_OWORD *)((char *)a2 + 481);
      v22 = *((_QWORD *)a2 + 63);
      if (v22)
      {
        v23 = *((_QWORD *)a2 + 64);
        *((_QWORD *)a1 + 63) = v22;
        *((_QWORD *)a1 + 64) = v23;
      }
      else
      {
        *(_OWORD *)((char *)a1 + 504) = *(_OWORD *)((char *)a2 + 504);
      }
      *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
      a1[33] = a2[33];
      *((_QWORD *)a1 + 68) = *((_QWORD *)a2 + 68);
      *((_QWORD *)a1 + 71) = *((_QWORD *)a2 + 71);
      *(_OWORD *)((char *)a1 + 552) = *(_OWORD *)((char *)a2 + 552);
      *((_QWORD *)a1 + 72) = *((_QWORD *)a2 + 72);
      *(_OWORD *)((char *)a1 + 584) = *(_OWORD *)((char *)a2 + 584);
      *(_OWORD *)((char *)a1 + 600) = *(_OWORD *)((char *)a2 + 600);
      *((_QWORD *)a1 + 77) = *((_QWORD *)a2 + 77);
      *((_QWORD *)a1 + 78) = *((_QWORD *)a2 + 78);
      *((_BYTE *)a1 + 632) = *((_BYTE *)a2 + 632);
      *(_WORD *)((char *)a1 + 633) = *(_WORD *)((char *)a2 + 633);
      v24 = v6[28];
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      v27 = type metadata accessor for CommandOperation();
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v44 = v7;
        *v25 = *v26;
        v30 = *(int *)(v27 + 20);
        v31 = &v25[v30];
        v32 = &v26[v30];
        v33 = *(_OWORD *)&v26[v30 + 16];
        *v31 = *(_OWORD *)&v26[v30];
        v31[1] = v33;
        v34 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v43 = (char *)v31 + v34;
        v35 = &v32[v34];
        v36 = type metadata accessor for UUID();
        (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v43, v35, v36);
        v37 = *(int *)(v27 + 24);
        v38 = &v25[v37];
        v39 = (uint64_t *)&v26[v37];
        v40 = *v39;
        if (*v39)
        {
          v41 = v39[1];
          *v38 = v40;
          v38[1] = v41;
        }
        else
        {
          *(_OWORD *)v38 = *(_OWORD *)v39;
        }
        v7 = v44;
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      *((_BYTE *)a1 + v6[29]) = *((_BYTE *)a2 + v6[29]);
      *((_BYTE *)a1 + v6[30]) = *((_BYTE *)a2 + v6[30]);
      *((_BYTE *)a1 + v6[31]) = *((_BYTE *)a2 + v6[31]);
      *((_BYTE *)a1 + v6[32]) = *((_BYTE *)a2 + v6[32]);
      *(_QWORD *)((char *)a1 + v6[33]) = *(_QWORD *)((char *)a2 + v6[33]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *assignWithTake for TabContextMenuKey.Storage.Guts(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _BYTE *v32;
  __int128 v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  uint64_t v44;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for TabContextMenuKey.Storage.Guts);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = (int *)type metadata accessor for PlatformItemList.Item();
      v7 = *((_QWORD *)v6 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
      {
        type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        v10 = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = v10;
        *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
        v11 = a2[13];
        a1[12] = a2[12];
        a1[13] = v11;
        a1[14] = a2[14];
        *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
        v12 = a2[9];
        a1[8] = a2[8];
        a1[9] = v12;
        v13 = a2[11];
        a1[10] = a2[10];
        a1[11] = v13;
        v14 = a2[5];
        a1[4] = a2[4];
        a1[5] = v14;
        v15 = a2[7];
        a1[6] = a2[6];
        a1[7] = v15;
        *(_OWORD *)((char *)a1 + 248) = *(_OWORD *)((char *)a2 + 248);
        v16 = *(_OWORD *)((char *)a2 + 280);
        *(_OWORD *)((char *)a1 + 264) = *(_OWORD *)((char *)a2 + 264);
        *(_OWORD *)((char *)a1 + 280) = v16;
        v17 = *(_OWORD *)((char *)a2 + 376);
        *(_OWORD *)((char *)a1 + 360) = *(_OWORD *)((char *)a2 + 360);
        *(_OWORD *)((char *)a1 + 376) = v17;
        *((_QWORD *)a1 + 49) = *((_QWORD *)a2 + 49);
        v18 = *(_OWORD *)((char *)a2 + 312);
        *(_OWORD *)((char *)a1 + 296) = *(_OWORD *)((char *)a2 + 296);
        *(_OWORD *)((char *)a1 + 312) = v18;
        v19 = *(_OWORD *)((char *)a2 + 344);
        *(_OWORD *)((char *)a1 + 328) = *(_OWORD *)((char *)a2 + 328);
        *(_OWORD *)((char *)a1 + 344) = v19;
        v20 = a2[28];
        a1[27] = a2[27];
        a1[28] = v20;
        *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
        v21 = a2[26];
        a1[25] = a2[25];
        a1[26] = v21;
        *(_OWORD *)((char *)a1 + 472) = *(_OWORD *)((char *)a2 + 472);
        *(_OWORD *)((char *)a1 + 481) = *(_OWORD *)((char *)a2 + 481);
        v22 = *((_QWORD *)a2 + 63);
        if (v22)
        {
          v23 = *((_QWORD *)a2 + 64);
          *((_QWORD *)a1 + 63) = v22;
          *((_QWORD *)a1 + 64) = v23;
        }
        else
        {
          *(_OWORD *)((char *)a1 + 504) = *(_OWORD *)((char *)a2 + 504);
        }
        *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
        a1[33] = a2[33];
        *((_QWORD *)a1 + 68) = *((_QWORD *)a2 + 68);
        *((_QWORD *)a1 + 71) = *((_QWORD *)a2 + 71);
        *(_OWORD *)((char *)a1 + 552) = *(_OWORD *)((char *)a2 + 552);
        *((_QWORD *)a1 + 72) = *((_QWORD *)a2 + 72);
        *(_OWORD *)((char *)a1 + 584) = *(_OWORD *)((char *)a2 + 584);
        *(_OWORD *)((char *)a1 + 600) = *(_OWORD *)((char *)a2 + 600);
        *((_QWORD *)a1 + 77) = *((_QWORD *)a2 + 77);
        *((_QWORD *)a1 + 78) = *((_QWORD *)a2 + 78);
        *((_BYTE *)a1 + 632) = *((_BYTE *)a2 + 632);
        *(_WORD *)((char *)a1 + 633) = *(_WORD *)((char *)a2 + 633);
        v24 = v6[28];
        v25 = (char *)a1 + v24;
        v26 = (char *)a2 + v24;
        v27 = type metadata accessor for CommandOperation();
        v28 = *(_QWORD *)(v27 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          v44 = v7;
          *v25 = *v26;
          v30 = *(int *)(v27 + 20);
          v31 = &v25[v30];
          v32 = &v26[v30];
          v33 = *(_OWORD *)&v26[v30 + 16];
          *v31 = *(_OWORD *)&v26[v30];
          v31[1] = v33;
          v34 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v43 = (char *)v31 + v34;
          v35 = &v32[v34];
          v36 = type metadata accessor for UUID();
          (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v43, v35, v36);
          v37 = *(int *)(v27 + 24);
          v38 = &v25[v37];
          v39 = (uint64_t *)&v26[v37];
          v40 = *v39;
          if (*v39)
          {
            v41 = v39[1];
            *v38 = v40;
            v38[1] = v41;
          }
          else
          {
            *(_OWORD *)v38 = *(_OWORD *)v39;
          }
          v7 = v44;
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        *((_BYTE *)a1 + v6[29]) = *((_BYTE *)a2 + v6[29]);
        *((_BYTE *)a1 + v6[30]) = *((_BYTE *)a2 + v6[30]);
        *((_BYTE *)a1 + v6[31]) = *((_BYTE *)a2 + v6[31]);
        *((_BYTE *)a1 + v6[32]) = *((_BYTE *)a2 + v6[32]);
        *(_QWORD *)((char *)a1 + v6[33]) = *(_QWORD *)((char *)a2 + v6[33]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void type metadata completion function for TabContextMenuKey.Storage.Guts()
{
  unint64_t v0;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(319, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  if (v0 <= 0x3F)
    swift_initEnumMetadataMultiPayload();
}

_QWORD *initializeBufferWithCopyOfBuffer for TabContextMenuKey.Storage(_QWORD *a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  unint64_t v15;
  id v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  int v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  __int128 v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  void (*v81)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  void (*v86)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *__dsta;
  _BYTE *__dst;
  uint64_t v95;
  uint64_t v96;
  unsigned int (*v97)(_BYTE *, uint64_t, uint64_t);
  uint64_t v98;
  int *v99;

  v4 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for TabContextMenuKey.Storage.Guts(0) - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
LABEL_51:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    v6 = type metadata accessor for PlatformItemList.Item();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      goto LABEL_51;
    }
    v95 = v7;
    v99 = (int *)v6;
    v9 = (void *)*a2;
    v10 = (void *)a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = a2[3];
    a1[2] = a2[2];
    a1[3] = v11;
    *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    v12 = a2[6];
    a1[5] = a2[5];
    a1[6] = v12;
    *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
    v13 = a1 + 8;
    v14 = a2 + 8;
    v15 = a2[23];
    v16 = v9;
    v17 = v10;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v15 >> 1 == 4294967294)
    {
      v18 = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 13) = v18;
      *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
      *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      v19 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v19;
      v20 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v20;
      v21 = *((_OWORD *)a2 + 5);
      *v13 = *v14;
      *((_OWORD *)a1 + 5) = v21;
      v22 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v22;
      v23 = a2[32];
      if (v23)
      {
LABEL_9:
        a1[31] = a2[31];
        a1[32] = v23;
        v24 = (void *)a2[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v24 >= 2)
          v25 = v24;
        a1[33] = v24;
        *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
        *((_BYTE *)a1 + 276) = *((_BYTE *)a2 + 276);
        *(_WORD *)((char *)a1 + 277) = *(_WORD *)((char *)a2 + 277);
        v26 = a2[36];
        a1[35] = a2[35];
        a1[36] = v26;
        swift_retain();
        swift_retain();
LABEL_20:
        v38 = a2[41];
        if (v38 >> 2 == 0xFFFFFFFF)
        {
          v39 = *(_OWORD *)(a2 + 47);
          *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
          *(_OWORD *)(a1 + 47) = v39;
          a1[49] = a2[49];
          v40 = *(_OWORD *)(a2 + 39);
          *(_OWORD *)(a1 + 37) = *(_OWORD *)(a2 + 37);
          *(_OWORD *)(a1 + 39) = v40;
          v41 = *(_OWORD *)(a2 + 43);
          *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 43) = v41;
        }
        else
        {
          v42 = (void *)a2[37];
          v43 = a2[38];
          v44 = a2[39];
          v45 = a2[42];
          v46 = a2[43];
          v47 = a2[44];
          v88 = a2[40];
          v89 = a2[45];
          v90 = a2[46];
          v91 = a2[47];
          __dsta = (void *)a2[48];
          v96 = a2[49];
          outlined copy of PlatformItemList.Item.SystemItem(v42, v43, v44, v88, v38, v45, v46, v47, v89, v90, v91, (char)__dsta, v96);
          a1[37] = v42;
          a1[38] = v43;
          a1[39] = v44;
          a1[40] = v88;
          a1[41] = v38;
          a1[42] = v45;
          a1[43] = v46;
          a1[44] = v47;
          a1[45] = v89;
          a1[46] = v90;
          a1[47] = v91;
          a1[48] = __dsta;
          a1[49] = v96;
        }
        v48 = a2[51];
        if (v48 == 1)
        {
          v49 = *((_OWORD *)a2 + 28);
          *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
          *((_OWORD *)a1 + 28) = v49;
          *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
          v50 = *((_OWORD *)a2 + 26);
          *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
          *((_OWORD *)a1 + 26) = v50;
LABEL_33:
          v56 = a2[60];
          a1[59] = a2[59];
          a1[60] = v56;
          a1[61] = a2[61];
          *((_BYTE *)a1 + 496) = *((_BYTE *)a2 + 496);
          v57 = a2[63];
          swift_bridgeObjectRetain();
          if (v57)
          {
            v58 = a2[64];
            a1[63] = v57;
            a1[64] = v58;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
          }
          *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
          v59 = a2[66];
          if (v59)
          {
            a1[66] = v59;
            a1[67] = a2[67];
            a1[68] = a2[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
            a1[68] = a2[68];
          }
          v60 = a2[69];
          if (v60 == 1)
          {
            *(_OWORD *)(a1 + 69) = *(_OWORD *)(a2 + 69);
            a1[71] = a2[71];
          }
          else
          {
            a1[69] = v60;
            v61 = a2[70];
            swift_retain();
            if (v61)
            {
              v62 = a2[71];
              a1[70] = v61;
              a1[71] = v62;
              swift_retain();
            }
            else
            {
              *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
            }
          }
          v63 = (void *)a2[72];
          a1[72] = v63;
          a1[73] = a2[73];
          a1[74] = a2[74];
          a1[75] = a2[75];
          a1[76] = a2[76];
          a1[77] = a2[77];
          a1[78] = a2[78];
          *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
          *((_BYTE *)a1 + 634) = *((_BYTE *)a2 + 634);
          v64 = v99[28];
          __dst = (char *)a1 + v64;
          v65 = (char *)a2 + v64;
          v66 = type metadata accessor for CommandOperation();
          v92 = *(_QWORD *)(v66 - 8);
          v97 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v92 + 48);
          v67 = v63;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v97(v65, 1, v66))
          {
            type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(__dst, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
            v69 = v99;
            v70 = v95;
          }
          else
          {
            *__dst = *v65;
            v71 = *(int *)(v66 + 20);
            v72 = &__dst[v71];
            v73 = &v65[v71];
            v98 = v66;
            v74 = *(_QWORD *)&v65[v71];
            v75 = *(_QWORD *)&v65[v71 + 8];
            v76 = v65[v71 + 16];
            outlined copy of Text.Storage(v74, *((_QWORD *)v73 + 1), v73[16]);
            *(_QWORD *)v72 = v74;
            *((_QWORD *)v72 + 1) = v75;
            v72[16] = v76;
            *((_QWORD *)v72 + 3) = *((_QWORD *)v73 + 3);
            v77 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v78 = &v72[v77];
            v79 = &v73[v77];
            v80 = type metadata accessor for UUID();
            v81 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v80 - 8) + 16);
            swift_bridgeObjectRetain();
            v81(v78, v79, v80);
            v82 = *(int *)(v98 + 24);
            v83 = &__dst[v82];
            v84 = &v65[v82];
            if (*v84)
            {
              v85 = v84[1];
              *v83 = *v84;
              v83[1] = v85;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v83 = *(_OWORD *)v84;
            }
            v69 = v99;
            v70 = v95;
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(__dst, 0, 1, v98);
          }
          *((_BYTE *)a1 + v69[29]) = *((_BYTE *)a2 + v69[29]);
          *((_BYTE *)a1 + v69[30]) = *((_BYTE *)a2 + v69[30]);
          *((_BYTE *)a1 + v69[31]) = *((_BYTE *)a2 + v69[31]);
          *((_BYTE *)a1 + v69[32]) = *((_BYTE *)a2 + v69[32]);
          *(_QWORD *)((char *)a1 + v69[33]) = *(_QWORD *)((char *)a2 + v69[33]);
          v86 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v70 + 56);
          swift_retain();
          v86(a1, 0, 1, v69);
          goto LABEL_51;
        }
        *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
        *((_BYTE *)a1 + 404) = *((_BYTE *)a2 + 404);
        if (v48)
        {
          v51 = a2[52];
          a1[51] = v48;
          a1[52] = v51;
          swift_retain();
          v52 = a2[53];
          if (v52)
            goto LABEL_27;
        }
        else
        {
          *(_OWORD *)(a1 + 51) = *(_OWORD *)(a2 + 51);
          v52 = a2[53];
          if (v52)
          {
LABEL_27:
            v53 = a2[54];
            a1[53] = v52;
            a1[54] = v53;
            swift_retain();
            v54 = a2[55];
            if (v54)
            {
LABEL_28:
              v55 = a2[56];
              a1[55] = v54;
              a1[56] = v55;
              swift_retain();
LABEL_32:
              a1[57] = a2[57];
              *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
              goto LABEL_33;
            }
LABEL_31:
            *(_OWORD *)(a1 + 55) = *(_OWORD *)(a2 + 55);
            goto LABEL_32;
          }
        }
        *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
        v54 = a2[55];
        if (v54)
          goto LABEL_28;
        goto LABEL_31;
      }
    }
    else
    {
      v27 = *((unsigned __int8 *)a2 + 72);
      if (v27 == 255)
      {
        *(_QWORD *)v13 = *(_QWORD *)v14;
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
      }
      else
      {
        v28 = (void *)a2[8];
        outlined copy of GraphicsImage.Contents(v28, *((_BYTE *)a2 + 72));
        a1[8] = v28;
        *((_BYTE *)a1 + 72) = v27;
        v15 = a2[23];
      }
      a1[10] = a2[10];
      *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
      *((_BYTE *)a1 + 104) = *((_BYTE *)a2 + 104);
      *(_OWORD *)((char *)a1 + 108) = *(_OWORD *)((char *)a2 + 108);
      *((_BYTE *)a1 + 124) = *((_BYTE *)a2 + 124);
      v29 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v29;
      *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
      *((_BYTE *)a1 + 162) = *((_BYTE *)a2 + 162);
      *((_BYTE *)a1 + 163) = *((_BYTE *)a2 + 163);
      if (v15 >> 1 == 0xFFFFFFFF)
      {
        v30 = *(_OWORD *)(a2 + 23);
        *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
        *(_OWORD *)(a1 + 23) = v30;
      }
      else
      {
        v31 = a2[21];
        v32 = a2[22];
        v33 = a2[24];
        outlined copy of AccessibilityImageLabel(v31, v32, v15);
        a1[21] = v31;
        a1[22] = v32;
        a1[23] = v15;
        a1[24] = v33;
      }
      v34 = a2[26];
      a1[25] = a2[25];
      a1[26] = v34;
      *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
      *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
      *((_BYTE *)a1 + 224) = *((_BYTE *)a2 + 224);
      v35 = (void *)a2[29];
      a1[29] = v35;
      *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
      *((_BYTE *)a1 + 242) = *((_BYTE *)a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v36 = v35;
      v23 = a2[32];
      if (v23)
        goto LABEL_9;
    }
    v37 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 33) = v37;
    *(_OWORD *)(a1 + 35) = *(_OWORD *)(a2 + 35);
    goto LABEL_20;
  }
  v5 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  swift_retain();
  return a1;
}

uint64_t destroy for TabContextMenuKey.Storage(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  int v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v2 = type metadata accessor for PlatformItemList.Item();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
    if ((_DWORD)result)
      return result;

    swift_bridgeObjectRelease();
    swift_release();
    v4 = *(_QWORD *)(a1 + 184);
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v6 = *(unsigned __int8 *)(a1 + 72);
      if (v6 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v6);
        v4 = *(_QWORD *)(a1 + 184);
        v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v5 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v4);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(a1 + 256))
    {
      swift_bridgeObjectRelease();
      v7 = *(void **)(a1 + 264);
      if ((unint64_t)v7 >= 2)

      swift_release();
      swift_release();
    }
    v8 = *(_QWORD *)(a1 + 328);
    if (v8 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 320), v8, *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392));
    v9 = *(_QWORD *)(a1 + 408);
    if (v9)
    {
      if (v9 == 1)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 504))
          swift_release();
        if (*(_QWORD *)(a1 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(a1 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(a1 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v10 = a1 + *(int *)(v2 + 112);
        v11 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
        {
          v12 = v10 + *(int *)(v11 + 20);
          outlined consume of Text.Storage(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
          swift_bridgeObjectRelease();
          v13 = v12 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v14 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
          if (*(_QWORD *)(v10 + *(int *)(v11 + 24)))
            swift_release();
        }
        return swift_release();
      }
      swift_release();
    }
    if (*(_QWORD *)(a1 + 424))
      swift_release();
    if (*(_QWORD *)(a1 + 440))
      swift_release();
    goto LABEL_22;
  }
  return swift_release();
}

_QWORD *initializeWithCopy for TabContextMenuKey.Storage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  id v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  int v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  __int128 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  void (*v82)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  void (*v87)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *__dsta;
  _BYTE *__dst;
  uint64_t v95;
  unsigned int (*v96)(_BYTE *, uint64_t, uint64_t);
  uint64_t v97;
  int *v98;

  type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_retain();
    goto LABEL_49;
  }
  v4 = type metadata accessor for PlatformItemList.Item();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    goto LABEL_49;
  }
  v92 = v5;
  v98 = (int *)v4;
  v7 = (void *)*a2;
  v8 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v8;
  v9 = a2[3];
  a1[2] = a2[2];
  a1[3] = v9;
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  v11 = a1 + 8;
  v12 = a2 + 8;
  v13 = a2[23];
  v14 = v7;
  v15 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v13 >> 1 != 4294967294)
  {
    v25 = *((unsigned __int8 *)a2 + 72);
    if (v25 == 255)
    {
      *v11 = *v12;
      *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
    }
    else
    {
      v26 = (void *)a2[8];
      outlined copy of GraphicsImage.Contents(v26, *((_BYTE *)a2 + 72));
      a1[8] = v26;
      *((_BYTE *)a1 + 72) = v25;
      v13 = a2[23];
    }
    a1[10] = a2[10];
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
    *((_BYTE *)a1 + 104) = *((_BYTE *)a2 + 104);
    *(_OWORD *)((char *)a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    *((_BYTE *)a1 + 124) = *((_BYTE *)a2 + 124);
    v27 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v27;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    *((_BYTE *)a1 + 162) = *((_BYTE *)a2 + 162);
    *((_BYTE *)a1 + 163) = *((_BYTE *)a2 + 163);
    if (v13 >> 1 == 0xFFFFFFFF)
    {
      v28 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 23) = v28;
    }
    else
    {
      v29 = a2[21];
      v30 = a2[22];
      v31 = a2[24];
      outlined copy of AccessibilityImageLabel(v29, v30, v13);
      a1[21] = v29;
      a1[22] = v30;
      a1[23] = v13;
      a1[24] = v31;
    }
    v32 = a2[26];
    a1[25] = a2[25];
    a1[26] = v32;
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
    *((_BYTE *)a1 + 224) = *((_BYTE *)a2 + 224);
    v33 = (void *)a2[29];
    a1[29] = v33;
    *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
    *((_BYTE *)a1 + 242) = *((_BYTE *)a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v34 = v33;
    v21 = a2[32];
    if (v21)
      goto LABEL_7;
LABEL_17:
    v35 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 33) = v35;
    *(_OWORD *)(a1 + 35) = *(_OWORD *)(a2 + 35);
    goto LABEL_18;
  }
  v16 = *((_OWORD *)a2 + 13);
  *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
  *((_OWORD *)a1 + 13) = v16;
  *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
  *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
  v17 = *((_OWORD *)a2 + 9);
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)a1 + 9) = v17;
  v18 = *((_OWORD *)a2 + 11);
  *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)a1 + 11) = v18;
  v19 = *((_OWORD *)a2 + 5);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *((_OWORD *)a1 + 5) = v19;
  v20 = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 7) = v20;
  v21 = a2[32];
  if (!v21)
    goto LABEL_17;
LABEL_7:
  a1[31] = a2[31];
  a1[32] = v21;
  v22 = (void *)a2[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v22 >= 2)
    v23 = v22;
  a1[33] = v22;
  *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
  *((_BYTE *)a1 + 276) = *((_BYTE *)a2 + 276);
  *(_WORD *)((char *)a1 + 277) = *(_WORD *)((char *)a2 + 277);
  v24 = a2[36];
  a1[35] = a2[35];
  a1[36] = v24;
  swift_retain();
  swift_retain();
LABEL_18:
  v36 = a2[41];
  if (v36 >> 2 == 0xFFFFFFFF)
  {
    v37 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 45) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 47) = v37;
    a1[49] = a2[49];
    v38 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 37) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 39) = v38;
    v39 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 43) = v39;
  }
  else
  {
    v40 = (void *)a2[37];
    v41 = a2[38];
    v42 = a2[39];
    v43 = a2[40];
    v45 = a2[42];
    v44 = a2[43];
    v46 = a2[44];
    v89 = a2[45];
    v90 = a2[46];
    v91 = a2[47];
    __dsta = (void *)a2[48];
    v95 = a2[49];
    outlined copy of PlatformItemList.Item.SystemItem(v40, v41, v42, v43, v36, v45, v44, v46, v89, v90, v91, (char)__dsta, v95);
    a1[37] = v40;
    a1[38] = v41;
    a1[39] = v42;
    a1[40] = v43;
    a1[41] = v36;
    a1[42] = v45;
    a1[43] = v44;
    a1[44] = v46;
    a1[45] = v89;
    a1[46] = v90;
    a1[47] = v91;
    a1[48] = __dsta;
    a1[49] = v95;
  }
  v47 = a2[51];
  if (v47 != 1)
  {
    *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
    *((_BYTE *)a1 + 404) = *((_BYTE *)a2 + 404);
    if (v47)
    {
      v50 = a2[52];
      a1[51] = v47;
      a1[52] = v50;
      swift_retain();
      v51 = a2[53];
      if (v51)
        goto LABEL_25;
    }
    else
    {
      *(_OWORD *)(a1 + 51) = *(_OWORD *)(a2 + 51);
      v51 = a2[53];
      if (v51)
      {
LABEL_25:
        v52 = a2[54];
        a1[53] = v51;
        a1[54] = v52;
        swift_retain();
        v53 = a2[55];
        if (v53)
        {
LABEL_26:
          v54 = a2[56];
          a1[55] = v53;
          a1[56] = v54;
          swift_retain();
LABEL_30:
          a1[57] = a2[57];
          *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
          goto LABEL_31;
        }
LABEL_29:
        *(_OWORD *)(a1 + 55) = *(_OWORD *)(a2 + 55);
        goto LABEL_30;
      }
    }
    *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
    v53 = a2[55];
    if (v53)
      goto LABEL_26;
    goto LABEL_29;
  }
  v48 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v48;
  *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
  v49 = *((_OWORD *)a2 + 26);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 26) = v49;
LABEL_31:
  v55 = a2[60];
  a1[59] = a2[59];
  a1[60] = v55;
  a1[61] = a2[61];
  *((_BYTE *)a1 + 496) = *((_BYTE *)a2 + 496);
  v56 = a2[63];
  swift_bridgeObjectRetain();
  if (v56)
  {
    v57 = a2[64];
    a1[63] = v56;
    a1[64] = v57;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
  }
  *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
  v58 = a2[66];
  if (v58)
  {
    a1[66] = v58;
    a1[67] = a2[67];
    a1[68] = a2[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    a1[68] = a2[68];
  }
  v59 = a2[69];
  if (v59 == 1)
  {
    *(_OWORD *)(a1 + 69) = *(_OWORD *)(a2 + 69);
    a1[71] = a2[71];
  }
  else
  {
    a1[69] = v59;
    v60 = a2[70];
    swift_retain();
    if (v60)
    {
      v61 = a2[71];
      a1[70] = v60;
      a1[71] = v61;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
    }
  }
  v62 = (void *)a2[72];
  a1[72] = v62;
  a1[73] = a2[73];
  a1[74] = a2[74];
  a1[75] = a2[75];
  a1[76] = a2[76];
  a1[77] = a2[77];
  a1[78] = a2[78];
  *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
  *((_BYTE *)a1 + 634) = *((_BYTE *)a2 + 634);
  v63 = v98[28];
  __dst = (char *)a1 + v63;
  v64 = (char *)a2 + v63;
  v65 = type metadata accessor for CommandOperation();
  v66 = *(_QWORD *)(v65 - 8);
  v96 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v66 + 48);
  v67 = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v96(v64, 1, v65))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
    memcpy(__dst, v64, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    v69 = v92;
    v70 = v98;
  }
  else
  {
    v97 = v66;
    *__dst = *v64;
    v71 = *(int *)(v65 + 20);
    v72 = &__dst[v71];
    v73 = &v64[v71];
    v74 = *(_QWORD *)&v64[v71];
    v75 = *(_QWORD *)&v64[v71 + 8];
    v76 = v65;
    v77 = v64[v71 + 16];
    outlined copy of Text.Storage(v74, v75, v77);
    *(_QWORD *)v72 = v74;
    *((_QWORD *)v72 + 1) = v75;
    v72[16] = v77;
    *((_QWORD *)v72 + 3) = *((_QWORD *)v73 + 3);
    v78 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v79 = &v72[v78];
    v80 = &v73[v78];
    v81 = type metadata accessor for UUID();
    v82 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v81 - 8) + 16);
    swift_bridgeObjectRetain();
    v82(v79, v80, v81);
    v83 = *(int *)(v76 + 24);
    v84 = &__dst[v83];
    v85 = &v64[v83];
    if (*v85)
    {
      v86 = v85[1];
      *v84 = *v85;
      v84[1] = v86;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v84 = *(_OWORD *)v85;
    }
    v69 = v92;
    v70 = v98;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v97 + 56))(__dst, 0, 1, v76);
  }
  *((_BYTE *)a1 + v70[29]) = *((_BYTE *)a2 + v70[29]);
  *((_BYTE *)a1 + v70[30]) = *((_BYTE *)a2 + v70[30]);
  *((_BYTE *)a1 + v70[31]) = *((_BYTE *)a2 + v70[31]);
  *((_BYTE *)a1 + v70[32]) = *((_BYTE *)a2 + v70[32]);
  *(_QWORD *)((char *)a1 + v70[33]) = *(_QWORD *)((char *)a2 + v70[33]);
  v87 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v69 + 56);
  swift_retain();
  v87(a1, 0, 1, v70);
LABEL_49:
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for TabContextMenuKey.Storage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _OWORD *v9;
  id *v10;
  unint64_t v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  id v24;
  int v25;
  int v26;
  id v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *v38;
  id v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  void (*v93)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  void (*v98)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int (*v104)(_BYTE *, uint64_t, uint64_t);
  uint64_t v105;
  void *__dsta;
  _BYTE *__dst;
  uint64_t v108;
  int *v109;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for TabContextMenuKey.Storage.Guts);
    type metadata accessor for TabContextMenuKey.Storage.Guts(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
LABEL_51:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    v4 = type metadata accessor for PlatformItemList.Item();
    v5 = *(_QWORD *)(v4 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_51;
    }
    v108 = v5;
    v109 = (int *)v4;
    v7 = (void *)*a2;
    *a1 = *a2;
    v8 = (void *)a2[1];
    a1[1] = v8;
    a1[2] = a2[2];
    a1[3] = a2[3];
    *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
    a1[5] = a2[5];
    a1[6] = a2[6];
    *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
    v9 = a1 + 8;
    v10 = (id *)(a2 + 8);
    v11 = a2[23];
    v12 = v7;
    v13 = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v11 >> 1 == 4294967294)
    {
      v14 = *(_OWORD *)v10;
      v15 = *((_OWORD *)a2 + 5);
      v16 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v16;
      *v9 = v14;
      *((_OWORD *)a1 + 5) = v15;
      v17 = *((_OWORD *)a2 + 8);
      v18 = *((_OWORD *)a2 + 9);
      v19 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v19;
      *((_OWORD *)a1 + 8) = v17;
      *((_OWORD *)a1 + 9) = v18;
      v20 = *((_OWORD *)a2 + 12);
      v21 = *((_OWORD *)a2 + 13);
      v22 = *((_OWORD *)a2 + 14);
      *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      *((_OWORD *)a1 + 13) = v21;
      *((_OWORD *)a1 + 14) = v22;
      *((_OWORD *)a1 + 12) = v20;
      if (a2[32])
      {
LABEL_8:
        a1[31] = a2[31];
        a1[32] = a2[32];
        v23 = (void *)a2[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v23 >= 2)
          v24 = v23;
        a1[33] = v23;
        v25 = *((_DWORD *)a2 + 68);
        *((_BYTE *)a1 + 276) = *((_BYTE *)a2 + 276);
        *((_DWORD *)a1 + 68) = v25;
        *((_BYTE *)a1 + 277) = *((_BYTE *)a2 + 277);
        *((_BYTE *)a1 + 278) = *((_BYTE *)a2 + 278);
        a1[35] = a2[35];
        a1[36] = a2[36];
        swift_retain();
        swift_retain();
LABEL_19:
        v42 = a2[41];
        if (v42 >> 2 == 0xFFFFFFFF)
        {
          v43 = *(_OWORD *)(a2 + 37);
          v44 = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 39) = *(_OWORD *)(a2 + 39);
          *(_OWORD *)(a1 + 41) = v44;
          *(_OWORD *)(a1 + 37) = v43;
          v45 = *(_OWORD *)(a2 + 43);
          v46 = *(_OWORD *)(a2 + 45);
          v47 = *(_OWORD *)(a2 + 47);
          a1[49] = a2[49];
          *(_OWORD *)(a1 + 45) = v46;
          *(_OWORD *)(a1 + 47) = v47;
          *(_OWORD *)(a1 + 43) = v45;
        }
        else
        {
          v48 = (void *)a2[37];
          v49 = a2[38];
          v50 = a2[39];
          v51 = a2[40];
          v53 = a2[42];
          v52 = a2[43];
          v54 = a2[44];
          v100 = a2[45];
          v101 = a2[46];
          v102 = a2[47];
          v103 = a2[48];
          __dsta = (void *)a2[49];
          outlined copy of PlatformItemList.Item.SystemItem(v48, v49, v50, v51, v42, v53, v52, v54, v100, v101, v102, v103, (uint64_t)__dsta);
          a1[37] = v48;
          a1[38] = v49;
          a1[39] = v50;
          a1[40] = v51;
          a1[41] = v42;
          a1[42] = v53;
          a1[43] = v52;
          a1[44] = v54;
          a1[45] = v100;
          a1[46] = v101;
          a1[47] = v102;
          a1[48] = v103;
          a1[49] = __dsta;
        }
        if (a2[51] == 1)
        {
          *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
          v55 = *((_OWORD *)a2 + 26);
          v56 = *((_OWORD *)a2 + 27);
          v57 = *((_OWORD *)a2 + 28);
          *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
          *((_OWORD *)a1 + 27) = v56;
          *((_OWORD *)a1 + 28) = v57;
          *((_OWORD *)a1 + 26) = v55;
          goto LABEL_32;
        }
        *((_BYTE *)a1 + 400) = *((_BYTE *)a2 + 400);
        *((_BYTE *)a1 + 401) = *((_BYTE *)a2 + 401);
        *((_BYTE *)a1 + 402) = *((_BYTE *)a2 + 402);
        *((_BYTE *)a1 + 403) = *((_BYTE *)a2 + 403);
        *((_BYTE *)a1 + 404) = *((_BYTE *)a2 + 404);
        v58 = a2[51];
        if (v58)
        {
          v59 = a2[52];
          a1[51] = v58;
          a1[52] = v59;
          swift_retain();
          v60 = a2[53];
          if (v60)
            goto LABEL_26;
        }
        else
        {
          *(_OWORD *)(a1 + 51) = *(_OWORD *)(a2 + 51);
          v60 = a2[53];
          if (v60)
          {
LABEL_26:
            v61 = a2[54];
            a1[53] = v60;
            a1[54] = v61;
            swift_retain();
            v62 = a2[55];
            if (v62)
            {
LABEL_27:
              v63 = a2[56];
              a1[55] = v62;
              a1[56] = v63;
              swift_retain();
LABEL_31:
              a1[57] = a2[57];
              *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
LABEL_32:
              a1[59] = a2[59];
              a1[60] = a2[60];
              a1[61] = a2[61];
              *((_BYTE *)a1 + 496) = *((_BYTE *)a2 + 496);
              v64 = a2[63];
              swift_bridgeObjectRetain();
              if (v64)
              {
                v65 = a2[64];
                a1[63] = v64;
                a1[64] = v65;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
              }
              *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
              v66 = a2[66];
              if (v66)
              {
                a1[66] = v66;
                a1[67] = a2[67];
                a1[68] = a2[68];
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                v67 = *((_OWORD *)a2 + 33);
                a1[68] = a2[68];
                *((_OWORD *)a1 + 33) = v67;
              }
              v68 = a2[69];
              if (v68 == 1)
              {
                v69 = a1 + 69;
                v70 = *(_OWORD *)(a2 + 69);
                a1[71] = a2[71];
              }
              else
              {
                a1[69] = v68;
                v71 = a2[70];
                swift_retain();
                if (v71)
                {
                  v72 = a2[71];
                  a1[70] = v71;
                  a1[71] = v72;
                  swift_retain();
LABEL_44:
                  v73 = (void *)a2[72];
                  a1[72] = v73;
                  a1[73] = a2[73];
                  a1[74] = a2[74];
                  a1[75] = a2[75];
                  a1[76] = a2[76];
                  a1[77] = a2[77];
                  a1[78] = a2[78];
                  *((_BYTE *)a1 + 632) = *((_BYTE *)a2 + 632);
                  *((_BYTE *)a1 + 633) = *((_BYTE *)a2 + 633);
                  *((_BYTE *)a1 + 634) = *((_BYTE *)a2 + 634);
                  v74 = v109[28];
                  __dst = (char *)a1 + v74;
                  v75 = (char *)a2 + v74;
                  v76 = type metadata accessor for CommandOperation();
                  v77 = *(_QWORD *)(v76 - 8);
                  v104 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v77 + 48);
                  v78 = v73;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v104(v75, 1, v76))
                  {
                    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
                    memcpy(__dst, v75, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
                    v80 = v109;
                    v81 = v108;
                  }
                  else
                  {
                    v105 = v77;
                    *__dst = *v75;
                    v82 = v76;
                    v83 = *(int *)(v76 + 20);
                    v84 = &__dst[v83];
                    v85 = &v75[v83];
                    v86 = *(_QWORD *)&v75[v83];
                    v87 = *(_QWORD *)&v75[v83 + 8];
                    v88 = v75[v83 + 16];
                    outlined copy of Text.Storage(v86, v87, v88);
                    *(_QWORD *)v84 = v86;
                    *((_QWORD *)v84 + 1) = v87;
                    v84[16] = v88;
                    *((_QWORD *)v84 + 3) = *((_QWORD *)v85 + 3);
                    v89 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    v90 = &v84[v89];
                    v91 = &v85[v89];
                    v92 = type metadata accessor for UUID();
                    v93 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v92 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v93(v90, v91, v92);
                    v94 = *(int *)(v82 + 24);
                    v95 = &__dst[v94];
                    v96 = &v75[v94];
                    if (*v96)
                    {
                      v97 = v96[1];
                      *v95 = *v96;
                      v95[1] = v97;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)v95 = *(_OWORD *)v96;
                    }
                    v80 = v109;
                    v81 = v108;
                    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v105 + 56))(__dst, 0, 1, v82);
                  }
                  *((_BYTE *)a1 + v80[29]) = *((_BYTE *)a2 + v80[29]);
                  *((_BYTE *)a1 + v80[30]) = *((_BYTE *)a2 + v80[30]);
                  *((_BYTE *)a1 + v80[31]) = *((_BYTE *)a2 + v80[31]);
                  *((_BYTE *)a1 + v80[32]) = *((_BYTE *)a2 + v80[32]);
                  *(_QWORD *)((char *)a1 + v80[33]) = *(_QWORD *)((char *)a2 + v80[33]);
                  v98 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v81 + 56);
                  swift_retain();
                  v98(a1, 0, 1, v80);
                  goto LABEL_51;
                }
                v69 = a1 + 70;
                v70 = *((_OWORD *)a2 + 35);
              }
              *v69 = v70;
              goto LABEL_44;
            }
LABEL_30:
            *(_OWORD *)(a1 + 55) = *(_OWORD *)(a2 + 55);
            goto LABEL_31;
          }
        }
        *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 53);
        v62 = a2[55];
        if (v62)
          goto LABEL_27;
        goto LABEL_30;
      }
    }
    else
    {
      v26 = *((unsigned __int8 *)a2 + 72);
      if (v26 == 255)
      {
        v28 = *v10;
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        *(_QWORD *)v9 = v28;
      }
      else
      {
        v27 = *v10;
        outlined copy of GraphicsImage.Contents(*v10, *((_BYTE *)a2 + 72));
        a1[8] = v27;
        *((_BYTE *)a1 + 72) = v26;
      }
      a1[10] = a2[10];
      *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
      *((_BYTE *)a1 + 104) = *((_BYTE *)a2 + 104);
      v29 = *(_OWORD *)((char *)a2 + 108);
      *((_BYTE *)a1 + 124) = *((_BYTE *)a2 + 124);
      *(_OWORD *)((char *)a1 + 108) = v29;
      v30 = *((_OWORD *)a2 + 8);
      v31 = *((_OWORD *)a2 + 9);
      *((_BYTE *)a1 + 160) = *((_BYTE *)a2 + 160);
      *((_OWORD *)a1 + 8) = v30;
      *((_OWORD *)a1 + 9) = v31;
      *((_BYTE *)a1 + 161) = *((_BYTE *)a2 + 161);
      *((_BYTE *)a1 + 162) = *((_BYTE *)a2 + 162);
      *((_BYTE *)a1 + 163) = *((_BYTE *)a2 + 163);
      v32 = a2[23];
      if (v32 >> 1 == 0xFFFFFFFF)
      {
        v33 = *(_OWORD *)(a2 + 23);
        *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
        *(_OWORD *)(a1 + 23) = v33;
      }
      else
      {
        v34 = a2[21];
        v35 = a2[22];
        v36 = a2[24];
        outlined copy of AccessibilityImageLabel(v34, v35, a2[23]);
        a1[21] = v34;
        a1[22] = v35;
        a1[23] = v32;
        a1[24] = v36;
      }
      a1[25] = a2[25];
      a1[26] = a2[26];
      *((_BYTE *)a1 + 216) = *((_BYTE *)a2 + 216);
      *((_BYTE *)a1 + 217) = *((_BYTE *)a2 + 217);
      v37 = *((_DWORD *)a2 + 55);
      *((_BYTE *)a1 + 224) = *((_BYTE *)a2 + 224);
      *((_DWORD *)a1 + 55) = v37;
      v38 = (void *)a2[29];
      a1[29] = v38;
      *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
      *((_BYTE *)a1 + 242) = *((_BYTE *)a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v39 = v38;
      if (a2[32])
        goto LABEL_8;
    }
    v40 = *(_OWORD *)(a2 + 31);
    v41 = *(_OWORD *)(a2 + 35);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 35) = v41;
    *(_OWORD *)(a1 + 31) = v40;
    goto LABEL_19;
  }
  return a1;
}

_OWORD *initializeWithTake for TabContextMenuKey.Storage(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _BYTE *v31;
  __int128 v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v42;
  uint64_t v43;

  v4 = type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v5 = (int *)type metadata accessor for PlatformItemList.Item();
    v6 = *((_QWORD *)v5 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v6 + 48))(a2, 1, v5))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      v9 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v9;
      *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
      v10 = a2[13];
      a1[12] = a2[12];
      a1[13] = v10;
      a1[14] = a2[14];
      *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      v11 = a2[9];
      a1[8] = a2[8];
      a1[9] = v11;
      v12 = a2[11];
      a1[10] = a2[10];
      a1[11] = v12;
      v13 = a2[5];
      a1[4] = a2[4];
      a1[5] = v13;
      v14 = a2[7];
      a1[6] = a2[6];
      a1[7] = v14;
      *(_OWORD *)((char *)a1 + 248) = *(_OWORD *)((char *)a2 + 248);
      v15 = *(_OWORD *)((char *)a2 + 280);
      *(_OWORD *)((char *)a1 + 264) = *(_OWORD *)((char *)a2 + 264);
      *(_OWORD *)((char *)a1 + 280) = v15;
      v16 = *(_OWORD *)((char *)a2 + 376);
      *(_OWORD *)((char *)a1 + 360) = *(_OWORD *)((char *)a2 + 360);
      *(_OWORD *)((char *)a1 + 376) = v16;
      *((_QWORD *)a1 + 49) = *((_QWORD *)a2 + 49);
      v17 = *(_OWORD *)((char *)a2 + 312);
      *(_OWORD *)((char *)a1 + 296) = *(_OWORD *)((char *)a2 + 296);
      *(_OWORD *)((char *)a1 + 312) = v17;
      v18 = *(_OWORD *)((char *)a2 + 344);
      *(_OWORD *)((char *)a1 + 328) = *(_OWORD *)((char *)a2 + 328);
      *(_OWORD *)((char *)a1 + 344) = v18;
      v19 = a2[28];
      a1[27] = a2[27];
      a1[28] = v19;
      *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
      v20 = a2[26];
      a1[25] = a2[25];
      a1[26] = v20;
      *(_OWORD *)((char *)a1 + 472) = *(_OWORD *)((char *)a2 + 472);
      *(_OWORD *)((char *)a1 + 481) = *(_OWORD *)((char *)a2 + 481);
      v21 = *((_QWORD *)a2 + 63);
      if (v21)
      {
        v22 = *((_QWORD *)a2 + 64);
        *((_QWORD *)a1 + 63) = v21;
        *((_QWORD *)a1 + 64) = v22;
      }
      else
      {
        *(_OWORD *)((char *)a1 + 504) = *(_OWORD *)((char *)a2 + 504);
      }
      *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
      a1[33] = a2[33];
      *((_QWORD *)a1 + 68) = *((_QWORD *)a2 + 68);
      *((_QWORD *)a1 + 71) = *((_QWORD *)a2 + 71);
      *(_OWORD *)((char *)a1 + 552) = *(_OWORD *)((char *)a2 + 552);
      *((_QWORD *)a1 + 72) = *((_QWORD *)a2 + 72);
      *(_OWORD *)((char *)a1 + 584) = *(_OWORD *)((char *)a2 + 584);
      *(_OWORD *)((char *)a1 + 600) = *(_OWORD *)((char *)a2 + 600);
      *((_QWORD *)a1 + 77) = *((_QWORD *)a2 + 77);
      *((_QWORD *)a1 + 78) = *((_QWORD *)a2 + 78);
      *((_BYTE *)a1 + 632) = *((_BYTE *)a2 + 632);
      *(_WORD *)((char *)a1 + 633) = *(_WORD *)((char *)a2 + 633);
      v23 = v5[28];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for CommandOperation();
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v43 = v6;
        *v24 = *v25;
        v29 = *(int *)(v26 + 20);
        v30 = &v24[v29];
        v31 = &v25[v29];
        v32 = *(_OWORD *)&v25[v29 + 16];
        *v30 = *(_OWORD *)&v25[v29];
        v30[1] = v32;
        v33 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v42 = (char *)v30 + v33;
        v34 = &v31[v33];
        v35 = type metadata accessor for UUID();
        (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v42, v34, v35);
        v36 = *(int *)(v26 + 24);
        v37 = &v24[v36];
        v38 = (uint64_t *)&v25[v36];
        v39 = *v38;
        if (*v38)
        {
          v40 = v38[1];
          *v37 = v39;
          v37[1] = v40;
        }
        else
        {
          *(_OWORD *)v37 = *(_OWORD *)v38;
        }
        v6 = v43;
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      *((_BYTE *)a1 + v5[29]) = *((_BYTE *)a2 + v5[29]);
      *((_BYTE *)a1 + v5[30]) = *((_BYTE *)a2 + v5[30]);
      *((_BYTE *)a1 + v5[31]) = *((_BYTE *)a2 + v5[31]);
      *((_BYTE *)a1 + v5[32]) = *((_BYTE *)a2 + v5[32]);
      *(_QWORD *)((char *)a1 + v5[33]) = *(_QWORD *)((char *)a2 + v5[33]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v6 + 56))(a1, 0, 1, v5);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *assignWithTake for TabContextMenuKey.Storage(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _BYTE *v31;
  __int128 v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v42;
  uint64_t v43;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for TabContextMenuKey.Storage.Guts);
    v4 = type metadata accessor for TabContextMenuKey.Storage.Guts(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v5 = (int *)type metadata accessor for PlatformItemList.Item();
      v6 = *((_QWORD *)v5 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v6 + 48))(a2, 1, v5))
      {
        type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        v9 = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = v9;
        *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
        v10 = a2[13];
        a1[12] = a2[12];
        a1[13] = v10;
        a1[14] = a2[14];
        *(_DWORD *)((char *)a1 + 239) = *(_DWORD *)((char *)a2 + 239);
        v11 = a2[9];
        a1[8] = a2[8];
        a1[9] = v11;
        v12 = a2[11];
        a1[10] = a2[10];
        a1[11] = v12;
        v13 = a2[5];
        a1[4] = a2[4];
        a1[5] = v13;
        v14 = a2[7];
        a1[6] = a2[6];
        a1[7] = v14;
        *(_OWORD *)((char *)a1 + 248) = *(_OWORD *)((char *)a2 + 248);
        v15 = *(_OWORD *)((char *)a2 + 280);
        *(_OWORD *)((char *)a1 + 264) = *(_OWORD *)((char *)a2 + 264);
        *(_OWORD *)((char *)a1 + 280) = v15;
        v16 = *(_OWORD *)((char *)a2 + 376);
        *(_OWORD *)((char *)a1 + 360) = *(_OWORD *)((char *)a2 + 360);
        *(_OWORD *)((char *)a1 + 376) = v16;
        *((_QWORD *)a1 + 49) = *((_QWORD *)a2 + 49);
        v17 = *(_OWORD *)((char *)a2 + 312);
        *(_OWORD *)((char *)a1 + 296) = *(_OWORD *)((char *)a2 + 296);
        *(_OWORD *)((char *)a1 + 312) = v17;
        v18 = *(_OWORD *)((char *)a2 + 344);
        *(_OWORD *)((char *)a1 + 328) = *(_OWORD *)((char *)a2 + 328);
        *(_OWORD *)((char *)a1 + 344) = v18;
        v19 = a2[28];
        a1[27] = a2[27];
        a1[28] = v19;
        *((_BYTE *)a1 + 464) = *((_BYTE *)a2 + 464);
        v20 = a2[26];
        a1[25] = a2[25];
        a1[26] = v20;
        *(_OWORD *)((char *)a1 + 472) = *(_OWORD *)((char *)a2 + 472);
        *(_OWORD *)((char *)a1 + 481) = *(_OWORD *)((char *)a2 + 481);
        v21 = *((_QWORD *)a2 + 63);
        if (v21)
        {
          v22 = *((_QWORD *)a2 + 64);
          *((_QWORD *)a1 + 63) = v21;
          *((_QWORD *)a1 + 64) = v22;
        }
        else
        {
          *(_OWORD *)((char *)a1 + 504) = *(_OWORD *)((char *)a2 + 504);
        }
        *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
        a1[33] = a2[33];
        *((_QWORD *)a1 + 68) = *((_QWORD *)a2 + 68);
        *((_QWORD *)a1 + 71) = *((_QWORD *)a2 + 71);
        *(_OWORD *)((char *)a1 + 552) = *(_OWORD *)((char *)a2 + 552);
        *((_QWORD *)a1 + 72) = *((_QWORD *)a2 + 72);
        *(_OWORD *)((char *)a1 + 584) = *(_OWORD *)((char *)a2 + 584);
        *(_OWORD *)((char *)a1 + 600) = *(_OWORD *)((char *)a2 + 600);
        *((_QWORD *)a1 + 77) = *((_QWORD *)a2 + 77);
        *((_QWORD *)a1 + 78) = *((_QWORD *)a2 + 78);
        *((_BYTE *)a1 + 632) = *((_BYTE *)a2 + 632);
        *(_WORD *)((char *)a1 + 633) = *(_WORD *)((char *)a2 + 633);
        v23 = v5[28];
        v24 = (char *)a1 + v23;
        v25 = (char *)a2 + v23;
        v26 = type metadata accessor for CommandOperation();
        v27 = *(_QWORD *)(v26 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          v43 = v6;
          *v24 = *v25;
          v29 = *(int *)(v26 + 20);
          v30 = &v24[v29];
          v31 = &v25[v29];
          v32 = *(_OWORD *)&v25[v29 + 16];
          *v30 = *(_OWORD *)&v25[v29];
          v30[1] = v32;
          v33 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v42 = (char *)v30 + v33;
          v34 = &v31[v33];
          v35 = type metadata accessor for UUID();
          (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v42, v34, v35);
          v36 = *(int *)(v26 + 24);
          v37 = &v24[v36];
          v38 = (uint64_t *)&v25[v36];
          v39 = *v38;
          if (*v38)
          {
            v40 = v38[1];
            *v37 = v39;
            v37[1] = v40;
          }
          else
          {
            *(_OWORD *)v37 = *(_OWORD *)v38;
          }
          v6 = v43;
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        *((_BYTE *)a1 + v5[29]) = *((_BYTE *)a2 + v5[29]);
        *((_BYTE *)a1 + v5[30]) = *((_BYTE *)a2 + v5[30]);
        *((_BYTE *)a1 + v5[31]) = *((_BYTE *)a2 + v5[31]);
        *((_BYTE *)a1 + v5[32]) = *((_BYTE *)a2 + v5[32]);
        *(_QWORD *)((char *)a1 + v5[33]) = *(_QWORD *)((char *)a2 + v5[33]);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v6 + 56))(a1, 0, 1, v5);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TabContextMenuKey.Storage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1877DCF98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TabContextMenuKey.Storage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1877DCFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabContextMenuKey.Storage.Guts(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for TabContextMenuKey.Storage()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TabContextMenuKey.Storage.Guts(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void protocol witness for TableColumnContent.tableColumnBody.getter in conformance <> _ConditionalContent<A, B>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for TableColumnContent.tableColumnBody.getter in conformance <A> A?()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for TableColumnContent.tableColumnBody.getter in conformance EmptyTableColumnContent<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t EnvironmentValues.tableColumnConfiguration.getter()
{
  lazy protocol witness table accessor for type TableColumnConfiguration.Key and conformance TableColumnConfiguration.Key();
  return EnvironmentValues.subscript.getter();
}

uint64_t TableColumnList.visitColumns<A>(applying:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  v7 = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16))(a1, &v7, a4, a6, a3, a5);
}

uint64_t static TableColumnContent._tableColumnCount(inputs:)(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t AssociatedTypeWitness;
  __int128 v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  v4 = a1[2];
  v5 = *((_DWORD *)a1 + 20);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = v2;
  v11 = v3;
  v12 = v4;
  v7 = *(_OWORD *)(a1 + 5);
  v13 = *(_OWORD *)(a1 + 3);
  v14 = v7;
  v15 = *(_OWORD *)(a1 + 7);
  v16 = a1[9];
  v17 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(&v10, AssociatedTypeWitness, AssociatedConformanceWitness);
}

{
  return static TableColumnContent._tableColumnCount(inputs:)(a1);
}

uint64_t specialized static TableColumnContent<>._makeContent(content:inputs:)(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;

  type metadata accessor for _GraphValue<Never>();
  v3 = _GraphValue.value.getter();
  v4 = MEMORY[0x1E0DEDCE8];
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Focus<Never, Never>, v4, v4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CFECD8]);
  lazy protocol witness table accessor for type Focus<Never, Never> and conformance Focus<A, B>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  return specialized static TableColumnContent<>._makeContent(content:inputs:)(v3, a2);
}

uint64_t static TableColumnContent<>._makeContent(content:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  __int128 v19;
  __int128 v20;
  int v21;
  int v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v21 = *((_DWORD *)a2 + 20);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  LODWORD(v29) = v7;
  type metadata accessor for _GraphValue();
  v12 = a2[3];
  v13 = a2[4];
  v19 = *(_OWORD *)(a2 + 7);
  v20 = *(_OWORD *)(a2 + 5);
  v14 = a2[9];
  v27 = a3;
  v28 = a4;
  LODWORD(v29) = _GraphValue.value.getter();
  KeyPath = swift_getKeyPath();
  v24 = AssociatedTypeWitness;
  v25 = type metadata accessor for Focus();
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE8], v25);
  v15 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v23, v25, MEMORY[0x1E0DEDCE8], v15, MEMORY[0x1E0DEDD18], v16);
  swift_release();
  swift_release();
  _GraphValue.init(_:)();
  v29 = v8;
  LODWORD(KeyPath) = v9;
  v31 = v10;
  v32 = v12;
  v33 = v13;
  v34 = v20;
  v35 = v19;
  v36 = v14;
  v37 = v21;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(&v22, &v29, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t sub_1877DD624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 56))(*(_QWORD *)(a3 + a2 - 16));
}

uint64_t sub_1877DD654()
{
  return 16;
}

__n128 sub_1877DD660(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t static Never._tableColumnCount(inputs:)()
{
  return 0;
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance Never(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static TableColumnContent<>._makeContent(content:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance TableColumnDescriptor()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance TableColumnDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  static TableColumnDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance TableColumnDescriptor())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t TableColumnListKey.ConcatenatedTableColumnList.count.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain();
    v3 = 0;
    while (1)
    {
      outlined init with copy of TableColumnList(v2, (uint64_t)v8);
      v4 = v9;
      v5 = v10;
      __swift_project_boxed_opaque_existential_1(v8, v9);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      v7 = __OFADD__(v3, result);
      v3 += result;
      if (v7)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      v2 += 40;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t TableColumnListKey.ConcatenatedTableColumnList.visitColumns<A>(applying:from:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return 1;
  v9 = a3 + 32;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    outlined init with copy of TableColumnList(v9, (uint64_t)v22);
    v11 = v23;
    v12 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    v14 = v10 + result;
    if (__OFADD__(v10, result))
      break;
    v15 = *a2;
    if (*a2 < v14)
    {
      v16 = __OFSUB__(v15, v10);
      v17 = v15 - v10;
      if (v16)
        goto LABEL_13;
      v21 = v17 & ~(v17 >> 63);
      v18 = v23;
      v19 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 16))(a1, &v21, a4, a5, v18, v19) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        return 0;
      }
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v9 += 40;
    v10 = v14;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t protocol witness for TableColumnList.count.getter in conformance TableColumnListKey.ConcatenatedTableColumnList()
{
  uint64_t *v0;

  return TableColumnListKey.ConcatenatedTableColumnList.count.getter(*v0);
}

uint64_t protocol witness for TableColumnList.visitColumns<A>(applying:from:) in conformance TableColumnListKey.ConcatenatedTableColumnList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return TableColumnListKey.ConcatenatedTableColumnList.visitColumns<A>(applying:from:)(a1, a2, *v4, a3, a4);
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance TableColumnListKey(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &unk_1E1ACBF58;
  *(_QWORD *)(a1 + 32) = &protocol witness table for TableColumnListKey.EmptyTableColumnList;
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance TableColumnListKey(uint64_t a1, void (*a2)(_QWORD *__return_ptr, uint64_t))
{
  uint64_t v4;
  _QWORD *result;
  _QWORD v6[5];
  _BYTE v7[40];

  v4 = outlined init with take of OptionalBinaryInteger((__int128 *)a1, (uint64_t)v7);
  a2(v6, v4);
  result = specialized TableColumnListKey.ConcatenatedTableColumnList.init(_:_:)((uint64_t)v7, (uint64_t)v6);
  *(_QWORD *)(a1 + 24) = &unk_1E1ACBF10;
  *(_QWORD *)(a1 + 32) = &protocol witness table for TableColumnListKey.ConcatenatedTableColumnList;
  *(_QWORD *)a1 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnID()
{
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnID()
{
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  return Hasher._finalize()();
}

void AnyTableColumnIDs.startIndex.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTableColumnIDs.endIndex.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTableColumnIDs.subscript.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Int __swiftcall AnyTableColumnIDs.index(before:)(Swift::Int before)
{
  Swift::Int result;

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int __swiftcall AnyTableColumnIDs.index(after:)(Swift::Int after)
{
  Swift::Int result;

  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AnyTableColumnIDs@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v2 + 112))(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance AnyTableColumnIDs(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 112))(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance AnyTableColumnIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 88))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance AnyTableColumnIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 96))();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AnyTableColumnIDs(void **a1, _QWORD *a2))(uint64_t *a1)
{
  uint64_t v2;

  *a1 = malloc(0x28uLL);
  (*(void (**)(_QWORD))(**(_QWORD **)v2 + 104))(*a2);
  return protocol witness for Collection.subscript.read in conformance AnyTableColumnIDs;
}

void protocol witness for Collection.subscript.read in conformance AnyTableColumnIDs(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  outlined destroy of AccessibilityRelationshipScope.Key(*a1);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AnyTableColumnIDs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *v2;
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 88))();
  result = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 96))();
  if (result < v7)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v4 < v7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= v5)
  {
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v6;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance AnyTableColumnIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 88))();
  result = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 96))();
  if (result < v4)
  {
    __break(1u);
  }
  else
  {
    *a1 = v4;
    a1[1] = result;
  }
  return result;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance AnyTableColumnIDs@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    v6 = *v3;
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 88))();
    result = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 96))();
    if (v5 >= v7 && (uint64_t)result >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance AnyTableColumnIDs@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance AnyTableColumnIDs(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t result;
  uint64_t v11;

  v3 = *a1;
  v4 = *a2;
  v5 = *v2;
  v6 = *(uint64_t (**)(void))(*(_QWORD *)v5 + 88);
  v7 = v6();
  v8 = *(uint64_t (**)(void))(*(_QWORD *)v5 + 96);
  result = v8();
  if (v3 < v7 || result < v3)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v11 = ((uint64_t (*)(uint64_t))v6)(result);
  result = v8();
  if (v4 < v11 || result < v4)
    goto LABEL_12;
  result = v4 - v3;
  if (__OFSUB__(v4, v3))
LABEL_13:
    __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance AnyTableColumnIDs@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v2 + 120))(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AnyTableColumnIDs(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 120))(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AnyTableColumnIDs@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *v1;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88);
  v5 = swift_retain();
  v6 = v4(v5);
  result = swift_release();
  *a1 = v3;
  a1[1] = v6;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AnyTableColumnIDs(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyTableColumnIDs, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnyTableColumnIDs()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AnyTableColumnIDs(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AnyTableColumnIDs()
{
  type metadata accessor for AnyTableColumnIDs();
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t WrappedTableColumnIDs.startIndex.getter(uint64_t a1, uint64_t a2)
{
  return WrappedTableColumnIDs.startIndex.getter((void (*)(uint64_t *__return_ptr, uint64_t, _QWORD))MEMORY[0x1E0DEB528], a2);
}

uint64_t WrappedTableColumnIDs.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return WrappedTableColumnIDs.startIndex.getter((void (*)(uint64_t *__return_ptr, uint64_t, _QWORD))MEMORY[0x1E0DEB5A8], a2);
}

uint64_t WrappedTableColumnIDs.startIndex.getter(void (*a1)(uint64_t *__return_ptr, uint64_t, _QWORD), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 128);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, (uint64_t)v2 + *(_QWORD *)(v4 + 144), v5);
  a1(&v11, v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 8) + 8));
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v11;
}

uint64_t WrappedTableColumnIDs.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  _BYTE v16[32];
  uint64_t v17;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 128);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, (uint64_t)v3 + *(_QWORD *)(v6 + 144), v7, v9);
  v17 = a1;
  v12 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  outlined init with copy of DropInfo(v13, a3);
  v12(v16, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

Swift::Int __swiftcall WrappedTableColumnIDs.index(before:)(Swift::Int before)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 128);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((double (*)(Swift::Int))MEMORY[0x1E0C80A78])(before);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, (uint64_t)v1 + *(_QWORD *)(v3 + 144), v4, v6);
  v10[0] = before;
  dispatch thunk of BidirectionalCollection.index(before:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10[1];
}

Swift::Int __swiftcall WrappedTableColumnIDs.index(after:)(Swift::Int after)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 128);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((double (*)(Swift::Int))MEMORY[0x1E0C80A78])(after);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, (uint64_t)v1 + *(_QWORD *)(v3 + 144), v4, v6);
  v10[0] = after;
  dispatch thunk of Collection.index(after:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10[1];
}

uint64_t WrappedTableColumnIDs.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 128) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144));
}

uint64_t WrappedTableColumnIDs.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 128) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_deallocClassInstance();
}

uint64_t TableColumnList.visitAll<A>(applying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(a1, &v6, a3, a5, a2, a4);
}

uint64_t static TableColumnConfiguration.Key.value(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t (*v7)(void);
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  if (*(_QWORD *)(a1 + 8))
  {
    v3 = MEMORY[0x1E0CE53E0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDefaultVisibilityKey>, (uint64_t)&type metadata for TableColumnDefaultVisibilityKey, (uint64_t)&protocol witness table for TableColumnDefaultVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnDefaultVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDefaultVisibilityKey>, (uint64_t)&type metadata for TableColumnDefaultVisibilityKey, (uint64_t)&protocol witness table for TableColumnDefaultVisibilityKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
    swift_release();
    v11 = v14;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnCustomizationIDKey>, (uint64_t)&type metadata for TableColumnCustomizationIDKey, (uint64_t)&protocol witness table for TableColumnCustomizationIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v3);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnCustomizationIDKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnCustomizationIDKey>, (uint64_t)&type metadata for TableColumnCustomizationIDKey, (uint64_t)&protocol witness table for TableColumnCustomizationIDKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    v4 = v16;
    v9 = v15;
    v10 = v14;
    v5 = v17;
    v6 = v18;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey>, (uint64_t)&type metadata for TableColumnDisabledCustomizationBehaviorKey, (uint64_t)&protocol witness table for TableColumnDisabledCustomizationBehaviorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v3);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey>, (uint64_t)&type metadata for TableColumnDisabledCustomizationBehaviorKey, (uint64_t)&protocol witness table for TableColumnDisabledCustomizationBehaviorKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    v7 = MEMORY[0x1E0CE53E0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDefaultVisibilityKey>, (uint64_t)&type metadata for TableColumnDefaultVisibilityKey, (uint64_t)&protocol witness table for TableColumnDefaultVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnDefaultVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDefaultVisibilityKey>, (uint64_t)&type metadata for TableColumnDefaultVisibilityKey, (uint64_t)&protocol witness table for TableColumnDefaultVisibilityKey);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release();
    v11 = v14;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnCustomizationIDKey>, (uint64_t)&type metadata for TableColumnCustomizationIDKey, (uint64_t)&protocol witness table for TableColumnCustomizationIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v7);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnCustomizationIDKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnCustomizationIDKey>, (uint64_t)&type metadata for TableColumnCustomizationIDKey, (uint64_t)&protocol witness table for TableColumnCustomizationIDKey);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    v4 = v16;
    v9 = v15;
    v10 = v14;
    v5 = v17;
    v6 = v18;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey>, (uint64_t)&type metadata for TableColumnDisabledCustomizationBehaviorKey, (uint64_t)&protocol witness table for TableColumnDisabledCustomizationBehaviorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v7);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnDisabledCustomizationBehaviorKey>, (uint64_t)&type metadata for TableColumnDisabledCustomizationBehaviorKey, (uint64_t)&protocol witness table for TableColumnDisabledCustomizationBehaviorKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  lazy protocol witness table accessor for type TableColumnAlignment.Resolved.Key and conformance TableColumnAlignment.Resolved.Key();
  swift_retain();
  swift_retain();
  EnvironmentValues.subscript.getter();
  lazy protocol witness table accessor for type TableColumnAlignment.Resolved.TextAlignmentKey and conformance TableColumnAlignment.Resolved.TextAlignmentKey();
  EnvironmentValues.subscript.getter();
  swift_release();
  result = swift_release();
  *(_BYTE *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v5;
  *(_BYTE *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v13;
  *(_BYTE *)(a2 + 56) = v12;
  *(_BYTE *)(a2 + 57) = v12;
  return result;
}

void protocol witness for TableColumnContent.tableColumnBody.getter in conformance TupleTableColumnContent<A, B, C>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for TableColumnContent.tableColumnBody.getter in conformance <A> Group<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_UNKNOWN **associated type witness table accessor for TableColumnContent.TableColumnBody : TableColumnContent in Never()
{
  return &protocol witness table for Never;
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in Never()
{
  return MEMORY[0x1E0CB2698];
}

uint64_t associated type witness table accessor for TableColumnContent.TableRowValue : Identifiable in Never()
{
  return MEMORY[0x1E0DEDD10];
}

uint64_t default associated conformance accessor for TableColumnContent.TableColumnContent.TableColumnSortComparator: SortComparator()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t default associated conformance accessor for TableColumnContent.TableColumnContent.TableRowValue: Identifiable()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t dispatch thunk of TableColumnContent.tableColumnBody.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of static TableColumnContent._makeContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of static TableColumnContent._tableColumnCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t initializeWithCopy for _TableColumnInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _TableColumnInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy84_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _TableColumnInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TableColumnInputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 84))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _TableColumnInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 84) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 84) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _TableColumnInputs()
{
  return &type metadata for _TableColumnInputs;
}

ValueMetadata *type metadata accessor for _TableColumnOutputs()
{
  return &type metadata for _TableColumnOutputs;
}

void type metadata accessor for TableColumnBuilder()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for AnyTableColumnIDs()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for WrappedTableColumnIDs()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for WrappedTableColumnIDs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WrappedTableColumnIDs);
}

ValueMetadata *type metadata accessor for TableColumnID()
{
  return &type metadata for TableColumnID;
}

ValueMetadata *type metadata accessor for TableColumnDescriptor()
{
  return &type metadata for TableColumnDescriptor;
}

ValueMetadata *type metadata accessor for TableColumnListKey()
{
  return &type metadata for TableColumnListKey;
}

unint64_t lazy protocol witness table accessor for type TableColumnID and conformance TableColumnID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnID and conformance TableColumnID;
  if (!lazy protocol witness table cache variable for type TableColumnID and conformance TableColumnID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnID, &type metadata for TableColumnID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnID and conformance TableColumnID);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AnyTableColumnIDs()
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type IndexingIterator<AnyTableColumnIDs> and conformance IndexingIterator<A>, 255, (uint64_t (*)(uint64_t))type metadata accessor for IndexingIterator<AnyTableColumnIDs>, MEMORY[0x1E0DEC908]);
}

void type metadata accessor for IndexingIterator<AnyTableColumnIDs>(uint64_t a1)
{
  type metadata accessor for IndexingIterator<AnyTableColumnIDs>(a1, &lazy cache variable for type metadata for IndexingIterator<AnyTableColumnIDs>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
}

uint64_t base witness table accessor for Sequence in AnyTableColumnIDs(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type AnyTableColumnIDs and conformance AnyTableColumnIDs, a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyTableColumnIDs, (uint64_t)&protocol conformance descriptor for AnyTableColumnIDs);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AnyTableColumnIDs()
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type Slice<AnyTableColumnIDs> and conformance Slice<A>, 255, (uint64_t (*)(uint64_t))type metadata accessor for Slice<AnyTableColumnIDs>, MEMORY[0x1E0DEDE48]);
}

void type metadata accessor for Slice<AnyTableColumnIDs>(uint64_t a1)
{
  type metadata accessor for IndexingIterator<AnyTableColumnIDs>(a1, &lazy cache variable for type metadata for Slice<AnyTableColumnIDs>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
}

void type metadata accessor for IndexingIterator<AnyTableColumnIDs>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v6 = type metadata accessor for AnyTableColumnIDs();
    v8 = lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type AnyTableColumnIDs and conformance AnyTableColumnIDs, v7, (uint64_t (*)(uint64_t))type metadata accessor for AnyTableColumnIDs, (uint64_t)&protocol conformance descriptor for AnyTableColumnIDs);
    v9 = a3(a1, v6, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t base witness table accessor for Collection in AnyTableColumnIDs(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type AnyTableColumnIDs and conformance AnyTableColumnIDs, a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyTableColumnIDs, (uint64_t)&protocol conformance descriptor for AnyTableColumnIDs);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AnyTableColumnIDs()
{
  return lazy protocol witness table accessor for type Slice<AnyTableColumnIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyTableColumnIDs> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyTableColumnIDs and conformance AnyTableColumnIDs, MEMORY[0x1E0DEDE28]);
}

uint64_t lazy protocol witness table accessor for type AnyTableColumnIDs and conformance AnyTableColumnIDs(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type AnyTableColumnIDs and conformance AnyTableColumnIDs, a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyTableColumnIDs, (uint64_t)&protocol conformance descriptor for AnyTableColumnIDs);
}

{
  return lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type AnyTableColumnIDs and conformance AnyTableColumnIDs, a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyTableColumnIDs, (uint64_t)&protocol conformance descriptor for AnyTableColumnIDs);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in AnyTableColumnIDs()
{
  return lazy protocol witness table accessor for type Slice<AnyTableColumnIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyTableColumnIDs> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyTableColumnIDs and conformance AnyTableColumnIDs, MEMORY[0x1E0DEDE40]);
}

uint64_t lazy protocol witness table accessor for type Slice<AnyTableColumnIDs> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<AnyTableColumnIDs>(255);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnDescriptor and conformance TableColumnDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnDescriptor and conformance TableColumnDescriptor;
  if (!lazy protocol witness table cache variable for type TableColumnDescriptor and conformance TableColumnDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnDescriptor, &type metadata for TableColumnDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnDescriptor and conformance TableColumnDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnDescriptor and conformance TableColumnDescriptor;
  if (!lazy protocol witness table cache variable for type TableColumnDescriptor and conformance TableColumnDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnDescriptor, &type metadata for TableColumnDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnDescriptor and conformance TableColumnDescriptor);
  }
  return result;
}

BOOL specialized static TableColumnConfiguration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  char v24;
  _BOOL8 result;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  char v40;

  if (*a1 != *a2)
    return 0;
  v3 = *((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3);
  v5 = *((_QWORD *)a1 + 4);
  v6 = a1[40];
  v7 = *((_QWORD *)a1 + 6);
  v8 = a1[56];
  v9 = a1[57];
  v11 = *((_QWORD *)a2 + 1);
  v10 = *((_QWORD *)a2 + 2);
  v12 = *((_QWORD *)a2 + 3);
  v13 = *((_QWORD *)a2 + 4);
  v14 = a2[40];
  v15 = *((_QWORD *)a2 + 6);
  v16 = a2[56];
  v17 = a2[57];
  if (v6 == 255)
  {
    if (v14 == 255)
      goto LABEL_22;
LABEL_13:
    outlined copy of TableColumnCustomizationID?(*((_QWORD *)a1 + 1), v2, v4, v5, v6);
    outlined copy of TableColumnCustomizationID?(v11, v10, v12, v13, v14);
    outlined consume of TableColumnCustomizationID?(v3, v2, v4, v5, v6);
    outlined consume of TableColumnCustomizationID?(v11, v10, v12, v13, v14);
    return 0;
  }
  if (v14 == 255)
    goto LABEL_13;
  if ((v6 & 1) == 0)
  {
    if ((v14 & 1) == 0)
    {
      if (v3 != v11 || v2 != v10)
      {
        v18 = *((_QWORD *)a2 + 6);
        v19 = a2[56];
        v20 = *((_QWORD *)a1 + 6);
        v21 = a2[57];
        v22 = a1[56];
        v23 = a1[57];
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = 0;
        if ((v24 & 1) == 0)
          return result;
        if (v20 != v18)
          return result;
        v9 = v23;
        v17 = v21;
        if (v22 != v19)
          return result;
        return v9 == v17;
      }
      goto LABEL_22;
    }
    return 0;
  }
  if ((v14 & 1) == 0)
    return 0;
  if (v3 != v11 || v2 != v10)
  {
    v26 = a1[57];
    v27 = a1[56];
    v28 = a2[57];
    v29 = *((_QWORD *)a1 + 6);
    v30 = a2[56];
    v31 = *((_QWORD *)a2 + 6);
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v15 = v31;
    v16 = v30;
    v7 = v29;
    v17 = v28;
    v8 = v27;
    v9 = v26;
    v33 = v32;
    result = 0;
    if ((v33 & 1) == 0)
      return result;
  }
  if (v4 != v12 || v5 != v13)
  {
    v34 = v15;
    v35 = v16;
    v36 = v7;
    v37 = v17;
    v38 = v8;
    v39 = v9;
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v40 & 1) != 0 && v36 == v34)
    {
      v9 = v39;
      v17 = v37;
      if (v38 == v35)
        return v9 == v17;
    }
    return result;
  }
LABEL_22:
  result = 0;
  if (v7 == v15 && v8 == v16)
    return v9 == v17;
  return result;
}

_QWORD *specialized TableColumnListKey.ConcatenatedTableColumnList.init(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  __int128 v10[2];
  _QWORD *v11;

  outlined init with copy of TableColumnList(a1, (uint64_t)v10);
  type metadata accessor for TableColumnList();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v4 = (uint64_t)v11;
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage<TableColumnList>();
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_187BF9830;
    outlined init with copy of TableColumnList(a1, v4 + 32);
  }
  v11 = (_QWORD *)v4;
  outlined init with copy of TableColumnList(a2, (uint64_t)v10);
  if ((swift_dynamicCast() & 1) != 0)
  {
    specialized Array.append<A>(contentsOf:)(v9);
    __swift_destroy_boxed_opaque_existential_1(a2);
    __swift_destroy_boxed_opaque_existential_1(a1);
    return v11;
  }
  else
  {
    outlined init with copy of TableColumnList(a2, (uint64_t)v10);
    v5 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v7 = v5[2];
    v6 = v5[3];
    if (v7 >= v6 >> 1)
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
    v5[2] = v7 + 1;
    outlined init with take of OptionalBinaryInteger(v10, (uint64_t)&v5[5 * v7 + 4]);
    __swift_destroy_boxed_opaque_existential_1(a2);
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return v5;
}

void type metadata accessor for _ContiguousArrayStorage<TableColumnList>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<TableColumnList>)
  {
    type metadata accessor for TableColumnList();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TableColumnList>);
  }
}

void type metadata accessor for _GraphValue<Never>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<Never>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Never>);
  }
}

ValueMetadata *type metadata accessor for TableColumnConfiguration.Key()
{
  return &type metadata for TableColumnConfiguration.Key;
}

uint64_t destroy for TableColumnConfiguration(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 40);
  if (v1 != 255)
    return outlined consume of TableColumnCustomizationID.Base(*(_QWORD *)(result + 8), *(_QWORD *)(result + 16), *(_QWORD *)(result + 24), *(_QWORD *)(result + 32), v1 & 1);
  return result;
}

uint64_t initializeWithCopy for TableColumnConfiguration(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(unsigned __int8 *)(a2 + 40);
  if (v4 == 255)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  else
  {
    v6 = v4 & 1;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 32);
    outlined copy of TableColumnCustomizationID.Base(v7, v8, v9, v10, v4 & 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    *(_BYTE *)(a1 + 40) = v6;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for TableColumnConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  int v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v6 == 255)
    {
      v9 = *v5;
      v10 = *(_OWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_OWORD *)v4 = v9;
      *(_OWORD *)(a1 + 24) = v10;
    }
    else
    {
      v21 = v6 & 1;
      v22 = *(_QWORD *)(a2 + 8);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      outlined copy of TableColumnCustomizationID.Base(v22, v23, v24, v25, v6 & 1);
      *(_QWORD *)(a1 + 8) = v22;
      *(_QWORD *)(a1 + 16) = v23;
      *(_QWORD *)(a1 + 24) = v24;
      *(_QWORD *)(a1 + 32) = v25;
      *(_BYTE *)(a1 + 40) = v21;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of TableColumnCustomizationID(a1 + 8);
    v7 = *((_BYTE *)v5 + 32);
    v8 = v5[1];
    *(_OWORD *)v4 = *v5;
    *(_OWORD *)(v4 + 16) = v8;
    *(_BYTE *)(v4 + 32) = v7;
  }
  else
  {
    v11 = v6 & 1;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 24);
    v15 = *(_QWORD *)(a2 + 32);
    outlined copy of TableColumnCustomizationID.Base(v12, v13, v14, v15, v6 & 1);
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 32);
    v20 = *(_BYTE *)(a1 + 40);
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = v14;
    *(_QWORD *)(a1 + 32) = v15;
    *(_BYTE *)(a1 + 40) = v11;
    outlined consume of TableColumnCustomizationID.Base(v16, v17, v18, v19, v20);
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t assignWithTake for TableColumnConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 8;
  v5 = a2 + 8;
  v6 = *(unsigned __int8 *)(a1 + 40);
  if (v6 != 255)
  {
    v7 = *(unsigned __int8 *)(a2 + 40);
    if (v7 != 255)
    {
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 40) = v7 & 1;
      outlined consume of TableColumnCustomizationID.Base(v9, v10, v11, v12, v6 & 1);
      goto LABEL_6;
    }
    outlined destroy of TableColumnCustomizationID(a1 + 8);
  }
  v8 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 16) = v8;
  *(_BYTE *)(v4 + 32) = *(_BYTE *)(v5 + 32);
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[58])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TableColumnConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 58) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnConfiguration()
{
  return &type metadata for TableColumnConfiguration;
}

void *type metadata accessor for TableColumnListKey.EmptyTableColumnList()
{
  return &unk_1E1ACBF58;
}

void *type metadata accessor for TableColumnListKey.ConcatenatedTableColumnList()
{
  return &unk_1E1ACBF10;
}

unint64_t lazy protocol witness table accessor for type TableColumnConfiguration and conformance TableColumnConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnConfiguration and conformance TableColumnConfiguration;
  if (!lazy protocol witness table cache variable for type TableColumnConfiguration and conformance TableColumnConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnConfiguration, &type metadata for TableColumnConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnConfiguration and conformance TableColumnConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnAlignment.Resolved.Key and conformance TableColumnAlignment.Resolved.Key()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnAlignment.Resolved.Key and conformance TableColumnAlignment.Resolved.Key;
  if (!lazy protocol witness table cache variable for type TableColumnAlignment.Resolved.Key and conformance TableColumnAlignment.Resolved.Key)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnAlignment.Resolved.Key, &type metadata for TableColumnAlignment.Resolved.Key);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnAlignment.Resolved.Key and conformance TableColumnAlignment.Resolved.Key);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableColumnAlignment.Resolved.TextAlignmentKey and conformance TableColumnAlignment.Resolved.TextAlignmentKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableColumnAlignment.Resolved.TextAlignmentKey and conformance TableColumnAlignment.Resolved.TextAlignmentKey;
  if (!lazy protocol witness table cache variable for type TableColumnAlignment.Resolved.TextAlignmentKey and conformance TableColumnAlignment.Resolved.TextAlignmentKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnAlignment.Resolved.TextAlignmentKey, &type metadata for TableColumnAlignment.Resolved.TextAlignmentKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnAlignment.Resolved.TextAlignmentKey and conformance TableColumnAlignment.Resolved.TextAlignmentKey);
  }
  return result;
}

void TabSection.init(header:content:footer:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TabSection();
}

uint64_t sub_1877DFB70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5 + *(int *)(a1 + 52), v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + *(int *)(a1 + 56), v3, v1);
}

void TabSection<>._identifiedView.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;

  v6 = v5;
  v24[0] = a4;
  v24[1] = a3;
  v24[2] = a2;
  v25 = a5;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 24);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v18 + 16);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)v24 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v6, v19, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v6 + *(int *)(a1 + 52), v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v6 + *(int *)(a1 + 56), v8);
  TabSection<>.TabSectionView.init(namespace:header:content:footer:)(0, v25);
}

void TabSection<>.TabSectionView.init(namespace:header:content:footer:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for TabSection<>.TabSectionView();
}

uint64_t sub_1877DFD94(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v7 + a1[19], v6, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v7 + a1[20], v5, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v7 + a1[21], v4, v1);
}

void TabSection<>.TabSectionView.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[3];

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v10[0] = *(_QWORD *)(a1 + 48);
  v10[1] = &protocol witness table for UpdateDefaultTabFill;
  v6 = MEMORY[0x1E0CE2E70];
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v10);
  v9[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v8[0] = MEMORY[0x18D75FFDC](v6, v3, v9);
  v8[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v7[0] = MEMORY[0x18D75FFDC](v6, v4, v8);
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  MEMORY[0x18D75FFDC](v6, v5, v7);
  type metadata accessor for PlatformItemTraitWriter();
}

void sub_1877DFFA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>(255);
  type metadata accessor for ModifiedContent();
  v3 = MEMORY[0x1E0CE52D0];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsSectionHeaderTraitKey>, MEMORY[0x1E0CE5A98], MEMORY[0x1E0CE5A88], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SectionHeaderStyleContext>, MEMORY[0x1E0CE5EB8], MEMORY[0x1E0CE5EA8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  type metadata accessor for ModifiedContent();
  v0[2] = v1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for TagValueTraitKey();
  v6 = MEMORY[0x1E0CE3440];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v5);
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for Optional();
  *(_QWORD *)(v2 - 208) = AssociatedConformanceWitness;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v7, v2 - 208);
  v8 = type metadata accessor for TagValueTraitKey();
  MEMORY[0x18D75FFDC](v6, v8);
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  v0[1] = *(_QWORD *)(v1 + 32);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsCompactTabRepresentationTraitKey>, (uint64_t)&type metadata for IsCompactTabRepresentationTraitKey, (uint64_t)&protocol witness table for IsCompactTabRepresentationTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  v9 = v0[9];
  swift_getTupleTypeMetadata3();
  v10 = type metadata accessor for TupleView();
  v11 = type metadata accessor for Group();
  *(_QWORD *)(v2 - 216) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v10);
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v11, v2 - 216);
  *(_QWORD *)(v2 - 200) = v11;
  *(_QWORD *)(v2 - 192) = &type metadata for TabSectionIdentifiersTraitKey;
  *(_QWORD *)(v2 - 184) = v12;
  *(_QWORD *)(v2 - 176) = &protocol witness table for TabSectionIdentifiersTraitKey;
  MEMORY[0x18D75FF88](255, v2 - 200, MEMORY[0x1E0CE6E38], 0);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StyleContextWriter<TabSectionStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionStyleContext and conformance TabSectionStyleContext, (uint64_t)&type metadata for TabSectionStyleContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v13 = type metadata accessor for ModifiedContent();
  v14 = lazy protocol witness table accessor for type InAdaptableTabViewContext and conformance InAdaptableTabViewContext();
  *(_QWORD *)(v2 - 200) = &type metadata for InAdaptableTabViewContext;
  *(_QWORD *)(v2 - 192) = v13;
  *(_QWORD *)(v2 - 184) = v9;
  *(_QWORD *)(v2 - 176) = v14;
  type metadata accessor for StaticIf();
}

void sub_1877E02C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t OpaqueTypeConformance2;
  unint64_t v19;

  *v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = v2[5];
  v11 = v2[6];
  v13 = v2[3];
  v12 = v2[4];
  v2[22] = v10;
  v2[23] = v13;
  v15 = v2[1];
  v14 = v2[2];
  v2[24] = v15;
  v2[25] = v5;
  v2[26] = v11;
  v2[27] = v12;
  v16 = *(_QWORD *)(v14 + 64);
  v17 = v2[7];
  v2[28] = v16;
  v2[29] = v17;
  v2[12] = v10;
  v2[13] = v13;
  v2[14] = v15;
  v2[15] = v5;
  v2[16] = v11;
  v2[17] = v12;
  v2[18] = v16;
  v2[19] = v17;
  *(_QWORD *)(v7 - 200) = v4;
  *(_QWORD *)(v7 - 192) = &type metadata for TabSectionIdentifiersTraitKey;
  *(_QWORD *)(v7 - 184) = v6;
  *(_QWORD *)(v7 - 176) = &protocol witness table for TabSectionIdentifiersTraitKey;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v19 = lazy protocol witness table accessor for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>();
  *(_QWORD *)(v7 - 232) = OpaqueTypeConformance2;
  *(_QWORD *)(v7 - 224) = v19;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v7 - 232);
  swift_getAssociatedConformanceWitness();
  StaticIf<>.init(_:then:else:)((uint64_t)&type metadata for InAdaptableTabViewContext, (void (*)(void))partial apply for closure #1 in TabSection<>.TabSectionView.body.getter);
}

uint64_t sub_1877E0404()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v0[31] = v2;
  v0[32] = v3;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v0 + 31);
  static ViewBuilder.buildExpression<A>(_:)(v4, v1, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(*v0 + 8);
  v7(v4, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v1, v0[8]);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(v5, v1);
}

void closure #1 in TabSection<>.TabSectionView.body.getter()
{
  type metadata accessor for TabSection<>.TabSectionView();
}

void sub_1877E0500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v13 - 360) = a1;
  v14 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v13 - 368) = v14;
  *(_QWORD *)(v13 - 352) = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v13 - 384) = (char *)&a9 - v15;
  *(_QWORD *)(v13 - 408) = v12;
  *(_QWORD *)(v13 - 416) = v10;
  *(_QWORD *)(v13 - 400) = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v13 - 328) = v11;
  v16 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v17 = type metadata accessor for ModifiedContent();
  v18 = type metadata accessor for ModifiedContent();
  v19 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v13 - 160) = v9;
  *(_QWORD *)(v13 - 152) = &protocol witness table for UpdateDefaultTabFill;
  v20 = MEMORY[0x1E0CE2E70];
  *(_QWORD *)(v13 - 176) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v13 - 160);
  *(_QWORD *)(v13 - 168) = &protocol witness table for ViewInputFlagModifier<A>;
  *(_QWORD *)(v13 - 192) = MEMORY[0x18D75FFDC](v20, v17, v13 - 176);
  *(_QWORD *)(v13 - 184) = &protocol witness table for AccessibilityAttachmentModifier;
  *(_QWORD *)(v13 - 208) = MEMORY[0x18D75FFDC](v20, v18, v13 - 192);
  *(_QWORD *)(v13 - 200) = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  v21 = MEMORY[0x18D75FFDC](v20, v19, v13 - 208);
  *(_QWORD *)(v13 - 144) = &type metadata for LabelPlatformItemsStrategy;
  *(_QWORD *)(v13 - 136) = v19;
  *(_QWORD *)(v13 - 128) = &type metadata for TabItem.TraitKey;
  *(_QWORD *)(v13 - 120) = &protocol witness table for LabelPlatformItemsStrategy;
  *(_QWORD *)(v13 - 112) = v21;
  *(_QWORD *)(v13 - 104) = &protocol witness table for TabItem.TraitKey;
  type metadata accessor for PlatformItemTraitWriter();
}

uint64_t sub_1877E06BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t OpaqueTypeConformance2;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  _BYTE v50[96];

  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>(255);
  type metadata accessor for ModifiedContent();
  v3 = MEMORY[0x1E0CE52D0];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsSectionHeaderTraitKey>, MEMORY[0x1E0CE5A98], MEMORY[0x1E0CE5A88], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SectionHeaderStyleContext>, MEMORY[0x1E0CE5EB8], MEMORY[0x1E0CE5EA8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  type metadata accessor for ModifiedContent();
  v4 = v0;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for TagValueTraitKey();
  v7 = MEMORY[0x1E0CE3440];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v6);
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  *(_QWORD *)(v2 - 504) = v4;
  v8 = type metadata accessor for Optional();
  *(_QWORD *)(v2 - 216) = AssociatedConformanceWitness;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v8, v2 - 216);
  v9 = type metadata accessor for TagValueTraitKey();
  MEMORY[0x18D75FFDC](v7, v9);
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsCompactTabRepresentationTraitKey>, (uint64_t)&type metadata for IsCompactTabRepresentationTraitKey, (uint64_t)&protocol witness table for IsCompactTabRepresentationTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v3);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  v10 = type metadata accessor for TupleView();
  v11 = type metadata accessor for Group();
  *(_QWORD *)(v2 - 400) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v2 - 456) = v11;
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  *(_QWORD *)(v2 - 496) = &v50[-v14];
  *(_QWORD *)(v2 - 224) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v10, v13);
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v11, v2 - 224);
  *(_QWORD *)(v2 - 464) = v15;
  *(_QWORD *)(v2 - 144) = v11;
  *(_QWORD *)(v2 - 136) = &type metadata for TabSectionIdentifiersTraitKey;
  *(_QWORD *)(v2 - 128) = v15;
  *(_QWORD *)(v2 - 120) = &protocol witness table for TabSectionIdentifiersTraitKey;
  v16 = MEMORY[0x18D75FF88](0, v2 - 144, MEMORY[0x1E0CE6E38], 0);
  *(_QWORD *)(v2 - 424) = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v2 - 472) = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v2 - 488) = &v50[-v18];
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StyleContextWriter<TabSectionStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionStyleContext and conformance TabSectionStyleContext, (uint64_t)&type metadata for TabSectionStyleContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v19 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v2 - 440) = v19;
  *(_QWORD *)(v2 - 432) = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v2 - 480) = &v50[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)(v2 - 448) = &v50[-v24];
  *(_QWORD *)(v2 - 304) = *(_QWORD *)(v2 - 328);
  v25 = *(_QWORD *)(v2 - 416);
  *(_QWORD *)(v2 - 296) = v25;
  v26 = v1;
  *(_QWORD *)(v2 - 288) = v1;
  *(_QWORD *)(v2 - 280) = v4;
  v27 = *(_QWORD *)(v2 - 392);
  *(_QWORD *)(v2 - 272) = v27;
  v28 = *(_QWORD *)(v2 - 408);
  *(_QWORD *)(v2 - 264) = v28;
  v29 = *(_QWORD *)(v2 - 376);
  v30 = *(_QWORD *)(v2 - 344);
  *(_QWORD *)(v2 - 256) = v29;
  *(_QWORD *)(v2 - 248) = v30;
  Group<A>.init(content:)();
  v31 = *(_QWORD *)(v2 - 368);
  v32 = *(_QWORD *)(v2 - 384);
  v33 = *(_QWORD *)(v2 - 360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v32, v30, v33);
  v34 = (*(unsigned __int8 *)(v31 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  v35 = (char *)swift_allocObject();
  *((_QWORD *)v35 + 2) = *(_QWORD *)(v2 - 328);
  *((_QWORD *)v35 + 3) = v25;
  v36 = *(_QWORD *)(v2 - 504);
  *((_QWORD *)v35 + 4) = v26;
  *((_QWORD *)v35 + 5) = v36;
  *((_QWORD *)v35 + 6) = v27;
  *((_QWORD *)v35 + 7) = v28;
  *((_QWORD *)v35 + 8) = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(&v35[v34], v32, v33);
  v37 = *(_QWORD *)(v2 - 488);
  v38 = *(_QWORD *)(v2 - 456);
  v39 = *(_QWORD *)(v2 - 464);
  v40 = *(_QWORD *)(v2 - 496);
  View.transformTrait<A>(_:transform:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 400) + 8))(v40, v38);
  *(_QWORD *)(v2 - 144) = v38;
  *(_QWORD *)(v2 - 136) = &type metadata for TabSectionIdentifiersTraitKey;
  *(_QWORD *)(v2 - 128) = v39;
  *(_QWORD *)(v2 - 120) = &protocol witness table for TabSectionIdentifiersTraitKey;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type TabSectionStyleContext and conformance TabSectionStyleContext();
  v42 = *(_QWORD *)(v2 - 480);
  v43 = *(_QWORD *)(v2 - 472);
  View.styleContext<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 424) + 8))(v37, v43);
  v44 = lazy protocol witness table accessor for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>();
  *(_QWORD *)(v2 - 240) = OpaqueTypeConformance2;
  *(_QWORD *)(v2 - 232) = v44;
  v45 = *(_QWORD *)(v2 - 440);
  v46 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v45, v2 - 240);
  v47 = *(_QWORD *)(v2 - 448);
  static ViewBuilder.buildExpression<A>(_:)(v42, v45, v46);
  v48 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 432) + 8);
  v48(v42, v45);
  static ViewBuilder.buildBlock<A>(_:)(v47, v45, *(_QWORD *)(v2 - 336));
  return ((uint64_t (*)(uint64_t, uint64_t))v48)(v47, v45);
}

void closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[94];
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[2];
  uint64_t v46;

  v41[43] = a4;
  v41[44] = a8;
  v41[39] = a7;
  v41[18] = a3;
  v41[23] = a1;
  v41[35] = a9;
  v12 = type metadata accessor for ModifiedContent();
  v41[34] = *(_QWORD *)(v12 - 8);
  v41[31] = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v41[32] = (char *)v41 - v14;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsCompactTabRepresentationTraitKey>, (uint64_t)&type metadata for IsCompactTabRepresentationTraitKey, (uint64_t)&protocol witness table for IsCompactTabRepresentationTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v15 = type metadata accessor for ModifiedContent();
  v16 = *(_QWORD *)(v15 - 8);
  v41[29] = v15;
  v41[33] = v16;
  MEMORY[0x1E0C80A78](v15, v17);
  v41[30] = (char *)v41 - v18;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v41[47] = a5;
  v20 = AssociatedConformanceWitness;
  v41[45] = AssociatedConformanceWitness;
  v21 = type metadata accessor for TagValueTraitKey();
  v22 = MEMORY[0x1E0CE3440];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v21);
  v41[11] = type metadata accessor for _TraitWritingModifier();
  v41[26] = type metadata accessor for ModifiedContent();
  v23 = type metadata accessor for Optional();
  v46 = v20;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v23, &v46);
  v24 = type metadata accessor for TagValueTraitKey();
  MEMORY[0x18D75FFDC](v22, v24);
  v41[16] = type metadata accessor for _TraitWritingModifier();
  v25 = type metadata accessor for ModifiedContent();
  v26 = *(_QWORD *)(v25 - 8);
  v41[27] = v25;
  v41[28] = v26;
  MEMORY[0x1E0C80A78](v25, v27);
  v41[24] = (char *)v41 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v41[25] = (char *)v41 - v31;
  v41[20] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v32, v33);
  v41[19] = (char *)v41 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v36 = type metadata accessor for ModifiedContent();
  v37 = type metadata accessor for ModifiedContent();
  v38 = type metadata accessor for ModifiedContent();
  v45[0] = a6;
  v45[1] = &protocol witness table for UpdateDefaultTabFill;
  v39 = MEMORY[0x1E0CE2E70];
  v44[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v35, v45);
  v44[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v43[0] = MEMORY[0x18D75FFDC](v39, v36, v44);
  v43[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v42[0] = MEMORY[0x18D75FFDC](v39, v37, v43);
  v42[1] = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  v40 = MEMORY[0x18D75FFDC](v39, v38, v42);
  v41[87] = &type metadata for LabelPlatformItemsStrategy;
  v41[88] = v38;
  v41[89] = &type metadata for TabItem.TraitKey;
  v41[90] = &protocol witness table for LabelPlatformItemsStrategy;
  v41[91] = v40;
  v41[92] = &protocol witness table for TabItem.TraitKey;
  type metadata accessor for PlatformItemTraitWriter();
}

void sub_1877E10F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t AssociatedTypeWitness;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v13 = v10;
  *v9 = v10;
  v9[9] = type metadata accessor for ModifiedContent();
  v9[10] = type metadata accessor for ModifiedContent();
  type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>(255);
  v14 = type metadata accessor for ModifiedContent();
  v15 = *(_QWORD *)(v14 - 8);
  v9[6] = v14;
  v9[15] = v15;
  MEMORY[0x1E0C80A78](v14, v16);
  v9[2] = (char *)&a9 - v17;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsSectionHeaderTraitKey>, MEMORY[0x1E0CE5A98], MEMORY[0x1E0CE5A88], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v18 = type metadata accessor for ModifiedContent();
  v19 = *(_QWORD *)(v18 - 8);
  v9[7] = v18;
  v9[14] = v19;
  MEMORY[0x1E0C80A78](v18, v20);
  v9[5] = (char *)&a9 - v21;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SectionHeaderStyleContext>, MEMORY[0x1E0CE5EB8], MEMORY[0x1E0CE5EA8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v22 = type metadata accessor for ModifiedContent();
  v23 = *(_QWORD *)(v22 - 8);
  v9[8] = v22;
  v9[12] = v23;
  MEMORY[0x1E0C80A78](v22, v22);
  v9[4] = (char *)&a9 - v24;
  v9[13] = type metadata accessor for ModifiedContent();
  v25 = type metadata accessor for ModifiedContent();
  v9[17] = v25;
  v9[42] = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v9[36] = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v9[41] = (char *)&a9 - v30;
  v31 = v9[39];
  v32 = v9[18];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[38] = AssociatedTypeWitness;
  v9[40] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v34);
  MEMORY[0x1E0C80A78](v35, v36);
  v9[46] = (char *)&a9 - v37;
  *(_QWORD *)(v12 - 216) = v13;
  *(_QWORD *)(v12 - 208) = v32;
  v38 = v9[44];
  v39 = v9[47];
  *(_QWORD *)(v12 - 200) = v9[43];
  *(_QWORD *)(v12 - 192) = v39;
  v9[1] = v11;
  *(_QWORD *)(v12 - 184) = v11;
  *(_QWORD *)(v12 - 176) = v31;
  *(_QWORD *)(v12 - 168) = v38;
  type metadata accessor for TabSection<>.TabSectionView();
}

void sub_1877E1380(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1[3] = a1;
  v9 = v1[23];
  v10 = *(void (**)(uint64_t))(v6 + 56);
  v11 = v3;
  v10(v5);
  v12 = v1[38];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1[21] = AssociatedConformanceWitness;
  v1[37] = v11;
  static ViewBuilder.buildExpression<A>(_:)(v11, v12, AssociatedConformanceWitness);
  v14 = *(void (**)(uint64_t, uint64_t))(v1[40] + 8);
  v1[22] = (uint64_t)v14;
  v14(v11, v12);
  v15 = *v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1[20] + 16))(v1[19], v9 + *(int *)(a1 + 76), *v1);
  v1[50] = v15;
  v1[51] = v5;
  v1[52] = v2;
  v1[53] = v4;
  v16 = v1[1];
  v17 = v1[2];
  v18 = v1[39];
  v1[54] = v16;
  v1[55] = v18;
  v1[56] = v7;
  v1[57] = v9;
  View.tabItem<A>(_:)((uint64_t)partial apply for closure #1 in closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter, (uint64_t)(v1 + 48), v15, v16, v16, v17);
}

